{"pr_number": 1537, "pr_title": "Leader based replication - data structure updates to cache metadata response", "pr_createdAt": "2020-05-27T20:37:50Z", "pr_url": "https://github.com/linkedin/ambry/pull/1537", "timeline": [{"oid": "165494c3f1cdd1ff009804be756830bf70553aeb", "url": "https://github.com/linkedin/ambry/commit/165494c3f1cdd1ff009804be756830bf70553aeb", "message": "Data struture changes to cache the metadata response information", "committedDate": "2020-05-27T17:12:09Z", "type": "commit"}, {"oid": "d9efa9c637e42a98e17047cc4cd80fe75cab29eb", "url": "https://github.com/linkedin/ambry/commit/d9efa9c637e42a98e17047cc4cd80fe75cab29eb", "message": "Store MessageInfo instead of StoreKeys in ExchangeMetadataResponse", "committedDate": "2020-05-27T20:17:44Z", "type": "commit"}, {"oid": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "url": "https://github.com/linkedin/ambry/commit/2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "message": "Changes to format the file and add comments", "committedDate": "2020-05-27T20:40:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDA0MA==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431510040", "bodyText": "Minor: the comment looks like super long. There is a line in IDE, usually we don't code or comment after that line.", "author": "zzmao", "createdAt": "2020-05-28T00:03:27Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -62,6 +62,10 @@\n   private long reEnableReplicationTime = 0;\n   private ReplicaThread replicaThread;\n \n+  // Metadata response information (contains missing blobs, remote token, local lag from remote, etc.) of previous replication cycle.", "originalCommit": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\nindex 07ceb79e1..35c768720 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n\n@@ -62,8 +63,7 @@ public class RemoteReplicaInfo {\n   private long reEnableReplicationTime = 0;\n   private ReplicaThread replicaThread;\n \n-  // Metadata response information (contains missing blobs, remote token, local lag from remote, etc.) of previous replication cycle.\n-  // This is used in LEADER-BASED replication where standby replicas don't send the next metadata request until the missing blobs in previous metadata response are obtained via intra-dc replication.\n+  // Metadata response information received for this replica in the most recent replication cycle.\n   private ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse;\n \n   public RemoteReplicaInfo(ReplicaId replicaId, ReplicaId localReplicaId, Store localStore, FindToken token,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDE0OQ==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431510149", "bodyText": "don't need to be public.", "author": "zzmao", "createdAt": "2020-05-28T00:03:57Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1103,24 +1118,37 @@ ReplicationMetrics getReplicationMetrics() {\n   }\n \n   static class ExchangeMetadataResponse {\n-    final Set<StoreKey> missingStoreKeys;\n+    // Set of messages missing in the local store. MessageInfo contains complete information of the blob metadata like Key info, delete, ttl-update and un-delete values.\n+    final Set<MessageInfo> missingStoreMessages;\n     final FindToken remoteToken;\n     final long localLagFromRemoteInBytes;\n     final ServerErrorCode serverErrorCode;\n \n-    ExchangeMetadataResponse(Set<StoreKey> missingStoreKeys, FindToken remoteToken, long localLagFromRemoteInBytes) {\n-      this.missingStoreKeys = missingStoreKeys;\n+    ExchangeMetadataResponse(Set<MessageInfo> missingStoreMessages, FindToken remoteToken,\n+        long localLagFromRemoteInBytes) {\n+      this.missingStoreMessages = missingStoreMessages;\n       this.remoteToken = remoteToken;\n       this.localLagFromRemoteInBytes = localLagFromRemoteInBytes;\n       this.serverErrorCode = ServerErrorCode.No_Error;\n     }\n \n     ExchangeMetadataResponse(ServerErrorCode errorCode) {\n-      missingStoreKeys = null;\n-      remoteToken = null;\n-      localLagFromRemoteInBytes = -1;\n+      this.missingStoreMessages = null;\n+      this.remoteToken = null;\n+      this.localLagFromRemoteInBytes = -1;\n       this.serverErrorCode = errorCode;\n     }\n+\n+    /**\n+     * Utility method to extract store keys from messages\n+     */\n+    public static Set<StoreKey> getStoreKeysFromMessages(Set<MessageInfo> messageInfos) {", "originalCommit": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex edc9040e7..12278c619 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -1118,7 +1131,7 @@ public class ReplicaThread implements Runnable {\n   }\n \n   static class ExchangeMetadataResponse {\n-    // Set of messages missing in the local store. MessageInfo contains complete information of the blob metadata like Key info, delete, ttl-update and un-delete values.\n+    // Set of messages missing in the local store.\n     final Set<MessageInfo> missingStoreMessages;\n     final FindToken remoteToken;\n     final long localLagFromRemoteInBytes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDIyMQ==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431510221", "bodyText": "Can we make it an individual class?", "author": "zzmao", "createdAt": "2020-05-28T00:04:17Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1103,24 +1118,37 @@ ReplicationMetrics getReplicationMetrics() {\n   }\n \n   static class ExchangeMetadataResponse {", "originalCommit": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex edc9040e7..12278c619 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -1118,7 +1131,7 @@ public class ReplicaThread implements Runnable {\n   }\n \n   static class ExchangeMetadataResponse {\n-    // Set of messages missing in the local store. MessageInfo contains complete information of the blob metadata like Key info, delete, ttl-update and un-delete values.\n+    // Set of messages missing in the local store.\n     final Set<MessageInfo> missingStoreMessages;\n     final FindToken remoteToken;\n     final long localLagFromRemoteInBytes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMTM2Mw==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r431511363", "bodyText": "I need a little bit context here: when is the case to setExchangeMetadataResponse ?", "author": "zzmao", "createdAt": "2020-05-28T00:08:27Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -198,6 +204,24 @@ public boolean equals(Object obj) {\n     return false;\n   }\n \n+  /**\n+   * Gets the cached meta data response information received in the previous replication cycle.\n+   * Replication manager calls this method to check if there are any missing store messages that are now obtained via intra-dc replication.\n+   * @return exchangeMetadataResponse which contains the meta data response information (missing keys, token info, local lag from remote, etc.).\n+   */\n+  synchronized ReplicaThread.ExchangeMetadataResponse getExchangeMetadataResponse() {\n+    return exchangeMetadataResponse;\n+  }\n+\n+  /**\n+   * Stores/caches the meta data response received in the previous replication cycle.\n+   * Replica threads calls this method to store the metadata response for standby replicas.\n+   * @param exchangeMetadataResponse contains the meta data response information (missing keys, token info, local lag from remote, etc.).\n+   */\n+  synchronized void setExchangeMetadataResponse(ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse) {", "originalCommit": "2d2d23084d0db439062f25abf5330b0d7ccbcf5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4MjQ5MA==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432982490", "bodyText": "I am trying to understand why this method should be synchronized ?", "author": "jsjtzyy", "createdAt": "2020-05-31T20:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\nindex 07ceb79e1..35c768720 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n\n@@ -205,18 +205,17 @@ public class RemoteReplicaInfo {\n   }\n \n   /**\n-   * Gets the cached meta data response information received in the previous replication cycle.\n-   * Replication manager calls this method to check if there are any missing store messages that are now obtained via intra-dc replication.\n-   * @return exchangeMetadataResponse which contains the meta data response information (missing keys, token info, local lag from remote, etc.).\n+   * Get the meta data response information received for this replica in the most recent replication cycle.\n+   * @return exchangeMetadataResponse contains the meta data response (missing keys, token info, local lag from remote, etc.).\n    */\n   synchronized ReplicaThread.ExchangeMetadataResponse getExchangeMetadataResponse() {\n     return exchangeMetadataResponse;\n   }\n \n   /**\n-   * Stores/caches the meta data response received in the previous replication cycle.\n-   * Replica threads calls this method to store the metadata response for standby replicas.\n-   * @param exchangeMetadataResponse contains the meta data response information (missing keys, token info, local lag from remote, etc.).\n+   * Set the meta data exchange information received for this replica in the most recent replication cycle.\n+   * Replica threads calls this method to store the metadata responses during replication cycles.\n+   * @param exchangeMetadataResponse contains meta data response (missing keys, token info, local lag from remote, etc.).\n    */\n   synchronized void setExchangeMetadataResponse(ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse) {\n     this.exchangeMetadataResponse = exchangeMetadataResponse;\n"}}, {"oid": "aece1f434bb47e62b782f954652ed791904736d4", "url": "https://github.com/linkedin/ambry/commit/aece1f434bb47e62b782f954652ed791904736d4", "message": "Changes to cache the ExchangeMetadataResponse in RemoteReplicaInfo objects.\nCached response information will be used by standby replicas to track the missing keys coming in via intra-dc replication.", "committedDate": "2020-05-28T03:31:36Z", "type": "commit"}, {"oid": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "url": "https://github.com/linkedin/ambry/commit/bf8291fd6c152f4898e76d039387ecd5de4463c9", "message": "Change the access modifier from public to package-private and make comments more concise.", "committedDate": "2020-05-29T20:55:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMTA4NQ==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432911085", "bodyText": "nit: update the comment at line 641 as well.", "author": "jsjtzyy", "createdAt": "2020-05-31T05:24:02Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -617,56 +642,56 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n-   * @return List of store keys that are missing from the local store\n+   * @return List of store messages that are missing from the local store\n    * @throws StoreException if store error (usually IOError) occurs when getting missing keys.\n    */\n-  private Set<StoreKey> getMissingStoreKeys(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,\n+  private Set<MessageInfo> getMissingStoreMessages(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,", "originalCommit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex 12278c619..c8edaa2c8 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -638,7 +639,7 @@ public class ReplicaThread implements Runnable {\n   }\n \n   /**\n-   * Gets the missing store keys by comparing the messages from the remote node\n+   * Gets the missing store messages by comparing the messages from the remote node\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMjM5Mg==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432912392", "bodyText": "nit: update this comment", "author": "jsjtzyy", "createdAt": "2020-05-31T05:48:33Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -617,56 +642,56 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n-   * @return List of store keys that are missing from the local store\n+   * @return List of store messages that are missing from the local store\n    * @throws StoreException if store error (usually IOError) occurs when getting missing keys.\n    */\n-  private Set<StoreKey> getMissingStoreKeys(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,\n+  private Set<MessageInfo> getMissingStoreMessages(ReplicaMetadataResponseInfo replicaMetadataResponseInfo,\n       DataNodeId remoteNode, RemoteReplicaInfo remoteReplicaInfo) throws StoreException {\n     long startTime = SystemTime.getInstance().milliseconds();\n     List<MessageInfo> messageInfoList = replicaMetadataResponseInfo.getMessageInfoList();\n-    Map<StoreKey, StoreKey> remoteToConvertedNonNull = new HashMap<>();\n+    Map<MessageInfo, StoreKey> remoteMessageToConvertedKeyNonNull = new HashMap<>();\n \n     for (MessageInfo messageInfo : messageInfoList) {\n       StoreKey storeKey = messageInfo.getStoreKey();\n       logger.trace(\"Remote node: {} Thread name: {} Remote replica: {} Key from remote: {}\", remoteNode, threadName,\n           remoteReplicaInfo.getReplicaId(), storeKey);\n       StoreKey convertedKey = storeKeyConverter.getConverted(storeKey);\n       if (convertedKey != null) {\n-        remoteToConvertedNonNull.put(storeKey, convertedKey);\n+        remoteMessageToConvertedKeyNonNull.put(messageInfo, convertedKey);\n       }\n     }\n     Set<StoreKey> convertedMissingStoreKeys =\n-        remoteReplicaInfo.getLocalStore().findMissingKeys(new ArrayList<>(remoteToConvertedNonNull.values()));\n-    Set<StoreKey> missingRemoteStoreKeys = new HashSet<>();\n-    remoteToConvertedNonNull.forEach((remoteKey, convertedKey) -> {\n+        remoteReplicaInfo.getLocalStore().findMissingKeys(new ArrayList<>(remoteMessageToConvertedKeyNonNull.values()));\n+    Set<MessageInfo> missingRemoteMessages = new HashSet<>();\n+    remoteMessageToConvertedKeyNonNull.forEach((messageInfo, convertedKey) -> {\n       if (convertedMissingStoreKeys.contains(convertedKey)) {\n         logger.trace(\n             \"Remote node: {} Thread name: {} Remote replica: {} Key missing id (converted): {} Key missing id (remote): {}\",\n-            remoteNode, threadName, remoteReplicaInfo.getReplicaId(), convertedKey, remoteKey);\n-        missingRemoteStoreKeys.add(remoteKey);\n+            remoteNode, threadName, remoteReplicaInfo.getReplicaId(), convertedKey, messageInfo.getStoreKey());\n+        missingRemoteMessages.add(messageInfo);\n       }\n     });\n-    if (messageInfoList.size() != 0 && missingRemoteStoreKeys.size() == 0) {\n+    if (messageInfoList.size() != 0 && missingRemoteMessages.size() == 0) {\n       // Catching up\n       replicationMetrics.allResponsedKeysExist.inc();\n     }\n     replicationMetrics.updateCheckMissingKeysTime(SystemTime.getInstance().milliseconds() - startTime,\n         replicatingFromRemoteColo, datacenterName);\n-    return missingRemoteStoreKeys;\n+    return missingRemoteMessages;\n   }\n \n   /**\n    * Takes the missing keys and the message list from the remote store and identifies messages that are deleted", "originalCommit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex 12278c619..c8edaa2c8 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -638,7 +639,7 @@ public class ReplicaThread implements Runnable {\n   }\n \n   /**\n-   * Gets the missing store keys by comparing the messages from the remote node\n+   * Gets the missing store messages by comparing the messages from the remote node\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzE3Mg==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432913172", "bodyText": "minor: store the metadata exchange response received from ...", "author": "jsjtzyy", "createdAt": "2020-05-31T06:03:33Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -480,6 +494,11 @@ public void replicate() {\n               // reason is replicaSyncUpManager may also throw exception and add one more exchangeMetadataResponse\n               // associated with same RemoteReplicaInfo.\n               exchangeMetadataResponseList.add(exchangeMetadataResponse);\n+\n+              // Also, store the metadata exchange received from remote replica in the RemoteReplicaInfo.", "originalCommit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex 12278c619..c8edaa2c8 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -495,8 +495,9 @@ public class ReplicaThread implements Runnable {\n               // associated with same RemoteReplicaInfo.\n               exchangeMetadataResponseList.add(exchangeMetadataResponse);\n \n-              // Also, store the metadata exchange received from remote replica in the RemoteReplicaInfo.\n-              // If leader based replication is enabled, standby's will advance the remote token only after missing keys in the exchangeMetadataResponse are obtained via intra-dc replication.\n+              // Also, store the metadata exchange response received from remote replica in the RemoteReplicaInfo.\n+              // If leader based replication is enabled, standby's will advance the remote token only after missing keys\n+              // in the exchangeMetadataResponse are obtained via intra-dc replication.\n               remoteReplicaInfo.setExchangeMetadataResponse(exchangeMetadataResponse);\n \n               replicationMetrics.updateLagMetricForRemoteReplica(remoteReplicaInfo,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNDEzOA==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432914138", "bodyText": "According to the usage of this method, looks like it doesn't need to be a static utility method. I think a non-static method like getMissingStoreKeys would be more appropriate. Then the code is something like this:\nreturn missingStoreMessages == null ? Collections.emptySet() : missingStoreMessages.stream().map(MessageInfo::getStoreKey).collect(Collectors.toSet());", "author": "jsjtzyy", "createdAt": "2020-05-31T06:20:06Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1103,24 +1131,37 @@ ReplicationMetrics getReplicationMetrics() {\n   }\n \n   static class ExchangeMetadataResponse {\n-    final Set<StoreKey> missingStoreKeys;\n+    // Set of messages missing in the local store.\n+    final Set<MessageInfo> missingStoreMessages;\n     final FindToken remoteToken;\n     final long localLagFromRemoteInBytes;\n     final ServerErrorCode serverErrorCode;\n \n-    ExchangeMetadataResponse(Set<StoreKey> missingStoreKeys, FindToken remoteToken, long localLagFromRemoteInBytes) {\n-      this.missingStoreKeys = missingStoreKeys;\n+    ExchangeMetadataResponse(Set<MessageInfo> missingStoreMessages, FindToken remoteToken,\n+        long localLagFromRemoteInBytes) {\n+      this.missingStoreMessages = missingStoreMessages;\n       this.remoteToken = remoteToken;\n       this.localLagFromRemoteInBytes = localLagFromRemoteInBytes;\n       this.serverErrorCode = ServerErrorCode.No_Error;\n     }\n \n     ExchangeMetadataResponse(ServerErrorCode errorCode) {\n-      missingStoreKeys = null;\n-      remoteToken = null;\n-      localLagFromRemoteInBytes = -1;\n+      this.missingStoreMessages = null;\n+      this.remoteToken = null;\n+      this.localLagFromRemoteInBytes = -1;\n       this.serverErrorCode = errorCode;\n     }\n+\n+    /**\n+     * Utility method to extract store keys from messages\n+     */\n+    static Set<StoreKey> getStoreKeysFromMessages(Set<MessageInfo> messageInfos) {", "originalCommit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex 12278c619..c8edaa2c8 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -1153,14 +1152,11 @@ public class ReplicaThread implements Runnable {\n     }\n \n     /**\n-     * Utility method to extract store keys from messages\n+     *  get the keys corresponding to the missing messages in local store\n      */\n-    static Set<StoreKey> getStoreKeysFromMessages(Set<MessageInfo> messageInfos) {\n-      if (messageInfos != null) {\n-        return messageInfos.stream().map(MessageInfo::getStoreKey).collect(Collectors.toSet());\n-      } else {\n-        return new HashSet<>();\n-      }\n+    Set<StoreKey> getMissingStoreKeys() {\n+      return missingStoreMessages == null ? Collections.emptySet()\n+          : missingStoreMessages.stream().map(MessageInfo::getStoreKey).collect(Collectors.toSet());\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNDQzOQ==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432914439", "bodyText": "Add a little more comments here regarding what we need from ExchangeMetadataResponse for leader-based replication.", "author": "jsjtzyy", "createdAt": "2020-05-31T06:24:15Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -62,6 +63,9 @@\n   private long reEnableReplicationTime = 0;\n   private ReplicaThread replicaThread;\n \n+  // Metadata response information received for this replica in the most recent replication cycle.\n+  private ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse;", "originalCommit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\nindex 35c768720..f8c7876b3 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n\n@@ -64,6 +64,9 @@ public class RemoteReplicaInfo {\n   private ReplicaThread replicaThread;\n \n   // Metadata response information received for this replica in the most recent replication cycle.\n+  // This is used during leader based replication to store the missing store messages, remote token info and local lag\n+  // from remote for non-leader remote replicas. We will track the missing store messages when they come via intra-dc\n+  // replication and update the currentToken to exchangeMetadataResponse.remoteToken after all of them are obtained.\n   private ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse;\n \n   public RemoteReplicaInfo(ReplicaId replicaId, ReplicaId localReplicaId, Store localStore, FindToken token,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4NTEwMA==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r432985100", "bodyText": "When you are working on future PR, keep in mind that exchangeMetadataResponse will be updated by multiple threads.", "author": "jsjtzyy", "createdAt": "2020-05-31T21:17:16Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java", "diffHunk": "@@ -198,6 +204,23 @@ public boolean equals(Object obj) {\n     return false;\n   }\n \n+  /**\n+   * Get the meta data response information received for this replica in the most recent replication cycle.\n+   * @return exchangeMetadataResponse contains the meta data response (missing keys, token info, local lag from remote, etc.).\n+   */\n+  synchronized ReplicaThread.ExchangeMetadataResponse getExchangeMetadataResponse() {\n+    return exchangeMetadataResponse;", "originalCommit": "bf8291fd6c152f4898e76d039387ecd5de4463c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\nindex 35c768720..f8c7876b3 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/RemoteReplicaInfo.java\n\n@@ -218,6 +221,9 @@ public class RemoteReplicaInfo {\n    * @param exchangeMetadataResponse contains meta data response (missing keys, token info, local lag from remote, etc.).\n    */\n   synchronized void setExchangeMetadataResponse(ReplicaThread.ExchangeMetadataResponse exchangeMetadataResponse) {\n+    // We are having this thread safe to avoid conflict between replica thread setting new exchangeMetadataResponse\n+    // and replica threads updating the missing store messages in current exchangeMetadataResponse after they are\n+    // written to local store via intra-dc replication (method will be added in future PR).\n     this.exchangeMetadataResponse = exchangeMetadataResponse;\n   }\n \n"}}, {"oid": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "url": "https://github.com/linkedin/ambry/commit/0b128bbbc9307febc92afb4ed181c664f8ec2914", "message": "Change method signature in ExchangeMetadataResponse class and update comments", "committedDate": "2020-06-01T04:31:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NjYyOA==", "url": "https://github.com/linkedin/ambry/pull/1537#discussion_r433556628", "bodyText": "One minor comment that should be considered in future PR: if it metadata exchange fails (i.e. due to replica unavailable) within current replication cycle, we may allow standby to send metadata request again in next cycles.", "author": "jsjtzyy", "createdAt": "2020-06-02T00:24:49Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -494,19 +514,25 @@ public void replicate() {\n                 // Must have just been stopped, just skip it and move on.\n                 logger.info(\"Local store not started for remote replica: {}\", remoteReplicaInfo.getReplicaId());\n                 exchangeMetadataResponseList.add(new ExchangeMetadataResponse(ServerErrorCode.Temporarily_Disabled));\n+                remoteReplicaInfo.setExchangeMetadataResponse(", "originalCommit": "0b128bbbc9307febc92afb4ed181c664f8ec2914", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}