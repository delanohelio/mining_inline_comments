{"pr_number": 1370, "pr_title": "Add undelete request and response", "pr_createdAt": "2020-01-28T19:30:06Z", "pr_url": "https://github.com/linkedin/ambry/pull/1370", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDMyNg==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r372084326", "bodyText": "Why this method removed?", "author": "zzmao", "createdAt": "2020-01-28T22:03:45Z", "path": "ambry-server/src/main/java/com.github.ambry.server/AmbryServerRequests.java", "diffHunk": "@@ -100,39 +100,6 @@\n     localPartitionToReplicaMap = createLocalPartitionToReplicaMap();\n   }\n \n-  @Override\n-  public void handleRequests(NetworkRequest request) throws InterruptedException {", "originalCommit": "bdff6c9b14f5a407530e58c7767e29b3d98923e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NTkwMQ==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r372085901", "bodyText": "AmbryServerRequests is a direct child of AmbryRequests and this method is trying to override the same method from AmbryRequests, but they are exactly the same method. So we can remove it.", "author": "justinlin-linkedin", "createdAt": "2020-01-28T22:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDMyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NDMwMA==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374964300", "bodyText": "typo contains the partition", "author": "jsjtzyy", "createdAt": "2020-02-04T22:39:31Z", "path": "ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java", "diffHunk": "@@ -80,4 +80,14 @@\n   default void handleAdminRequest(NetworkRequest request) throws InterruptedException, IOException {\n     throw new UnsupportedOperationException(\"Admin request not supported on this node\");\n   }\n+\n+  /**\n+   * Undelete the blob from the store.\n+   * @param request the request that contains the partitioni and the id of the blob that needs to be undeleted.", "originalCommit": "bdff6c9b14f5a407530e58c7767e29b3d98923e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65cac6803772676547b8deffa19aa6bc57ea9a51", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java b/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java\nindex cb23a3e89..bdab52a3c 100644\n--- a/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java\n+++ b/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java\n\n@@ -83,7 +83,7 @@ public interface RequestAPI {\n \n   /**\n    * Undelete the blob from the store.\n-   * @param request the request that contains the partitioni and the id of the blob that needs to be undeleted.\n+   * @param request the request that contains the partition and the id of the blob that needs to be undeleted.\n    * @throws IOException if there are I/O errors carrying our the required operation.\n    * @throws InterruptedException if request processing is interrupted.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NTc3Nw==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374965777", "bodyText": "I don't think we need to explicitly use default here.", "author": "jsjtzyy", "createdAt": "2020-02-04T22:43:07Z", "path": "ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java", "diffHunk": "@@ -80,4 +80,14 @@\n   default void handleAdminRequest(NetworkRequest request) throws InterruptedException, IOException {\n     throw new UnsupportedOperationException(\"Admin request not supported on this node\");\n   }\n+\n+  /**\n+   * Undelete the blob from the store.\n+   * @param request the request that contains the partitioni and the id of the blob that needs to be undeleted.\n+   * @throws IOException if there are I/O errors carrying our the required operation.\n+   * @throws InterruptedException if request processing is interrupted.\n+   */\n+  default void handleUndeleteRequest(NetworkRequest request) throws InterruptedException, IOException {", "originalCommit": "bdff6c9b14f5a407530e58c7767e29b3d98923e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNDU0Mg==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r375004542", "bodyText": "Interface's abstract method can't have it's owner body unless it's a default method.", "author": "justinlin-linkedin", "createdAt": "2020-02-05T00:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NTc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyOTA4NA==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r375029084", "bodyText": "I see.", "author": "jsjtzyy", "createdAt": "2020-02-05T02:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NTc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "65cac6803772676547b8deffa19aa6bc57ea9a51", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java b/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java\nindex cb23a3e89..bdab52a3c 100644\n--- a/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java\n+++ b/ambry-api/src/main/java/com.github.ambry/protocol/RequestAPI.java\n\n@@ -83,7 +83,7 @@ public interface RequestAPI {\n \n   /**\n    * Undelete the blob from the store.\n-   * @param request the request that contains the partitioni and the id of the blob that needs to be undeleted.\n+   * @param request the request that contains the partition and the id of the blob that needs to be undeleted.\n    * @throws IOException if there are I/O errors carrying our the required operation.\n    * @throws InterruptedException if request processing is interrupted.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3NTQzOA==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374975438", "bodyText": "can you also append operationTimeMs ?", "author": "jsjtzyy", "createdAt": "2020-02-04T23:08:11Z", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.protocol;\n+\n+import com.github.ambry.clustermap.ClusterMap;\n+import com.github.ambry.commons.BlobId;\n+import com.github.ambry.utils.Utils;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.WritableByteChannel;\n+\n+\n+/**\n+ * Undelete request to undelete a deleted blob.\n+ */\n+public class UndeleteRequest extends RequestOrResponse {\n+  static final short UNDELETE_REQUEST_VERSION_1 = 1;\n+  private final static short CURRENT_VERSION = UNDELETE_REQUEST_VERSION_1;\n+\n+  private int sizeSent = 0;\n+  private final BlobId blobId;\n+  private final long operationTimeMs;\n+\n+  /**\n+   * Constructs {@link UndeleteRequest} in {@link #UNDELETE_REQUEST_VERSION_1}.\n+   * @param correlationId correlationId of the undelete request\n+   * @param clientId clientId of the undelete request\n+   * @param blobId blobId of the undelete request\n+   * @param operationTimeMs the time when this operation is created (in ms).\n+   */\n+  public UndeleteRequest(int correlationId, String clientId, BlobId blobId, long operationTimeMs) {\n+    this(correlationId, clientId, blobId, operationTimeMs, CURRENT_VERSION);\n+  }\n+\n+  /**\n+   * Constructs {@link UndeleteRequest} in given version.\n+   * @param correlationId correlationId of the undelete request\n+   * @param clientId clientId of the undelete request\n+   * @param blobId blobId of the undelete request\n+   * @param operationTimeMs the time when this operation is created (in ms).\n+   * @param version version of the {@link UndeleteRequest}.\n+   */\n+  public UndeleteRequest(int correlationId, String clientId, BlobId blobId, long operationTimeMs, short version) {\n+    super(RequestOrResponseType.UndeleteRequest, version, correlationId, clientId);\n+    this.blobId = blobId;\n+    this.operationTimeMs = operationTimeMs;\n+    sizeSent = 0;\n+  }\n+\n+  public static UndeleteRequest readFrom(DataInputStream stream, ClusterMap map) throws IOException {\n+    Short version = stream.readShort();\n+    if (version != UNDELETE_REQUEST_VERSION_1) {\n+      throw new IllegalStateException(\"Unknown undelete request version \" + version);\n+    }\n+    int correlationId = stream.readInt();\n+    String clientId = Utils.readIntString(stream);\n+    BlobId id = new BlobId(stream, map);\n+    long operationTimeMs = stream.readLong();\n+    return new UndeleteRequest(correlationId, clientId, id, operationTimeMs);\n+  }\n+\n+  @Override\n+  public long writeTo(WritableByteChannel channel) throws IOException {\n+    long written = 0;\n+    if (bufferToSend == null) {\n+      bufferToSend = ByteBuffer.allocate((int) sizeInBytes());\n+      writeHeader();\n+      bufferToSend.put(blobId.toBytes());\n+      bufferToSend.putLong(operationTimeMs);\n+      bufferToSend.flip();\n+    }\n+    if (bufferToSend.remaining() > 0) {\n+      written = channel.write(bufferToSend);\n+      sizeSent += written;\n+    }\n+    return written;\n+  }\n+\n+  @Override\n+  public boolean isSendComplete() {\n+    return sizeSent == sizeInBytes();\n+  }\n+\n+  @Override\n+  public long sizeInBytes() {\n+    // header + blobId\n+    return super.sizeInBytes() + blobId.sizeInBytes() + Long.BYTES;\n+  }\n+\n+  /**\n+   * Return blob id.\n+   * @return The {@link BlobId}.\n+   */\n+  public BlobId getBlobId() {\n+    return blobId;\n+  }\n+\n+  /**\n+   * Return the account id for the blob to be undeleted.\n+   * @return the account ID.\n+   */\n+  public short getAccountId() {\n+    return blobId.getAccountId();\n+  }\n+\n+  /**\n+   * Return the container id for the blob to be undeleted.\n+   * @return the container id.\n+   */\n+  public short getContainerId() {\n+    return blobId.getContainerId();\n+  }\n+\n+  /**\n+   * Return the operationTimeMs.\n+   * @return the operationTimeMs.\n+   */\n+  public long getOperationTimeMs() {\n+    return operationTimeMs;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"UndeleteRequest[\");\n+    sb.append(\"BlobID=\").append(blobId);\n+    sb.append(\", \").append(\"PartitionId=\").append(blobId.getPartition());\n+    sb.append(\", \").append(\"ClientId=\").append(clientId);\n+    sb.append(\", \").append(\"CorrelationId=\").append(correlationId);\n+    sb.append(\", \").append(\"AccountId=\").append(blobId.getAccountId());\n+    sb.append(\", \").append(\"ContainerId=\").append(blobId.getContainerId());\n+    sb.append(\"]\");", "originalCommit": "bdff6c9b14f5a407530e58c7767e29b3d98923e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "783d829dee695e3195a4fc698c544510ef6c3453", "chunk": "diff --git a/ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteRequest.java b/ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteRequest.java\nindex 639b660fb..d566b69d4 100644\n--- a/ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteRequest.java\n+++ b/ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteRequest.java\n\n@@ -26,22 +26,20 @@ import java.nio.channels.WritableByteChannel;\n  * Undelete request to undelete a deleted blob.\n  */\n public class UndeleteRequest extends RequestOrResponse {\n+  private final BlobId blobId;\n   static final short UNDELETE_REQUEST_VERSION_1 = 1;\n   private final static short CURRENT_VERSION = UNDELETE_REQUEST_VERSION_1;\n \n   private int sizeSent = 0;\n-  private final BlobId blobId;\n-  private final long operationTimeMs;\n \n   /**\n    * Constructs {@link UndeleteRequest} in {@link #UNDELETE_REQUEST_VERSION_1}.\n    * @param correlationId correlationId of the undelete request\n    * @param clientId clientId of the undelete request\n    * @param blobId blobId of the undelete request\n-   * @param operationTimeMs the time when this operation is created (in ms).\n    */\n-  public UndeleteRequest(int correlationId, String clientId, BlobId blobId, long operationTimeMs) {\n-    this(correlationId, clientId, blobId, operationTimeMs, CURRENT_VERSION);\n+  public UndeleteRequest(int correlationId, String clientId, BlobId blobId) {\n+    this(correlationId, clientId, blobId, CURRENT_VERSION);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NDIyOQ==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r374994229", "bodyText": "Can you explain a little more about this exception?", "author": "jsjtzyy", "createdAt": "2020-02-05T00:06:13Z", "path": "ambry-protocol/src/main/java/com.github.ambry.protocol/UndeleteResponse.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.protocol;\n+\n+import com.github.ambry.server.ServerErrorCode;\n+import com.github.ambry.utils.Utils;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.WritableByteChannel;\n+\n+\n+/**\n+ * Response of undelete rqeuest.\n+ */\n+public class UndeleteResponse extends Response {\n+  private static final short UNDELETE_RESPONSE_VERSION_1 = 1;\n+  public static final short INVALID_LIFE_VERSION = -1;\n+\n+  private short lifeVersion;\n+  private static final int Life_Version_InBytes = Short.BYTES;\n+\n+  /**\n+   * Constructs a {@link UndeleteResponse} with an {@link ServerErrorCode}.\n+   * @param correlationId correlationId of the undelete response.\n+   * @param clientId clientId of the undelete response.\n+   * @param error error code returned in this undelete response.\n+   */\n+  public UndeleteResponse(int correlationId, String clientId, ServerErrorCode error) {\n+    super(RequestOrResponseType.UndeleteResponse, UNDELETE_RESPONSE_VERSION_1, correlationId, clientId, error);\n+    if (error == ServerErrorCode.No_Error) {\n+      throw new IllegalArgumentException(\"NoError is not a valid error code\");", "originalCommit": "bdff6c9b14f5a407530e58c7767e29b3d98923e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNTMyNA==", "url": "https://github.com/linkedin/ambry/pull/1370#discussion_r375005324", "bodyText": "there are two possible responses for undelete request: 1 Normal response with a lifeVersion and NO_ERROR code, 2 error response with a invalid lifeVersion number and any error code rather than NO_ERROR. That's why I am throwing out an exception here.", "author": "justinlin-linkedin", "createdAt": "2020-02-05T00:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NDIyOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "783d829dee695e3195a4fc698c544510ef6c3453", "url": "https://github.com/linkedin/ambry/commit/783d829dee695e3195a4fc698c544510ef6c3453", "message": "Add undelete request and response", "committedDate": "2020-02-05T00:43:59Z", "type": "commit"}, {"oid": "6ffed96fa824e56f12b93d233e7770228afdc64c", "url": "https://github.com/linkedin/ambry/commit/6ffed96fa824e56f12b93d233e7770228afdc64c", "message": "Format", "committedDate": "2020-02-05T00:43:59Z", "type": "commit"}, {"oid": "31e50c65f2ae504621771ca213a53f08c32f677d", "url": "https://github.com/linkedin/ambry/commit/31e50c65f2ae504621771ca213a53f08c32f677d", "message": "Add operationTimeMs", "committedDate": "2020-02-05T00:43:59Z", "type": "commit"}, {"oid": "65cac6803772676547b8deffa19aa6bc57ea9a51", "url": "https://github.com/linkedin/ambry/commit/65cac6803772676547b8deffa19aa6bc57ea9a51", "message": "Comments", "committedDate": "2020-02-05T00:48:49Z", "type": "commit"}, {"oid": "65cac6803772676547b8deffa19aa6bc57ea9a51", "url": "https://github.com/linkedin/ambry/commit/65cac6803772676547b8deffa19aa6bc57ea9a51", "message": "Comments", "committedDate": "2020-02-05T00:48:49Z", "type": "forcePushed"}]}