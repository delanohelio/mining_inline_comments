{"pr_number": 1430, "pr_title": "Revert the message header version back to 2 and fix a hard deleter race condition", "pr_createdAt": "2020-03-16T23:10:45Z", "pr_url": "https://github.com/linkedin/ambry/pull/1430", "timeline": [{"oid": "e82780b59d5b0fe8f4870c0516fabf98f2e7b6eb", "url": "https://github.com/linkedin/ambry/commit/e82780b59d5b0fe8f4870c0516fabf98f2e7b6eb", "message": "Revert the message header version back to 2", "committedDate": "2020-03-16T23:07:26Z", "type": "commit"}, {"oid": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f", "url": "https://github.com/linkedin/ambry/commit/33abdb8f741358b8a38548a6e9fb67e87ec7d63f", "message": "Fix a race condition in hard deleter", "committedDate": "2020-03-17T00:14:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393379499", "bodyText": "we don't need to persistCleanupToken in pause method, since there are only two cases we have to persist cleanup token to disk. One is when the startTokenSafeToPersist is changed, which is dealt with postLogFlush method. The other one is when the hardDeleteRecoveryRange is changed, which is dealt with performHardDelete.", "author": "justinlin-linkedin", "createdAt": "2020-03-17T00:17:23Z", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -172,8 +174,6 @@ void pause() throws StoreException, IOException {\n       if (paused.compareAndSet(false, true)) {\n         logger.info(\"HardDelete thread has been paused \");\n         index.persistIndex();\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "originalCommit": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NjM2OA==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393886368", "bodyText": "Does this mean when pause method gets the undelete lock, the performHardDelete should be complete and token should have been persisted already?", "author": "jsjtzyy", "createdAt": "2020-03-17T18:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTQ5Nw==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393889497", "bodyText": "If so, IOException in method signature can be removed", "author": "jsjtzyy", "createdAt": "2020-03-17T18:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NzczOA==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393977738", "bodyText": "that's right. Persisting recovery information to disk is not a periodical action, it's triggered on demand. When 'startTokenSafeToPersist' changes, we should write it to file. And this is taking place in postLogFlush method. When the hardDeleteRecoveryRange or endToken changes, we should write it to file. And this is taking place in performHardDelete method. So there is no need to persist it here or in shutdown.", "author": "justinlin-linkedin", "createdAt": "2020-03-17T21:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e1e3b125ffa4bc306d88188496763d55ce7171ec", "chunk": "diff --git a/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java b/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\nindex b28798d6b..11654204a 100644\n--- a/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\n+++ b/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\n\n@@ -168,7 +168,7 @@ public class HardDeleter implements Runnable {\n    * the hard delete tokens are persisted before returning from pause. Hard delete will be in a paused state until\n    * {@link #resume()} is called.\n    */\n-  void pause() throws StoreException, IOException {\n+  void pause() throws StoreException {\n     hardDeleteLock.lock();\n     try {\n       if (paused.compareAndSet(false, true)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTU0MA==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393379540", "bodyText": "same above", "author": "justinlin-linkedin", "createdAt": "2020-03-17T00:17:33Z", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -464,8 +464,6 @@ void shutdown() throws InterruptedException, StoreException, IOException {\n         }\n         shutdownLatch.await();\n         logger.info(\"Hard delete shutdown complete for store {} \", dataDir);\n-        pruneHardDeleteRecoveryRange();\n-        persistCleanupToken();", "originalCommit": "33abdb8f741358b8a38548a6e9fb67e87ec7d63f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MDk5Mg==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393890992", "bodyText": "same here, you can remove StoreException, IOException in method signature", "author": "jsjtzyy", "createdAt": "2020-03-17T18:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3Nzg1MQ==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393977851", "bodyText": "explained.", "author": "justinlin-linkedin", "createdAt": "2020-03-17T21:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTU0MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c3123d0849a42b19e3be1387ad8947599e931b83", "url": "https://github.com/linkedin/ambry/commit/c3123d0849a42b19e3be1387ad8947599e931b83", "message": "Fix the test failures", "committedDate": "2020-03-17T00:32:01Z", "type": "commit"}, {"oid": "a7d6033d4f9665846efb430570edffd370cf4dad", "url": "https://github.com/linkedin/ambry/commit/a7d6033d4f9665846efb430570edffd370cf4dad", "message": "Fix test error", "committedDate": "2020-03-17T01:38:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA5Mw==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393856093", "bodyText": "nit: move '// + 14' to separate line and better to add a TODO ahead of it.", "author": "jsjtzyy", "createdAt": "2020-03-17T17:39:42Z", "path": "ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java", "diffHunk": "@@ -311,9 +311,9 @@ public void endToEndTestHardDeletes() throws Exception {\n     // For each future change to this offset, add to this variable and write an explanation of why the number changed.\n     // old value: 198728. Increased by 4 to 198732 because the format for delete record went from 2 to 3 which adds\n     // 4 bytes (two shorts) extra. The last record is a delete record so its extra 4 bytes are not (yet) added\n-    // Add 14 here, since the message header version went from 2 to 3 and adds a short to every record, which include 6\n+    // Add 14 here for version 3, since the message header version went from 2 to 3 and adds a short to every record, which include 6\n     // puts and 1 delete. (last delete is not included).\n-    int expectedTokenValueT1 = 198732 + 14;\n+    int expectedTokenValueT1 = 198732;// + 14", "originalCommit": "a7d6033d4f9665846efb430570edffd370cf4dad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NzkzMw==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393977933", "bodyText": "updated.", "author": "justinlin-linkedin", "createdAt": "2020-03-17T21:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e1e3b125ffa4bc306d88188496763d55ce7171ec", "chunk": "diff --git a/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java b/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java\nindex a5d0fa3f8..9cb155c20 100644\n--- a/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java\n+++ b/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java\n\n@@ -311,9 +311,10 @@ public class ServerHardDeleteTest {\n     // For each future change to this offset, add to this variable and write an explanation of why the number changed.\n     // old value: 198728. Increased by 4 to 198732 because the format for delete record went from 2 to 3 which adds\n     // 4 bytes (two shorts) extra. The last record is a delete record so its extra 4 bytes are not (yet) added\n-    // Add 14 here for version 3, since the message header version went from 2 to 3 and adds a short to every record, which include 6\n-    // puts and 1 delete. (last delete is not included).\n-    int expectedTokenValueT1 = 198732;// + 14\n+    //\n+    // Add 14 here when changing message header version to 3, since the message header version went from 2 to 3 and adds\n+    // a short to every record, which include 6 puts and 1 delete. (last delete is not included).\n+    int expectedTokenValueT1 = 198732;\n     ensureCleanupTokenCatchesUp(chosenPartition.getReplicaIds().get(0).getReplicaPath(), mockClusterMap,\n         expectedTokenValueT1);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjI5NA==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393856294", "bodyText": "same here", "author": "jsjtzyy", "createdAt": "2020-03-17T17:40:00Z", "path": "ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java", "diffHunk": "@@ -350,7 +350,7 @@ public void endToEndTestHardDeletes() throws Exception {\n \n     time.sleep(TimeUnit.DAYS.toMillis(1));\n     // For each future change to this offset, add to this variable and write an explanation of why the number changed.\n-    int expectedTokenValueT2 = 298416 + 98 + 14 * 2;\n+    int expectedTokenValueT2 = 298416 + 98;// + 14 * 2", "originalCommit": "a7d6033d4f9665846efb430570edffd370cf4dad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1e3b125ffa4bc306d88188496763d55ce7171ec", "chunk": "diff --git a/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java b/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java\nindex a5d0fa3f8..9cb155c20 100644\n--- a/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java\n+++ b/ambry-server/src/integration-test/java/com.github.ambry.server/ServerHardDeleteTest.java\n\n@@ -350,13 +351,15 @@ public class ServerHardDeleteTest {\n \n     time.sleep(TimeUnit.DAYS.toMillis(1));\n     // For each future change to this offset, add to this variable and write an explanation of why the number changed.\n-    int expectedTokenValueT2 = 298416 + 98;// + 14 * 2\n+    int expectedTokenValueT2 = 298416 + 98;\n     // old value: 298400. Increased by 16 (4 * 4) to 298416 because the format for delete record went from 2 to 3 which\n     // adds 4 bytes (two shorts) extra. The last record is a delete record so its extra 4 bytes are not added\n+    //\n     // old value 298416. Increased by 98. The end offset is now a journal-based offset, so the offset is not inclusive.\n     // It points to the last record in the journal. Before adding an undelete record, the last record in journal is the\n     // delete record for blob 6, now it's undelete for blob 0. Since a delete record is 98 bytes, so increase 98 bytes.\n-    // old value is 298416 + 98. Increased by 28 since the message header version went from 2 to 3, which adds a short\n+    //\n+    // old value is 298416 + 98. Increased by 28 when changing the message header version from 2 to 3, which adds a short\n     // to all the records, which includes 9 puts and 5 deletes and 1 undelete. Undelete is not include since it's the last\n     // record.\n     ensureCleanupTokenCatchesUp(chosenPartition.getReplicaIds().get(0).getReplicaPath(), mockClusterMap,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NzExNA==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393857114", "bodyText": "nit: format this file", "author": "jsjtzyy", "createdAt": "2020-03-17T17:41:17Z", "path": "ambry-server/src/test/java/com.github.ambry.server/AmbryServerRequestsTest.java", "diffHunk": "@@ -819,6 +822,7 @@ public void undeleteEnableDisableTest() throws Exception {\n    */\n   @Test\n   public void undeleteTest() throws Exception {\n+    Assume.assumeTrue(MessageFormatRecord.getCurrentMessageHeaderVersion() >= MessageFormatRecord.Message_Header_Version_V3);", "originalCommit": "a7d6033d4f9665846efb430570edffd370cf4dad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1e3b125ffa4bc306d88188496763d55ce7171ec", "chunk": "diff --git a/ambry-server/src/test/java/com.github.ambry.server/AmbryServerRequestsTest.java b/ambry-server/src/test/java/com.github.ambry.server/AmbryServerRequestsTest.java\nindex 4535009a9..37f6e5415 100644\n--- a/ambry-server/src/test/java/com.github.ambry.server/AmbryServerRequestsTest.java\n+++ b/ambry-server/src/test/java/com.github.ambry.server/AmbryServerRequestsTest.java\n\n@@ -822,7 +823,8 @@ public class AmbryServerRequestsTest {\n    */\n   @Test\n   public void undeleteTest() throws Exception {\n-    Assume.assumeTrue(MessageFormatRecord.getCurrentMessageHeaderVersion() >= MessageFormatRecord.Message_Header_Version_V3);\n+    Assume.assumeTrue(\n+        MessageFormatRecord.getCurrentMessageHeaderVersion() >= MessageFormatRecord.Message_Header_Version_V3);\n     MockPartitionId id = (MockPartitionId) clusterMap.getWritablePartitionIds(DEFAULT_PARTITION_CLASS).get(0);\n     int correlationId = TestUtils.RANDOM.nextInt();\n     String clientId = TestUtils.getRandomString(10);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTkxMw==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393889913", "bodyText": "any reason to remove this check?", "author": "jsjtzyy", "createdAt": "2020-03-17T18:35:02Z", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -648,35 +646,36 @@ private void performHardDeletes(List<MessageInfo> messageInfoList) throws StoreE\n       Iterator<HardDeleteInfo> hardDeleteIterator = hardDelete.getHardDeleteMessages(readSet, factory, null);\n       Iterator<BlobReadOptions> readOptionsIterator = readOptionsList.iterator();\n \n-      /* Next, get the information to persist hard delete recovery info. Get all the information and save it, as only\n-       * after the whole range is persisted can we start with the actual log write */\n-      while (hardDeleteIterator.hasNext()) {\n-        if (!enabled.get()) {\n-          throw new StoreException(\"Aborting hard deletes as store is shutting down\",\n-              StoreErrorCodes.Store_Shutting_Down);", "originalCommit": "a7d6033d4f9665846efb430570edffd370cf4dad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3OTUzNA==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393979534", "bodyText": "I actually don't have to, I will add it back", "author": "justinlin-linkedin", "createdAt": "2020-03-17T21:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4OTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "11f3ced606b85570a3f0db3c1504bb4ae27bc812", "chunk": "diff --git a/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java b/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\nindex b28798d6b..4a4692454 100644\n--- a/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\n+++ b/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\n\n@@ -651,6 +653,10 @@ public class HardDeleter implements Runnable {\n         /* Next, get the information to persist hard delete recovery info. Get all the information and save it, as only\n          * after the whole range is persisted can we start with the actual log write */\n         while (hardDeleteIterator.hasNext()) {\n+          if (!enabled.get()) {\n+            throw new StoreException(\"Aborting hard deletes as store is shutting down\",\n+                StoreErrorCodes.Store_Shutting_Down);\n+          }\n           HardDeleteInfo hardDeleteInfo = hardDeleteIterator.next();\n           BlobReadOptions readOptions = readOptionsIterator.next();\n           if (hardDeleteInfo == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDE3Ng==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r393894176", "bodyText": "Add some notes here to remind people how to increase this version? just like you description.", "author": "zzmao", "createdAt": "2020-03-17T18:42:18Z", "path": "ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatRecord.java", "diffHunk": "@@ -59,7 +59,7 @@\n   public static final short Metadata_Content_Version_V3 = 3;\n   public static final int Message_Header_Invalid_Relative_Offset = -1;\n \n-  static short headerVersionToUse = Message_Header_Version_V3;", "originalCommit": "a7d6033d4f9665846efb430570edffd370cf4dad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1e3b125ffa4bc306d88188496763d55ce7171ec", "chunk": "diff --git a/ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatRecord.java b/ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatRecord.java\nindex 44c6bd4ac..bd7c7e798 100644\n--- a/ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatRecord.java\n+++ b/ambry-messageformat/src/main/java/com.github.ambry.messageformat/MessageFormatRecord.java\n\n@@ -59,6 +59,13 @@ public class MessageFormatRecord {\n   public static final short Metadata_Content_Version_V3 = 3;\n   public static final int Message_Header_Invalid_Relative_Offset = -1;\n \n+  // Bumping version to a high number requires several things\n+  // 1. Change transformers to support newer version, in open source and closed source\n+  // 2. Release a newer version to all ambry-frontend and ambry-server\n+  // 3. Change the version to a high value.\n+  //\n+  // We have to do first two steps, then can we bump the version, otherwise, other ambry-server would\n+  // fail to replicate blobs through GetRequest/GetResponse, they don't know how to decode the bytes.\n   static short headerVersionToUse = Message_Header_Version_V2;\n \n   private static final short Delete_Subrecord_Version_V1 = 1;\n"}}, {"oid": "e1e3b125ffa4bc306d88188496763d55ce7171ec", "url": "https://github.com/linkedin/ambry/commit/e1e3b125ffa4bc306d88188496763d55ce7171ec", "message": "Address comments", "committedDate": "2020-03-17T21:09:02Z", "type": "commit"}, {"oid": "017dd654e06df9579b20ffe5b448dc8368cd518c", "url": "https://github.com/linkedin/ambry/commit/017dd654e06df9579b20ffe5b448dc8368cd518c", "message": "Add paused condition", "committedDate": "2020-03-17T21:18:09Z", "type": "commit"}, {"oid": "11f3ced606b85570a3f0db3c1504bb4ae27bc812", "url": "https://github.com/linkedin/ambry/commit/11f3ced606b85570a3f0db3c1504bb4ae27bc812", "message": "Address comments", "committedDate": "2020-03-17T21:26:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzg0Nw==", "url": "https://github.com/linkedin/ambry/pull/1430#discussion_r394003847", "bodyText": "good catch", "author": "jsjtzyy", "createdAt": "2020-03-17T22:21:09Z", "path": "ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java", "diffHunk": "@@ -368,16 +368,18 @@ void preLogFlush() {\n    */\n   void postLogFlush() {\n     /* start token saved before the flush is now safe to be persisted */\n+    persistFileLock.lock();\n     startTokenSafeToPersist = startTokenBeforeLogFlush;\n-    hardDeleteLock.lock();\n     try {\n-      // PersistCleanupToken because startTokenSafeToPersist changed.\n-      pruneHardDeleteRecoveryRange();\n-      persistCleanupToken();\n+      if (!isPaused()) {", "originalCommit": "11f3ced606b85570a3f0db3c1504bb4ae27bc812", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecfaa202d286129c0c85a0616bbf4da35cbca5fb", "chunk": "diff --git a/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java b/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\nindex 4a4692454..2cc438e91 100644\n--- a/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\n+++ b/ambry-store/src/main/java/com.github.ambry.store/HardDeleter.java\n\n@@ -367,19 +367,21 @@ public class HardDeleter implements Runnable {\n    * In production, this will be called in the PersistentIndex's IndexPersistor thread.\n    */\n   void postLogFlush() {\n-    /* start token saved before the flush is now safe to be persisted */\n-    persistFileLock.lock();\n-    startTokenSafeToPersist = startTokenBeforeLogFlush;\n-    try {\n-      if (!isPaused()) {\n+    // Only check if hard deleter is enabled or not, even when it's paused, we still persist to disk\n+    // since the \"is paused\" is one of the information that gets persisted.\n+    if (enabled.get()) {\n+      /* start token saved before the flush is now safe to be persisted */\n+      persistFileLock.lock();\n+      startTokenSafeToPersist = startTokenBeforeLogFlush;\n+      try {\n         // PersistCleanupToken because startTokenSafeToPersist changed.\n         pruneHardDeleteRecoveryRange();\n         persistCleanupToken();\n+      } catch (Exception e) {\n+        logger.error(\"Failed to persist cleanup token\", e);\n+      } finally {\n+        persistFileLock.unlock();\n       }\n-    } catch (Exception e) {\n-      logger.error(\"Failed to persist cleanup token\", e);\n-    } finally {\n-      persistFileLock.unlock();\n     }\n   }\n \n"}}, {"oid": "ecfaa202d286129c0c85a0616bbf4da35cbca5fb", "url": "https://github.com/linkedin/ambry/commit/ecfaa202d286129c0c85a0616bbf4da35cbca5fb", "message": "fix test error", "committedDate": "2020-03-17T23:14:24Z", "type": "commit"}, {"oid": "b04215d9586ffaaa6b609225d8a483191d3536b4", "url": "https://github.com/linkedin/ambry/commit/b04215d9586ffaaa6b609225d8a483191d3536b4", "message": "Pause should write file to disk", "committedDate": "2020-03-17T23:56:48Z", "type": "commit"}]}