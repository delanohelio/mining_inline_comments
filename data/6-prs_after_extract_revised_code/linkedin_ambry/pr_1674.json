{"pr_number": 1674, "pr_title": "[StorageQuota]Add monthly base account reports in aggregation task", "pr_createdAt": "2020-10-27T18:50:00Z", "pr_url": "https://github.com/linkedin/ambry/pull/1674", "timeline": [{"oid": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "url": "https://github.com/linkedin/ambry/commit/3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "message": "[StorageQuota]Add monthly base account reports in aggregation task", "committedDate": "2020-10-27T20:12:29Z", "type": "commit"}, {"oid": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "url": "https://github.com/linkedin/ambry/commit/3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "message": "[StorageQuota]Add monthly base account reports in aggregation task", "committedDate": "2020-10-27T20:12:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwNDM0MA==", "url": "https://github.com/linkedin/ambry/pull/1674#discussion_r513804340", "bodyText": "nit: move this to the beginning of this class.", "author": "jsjtzyy", "createdAt": "2020-10-28T22:40:54Z", "path": "ambry-api/src/main/java/com/github/ambry/config/ClusterMapConfig.java", "diffHunk": "@@ -296,6 +296,15 @@\n   @Config(\"clustermap.retry.disable.partition.completion.backoff.ms\")\n   public final int clustermapRetryDisablePartitionCompletionBackoffMs;\n \n+  public static final String ENABLE_AGGREGATED_MONTHLY_ACCOUNT_REPORT =\n+      \"clustermap.enable.aggregated.monthly.account.report\";", "originalCommit": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/config/ClusterMapConfig.java b/ambry-api/src/main/java/com/github/ambry/config/ClusterMapConfig.java\nindex 5eb56535a..d1268ad15 100644\n--- a/ambry-api/src/main/java/com/github/ambry/config/ClusterMapConfig.java\n+++ b/ambry-api/src/main/java/com/github/ambry/config/ClusterMapConfig.java\n\n@@ -296,8 +298,6 @@ public class ClusterMapConfig {\n   @Config(\"clustermap.retry.disable.partition.completion.backoff.ms\")\n   public final int clustermapRetryDisablePartitionCompletionBackoffMs;\n \n-  public static final String ENABLE_AGGREGATED_MONTHLY_ACCOUNT_REPORT =\n-      \"clustermap.enable.aggregated.monthly.account.report\";\n   /**\n    * True to enable aggregation task to generate a base account report for each month.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNzA5Mw==", "url": "https://github.com/linkedin/ambry/pull/1674#discussion_r513817093", "bodyText": "Minor: let's use \"Ambry-Test\" to avoid using internal cluster name.", "author": "jsjtzyy", "createdAt": "2020-10-28T23:16:20Z", "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.server.StatsReportType;\n+import com.github.ambry.server.StatsSnapshot;\n+import com.github.ambry.server.StatsWrapper;\n+import com.github.ambry.utils.MockTime;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.nio.file.Files;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Random;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.zookeeper.data.Stat;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+\n+/**\n+ * Unit test class for {@link HelixHealthReportAggregatorTask}.\n+ */\n+@RunWith(Parameterized.class)\n+public class HelixHealthReportAggregationTaskTest {\n+  private static final String CLUSTER_NAME = \"Ambry-prod\";", "originalCommit": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "chunk": "diff --git a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\nindex 381605b5f..ea9ee059b 100644\n--- a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n+++ b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n\n@@ -56,7 +56,7 @@ import org.junit.runners.Parameterized;\n  */\n @RunWith(Parameterized.class)\n public class HelixHealthReportAggregationTaskTest {\n-  private static final String CLUSTER_NAME = \"Ambry-prod\";\n+  private static final String CLUSTER_NAME = \"Ambry-test\";\n   private static final String INSTANCE_NAME = \"helix.ambry.com\";\n   private static final long RELEVANT_PERIOD_IN_MINUTES = 60;\n   private static final String HEALTH_REPORT_NAME_ACCOUNT = \"AccountReport\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNzY2OQ==", "url": "https://github.com/linkedin/ambry/pull/1674#discussion_r513817669", "bodyText": "It doesn't seem to throw BindException directly. We probably can remove e instanceof BindException", "author": "jsjtzyy", "createdAt": "2020-10-28T23:18:13Z", "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.server.StatsReportType;\n+import com.github.ambry.server.StatsSnapshot;\n+import com.github.ambry.server.StatsWrapper;\n+import com.github.ambry.utils.MockTime;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.nio.file.Files;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Random;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.zookeeper.data.Stat;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+\n+/**\n+ * Unit test class for {@link HelixHealthReportAggregatorTask}.\n+ */\n+@RunWith(Parameterized.class)\n+public class HelixHealthReportAggregationTaskTest {\n+  private static final String CLUSTER_NAME = \"Ambry-prod\";\n+  private static final String INSTANCE_NAME = \"helix.ambry.com\";\n+  private static final long RELEVANT_PERIOD_IN_MINUTES = 60;\n+  private static final String HEALTH_REPORT_NAME_ACCOUNT = \"AccountReport\";\n+  private static final String STATS_FIELD_NAME_ACCOUNT = \"AccountStats\";\n+  private static final String HEALTH_REPORT_NAME_PARTITION = \"PartitionClassReport\";\n+  private static final String STATS_FIELD_NAME_PARTITION = \"PartitionClassStats\";\n+  private MockHelixManager mockHelixManager;\n+  private HelixHealthReportAggregatorTask task;\n+  private MockTime mockTime;\n+  private MockHelixAdmin mockHelixAdmin;\n+  private ClusterMapConfig clusterMapConfig;\n+  private TestUtils.ZkInfo zkInfo;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private final boolean enableAggregatedMonthlyAccountReport;\n+\n+  @Parameterized.Parameters\n+  public static List<Object[]> data() {\n+    return Arrays.asList(new Object[][]{{false}, {true}});\n+  }\n+\n+  public HelixHealthReportAggregationTaskTest(boolean enableAggregatedMonthlyAccountReport) throws IOException {\n+    this.enableAggregatedMonthlyAccountReport = enableAggregatedMonthlyAccountReport;\n+    File tempDir = Files.createTempDirectory(\"HelixHealthReportAggregationTask-\" + new Random().nextInt(1000)).toFile();\n+    String tempDirPath = tempDir.getAbsolutePath();\n+    int zkPort = 13188;\n+    int maxRetries = 1000;\n+    int numRetries = 0;\n+    while (true) {\n+      if (numRetries > maxRetries) {\n+        throw new IOException(\"No ports are available to start zookeeper server\");\n+      }\n+      try {\n+        zkInfo = new TestUtils.ZkInfo(tempDirPath, \"DC1\", (byte) 0, zkPort, true);\n+        break;\n+      } catch (Exception e) {\n+        if (e instanceof BindException || e.getCause() instanceof BindException) {", "originalCommit": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "chunk": "diff --git a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\nindex 381605b5f..ea9ee059b 100644\n--- a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n+++ b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n\n@@ -56,7 +56,7 @@ import org.junit.runners.Parameterized;\n  */\n @RunWith(Parameterized.class)\n public class HelixHealthReportAggregationTaskTest {\n-  private static final String CLUSTER_NAME = \"Ambry-prod\";\n+  private static final String CLUSTER_NAME = \"Ambry-test\";\n   private static final String INSTANCE_NAME = \"helix.ambry.com\";\n   private static final long RELEVANT_PERIOD_IN_MINUTES = 60;\n   private static final String HEALTH_REPORT_NAME_ACCOUNT = \"AccountReport\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNzkyNw==", "url": "https://github.com/linkedin/ambry/pull/1674#discussion_r513817927", "bodyText": "Redundant Stringn.valueOf call", "author": "jsjtzyy", "createdAt": "2020-10-28T23:18:57Z", "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.server.StatsReportType;\n+import com.github.ambry.server.StatsSnapshot;\n+import com.github.ambry.server.StatsWrapper;\n+import com.github.ambry.utils.MockTime;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.nio.file.Files;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Random;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.zookeeper.data.Stat;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+\n+/**\n+ * Unit test class for {@link HelixHealthReportAggregatorTask}.\n+ */\n+@RunWith(Parameterized.class)\n+public class HelixHealthReportAggregationTaskTest {\n+  private static final String CLUSTER_NAME = \"Ambry-prod\";\n+  private static final String INSTANCE_NAME = \"helix.ambry.com\";\n+  private static final long RELEVANT_PERIOD_IN_MINUTES = 60;\n+  private static final String HEALTH_REPORT_NAME_ACCOUNT = \"AccountReport\";\n+  private static final String STATS_FIELD_NAME_ACCOUNT = \"AccountStats\";\n+  private static final String HEALTH_REPORT_NAME_PARTITION = \"PartitionClassReport\";\n+  private static final String STATS_FIELD_NAME_PARTITION = \"PartitionClassStats\";\n+  private MockHelixManager mockHelixManager;\n+  private HelixHealthReportAggregatorTask task;\n+  private MockTime mockTime;\n+  private MockHelixAdmin mockHelixAdmin;\n+  private ClusterMapConfig clusterMapConfig;\n+  private TestUtils.ZkInfo zkInfo;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private final boolean enableAggregatedMonthlyAccountReport;\n+\n+  @Parameterized.Parameters\n+  public static List<Object[]> data() {\n+    return Arrays.asList(new Object[][]{{false}, {true}});\n+  }\n+\n+  public HelixHealthReportAggregationTaskTest(boolean enableAggregatedMonthlyAccountReport) throws IOException {\n+    this.enableAggregatedMonthlyAccountReport = enableAggregatedMonthlyAccountReport;\n+    File tempDir = Files.createTempDirectory(\"HelixHealthReportAggregationTask-\" + new Random().nextInt(1000)).toFile();\n+    String tempDirPath = tempDir.getAbsolutePath();\n+    int zkPort = 13188;\n+    int maxRetries = 1000;\n+    int numRetries = 0;\n+    while (true) {\n+      if (numRetries > maxRetries) {\n+        throw new IOException(\"No ports are available to start zookeeper server\");\n+      }\n+      try {\n+        zkInfo = new TestUtils.ZkInfo(tempDirPath, \"DC1\", (byte) 0, zkPort, true);\n+        break;\n+      } catch (Exception e) {\n+        if (e instanceof BindException || e.getCause() instanceof BindException) {\n+          System.out.println(\"Port \" + zkPort + \" already in use, try \" + (zkPort + 1) + \" instead\");\n+          zkPort++;\n+          numRetries++;\n+        } else {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+    }\n+    String zkAddr = \"localhost:\" + String.valueOf(zkInfo.getPort());", "originalCommit": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "chunk": "diff --git a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\nindex 381605b5f..ea9ee059b 100644\n--- a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n+++ b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n\n@@ -56,7 +56,7 @@ import org.junit.runners.Parameterized;\n  */\n @RunWith(Parameterized.class)\n public class HelixHealthReportAggregationTaskTest {\n-  private static final String CLUSTER_NAME = \"Ambry-prod\";\n+  private static final String CLUSTER_NAME = \"Ambry-test\";\n   private static final String INSTANCE_NAME = \"helix.ambry.com\";\n   private static final long RELEVANT_PERIOD_IN_MINUTES = 60;\n   private static final String HEALTH_REPORT_NAME_ACCOUNT = \"AccountReport\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyMDQxOA==", "url": "https://github.com/linkedin/ambry/pull/1674#discussion_r513820418", "bodyText": "Can we move clusterMapConfig = makeClusterMapConfig(); to class ctor?", "author": "jsjtzyy", "createdAt": "2020-10-28T23:26:07Z", "path": "ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.github.ambry.config.ClusterMapConfig;\n+import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.server.StatsReportType;\n+import com.github.ambry.server.StatsSnapshot;\n+import com.github.ambry.server.StatsWrapper;\n+import com.github.ambry.utils.MockTime;\n+import com.github.ambry.utils.SystemTime;\n+import com.github.ambry.utils.TestUtils;\n+import com.github.ambry.utils.Time;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.nio.file.Files;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Random;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixProperty;\n+import org.apache.helix.InstanceType;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+import org.apache.zookeeper.data.Stat;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+\n+/**\n+ * Unit test class for {@link HelixHealthReportAggregatorTask}.\n+ */\n+@RunWith(Parameterized.class)\n+public class HelixHealthReportAggregationTaskTest {\n+  private static final String CLUSTER_NAME = \"Ambry-prod\";\n+  private static final String INSTANCE_NAME = \"helix.ambry.com\";\n+  private static final long RELEVANT_PERIOD_IN_MINUTES = 60;\n+  private static final String HEALTH_REPORT_NAME_ACCOUNT = \"AccountReport\";\n+  private static final String STATS_FIELD_NAME_ACCOUNT = \"AccountStats\";\n+  private static final String HEALTH_REPORT_NAME_PARTITION = \"PartitionClassReport\";\n+  private static final String STATS_FIELD_NAME_PARTITION = \"PartitionClassStats\";\n+  private MockHelixManager mockHelixManager;\n+  private HelixHealthReportAggregatorTask task;\n+  private MockTime mockTime;\n+  private MockHelixAdmin mockHelixAdmin;\n+  private ClusterMapConfig clusterMapConfig;\n+  private TestUtils.ZkInfo zkInfo;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private final boolean enableAggregatedMonthlyAccountReport;\n+\n+  @Parameterized.Parameters\n+  public static List<Object[]> data() {\n+    return Arrays.asList(new Object[][]{{false}, {true}});\n+  }\n+\n+  public HelixHealthReportAggregationTaskTest(boolean enableAggregatedMonthlyAccountReport) throws IOException {\n+    this.enableAggregatedMonthlyAccountReport = enableAggregatedMonthlyAccountReport;\n+    File tempDir = Files.createTempDirectory(\"HelixHealthReportAggregationTask-\" + new Random().nextInt(1000)).toFile();\n+    String tempDirPath = tempDir.getAbsolutePath();\n+    int zkPort = 13188;\n+    int maxRetries = 1000;\n+    int numRetries = 0;\n+    while (true) {\n+      if (numRetries > maxRetries) {\n+        throw new IOException(\"No ports are available to start zookeeper server\");\n+      }\n+      try {\n+        zkInfo = new TestUtils.ZkInfo(tempDirPath, \"DC1\", (byte) 0, zkPort, true);\n+        break;\n+      } catch (Exception e) {\n+        if (e instanceof BindException || e.getCause() instanceof BindException) {\n+          System.out.println(\"Port \" + zkPort + \" already in use, try \" + (zkPort + 1) + \" instead\");\n+          zkPort++;\n+          numRetries++;\n+        } else {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+    }\n+    String zkAddr = \"localhost:\" + String.valueOf(zkInfo.getPort());\n+\n+    mockHelixAdmin = new MockHelixAdminFactory().getHelixAdmin(zkAddr);\n+    mockHelixManager =\n+        new MockHelixManager(INSTANCE_NAME, InstanceType.PARTICIPANT, zkAddr, CLUSTER_NAME, mockHelixAdmin, null, null);\n+    mockTime = new MockTime(SystemTime.getInstance().milliseconds());\n+  }\n+\n+  @After\n+  public void after() {\n+    zkInfo.shutdown();\n+  }\n+\n+  private ClusterMapConfig makeClusterMapConfig() {\n+    Properties props = new Properties();\n+    props.setProperty(\"clustermap.host.name\", INSTANCE_NAME);\n+    props.setProperty(\"clustermap.cluster.name\", CLUSTER_NAME);\n+    props.setProperty(\"clustermap.datacenter.name\", \"DC1\");\n+    props.setProperty(ClusterMapConfig.ENABLE_AGGREGATED_MONTHLY_ACCOUNT_REPORT,\n+        Boolean.toString(this.enableAggregatedMonthlyAccountReport));\n+    return new ClusterMapConfig(new VerifiableProperties(props));\n+  }\n+\n+  /**\n+   * Test {@link HelixHealthReportAggregatorTask#run()} method.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testAggregationTask() throws Exception {\n+    int port = 10000;\n+    int numNode = 3;\n+    for (StatsReportType type : StatsReportType.values()) {\n+      initializeNodeReports(type, numNode, port);\n+\n+      String healthReportName =\n+          type == StatsReportType.ACCOUNT_REPORT ? HEALTH_REPORT_NAME_ACCOUNT : HEALTH_REPORT_NAME_PARTITION;\n+      String statsFieldName =\n+          type == StatsReportType.ACCOUNT_REPORT ? STATS_FIELD_NAME_ACCOUNT : STATS_FIELD_NAME_PARTITION;\n+      clusterMapConfig = makeClusterMapConfig();", "originalCommit": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "chunk": "diff --git a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\nindex 381605b5f..ea9ee059b 100644\n--- a/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n+++ b/ambry-clustermap/src/test/java/com/github/ambry/clustermap/HelixHealthReportAggregationTaskTest.java\n\n@@ -56,7 +56,7 @@ import org.junit.runners.Parameterized;\n  */\n @RunWith(Parameterized.class)\n public class HelixHealthReportAggregationTaskTest {\n-  private static final String CLUSTER_NAME = \"Ambry-prod\";\n+  private static final String CLUSTER_NAME = \"Ambry-test\";\n   private static final String INSTANCE_NAME = \"helix.ambry.com\";\n   private static final long RELEVANT_PERIOD_IN_MINUTES = 60;\n   private static final String HEALTH_REPORT_NAME_ACCOUNT = \"AccountReport\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNTU2NQ==", "url": "https://github.com/linkedin/ambry/pull/1674#discussion_r513825565", "bodyText": "Can we directly get the value from previously computed znRecord?\nmonthBaseReportZNRecord.setSimpleField(RAW_VALID_SIZE_FIELD_NAME,\n              znRecord.getSimpleField(RAW_VALID_SIZE_FIELD_NAME));", "author": "jsjtzyy", "createdAt": "2020-10-28T23:41:32Z", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java", "diffHunk": "@@ -96,15 +116,40 @@ public TaskResult run() {\n       }\n       ObjectMapper mapper = new ObjectMapper();\n       results = clusterAggregator.doWork(statsWrappersJSON, statsReportType);\n-      String resultId = String.format(\"Aggregated_%s\", healthReportName);\n+      String resultId = String.format(\"%s%s\", AGGREGATED_REPORT_PREFIX, healthReportName);\n       ZNRecord znRecord = new ZNRecord(resultId);\n       znRecord.setSimpleField(RAW_VALID_SIZE_FIELD_NAME, mapper.writeValueAsString(results.getFirst()));\n       znRecord.setSimpleField(VALID_SIZE_FIELD_NAME, mapper.writeValueAsString(results.getSecond()));\n-      znRecord.setSimpleField(TIMESTAMP_FIELD_NAME, String.valueOf(SystemTime.getInstance().milliseconds()));\n+      znRecord.setSimpleField(TIMESTAMP_FIELD_NAME, String.valueOf(time.milliseconds()));\n       znRecord.setListField(ERROR_OCCURRED_INSTANCES_FIELD_NAME,\n           clusterAggregator.getExceptionOccurredInstances(statsReportType));\n       String path = String.format(\"/%s\", resultId);\n       manager.getHelixPropertyStore().set(path, znRecord, AccessOption.PERSISTENT);\n+\n+      // Create a base report at the beginning of each month.\n+      // Check if there is a base report for this month or not.\n+      if (clusterMapConfig.clustermapEnableAggregatedMonthlyAccountReport\n+          && statsReportType == StatsReportType.ACCOUNT_REPORT) {\n+        resultId =\n+            String.format(\"%s%s%s\", AGGREGATED_REPORT_PREFIX, healthReportName, AGGREGATED_MONTHLY_REPORT_SUFFIX);\n+        path = String.format(\"/%s\", resultId);\n+        Stat stat = new Stat();\n+        ZNRecord monthBaseReportZNRecord = manager.getHelixPropertyStore().get(path, stat, AccessOption.PERSISTENT);\n+        String currentMonthValue =\n+            LocalDateTime.ofEpochSecond(time.seconds(), 0, zoneOffset).format(TIMESTAMP_FORMATTER);\n+        if (monthBaseReportZNRecord == null || !currentMonthValue.equals(\n+            monthBaseReportZNRecord.getSimpleField(MONTH_NAME))) {\n+          monthBaseReportZNRecord = new ZNRecord(resultId);\n+          monthBaseReportZNRecord.setSimpleField(MONTH_NAME, currentMonthValue);\n+          monthBaseReportZNRecord.setSimpleField(RAW_VALID_SIZE_FIELD_NAME,\n+              mapper.writeValueAsString(results.getFirst()));\n+          monthBaseReportZNRecord.setSimpleField(VALID_SIZE_FIELD_NAME, mapper.writeValueAsString(results.getSecond()));", "originalCommit": "3dc948dd1f1acbe55078f9b3a8f0b968e3728b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "chunk": "diff --git a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java\nindex 7713ac30d..7c128d6a2 100644\n--- a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java\n+++ b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixHealthReportAggregatorTask.java\n\n@@ -134,20 +134,20 @@ class HelixHealthReportAggregatorTask extends UserContentStore implements Task {\n             String.format(\"%s%s%s\", AGGREGATED_REPORT_PREFIX, healthReportName, AGGREGATED_MONTHLY_REPORT_SUFFIX);\n         path = String.format(\"/%s\", resultId);\n         Stat stat = new Stat();\n-        ZNRecord monthBaseReportZNRecord = manager.getHelixPropertyStore().get(path, stat, AccessOption.PERSISTENT);\n+        ZNRecord monthlyReportZNRecord = manager.getHelixPropertyStore().get(path, stat, AccessOption.PERSISTENT);\n         String currentMonthValue =\n             LocalDateTime.ofEpochSecond(time.seconds(), 0, zoneOffset).format(TIMESTAMP_FORMATTER);\n-        if (monthBaseReportZNRecord == null || !currentMonthValue.equals(\n-            monthBaseReportZNRecord.getSimpleField(MONTH_NAME))) {\n-          monthBaseReportZNRecord = new ZNRecord(resultId);\n-          monthBaseReportZNRecord.setSimpleField(MONTH_NAME, currentMonthValue);\n-          monthBaseReportZNRecord.setSimpleField(RAW_VALID_SIZE_FIELD_NAME,\n-              mapper.writeValueAsString(results.getFirst()));\n-          monthBaseReportZNRecord.setSimpleField(VALID_SIZE_FIELD_NAME, mapper.writeValueAsString(results.getSecond()));\n-          monthBaseReportZNRecord.setSimpleField(TIMESTAMP_FIELD_NAME, String.valueOf(time.milliseconds()));\n-          monthBaseReportZNRecord.setListField(ERROR_OCCURRED_INSTANCES_FIELD_NAME,\n+        if (monthlyReportZNRecord == null || !currentMonthValue.equals(\n+            monthlyReportZNRecord.getSimpleField(MONTH_NAME))) {\n+          monthlyReportZNRecord = new ZNRecord(resultId);\n+          monthlyReportZNRecord.setSimpleField(MONTH_NAME, currentMonthValue);\n+          monthlyReportZNRecord.setSimpleField(RAW_VALID_SIZE_FIELD_NAME,\n+              znRecord.getSimpleField(RAW_VALID_SIZE_FIELD_NAME));\n+          monthlyReportZNRecord.setSimpleField(VALID_SIZE_FIELD_NAME, znRecord.getSimpleField(VALID_SIZE_FIELD_NAME));\n+          monthlyReportZNRecord.setSimpleField(TIMESTAMP_FIELD_NAME, String.valueOf(time.milliseconds()));\n+          monthlyReportZNRecord.setListField(ERROR_OCCURRED_INSTANCES_FIELD_NAME,\n               clusterAggregator.getExceptionOccurredInstances(statsReportType));\n-          manager.getHelixPropertyStore().set(path, monthBaseReportZNRecord, AccessOption.PERSISTENT);\n+          manager.getHelixPropertyStore().set(path, monthlyReportZNRecord, AccessOption.PERSISTENT);\n         }\n       }\n       return new TaskResult(TaskResult.Status.COMPLETED, \"Aggregation success\");\n"}}, {"oid": "19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "url": "https://github.com/linkedin/ambry/commit/19b4eab9e5b6fcd5465d68bb55bc457464e2c6c7", "message": "Address comments", "committedDate": "2020-10-29T04:41:43Z", "type": "commit"}]}