{"pr_number": 1608, "pr_title": "Use copy of ExchangeMetadataResponse while fetching missing keys for timed out standby replicas", "pr_createdAt": "2020-08-20T03:01:00Z", "pr_url": "https://github.com/linkedin/ambry/pull/1608", "timeline": [{"oid": "0b5d920a5fda5b3a2237a479abed2e55ffe04704", "url": "https://github.com/linkedin/ambry/commit/0b5d920a5fda5b3a2237a479abed2e55ffe04704", "message": "Use copy of ExchangeMetadataResponse while fetching missing keys for timed out standby replicas\n\nIssues:\n 1. IllegalStateException thrown in writeMessagesToLocalStoreAndAdvanceTokens() due to mismatch in partition ID in partitionResponseInfo with remoteReplicaInfo\n 2. IllegalArgumentException thrown in getReplicaMetadataResponse() when trying to read from connectionChannel inputStream (size of the stream from first 8 bytes is incorrect)\n\nExplanation: We are using references of ExchangeMetadataResponse stored in RemoteReplicaInfo while fetching the missing keys for standby(blocked) replicas. Due to that, it is possible that while an\ninter-colo thread is fetching missing store messages present in ExchangeMetadaResponse::missingStoreMessages set, other threads receive these messages and \"modify/empty the same set reference\".\n\nThis will lead to mismatch in state of missingStoreMessages tracked for a partition before and after fetching the keys. That is, before fetch, we would find missingStoreMessages is non-empty and send PartitionRequestInfo in\nGET request but when we receive the response,  we will skip/ignore the PartitionResponseInfo since missingStoreMessages is empty were emptied. This could lead to two kinds of issues during iteration of received responses in\nwriteMessagesToLocalStoreAndAdvanceTokens:\n 1. If we skip/ignore such partitions in middle of iteration, indexes of replica list and partition response list mismatch. This causes IllegalStateException.\n 2. If we skip/ignore such partitions at end of iteration, the inputStream is not read completely resulting in left over bytes for next replication cycle. This causes IllegalArgumentException.\n\nFix: Create a copy of ExchangeMetadataResponse (and its missingStoreMessages set) while fetching missing keys.", "committedDate": "2020-08-20T17:20:04Z", "type": "commit"}, {"oid": "0b5d920a5fda5b3a2237a479abed2e55ffe04704", "url": "https://github.com/linkedin/ambry/commit/0b5d920a5fda5b3a2237a479abed2e55ffe04704", "message": "Use copy of ExchangeMetadataResponse while fetching missing keys for timed out standby replicas\n\nIssues:\n 1. IllegalStateException thrown in writeMessagesToLocalStoreAndAdvanceTokens() due to mismatch in partition ID in partitionResponseInfo with remoteReplicaInfo\n 2. IllegalArgumentException thrown in getReplicaMetadataResponse() when trying to read from connectionChannel inputStream (size of the stream from first 8 bytes is incorrect)\n\nExplanation: We are using references of ExchangeMetadataResponse stored in RemoteReplicaInfo while fetching the missing keys for standby(blocked) replicas. Due to that, it is possible that while an\ninter-colo thread is fetching missing store messages present in ExchangeMetadaResponse::missingStoreMessages set, other threads receive these messages and \"modify/empty the same set reference\".\n\nThis will lead to mismatch in state of missingStoreMessages tracked for a partition before and after fetching the keys. That is, before fetch, we would find missingStoreMessages is non-empty and send PartitionRequestInfo in\nGET request but when we receive the response,  we will skip/ignore the PartitionResponseInfo since missingStoreMessages is empty were emptied. This could lead to two kinds of issues during iteration of received responses in\nwriteMessagesToLocalStoreAndAdvanceTokens:\n 1. If we skip/ignore such partitions in middle of iteration, indexes of replica list and partition response list mismatch. This causes IllegalStateException.\n 2. If we skip/ignore such partitions at end of iteration, the inputStream is not read completely resulting in left over bytes for next replication cycle. This causes IllegalArgumentException.\n\nFix: Create a copy of ExchangeMetadataResponse (and its missingStoreMessages set) while fetching missing keys.", "committedDate": "2020-08-20T17:20:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4MTA5NQ==", "url": "https://github.com/linkedin/ambry/pull/1608#discussion_r474181095", "bodyText": "nit: please use a different name like \"other\" instead of \"old\".", "author": "justinlin-linkedin", "createdAt": "2020-08-20T18:16:25Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -1551,6 +1547,28 @@ ReplicationMetrics getReplicationMetrics() {\n       this.receivedStoreMessagesWithUpdatesPending = null;\n     }\n \n+    /**\n+     * Shallow copy Constructor for {@link ExchangeMetadataResponse}, which copies all field references with exception\n+     * of 'missingStoreMessages' for which it creates new Set object.\n+     * @param old old {@link ExchangeMetadataResponse} object.\n+     */\n+    ExchangeMetadataResponse(ExchangeMetadataResponse old) {", "originalCommit": "0b5d920a5fda5b3a2237a479abed2e55ffe04704", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a657c51f872d270933987f7e48fe25c381db428f", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex b5704548a..1fb182964 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -1550,23 +1550,23 @@ public class ReplicaThread implements Runnable {\n     /**\n      * Shallow copy Constructor for {@link ExchangeMetadataResponse}, which copies all field references with exception\n      * of 'missingStoreMessages' for which it creates new Set object.\n-     * @param old old {@link ExchangeMetadataResponse} object.\n+     * @param other other {@link ExchangeMetadataResponse} object.\n      */\n-    ExchangeMetadataResponse(ExchangeMetadataResponse old) {\n+    ExchangeMetadataResponse(ExchangeMetadataResponse other) {\n       // Create a copy of 'missingStoreMessages' since it is mutable and sharing between multiple ExchangeMetadataResponses\n       // can make operations on it such as size(), isEmpty(), etc. hard to track.\n       // For example, an inter-colo thread could be fetching missing store messages from its copy of exchangeMetadataResponse\n       // in fixMissingKeys() method while an intra-colo thread could be emptying the missing store messages in\n       // exchangeMetadataResponse stored in RemoteReplicaInfo. Referencing same object of missingStoreMessages could\n       // lead to race conditions and is avoided for simplicity.\n-      this.missingStoreMessages = old.missingStoreMessages == null ? null : new HashSet<>(old.missingStoreMessages);\n-      this.remoteKeyToLocalKeyMap = old.remoteKeyToLocalKeyMap;\n-      this.remoteToken = old.remoteToken;\n-      this.localLagFromRemoteInBytes = old.localLagFromRemoteInBytes;\n-      this.serverErrorCode = old.serverErrorCode;\n-      this.time = old.time;\n-      this.lastMissingMessageReceivedTimeSec = old.lastMissingMessageReceivedTimeSec;\n-      this.receivedStoreMessagesWithUpdatesPending = old.receivedStoreMessagesWithUpdatesPending;\n+      this.missingStoreMessages = other.missingStoreMessages == null ? null : new HashSet<>(other.missingStoreMessages);\n+      this.remoteKeyToLocalKeyMap = other.remoteKeyToLocalKeyMap;\n+      this.remoteToken = other.remoteToken;\n+      this.localLagFromRemoteInBytes = other.localLagFromRemoteInBytes;\n+      this.serverErrorCode = other.serverErrorCode;\n+      this.time = other.time;\n+      this.lastMissingMessageReceivedTimeSec = other.lastMissingMessageReceivedTimeSec;\n+      this.receivedStoreMessagesWithUpdatesPending = other.receivedStoreMessagesWithUpdatesPending;\n     }\n \n     /**\n"}}, {"oid": "a657c51f872d270933987f7e48fe25c381db428f", "url": "https://github.com/linkedin/ambry/commit/a657c51f872d270933987f7e48fe25c381db428f", "message": "Nit: Use 'other' instead of 'old' as parameter variable name in copy constructor", "committedDate": "2020-08-20T20:16:07Z", "type": "commit"}]}