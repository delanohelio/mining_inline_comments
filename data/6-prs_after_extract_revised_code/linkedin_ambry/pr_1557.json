{"pr_number": 1557, "pr_title": "A temporary fix of delete's lifeVersionConflict error", "pr_createdAt": "2020-06-09T00:20:37Z", "pr_url": "https://github.com/linkedin/ambry/pull/1557", "timeline": [{"oid": "abc882dfe77284a4db611bb023fd9b3a835b8139", "url": "https://github.com/linkedin/ambry/commit/abc882dfe77284a4db611bb023fd9b3a835b8139", "message": "A temporary fix of delete's lifeVersionConflict error", "committedDate": "2020-06-09T00:22:20Z", "type": "commit"}, {"oid": "abc882dfe77284a4db611bb023fd9b3a835b8139", "url": "https://github.com/linkedin/ambry/commit/abc882dfe77284a4db611bb023fd9b3a835b8139", "message": "A temporary fix of delete's lifeVersionConflict error", "committedDate": "2020-06-09T00:22:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NjExMQ==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437076111", "bodyText": "Suggest making these Callable since they are not run as threads.", "author": "lightningrob", "createdAt": "2020-06-09T00:46:13Z", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -94,8 +94,10 @@\n   // TODO remove this once ZK migration is complete\n   private AtomicBoolean isSealed = new AtomicBoolean(false);\n   protected PersistentIndex index;\n+\n   // THIS IS ONLY FOR TEST.\n-  protected Runnable operationBeforeSynchronizationFunc = null;\n+  volatile protected Runnable operationBeforeSynchronizationFunc = null;", "originalCommit": "abc882dfe77284a4db611bb023fd9b3a835b8139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMzA3NA==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437133074", "bodyText": "change the type to callable.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T04:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NjExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8de8ef0154af81f9d992ab295c18e8b215c08b84", "chunk": "diff --git a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\nindex d4d999463..908296dc5 100644\n--- a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n+++ b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n\n@@ -96,8 +97,8 @@ public class BlobStore implements Store {\n   protected PersistentIndex index;\n \n   // THIS IS ONLY FOR TEST.\n-  volatile protected Runnable operationBeforeSynchronizationFunc = null;\n-  volatile protected Runnable betweenGetEndOffsetAndFindKeyFunc = null;\n+  volatile protected Callable<Void> operationBeforeSynchronization = null;\n+  volatile protected Callable<Void> inDeleteBetweenGetEndOffsetAndFindKey = null;\n \n   /**\n    * States representing the different scenarios that can occur when a set of messages are to be written to the store.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODc5Mw==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437078793", "bodyText": "You can use lambda callables here as well.", "author": "lightningrob", "createdAt": "2020-06-09T00:56:11Z", "path": "ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java", "diffHunk": "@@ -714,6 +714,62 @@ public Void call() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test the case where a Put happens while a Delete is doing the preliminary check.\n+   * Since the delete happens before put, delete should return a ID_NOT_FOUND error.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void concurrentDeleteAndPutTest() throws Exception {\n+    MockId id = getUniqueId();\n+    final CountDownLatch getEndOffsetLatch = new CountDownLatch(1);\n+    final CountDownLatch findKeyLatch = new CountDownLatch(1);\n+    ((MockBlobStore) store).setBetweenGetEndOffsetAndFindKeyFunc(() -> {\n+      getEndOffsetLatch.countDown();\n+      try {\n+        findKeyLatch.await();\n+      } catch (Exception e) {\n+      }\n+    });\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2);\n+    try {\n+      Future<Void> deleteFuture = executorService.submit(new Callable<Void>() {", "originalCommit": "abc882dfe77284a4db611bb023fd9b3a835b8139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMzA5OQ==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437133099", "bodyText": "done.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T04:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8de8ef0154af81f9d992ab295c18e8b215c08b84", "chunk": "diff --git a/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java b/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java\nindex 9cd15fd3f..2d0c245d5 100644\n--- a/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java\n+++ b/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java\n\n@@ -709,7 +702,7 @@ public class BlobStoreTest {\n       assertEquals((long) DELETE_RECORD_SIZE, logEndOffsetAfterDelete - logEndOffsetBeforeDelete);\n       assertEquals((long) DELETE_RECORD_SIZE, indexEndOffsetAfterDelete - indexEndOffsetBeforeDelete);\n     } finally {\n-      ((MockBlobStore) store).setOperationBeforeSynchronizationFunc(null);\n+      ((MockBlobStore) store).setOperationBeforeSynchronization(null);\n       executorService.shutdownNow();\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3OTE0OA==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437079148", "bodyText": "Nit: this callback is only invoked during delete while the first one is called in every method.  Suggest renaming it to indicate it's only for delete, or at least add a comment.", "author": "lightningrob", "createdAt": "2020-06-09T00:57:37Z", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -94,8 +94,10 @@\n   // TODO remove this once ZK migration is complete\n   private AtomicBoolean isSealed = new AtomicBoolean(false);\n   protected PersistentIndex index;\n+\n   // THIS IS ONLY FOR TEST.\n-  protected Runnable operationBeforeSynchronizationFunc = null;\n+  volatile protected Runnable operationBeforeSynchronizationFunc = null;\n+  volatile protected Runnable betweenGetEndOffsetAndFindKeyFunc = null;", "originalCommit": "abc882dfe77284a4db611bb023fd9b3a835b8139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMzAzNw==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437133037", "bodyText": "update the variable's name.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T04:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3OTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "8de8ef0154af81f9d992ab295c18e8b215c08b84", "chunk": "diff --git a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\nindex d4d999463..908296dc5 100644\n--- a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n+++ b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n\n@@ -96,8 +97,8 @@ public class BlobStore implements Store {\n   protected PersistentIndex index;\n \n   // THIS IS ONLY FOR TEST.\n-  volatile protected Runnable operationBeforeSynchronizationFunc = null;\n-  volatile protected Runnable betweenGetEndOffsetAndFindKeyFunc = null;\n+  volatile protected Callable<Void> operationBeforeSynchronization = null;\n+  volatile protected Callable<Void> inDeleteBetweenGetEndOffsetAndFindKey = null;\n \n   /**\n    * States representing the different scenarios that can occur when a set of messages are to be written to the store.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDA3Mw==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437080073", "bodyText": "For this type of conditional execution, AtomicObject is safer than volatile.  II believe it's technically possible for this to get a NPE since volatile doesn't prevent the variable from being overwritten between checking for null and running.", "author": "lightningrob", "createdAt": "2020-06-09T01:01:07Z", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -835,6 +845,15 @@ private void maybeCallBeforeSynchronizationFunc() {\n     }\n   }\n \n+  /**\n+   * Call {@link #betweenGetEndOffsetAndFindKeyFunc} if it's not null. This is for testing only.\n+   */\n+  private void maybeCallBetweenGetEndOffsetAndFindKeyFunc() {\n+    if (betweenGetEndOffsetAndFindKeyFunc != null) {\n+      betweenGetEndOffsetAndFindKeyFunc.run();", "originalCommit": "abc882dfe77284a4db611bb023fd9b3a835b8139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMzQyMg==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437133422", "bodyText": "good catch on the NPE. But I think it's fine to use volatile since we are not doing any CAS operation here. I updated to make sure the NPE doesn't happen.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T04:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8de8ef0154af81f9d992ab295c18e8b215c08b84", "chunk": "diff --git a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\nindex d4d999463..908296dc5 100644\n--- a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n+++ b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n\n@@ -837,20 +838,22 @@ public class BlobStore implements Store {\n   }\n \n   /**\n-   * Call {@link #operationBeforeSynchronizationFunc} if it's not null. This is for testing only.\n+   * Call {@link #operationBeforeSynchronization} if it's not null. This is for testing only.\n    */\n-  private void maybeCallBeforeSynchronizationFunc() {\n-    if (operationBeforeSynchronizationFunc != null) {\n-      operationBeforeSynchronizationFunc.run();\n+  private void maybeCallBeforeSynchronization() throws Exception {\n+    Callable<Void> callable = operationBeforeSynchronization;\n+    if (callable != null) {\n+      callable.call();\n     }\n   }\n \n   /**\n-   * Call {@link #betweenGetEndOffsetAndFindKeyFunc} if it's not null. This is for testing only.\n+   * Call {@link #inDeleteBetweenGetEndOffsetAndFindKey} if it's not null. This is for testing only.\n    */\n-  private void maybeCallBetweenGetEndOffsetAndFindKeyFunc() {\n-    if (betweenGetEndOffsetAndFindKeyFunc != null) {\n-      betweenGetEndOffsetAndFindKeyFunc.run();\n+  private void maybeCallInDeleteBetweenGetEndOffsetAndFindKey() throws Exception {\n+    Callable<Void> callable = inDeleteBetweenGetEndOffsetAndFindKey;\n+    if (callable != null) {\n+      callable.call();\n     }\n   }\n \n"}}, {"oid": "8de8ef0154af81f9d992ab295c18e8b215c08b84", "url": "https://github.com/linkedin/ambry/commit/8de8ef0154af81f9d992ab295c18e8b215c08b84", "message": "Address comments", "committedDate": "2020-06-09T04:37:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjEzNg==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437116136", "bodyText": "Can we add a log here to further verify our theory?  Something like this:\nlogger.error(\"Cannot delete id {} because {}\", info.getStoreKey(), value == null ? \"it is not found in the index\" : \"its PUT record is out of current offset before check\");\n\nOr maybe you can add more message to StoreException.", "author": "jsjtzyy", "createdAt": "2020-06-09T03:22:24Z", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -512,9 +514,17 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n       List<IndexValue> indexValuesToDelete = new ArrayList<>();\n       List<Short> lifeVersions = new ArrayList<>();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n+      maybeCallBetweenGetEndOffsetAndFindKeyFunc();\n       for (MessageInfo info : infosToDelete) {\n         IndexValue value = index.findKey(info.getStoreKey());\n-        if (value == null) {\n+        // TODO: Passing a FileSpan the findKey and change the findKey implementation to fully restrict the index\n+        // searching space to be limited within the given FileSpan.\n+        if (value == null || (value.getOffset().compareTo(indexEndOffsetBeforeCheck) >= 0 && value.isPut())) {\n+          // A temporary fix to deal with this particular corner case.\n+          // Between calling index.getCurrentEndOffset and findKey method, there is a Put record of the same blob\n+          // is inserted to index.\n+          // index.getCurrentEndOffset should create a virtual snapshot for this delete method. Everything happens after\n+          // this end offset would be considered as happening outside of the snapshot.", "originalCommit": "abc882dfe77284a4db611bb023fd9b3a835b8139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzNjQzNA==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437136434", "bodyText": "changed the  exception message to carry more information about the error.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T04:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MDQxMA==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437590410", "bodyText": "Do ID_Not_Found errors msgs get logged anywhere in AmbryRequests?", "author": "cgtz", "createdAt": "2020-06-09T17:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExNjEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8de8ef0154af81f9d992ab295c18e8b215c08b84", "chunk": "diff --git a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\nindex d4d999463..908296dc5 100644\n--- a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n+++ b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n\n@@ -514,7 +515,7 @@ public class BlobStore implements Store {\n       List<IndexValue> indexValuesToDelete = new ArrayList<>();\n       List<Short> lifeVersions = new ArrayList<>();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n-      maybeCallBetweenGetEndOffsetAndFindKeyFunc();\n+      maybeCallInDeleteBetweenGetEndOffsetAndFindKey();\n       for (MessageInfo info : infosToDelete) {\n         IndexValue value = index.findKey(info.getStoreKey());\n         // TODO: Passing a FileSpan the findKey and change the findKey implementation to fully restrict the index\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTYxNA==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437129614", "bodyText": "Since we have this callable here, can we remove maybeCallBeforeSynchronizationFunc in this delete method? I think we can reuse maybeCallBetweenGetEndOffsetAndFindKeyFunc to complete other concurrency tests.", "author": "jsjtzyy", "createdAt": "2020-06-09T04:23:58Z", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -512,9 +514,17 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n       List<IndexValue> indexValuesToDelete = new ArrayList<>();\n       List<Short> lifeVersions = new ArrayList<>();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n+      maybeCallBetweenGetEndOffsetAndFindKeyFunc();", "originalCommit": "abc882dfe77284a4db611bb023fd9b3a835b8139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzNjgwMg==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437136802", "bodyText": "I think they are both necessary. They are testing different corner cases. And I certainly want to remove the getEndOffsetAndFindKey callback after in next PR.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T04:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "8de8ef0154af81f9d992ab295c18e8b215c08b84", "chunk": "diff --git a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\nindex d4d999463..908296dc5 100644\n--- a/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n+++ b/ambry-store/src/main/java/com/github/ambry/store/BlobStore.java\n\n@@ -514,7 +515,7 @@ public class BlobStore implements Store {\n       List<IndexValue> indexValuesToDelete = new ArrayList<>();\n       List<Short> lifeVersions = new ArrayList<>();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n-      maybeCallBetweenGetEndOffsetAndFindKeyFunc();\n+      maybeCallInDeleteBetweenGetEndOffsetAndFindKey();\n       for (MessageInfo info : infosToDelete) {\n         IndexValue value = index.findKey(info.getStoreKey());\n         // TODO: Passing a FileSpan the findKey and change the findKey implementation to fully restrict the index\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMzM0MA==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437133340", "bodyText": "I feel like it's more appropriate to put getEndOffsetLatch.await() and findKeyLatch.countDown() into the call() method that performs putOneBlobWithId", "author": "jsjtzyy", "createdAt": "2020-06-09T04:39:50Z", "path": "ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java", "diffHunk": "@@ -714,6 +714,62 @@ public Void call() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test the case where a Put happens while a Delete is doing the preliminary check.\n+   * Since the delete happens before put, delete should return a ID_NOT_FOUND error.\n+   * @throws Exception\n+   */\n+  @Test\n+  public void concurrentDeleteAndPutTest() throws Exception {\n+    MockId id = getUniqueId();\n+    final CountDownLatch getEndOffsetLatch = new CountDownLatch(1);\n+    final CountDownLatch findKeyLatch = new CountDownLatch(1);\n+    ((MockBlobStore) store).setBetweenGetEndOffsetAndFindKeyFunc(() -> {\n+      getEndOffsetLatch.countDown();\n+      try {\n+        findKeyLatch.await();\n+      } catch (Exception e) {\n+      }\n+    });\n+\n+    ExecutorService executorService = Executors.newFixedThreadPool(2);\n+    try {\n+      Future<Void> deleteFuture = executorService.submit(new Callable<Void>() {\n+        @Override\n+        public Void call() throws Exception {\n+          MessageInfo info =\n+              new MessageInfo(id, DELETE_RECORD_SIZE, id.getAccountId(), id.getContainerId(), time.milliseconds(),\n+                  MessageInfo.LIFE_VERSION_FROM_FRONTEND);\n+          store.delete(Collections.singletonList(info));\n+          return null;\n+        }\n+      });\n+      // Now make sure delete is on the way\n+      getEndOffsetLatch.await();\n+      Future<Void> putFuture = executorService.submit(new Callable<Void>() {\n+        @Override\n+        public Void call() throws Exception {\n+          putOneBlobWithId(id, PUT_RECORD_SIZE, Utils.Infinite_Time);\n+          return null;\n+        }\n+      });\n+      putFuture.get();", "originalCommit": "abc882dfe77284a4db611bb023fd9b3a835b8139", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzNjQ3NA==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437136474", "bodyText": "good idea.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T04:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMzM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "c8a2d98927f26d3ecb472eba13c26e09de26020d", "chunk": "diff --git a/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java b/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java\nindex 9cd15fd3f..76e921284 100644\n--- a/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java\n+++ b/ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java\n\n@@ -709,7 +702,7 @@ public class BlobStoreTest {\n       assertEquals((long) DELETE_RECORD_SIZE, logEndOffsetAfterDelete - logEndOffsetBeforeDelete);\n       assertEquals((long) DELETE_RECORD_SIZE, indexEndOffsetAfterDelete - indexEndOffsetBeforeDelete);\n     } finally {\n-      ((MockBlobStore) store).setOperationBeforeSynchronizationFunc(null);\n+      ((MockBlobStore) store).setOperationBeforeSynchronization(null);\n       executorService.shutdownNow();\n     }\n   }\n"}}, {"oid": "c8a2d98927f26d3ecb472eba13c26e09de26020d", "url": "https://github.com/linkedin/ambry/commit/c8a2d98927f26d3ecb472eba13c26e09de26020d", "message": "Address comments", "committedDate": "2020-06-09T04:51:07Z", "type": "commit"}, {"oid": "795cd27f489dbc21b0b587187e68eda8487f8b52", "url": "https://github.com/linkedin/ambry/commit/795cd27f489dbc21b0b587187e68eda8487f8b52", "message": "typo", "committedDate": "2020-06-09T04:51:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwMTg0Ng==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437601846", "bodyText": "There could be one other edge case here where both a put and a ttl update are present after indexEndOffsetBeforeCheck. In this case a put entry will be returned with the \"Ttl_Update_Index\" flag set, which will make value.isPut() return false (See https://github.com/linkedin/ambry/blob/master/ambry-store/src/main/java/com/github/ambry/store/PersistentIndex.java#L629)\nI suppose this may be even lower probability so we may not need to worry about this in this temporary fix. However, at some point its probably worth looking back on the IndexValue.isPut method (i.e. does a put with ttlupdate flag set by the index logic count as a put record?).", "author": "cgtz", "createdAt": "2020-06-09T17:33:07Z", "path": "ambry-store/src/main/java/com/github/ambry/store/BlobStore.java", "diffHunk": "@@ -512,10 +515,20 @@ public void delete(List<MessageInfo> infosToDelete) throws StoreException {\n       List<IndexValue> indexValuesToDelete = new ArrayList<>();\n       List<Short> lifeVersions = new ArrayList<>();\n       Offset indexEndOffsetBeforeCheck = index.getCurrentEndOffset();\n+      maybeCallInDeleteBetweenGetEndOffsetAndFindKey();\n       for (MessageInfo info : infosToDelete) {\n         IndexValue value = index.findKey(info.getStoreKey());\n-        if (value == null) {\n-          throw new StoreException(\"Cannot delete id \" + info.getStoreKey() + \" since it is not present in the index.\",\n+        // TODO: Passing a FileSpan the findKey and change the findKey implementation to fully restrict the index\n+        // searching space to be limited within the given FileSpan.\n+        if (value == null || (value.getOffset().compareTo(indexEndOffsetBeforeCheck) >= 0 && value.isPut())) {", "originalCommit": "795cd27f489dbc21b0b587187e68eda8487f8b52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNjYxMQ==", "url": "https://github.com/linkedin/ambry/pull/1557#discussion_r437606611", "bodyText": "yeah, this is caused by a slight different rule when reading the indexvalue than writing the indexvalue. When writing index value, PUT and TTL_UPDATE are different records. While reading indexvalue, TTL_UPDATE will be merged with other records. It becomes just a flag.\nI suppose we don't have to worry about it at this PR, since next PR, I will use a FileSpan to restrict the search space in findKey.", "author": "justinlin-linkedin", "createdAt": "2020-06-09T17:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwMTg0Ng=="}], "type": "inlineReview", "revised_code": null}]}