{"pr_number": 1374, "pr_title": "Upgrade Helix lib to 0.9.1 and add metrics for state transition", "pr_createdAt": "2020-02-05T19:43:56Z", "pr_url": "https://github.com/linkedin/ambry/pull/1374", "timeline": [{"oid": "9d48bca78c34cf00baf71442348adf8db1246e4a", "url": "https://github.com/linkedin/ambry/commit/9d48bca78c34cf00baf71442348adf8db1246e4a", "message": "Upgrade Helix lib to 0.9.1 and add metrics for state transition\n\n1. upgrade Helix lib which should fix missing zk callback issues;\n2. introduce participant metrics to track partitions in each state;", "committedDate": "2020-02-08T01:02:49Z", "type": "commit"}, {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "url": "https://github.com/linkedin/ambry/commit/cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "message": "minor", "committedDate": "2020-02-08T01:02:49Z", "type": "commit"}, {"oid": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "url": "https://github.com/linkedin/ambry/commit/cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "message": "minor", "committedDate": "2020-02-08T01:02:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mjk3MQ==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377982971", "bodyText": "javadoc", "author": "lightningrob", "createdAt": "2020-02-12T00:40:08Z", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.MetricRegistry;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+class HelixParticipantMetrics {", "originalCommit": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODg4Mw==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468883", "bodyText": "added", "author": "jsjtzyy", "createdAt": "2020-02-12T19:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mjk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "461f57c4ddb5579335fd994d1dafec7c1440725f", "chunk": "diff --git a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java b/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java\nindex abbadc842..fc11be865 100644\n--- a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java\n+++ b/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java\n\n@@ -21,6 +21,9 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n+/**\n+ * Metrics for {@link HelixParticipant} to monitor partition state transitions.\n+ */\n class HelixParticipantMetrics {\n   final AtomicInteger bootstrapCount = new AtomicInteger();\n   final AtomicInteger standbyCount = new AtomicInteger();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mzc4Mg==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377983782", "bodyText": "Should this throw IllegalStateException?  Seems like bug case.", "author": "lightningrob", "createdAt": "2020-02-12T00:43:07Z", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.clustermap;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.MetricRegistry;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+class HelixParticipantMetrics {\n+  final AtomicInteger bootstrapCount = new AtomicInteger();\n+  final AtomicInteger standbyCount = new AtomicInteger();\n+  final AtomicInteger leaderCount = new AtomicInteger();\n+  final AtomicInteger inactiveCount = new AtomicInteger();\n+  final AtomicInteger offlineCount = new AtomicInteger();\n+  // no need to record exact number of \"dropped\" partition, a counter to track partition-dropped events would suffice\n+  final Counter partitionDroppedCount;\n+  private static final Logger logger = LoggerFactory.getLogger(HelixParticipantMetrics.class);\n+\n+  HelixParticipantMetrics(MetricRegistry metricRegistry) {\n+    Gauge<Integer> bootstrapPartitionCount = bootstrapCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"bootstrapPartitionCount\"),\n+        bootstrapPartitionCount);\n+    Gauge<Integer> standbyPartitionCount = standbyCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"standbyPartitionCount\"),\n+        standbyPartitionCount);\n+    Gauge<Integer> leaderPartitionCount = leaderCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"leaderPartitionCount\"), leaderPartitionCount);\n+    Gauge<Integer> inactivePartitionCount = inactiveCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"inactivePartitionCount\"),\n+        inactivePartitionCount);\n+    Gauge<Integer> offlinePartitionCount = offlineCount::get;\n+    metricRegistry.register(MetricRegistry.name(HelixParticipant.class, \"offlinePartitionCount\"),\n+        offlinePartitionCount);\n+    partitionDroppedCount =\n+        metricRegistry.counter(MetricRegistry.name(HelixParticipant.class, \"partitionDroppedCount\"));\n+  }\n+\n+  /**\n+   * Set number of partitions on current node. This is invoked during startup.\n+   * @param partitionCount number of partitions on current node\n+   */\n+  void setLocalPartitionCount(int partitionCount) {\n+    // this method should be invoked before participation, so the initial value is expected to be 0.\n+    if (!offlineCount.compareAndSet(0, partitionCount)) {\n+      logger.warn(\"Number of OFFLINE partitions has changed before initializing participant metrics\");", "originalCommit": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODg1NA==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468854", "bodyText": "fixed", "author": "jsjtzyy", "createdAt": "2020-02-12T19:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Mzc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "461f57c4ddb5579335fd994d1dafec7c1440725f", "chunk": "diff --git a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java b/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java\nindex abbadc842..fc11be865 100644\n--- a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java\n+++ b/ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipantMetrics.java\n\n@@ -21,6 +21,9 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n+/**\n+ * Metrics for {@link HelixParticipant} to monitor partition state transitions.\n+ */\n class HelixParticipantMetrics {\n   final AtomicInteger bootstrapCount = new AtomicInteger();\n   final AtomicInteger standbyCount = new AtomicInteger();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDYxMg==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377984612", "bodyText": "Can make this a default no op method so need not be overridden.", "author": "lightningrob", "createdAt": "2020-02-12T00:45:43Z", "path": "ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -84,6 +84,12 @@ void registerPartitionStateChangeListener(StateModelListenerType listenerType,\n    */\n   boolean updateDataNodeInfoInCluster(ReplicaId replicaId, boolean shouldExist);\n \n+  /**\n+   * Initialize participant related metrics if needed.\n+   * @param localPartitionCount total number of partitions on local node.\n+   */\n+  void initializeParticipantMetrics(int localPartitionCount);", "originalCommit": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODc5NA==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468794", "bodyText": "good point. I have changed it as you suggest.", "author": "jsjtzyy", "createdAt": "2020-02-12T19:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "461f57c4ddb5579335fd994d1dafec7c1440725f", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java b/ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java\nindex 78dd59365..53774498f 100644\n--- a/ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java\n+++ b/ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java\n\n@@ -88,7 +88,8 @@ public interface ClusterParticipant extends AutoCloseable {\n    * Initialize participant related metrics if needed.\n    * @param localPartitionCount total number of partitions on local node.\n    */\n-  void initializeParticipantMetrics(int localPartitionCount);\n+  default void initializeParticipantMetrics(int localPartitionCount) {\n+  }\n \n   /**\n    * Terminate the participant.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzA5Ng==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r377987096", "bodyText": "Could the partition count be passed to constructor instead, and avoid the extra call?", "author": "lightningrob", "createdAt": "2020-02-12T00:54:58Z", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/HelixParticipant.java", "diffHunk": "@@ -88,6 +93,11 @@ public HelixParticipant(ClusterMapConfig clusterMapConfig, HelixFactory helixFac\n     partitionStateChangeListeners = new HashMap<>();\n   }\n \n+  @Override\n+  public void initializeParticipantMetrics(int localPartitionCount) {", "originalCommit": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODU5MA==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378468590", "bodyText": "Unfortunately, when the Participant is created, the number of local partition is not known yet. That's why we let StorageManager update local partition count.", "author": "jsjtzyy", "createdAt": "2020-02-12T19:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzA5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MTAzNg==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378081036", "bodyText": "you can just say ZkInfo since you are already importing TestUtils.*", "author": "lightningrob", "createdAt": "2020-02-12T07:38:19Z", "path": "ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java", "diffHunk": "@@ -13,39 +13,54 @@\n  */\n package com.github.ambry.clustermap;\n \n+import com.codahale.metrics.MetricRegistry;\n import com.github.ambry.config.ClusterMapConfig;\n import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.utils.TestUtils;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Properties;\n+import org.apache.helix.model.Message;\n import org.apache.helix.participant.statemachine.StateModel;\n+import org.json.JSONObject;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n+import org.mockito.Mockito;\n \n+import static com.github.ambry.clustermap.TestUtils.*;\n import static org.junit.Assert.*;\n+import static org.junit.Assume.*;\n+import static org.mockito.Mockito.*;\n \n \n /**\n- * Test for {@link AmbryStateModelFactory}\n+ * Test for {@link AmbryStateModelFactory} and {@link AmbryPartitionStateModel}\n  */\n @RunWith(Parameterized.class)\n public class AmbryStateModelFactoryTest {\n   private final ClusterMapConfig config;\n+  private final String stateModelDef;\n \n   @Parameterized.Parameters\n   public static List<Object[]> data() {\n     return Arrays.asList(\n         new Object[][]{{ClusterMapConfig.OLD_STATE_MODEL_DEF}, {ClusterMapConfig.AMBRY_STATE_MODEL_DEF}});\n   }\n \n-  public AmbryStateModelFactoryTest(String stateModelDef) {\n+  public AmbryStateModelFactoryTest(String stateModelDef) throws Exception {\n+    List<com.github.ambry.utils.TestUtils.ZkInfo> zkInfoList = new ArrayList<>();", "originalCommit": "cb6d367d0eef32999b40131c0dbc0d01c8c1a258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NzUzNQ==", "url": "https://github.com/linkedin/ambry/pull/1374#discussion_r378467535", "bodyText": "fixed", "author": "jsjtzyy", "createdAt": "2020-02-12T19:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MTAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "461f57c4ddb5579335fd994d1dafec7c1440725f", "chunk": "diff --git a/ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java b/ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java\nindex 2aad344df..c4f365e26 100644\n--- a/ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java\n+++ b/ambry-clustermap/src/test/java/com.github.ambry.clustermap/AmbryStateModelFactoryTest.java\n\n@@ -50,7 +50,7 @@ public class AmbryStateModelFactoryTest {\n   }\n \n   public AmbryStateModelFactoryTest(String stateModelDef) throws Exception {\n-    List<com.github.ambry.utils.TestUtils.ZkInfo> zkInfoList = new ArrayList<>();\n+    List<TestUtils.ZkInfo> zkInfoList = new ArrayList<>();\n     zkInfoList.add(new TestUtils.ZkInfo(null, \"DC0\", (byte) 0, 2299, false));\n     JSONObject zkJson = constructZkLayoutJSON(zkInfoList);\n     Properties props = new Properties();\n"}}, {"oid": "461f57c4ddb5579335fd994d1dafec7c1440725f", "url": "https://github.com/linkedin/ambry/commit/461f57c4ddb5579335fd994d1dafec7c1440725f", "message": "comments", "committedDate": "2020-02-12T19:32:53Z", "type": "commit"}, {"oid": "6e21ec84b2e29bd4404621930a32475364fe0242", "url": "https://github.com/linkedin/ambry/commit/6e21ec84b2e29bd4404621930a32475364fe0242", "message": "fix test failure", "committedDate": "2020-02-12T22:07:58Z", "type": "commit"}]}