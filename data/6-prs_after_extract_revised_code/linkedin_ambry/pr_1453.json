{"pr_number": 1453, "pr_title": "Log the peer leader replica info in onPartitionBecomeLeaderFromStandBy", "pr_createdAt": "2020-04-03T00:08:58Z", "pr_url": "https://github.com/linkedin/ambry/pull/1453", "timeline": [{"oid": "21046b2bab764cbe04e631889f819d9843657e81", "url": "https://github.com/linkedin/ambry/commit/21046b2bab764cbe04e631889f819d9843657e81", "message": "Add tests for logging of peer leader replicas on partition state changes", "committedDate": "2020-04-06T23:39:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NzQwMw==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404947403", "bodyText": "After PR #1452 is merged, please rebase and fix conflict if needed", "author": "jsjtzyy", "createdAt": "2020-04-07T16:30:05Z", "path": "ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java", "diffHunk": "@@ -510,6 +516,12 @@ public void onPartitionBecomeStandbyFromLeader(String partitionName) {\n     if (cloudToStoreReplicationListener != null) {\n       cloudToStoreReplicationListener.onPartitionBecomeStandbyFromLeader(partitionName);\n     }\n+\n+    PartitionStateChangeListener replicationManagerListener =\n+        partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n+    if (replicationManagerListener != null) {\n+      replicationManagerListener.onPartitionBecomeStandbyFromLeader(partitionName);\n+    }", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "chunk": "diff --git a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java\nindex 73d19db87..83fc3d402 100644\n--- a/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java\n+++ b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/HelixParticipant.java\n\n@@ -454,74 +458,108 @@ public class HelixParticipant implements ClusterParticipant, PartitionStateChang\n \n   @Override\n   public void onPartitionBecomeBootstrapFromOffline(String partitionName) {\n-    // 1. take actions in storage manager (add new replica if necessary)\n-    PartitionStateChangeListener storageManagerListener =\n-        partitionStateChangeListeners.get(StateModelListenerType.StorageManagerListener);\n-    if (storageManagerListener != null) {\n-      storageManagerListener.onPartitionBecomeBootstrapFromOffline(partitionName);\n-    }\n-    // 2. take actions in replication manager (add new replica if necessary)\n-    PartitionStateChangeListener replicationManagerListener =\n-        partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n-    if (replicationManagerListener != null) {\n-      replicationManagerListener.onPartitionBecomeBootstrapFromOffline(partitionName);\n-    }\n-    // 3. take actions in stats manager (add new replica if necessary)\n-    PartitionStateChangeListener statsManagerListener =\n-        partitionStateChangeListeners.get(StateModelListenerType.StatsManagerListener);\n-    if (statsManagerListener != null) {\n-      statsManagerListener.onPartitionBecomeBootstrapFromOffline(partitionName);\n-    }\n+    // this method may be called when dynamically adding a new replica that is not present on local node previously. In\n+    // this case we don't change offline count as the metric was set to initial number of local partitions during startup.\n+    int offlineCountChange = localPartitions.contains(partitionName) ? -1 : 0;\n+    try {\n+      // 1. take actions in storage manager (add new replica if necessary)\n+      PartitionStateChangeListener storageManagerListener =\n+          partitionStateChangeListeners.get(StateModelListenerType.StorageManagerListener);\n+      if (storageManagerListener != null) {\n+        storageManagerListener.onPartitionBecomeBootstrapFromOffline(partitionName);\n+      }\n+      // 2. take actions in replication manager (add new replica if necessary)\n+      PartitionStateChangeListener replicationManagerListener =\n+          partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n+      if (replicationManagerListener != null) {\n+        replicationManagerListener.onPartitionBecomeBootstrapFromOffline(partitionName);\n+      }\n+      // 3. take actions in stats manager (add new replica if necessary)\n+      PartitionStateChangeListener statsManagerListener =\n+          partitionStateChangeListeners.get(StateModelListenerType.StatsManagerListener);\n+      if (statsManagerListener != null) {\n+        statsManagerListener.onPartitionBecomeBootstrapFromOffline(partitionName);\n+      }\n+    } catch (Exception e) {\n+      participantMetrics.errorStateCount.addAndGet(1);\n+      throw e;\n+    } finally {\n+      participantMetrics.offlineCount.addAndGet(offlineCountChange);\n+    }\n+    participantMetrics.bootstrapCount.addAndGet(1);\n+    // Here we directly add the partition into set even though it may already exit because the op should be idempotent)\n+    localPartitions.add(partitionName);\n   }\n \n   @Override\n   public void onPartitionBecomeStandbyFromBootstrap(String partitionName) {\n     PartitionStateChangeListener replicationManagerListener =\n         partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n-    if (replicationManagerListener != null) {\n-      replicationManagerListener.onPartitionBecomeStandbyFromBootstrap(partitionName);\n-      // after bootstrap is initiated in ReplicationManager, transition is blocked here and wait until local replica has\n-      // caught up with enough peer replicas.\n-      try {\n+    try {\n+      if (replicationManagerListener != null) {\n+\n+        replicationManagerListener.onPartitionBecomeStandbyFromBootstrap(partitionName);\n+        // after bootstrap is initiated in ReplicationManager, transition is blocked here and wait until local replica has\n+        // caught up with enough peer replicas.\n         replicaSyncUpManager.waitBootstrapCompleted(partitionName);\n-      } catch (InterruptedException e) {\n-        logger.error(\"Bootstrap was interrupted on partition {}\", partitionName);\n-        throw new StateTransitionException(\"Bootstrap failed or was interrupted\", BootstrapFailure);\n-      } catch (StateTransitionException e) {\n-        logger.error(\"Bootstrap didn't complete on partition {}\", partitionName, e);\n-        throw e;\n       }\n-    }\n+    } catch (InterruptedException e) {\n+      logger.error(\"Bootstrap was interrupted on partition {}\", partitionName);\n+      participantMetrics.errorStateCount.addAndGet(1);\n+      throw new StateTransitionException(\"Bootstrap failed or was interrupted\", BootstrapFailure);\n+    } catch (StateTransitionException e) {\n+      logger.error(\"Bootstrap didn't complete on partition {}\", partitionName, e);\n+      participantMetrics.errorStateCount.addAndGet(1);\n+      throw e;\n+    } finally {\n+      participantMetrics.bootstrapCount.addAndGet(-1);\n+    }\n+    participantMetrics.standbyCount.addAndGet(1);\n   }\n \n   @Override\n   public void onPartitionBecomeLeaderFromStandby(String partitionName) {\n-    PartitionStateChangeListener cloudToStoreReplicationListener =\n-        partitionStateChangeListeners.get(StateModelListenerType.CloudToStoreReplicationManagerListener);\n-    if (cloudToStoreReplicationListener != null) {\n-      cloudToStoreReplicationListener.onPartitionBecomeLeaderFromStandby(partitionName);\n+    try {\n+      PartitionStateChangeListener cloudToStoreReplicationListener =\n+          partitionStateChangeListeners.get(StateModelListenerType.CloudToStoreReplicationManagerListener);\n+      if (cloudToStoreReplicationListener != null) {\n+        cloudToStoreReplicationListener.onPartitionBecomeLeaderFromStandby(partitionName);\n+      }\n+      PartitionStateChangeListener replicationManagerListener =\n+          partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n+      if (replicationManagerListener != null) {\n+        replicationManagerListener.onPartitionBecomeLeaderFromStandby(partitionName);\n+      }\n+    } catch (Exception e) {\n+      participantMetrics.errorStateCount.addAndGet(1);\n+      throw e;\n+    } finally {\n+      participantMetrics.standbyCount.addAndGet(-1);\n     }\n \n-    PartitionStateChangeListener replicationManagerListener =\n-        partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n-    if (replicationManagerListener != null) {\n-      replicationManagerListener.onPartitionBecomeLeaderFromStandby(partitionName);\n-    }\n+    participantMetrics.leaderCount.addAndGet(1);\n   }\n \n   @Override\n   public void onPartitionBecomeStandbyFromLeader(String partitionName) {\n-    PartitionStateChangeListener cloudToStoreReplicationListener =\n-        partitionStateChangeListeners.get(StateModelListenerType.CloudToStoreReplicationManagerListener);\n-    if (cloudToStoreReplicationListener != null) {\n-      cloudToStoreReplicationListener.onPartitionBecomeStandbyFromLeader(partitionName);\n-    }\n-\n-    PartitionStateChangeListener replicationManagerListener =\n-        partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n-    if (replicationManagerListener != null) {\n-      replicationManagerListener.onPartitionBecomeStandbyFromLeader(partitionName);\n+    try {\n+      PartitionStateChangeListener cloudToStoreReplicationListener =\n+          partitionStateChangeListeners.get(StateModelListenerType.CloudToStoreReplicationManagerListener);\n+      if (cloudToStoreReplicationListener != null) {\n+        cloudToStoreReplicationListener.onPartitionBecomeStandbyFromLeader(partitionName);\n+      }\n+      PartitionStateChangeListener replicationManagerListener =\n+          partitionStateChangeListeners.get(StateModelListenerType.ReplicationManagerListener);\n+      if (replicationManagerListener != null) {\n+        replicationManagerListener.onPartitionBecomeStandbyFromLeader(partitionName);\n+      }\n+    } catch (Exception e) {\n+      participantMetrics.errorStateCount.addAndGet(1);\n+      throw e;\n+    } finally {\n+      participantMetrics.leaderCount.addAndGet(-1);\n     }\n+    participantMetrics.standbyCount.addAndGet(1);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MTA2Mw==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404951063", "bodyText": "not used, can be removed", "author": "jsjtzyy", "createdAt": "2020-04-07T16:35:27Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java", "diffHunk": "@@ -47,6 +49,7 @@\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.stream.Collectors;\n \n+import static com.github.ambry.clustermap.ClusterMapUtils.*;", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MTgxNw==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404951817", "bodyText": "This can be package private. Also add java doc to this method please.", "author": "jsjtzyy", "createdAt": "2020-04-07T16:36:36Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java", "diffHunk": "@@ -241,6 +244,10 @@ private void updatePartitionInfoMaps(List<RemoteReplicaInfo> remoteReplicaInfos,\n         .add(partitionInfo);\n   }\n \n+  public Map<String, List<ReplicaId>> getPeerLeaderReplicasByPartition() {", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java\nindex 78ad20de9..330896e1d 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java\n\n@@ -244,7 +244,11 @@ public class ReplicationManager extends ReplicationEngine {\n         .add(partitionInfo);\n   }\n \n-  public Map<String, List<ReplicaId>> getPeerLeaderReplicasByPartition() {\n+  /**\n+   * Get a map of partition to list of peer leader replicas\n+   * @return an unmodifiable map of peer leader replicas stored by partition {@link ReplicationEngine#peerLeaderReplicasByPartition}\n+   */\n+  Map<String, List<ReplicaId>> getPeerLeaderReplicasByPartition() {\n     return Collections.unmodifiableMap(peerLeaderReplicasByPartition);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2NzIwNQ==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404967205", "bodyText": "minor: I noticed AmbryDataNode.toString() will print out DataNode, so you can remove Node in your log message.", "author": "jsjtzyy", "createdAt": "2020-04-07T16:59:15Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java", "diffHunk": "@@ -373,12 +380,34 @@ public void onPartitionBecomeStandbyFromBootstrap(String partitionName) {\n     public void onPartitionBecomeLeaderFromStandby(String partitionName) {\n       logger.info(\"Partition state change notification from Standby to Leader received for partition {}\",\n           partitionName);\n+      //Changes for leader based replication - for now, we just log the list of peer leader replicas\n+      // 1. get replica ID of current node from store manager\n+      ReplicaId localReplica = storeManager.getReplica(partitionName);\n+\n+      // 2. Get the peer leader replicas from all data centers for this partition\n+      List<? extends ReplicaId> leaderReplicas =\n+          localReplica.getPartitionId().getReplicaIdsByState(ReplicaState.LEADER, null);\n+\n+      // 3. Log the list of leader replicas associated with this partition (will be used later for leadership based replication)\n+      List<ReplicaId> peerLeaderReplicas = new ArrayList<>();\n+      for (ReplicaId leaderReplica : leaderReplicas) {\n+        if (leaderReplica.getDataNodeId() != localReplica.getDataNodeId()) {\n+          peerLeaderReplicas.add(leaderReplica);\n+          logger.info(\"Partition {} on Node {} is leader in remote dc {}\", partitionName,", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java\nindex 78ad20de9..330896e1d 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicationManager.java\n\n@@ -393,8 +397,9 @@ public class ReplicationManager extends ReplicationEngine {\n       for (ReplicaId leaderReplica : leaderReplicas) {\n         if (leaderReplica.getDataNodeId() != localReplica.getDataNodeId()) {\n           peerLeaderReplicas.add(leaderReplica);\n-          logger.info(\"Partition {} on Node {} is leader in remote dc {}\", partitionName,\n-              leaderReplica.getDataNodeId().toString(), leaderReplica.getDataNodeId().getDatacenterName());\n+          logger.info(\"Partition {} on node instance {} is leader in remote dc {}\", partitionName,\n+              getInstanceName(leaderReplica.getDataNodeId().getHostname(), leaderReplica.getDataNodeId().getPort()),\n+              leaderReplica.getDataNodeId().getDatacenterName());\n         }\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDQzOQ==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404970439", "bodyText": "nit: CamelCase currentDataCenter", "author": "jsjtzyy", "createdAt": "2020-04-07T17:04:00Z", "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -601,7 +602,18 @@ public void replicaFromStandbyToLeaderTest() throws Exception {\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n+    String currentdatacenter =", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDkwMA==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404970900", "bodyText": "Also, update the comment of this method please.", "author": "jsjtzyy", "createdAt": "2020-04-07T17:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "chunk": "diff --git a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\nindex ac45635e5..83b17da15 100644\n--- a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n+++ b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n\n@@ -588,51 +591,64 @@ public class ReplicationTest {\n   }\n \n   /**\n-   * Test state transition in replication manager from STANDBY to LEADER (right now it is no-op in prod code, but we\n-   * keep test here for future use)\n+   * Test state transition in replication manager from STANDBY to LEADER\n+   * Test setup: When creating partitions, make sure that there is exactly one replica in LEADER STATE on each data center\n+   * Test condition: When a partition on current node moves from standby to leader, verify that in-memory map storing\n+   * partition to peer leader replicas is updated correctly\n    * @throws Exception\n    */\n   @Test\n   public void replicaFromStandbyToLeaderTest() throws Exception {\n     MockClusterMap clusterMap = new MockClusterMap();\n     ClusterMapConfig clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n+    MockHelixParticipant.metricRegistry = new MetricRegistry();\n     MockHelixParticipant mockHelixParticipant = new MockHelixParticipant(clusterMapConfig);\n     Pair<StorageManager, ReplicationManager> managers =\n         createStorageManagerAndReplicationManager(clusterMap, clusterMapConfig, mockHelixParticipant);\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n-    String currentdatacenter =\n+    String currentDataCenter =\n         storageManager.getReplica(existingPartition.toString()).getDataNodeId().getDatacenterName();\n     mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n     List<ReplicaId> peerLeaderReplicasInReplicationManager =\n-        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toString());\n-    List<ReplicaId> peerLeaderReplicasInClusterMap =\n-        (List<ReplicaId>) existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)\n-            .stream()\n-            .filter(r -> !r.getDataNodeId().getDatacenterName().equals(currentdatacenter))\n-            .collect(Collectors.toList());\n-    assertThat(\"mismatch in leader peer replicas\", peerLeaderReplicasInReplicationManager,\n-        is(peerLeaderReplicasInClusterMap));\n+        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toPathString());\n+    List<ReplicaId> peerLeaderReplicasInClusterMap = existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)\n+        .stream()\n+        .filter(r -> !r.getDataNodeId().getDatacenterName().equals(currentDataCenter))\n+        .collect(Collectors.toList());\n+    assertThat(\"Mismatch in list of leader peer replicas stored by partition in replication manager and cluster map\",\n+        peerLeaderReplicasInReplicationManager, is(peerLeaderReplicasInClusterMap));\n     storageManager.shutdown();\n   }\n \n   /**\n-   * Test state transition in replication manager from LEADER to STANDBY (right now it is no-op in prod code, but we\n-   * keep test here for future use)\n+   * Test state transition in replication manager from LEADER to STANDBY\n+   * Test setup: When creating partitions, make sure that there is exactly one replica in LEADER STATE on each data center\n+   * Test condition: When a partition on the current node moves from leader to standby, verify that in-memory map storing\n+   * partition to peer leader replicas is updated correctly\n    * @throws Exception\n    */\n   @Test\n   public void replicaFromLeaderToStandbyTest() throws Exception {\n     MockClusterMap clusterMap = new MockClusterMap();\n     ClusterMapConfig clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n+    MockHelixParticipant.metricRegistry = new MetricRegistry();\n     MockHelixParticipant mockHelixParticipant = new MockHelixParticipant(clusterMapConfig);\n     Pair<StorageManager, ReplicationManager> managers =\n         createStorageManagerAndReplicationManager(clusterMap, clusterMapConfig, mockHelixParticipant);\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n+    mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n+    Map<String, List<ReplicaId>> peerLeaderReplicasByPartition = replicationManager.getPeerLeaderReplicasByPartition();\n+    assertTrue(\n+        \"Partition is not present in the map of partition to peer leader replicas after it moved from standby to leader\",\n+        peerLeaderReplicasByPartition.containsKey(existingPartition.toPathString()));\n     mockHelixParticipant.onPartitionBecomeStandbyFromLeader(existingPartition.toPathString());\n+    assertTrue(\n+        \"Partition is still present in the map of partition to peer leader replicas after it moved from leader to standby\",\n+        !peerLeaderReplicasByPartition.containsKey(existingPartition.toPathString()));\n     storageManager.shutdown();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MjI4Nw==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404972287", "bodyText": "minor: can remove this cast (List<ReplicaId>)", "author": "jsjtzyy", "createdAt": "2020-04-07T17:06:37Z", "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -601,7 +602,18 @@ public void replicaFromStandbyToLeaderTest() throws Exception {\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n+    String currentdatacenter =\n+        storageManager.getReplica(existingPartition.toString()).getDataNodeId().getDatacenterName();\n     mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n+    List<ReplicaId> peerLeaderReplicasInReplicationManager =\n+        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toString());\n+    List<ReplicaId> peerLeaderReplicasInClusterMap =\n+        (List<ReplicaId>) existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "chunk": "diff --git a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\nindex ac45635e5..83b17da15 100644\n--- a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n+++ b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n\n@@ -588,51 +591,64 @@ public class ReplicationTest {\n   }\n \n   /**\n-   * Test state transition in replication manager from STANDBY to LEADER (right now it is no-op in prod code, but we\n-   * keep test here for future use)\n+   * Test state transition in replication manager from STANDBY to LEADER\n+   * Test setup: When creating partitions, make sure that there is exactly one replica in LEADER STATE on each data center\n+   * Test condition: When a partition on current node moves from standby to leader, verify that in-memory map storing\n+   * partition to peer leader replicas is updated correctly\n    * @throws Exception\n    */\n   @Test\n   public void replicaFromStandbyToLeaderTest() throws Exception {\n     MockClusterMap clusterMap = new MockClusterMap();\n     ClusterMapConfig clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n+    MockHelixParticipant.metricRegistry = new MetricRegistry();\n     MockHelixParticipant mockHelixParticipant = new MockHelixParticipant(clusterMapConfig);\n     Pair<StorageManager, ReplicationManager> managers =\n         createStorageManagerAndReplicationManager(clusterMap, clusterMapConfig, mockHelixParticipant);\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n-    String currentdatacenter =\n+    String currentDataCenter =\n         storageManager.getReplica(existingPartition.toString()).getDataNodeId().getDatacenterName();\n     mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n     List<ReplicaId> peerLeaderReplicasInReplicationManager =\n-        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toString());\n-    List<ReplicaId> peerLeaderReplicasInClusterMap =\n-        (List<ReplicaId>) existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)\n-            .stream()\n-            .filter(r -> !r.getDataNodeId().getDatacenterName().equals(currentdatacenter))\n-            .collect(Collectors.toList());\n-    assertThat(\"mismatch in leader peer replicas\", peerLeaderReplicasInReplicationManager,\n-        is(peerLeaderReplicasInClusterMap));\n+        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toPathString());\n+    List<ReplicaId> peerLeaderReplicasInClusterMap = existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)\n+        .stream()\n+        .filter(r -> !r.getDataNodeId().getDatacenterName().equals(currentDataCenter))\n+        .collect(Collectors.toList());\n+    assertThat(\"Mismatch in list of leader peer replicas stored by partition in replication manager and cluster map\",\n+        peerLeaderReplicasInReplicationManager, is(peerLeaderReplicasInClusterMap));\n     storageManager.shutdown();\n   }\n \n   /**\n-   * Test state transition in replication manager from LEADER to STANDBY (right now it is no-op in prod code, but we\n-   * keep test here for future use)\n+   * Test state transition in replication manager from LEADER to STANDBY\n+   * Test setup: When creating partitions, make sure that there is exactly one replica in LEADER STATE on each data center\n+   * Test condition: When a partition on the current node moves from leader to standby, verify that in-memory map storing\n+   * partition to peer leader replicas is updated correctly\n    * @throws Exception\n    */\n   @Test\n   public void replicaFromLeaderToStandbyTest() throws Exception {\n     MockClusterMap clusterMap = new MockClusterMap();\n     ClusterMapConfig clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n+    MockHelixParticipant.metricRegistry = new MetricRegistry();\n     MockHelixParticipant mockHelixParticipant = new MockHelixParticipant(clusterMapConfig);\n     Pair<StorageManager, ReplicationManager> managers =\n         createStorageManagerAndReplicationManager(clusterMap, clusterMapConfig, mockHelixParticipant);\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n+    mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n+    Map<String, List<ReplicaId>> peerLeaderReplicasByPartition = replicationManager.getPeerLeaderReplicasByPartition();\n+    assertTrue(\n+        \"Partition is not present in the map of partition to peer leader replicas after it moved from standby to leader\",\n+        peerLeaderReplicasByPartition.containsKey(existingPartition.toPathString()));\n     mockHelixParticipant.onPartitionBecomeStandbyFromLeader(existingPartition.toPathString());\n+    assertTrue(\n+        \"Partition is still present in the map of partition to peer leader replicas after it moved from leader to standby\",\n+        !peerLeaderReplicasByPartition.containsKey(existingPartition.toPathString()));\n     storageManager.shutdown();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3Mjk0Nw==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404972947", "bodyText": "Since you also made changes in LEADER -> STANDBY transition in replication manager, could you also add a test for this case?  (in replicaFromLeaderToStandbyTest)", "author": "jsjtzyy", "createdAt": "2020-04-07T17:07:41Z", "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -601,7 +602,18 @@ public void replicaFromStandbyToLeaderTest() throws Exception {\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n+    String currentdatacenter =\n+        storageManager.getReplica(existingPartition.toString()).getDataNodeId().getDatacenterName();\n     mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n+    List<ReplicaId> peerLeaderReplicasInReplicationManager =\n+        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toString());\n+    List<ReplicaId> peerLeaderReplicasInClusterMap =\n+        (List<ReplicaId>) existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)\n+            .stream()\n+            .filter(r -> !r.getDataNodeId().getDatacenterName().equals(currentdatacenter))\n+            .collect(Collectors.toList());\n+    assertThat(\"mismatch in leader peer replicas\", peerLeaderReplicasInReplicationManager,\n+        is(peerLeaderReplicasInClusterMap));\n     storageManager.shutdown();\n   }", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "chunk": "diff --git a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\nindex ac45635e5..83b17da15 100644\n--- a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n+++ b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n\n@@ -588,51 +591,64 @@ public class ReplicationTest {\n   }\n \n   /**\n-   * Test state transition in replication manager from STANDBY to LEADER (right now it is no-op in prod code, but we\n-   * keep test here for future use)\n+   * Test state transition in replication manager from STANDBY to LEADER\n+   * Test setup: When creating partitions, make sure that there is exactly one replica in LEADER STATE on each data center\n+   * Test condition: When a partition on current node moves from standby to leader, verify that in-memory map storing\n+   * partition to peer leader replicas is updated correctly\n    * @throws Exception\n    */\n   @Test\n   public void replicaFromStandbyToLeaderTest() throws Exception {\n     MockClusterMap clusterMap = new MockClusterMap();\n     ClusterMapConfig clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n+    MockHelixParticipant.metricRegistry = new MetricRegistry();\n     MockHelixParticipant mockHelixParticipant = new MockHelixParticipant(clusterMapConfig);\n     Pair<StorageManager, ReplicationManager> managers =\n         createStorageManagerAndReplicationManager(clusterMap, clusterMapConfig, mockHelixParticipant);\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n-    String currentdatacenter =\n+    String currentDataCenter =\n         storageManager.getReplica(existingPartition.toString()).getDataNodeId().getDatacenterName();\n     mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n     List<ReplicaId> peerLeaderReplicasInReplicationManager =\n-        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toString());\n-    List<ReplicaId> peerLeaderReplicasInClusterMap =\n-        (List<ReplicaId>) existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)\n-            .stream()\n-            .filter(r -> !r.getDataNodeId().getDatacenterName().equals(currentdatacenter))\n-            .collect(Collectors.toList());\n-    assertThat(\"mismatch in leader peer replicas\", peerLeaderReplicasInReplicationManager,\n-        is(peerLeaderReplicasInClusterMap));\n+        replicationManager.getPeerLeaderReplicasByPartition().get(existingPartition.toPathString());\n+    List<ReplicaId> peerLeaderReplicasInClusterMap = existingPartition.getReplicaIdsByState(ReplicaState.LEADER, null)\n+        .stream()\n+        .filter(r -> !r.getDataNodeId().getDatacenterName().equals(currentDataCenter))\n+        .collect(Collectors.toList());\n+    assertThat(\"Mismatch in list of leader peer replicas stored by partition in replication manager and cluster map\",\n+        peerLeaderReplicasInReplicationManager, is(peerLeaderReplicasInClusterMap));\n     storageManager.shutdown();\n   }\n \n   /**\n-   * Test state transition in replication manager from LEADER to STANDBY (right now it is no-op in prod code, but we\n-   * keep test here for future use)\n+   * Test state transition in replication manager from LEADER to STANDBY\n+   * Test setup: When creating partitions, make sure that there is exactly one replica in LEADER STATE on each data center\n+   * Test condition: When a partition on the current node moves from leader to standby, verify that in-memory map storing\n+   * partition to peer leader replicas is updated correctly\n    * @throws Exception\n    */\n   @Test\n   public void replicaFromLeaderToStandbyTest() throws Exception {\n     MockClusterMap clusterMap = new MockClusterMap();\n     ClusterMapConfig clusterMapConfig = new ClusterMapConfig(verifiableProperties);\n+    MockHelixParticipant.metricRegistry = new MetricRegistry();\n     MockHelixParticipant mockHelixParticipant = new MockHelixParticipant(clusterMapConfig);\n     Pair<StorageManager, ReplicationManager> managers =\n         createStorageManagerAndReplicationManager(clusterMap, clusterMapConfig, mockHelixParticipant);\n     StorageManager storageManager = managers.getFirst();\n     MockReplicationManager replicationManager = (MockReplicationManager) managers.getSecond();\n     PartitionId existingPartition = replicationManager.partitionToPartitionInfo.keySet().iterator().next();\n+    mockHelixParticipant.onPartitionBecomeLeaderFromStandby(existingPartition.toPathString());\n+    Map<String, List<ReplicaId>> peerLeaderReplicasByPartition = replicationManager.getPeerLeaderReplicasByPartition();\n+    assertTrue(\n+        \"Partition is not present in the map of partition to peer leader replicas after it moved from standby to leader\",\n+        peerLeaderReplicasByPartition.containsKey(existingPartition.toPathString()));\n     mockHelixParticipant.onPartitionBecomeStandbyFromLeader(existingPartition.toPathString());\n+    assertTrue(\n+        \"Partition is still present in the map of partition to peer leader replicas after it moved from leader to standby\",\n+        !peerLeaderReplicasByPartition.containsKey(existingPartition.toPathString()));\n     storageManager.shutdown();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MzY5NQ==", "url": "https://github.com/linkedin/ambry/pull/1453#discussion_r404973695", "bodyText": "nit: dataCenters", "author": "jsjtzyy", "createdAt": "2020-04-07T17:08:50Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockPartitionId.java", "diffHunk": "@@ -53,10 +55,16 @@ public MockPartitionId(long partition, String partitionClass, List<MockDataNodeI\n     this.partitionClass = partitionClass;\n     this.replicaIds = new ArrayList<>(dataNodes.size());\n     replicaAndState = new HashMap<>();\n+    Set<String> datacenters = new HashSet<>();", "originalCommit": "21046b2bab764cbe04e631889f819d9843657e81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "chunk": "diff --git a/ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockPartitionId.java b/ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockPartitionId.java\nindex c4abd7064..a9842d1fc 100644\n--- a/ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockPartitionId.java\n+++ b/ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockPartitionId.java\n\n@@ -55,14 +55,14 @@ public class MockPartitionId implements PartitionId {\n     this.partitionClass = partitionClass;\n     this.replicaIds = new ArrayList<>(dataNodes.size());\n     replicaAndState = new HashMap<>();\n-    Set<String> datacenters = new HashSet<>();\n+    Set<String> dataCenters = new HashSet<>();\n     for (MockDataNodeId dataNode : dataNodes) {\n       MockReplicaId replicaId = new MockReplicaId(dataNode.getPort(), this, dataNode, mountPathIndexToUse);\n       replicaIds.add(replicaId);\n-      if (datacenters.contains(dataNode.getDatacenterName())) {\n+      if (dataCenters.contains(dataNode.getDatacenterName())) {\n         replicaAndState.put(replicaId, ReplicaState.STANDBY);\n       } else {\n-        datacenters.add(dataNode.getDatacenterName());\n+        dataCenters.add(dataNode.getDatacenterName());\n         replicaAndState.put(replicaId, ReplicaState.LEADER);\n       }\n     }\n"}}, {"oid": "8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "url": "https://github.com/linkedin/ambry/commit/8724549b5ebe9517ecf2bdfd8e6053d212f93c0d", "message": "Changes to resolve conflicts and address comments", "committedDate": "2020-04-08T18:58:10Z", "type": "commit"}, {"oid": "2f8b80c632dc916aaf85e48ca845049982a8e226", "url": "https://github.com/linkedin/ambry/commit/2f8b80c632dc916aaf85e48ca845049982a8e226", "message": "Merging changes added to address comments on pr 1453\nMerge branch 'pull-1453'", "committedDate": "2020-04-08T19:04:24Z", "type": "commit"}, {"oid": "a0964a07491ac5c0f9f0a69105f6b7598978faa7", "url": "https://github.com/linkedin/ambry/commit/a0964a07491ac5c0f9f0a69105f6b7598978faa7", "message": "Log the peer leader replica info in onPartitionBecomeLeaderFromStandBy", "committedDate": "2020-04-08T19:47:31Z", "type": "commit"}, {"oid": "2bfc5fb4400b7d71c2b7a81b51ea4f2cb0213630", "url": "https://github.com/linkedin/ambry/commit/2bfc5fb4400b7d71c2b7a81b51ea4f2cb0213630", "message": "Add tests for logging of peer leader replicas on partition state changes", "committedDate": "2020-04-08T19:50:20Z", "type": "commit"}, {"oid": "2bfc5fb4400b7d71c2b7a81b51ea4f2cb0213630", "url": "https://github.com/linkedin/ambry/commit/2bfc5fb4400b7d71c2b7a81b51ea4f2cb0213630", "message": "Add tests for logging of peer leader replicas on partition state changes", "committedDate": "2020-04-08T19:50:20Z", "type": "forcePushed"}]}