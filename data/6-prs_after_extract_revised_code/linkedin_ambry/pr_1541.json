{"pr_number": 1541, "pr_title": "Replace string concatenation in logger calls", "pr_createdAt": "2020-05-29T03:26:13Z", "pr_url": "https://github.com/linkedin/ambry/pull/1541", "timeline": [{"oid": "8f2082b76d4fe2545198d6497509da0258645ae9", "url": "https://github.com/linkedin/ambry/commit/8f2082b76d4fe2545198d6497509da0258645ae9", "message": "Replace string concatenation in logger calls\n\nWhen done inside of hot path logger.trace calls, this can result in\nquite a few unnecessary string allocations. For example, there were a\nlot of such calls inside of PersistentIndex.\n\nUsed intellij inspections and autosuggestions to find and replace across\nthe entire project.", "committedDate": "2020-05-29T03:19:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2OTIyOQ==", "url": "https://github.com/linkedin/ambry/pull/1541#discussion_r432769229", "bodyText": "nit: do we have an extra space here. Maybe run the code formatter on this file.", "author": "ankagrawal", "createdAt": "2020-05-29T22:37:04Z", "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/AmbryRequests.java", "diffHunk": "@@ -369,7 +367,7 @@ public void handleGetRequest(NetworkRequest request) throws IOException, Interru\n         if (isReplicaRequest) {\n           metrics.getBlobAllByReplicaProcessingTimeInMs.update(processingTime);\n           // client id now has dc name at the end, for example: ClientId=replication-fetch-abc.example.com[dc1]\n-          String[] clientStrs = getRequest.getClientId().split(\"\\\\[\");\n+          String[] clientStrs = getRequest.getClientId().split(\"\\\\[\" );", "originalCommit": "8f2082b76d4fe2545198d6497509da0258645ae9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}