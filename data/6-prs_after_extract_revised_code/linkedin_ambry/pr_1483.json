{"pr_number": 1483, "pr_title": "Epoll patch and HTTP2 frame size tune.", "pr_createdAt": "2020-04-21T21:41:48Z", "pr_url": "https://github.com/linkedin/ambry/pull/1483", "timeline": [{"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "url": "https://github.com/linkedin/ambry/commit/fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "message": "Epoll patch and HTTP2 frame size tune\n\nInlcuded epoll in gradle build.\nAdd config for http2FrameMaxSize, http2initialWindowSize and WriteBufferWaterMark to support larger frame size.", "committedDate": "2020-04-21T22:22:11Z", "type": "commit"}, {"oid": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "url": "https://github.com/linkedin/ambry/commit/fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "message": "Epoll patch and HTTP2 frame size tune\n\nInlcuded epoll in gradle build.\nAdd config for http2FrameMaxSize, http2initialWindowSize and WriteBufferWaterMark to support larger frame size.", "committedDate": "2020-04-21T22:22:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjM2NQ==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412512365", "bodyText": "nit: add space in between sentences.", "author": "cgtz", "createdAt": "2020-04-21T21:43:32Z", "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent", "originalCommit": "680912a8070ab8aa6b9f346f99a80a2f3d7ba909", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2ODg4OQ==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412668889", "bodyText": "sure.", "author": "zzmao", "createdAt": "2020-04-22T04:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f1ad38fd3252f185978833ae74d948b8504f653", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java b/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java\nindex 5dd46a461..53ed04d8b 100644\n--- a/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java\n+++ b/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java\n\n@@ -70,7 +70,7 @@ public class Http2ClientConfig {\n   public final int http2MaxContentLength;\n \n   /**\n-   * The maximum allowed http2 frame size.This value is used to represent\n+   * The maximum allowed http2 frame size. This value is used to represent\n    * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.5.2\">SETTINGS_MAX_FRAME_SIZE</a>.\n    */\n   @Config(HTTP2_FRAME_MAX_SIZE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDY5OA==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412544698", "bodyText": "Do we want to have both the log messages in Http2FrameLogger and this handler? They can potentially be redundant, but I do see that this class also logs ambry request info, which could be useful.", "author": "cgtz", "createdAt": "2020-04-21T22:50:27Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());\n+    } else if (frame instanceof Http2DataFrame) {\n+      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(),", "originalCommit": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTIxMQ==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669211", "bodyText": "It's easy to enable this debug level with your script, but I guess it doesn't work to Netty?", "author": "zzmao", "createdAt": "2020-04-22T04:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MjA3Mg==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r413152072", "bodyText": "It works with netty too. I guess since these are separate classes they can be turned on/off independently and both may help with debugging", "author": "cgtz", "createdAt": "2020-04-22T16:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4f1ad38fd3252f185978833ae74d948b8504f653", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java\nindex 0d6395389..0f2322cbf 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java\n\n@@ -47,17 +47,16 @@ class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Fra\n       requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n       http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n           System.currentTimeMillis() - requestInfo.getStreamSendTime());\n-      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo);\n     } else if (frame instanceof Http2DataFrame) {\n-      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(),\n-          requestInfo.toString());\n+      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(), requestInfo);\n     }\n \n     if (frame instanceof Http2DataFrame && ((Http2DataFrame) frame).isEndStream()) {\n       long time = System.currentTimeMillis() - requestInfo.getStreamHeaderFrameReceiveTime();\n       http2NetworkClient.getHttp2ClientMetrics().http2StreamFirstToLastFrameTime.update(time);\n       http2NetworkClient.getHttp2ClientMetrics().http2ResponseFrameCount.update(requestInfo.responseFramesCount);\n-      logger.debug(\"All Frame received. Time: {}ms. Request: {}\", time, requestInfo.toString());\n+      logger.debug(\"All Frame received. Time: {}ms. Request: {}\", time, requestInfo);\n     }\n     ctx.fireChannelRead(frame);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTQ3Mw==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412545473", "bodyText": "I would suggest just passing requestInfo and not requestInfo.toString() into this logger calls. It will avoid the string concatenation when debug logging is not enabled and makes the method calls a bit less verbose.", "author": "cgtz", "createdAt": "2020-04-21T22:52:14Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.network.http2;\n+\n+import com.github.ambry.network.RequestInfo;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2DataFrame;\n+import io.netty.handler.codec.http2.Http2Frame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A handler to stats response streams.\n+ */\n+\n+@ChannelHandler.Sharable\n+class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Frame> {\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+  private Http2NetworkClient http2NetworkClient;\n+\n+  public Http2ClientStreamStatsHandler(Http2NetworkClient http2NetworkClient) {\n+    this.http2NetworkClient = http2NetworkClient;\n+  }\n+\n+  @Override\n+  protected void channelRead0(ChannelHandlerContext ctx, Http2Frame frame) throws Exception {\n+    ReferenceCountUtil.retain(frame);\n+    RequestInfo requestInfo = ctx.channel().attr(Http2NetworkClient.REQUEST_INFO).get();\n+    requestInfo.responseFramesCount++;\n+    if (frame instanceof Http2HeadersFrame) {\n+      requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n+      http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n+          System.currentTimeMillis() - requestInfo.getStreamSendTime());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());", "originalCommit": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTI0Mw==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669243", "bodyText": "sure.", "author": "zzmao", "createdAt": "2020-04-22T04:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4f1ad38fd3252f185978833ae74d948b8504f653", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java\nindex 0d6395389..0f2322cbf 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ClientStreamStatsHandler.java\n\n@@ -47,17 +47,16 @@ class Http2ClientStreamStatsHandler extends SimpleChannelInboundHandler<Http2Fra\n       requestInfo.setStreamHeaderFrameReceiveTime(System.currentTimeMillis());\n       http2NetworkClient.getHttp2ClientMetrics().http2StreamRoundTripTime.update(\n           System.currentTimeMillis() - requestInfo.getStreamSendTime());\n-      logger.debug(\"Header Frame received. Request: {}\", requestInfo.toString());\n+      logger.debug(\"Header Frame received. Request: {}\", requestInfo);\n     } else if (frame instanceof Http2DataFrame) {\n-      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(),\n-          requestInfo.toString());\n+      logger.debug(\"Data Frame size: {}. Request: {}\", ((Http2DataFrame) frame).content().readableBytes(), requestInfo);\n     }\n \n     if (frame instanceof Http2DataFrame && ((Http2DataFrame) frame).isEndStream()) {\n       long time = System.currentTimeMillis() - requestInfo.getStreamHeaderFrameReceiveTime();\n       http2NetworkClient.getHttp2ClientMetrics().http2StreamFirstToLastFrameTime.update(time);\n       http2NetworkClient.getHttp2ClientMetrics().http2ResponseFrameCount.update(requestInfo.responseFramesCount);\n-      logger.debug(\"All Frame received. Time: {}ms. Request: {}\", time, requestInfo.toString());\n+      logger.debug(\"All Frame received. Time: {}ms. Request: {}\", time, requestInfo);\n     }\n     ctx.fireChannelRead(frame);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAxNA==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412546014", "bodyText": "capitalize i in initial", "author": "cgtz", "createdAt": "2020-04-21T22:53:32Z", "path": "ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java", "diffHunk": "@@ -67,6 +69,23 @@\n   @Default(\"25 * 1024 * 1024\")\n   public final int http2MaxContentLength;\n \n+  /**\n+   * The maximum allowed http2 frame size.This value is used to represent\n+   * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.5.2\">SETTINGS_MAX_FRAME_SIZE</a>.\n+   */\n+  @Config(HTTP2_FRAME_MAX_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2FrameMaxSize;\n+\n+\n+  /**\n+   * The initial window size used in http streams. This allows sender send big frame.\n+   */\n+  @Config(HTTP2_INITIAL_WINDOW_SIZE)\n+  @Default(\"5 * 1024 * 1024\")\n+  public final int http2initialWindowSize;", "originalCommit": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTI3MQ==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669271", "bodyText": "fixed.", "author": "zzmao", "createdAt": "2020-04-22T04:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "4f1ad38fd3252f185978833ae74d948b8504f653", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java b/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java\nindex 5dd46a461..53ed04d8b 100644\n--- a/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java\n+++ b/ambry-api/src/main/java/com/github/ambry/config/Http2ClientConfig.java\n\n@@ -70,7 +70,7 @@ public class Http2ClientConfig {\n   public final int http2MaxContentLength;\n \n   /**\n-   * The maximum allowed http2 frame size.This value is used to represent\n+   * The maximum allowed http2 frame size. This value is used to represent\n    * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.5.2\">SETTINGS_MAX_FRAME_SIZE</a>.\n    */\n   @Config(HTTP2_FRAME_MAX_SIZE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDg4Mg==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412564882", "bodyText": "Just curious: Is there a specific issue this TODO will help with?", "author": "cgtz", "createdAt": "2020-04-21T23:39:36Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -91,6 +95,10 @@ public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConf\n               http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n               long streamAcquiredTime = System.currentTimeMillis();\n               Channel streamChannel = future.getNow();\n+              streamChannel.pipeline().addLast(http2ClientStreamStatsHandler);\n+              // TODO: implement ourselves' aggregator. Http2Streams to Response Object", "originalCommit": "fe05a0d1fe69a19d7ae21a9c79b6c606892fb028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2OTMzNA==", "url": "https://github.com/linkedin/ambry/pull/1483#discussion_r412669334", "bodyText": "I can create one.", "author": "zzmao", "createdAt": "2020-04-22T04:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDg4Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5f2b7865414ecd1fa2339bc443429fa729fdb621", "url": "https://github.com/linkedin/ambry/commit/5f2b7865414ecd1fa2339bc443429fa729fdb621", "message": "use sane watermark", "committedDate": "2020-04-22T04:49:56Z", "type": "commit"}, {"oid": "4f1ad38fd3252f185978833ae74d948b8504f653", "url": "https://github.com/linkedin/ambry/commit/4f1ad38fd3252f185978833ae74d948b8504f653", "message": "address cgetz comment", "committedDate": "2020-04-22T04:56:16Z", "type": "commit"}]}