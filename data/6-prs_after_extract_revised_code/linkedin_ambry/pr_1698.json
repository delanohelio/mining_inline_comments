{"pr_number": 1698, "pr_title": "Refactor RestUtils.setUserMetadataHeaders to take byte array or map as input", "pr_createdAt": "2020-11-18T23:04:39Z", "pr_url": "https://github.com/linkedin/ambry/pull/1698", "timeline": [{"oid": "b8377be33fffefedaf29476bc143cc5fb9b54e99", "url": "https://github.com/linkedin/ambry/commit/b8377be33fffefedaf29476bc143cc5fb9b54e99", "message": "Refactor RestUtils.setUserMetadataHeaders to accept byte array or map", "committedDate": "2020-11-18T22:52:50Z", "type": "commit"}, {"oid": "cd7dc78df9d2841f4968c9b101aea1588f8a2e4d", "url": "https://github.com/linkedin/ambry/commit/cd7dc78df9d2841f4968c9b101aea1588f8a2e4d", "message": "Merge branch 'master' of github.com:linkedin/ambry into usermetadata-headers-map", "committedDate": "2020-11-18T22:54:58Z", "type": "commit"}, {"oid": "fc003f82c3178d858751df5362b2669ae67dc650", "url": "https://github.com/linkedin/ambry/commit/fc003f82c3178d858751df5362b2669ae67dc650", "message": "Fix typo", "committedDate": "2020-11-18T23:00:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2Mzk1Mg==", "url": "https://github.com/linkedin/ambry/pull/1698#discussion_r527063952", "bodyText": "There seems to be a difference between the map provided in open source and the closed source place where this is intended to be used.\nRestUtils.buildUserMetadata returns a map with keys that already have the \"x-ambry-um-\" prefix.\nThe decoded map in closed source does not (without writing some code that adds them).\nWould it be possible to make buildUserMetadata not prepend the prefix and have setUserMetadataHeaders do it instead?", "author": "cgtz", "createdAt": "2020-11-19T17:22:01Z", "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "diffHunk": "@@ -860,38 +860,50 @@ public static void accountAndContainerNamePreconditionCheck(RestRequest restRequ\n \n   /**\n    * Sets the user metadata in the headers of the response.\n-   * @param userMetadata the user metadata that needs to be sent.\n+   * @param userMetadata byte array containing user metadata that needs to be sent.\n    * @param restResponseChannel the {@link RestResponseChannel} that is used for sending the response.\n    * @return {@code true} if the user metadata was successfully deserialized into headers, {@code false} if not.\n    * @throws RestServiceException if there are any problems setting the header.\n    */\n-  public static boolean setUserMetadataHeaders(byte[] userMetadata, RestResponseChannel restResponseChannel)\n-      throws RestServiceException {\n+  public static boolean setUserMetadataHeaders(byte[] userMetadata, RestResponseChannel restResponseChannel) {\n     Map<String, String> userMetadataMap = buildUserMetadata(userMetadata);\n-    boolean setHeaders = userMetadataMap != null;\n-    if (setHeaders) {\n-      for (Map.Entry<String, String> entry : userMetadataMap.entrySet()) {\n-        String headerName = entry.getKey();\n-        String headerValue = entry.getValue();\n+    if (userMetadataMap != null) {\n+      setUserMetadataHeaders(userMetadataMap, restResponseChannel);\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Sets the user metadata in the headers of the response.\n+   * @param userMetadataMap map of user metadata that needs to be sent.\n+   * @param restResponseChannel the {@link RestResponseChannel} that is used for sending the response.\n+   * @throws RestServiceException if there are any problems setting the header.\n+   */\n+  public static void setUserMetadataHeaders(Map<String, String> userMetadataMap,", "originalCommit": "fc003f82c3178d858751df5362b2669ae67dc650", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2OTYzMw==", "url": "https://github.com/linkedin/ambry/pull/1698#discussion_r527069633", "bodyText": "Agree. Also I am trying to understand the motivation to have this new method. Are you planning to replace the piece of similar logic after codec.decode in closed source to avoid duplicate code?", "author": "jsjtzyy", "createdAt": "2020-11-19T17:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2Mzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA3MzQ4Nw==", "url": "https://github.com/linkedin/ambry/pull/1698#discussion_r527073487", "bodyText": "Nvm, you have explained offline.", "author": "jsjtzyy", "createdAt": "2020-11-19T17:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2Mzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NTEwNA==", "url": "https://github.com/linkedin/ambry/pull/1698#discussion_r540475104", "bodyText": "I updated the new method to add the prefix if not already present.", "author": "lightningrob", "createdAt": "2020-12-10T20:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2Mzk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9e10e17aad7a57173a9cf948de1d3e0666ca09e7", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java b/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\nindex 11828d1f0..08cab6629 100644\n--- a/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\n+++ b/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\n\n@@ -906,6 +925,24 @@ public class RestUtils {\n     }\n   }\n \n+  /**\n+   * Verify that the session ID in the chunk metadata matches the expected session.\n+   * @param chunkMetadata the metadata map parsed from a signed chunk ID.\n+   * @param expectedSession the session that the chunk should match. This can be null for the first chunk (where any\n+   *                        session ID is valid).\n+   * @return this chunk's session ID\n+   * @throws RestServiceException if the chunk has a null session ID or it does not match the expected value.\n+   */\n+  public static String verifyChunkUploadSession(Map<String, String> chunkMetadata, String expectedSession)\n+      throws RestServiceException {\n+    String chunkSession = RestUtils.getHeader(chunkMetadata, RestUtils.Headers.SESSION, true);\n+    if (expectedSession != null && !expectedSession.equals(chunkSession)) {\n+      throw new RestServiceException(\"Session IDs differ for chunks in a stitch request\",\n+          RestServiceErrorCode.BadRequest);\n+    }\n+    return chunkSession;\n+  }\n+\n   /**\n    * Build a {@link ByteRange} given a Range header value. This method can parse the following Range\n    * header syntax:\n"}}, {"oid": "9e10e17aad7a57173a9cf948de1d3e0666ca09e7", "url": "https://github.com/linkedin/ambry/commit/9e10e17aad7a57173a9cf948de1d3e0666ca09e7", "message": "Merge branch 'master' of github.com:linkedin/ambry into usermetadata-headers-map", "committedDate": "2020-12-10T19:31:31Z", "type": "commit"}, {"oid": "4ab9009edbf155033dfc551680079c672fdb2971", "url": "https://github.com/linkedin/ambry/commit/4ab9009edbf155033dfc551680079c672fdb2971", "message": "Address review comments", "committedDate": "2020-12-10T20:27:00Z", "type": "commit"}]}