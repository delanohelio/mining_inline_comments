{"pr_number": 1436, "pr_title": "Getting single blob should avoid Cosmos", "pr_createdAt": "2020-03-25T05:16:53Z", "pr_url": "https://github.com/linkedin/ambry/pull/1436", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxNDU1NQ==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r397614555", "bodyText": "Will update test case for this.", "author": "lightningrob", "createdAt": "2020-03-25T05:19:03Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -341,12 +342,20 @@ private boolean shouldUpload(MessageInfo messageInfo) {\n       return false;\n     }\n     if (recentBlobCache.containsKey(messageInfo.getStoreKey().getID())) {\n+      vcrMetrics.blobCacheHitCount.inc();\n       return false;\n     }\n-    // expiration time above threshold. Expired blobs are blocked by ReplicaThread.\n-    // FIXME: for !isVcr, ignore expiration time\n-    return (messageInfo.getExpirationTimeInMs() == Utils.Infinite_Time\n-        || messageInfo.getExpirationTimeInMs() - messageInfo.getOperationTimeMs() >= minTtlMillis);\n+    if (isVcr) {\n+      // VCR only backs up blobs with expiration time above threshold.\n+      // Expired blobs are blocked by ReplicaThread.\n+      // TODO: VCR for non-backup also needs to replicate everything\n+      // We can change default cloudConfig.vcrMinTtlDays to 0 and override in config\n+      return (messageInfo.getExpirationTimeInMs() == Utils.Infinite_Time\n+          || messageInfo.getExpirationTimeInMs() - messageInfo.getOperationTimeMs() >= minTtlMillis);\n+    } else {\n+      // Upload all live blobs", "originalCommit": "23f8bbcbfa1749c8942d259a0a8c3f33f04c1f97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a01101909b7199985441dfb3a222f05e2d4663", "chunk": "diff --git a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudBlobStore.java\nsimilarity index 95%\nrename from ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java\nrename to ambry-cloud/src/main/java/com/github/ambry/cloud/CloudBlobStore.java\nindex 4ffbee026..d0cabbbf2 100644\n--- a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudBlobStore.java\n\n@@ -341,8 +341,7 @@ class CloudBlobStore implements Store {\n     if (messageInfo.isDeleted()) {\n       return false;\n     }\n-    if (recentBlobCache.containsKey(messageInfo.getStoreKey().getID())) {\n-      vcrMetrics.blobCacheHitCount.inc();\n+    if (checkCacheState(messageInfo.getStoreKey().getID())) {\n       return false;\n     }\n     if (isVcr) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MDkxMQ==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r399850911", "bodyText": "Why do we want to avoid cosmos here? Because of consistency concern between ABS and cosmos (but that should apply to all cases) OR coz cosmos is more costly?", "author": "ankagrawal", "createdAt": "2020-03-29T20:40:51Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -161,7 +161,12 @@ public boolean updateBlobExpiration(BlobId blobId, long expirationTime) throws C\n       return Collections.emptyMap();\n     }\n \n-    // TODO: For single blob GET request, get metadata from ABS\n+    // For single blob GET request, get metadata from ABS instead of Cosmos\n+    if (blobIds.size() == 1) {\n+      CloudBlobMetadata metadata = azureBlobDataAccessor.getBlobMetadata(blobIds.get(0));", "originalCommit": "1e0147117c0e70f6706a696760c16614a684db22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ0NjkzMQ==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r400446931", "bodyText": "We don't want the extra round trip of going to cosmos (note that with this change there will still be two round trips to ABS, so there is additional work to do).  And it will be expensive to query Cosmos on every GET/Getinfo request.", "author": "lightningrob", "createdAt": "2020-03-30T19:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MDkxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwODY5Ng==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401108696", "bodyText": "Use Exception to catch RunTimeException?", "author": "zzmao", "createdAt": "2020-03-31T18:01:11Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -127,7 +127,7 @@ public boolean uploadBlob(BlobId blobId, long inputLength, CloudBlobMetadata clo\n         azureMetrics.backupSuccessByteRate.mark(inputLength);\n       }\n       return uploaded;\n-    } catch (BlobStorageException | DocumentClientException | IOException e) {\n+    } catch (Exception e) {", "originalCommit": "720417e68f719d763b0a0fae76a2e728ee62bcaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyOTExOA==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401129118", "bodyText": "Yes.  Azure client throws IllegalStateException on timeouts.  Given the amount of different exceptions being thrown, I gave up and decided to catch them all.  If we do get a RuntimeException from our own code, we should still see it in the log.", "author": "lightningrob", "createdAt": "2020-03-31T18:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwODY5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxNTM2OQ==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401815369", "bodyText": "nit: extra parentheses around the method call", "author": "cgtz", "createdAt": "2020-04-01T18:16:53Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java", "diffHunk": "@@ -491,7 +525,7 @@ public StoreStats getStoreStats() {\n   public boolean isKeyDeleted(StoreKey key) throws StoreException {\n     checkStarted();\n     // Not definitive, but okay for some deletes to be replayed.\n-    return (BlobState.DELETED == recentBlobCache.get(key.getID()));\n+    return (checkCacheState(key.getID(),BlobState.DELETED));", "originalCommit": "720417e68f719d763b0a0fae76a2e728ee62bcaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e90a6cacd1e4c02f3cf513f1755a76936fa5401", "chunk": "diff --git a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudBlobStore.java\nsimilarity index 95%\nrename from ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java\nrename to ambry-cloud/src/main/java/com/github/ambry/cloud/CloudBlobStore.java\nindex d0cabbbf2..4ffbee026 100644\n--- a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudBlobStore.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudBlobStore.java\n\n@@ -525,7 +504,7 @@ class CloudBlobStore implements Store {\n   public boolean isKeyDeleted(StoreKey key) throws StoreException {\n     checkStarted();\n     // Not definitive, but okay for some deletes to be replayed.\n-    return (checkCacheState(key.getID(),BlobState.DELETED));\n+    return (BlobState.DELETED == recentBlobCache.get(key.getID()));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMzA5NQ==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401833095", "bodyText": "When would this case happen vs. the method throwing a not found BlobStorageException?", "author": "cgtz", "createdAt": "2020-04-01T18:46:47Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureBlobDataAccessor.java", "diffHunk": "@@ -262,13 +262,41 @@ public void downloadBlob(BlobId blobId, OutputStream outputStream) throws BlobSt\n     }\n   }\n \n+  /**\n+   * Retrieve the metadata for the specified blob.\n+   * @param blobId The {@link BlobId} to retrieve.\n+   * @return The {@link CloudBlobMetadata} if the blob was found, or null otherwise.\n+   * @throws BlobStorageException\n+   */\n+  public CloudBlobMetadata getBlobMetadata(BlobId blobId) throws BlobStorageException {\n+    BlockBlobClient blobClient = getBlockBlobClient(blobId, false);\n+    BlobProperties blobProperties = null;\n+    try {\n+      blobProperties =\n+          blobClient.getPropertiesWithResponse(defaultRequestConditions, requestTimeout, Context.NONE).getValue();\n+      if (blobProperties == null) {", "originalCommit": "720417e68f719d763b0a0fae76a2e728ee62bcaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1Mjc1NQ==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401952755", "bodyText": "Technically it shouldn't, but I figured it was safer to check.", "author": "lightningrob", "createdAt": "2020-04-01T22:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMzA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e90a6cacd1e4c02f3cf513f1755a76936fa5401", "chunk": "diff --git a/ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureBlobDataAccessor.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java\nsimilarity index 99%\nrename from ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureBlobDataAccessor.java\nrename to ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java\nindex 54b989690..f95731a0e 100644\n--- a/ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureBlobDataAccessor.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java\n\n@@ -279,7 +279,7 @@ public class AzureBlobDataAccessor {\n         return null;\n       }\n     } catch (BlobStorageException e) {\n-      if (isNotFoundError(e.getErrorCode())) {\n+      if (e.getErrorCode() == BlobErrorCode.BLOB_NOT_FOUND) {\n         logger.debug(\"Blob {} not found.\", blobId);\n         return null;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzODU4OA==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401838588", "bodyText": "is info level too high for this log message, since the CloudStorageException can be caught and logged at a higher level?", "author": "cgtz", "createdAt": "2020-04-01T18:56:07Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -379,9 +384,13 @@ private static CloudStorageException toCloudStorageException(String message, Exc\n     } else if (e instanceof DocumentClientException) {\n       statusCode = ((DocumentClientException) e).getStatusCode();\n       retryDelayMs = ((DocumentClientException) e).getRetryAfterInMilliseconds();\n+    } else {\n+      // Note: catch-all since ABS can throw things like IOException, IllegalStateException\n+      statusCode = StatusCodes.INTERNAL_SERVER_ERROR;\n     }\n+    logger.info(\"{} status {}, {}\", message, statusCode, e.toString());", "originalCommit": "720417e68f719d763b0a0fae76a2e728ee62bcaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDU2Ng==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401954566", "bodyText": "I added this mainly to log the status code which is useful for debugging and which gets lost in the CloudStorageException.  I will reduce to debug if we see too many of them.", "author": "lightningrob", "createdAt": "2020-04-01T22:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzODU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6e90a6cacd1e4c02f3cf513f1755a76936fa5401", "chunk": "diff --git a/ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java\nsimilarity index 99%\nrename from ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java\nrename to ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java\nindex 49848d946..76fa03190 100644\n--- a/ambry-cloud/src/main/java/com.github.ambry.cloud/azure/AzureCloudDestination.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java\n\n@@ -384,8 +384,8 @@ class AzureCloudDestination implements CloudDestination {\n     } else if (e instanceof DocumentClientException) {\n       statusCode = ((DocumentClientException) e).getStatusCode();\n       retryDelayMs = ((DocumentClientException) e).getRetryAfterInMilliseconds();\n-    } else {\n-      // Note: catch-all since ABS can throw things like IOException, IllegalStateException\n+    } else if (e instanceof RuntimeException) {\n+      // Note: handling this separately since ABS timeouts are thrown as IllegalStateException\n       statusCode = StatusCodes.INTERNAL_SERVER_ERROR;\n     }\n     logger.info(\"{} status {}, {}\", message, statusCode, e.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjcxNA==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401842714", "bodyText": "not directly related to this patch, but can you change Long id into long id. No need to use a boxed long if it is non-nullable.", "author": "cgtz", "createdAt": "2020-04-01T19:03:09Z", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java", "diffHunk": "@@ -84,6 +84,24 @@ public boolean isEqual(String other) {\n     return id.toString().equals(other);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    AmbryPartition partition = (AmbryPartition) o;\n+    return id.equals(partition.id);", "originalCommit": "720417e68f719d763b0a0fae76a2e728ee62bcaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDYzMg==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401954632", "bodyText": "Done", "author": "lightningrob", "createdAt": "2020-04-01T22:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "fab74ddb17e63d4d160e9f3ee46736c5e4069111", "chunk": "diff --git a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryPartition.java\nsimilarity index 96%\nrename from ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java\nrename to ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryPartition.java\nindex dd45ddd8d..9e54adb34 100644\n--- a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java\n+++ b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryPartition.java\n\n@@ -81,7 +81,7 @@ public class AmbryPartition implements PartitionId {\n \n   @Override\n   public boolean isEqual(String other) {\n-    return id.toString().equals(other);\n+    return Long.toString(id).equals(other);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NDAzNQ==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401844035", "bodyText": "Did we find a case where a clustermap was returning a non-singleton AmbryPartition instance to require a hashcode? Not necessarily against having it since this can be a big gotcha when writing cluster aware code or test cases. However, if there are cases where PartitionId is found to have multiple instances for the same partition number, we should track them down since this class holds some state regarding sealed/stopped replicas.", "author": "cgtz", "createdAt": "2020-04-01T19:05:30Z", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java", "diffHunk": "@@ -84,6 +84,24 @@ public boolean isEqual(String other) {\n     return id.toString().equals(other);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    AmbryPartition partition = (AmbryPartition) o;\n+    return id.equals(partition.id);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return id.hashCode();", "originalCommit": "720417e68f719d763b0a0fae76a2e728ee62bcaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTExNw==", "url": "https://github.com/linkedin/ambry/pull/1436#discussion_r401955117", "bodyText": "I'm not sure.  The frequency of cache misses (even repeated ones causing 3 retries to fail) made me suspicious but I have no proof of that.", "author": "lightningrob", "createdAt": "2020-04-01T22:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NDAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "fab74ddb17e63d4d160e9f3ee46736c5e4069111", "chunk": "diff --git a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryPartition.java\nsimilarity index 96%\nrename from ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java\nrename to ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryPartition.java\nindex dd45ddd8d..9e54adb34 100644\n--- a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryPartition.java\n+++ b/ambry-clustermap/src/main/java/com/github/ambry/clustermap/AmbryPartition.java\n\n@@ -81,7 +81,7 @@ public class AmbryPartition implements PartitionId {\n \n   @Override\n   public boolean isEqual(String other) {\n-    return id.toString().equals(other);\n+    return Long.toString(id).equals(other);\n   }\n \n   @Override\n"}}, {"oid": "6e90a6cacd1e4c02f3cf513f1755a76936fa5401", "url": "https://github.com/linkedin/ambry/commit/6e90a6cacd1e4c02f3cf513f1755a76936fa5401", "message": "Getting single blob should avoid Cosmos\nAdd cache hit counter for CloudBlobStore\nFrontend uploads blob regardless of TTL\nHandle IllegalStateException on ABS timeouts\nAmbryPartition overrides equals and hashcode", "committedDate": "2020-04-01T22:30:20Z", "type": "commit"}, {"oid": "64a01101909b7199985441dfb3a222f05e2d4663", "url": "https://github.com/linkedin/ambry/commit/64a01101909b7199985441dfb3a222f05e2d4663", "message": "Add blobCacheLookup counter and fix test cases", "committedDate": "2020-04-01T22:30:20Z", "type": "commit"}, {"oid": "ffd43433d4dba9ba7309f6ff49e76609684a5e9c", "url": "https://github.com/linkedin/ambry/commit/ffd43433d4dba9ba7309f6ff49e76609684a5e9c", "message": "Handle case where ABS operation throws PrematureCloseException", "committedDate": "2020-04-01T22:30:20Z", "type": "commit"}, {"oid": "fab74ddb17e63d4d160e9f3ee46736c5e4069111", "url": "https://github.com/linkedin/ambry/commit/fab74ddb17e63d4d160e9f3ee46736c5e4069111", "message": "Address Casey's review comments", "committedDate": "2020-04-01T22:30:20Z", "type": "commit"}, {"oid": "fab74ddb17e63d4d160e9f3ee46736c5e4069111", "url": "https://github.com/linkedin/ambry/commit/fab74ddb17e63d4d160e9f3ee46736c5e4069111", "message": "Address Casey's review comments", "committedDate": "2020-04-01T22:30:20Z", "type": "forcePushed"}]}