{"pr_number": 1485, "pr_title": "Prevent compaction partial failure if possible, recover from it if necessary.", "pr_createdAt": "2020-04-24T07:15:09Z", "pr_url": "https://github.com/linkedin/ambry/pull/1485", "timeline": [{"oid": "9c0e32397b46f713e79019c8552278af0870a61e", "url": "https://github.com/linkedin/ambry/commit/9c0e32397b46f713e79019c8552278af0870a61e", "message": "Prevent compaction partial failure if possible, and recover from it if necessary.", "committedDate": "2020-04-24T07:10:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczNDQ5Nw==", "url": "https://github.com/linkedin/ambry/pull/1485#discussion_r414734497", "bodyText": "Can we log a metric here? Will be easier to track. Otherwise this will get lost in log messages.", "author": "ankagrawal", "createdAt": "2020-04-24T17:15:32Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -65,6 +73,29 @@ public void run() {\n     }\n   }\n \n+  /**\n+   * Shut down the compactor waiting for in progress operations to complete.\n+   */\n+  public void shutdown() {\n+    shuttingDown.set(true);\n+    logger.info(\"Compactor received shutdown request, waiting up to {} seconds for in-flight operations to finish\",\n+        shutDownTimeoutSecs);\n+    try {\n+      doneLatch.get().await(shutDownTimeoutSecs, TimeUnit.SECONDS);\n+      logger.info(\"Compactor shut down successfully.\");\n+    } catch (InterruptedException ex) {\n+      logger.warn(\"Timed out waiting for operations to finish.  If cloud provider uses separate stores for \"", "originalCommit": "9c0e32397b46f713e79019c8552278af0870a61e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b314ee1bb9a454ec2b4fc14595b556e9653281b6", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java\nindex c1db4b49b..90c9ce076 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java\n\n@@ -80,12 +80,17 @@ public class CloudStorageCompactor implements Runnable {\n     shuttingDown.set(true);\n     logger.info(\"Compactor received shutdown request, waiting up to {} seconds for in-flight operations to finish\",\n         shutDownTimeoutSecs);\n+    boolean success = false;\n     try {\n-      doneLatch.get().await(shutDownTimeoutSecs, TimeUnit.SECONDS);\n-      logger.info(\"Compactor shut down successfully.\");\n+      success = doneLatch.get().await(shutDownTimeoutSecs, TimeUnit.SECONDS);\n     } catch (InterruptedException ex) {\n-      logger.warn(\"Timed out waiting for operations to finish.  If cloud provider uses separate stores for \"\n-          + \"data and metadata, some inconsistencies may be present.\");\n+    }\n+    if (success) {\n+      logger.info(\"Compactor shut down successfully.\");\n+    } else {\n+      logger.warn(\"Timed out or interrupted waiting for operations to finish.  If cloud provider uses separate stores\"\n+          + \" for data and metadata, some inconsistencies may be present.\");\n+      vcrMetrics.compactionShutdownTimeoutCount.inc();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMjg5MQ==", "url": "https://github.com/linkedin/ambry/pull/1485#discussion_r416032891", "bodyText": "When a latch times out, it actually doesn't throw an exception, it just returns false, so the return value has to be checked. The InterruptedException is only thrown if the thread is actually interrupted.", "author": "cgtz", "createdAt": "2020-04-27T18:03:35Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java", "diffHunk": "@@ -65,6 +73,29 @@ public void run() {\n     }\n   }\n \n+  /**\n+   * Shut down the compactor waiting for in progress operations to complete.\n+   */\n+  public void shutdown() {\n+    shuttingDown.set(true);\n+    logger.info(\"Compactor received shutdown request, waiting up to {} seconds for in-flight operations to finish\",\n+        shutDownTimeoutSecs);\n+    try {\n+      doneLatch.get().await(shutDownTimeoutSecs, TimeUnit.SECONDS);", "originalCommit": "9c0e32397b46f713e79019c8552278af0870a61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzNDQ5OQ==", "url": "https://github.com/linkedin/ambry/pull/1485#discussion_r416134499", "bodyText": "Good catch, fixed.", "author": "lightningrob", "createdAt": "2020-04-27T20:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMjg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b314ee1bb9a454ec2b4fc14595b556e9653281b6", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java\nindex c1db4b49b..90c9ce076 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/CloudStorageCompactor.java\n\n@@ -80,12 +80,17 @@ public class CloudStorageCompactor implements Runnable {\n     shuttingDown.set(true);\n     logger.info(\"Compactor received shutdown request, waiting up to {} seconds for in-flight operations to finish\",\n         shutDownTimeoutSecs);\n+    boolean success = false;\n     try {\n-      doneLatch.get().await(shutDownTimeoutSecs, TimeUnit.SECONDS);\n-      logger.info(\"Compactor shut down successfully.\");\n+      success = doneLatch.get().await(shutDownTimeoutSecs, TimeUnit.SECONDS);\n     } catch (InterruptedException ex) {\n-      logger.warn(\"Timed out waiting for operations to finish.  If cloud provider uses separate stores for \"\n-          + \"data and metadata, some inconsistencies may be present.\");\n+    }\n+    if (success) {\n+      logger.info(\"Compactor shut down successfully.\");\n+    } else {\n+      logger.warn(\"Timed out or interrupted waiting for operations to finish.  If cloud provider uses separate stores\"\n+          + \" for data and metadata, some inconsistencies may be present.\");\n+      vcrMetrics.compactionShutdownTimeoutCount.inc();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0ODA3OA==", "url": "https://github.com/linkedin/ambry/pull/1485#discussion_r416048078", "bodyText": "udpate -> update\nWas the previous javadoc inaccurate? It seems like the old code would have also thrown an exception on not found.", "author": "cgtz", "createdAt": "2020-04-27T18:25:31Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java", "diffHunk": "@@ -248,7 +249,7 @@ public FindResult findEntriesSince(String partitionPath, FindToken findToken, lo\n    * @param blobId The {@link BlobId} to update.\n    * @param fieldName The metadata field to modify.\n    * @param value The new value.\n-   * @return {@code true} if the udpate succeeded, {@code false} if the metadata record was not found.\n+   * @return {@code true} if the udpate succeeded, {@code false} if no update was needed.", "originalCommit": "9c0e32397b46f713e79019c8552278af0870a61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyMTgzMg==", "url": "https://github.com/linkedin/ambry/pull/1485#discussion_r416121832", "bodyText": "yes I fixed the doc.", "author": "lightningrob", "createdAt": "2020-04-27T20:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0ODA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "b314ee1bb9a454ec2b4fc14595b556e9653281b6", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java\nindex 4c06c729b..c0171db6a 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureCloudDestination.java\n\n@@ -249,7 +249,7 @@ class AzureCloudDestination implements CloudDestination {\n    * @param blobId The {@link BlobId} to update.\n    * @param fieldName The metadata field to modify.\n    * @param value The new value.\n-   * @return {@code true} if the udpate succeeded, {@code false} if no update was needed.\n+   * @return {@code true} if the update succeeded, {@code false} if no update was needed.\n    * @throws CloudStorageException if the update fails.\n    */\n   private boolean updateBlobMetadata(BlobId blobId, String fieldName, Object value) throws CloudStorageException {\n"}}, {"oid": "b314ee1bb9a454ec2b4fc14595b556e9653281b6", "url": "https://github.com/linkedin/ambry/commit/b314ee1bb9a454ec2b4fc14595b556e9653281b6", "message": "Address review comments.", "committedDate": "2020-04-27T20:42:44Z", "type": "commit"}, {"oid": "35ab8f5b2414afc2b7621d70f74204cf8af2e86e", "url": "https://github.com/linkedin/ambry/commit/35ab8f5b2414afc2b7621d70f74204cf8af2e86e", "message": "Minor logging change to trigger rebuild", "committedDate": "2020-04-27T22:16:25Z", "type": "commit"}]}