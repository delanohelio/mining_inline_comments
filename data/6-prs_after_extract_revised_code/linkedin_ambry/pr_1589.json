{"pr_number": 1589, "pr_title": "Drop http2 request in two cases", "pr_createdAt": "2020-07-13T20:39:36Z", "pr_url": "https://github.com/linkedin/ambry/pull/1589", "timeline": [{"oid": "8bc826b093b0c9816386acea017306bd76525ffd", "url": "https://github.com/linkedin/ambry/commit/8bc826b093b0c9816386acea017306bd76525ffd", "message": "clean up", "committedDate": "2020-07-13T20:42:31Z", "type": "forcePushed"}, {"oid": "27026608d4372f99a98ad0022a1f1e71aec79a81", "url": "https://github.com/linkedin/ambry/commit/27026608d4372f99a98ad0022a1f1e71aec79a81", "message": "clean up", "committedDate": "2020-07-13T20:45:23Z", "type": "forcePushed"}, {"oid": "4f8108d2fb4f02b8d6bff8edb0edbe4d7f900fb9", "url": "https://github.com/linkedin/ambry/commit/4f8108d2fb4f02b8d6bff8edb0edbe4d7f900fb9", "message": "clean up", "committedDate": "2020-07-13T21:24:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxOTY2NA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454019664", "bodyText": "Is there a reason for dropping the connection at this point as opposed to just waiting until the router tells the NetworkClient to drop the request after routerRequestTimeoutMs? At this point, the request has already been flushed successfully so the request memory would have already been freed.", "author": "cgtz", "createdAt": "2020-07-14T00:09:56Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -79,34 +83,61 @@ public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConf\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics,\n         new StreamChannelInitializer());\n     this.http2ClientMetrics = http2ClientMetrics;\n+    correlationIdInFlightToChannelMap = new ConcurrentHashMap<>();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n     long startTime = System.currentTimeMillis();\n+\n     List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n     // Send request\n     http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n     for (RequestInfo requestInfo : requestsToSend) {\n       long streamInitiateTime = System.currentTimeMillis();\n+\n+      RequestOrResponse request = (RequestOrResponse) (requestInfo.getRequest());\n+      long waitingTime = streamInitiateTime - request.requestCreateTime;\n+      http2ClientMetrics.requestToNetworkClientLatencyMs.update(waitingTime);\n+\n       this.pools.get(InetSocketAddress.createUnresolved(requestInfo.getHost(), requestInfo.getPort().getPort()))\n           .acquire()\n           .addListener((GenericFutureListener<Future<Channel>>) future -> {\n             if (future.isSuccess()) {\n               http2ClientMetrics.http2StreamAcquireTime.update(System.currentTimeMillis() - streamInitiateTime);\n               long streamAcquiredTime = System.currentTimeMillis();\n               Channel streamChannel = future.getNow();\n+              correlationIdInFlightToChannelMap.put(requestInfo.getRequest().getCorrelationId(), streamChannel);\n               streamChannel.attr(REQUEST_INFO).set(requestInfo);\n+              if (!streamChannel.isWritable() || !streamChannel.parent().isWritable()) {\n+                http2ClientMetrics.http2StreamNotWritableCount.inc();\n+                logger.warn(\"Stream {} {} not writable. BytesBeforeWritable {} {}\", streamChannel.hashCode(),\n+                    streamChannel, streamChannel.bytesBeforeWritable(), streamChannel.parent().bytesBeforeWritable());\n+              }\n               streamChannel.writeAndFlush(requestInfo.getRequest()).addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n-                  // Listener will be notified after data is removed from ChannelOutboundBuffer (netty's send buffer)\n+                  // Listener will be notified right after data is removed from ChannelOutboundBuffer (netty's send buffer)\n                   // After removing from ChannelOutboundBuffer, it goes to OS send buffer.\n                   if (future.isSuccess()) {\n-                    http2ClientMetrics.http2StreamWriteAndFlushTime.update(\n-                        System.currentTimeMillis() - streamAcquiredTime);\n+                    long writeAndFlushUsedTime = System.currentTimeMillis() - streamAcquiredTime;\n+                    http2ClientMetrics.http2StreamWriteAndFlushTime.update(writeAndFlushUsedTime);\n                     requestInfo.setStreamSendTime(System.currentTimeMillis());\n+                    if (writeAndFlushUsedTime > http2ClientConfig.http2WriteAndFlushTimeoutMs) {\n+                      // This usually happens if remote can't accept data in time.\n+                      logger.warn(\n+                          \"WriteAndFlush exceeds http2RequestTimeoutMs {}ms, used time: {}ms, stream channel {}\",\n+                          http2ClientConfig.http2WriteAndFlushTimeoutMs, writeAndFlushUsedTime, streamChannel);\n+                      if (http2ClientConfig.http2DropRequestOnWriteAndFlushTimeout) {\n+                        releaseAndCloseStreamChannel(streamChannel);", "originalCommit": "4f8108d2fb4f02b8d6bff8edb0edbe4d7f900fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NjMwOQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454596309", "bodyText": "I agree with you . Changed http2DropRequestOnWriteAndFlushTimeout to false by default.", "author": "zzmao", "createdAt": "2020-07-14T19:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxOTY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NzgxNg==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454597816", "bodyText": "Want to discuss with your guys @justinlin-linkedin @cgtz :\nIf a request is flushed successfully(here), its refCnt is decreased, but there is a reference chain that AttributeKey<RequestInfo> -> PutRequest -> Bytebuf, so even refCnt is 0, data is still in memory and can't be recycled. Is this something we can improve?", "author": "zzmao", "createdAt": "2020-07-14T19:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxOTY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNjAwMA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454606000", "bodyText": "I am not worried about this. Comparing to the small object ByteBuf, the byte content held by ByteBuf is way larger. As long as the byte content can be reclaimed by the memory pool, we can ignore the small ByteBuf object.", "author": "justinlin-linkedin", "createdAt": "2020-07-14T19:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxOTY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzODMyOA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454638328", "bodyText": "Not fully understand your comment.\nIf it's PutRquest and it holds big chunk of data, we should break the link between PutRequst -> ByteBuf, for GC to recycle, right?", "author": "zzmao", "createdAt": "2020-07-14T20:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxOTY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NDYzNA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454664634", "bodyText": "Yes and no. When using Unpooled bytebuf, big chunk of data will rely on gc to release the memory. When using Pooled ByteBuf, big chunk of data will rely on calling release method to return the chunk back to the pool. GC doesn't reclaim the data chunk, only the small heap memory of ByteBuf fields.", "author": "justinlin-linkedin", "createdAt": "2020-07-14T21:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxOTY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a311b0d669412821d2c9084cfd624b2e135b661b", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\nindex 3f878e7a0..344145111 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n\n@@ -89,9 +90,24 @@ public class Http2NetworkClient implements NetworkClient {\n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    long startTime = System.currentTimeMillis();\n \n     List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    if (requestsToDrop.size() != 0) {\n+      logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n+      http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n+      for (int correlationId : requestsToDrop) {\n+        Channel streamChannel = correlationIdInFlightToChannelMap.get(correlationId);\n+        if (streamChannel != null) {\n+          logger.warn(\"Drop request on streamChannel: {}\", streamChannel);\n+          RequestInfo requestInfo = releaseAndCloseStreamChannel(streamChannel);\n+          if (requestInfo != null) {\n+            readyResponseInfos.add(new ResponseInfo(requestInfo, NetworkClientErrorCode.TimeoutError, null));\n+          }\n+        }\n+      }\n+    }\n+\n+    long sendStartTime = System.currentTimeMillis();\n     // Send request\n     http2ClientMetrics.http2ClientSendRate.mark(requestsToSend.size());\n     for (RequestInfo requestInfo : requestsToSend) {\n"}}, {"oid": "f9e8a0091a9704d967c810a07211a4517fd289e5", "url": "https://github.com/linkedin/ambry/commit/f9e8a0091a9704d967c810a07211a4517fd289e5", "message": "drop request", "committedDate": "2020-07-14T18:01:20Z", "type": "commit"}, {"oid": "890096ef0838c4deedd988f89f42b3366bc13928", "url": "https://github.com/linkedin/ambry/commit/890096ef0838c4deedd988f89f42b3366bc13928", "message": "exception", "committedDate": "2020-07-14T19:32:27Z", "type": "commit"}, {"oid": "890096ef0838c4deedd988f89f42b3366bc13928", "url": "https://github.com/linkedin/ambry/commit/890096ef0838c4deedd988f89f42b3366bc13928", "message": "exception", "committedDate": "2020-07-14T19:32:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNjYyNw==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454606627", "bodyText": "is there a possibility that redyResponseInfos contain responses for the dropped request? if so, do we care?", "author": "justinlin-linkedin", "createdAt": "2020-07-14T19:55:08Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -144,6 +174,12 @@ public void operationComplete(ChannelFuture future) throws Exception {\n     if (requestsToDrop.size() != 0) {\n       logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n       http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n+      for (int correlationId : requestsToDrop) {\n+        Channel streamChannel = correlationIdInFlightToChannelMap.remove(correlationId);\n+        if (streamChannel != null) {\n+          releaseAndCloseStreamChannel(streamChannel);\n+        }\n+      }\n     }\n \n     http2ClientResponseHandler.getResponseInfoQueue().poll(readyResponseInfos, pollTimeoutMs);", "originalCommit": "890096ef0838c4deedd988f89f42b3366bc13928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzNjUxNw==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454636517", "bodyText": "It should include responses from dropped request. That's how router knows it was drooped.", "author": "zzmao", "createdAt": "2020-07-14T20:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwNjYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a311b0d669412821d2c9084cfd624b2e135b661b", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\nindex 015c8d60a..344145111 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n\n@@ -169,24 +182,15 @@ public class Http2NetworkClient implements NetworkClient {\n             }\n           });\n     }\n-    http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - startTime);\n-    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n-    if (requestsToDrop.size() != 0) {\n-      logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n-      http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n-      for (int correlationId : requestsToDrop) {\n-        Channel streamChannel = correlationIdInFlightToChannelMap.remove(correlationId);\n-        if (streamChannel != null) {\n-          releaseAndCloseStreamChannel(streamChannel);\n-        }\n-      }\n-    }\n+    http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - sendStartTime);\n \n     http2ClientResponseHandler.getResponseInfoQueue().poll(readyResponseInfos, pollTimeoutMs);\n+    for (ResponseInfo responseInfo : readyResponseInfos) {\n+      correlationIdInFlightToChannelMap.remove(responseInfo.getRequestInfo().getRequest().getCorrelationId());\n+    }\n \n     http2ClientMetrics.http2ClientSendRate.mark(readyResponseInfos.size());\n-\n-    http2ClientMetrics.http2ClientSendAndPollTime.update(System.currentTimeMillis() - startTime);\n+    http2ClientMetrics.http2ClientSendAndPollTime.update(System.currentTimeMillis() - sendStartTime);\n     return readyResponseInfos;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwODMyNQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454608325", "bodyText": "Also, should probably remove the correlationIds for these responses from the inflight map.", "author": "justinlin-linkedin", "createdAt": "2020-07-14T19:58:12Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -144,6 +174,12 @@ public void operationComplete(ChannelFuture future) throws Exception {\n     if (requestsToDrop.size() != 0) {\n       logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n       http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n+      for (int correlationId : requestsToDrop) {\n+        Channel streamChannel = correlationIdInFlightToChannelMap.remove(correlationId);\n+        if (streamChannel != null) {\n+          releaseAndCloseStreamChannel(streamChannel);\n+        }\n+      }\n     }\n \n     http2ClientResponseHandler.getResponseInfoQueue().poll(readyResponseInfos, pollTimeoutMs);", "originalCommit": "890096ef0838c4deedd988f89f42b3366bc13928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNTM3OQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454625379", "bodyText": "Good catch. Re-organized the map logic:\nadd: when a stream is acquired\nremove: after http2ClientResponseHandler.getResponseInfoQueue().poll()", "author": "zzmao", "createdAt": "2020-07-14T20:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwODMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjE4NQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455232185", "bodyText": "Does this mean that a request cannot be dropped if stream acquisition takes a long time? I guess that is okay since that may be a rare occurrence and would require some complicated logic in the acquire listener to determine if the request can be sent or not.", "author": "cgtz", "createdAt": "2020-07-15T17:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwODMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MTk4NQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455241985", "bodyText": "You are right, if a stream is not acquired, it's won't be in inflight map, so it can't be dropped. It's rare, we don't expect stream acquisition takes a long time.\nAnd since the inflight map's value is streamChannel(to close it in case of drop request), we can't add <correlationId, streamChannel> to inflight map before stream acquisition done.\nAn extra time check can be made right after stream acquired if it's really need.", "author": "zzmao", "createdAt": "2020-07-15T18:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYwODMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a311b0d669412821d2c9084cfd624b2e135b661b", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\nindex 015c8d60a..344145111 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n\n@@ -169,24 +182,15 @@ public class Http2NetworkClient implements NetworkClient {\n             }\n           });\n     }\n-    http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - startTime);\n-    // TODO: close stream channel for requestsToDrop. Need a hashmap from corelationId to streamChannel\n-    if (requestsToDrop.size() != 0) {\n-      logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n-      http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n-      for (int correlationId : requestsToDrop) {\n-        Channel streamChannel = correlationIdInFlightToChannelMap.remove(correlationId);\n-        if (streamChannel != null) {\n-          releaseAndCloseStreamChannel(streamChannel);\n-        }\n-      }\n-    }\n+    http2ClientMetrics.http2ClientSendTime.update(System.currentTimeMillis() - sendStartTime);\n \n     http2ClientResponseHandler.getResponseInfoQueue().poll(readyResponseInfos, pollTimeoutMs);\n+    for (ResponseInfo responseInfo : readyResponseInfos) {\n+      correlationIdInFlightToChannelMap.remove(responseInfo.getRequestInfo().getRequest().getCorrelationId());\n+    }\n \n     http2ClientMetrics.http2ClientSendRate.mark(readyResponseInfos.size());\n-\n-    http2ClientMetrics.http2ClientSendAndPollTime.update(System.currentTimeMillis() - startTime);\n+    http2ClientMetrics.http2ClientSendAndPollTime.update(System.currentTimeMillis() - sendStartTime);\n     return readyResponseInfos;\n   }\n \n"}}, {"oid": "a311b0d669412821d2c9084cfd624b2e135b661b", "url": "https://github.com/linkedin/ambry/commit/a311b0d669412821d2c9084cfd624b2e135b661b", "message": "address justin comment", "committedDate": "2020-07-14T20:49:31Z", "type": "commit"}, {"oid": "a311b0d669412821d2c9084cfd624b2e135b661b", "url": "https://github.com/linkedin/ambry/commit/a311b0d669412821d2c9084cfd624b2e135b661b", "message": "address justin comment", "committedDate": "2020-07-14T20:49:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzI5Ng==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454657296", "bodyText": "what is this? This handler is not used anywhere, and it seems like we are trying to print out some info when it's a stream exception, which makes this a stream handler, doesn't stream handler belong to Http2NetworkClient.StreamChannelInitializer?", "author": "justinlin-linkedin", "createdAt": "2020-07-14T21:30:40Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java", "diffHunk": "@@ -64,5 +72,19 @@ public void channelCreated(Channel ch) throws Exception {\n         .build());\n     pipeline.addLast(new Http2MultiplexHandler(new ChannelInboundHandlerAdapter()));\n   }\n+\n+  @ChannelHandler.Sharable\n+  private static class ConnectionInboundExceptionHandler extends ChannelInboundHandlerAdapter {", "originalCommit": "a311b0d669412821d2c9084cfd624b2e135b661b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MTU5NQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454671595", "bodyText": "If a request is drop, its streamChannel will be closed, but if a response is already inflight, and then arrives client.\nHttp2MultiplexHandler will report unknown stream id error and print a long stack.\nThe handler here is to avoid such useless stack in our log.", "author": "zzmao", "createdAt": "2020-07-14T22:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzNTQ2MA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455235460", "bodyText": "Are we sure that all resources on child channels will be released if the exception is caught and swallowed here?", "author": "cgtz", "createdAt": "2020-07-15T17:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7b332e8776f02f5ff19216d5533da0ff53b95844", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java\nindex d56451c21..25f148f09 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java\n\n@@ -71,6 +71,7 @@ public class Http2ChannelPoolHandler extends AbstractChannelPoolHandler {\n         .frameLogger(new Http2FrameLogger(LogLevel.DEBUG, \"client\"))\n         .build());\n     pipeline.addLast(new Http2MultiplexHandler(new ChannelInboundHandlerAdapter()));\n+    pipeline.addLast(connectionInboundExceptionHandler);\n   }\n \n   @ChannelHandler.Sharable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1OTIzMA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454659230", "bodyText": "correlationIdInFlightToChannelMap.remove(correlationId) would be better.", "author": "justinlin-linkedin", "createdAt": "2020-07-14T21:34:43Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -79,24 +84,47 @@ public Http2NetworkClient(Http2ClientMetrics http2ClientMetrics, Http2ClientConf\n     this.pools = new Http2ChannelPoolMap(sslFactory, eventLoopGroup, http2ClientConfig, http2ClientMetrics,\n         new StreamChannelInitializer());\n     this.http2ClientMetrics = http2ClientMetrics;\n+    correlationIdInFlightToChannelMap = new ConcurrentHashMap<>();\n   }\n \n   @Override\n   public List<ResponseInfo> sendAndPoll(List<RequestInfo> requestsToSend, Set<Integer> requestsToDrop,\n       int pollTimeoutMs) {\n-    long startTime = System.currentTimeMillis();\n+\n     List<ResponseInfo> readyResponseInfos = new ArrayList<>();\n+    if (requestsToDrop.size() != 0) {\n+      logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n+      http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n+      for (int correlationId : requestsToDrop) {\n+        Channel streamChannel = correlationIdInFlightToChannelMap.get(correlationId);", "originalCommit": "a311b0d669412821d2c9084cfd624b2e135b661b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "feb4cce14b41752ec3379089522f2bf86b38df32", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\nindex 344145111..9648b0595 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n\n@@ -96,7 +96,7 @@ public class Http2NetworkClient implements NetworkClient {\n       logger.warn(\"Number of requestsToDrop: {}\", requestsToDrop.size());\n       http2ClientMetrics.http2RequestsToDropCount.inc(requestsToDrop.size());\n       for (int correlationId : requestsToDrop) {\n-        Channel streamChannel = correlationIdInFlightToChannelMap.get(correlationId);\n+        Channel streamChannel = correlationIdInFlightToChannelMap.remove(correlationId);\n         if (streamChannel != null) {\n           logger.warn(\"Drop request on streamChannel: {}\", streamChannel);\n           RequestInfo requestInfo = releaseAndCloseStreamChannel(streamChannel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1MzI1OQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454653259", "bodyText": "is this added to the pipeline anywhere?", "author": "cgtz", "createdAt": "2020-07-14T21:22:27Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java", "diffHunk": "@@ -49,6 +56,7 @@ public Http2ChannelPoolHandler(SSLFactory sslFactory, String host, int port, Htt\n     this.host = host;\n     this.port = port;\n     this.http2ClientConfig = http2ClientConfig;\n+    this.connectionInboundExceptionHandler = new ConnectionInboundExceptionHandler();", "originalCommit": "a311b0d669412821d2c9084cfd624b2e135b661b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NzUxNA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454677514", "bodyText": "yes, added to connection pipeline. Stream pipeline is not impacted.", "author": "zzmao", "createdAt": "2020-07-14T22:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1MzI1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NzgxOQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r454667819", "bodyText": "\"which from...\" -> \"for a request which was already dropped\"", "author": "cgtz", "createdAt": "2020-07-14T21:53:56Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java", "diffHunk": "@@ -64,5 +72,19 @@ public void channelCreated(Channel ch) throws Exception {\n         .build());\n     pipeline.addLast(new Http2MultiplexHandler(new ChannelInboundHandlerAdapter()));\n   }\n+\n+  @ChannelHandler.Sharable\n+  private static class ConnectionInboundExceptionHandler extends ChannelInboundHandlerAdapter {\n+\n+    @Override\n+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+      if (cause instanceof Http2Exception.StreamException) {\n+        // This usually happens when server returns response which from a dropped request.", "originalCommit": "a311b0d669412821d2c9084cfd624b2e135b661b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b332e8776f02f5ff19216d5533da0ff53b95844", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java\nindex d56451c21..25f148f09 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2ChannelPoolHandler.java\n\n@@ -71,6 +71,7 @@ public class Http2ChannelPoolHandler extends AbstractChannelPoolHandler {\n         .frameLogger(new Http2FrameLogger(LogLevel.DEBUG, \"client\"))\n         .build());\n     pipeline.addLast(new Http2MultiplexHandler(new ChannelInboundHandlerAdapter()));\n+    pipeline.addLast(connectionInboundExceptionHandler);\n   }\n \n   @ChannelHandler.Sharable\n"}}, {"oid": "feb4cce14b41752ec3379089522f2bf86b38df32", "url": "https://github.com/linkedin/ambry/commit/feb4cce14b41752ec3379089522f2bf86b38df32", "message": "address justin comments", "committedDate": "2020-07-14T22:04:51Z", "type": "commit"}, {"oid": "7b332e8776f02f5ff19216d5533da0ff53b95844", "url": "https://github.com/linkedin/ambry/commit/7b332e8776f02f5ff19216d5533da0ff53b95844", "message": "fix stream counter overflow issue", "committedDate": "2020-07-15T17:48:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE3NjE1OQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455176159", "bodyText": "nit: remove whitespace at the end of these log messages", "author": "cgtz", "createdAt": "2020-07-15T16:26:01Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/MultiplexedChannelRecord.java", "diffHunk": "@@ -268,18 +268,21 @@ private boolean claimStream() {\n     for (int attempt = 0; attempt < 5; ++attempt) {\n \n       if (state != RecordState.OPEN) {\n+        log.warn(\"claimStream fail because state is closed. \");", "originalCommit": "a311b0d669412821d2c9084cfd624b2e135b661b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE3NjYyNQ==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455176625", "bodyText": "remove whitespace here", "author": "cgtz", "createdAt": "2020-07-15T16:26:45Z", "path": "ambry-router/src/main/java/com/github/ambry/router/PutOperation.java", "diffHunk": "@@ -1357,7 +1357,7 @@ private void fetchRequests(RequestRegistrationCallback<PutOperation> requestRegi\n         requestRegistrationCallback.registerRequestToSend(PutOperation.this, request);\n         replicaIterator.remove();\n         if (RouterUtils.isRemoteReplica(routerConfig, replicaId)) {\n-          logger.trace(\"Making request with correlationId {} to a remote replica {} in {} \", correlationId,\n+          logger.debug(\"Making request with correlationId {} to a remote replica {} in {} \", correlationId,", "originalCommit": "a311b0d669412821d2c9084cfd624b2e135b661b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9f09c3156c74d5004e18edd9fdd7920b7bd7b42", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/PutOperation.java b/ambry-router/src/main/java/com/github/ambry/router/PutOperation.java\nindex 7658c7b77..a094cef56 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/PutOperation.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/PutOperation.java\n\n@@ -1357,11 +1357,11 @@ class PutOperation {\n         requestRegistrationCallback.registerRequestToSend(PutOperation.this, request);\n         replicaIterator.remove();\n         if (RouterUtils.isRemoteReplica(routerConfig, replicaId)) {\n-          logger.debug(\"Making request with correlationId {} to a remote replica {} in {} \", correlationId,\n+          logger.debug(\"Making request with correlationId {} to a remote replica {} in {}\", correlationId,\n               replicaId.getDataNodeId(), replicaId.getDataNodeId().getDatacenterName());\n           routerMetrics.crossColoRequestCount.inc();\n         } else {\n-          logger.trace(\"Making request with correlationId {} to a local replica {} \", correlationId,\n+          logger.trace(\"Making request with correlationId {} to a local replica {}\", correlationId,\n               replicaId.getDataNodeId());\n         }\n         routerMetrics.getDataNodeBasedMetrics(replicaId.getDataNodeId()).putRequestRate.mark();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNzE5NA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455207194", "bodyText": "Why doesn't the ref count get decremented in other exception cases? Are we assuming that other exception cases come from ChannelHandlers written by Ambry that don't decrement the ref count?", "author": "cgtz", "createdAt": "2020-07-15T17:16:24Z", "path": "ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java", "diffHunk": "@@ -124,8 +164,11 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                     releaseAndCloseStreamChannel(streamChannel);\n                     http2ClientResponseHandler.getResponseInfoQueue()\n                         .put(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n-                    // release related bytebuf\n-                    requestInfo.getRequest().release();\n+                    if (!(future.cause() instanceof ClosedChannelException)) {\n+                      // If it's ClosedChannelException caused by drop request, it's probably refCnt has been decreased.", "originalCommit": "a311b0d669412821d2c9084cfd624b2e135b661b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1ODE4Ng==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455258186", "bodyText": "It's because I am not clear when exactly refCnt is decreased. Let me do more reading.", "author": "zzmao", "createdAt": "2020-07-15T18:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNzE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3ODg4NA==", "url": "https://github.com/linkedin/ambry/pull/1589#discussion_r455278884", "bodyText": "@cgtz @justinlin-linkedin   I need suggestions from you.\nI just did an experiment which added  an excpetion throw in AmbrySendToHttp2Adaptor.write() (after ctx.write(dataFrame, promise)). In this case, writeAndFlush listener see refCnt 1.\nBut in the other case we saw, channel closed, writeAndFlush listener is also triggered. refCnt is 0. (because if we do one more refCnt decrase, netty reports error.)", "author": "zzmao", "createdAt": "2020-07-15T19:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNzE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "7b332e8776f02f5ff19216d5533da0ff53b95844", "chunk": "diff --git a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\nindex 344145111..92dc121c9 100644\n--- a/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n+++ b/ambry-network/src/main/java/com/github/ambry/network/http2/Http2NetworkClient.java\n\n@@ -157,13 +162,11 @@ public class Http2NetworkClient implements NetworkClient {\n                     http2ClientMetrics.http2StreamWriteAndFlushErrorCount.inc();\n                     logger.warn(\"Stream {} {} writeAndFlush fail. Cause: \", streamChannel.hashCode(), streamChannel,\n                         future.cause());\n-                    // Set attribute null and close stream. It's possible that exception was fired on parent channel close\n-                    // and triggered releaseAndCloseStreamChannel before, but it's tolerable to call releaseAndCloseStreamChannel\n-                    // again as streamChannel close happen in event loop. No impact to main flow.\n-                    // For netty 4.1.42.Final, streamChannel can be close twice without any exception.\n-                    releaseAndCloseStreamChannel(streamChannel);\n-                    http2ClientResponseHandler.getResponseInfoQueue()\n-                        .put(new ResponseInfo(requestInfo, NetworkClientErrorCode.NetworkError, null));\n+                    RequestInfo requestInfoFromChannelAttr = releaseAndCloseStreamChannel(streamChannel);\n+                    if (requestInfoFromChannelAttr != null) {\n+                      http2ClientResponseHandler.getResponseInfoQueue()\n+                          .put(new ResponseInfo(requestInfoFromChannelAttr, NetworkClientErrorCode.NetworkError, null));\n+                    }\n                     if (!(future.cause() instanceof ClosedChannelException)) {\n                       // If it's ClosedChannelException caused by drop request, it's probably refCnt has been decreased.\n                       // TODO: a round solution is needed.\n"}}, {"oid": "7b332e8776f02f5ff19216d5533da0ff53b95844", "url": "https://github.com/linkedin/ambry/commit/7b332e8776f02f5ff19216d5533da0ff53b95844", "message": "fix stream counter overflow issue", "committedDate": "2020-07-15T17:48:38Z", "type": "forcePushed"}, {"oid": "f9f09c3156c74d5004e18edd9fdd7920b7bd7b42", "url": "https://github.com/linkedin/ambry/commit/f9f09c3156c74d5004e18edd9fdd7920b7bd7b42", "message": "remove white space", "committedDate": "2020-07-15T21:07:23Z", "type": "commit"}]}