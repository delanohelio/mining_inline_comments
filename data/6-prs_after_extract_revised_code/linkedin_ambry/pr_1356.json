{"pr_number": 1356, "pr_title": "Refactor AsyncRequestResponseHandlerFactory", "pr_createdAt": "2020-01-10T23:15:08Z", "pr_url": "https://github.com/linkedin/ambry/pull/1356", "timeline": [{"oid": "b3e33f212964dae58661961827d73ea288c90525", "url": "https://github.com/linkedin/ambry/commit/b3e33f212964dae58661961827d73ea288c90525", "message": "Refactor AsyncRequestResponseHandlerFactory\n\nUnify rest.server.request.handler.factory and rest.server.response.handler.factory\nRefactor AsyncRequestResponseHandlerFactory to factory pattern from singleton pattern\nAdd setupResponseHandler for RestRquestService.\nRemove setupRequestHandling from AsyncRequestResponseHandler.", "committedDate": "2020-01-10T23:19:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NjU2Ng==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365476566", "bodyText": "change variable name to restServerRequestResponseHandlerFactory", "author": "cgtz", "createdAt": "2020-01-11T00:04:26Z", "path": "ambry-api/src/main/java/com.github.ambry/config/RestServerConfig.java", "diffHunk": "@@ -40,10 +40,10 @@\n   public final int restServerRequestHandlerScalingUnitCount;\n \n   /**\n-   * The RestRequestHandlerFactory that needs to be used by the RestServer\n-   * for bootstrapping the RestRequestHandler\n+   * The RequestResponseHandlerFactory that needs to be used by the RestServer or AmbryServer HTTP2\n+   * for bootstrapping the RestRequestHandler and RestResponseHandler\n    */\n-  @Config(\"rest.server.request.handler.factory\")\n+  @Config(\"rest.server.request.response.handler.factory\")\n   @Default(\"com.github.ambry.rest.AsyncRequestResponseHandlerFactory\")\n   public final String restServerRequestHandlerFactory;", "originalCommit": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/config/RestServerConfig.java b/ambry-api/src/main/java/com.github.ambry/config/RestServerConfig.java\nindex 267dfba8a..561b88e0e 100644\n--- a/ambry-api/src/main/java/com.github.ambry/config/RestServerConfig.java\n+++ b/ambry-api/src/main/java/com.github.ambry/config/RestServerConfig.java\n\n@@ -45,7 +45,7 @@ public class RestServerConfig {\n    */\n   @Config(\"rest.server.request.response.handler.factory\")\n   @Default(\"com.github.ambry.rest.AsyncRequestResponseHandlerFactory\")\n-  public final String restServerRequestHandlerFactory;\n+  public final String restServerRequestResponseHandlerFactory;\n \n   /**\n    * The number of scaling units in RestResponseHandler handle responses.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODEzMw==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365478133", "bodyText": "Could this condition ever occur since this is logic is now in the constructor and isRunning is a non-static member?", "author": "cgtz", "createdAt": "2020-01-11T00:14:14Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "diffHunk": "@@ -61,10 +61,25 @@\n   /**\n    * Builds a AsyncRequestResponseHandler.\n    * @param metrics the {@link RequestResponseHandlerMetrics} instance to use to track metrics.\n+   * @param workerCount the required number of request handling units.\n+   * @param restRequestService the {@link RestRequestService} instance to be used to process requests.\n+   * @throws IllegalArgumentException if {@code workerCount} < 0 or if {@code workerCount} > 0 but\n+   * {@code restRequestService} is null.\n    */\n-  protected AsyncRequestResponseHandler(RequestResponseHandlerMetrics metrics) {\n+  protected AsyncRequestResponseHandler(RequestResponseHandlerMetrics metrics, int workerCount,\n+      RestRequestService restRequestService) {\n     this.metrics = metrics;\n     metrics.trackAsyncRequestResponseHandler(this);\n+    if (isRunning()) {", "originalCommit": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4NzE4Mw==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365487183", "bodyText": "It won't happen. Removing.", "author": "zzmao", "createdAt": "2020-01-11T01:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java\nindex 16d2f8058..943947b09 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java\n\n@@ -70,9 +70,7 @@ class AsyncRequestResponseHandler implements RestRequestHandler, RestResponseHan\n       RestRequestService restRequestService) {\n     this.metrics = metrics;\n     metrics.trackAsyncRequestResponseHandler(this);\n-    if (isRunning()) {\n-      throw new IllegalStateException(\"Cannot modify scaling unit count after the service has started\");\n-    } else if (workerCount < 0) {\n+    if (workerCount < 0) {\n       throw new IllegalArgumentException(\"Request worker workerCount has to be >= 0\");\n     } else if (workerCount > 0 && restRequestService == null) {\n       throw new IllegalArgumentException(\"RestRequestService cannot be null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3ODg1MA==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365478850", "bodyText": "could be final, I believe", "author": "cgtz", "createdAt": "2020-01-11T00:18:57Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -19,47 +19,25 @@\n import com.codahale.metrics.Meter;\n import com.codahale.metrics.MetricRegistry;\n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.locks.ReentrantLock;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n- * {@link AsyncRequestResponseHandler} specific implementation of {@link RestRequestHandlerFactory} and\n- * {@link RestResponseHandlerFactory}.\n+ * {@link AsyncRequestResponseHandler} specific implementation of {@link RestRequestResponseHandlerFactory}.\n  * <p/>\n- * Sets up all the supporting cast required for {@link AsyncRequestResponseHandler}. Maintains a single instance of\n- * {@link AsyncRequestResponseHandler} and returns the same instance on any call to {@link #getRestRequestHandler()} or\n+ * Sets up all the supporting cast required for {@link AsyncRequestResponseHandler}. Maintains a single handler of\n+ * {@link AsyncRequestResponseHandler} and returns the same handler on any call to {@link #getRestRequestHandler()} or\n  * {@link #getRestResponseHandler()}.\n  */\n-public class AsyncRequestResponseHandlerFactory implements RestRequestHandlerFactory, RestResponseHandlerFactory {\n-\n-  private static final ReentrantLock lock = new ReentrantLock();\n-  private static AsyncRequestResponseHandler instance;\n-  private static RequestResponseHandlerMetrics requestResponseHandlerMetrics;\n+public class AsyncRequestResponseHandlerFactory implements RestRequestResponseHandlerFactory {\n \n+  private AsyncRequestResponseHandler handler;", "originalCommit": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\nindex 8218c0490..8c7f11bd9 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n\n@@ -32,7 +32,7 @@ import org.slf4j.LoggerFactory;\n  */\n public class AsyncRequestResponseHandlerFactory implements RestRequestResponseHandlerFactory {\n \n-  private AsyncRequestResponseHandler handler;\n+  private final AsyncRequestResponseHandler handler;\n   private Logger logger = LoggerFactory.getLogger(getClass());\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MDE2Nw==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365480167", "bodyText": "Add that this method must be called before the service is started", "author": "cgtz", "createdAt": "2020-01-11T00:27:31Z", "path": "ambry-api/src/main/java/com.github.ambry/rest/RestRequestService.java", "diffHunk": "@@ -24,6 +24,11 @@\n  */\n public interface RestRequestService {\n \n+  /**", "originalCommit": "8ec518ef0b3cc3dbb6e97db51123da431a56a3ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/rest/RestRequestService.java b/ambry-api/src/main/java/com.github.ambry/rest/RestRequestService.java\nindex f7147a6fa..b549aaea0 100644\n--- a/ambry-api/src/main/java/com.github.ambry/rest/RestRequestService.java\n+++ b/ambry-api/src/main/java/com.github.ambry/rest/RestRequestService.java\n\n@@ -25,6 +25,8 @@ package com.github.ambry.rest;\n public interface RestRequestService {\n \n   /**\n+   * Setup {@link RestResponseHandler} for this {@link RestRequestService}.\n+   * This method should be called before {@link RestRequestService#start()}\n    * @param responseHandler the {@link RestResponseHandler} that can be used to submit responses.\n    */\n   public void setupResponseHandler(RestResponseHandler responseHandler);\n"}}, {"oid": "2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "url": "https://github.com/linkedin/ambry/commit/2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "message": "address cgetz comment", "committedDate": "2020-01-11T01:27:51Z", "type": "commit"}, {"oid": "2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "url": "https://github.com/linkedin/ambry/commit/2d02eccb2e2cb3b6007c089c4d69362aa8e238b1", "message": "address cgetz comment", "committedDate": "2020-01-11T01:27:51Z", "type": "forcePushed"}, {"oid": "37f67c308ae2ad94b0d035d08173379c11436e28", "url": "https://github.com/linkedin/ambry/commit/37f67c308ae2ad94b0d035d08173379c11436e28", "message": "fix test", "committedDate": "2020-01-13T18:07:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NDM4MA==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365964380", "bodyText": "Had an offline discussion with Ze. restResponseHandler and restRequestHandler are actually same instance within restHandlerFactory. Hence, calling start() once should suffice. Let's leave a comment here to explain we removed restRequestHandler.start();. In the future, we probably could unify them.", "author": "jsjtzyy", "createdAt": "2020-01-13T18:43:02Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/RestServer.java", "diffHunk": "@@ -233,7 +235,7 @@ public void start() throws InstantiationException {\n       restResponseHandler.start();", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MjQ2NQ==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365972465", "bodyText": "Feel like this could be an IllegalStateException", "author": "jsjtzyy", "createdAt": "2020-01-13T19:00:38Z", "path": "ambry-frontend/src/main/java/com.github.ambry.frontend/FrontendRestRequestService.java", "diffHunk": "@@ -137,8 +135,19 @@\n     logger.trace(\"Instantiated FrontendRestRequestService\");\n   }\n \n+  /**\n+   * @param responseHandler the {@link RestResponseHandler} that can be used to submit responses that need to be sent out.\n+   */\n+  @Override\n+  public void setupResponseHandler(RestResponseHandler responseHandler) {\n+    this.responseHandler = responseHandler;\n+  }\n+\n   @Override\n   public void start() throws InstantiationException {\n+    if (responseHandler == null) {\n+      throw new InstantiationException(\"ResponseHandler is not set.\");", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MzU4NQ==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365983585", "bodyText": "minor: line 268, could you removing the leading underscore of _restRequestService ?", "author": "jsjtzyy", "createdAt": "2020-01-13T19:24:40Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandler.java", "diffHunk": "@@ -179,33 +193,11 @@ public void handleResponse(RestRequest restRequest, RestResponseChannel restResp\n     } else {\n       metrics.requestResponseHandlerUnavailableError.inc();\n       throw new RestServiceException(\n-          \"Requests cannot be handled because the AsyncRequestResponseHandler is not available\",\n+          \"Requests cannot be handled because the AsyncRequestResponseHandler is not running\",\n           RestServiceErrorCode.ServiceUnavailable);\n     }\n   }\n \n-  /**\n-   * Sets the number of request handling units and the {@link RestRequestService} that will be used in\n-   * {@link AsyncRequestWorker} instances..\n-   * @param workerCount the required number of request handling units.\n-   * @param restRequestService the {@link RestRequestService} instance to be used to process requests.\n-   * @throws IllegalArgumentException if {@code workerCount} < 0 or if {@code workerCount} > 0 but\n-   *                                  {@code restRequestService} is null.\n-   * @throws IllegalStateException if {@link #start()} has already been called before a call to this function.\n-   */\n-  protected void setupRequestHandling(int workerCount, RestRequestService restRequestService) {\n-    if (isRunning()) {\n-      throw new IllegalStateException(\"Cannot modify scaling unit count after the service has started\");\n-    } else if (workerCount < 0) {\n-      throw new IllegalArgumentException(\"Request worker workerCount has to be >= 0\");\n-    } else if (workerCount > 0 && restRequestService == null) {\n-      throw new IllegalArgumentException(\"RestRequestService cannot be null\");\n-    }\n-    requestWorkersCount = workerCount;\n-    this.restRequestService = restRequestService;\n-    logger.trace(\"Request handling units count set to {}\", requestWorkersCount);\n-  }\n-", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4Njc5OA==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365986798", "bodyText": "minor typo: return a handler or return an instance", "author": "jsjtzyy", "createdAt": "2020-01-13T19:30:51Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -71,51 +49,26 @@ public AsyncRequestResponseHandlerFactory(Integer handlerCount, MetricRegistry m\n     } else if (handlerCount <= 0) {\n       throw new IllegalArgumentException(\"Request handler scaling unit count has to be > 0. Is \" + handlerCount);\n     } else {\n-      buildInstance(metricRegistry);\n-      instance.setupRequestHandling(handlerCount, restRequestService);\n+      handler = new AsyncRequestResponseHandler(new RequestResponseHandlerMetrics(metricRegistry), handlerCount,\n+          restRequestService);\n     }\n     logger.trace(\"Instantiated AsyncRequestResponseHandlerFactory as RestRequestHandler\");\n   }\n \n   /**\n-   * Returns an instance of {@link AsyncRequestResponseHandler}.\n-   * @return an instance of {@link AsyncRequestResponseHandler}.\n+   * @return an handler of {@link AsyncRequestResponseHandler}.", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f401d23fb476bb83a27700dfd41482b7b8647cca", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\nindex 8c7f11bd9..dbe27eb30 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n\n@@ -56,7 +56,7 @@ public class AsyncRequestResponseHandlerFactory implements RestRequestResponseHa\n   }\n \n   /**\n-   * @return an handler of {@link AsyncRequestResponseHandler}.\n+   * @return {@link AsyncRequestResponseHandler}.\n    */\n   @Override\n   public RestRequestHandler getRestRequestHandler() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4Njg2Mg==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365986862", "bodyText": "same here", "author": "jsjtzyy", "createdAt": "2020-01-13T19:30:58Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -71,51 +49,26 @@ public AsyncRequestResponseHandlerFactory(Integer handlerCount, MetricRegistry m\n     } else if (handlerCount <= 0) {\n       throw new IllegalArgumentException(\"Request handler scaling unit count has to be > 0. Is \" + handlerCount);\n     } else {\n-      buildInstance(metricRegistry);\n-      instance.setupRequestHandling(handlerCount, restRequestService);\n+      handler = new AsyncRequestResponseHandler(new RequestResponseHandlerMetrics(metricRegistry), handlerCount,\n+          restRequestService);\n     }\n     logger.trace(\"Instantiated AsyncRequestResponseHandlerFactory as RestRequestHandler\");\n   }\n \n   /**\n-   * Returns an instance of {@link AsyncRequestResponseHandler}.\n-   * @return an instance of {@link AsyncRequestResponseHandler}.\n+   * @return an handler of {@link AsyncRequestResponseHandler}.\n    */\n   @Override\n   public RestRequestHandler getRestRequestHandler() {\n-    return instance;\n+    return handler;\n   }\n \n   /**\n-   * Returns an instance of {@link AsyncRequestResponseHandler}.\n-   * @return an instance of {@link AsyncRequestResponseHandler}.\n+   * @return an handler of {@link AsyncRequestResponseHandler}.", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f401d23fb476bb83a27700dfd41482b7b8647cca", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\nindex 8c7f11bd9..dbe27eb30 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n\n@@ -56,7 +56,7 @@ public class AsyncRequestResponseHandlerFactory implements RestRequestResponseHa\n   }\n \n   /**\n-   * @return an handler of {@link AsyncRequestResponseHandler}.\n+   * @return {@link AsyncRequestResponseHandler}.\n    */\n   @Override\n   public RestRequestHandler getRestRequestHandler() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4ODU1MA==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365988550", "bodyText": "minor: no need to change previous comment.", "author": "jsjtzyy", "createdAt": "2020-01-13T19:34:23Z", "path": "ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java", "diffHunk": "@@ -171,7 +124,7 @@ private static void buildInstance(MetricRegistry metricRegistry) {\n   public final Counter residualResponseSetSize;\n \n   /**\n-   * Creates an instance of RequestResponseHandlerMetrics using the given {@code metricRegistry}.\n+   * Creates an handler of RequestResponseHandlerMetrics using the given {@code metricRegistry}.", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f401d23fb476bb83a27700dfd41482b7b8647cca", "chunk": "diff --git a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\nindex 8c7f11bd9..dbe27eb30 100644\n--- a/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n+++ b/ambry-rest/src/main/java/com.github.ambry.rest/AsyncRequestResponseHandlerFactory.java\n\n@@ -124,7 +124,7 @@ class RequestResponseHandlerMetrics {\n   public final Counter residualResponseSetSize;\n \n   /**\n-   * Creates an handler of RequestResponseHandlerMetrics using the given {@code metricRegistry}.\n+   * Creates an instance of RequestResponseHandlerMetrics using the given {@code metricRegistry}.\n    * @param metricRegistry the {@link MetricRegistry} to use for the metrics.\n    */\n   public RequestResponseHandlerMetrics(MetricRegistry metricRegistry) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4OTkwMQ==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r365989901", "bodyText": "do we need to check if restRequestService is null?", "author": "jsjtzyy", "createdAt": "2020-01-13T19:37:00Z", "path": "ambry-api/src/test/java/com.github.ambry/rest/MockRestRequestResponseHandler.java", "diffHunk": "@@ -40,7 +40,12 @@\n   private boolean isRunning = false;\n   private VerifiableProperties failureProperties = null;\n \n-  private RestRequestService restRequestService = null;\n+  private final RestRequestService restRequestService;\n+\n+  public MockRestRequestResponseHandler(RestRequestService restRequestService) {\n+    this.restRequestService = restRequestService;", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5OTE0NA==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r366099144", "bodyText": "Since it's mock, I think it's ok to throw null exception.", "author": "zzmao", "createdAt": "2020-01-14T00:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4OTkwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxNzYyNQ==", "url": "https://github.com/linkedin/ambry/pull/1356#discussion_r366017625", "bodyText": "what's the difference between line 165 and line 173 test cases ?", "author": "jsjtzyy", "createdAt": "2020-01-13T20:42:55Z", "path": "ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerTest.java", "diffHunk": "@@ -149,52 +152,37 @@ public void useServiceWithoutStartTest() throws IOException, JSONException, URIS\n   }\n \n   /**\n-   * Tests the behavior of {@link AsyncRequestResponseHandler} when request worker count is not set or is zero.\n+   * Tests the behavior of {@link AsyncRequestResponseHandler} when request worker count or restRequestService is invalid.\n    * @throws Exception\n    */\n   @Test\n-  public void edgeCaseWorkerCountsTest() throws Exception {\n-    RequestResponseHandlerMetrics metrics = new RequestResponseHandlerMetrics(new MetricRegistry());\n-    AsyncRequestResponseHandler requestResponseHandler = new AsyncRequestResponseHandler(metrics);\n-    noRequestHandlersTest(requestResponseHandler);\n-\n-    requestResponseHandler = getAsyncRequestResponseHandler(0);\n-    noRequestHandlersTest(requestResponseHandler);\n-  }\n-\n-  @Test\n-  public void setFunctionsBadArgumentsTest() {\n-    RequestResponseHandlerMetrics metrics = new RequestResponseHandlerMetrics(new MetricRegistry());\n-    AsyncRequestResponseHandler requestResponseHandler = new AsyncRequestResponseHandler(metrics);\n+  public void edgeCaseTest() throws Exception {\n+    AsyncRequestResponseHandler requestResponseHandler;\n+    RequestResponseHandlerMetrics metrics;\n \n     // set request workers < 0\n     try {\n-      requestResponseHandler.setupRequestHandling(-1, restRequestService);\n+      requestResponseHandler = getAsyncRequestResponseHandler(-1);\n       fail(\"Setting request workers < 0 should have thrown exception\");\n     } catch (IllegalArgumentException e) {\n       // expected. nothing to do.\n     }\n \n-    // set null RestRequestService\n+    // set request workers < 0\n     try {\n-      requestResponseHandler.setupRequestHandling(1, null);\n-      fail(\"Setting RestRequestService to null should have thrown exception\");\n+      requestResponseHandler = getAsyncRequestResponseHandler(-1);\n+      fail(\"Setting request workers < 0 should have thrown exception\");", "originalCommit": "37f67c308ae2ad94b0d035d08173379c11436e28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f401d23fb476bb83a27700dfd41482b7b8647cca", "chunk": "diff --git a/ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerTest.java b/ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerTest.java\nindex 01b71ab06..6ccf29683 100644\n--- a/ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerTest.java\n+++ b/ambry-rest/src/test/java/com.github.ambry.rest/AsyncRequestResponseHandlerTest.java\n\n@@ -168,14 +168,6 @@ public class AsyncRequestResponseHandlerTest {\n       // expected. nothing to do.\n     }\n \n-    // set request workers < 0\n-    try {\n-      requestResponseHandler = getAsyncRequestResponseHandler(-1);\n-      fail(\"Setting request workers < 0 should have thrown exception\");\n-    } catch (IllegalArgumentException e) {\n-      // expected. nothing to do.\n-    }\n-\n     // set null RestRequestService\n     try {\n       RestRequestService restRequestService = new MockRestRequestService(verifiableProperties, router);\n"}}, {"oid": "f401d23fb476bb83a27700dfd41482b7b8647cca", "url": "https://github.com/linkedin/ambry/commit/f401d23fb476bb83a27700dfd41482b7b8647cca", "message": "address Yingyi Comments", "committedDate": "2020-01-14T00:26:46Z", "type": "commit"}]}