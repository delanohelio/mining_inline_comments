{"pr_number": 1626, "pr_title": "[HTTP2] Return ByteBuf in GetResponse content() method", "pr_createdAt": "2020-09-16T01:19:16Z", "pr_url": "https://github.com/linkedin/ambry/pull/1626", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMTkzMQ==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r492201931", "bodyText": "complete the java doc", "author": "jsjtzyy", "createdAt": "2020-09-21T16:43:17Z", "path": "ambry-api/src/main/java/com/github/ambry/store/MessageReadSet.java", "diffHunk": "@@ -73,4 +74,9 @@\n    * @throws IOException\n    */\n   void doPrefetch(int index, long relativeOffset, long size) throws IOException;\n+\n+  /**\n+   *", "originalCommit": "5b1a9629c6443ecd093de1318066cd10c33eb10c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "970bdfbaaf3e4d5be65eb77eef61f943ca1e16d8", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/store/MessageReadSet.java b/ambry-api/src/main/java/com/github/ambry/store/MessageReadSet.java\nindex 20b1fa606..d7ba498b4 100644\n--- a/ambry-api/src/main/java/com/github/ambry/store/MessageReadSet.java\n+++ b/ambry-api/src/main/java/com/github/ambry/store/MessageReadSet.java\n\n@@ -76,7 +76,9 @@ public interface MessageReadSet {\n   void doPrefetch(int index, long relativeOffset, long size) throws IOException;\n \n   /**\n-   *\n+   * Return prefetched data at given {@code index}.\n+   * @param index The index into the message set.\n+   * @return The prefetched data.\n    */\n   ByteBuf getPrefetchedData(int index);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNDYxNQ==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r492204615", "bodyText": "nit: private static final", "author": "jsjtzyy", "createdAt": "2020-09-21T16:47:49Z", "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java", "diffHunk": "@@ -46,6 +48,8 @@\n \n public class MessageFormatSend extends AbstractByteBufHolder<MessageFormatSend> implements Send {\n \n+  private final static int BUFFERED_INPUT_STREAM_BUFFER_SIZE = 256;", "originalCommit": "5b1a9629c6443ecd093de1318066cd10c33eb10c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MjkxNA==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r494672914", "bodyText": "Can you change this number to 4096? This can reduce 1 IO request to disk.", "author": "zzmao", "createdAt": "2020-09-24T23:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNDYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "970bdfbaaf3e4d5be65eb77eef61f943ca1e16d8", "chunk": "diff --git a/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java b/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java\nindex 72d64e9fa..9371cc5e1 100644\n--- a/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java\n+++ b/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java\n\n@@ -48,7 +48,7 @@ import static com.github.ambry.messageformat.MessageFormatRecord.*;\n \n public class MessageFormatSend extends AbstractByteBufHolder<MessageFormatSend> implements Send {\n \n-  private final static int BUFFERED_INPUT_STREAM_BUFFER_SIZE = 256;\n+  private static final int BUFFERED_INPUT_STREAM_BUFFER_SIZE = 4096;\n   private static final Logger logger = LoggerFactory.getLogger(MessageFormatSend.class);\n   private MessageReadSet readSet;\n   private MessageFormatFlags flag;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyOTU0NA==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r492229544", "bodyText": "Just wonder when IOException occurs, do we also need to release messageContent? Correct me if I am wrong.", "author": "jsjtzyy", "createdAt": "2020-09-21T17:30:15Z", "path": "ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java", "diffHunk": "@@ -220,8 +223,23 @@ private void fetchDataFromReadSet() throws MessageFormatException {\n             throw new MessageFormatException(\"Unknown flag in request \" + flag, MessageFormatErrorCodes.IO_Error);\n           }\n         }\n+        dataFromReadSet.add(readSet.getPrefetchedData(i));\n+      }\n+      if (messageCount == 0) {\n+        messageContent = Unpooled.EMPTY_BUFFER;\n+      } else if (messageCount == 1) {\n+        messageContent = dataFromReadSet.get(0);\n+      } else {\n+        CompositeByteBuf compositeByteBuf = dataFromReadSet.get(0).alloc().compositeHeapBuffer(messageCount);\n+        for (ByteBuf data : dataFromReadSet) {\n+          compositeByteBuf.addComponent(true, data);\n+        }\n+        messageContent = compositeByteBuf;\n       }\n     } catch (IOException e) {\n+      for (ByteBuf data : dataFromReadSet) {\n+        data.release();\n+      }", "originalCommit": "5b1a9629c6443ecd093de1318066cd10c33eb10c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIzMzA3Ng==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r492233076", "bodyText": "oh, is that because messageContent should be null when exception occurs?", "author": "jsjtzyy", "createdAt": "2020-09-21T17:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyOTU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "376bdd3716ec5f05eb51c500f46a1557c2d161fe", "chunk": "diff --git a/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java b/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java\nindex 72d64e9fa..4e5e86d62 100644\n--- a/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java\n+++ b/ambry-messageformat/src/main/java/com/github/ambry/messageformat/MessageFormatSend.java\n\n@@ -225,9 +224,7 @@ public class MessageFormatSend extends AbstractByteBufHolder<MessageFormatSend>\n         }\n         dataFromReadSet.add(readSet.getPrefetchedData(i));\n       }\n-      if (messageCount == 0) {\n-        messageContent = Unpooled.EMPTY_BUFFER;\n-      } else if (messageCount == 1) {\n+      if (messageCount == 1) {\n         messageContent = dataFromReadSet.get(0);\n       } else {\n         CompositeByteBuf compositeByteBuf = dataFromReadSet.get(0).alloc().compositeHeapBuffer(messageCount);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIzOTk0MQ==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r492239941", "bodyText": "can be removed (maybe reformat this file?)", "author": "jsjtzyy", "createdAt": "2020-09-21T17:47:42Z", "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/CompositeSend.java", "diffHunk": "@@ -18,6 +18,9 @@\n import com.github.ambry.commons.Callback;\n import com.github.ambry.utils.AbstractByteBufHolder;\n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;", "originalCommit": "5b1a9629c6443ecd093de1318066cd10c33eb10c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "970bdfbaaf3e4d5be65eb77eef61f943ca1e16d8", "chunk": "diff --git a/ambry-protocol/src/main/java/com/github/ambry/protocol/CompositeSend.java b/ambry-protocol/src/main/java/com/github/ambry/protocol/CompositeSend.java\nindex 5804f304e..824c81fc0 100644\n--- a/ambry-protocol/src/main/java/com/github/ambry/protocol/CompositeSend.java\n+++ b/ambry-protocol/src/main/java/com/github/ambry/protocol/CompositeSend.java\n\n@@ -19,10 +19,11 @@ import com.github.ambry.commons.Callback;\n import com.github.ambry.utils.AbstractByteBufHolder;\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.CompositeByteBuf;\n-import io.netty.buffer.PooledByteBufAllocator;\n import io.netty.buffer.Unpooled;\n import java.io.IOException;\n import java.nio.channels.WritableByteChannel;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3Mzg2OA==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r494673868", "bodyText": "Just want to double check:\nWe prefer direct buffer here. I looked at ioBuffer() function, it returns direct buffer if isDirectBufferPooled. How to know value of isDirectBufferPooled?", "author": "zzmao", "createdAt": "2020-09-25T00:00:19Z", "path": "ambry-store/src/main/java/com/github/ambry/store/StoreMessageReadSet.java", "diffHunk": "@@ -159,12 +161,12 @@ public void close() {\n    */\n   void doPrefetch(long relativeOffset, long size) throws IOException {\n     long sizeToRead = Math.min(size, getMessageInfo().getSize() - relativeOffset);\n-    prefetchedData = ByteBuffer.allocate((int) sizeToRead);\n-    getChannel().read(prefetchedData, offset.getOffset() + relativeOffset);\n+    prefetchedData = PooledByteBufAllocator.DEFAULT.ioBuffer((int) sizeToRead);", "originalCommit": "5b1a9629c6443ecd093de1318066cd10c33eb10c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0NzY0Mg==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r494747642", "bodyText": "netty has a jvm property to control that, but by default, in linux box, it's enabled.", "author": "justinlin-linkedin", "createdAt": "2020-09-25T04:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3Mzg2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDY0Ng==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r494680646", "bodyText": "Can we create a test to verify the content of the GetResponse?", "author": "zzmao", "createdAt": "2020-09-25T00:25:13Z", "path": "ambry-protocol/src/main/java/com/github/ambry/protocol/GetResponse.java", "diffHunk": "@@ -139,14 +139,7 @@ protected void prepareBuffer() {\n         int maxNumComponent = 1 + toSend.content().nioBufferCount();\n         CompositeByteBuf compositeByteBuf = bufferToSend.alloc().compositeHeapBuffer(maxNumComponent);\n         compositeByteBuf.addComponent(true, bufferToSend);", "originalCommit": "5b1a9629c6443ecd093de1318066cd10c33eb10c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "970bdfbaaf3e4d5be65eb77eef61f943ca1e16d8", "chunk": "diff --git a/ambry-protocol/src/main/java/com/github/ambry/protocol/GetResponse.java b/ambry-protocol/src/main/java/com/github/ambry/protocol/GetResponse.java\nindex b489eab39..43e872d36 100644\n--- a/ambry-protocol/src/main/java/com/github/ambry/protocol/GetResponse.java\n+++ b/ambry-protocol/src/main/java/com/github/ambry/protocol/GetResponse.java\n\n@@ -133,14 +134,23 @@ public class GetResponse extends Response {\n       }\n     }\n     if (toSend != null) {\n-      if (toSend.content() != null) {\n+      ByteBuf toSendContent = toSend.content();\n+      if (toSendContent != null) {\n         // Since this composite blob will be a readonly blob, we don't really care about if it's allocated\n         // on a direct memory or not.\n-        int maxNumComponent = 1 + toSend.content().nioBufferCount();\n-        CompositeByteBuf compositeByteBuf = bufferToSend.alloc().compositeHeapBuffer(maxNumComponent);\n+        int maxNumComponent = 1 + toSendContent.nioBufferCount();\n+        CompositeByteBuf compositeByteBuf = bufferToSend.alloc().compositeDirectBuffer(maxNumComponent);\n         compositeByteBuf.addComponent(true, bufferToSend);\n-        compositeByteBuf.addFlattenedComponents(true, toSend.content());\n+        if (toSendContent instanceof CompositeByteBuf) {\n+          Iterator<ByteBuf> iterator = ((CompositeByteBuf) toSendContent).iterator();\n+          while (iterator.hasNext()) {\n+            compositeByteBuf.addComponent(true, iterator.next());\n+          }\n+        } else {\n+          compositeByteBuf.addComponent(true, toSendContent);\n+        }\n         bufferToSend = compositeByteBuf;\n+        sendSizeInBufferToSend = toSendContent.readableBytes();\n         toSend = null;\n       }\n     }\n"}}, {"oid": "970bdfbaaf3e4d5be65eb77eef61f943ca1e16d8", "url": "https://github.com/linkedin/ambry/commit/970bdfbaaf3e4d5be65eb77eef61f943ca1e16d8", "message": "Address comments", "committedDate": "2020-09-25T04:58:22Z", "type": "forcePushed"}, {"oid": "376bdd3716ec5f05eb51c500f46a1557c2d161fe", "url": "https://github.com/linkedin/ambry/commit/376bdd3716ec5f05eb51c500f46a1557c2d161fe", "message": "Return ByteBuf in GetResponse content() method", "committedDate": "2020-09-29T18:12:20Z", "type": "commit"}, {"oid": "d3fa9e21c0c73f57806be5ad6f9838c5fa134648", "url": "https://github.com/linkedin/ambry/commit/d3fa9e21c0c73f57806be5ad6f9838c5fa134648", "message": "Fix test failure", "committedDate": "2020-09-29T18:12:20Z", "type": "commit"}, {"oid": "5fc431377db2fa8086754a1146a753c444153b95", "url": "https://github.com/linkedin/ambry/commit/5fc431377db2fa8086754a1146a753c444153b95", "message": "Address comments", "committedDate": "2020-09-29T18:12:20Z", "type": "commit"}, {"oid": "06e89800fa8830da77c4a5aaa9b627aab57d4597", "url": "https://github.com/linkedin/ambry/commit/06e89800fa8830da77c4a5aaa9b627aab57d4597", "message": "Fix memory leak", "committedDate": "2020-09-29T18:12:20Z", "type": "commit"}, {"oid": "0f65f67d4ef23a84013573641fe0c2499771dfe5", "url": "https://github.com/linkedin/ambry/commit/0f65f67d4ef23a84013573641fe0c2499771dfe5", "message": "Fix the test", "committedDate": "2020-09-29T18:12:21Z", "type": "commit"}, {"oid": "583072fa6516c832f8178f7eb58c25c04ed4c6d5", "url": "https://github.com/linkedin/ambry/commit/583072fa6516c832f8178f7eb58c25c04ed4c6d5", "message": "Fix test failure", "committedDate": "2020-09-29T18:12:21Z", "type": "commit"}, {"oid": "cb9d6fbbc220c1cc1d90b977d0e260a548e3d26f", "url": "https://github.com/linkedin/ambry/commit/cb9d6fbbc220c1cc1d90b977d0e260a548e3d26f", "message": "Fix a test failure;", "committedDate": "2020-09-29T18:12:21Z", "type": "commit"}, {"oid": "ae7592859b1f85b8cc3187bb6d51a290352775f3", "url": "https://github.com/linkedin/ambry/commit/ae7592859b1f85b8cc3187bb6d51a290352775f3", "message": "Fix a test failure", "committedDate": "2020-09-30T01:24:29Z", "type": "commit"}, {"oid": "ae7592859b1f85b8cc3187bb6d51a290352775f3", "url": "https://github.com/linkedin/ambry/commit/ae7592859b1f85b8cc3187bb6d51a290352775f3", "message": "Fix a test failure", "committedDate": "2020-09-30T01:24:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIxMzE2Mw==", "url": "https://github.com/linkedin/ambry/pull/1626#discussion_r497213163", "bodyText": "Removing this because of three reasons\n\nThis method only deal with data chunk, and changing blob size in property is already done in metadata chunk.\nThere is a race condition when the frontend is writing header back to client but the blob size is changed at the same time.\nHere the size is undecrypted size, we have to run decryption to get the real size.\n@ankagrawal", "author": "justinlin-linkedin", "createdAt": "2020-09-30T02:50:23Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GetBlobOperation.java", "diffHunk": "@@ -840,11 +840,6 @@ void handleBody(InputStream payload, MessageMetadata messageMetadata, MessageInf\n       // from concurrent operations.\n       if (!successfullyDeserialized) {\n         BlobData blobData = MessageFormatRecord.deserializeBlob(payload);\n-        // Note that for segment GET there is only one chunk to get, so we can be sure that its this one.", "originalCommit": "ae7592859b1f85b8cc3187bb6d51a290352775f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "244b982efbbea7b54ad7657c1a1a0523aac1efa6", "url": "https://github.com/linkedin/ambry/commit/244b982efbbea7b54ad7657c1a1a0523aac1efa6", "message": "Remove old code", "committedDate": "2020-09-30T17:26:37Z", "type": "commit"}]}