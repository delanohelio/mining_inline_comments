{"pr_number": 1547, "pr_title": "Skip blobs from deprecated containers in replication", "pr_createdAt": "2020-06-02T07:43:49Z", "pr_url": "https://github.com/linkedin/ambry/pull/1547", "timeline": [{"oid": "a41b3c9eaa930bccb9bf8d4bbe6fc41132659d2a", "url": "https://github.com/linkedin/ambry/commit/a41b3c9eaa930bccb9bf8d4bbe6fc41132659d2a", "message": "Block deprecated container during replication", "committedDate": "2020-06-02T09:16:28Z", "type": "forcePushed"}, {"oid": "40254fd62b7321aafc82a9f3d73bfad6b8d7ca6d", "url": "https://github.com/linkedin/ambry/commit/40254fd62b7321aafc82a9f3d73bfad6b8d7ca6d", "message": "Block deprecated container during replication", "committedDate": "2020-06-02T16:12:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTM2NQ==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434121365", "bodyText": "is isGivenStatus  needed?\nContainer.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n        .getContainerById(messageInfo.getContainerId())\n        .getStatus()\nreturn (status == DELETE_IN_PROGRESS || status == INACTIVE)", "author": "zzmao", "createdAt": "2020-06-02T19:20:06Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,41 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the given status.\n+   * @param messageInfo A message info class that contains basic info about a blob.\n+   * @param containerStatus Status of the container.\n+   * @return {@code true} if the blob belongs to the given status container, {@code false} otherwise.\n+   */\n+  private boolean isGivenStatus(MessageInfo messageInfo, Container.ContainerStatus containerStatus) {\n+    return accountService.getAccountById(messageInfo.getAccountId())\n+        .getContainerById(messageInfo.getContainerId())\n+        .getStatus() == containerStatus;\n+  }\n+\n+  /**\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      return isGivenStatus(messageInfo, Container.ContainerStatus.DELETE_IN_PROGRESS) || isGivenStatus(messageInfo,", "originalCommit": "40254fd62b7321aafc82a9f3d73bfad6b8d7ca6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMDcwMA==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434720700", "bodyText": "Updated.", "author": "SophieGuo410", "createdAt": "2020-06-03T17:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b4e2a8cb446bf73ebd8b71d9bf78447626ed5085", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex 01eb1b58f..1a4555247 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -644,34 +642,7 @@ public class ReplicaThread implements Runnable {\n   }\n \n   /**\n-   * Determines if {@link MessageInfo} container in the given status.\n-   * @param messageInfo A message info class that contains basic info about a blob.\n-   * @param containerStatus Status of the container.\n-   * @return {@code true} if the blob belongs to the given status container, {@code false} otherwise.\n-   */\n-  private boolean isGivenStatus(MessageInfo messageInfo, Container.ContainerStatus containerStatus) {\n-    return accountService.getAccountById(messageInfo.getAccountId())\n-        .getContainerById(messageInfo.getContainerId())\n-        .getStatus() == containerStatus;\n-  }\n-\n-  /**\n-   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n-   * @param messageInfo A message info class that contains basic info about a blob\n-   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n-   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n-   */\n-  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n-    if (accountService != null) {\n-      return isGivenStatus(messageInfo, Container.ContainerStatus.DELETE_IN_PROGRESS) || isGivenStatus(messageInfo,\n-          Container.ContainerStatus.INACTIVE);\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  /**\n-   * Gets the missing store keys by comparing the messages from the remote node\n+   * Gets the missing store messages by comparing the messages from the remote node\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTUwOA==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434211508", "bodyText": "While the logic is correct, it seems a bit heavy handed to pass AccountService to ReplicaThread and see all this logic here (which probably also is similar in other places).  I would suggest adding a generic interface that lets the replica thread know if the messageInfo should be included or skipped.  The interface would have one method like:\nboolean skipFromReplication(MessageInfo messageInfo);\nThen pass this interface to ReplicaThread instead of AccountService.  In the future, we may want to extend the logic of what messages to skip and have that be transparent to replication.", "author": "lightningrob", "createdAt": "2020-06-02T22:33:25Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {", "originalCommit": "ac2014257d5e8583cda2ce3187b1ecb3f702a809", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMjMwMQ==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434722301", "bodyText": "Thanks for the suggestion. I use Predicate interface and implement a ReplicationSkipPredicate to check what message need to be skipped.", "author": "SophieGuo410", "createdAt": "2020-06-03T17:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b4e2a8cb446bf73ebd8b71d9bf78447626ed5085", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex d811a218c..1a4555247 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -644,24 +642,7 @@ public class ReplicaThread implements Runnable {\n   }\n \n   /**\n-   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n-   * @param messageInfo A message info class that contains basic info about a blob\n-   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n-   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n-   */\n-  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n-    if (accountService != null) {\n-      Container.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n-          .getContainerById(messageInfo.getContainerId())\n-          .getStatus();\n-      return status == Container.ContainerStatus.DELETE_IN_PROGRESS || status == Container.ContainerStatus.INACTIVE;\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  /**\n-   * Gets the missing store keys by comparing the messages from the remote node\n+   * Gets the missing store messages by comparing the messages from the remote node\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434217068", "bodyText": "Should replication be subject to the same retention time after marked as DELETE_IN_PROGRESS that the compactor is?", "author": "cgtz", "createdAt": "2020-06-02T22:50:02Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -639,14 +644,31 @@ private ReplicaMetadataResponse getReplicaMetadataResponse(List<RemoteReplicaInf\n   }\n \n   /**\n-   * Gets the missing store messages by comparing the messages from the remote node\n+   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n+   * @param messageInfo A message info class that contains basic info about a blob\n+   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n+   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n+   */\n+  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n+    if (accountService != null) {\n+      Container.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n+          .getContainerById(messageInfo.getContainerId())\n+          .getStatus();\n+      return status == Container.ContainerStatus.DELETE_IN_PROGRESS || status == Container.ContainerStatus.INACTIVE;", "originalCommit": "ac2014257d5e8583cda2ce3187b1ecb3f702a809", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NzQ0MQ==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434247441", "bodyText": "Once the container marked as DELETE_IN_PROGRESS, the ACLs will be removed and user can't access this container. In the mean time, should we skip the associate blobs in replication directly? Unless for the future we want to undo the container deletion within the retention time, in that situation we will need to involve retention time for replication. What do you think?", "author": "SophieGuo410", "createdAt": "2020-06-03T00:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1ODU4NA==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434658584", "bodyText": "I guess I was thinking that not replicating the blobs is about the same as compacting them away in that it would be very hard to revert this decision. Without erasing the replica tokens, replication can't go back in time to get the missing blobs unless a new event for the blob appears on a peer like a TTLUPDATE or UNDELETE.\nWhat was the motivation for the retention time within compaction? My understanding was that it was so that the container deletion could be reverted if it was done by mistake. Sorry if that was a bad assumption on my part.", "author": "cgtz", "createdAt": "2020-06-03T15:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3OTY0NA==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r434879644", "bodyText": "The retention time what I add previously is due to after ACLs has been removed we need some retention time before we start compaction. But you are right, I need to consider about revert the container deletion as well. So I add the retention time same as what we are doing in compaction, so that after within the retention time, the DELETE_IN_PROGRESS container won't be skipped through replication. And it's easier for revert as you mentioned.", "author": "SophieGuo410", "createdAt": "2020-06-03T21:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b4e2a8cb446bf73ebd8b71d9bf78447626ed5085", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex d811a218c..1a4555247 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -644,24 +642,7 @@ public class ReplicaThread implements Runnable {\n   }\n \n   /**\n-   * Determines if {@link MessageInfo} container in the status of DELETED_IN_PROGRESS or INACTIVE.\n-   * @param messageInfo A message info class that contains basic info about a blob\n-   * @return {@code true} if the blob associates with the deprecated container, {@code false} otherwise.\n-   * Deprecated containers status include DELETE_IN_PROGRESS and INACTIVE.\n-   */\n-  private boolean isDeprecatedContainer(MessageInfo messageInfo) {\n-    if (accountService != null) {\n-      Container.ContainerStatus status = accountService.getAccountById(messageInfo.getAccountId())\n-          .getContainerById(messageInfo.getContainerId())\n-          .getStatus();\n-      return status == Container.ContainerStatus.DELETE_IN_PROGRESS || status == Container.ContainerStatus.INACTIVE;\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  /**\n-   * Gets the missing store keys by comparing the messages from the remote node\n+   * Gets the missing store messages by comparing the messages from the remote node\n    * @param replicaMetadataResponseInfo The response that contains the messages from the remote node\n    * @param remoteNode The remote node from which replication needs to happen\n    * @param remoteReplicaInfo The remote replica that contains information about the remote replica id\n"}}, {"oid": "b4e2a8cb446bf73ebd8b71d9bf78447626ed5085", "url": "https://github.com/linkedin/ambry/commit/b4e2a8cb446bf73ebd8b71d9bf78447626ed5085", "message": "introduce Predicate interface instead of accountService into ReplicaThread", "committedDate": "2020-06-03T16:07:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MDIwMw==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r436090203", "bodyText": "Could we declare it as Predicate and rename it skipPredicate to make it clear we're using it to filter out?", "author": "lightningrob", "createdAt": "2020-06-05T18:19:55Z", "path": "ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java", "diffHunk": "@@ -113,7 +112,7 @@\n   private final Condition pauseCondition = lock.newCondition();\n   private final ReplicaSyncUpManager replicaSyncUpManager;\n   private final int maxReplicaCountPerRequest;\n-  private final AccountService accountService;\n+  private final Predicate predicate;", "originalCommit": "b4e2a8cb446bf73ebd8b71d9bf78447626ed5085", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0MjM0Mw==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r436942343", "bodyText": "Updated.", "author": "SophieGuo410", "createdAt": "2020-06-08T19:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MDIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "30b72f9031718d5e230df50efa5520b3f1ae592a", "chunk": "diff --git a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\nindex 1a4555247..01eb1b58f 100644\n--- a/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n+++ b/ambry-replication/src/main/java/com/github/ambry/replication/ReplicaThread.java\n\n@@ -112,7 +113,7 @@ public class ReplicaThread implements Runnable {\n   private final Condition pauseCondition = lock.newCondition();\n   private final ReplicaSyncUpManager replicaSyncUpManager;\n   private final int maxReplicaCountPerRequest;\n-  private final Predicate predicate;\n+  private final AccountService accountService;\n   private volatile boolean allDisabled = false;\n   private final PartitionLeaderInfo partitionLeaderInfo;\n \n"}}, {"oid": "30b72f9031718d5e230df50efa5520b3f1ae592a", "url": "https://github.com/linkedin/ambry/commit/30b72f9031718d5e230df50efa5520b3f1ae592a", "message": "Block deprecated container during replication", "committedDate": "2020-06-06T00:05:54Z", "type": "commit"}, {"oid": "8dfa5488f0508a247b05e293ea95e8c263b853a6", "url": "https://github.com/linkedin/ambry/commit/8dfa5488f0508a247b05e293ea95e8c263b853a6", "message": "minor fix", "committedDate": "2020-06-06T00:05:54Z", "type": "commit"}, {"oid": "f5d9d6b473526b19f55d7ba261830d768f79ab79", "url": "https://github.com/linkedin/ambry/commit/f5d9d6b473526b19f55d7ba261830d768f79ab79", "message": "introduce Predicate interface instead of accountService into ReplicaThread", "committedDate": "2020-06-06T00:05:55Z", "type": "commit"}, {"oid": "6d3c8600c1148d6d1c0b2e649fef5cfa83fe978c", "url": "https://github.com/linkedin/ambry/commit/6d3c8600c1148d6d1c0b2e649fef5cfa83fe978c", "message": "adding rentention time for container before skip replication", "committedDate": "2020-06-06T00:05:55Z", "type": "commit"}, {"oid": "1fa91ba7fbbe8fdf28d9e784ca88e3aa85a9b0fc", "url": "https://github.com/linkedin/ambry/commit/1fa91ba7fbbe8fdf28d9e784ca88e3aa85a9b0fc", "message": "minor naming fix", "committedDate": "2020-06-06T00:05:55Z", "type": "commit"}, {"oid": "1fa91ba7fbbe8fdf28d9e784ca88e3aa85a9b0fc", "url": "https://github.com/linkedin/ambry/commit/1fa91ba7fbbe8fdf28d9e784ca88e3aa85a9b0fc", "message": "minor naming fix", "committedDate": "2020-06-06T00:05:55Z", "type": "forcePushed"}, {"oid": "714d3888baa4d1294d9397d38a7bfb1e9aba3a2e", "url": "https://github.com/linkedin/ambry/commit/714d3888baa4d1294d9397d38a7bfb1e9aba3a2e", "message": "Fix test failure and add enable config", "committedDate": "2020-06-08T18:32:02Z", "type": "forcePushed"}, {"oid": "0b6d44e29920848fb0f29f5b9349a961bceb209d", "url": "https://github.com/linkedin/ambry/commit/0b6d44e29920848fb0f29f5b9349a961bceb209d", "message": "Fix test failure and add enable config", "committedDate": "2020-06-08T20:29:37Z", "type": "commit"}, {"oid": "0b6d44e29920848fb0f29f5b9349a961bceb209d", "url": "https://github.com/linkedin/ambry/commit/0b6d44e29920848fb0f29f5b9349a961bceb209d", "message": "Fix test failure and add enable config", "committedDate": "2020-06-08T20:29:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwODQ0Mw==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r437008443", "bodyText": "The ReplicationSkipPredicate class has low code coverage because the test only runs the positive case where container is skipped.  Please add negative test cases.", "author": "lightningrob", "createdAt": "2020-06-08T21:21:05Z", "path": "ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java", "diffHunk": "@@ -1328,6 +1335,94 @@ public void replicaThreadTestConverter() throws Exception {\n         idsToBeIgnoredByPartition, storeKeyConverter, expectedIndex, expectedIndex, 5);\n   }\n \n+  /**\n+   * Tests if deprecated containers have been blocked during replication.\n+   */\n+  @Test\n+  public void blockDeprecatedContainerReplicationTest() throws Exception {", "originalCommit": "0b6d44e29920848fb0f29f5b9349a961bceb209d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwODkwNw==", "url": "https://github.com/linkedin/ambry/pull/1547#discussion_r437008907", "bodyText": "See https://codecov.io/gh/linkedin/ambry/pull/1547/diff?src=pr&el=tree#diff-YW1icnktYXBpL3NyYy9tYWluL2phdmEvY29tL2dpdGh1Yi9hbWJyeS9yZXBsaWNhdGlvbi9SZXBsaWNhdGlvblNraXBQcmVkaWNhdGUuamF2YQ==", "author": "lightningrob", "createdAt": "2020-06-08T21:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwODQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a94a8be587950a7b27d8307cb201f975fd16e561", "chunk": "diff --git a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\nindex 106ff06c4..c30060fb2 100644\n--- a/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n+++ b/ambry-replication/src/test/java/com/github/ambry/replication/ReplicationTest.java\n\n@@ -1365,9 +1365,9 @@ public class ReplicationTest {\n       // add 2 messages to both hosts.\n       storeKeyConverter.setConversionMap(conversionMap);\n       storeKeyConverter.convert(conversionMap.keySet());\n-      addPutMessagesToReplicasOfPartition(Arrays.asList(b0), Arrays.asList(localHost, remoteHost));\n+      //addPutMessagesToReplicasOfPartition(Arrays.asList(b0), Arrays.asList(localHost, remoteHost));\n       // add 3 messages to the remote host only\n-      addPutMessagesToReplicasOfPartition(Arrays.asList(b1), Collections.singletonList(remoteHost));\n+      addPutMessagesToReplicasOfPartition(Arrays.asList(b0,b1), Collections.singletonList(remoteHost));\n     }\n \n     StoreKeyFactory storeKeyFactory = new BlobIdFactory(clusterMap);\n"}}, {"oid": "a94a8be587950a7b27d8307cb201f975fd16e561", "url": "https://github.com/linkedin/ambry/commit/a94a8be587950a7b27d8307cb201f975fd16e561", "message": "adding more test cases", "committedDate": "2020-06-09T00:11:03Z", "type": "forcePushed"}, {"oid": "3d397e5f06d93feb375d35d6cac70164ba38c351", "url": "https://github.com/linkedin/ambry/commit/3d397e5f06d93feb375d35d6cac70164ba38c351", "message": "adding more test cases", "committedDate": "2020-06-09T00:13:11Z", "type": "commit"}, {"oid": "3d397e5f06d93feb375d35d6cac70164ba38c351", "url": "https://github.com/linkedin/ambry/commit/3d397e5f06d93feb375d35d6cac70164ba38c351", "message": "adding more test cases", "committedDate": "2020-06-09T00:13:11Z", "type": "forcePushed"}]}