{"pr_number": 1607, "pr_title": "Add configuration to limit the number of concurrent delete operations in background deleter", "pr_createdAt": "2020-08-18T20:19:51Z", "pr_url": "https://github.com/linkedin/ambry/pull/1607", "timeline": [{"oid": "5754b13d4495f874dec28a427a50703751ac7477", "url": "https://github.com/linkedin/ambry/commit/5754b13d4495f874dec28a427a50703751ac7477", "message": "Add configuration to limit the number of concurrent delete operations in background deleter", "committedDate": "2020-08-18T20:13:20Z", "type": "commit"}, {"oid": "e3c529962db14c8c45b3f6bef280976ca1bc584d", "url": "https://github.com/linkedin/ambry/commit/e3c529962db14c8c45b3f6bef280976ca1bc584d", "message": "Add metric", "committedDate": "2020-08-18T20:24:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMzg5MA==", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472513890", "bodyText": "Prefer to use -1. To reduce some <= confusion in below.", "author": "zzmao", "createdAt": "2020-08-18T21:51:23Z", "path": "ambry-api/src/main/java/com/github/ambry/config/RouterConfig.java", "diffHunk": "@@ -500,6 +502,13 @@\n   @Default(\"false\")\n   public final boolean routerCrossColoRequestToDcWithMostReplicas;\n \n+  /**\n+   * The maximum number of outgoing delete operations in background deleter. 0 means no limit.\n+   */\n+  @Config(ROUTER_BACKGROUND_DELETER_MAX_CONCURRENT_OPERATIONS)\n+  @Default(\"0\")", "originalCommit": "e3c529962db14c8c45b3f6bef280976ca1bc584d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MjgzMw==", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472592833", "bodyText": "I prefer 0, because of the getIntegerInRange method. If I set the range from -1 to MAX_INT, then 0 would be another special value besides -1. Setting range from 0 to MAX_INT solve this issue.", "author": "justinlin-linkedin", "createdAt": "2020-08-19T02:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMzg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjI4MQ==", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r473202281", "bodyText": "got you. Sounds good.", "author": "zzmao", "createdAt": "2020-08-19T17:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMzg5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNDMwMQ==", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472514301", "bodyText": "Update Java Doc.", "author": "zzmao", "createdAt": "2020-08-18T21:52:22Z", "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java", "diffHunk": "@@ -1085,12 +1104,49 @@ protected void updateBlobTtl(String blobIdStr, final String serviceId, long expi\n       completeUpdateBlobTtlOperation(routerException, futureResult, callback);\n     }\n \n+    /**\n+     * Requests for a blob to be deleted asynchronously and invokes the {@link Callback} when the request completes.", "originalCommit": "e3c529962db14c8c45b3f6bef280976ca1bc584d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09719a09c8f0cc3b589faeace7e871acaa38c741", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java b/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java\nindex 05d2d1a8d..6f3cd50f7 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java\n\n@@ -1105,14 +1105,10 @@ class NonBlockingRouter implements Router {\n     }\n \n     /**\n-     * Requests for a blob to be deleted asynchronously and invokes the {@link Callback} when the request completes.\n-     * @param blobIdStr The ID of the blob that needs to be deleted in string form\n-     * @param serviceId The service ID of the service deleting the blob. This can be null if unknown.\n-     * @param futureResult A future that would contain information about whether the deletion succeeded or not,\n-     *                     eventually.\n-     * @param callback The {@link Callback} which will be invoked on the completion of a request.\n-     * @param attemptChunkDeletes whether delete of chunks of the given blob (if it turns out to be composite) should be\n-     *                            attempted. Set this to false if it is known that the given blob is a data chunk.\n+     * {@inheritDoc}\n+     *\n+     * If the maximum concurrent number of background delete operation in router configuration is not 0, then this delete\n+     * operation will be enqueued to a thread-safe queue and delete operations will be executed later.\n      */\n     @Override\n     protected void deleteBlob(final String blobIdStr, final String serviceId, FutureResult<Void> futureResult,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzODE1OA==", "url": "https://github.com/linkedin/ambry/pull/1607#discussion_r472538158", "bodyText": "In practice, probably almost no difference, but it may be slightly better to use ConcurrentLinkedQueue instead of deque if we don't need the extra deque features right now.\nThe deque impl mentions this:\n     * Empirically, microbenchmarks suggest that this class adds about\n     * 40% overhead relative to ConcurrentLinkedQueue, which feels as\n     * good as we can hope for.", "author": "cgtz", "createdAt": "2020-08-18T22:56:20Z", "path": "ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java", "diffHunk": "@@ -1034,8 +1044,10 @@ public void run() {\n    * 2. (TBD) Deleting successfully put chunks of a failed composite blob put operation. Today, this is done by the\n    * same {@link OperationController} doing the put.\n    */\n-  private class BackgroundDeleter extends OperationController {\n+  class BackgroundDeleter extends OperationController {\n+    private final AtomicInteger concurrentBackgroudDeleteOperationCount = new AtomicInteger();\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final ConcurrentLinkedDeque<Supplier<Void>> deleteOperationQueue = new ConcurrentLinkedDeque<>();", "originalCommit": "e3c529962db14c8c45b3f6bef280976ca1bc584d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09719a09c8f0cc3b589faeace7e871acaa38c741", "chunk": "diff --git a/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java b/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java\nindex 05d2d1a8d..6f3cd50f7 100644\n--- a/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java\n+++ b/ambry-router/src/main/java/com/github/ambry/router/NonBlockingRouter.java\n\n@@ -1045,9 +1045,9 @@ class NonBlockingRouter implements Router {\n    * same {@link OperationController} doing the put.\n    */\n   class BackgroundDeleter extends OperationController {\n-    private final AtomicInteger concurrentBackgroudDeleteOperationCount = new AtomicInteger();\n+    private final AtomicInteger concurrentBackgroundDeleteOperationCount = new AtomicInteger();\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n-    private final ConcurrentLinkedDeque<Supplier<Void>> deleteOperationQueue = new ConcurrentLinkedDeque<>();\n+    private final ConcurrentLinkedQueue<Supplier<Void>> deleteOperationQueue = new ConcurrentLinkedQueue<>();\n \n     /**\n      * Instantiate the BackgroundDeleter\n"}}, {"oid": "09719a09c8f0cc3b589faeace7e871acaa38c741", "url": "https://github.com/linkedin/ambry/commit/09719a09c8f0cc3b589faeace7e871acaa38c741", "message": "Comments", "committedDate": "2020-08-19T02:05:17Z", "type": "commit"}]}