{"pr_number": 1396, "pr_title": "Support failure recovery for replica removal", "pr_createdAt": "2020-02-23T00:27:12Z", "pr_url": "https://github.com/linkedin/ambry/pull/1396", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTE0Mw==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r385461143", "bodyText": "throw an unsupported error?", "author": "justinlin-linkedin", "createdAt": "2020-02-28T01:17:40Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "diffHunk": "@@ -136,6 +143,10 @@ public ServerErrorCode checkLocalPartitionStatus(PartitionId partition, ReplicaI\n     return ServerErrorCode.No_Error;\n   }\n \n+  @Override\n+  public void registerDecommissionCallback(Callback<ReplicaId> callback) {\n+  }\n+", "originalCommit": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTIzOQ==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386131239", "bodyText": "fair point", "author": "jsjtzyy", "createdAt": "2020-03-01T18:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODQ2OA==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386718468", "bodyText": "I took your suggestion and removed the whole method in the end", "author": "jsjtzyy", "createdAt": "2020-03-02T23:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MTE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "86994da1ac399a6f939cc2d1878287ed6ee55d10", "chunk": "diff --git a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java b/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java\nindex 864d8a7b1..ff1f5665f 100644\n--- a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java\n+++ b/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java\n\n@@ -143,10 +143,6 @@ public class CloudStorageManager implements StoreManager {\n     return ServerErrorCode.No_Error;\n   }\n \n-  @Override\n-  public void registerDecommissionCallback(Callback<ReplicaId> callback) {\n-  }\n-\n   /**\n    * Return the blobstore for the given partition if blob store if it is already present in {@code CloudStorageManager::partitionToStore}\n    * Otherwise create a blobstore for the paritition, and start it.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDQzNw==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r385470437", "bodyText": "should keep these two method accessible only within the package.", "author": "justinlin-linkedin", "createdAt": "2020-02-28T01:53:27Z", "path": "ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java", "diffHunk": "@@ -209,6 +209,20 @@ public void onDisconnectionError(ReplicaId replicaId) {\n     countDownLatch(partitionToDisconnectionLatch, replicaId.getPartitionId().toPathString());\n   }\n \n+  /**\n+   * @return the map whose key is partition name and the value is corresponding deactivation latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDeactivationLatch() {\n+    return partitionToDeactivationLatch;\n+  }\n+\n+  /**\n+   * @return the map whose key is partition name and the value is corresponding disconnection latch.\n+   */\n+  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDisconnectionLatch() {\n+    return partitionToDisconnectionLatch;\n+  }\n+", "originalCommit": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTE5MQ==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386131191", "bodyText": "sure, will change the access modifier", "author": "jsjtzyy", "createdAt": "2020-03-01T18:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODY1MA==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386718650", "bodyText": "Sorry, I double checked its usage and it was indeed called in one of the tests out of the package.", "author": "jsjtzyy", "createdAt": "2020-03-02T23:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MDQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "14da828da09b6bae09d3e4d1726840359ebaf0bb", "chunk": "diff --git a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java b/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java\nindex b3221f93a..c01d7f9d8 100644\n--- a/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java\n+++ b/ambry-clustermap/src/main/java/com.github.ambry.clustermap/AmbryReplicaSyncUpManager.java\n\n@@ -209,20 +209,6 @@ public class AmbryReplicaSyncUpManager implements ReplicaSyncUpManager {\n     countDownLatch(partitionToDisconnectionLatch, replicaId.getPartitionId().toPathString());\n   }\n \n-  /**\n-   * @return the map whose key is partition name and the value is corresponding deactivation latch.\n-   */\n-  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDeactivationLatch() {\n-    return partitionToDeactivationLatch;\n-  }\n-\n-  /**\n-   * @return the map whose key is partition name and the value is corresponding disconnection latch.\n-   */\n-  public ConcurrentHashMap<String, CountDownLatch> getPartitionToDisconnectionLatch() {\n-    return partitionToDisconnectionLatch;\n-  }\n-\n   /**\n    * clean up in-mem maps\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2OTgzMQ==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r385869831", "bodyText": "Can we structure the code so that we don't copy the logic from replication manager and stats manager here?\nWe can probably having a reference of ReplicationManagerListener and StatsManagerListener here and just call\nlistener.becomeInactiveFromStandby and listener.becomeOfflineFromInactive.", "author": "justinlin-linkedin", "createdAt": "2020-02-28T19:04:40Z", "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "diffHunk": "@@ -376,6 +396,67 @@ int getCompactionThreadCount() {\n     return count;\n   }\n \n+  /**\n+   * This method is called by Offline-To-Dropped transition. Any errors/exceptions will be thrown and converted to\n+   * {@link StateTransitionException}. The error/exception is also recorded in certain metric for alerting purpose.\n+   */\n+  private void resumeDecommission(ReplicaId replica) throws Exception {", "originalCommit": "09aff284b7d3d5e77778db3b9e890e24fdeac0ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTIyNw==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386131227", "bodyText": "Not quite sure if I am able to make it but let me double check the feasibility.", "author": "jsjtzyy", "createdAt": "2020-03-01T18:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2OTgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODgyNA==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386718824", "bodyText": "I made it!  The code is now more concise :)", "author": "jsjtzyy", "createdAt": "2020-03-02T23:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2OTgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "14da828da09b6bae09d3e4d1726840359ebaf0bb", "chunk": "diff --git a/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java b/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java\nindex 1504f0feb..2ee3ae957 100644\n--- a/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java\n+++ b/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java\n\n@@ -402,7 +396,6 @@ public class StorageManager implements StoreManager {\n    */\n   private void resumeDecommission(ReplicaId replica) throws Exception {\n     String partitionName = replica.getPartitionId().toPathString();\n-    logger.info(\"Resuming decommission on replica {}\", replica);\n     // 1. set store state to INACTIVE and disable compaction on it\n     Store localStore = getStore(replica.getPartitionId());\n     if (localStore == null) {\n"}}, {"oid": "14da828da09b6bae09d3e4d1726840359ebaf0bb", "url": "https://github.com/linkedin/ambry/commit/14da828da09b6bae09d3e4d1726840359ebaf0bb", "message": "Support failure recovery for replica removal\n\nWhen decommissioning a replica(remove replica), there are three\ntransitions to go through and node may crash at any point. This PR adds\nadditional logic to help node resume decommission after restart. One\nthing to keep in mind is, if replica has been removed from IdealState in\nHelix, after rebooting the node, Helix always drags replica being\nremoved to OFFLINE state (no matter what previous state it was before\nfailure) and directly triggers OFFLINE -> DROPPED. Hence, most of\nfailure recovery logic is inserted into Offline-To-Dropped transition.", "committedDate": "2020-03-01T18:56:35Z", "type": "commit"}, {"oid": "4ab90fcf799c88cdf495e6dca087915912818ece", "url": "https://github.com/linkedin/ambry/commit/4ab90fcf799c88cdf495e6dca087915912818ece", "message": "clean up and add tests", "committedDate": "2020-03-01T18:56:35Z", "type": "commit"}, {"oid": "0a04f9a5cbb549e73dcd55d01ce81825ede41340", "url": "https://github.com/linkedin/ambry/commit/0a04f9a5cbb549e73dcd55d01ce81825ede41340", "message": "add one more unit test", "committedDate": "2020-03-01T18:56:35Z", "type": "commit"}, {"oid": "7b653dd2ef21737f9919d1ad1c91f87584e12182", "url": "https://github.com/linkedin/ambry/commit/7b653dd2ef21737f9919d1ad1c91f87584e12182", "message": "add test case and remove unnecessary code in AmbryServerRequests", "committedDate": "2020-03-01T18:56:36Z", "type": "commit"}, {"oid": "86994da1ac399a6f939cc2d1878287ed6ee55d10", "url": "https://github.com/linkedin/ambry/commit/86994da1ac399a6f939cc2d1878287ed6ee55d10", "message": "addressed comments", "committedDate": "2020-03-02T07:06:36Z", "type": "commit"}, {"oid": "86994da1ac399a6f939cc2d1878287ed6ee55d10", "url": "https://github.com/linkedin/ambry/commit/86994da1ac399a6f939cc2d1878287ed6ee55d10", "message": "addressed comments", "committedDate": "2020-03-02T07:06:36Z", "type": "forcePushed"}, {"oid": "8a1767e71431d971729360a9e6f0f417099ee347", "url": "https://github.com/linkedin/ambry/commit/8a1767e71431d971729360a9e6f0f417099ee347", "message": "cleanup", "committedDate": "2020-03-02T18:00:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODUwNA==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386728504", "bodyText": "not used.", "author": "zzmao", "createdAt": "2020-03-03T00:14:11Z", "path": "ambry-api/src/main/java/com.github.ambry/server/StoreManager.java", "diffHunk": "@@ -15,7 +15,9 @@\n \n import com.github.ambry.clustermap.PartitionId;\n import com.github.ambry.clustermap.ReplicaId;\n+import com.github.ambry.router.Callback;", "originalCommit": "8a1767e71431d971729360a9e6f0f417099ee347", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczOTI1Nw==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386739257", "bodyText": "good catch, will clean it up", "author": "jsjtzyy", "createdAt": "2020-03-03T00:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "16a56c96a86161efe73a2969e2ea867d54074c68", "chunk": "diff --git a/ambry-api/src/main/java/com.github.ambry/server/StoreManager.java b/ambry-api/src/main/java/com.github.ambry/server/StoreManager.java\nindex 8ff9e59ee..68e54e62a 100644\n--- a/ambry-api/src/main/java/com.github.ambry/server/StoreManager.java\n+++ b/ambry-api/src/main/java/com.github.ambry/server/StoreManager.java\n\n@@ -15,7 +15,6 @@ package com.github.ambry.server;\n \n import com.github.ambry.clustermap.PartitionId;\n import com.github.ambry.clustermap.ReplicaId;\n-import com.github.ambry.router.Callback;\n import com.github.ambry.store.Store;\n import java.util.Collection;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDM0Mw==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386730343", "bodyText": "not used.", "author": "zzmao", "createdAt": "2020-03-03T00:20:16Z", "path": "ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java", "diffHunk": "@@ -17,9 +17,11 @@\n import com.github.ambry.clustermap.PartitionId;\n import com.github.ambry.clustermap.ReplicaId;\n import com.github.ambry.config.VerifiableProperties;\n+import com.github.ambry.router.Callback;", "originalCommit": "8a1767e71431d971729360a9e6f0f417099ee347", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16a56c96a86161efe73a2969e2ea867d54074c68", "chunk": "diff --git a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java b/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java\nindex ff1f5665f..f690b4f31 100644\n--- a/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java\n+++ b/ambry-cloud/src/main/java/com.github.ambry.cloud/CloudStorageManager.java\n\n@@ -17,7 +17,6 @@ import com.github.ambry.clustermap.ClusterMap;\n import com.github.ambry.clustermap.PartitionId;\n import com.github.ambry.clustermap.ReplicaId;\n import com.github.ambry.config.VerifiableProperties;\n-import com.github.ambry.router.Callback;\n import com.github.ambry.server.ServerErrorCode;\n import com.github.ambry.server.StoreManager;\n import com.github.ambry.store.Store;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDY2Mw==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386730663", "bodyText": "not used.", "author": "zzmao", "createdAt": "2020-03-03T00:21:10Z", "path": "ambry-replication/src/main/java/com.github.ambry.replication/ReplicationManager.java", "diffHunk": "@@ -29,6 +29,7 @@\n import com.github.ambry.config.StoreConfig;\n import com.github.ambry.network.ConnectionPool;\n import com.github.ambry.notification.NotificationSystem;\n+import com.github.ambry.router.Callback;", "originalCommit": "8a1767e71431d971729360a9e6f0f417099ee347", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16a56c96a86161efe73a2969e2ea867d54074c68", "chunk": "diff --git a/ambry-replication/src/main/java/com.github.ambry.replication/ReplicationManager.java b/ambry-replication/src/main/java/com.github.ambry.replication/ReplicationManager.java\nindex 2986b7d19..4771965c4 100644\n--- a/ambry-replication/src/main/java/com.github.ambry.replication/ReplicationManager.java\n+++ b/ambry-replication/src/main/java/com.github.ambry.replication/ReplicationManager.java\n\n@@ -29,7 +29,6 @@ import com.github.ambry.config.ReplicationConfig;\n import com.github.ambry.config.StoreConfig;\n import com.github.ambry.network.ConnectionPool;\n import com.github.ambry.notification.NotificationSystem;\n-import com.github.ambry.router.Callback;\n import com.github.ambry.server.StoreManager;\n import com.github.ambry.store.Store;\n import com.github.ambry.store.StoreKeyConverterFactory;\n"}}, {"oid": "16a56c96a86161efe73a2969e2ea867d54074c68", "url": "https://github.com/linkedin/ambry/commit/16a56c96a86161efe73a2969e2ea867d54074c68", "message": "address Ze's comments", "committedDate": "2020-03-03T00:55:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1NTc4OQ==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386755789", "bodyText": "please add Override annotation to HelixParticipant's implementation on this method.", "author": "justinlin-linkedin", "createdAt": "2020-03-03T01:47:30Z", "path": "ambry-api/src/main/java/com.github.ambry/clustermap/ClusterParticipant.java", "diffHunk": "@@ -91,6 +92,11 @@ void registerPartitionStateChangeListener(StateModelListenerType listenerType,\n   default void initializeParticipantMetrics(int localPartitionCount) {\n   }\n \n+  /**\n+   * @return a map of registered state change listeners (if there are any) in this cluster participant.\n+   */\n+  Map<StateModelListenerType, PartitionStateChangeListener> getPartitionStateChangeListeners();", "originalCommit": "16a56c96a86161efe73a2969e2ea867d54074c68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2MTM3OQ==", "url": "https://github.com/linkedin/ambry/pull/1396#discussion_r386761379", "bodyText": "can you add comment to this method to explain why we have to perform those actions in this order?", "author": "justinlin-linkedin", "createdAt": "2020-03-03T02:08:19Z", "path": "ambry-store/src/main/java/com.github.ambry.store/StorageManager.java", "diffHunk": "@@ -536,5 +615,26 @@ public void onPartitionBecomeDroppedFromOffline(String partitionName) {\n       partitionNameToReplicaId.remove(partitionName);\n       logger.info(\"Partition {} is successfully dropped on current node\", partitionName);\n     }\n+\n+    /**\n+     * This method is called by Offline-To-Dropped transition. Any errors/exceptions will be thrown and converted to\n+     * {@link StateTransitionException}. The error/exception is also recorded in certain metric for alerting purpose.\n+     */\n+    private void resumeDecommission(String partitionName) throws Exception {\n+      logger.info(\"Resuming decommission on replica {}\", partitionName);\n+      // 1. perform Standby-To-Inactive transition in StorageManager\n+      onPartitionBecomeInactiveFromStandby(partitionName);\n+      if (replicationManagerListener != null && replicaSyncUpManager != null) {\n+        // 2. perform Standby-To-Inactive transition in ReplicationManager\n+        replicationManagerListener.onPartitionBecomeInactiveFromStandby(partitionName);\n+        replicaSyncUpManager.waitDeactivationCompleted(partitionName);\n+        // 3. perform Inactive-To-Offline transition in ReplicationManager\n+        replicationManagerListener.onPartitionBecomeOfflineFromInactive(partitionName);\n+        replicaSyncUpManager.waitDisconnectionCompleted(partitionName);\n+      }\n+      // 4. perform Inactive-To-Offline transition in StorageManager\n+      onPartitionBecomeOfflineFromInactive(partitionName);\n+      logger.info(\"Decommission on replica {} is almost done, dropping it from current node\", partitionName);", "originalCommit": "16a56c96a86161efe73a2969e2ea867d54074c68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c849d22d091487eda0afef0e758ccd5fb890a64", "chunk": "diff --git a/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java b/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java\nindex 1052c1fc3..4dac75297 100644\n--- a/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java\n+++ b/ambry-store/src/main/java/com.github.ambry.store/StorageManager.java\n\n@@ -619,20 +619,29 @@ public class StorageManager implements StoreManager {\n     /**\n      * This method is called by Offline-To-Dropped transition. Any errors/exceptions will be thrown and converted to\n      * {@link StateTransitionException}. The error/exception is also recorded in certain metric for alerting purpose.\n+     * NOTE: there are 4 steps to resume decommission(see comments in method) and the steps should be performed in order.\n+     * This method basically repeats the Standby-To-Inactive and Inactive-To-Offline transitions. That's why we see\n+     * replication manager listener is called twice for different transitions.\n      */\n     private void resumeDecommission(String partitionName) throws Exception {\n       logger.info(\"Resuming decommission on replica {}\", partitionName);\n-      // 1. perform Standby-To-Inactive transition in StorageManager\n+      // 1. perform Standby-To-Inactive transition in StorageManager. This is to disable compaction at the very beginning\n+      //    to avoid position of last PUT in store changes.\n       onPartitionBecomeInactiveFromStandby(partitionName);\n       if (replicationManagerListener != null && replicaSyncUpManager != null) {\n-        // 2. perform Standby-To-Inactive transition in ReplicationManager\n+        // 2. perform Standby-To-Inactive transition in ReplicationManager. This is to initiate deactivation on given\n+        //    partition and will be blocked until peer replicas have caught up with last PUT in corresponding store.\n         replicationManagerListener.onPartitionBecomeInactiveFromStandby(partitionName);\n         replicaSyncUpManager.waitDeactivationCompleted(partitionName);\n-        // 3. perform Inactive-To-Offline transition in ReplicationManager\n+        // 3. perform Inactive-To-Offline transition in ReplicationManager. This is to initiate disconnection on given\n+        //    partition and will be blocked until peer replicas have caught up with last record(i.e DELETE etc) in store.\n         replicationManagerListener.onPartitionBecomeOfflineFromInactive(partitionName);\n         replicaSyncUpManager.waitDisconnectionCompleted(partitionName);\n       }\n-      // 4. perform Inactive-To-Offline transition in StorageManager\n+      // 4. perform Inactive-To-Offline transition in StorageManager. This comes last because in this step it shuts down\n+      //    store and updates InstanceConfig in Helix to remove replica from clustermap. Hence, we have to ensure the\n+      //    data in store have been replicated to peer nodes (before store is shut down or removed), which requires\n+      //    deactivation and disconnection to complete first.\n       onPartitionBecomeOfflineFromInactive(partitionName);\n       logger.info(\"Decommission on replica {} is almost done, dropping it from current node\", partitionName);\n     }\n"}}, {"oid": "3c849d22d091487eda0afef0e758ccd5fb890a64", "url": "https://github.com/linkedin/ambry/commit/3c849d22d091487eda0afef0e758ccd5fb890a64", "message": "address Justin's comments", "committedDate": "2020-03-03T05:08:35Z", "type": "commit"}]}