{"pr_number": 1679, "pr_title": "[AZURE_AD_AUTH] Implementation of Ad based authentication for azure storage.", "pr_createdAt": "2020-10-29T03:26:21Z", "pr_url": "https://github.com/linkedin/ambry/pull/1679", "timeline": [{"oid": "00a727cb83bc994e347cae5bae0a29f718222100", "url": "https://github.com/linkedin/ambry/commit/00a727cb83bc994e347cae5bae0a29f718222100", "message": "Implementation of Ad based authentication for azure storage.", "committedDate": "2020-11-02T20:36:00Z", "type": "commit"}, {"oid": "c0c4b2f1ad8262b9b38458b8af3290bbdfd46c2c", "url": "https://github.com/linkedin/ambry/commit/c0c4b2f1ad8262b9b38458b8af3290bbdfd46c2c", "message": "Add new fields to azure test properties.", "committedDate": "2020-11-02T20:36:00Z", "type": "commit"}, {"oid": "a7831adecb3683f04edcb3a0bb098edda2c67879", "url": "https://github.com/linkedin/ambry/commit/a7831adecb3683f04edcb3a0bb098edda2c67879", "message": "Add newline", "committedDate": "2020-11-02T20:36:00Z", "type": "commit"}, {"oid": "a7831adecb3683f04edcb3a0bb098edda2c67879", "url": "https://github.com/linkedin/ambry/commit/a7831adecb3683f04edcb3a0bb098edda2c67879", "message": "Add newline", "committedDate": "2020-11-02T20:36:00Z", "type": "forcePushed"}, {"oid": "5b5f17894680cadfa97627f42934c853b9f84c50", "url": "https://github.com/linkedin/ambry/commit/5b5f17894680cadfa97627f42934c853b9f84c50", "message": "Refactor, add config validations and add test.", "committedDate": "2020-11-02T23:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODM3MQ==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516428371", "bodyText": "Shouldn't this be in AzureCloudConfig?", "author": "lightningrob", "createdAt": "2020-11-03T04:57:38Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";", "originalCommit": "5b5f17894680cadfa97627f42934c853b9f84c50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODIwMA==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448200", "bodyText": "fixed.", "author": "ankagrawal", "createdAt": "2020-11-03T06:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\nindex b624e3c5e..f21c1ba3d 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\n\n@@ -28,7 +28,6 @@ import com.microsoft.aad.msal4j.IAuthenticationResult;\n import java.net.MalformedURLException;\n import java.time.OffsetDateTime;\n import java.util.Collections;\n-import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODY2Ng==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516428666", "bodyText": "Minor: can combine last two lines if not using future for anything else.", "author": "lightningrob", "createdAt": "2020-11-03T04:59:19Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {\n+      @Override\n+      public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        return Mono.just(new AccessToken(iAuthenticationResult.accessToken(),\n+            iAuthenticationResult.expiresOnDate().toInstant().atOffset(OffsetDateTime.now().getOffset())));\n+      }\n+    })\n+        .endpoint(azureCloudConfig.azureStorageEndpoint)\n+        .httpClient(httpClient)\n+        .retryOptions(retryOptions)\n+        .configuration(configuration)\n+        .buildClient();\n+  }\n+\n+  @Override\n+  protected void validateABSAuthConfigs(AzureCloudConfig azureCloudConfig) {\n+    if (azureCloudConfig.azureStorageAuthority.isEmpty() || azureCloudConfig.azureStorageClientId.isEmpty()\n+        || azureCloudConfig.azureStorageSecret.isEmpty() || azureCloudConfig.azureStorageEndpoint.isEmpty()) {\n+      throw new IllegalArgumentException(String.format(\"One of the required configs %s, %s, %s, %s is missing\",\n+          AzureCloudConfig.AZURE_STORAGE_AUTHORITY, AzureCloudConfig.AZURE_STORAGE_CLIENTID,\n+          AzureCloudConfig.AZURE_STORAGE_ENDPOINT, AzureCloudConfig.AZURE_STORAGE_SECRET));\n+    }\n+  }\n+\n+  /**\n+   * Create {@link IAuthenticationResult} using the app details.\n+   * @param azureCloudConfig {@link AzureCloudConfig} object.\n+   * @return {@link IAuthenticationResult} containing the access token.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  private IAuthenticationResult getAccessTokenByClientCredentialGrant(AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    ConfidentialClientApplication app = ConfidentialClientApplication.builder(azureCloudConfig.azureStorageClientId,\n+        ClientCredentialFactory.createFromSecret(azureCloudConfig.azureStorageSecret))\n+        .authority(azureCloudConfig.azureStorageAuthority)\n+        .build();\n+    ClientCredentialParameters clientCredentialParam =\n+        ClientCredentialParameters.builder(Collections.singleton(AZURE_STORAGE_ACCESS_SCOPE)).build();\n+    CompletableFuture<IAuthenticationResult> future = app.acquireToken(clientCredentialParam);\n+    return future.get();", "originalCommit": "5b5f17894680cadfa97627f42934c853b9f84c50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODc0Mw==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448743", "bodyText": "done.", "author": "ankagrawal", "createdAt": "2020-11-03T06:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\nindex b624e3c5e..f21c1ba3d 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\n\n@@ -28,7 +28,6 @@ import com.microsoft.aad.msal4j.IAuthenticationResult;\n import java.net.MalformedURLException;\n import java.time.OffsetDateTime;\n import java.util.Collections;\n-import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyOTM2Mg==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516429362", "bodyText": "Minor: it will be easier to read if you split the credential construction into its own line.", "author": "lightningrob", "createdAt": "2020-11-03T05:02:54Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.microsoft.aad.msal4j.ClientCredentialFactory;\n+import com.microsoft.aad.msal4j.ClientCredentialParameters;\n+import com.microsoft.aad.msal4j.ConfidentialClientApplication;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import java.net.MalformedURLException;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * {@link StorageClientFactory} implementation for AD based authentication.\n+ */\n+public class ADAuthBasedStorageClientFactory extends StorageClientFactory {\n+  private static String AZURE_STORAGE_ACCESS_SCOPE = \"https://wus2ambryblobstore1.blob.core.windows.net/.default\";\n+\n+  @Override\n+  protected BlobServiceClient buildBlobServiceClient(HttpClient httpClient, Configuration configuration,\n+      RequestRetryOptions retryOptions, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {\n+    IAuthenticationResult iAuthenticationResult = getAccessTokenByClientCredentialGrant(azureCloudConfig);\n+    return new BlobServiceClientBuilder().credential(new TokenCredential() {", "originalCommit": "5b5f17894680cadfa97627f42934c853b9f84c50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODU1Ng==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448556", "bodyText": "done.", "author": "ankagrawal", "createdAt": "2020-11-03T06:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyOTM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\nindex b624e3c5e..f21c1ba3d 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/ADAuthBasedStorageClientFactory.java\n\n@@ -28,7 +28,6 @@ import com.microsoft.aad.msal4j.IAuthenticationResult;\n import java.net.MalformedURLException;\n import java.time.OffsetDateTime;\n import java.util.Collections;\n-import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDk0MA==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516430940", "bodyText": "Duplicate line", "author": "lightningrob", "createdAt": "2020-11-03T05:10:27Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java", "diffHunk": "@@ -83,31 +78,30 @@\n    * @param azureCloudConfig the {@link AzureCloudConfig} to use.\n    * @param blobLayoutStrategy the {@link AzureBlobLayoutStrategy} to use.\n    * @param azureMetrics the {@link AzureMetrics} to use.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws ReflectiveOperationException\n+   * @throws ReflectiveOperationException", "originalCommit": "5b5f17894680cadfa97627f42934c853b9f84c50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0ODk2OA==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516448968", "bodyText": "fixed.", "author": "ankagrawal", "createdAt": "2020-11-03T06:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java\nindex d9b463e18..1277debe6 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/AzureBlobDataAccessor.java\n\n@@ -78,15 +76,10 @@ public class AzureBlobDataAccessor {\n    * @param azureCloudConfig the {@link AzureCloudConfig} to use.\n    * @param blobLayoutStrategy the {@link AzureBlobLayoutStrategy} to use.\n    * @param azureMetrics the {@link AzureMetrics} to use.\n-   * @throws MalformedURLException\n-   * @throws InterruptedException\n-   * @throws ExecutionException\n-   * @throws ReflectiveOperationException\n    * @throws ReflectiveOperationException\n    */\n   public AzureBlobDataAccessor(CloudConfig cloudConfig, AzureCloudConfig azureCloudConfig,\n-      AzureBlobLayoutStrategy blobLayoutStrategy, AzureMetrics azureMetrics)\n-      throws MalformedURLException, InterruptedException, ExecutionException, ReflectiveOperationException {\n+      AzureBlobLayoutStrategy blobLayoutStrategy, AzureMetrics azureMetrics) throws ReflectiveOperationException {\n     this.blobLayoutStrategy = blobLayoutStrategy;\n     this.azureMetrics = azureMetrics;\n     this.purgeBatchSize = azureCloudConfig.azurePurgeBatchSize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMjcxMA==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516432710", "bodyText": "Rather than introducing several new checked exceptions that AzureBlobDataAccessor needs to know about, can we catch and rethrow as IllegalStateException similar to AzureCloudDestinationFactory.getCloudDestination()?", "author": "lightningrob", "createdAt": "2020-11-03T05:19:15Z", "path": "ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020  LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.cloud.azure;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.util.Configuration;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.azure.storage.common.policy.RetryPolicyType;\n+import com.github.ambry.config.CloudConfig;\n+import com.microsoft.azure.cosmosdb.RetryOptions;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.util.concurrent.ExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A factory class to create {@link BlobServiceClient} object.\n+ */\n+public abstract class StorageClientFactory {\n+  Logger logger = LoggerFactory.getLogger(StorageClientFactory.class);\n+\n+  /**\n+   * Create the {@link BlobServiceClient} object.\n+   * @param {@link CloudConfig} object.\n+   * @param {@link AzureCloudConfig} object.\n+   * @return {@link BlobServiceClient} object.\n+   * @throws MalformedURLException\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   */\n+  public BlobServiceClient createBlobStorageClient(CloudConfig cloudConfig, AzureCloudConfig azureCloudConfig)\n+      throws MalformedURLException, InterruptedException, ExecutionException {", "originalCommit": "5b5f17894680cadfa97627f42934c853b9f84c50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1Mjk5NQ==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516452995", "bodyText": "done.", "author": "ankagrawal", "createdAt": "2020-11-03T06:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMjcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "chunk": "diff --git a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java\nindex 4742f14a6..ac50161bc 100644\n--- a/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java\n+++ b/ambry-cloud/src/main/java/com/github/ambry/cloud/azure/StorageClientFactory.java\n\n@@ -40,12 +40,8 @@ public abstract class StorageClientFactory {\n    * @param {@link CloudConfig} object.\n    * @param {@link AzureCloudConfig} object.\n    * @return {@link BlobServiceClient} object.\n-   * @throws MalformedURLException\n-   * @throws InterruptedException\n-   * @throws ExecutionException\n    */\n-  public BlobServiceClient createBlobStorageClient(CloudConfig cloudConfig, AzureCloudConfig azureCloudConfig)\n-      throws MalformedURLException, InterruptedException, ExecutionException {\n+  public BlobServiceClient createBlobStorageClient(CloudConfig cloudConfig, AzureCloudConfig azureCloudConfig) {\n     validateABSAuthConfigs(azureCloudConfig);\n     Configuration storageConfiguration = new Configuration();\n     // Check for network proxy\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMzYxNQ==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516433615", "bodyText": "Was there a reason to move this method?  My understanding is public methods go before package private ones.", "author": "lightningrob", "createdAt": "2020-11-03T05:23:55Z", "path": "ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java", "diffHunk": "@@ -96,10 +81,26 @@ static BlockBlobClient setupMockBlobClient(BlobServiceClient mockServiceClient)\n     lenient().when(mockBlobProperties.getMetadata()).thenReturn(metadataMap);\n     Response<BlobProperties> mockPropertiesResponse = mock(Response.class);\n     lenient().when(mockPropertiesResponse.getValue()).thenReturn(mockBlobProperties);\n-    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any())).thenReturn(mockPropertiesResponse);\n+    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any()))\n+        .thenReturn(mockPropertiesResponse);\n     return mockBlockBlobClient;\n   }\n \n+  @Before", "originalCommit": "5b5f17894680cadfa97627f42934c853b9f84c50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MzUzMg==", "url": "https://github.com/linkedin/ambry/pull/1679#discussion_r516453532", "bodyText": "fixed it. This was the job of Intellij's code reformatter.", "author": "ankagrawal", "createdAt": "2020-11-03T06:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMzYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "chunk": "diff --git a/ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java b/ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java\nindex 011fa4467..4bb33dac5 100644\n--- a/ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java\n+++ b/ambry-cloud/src/test/java/com/github/ambry/cloud/azure/AzureBlobDataAccessorTest.java\n\n@@ -67,25 +67,6 @@ public class AzureBlobDataAccessorTest {\n   private long deletionTime = creationTime + 10000;\n   private long expirationTime = Utils.Infinite_Time;\n \n-  static BlockBlobClient setupMockBlobClient(BlobServiceClient mockServiceClient) {\n-    BlobContainerClient mockContainerClient = mock(BlobContainerClient.class);\n-    BlobClient mockBlobClient = mock(BlobClient.class);\n-    BlockBlobClient mockBlockBlobClient = mock(BlockBlobClient.class);\n-    when(mockServiceClient.getBlobContainerClient(anyString())).thenReturn(mockContainerClient);\n-    when(mockContainerClient.getBlobClient(anyString())).thenReturn(mockBlobClient);\n-    when(mockContainerClient.exists()).thenReturn(false);\n-    when(mockBlobClient.getBlockBlobClient()).thenReturn(mockBlockBlobClient);\n-    // Rest is to mock getPropertiesWithResponse and not needed everywhere\n-    BlobProperties mockBlobProperties = mock(BlobProperties.class);\n-    Map<String, String> metadataMap = new HashMap<>();\n-    lenient().when(mockBlobProperties.getMetadata()).thenReturn(metadataMap);\n-    Response<BlobProperties> mockPropertiesResponse = mock(Response.class);\n-    lenient().when(mockPropertiesResponse.getValue()).thenReturn(mockBlobProperties);\n-    lenient().when(mockBlockBlobClient.getPropertiesWithResponse(any(), any(), any()))\n-        .thenReturn(mockPropertiesResponse);\n-    return mockBlockBlobClient;\n-  }\n-\n   @Before\n   public void setup() throws Exception {\n \n"}}, {"oid": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "url": "https://github.com/linkedin/ambry/commit/9c370252f45c5bf855c01790eba754ff51e2c1f2", "message": "Address review comments.\nParameterize AzureIntegrationTest", "committedDate": "2020-11-03T07:10:36Z", "type": "commit"}, {"oid": "9c370252f45c5bf855c01790eba754ff51e2c1f2", "url": "https://github.com/linkedin/ambry/commit/9c370252f45c5bf855c01790eba754ff51e2c1f2", "message": "Address review comments.\nParameterize AzureIntegrationTest", "committedDate": "2020-11-03T07:10:36Z", "type": "forcePushed"}, {"oid": "a34746063d30b6712b22741f74322576de6567ec", "url": "https://github.com/linkedin/ambry/commit/a34746063d30b6712b22741f74322576de6567ec", "message": "Add old values in test properties.", "committedDate": "2020-11-03T07:15:36Z", "type": "commit"}]}