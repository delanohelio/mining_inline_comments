{"pr_number": 1699, "pr_title": "[Throttle] Host Level Throttling ", "pr_createdAt": "2020-11-19T06:43:28Z", "pr_url": "https://github.com/linkedin/ambry/pull/1699", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMDc0Mw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r529010743", "bodyText": "nit: maybe using new JSONObject().put(\"PUT\", -1).put(...).toString() will be cleaner than writing out the raw string.", "author": "cgtz", "createdAt": "2020-11-23T21:34:04Z", "path": "ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.config;\n+\n+/**\n+ * Config for Host Level Throttling.\n+ */\n+public class HostThrottleConfig {\n+  private static final String PREFIX = \"host.throttle.\";\n+  public static final String REST_REQUEST_QUOTA_STRING = PREFIX + \"rest.request.quota\";\n+  public static final String HARDWARE_THRESHOLDS = PREFIX + \"hardware.thresholds\";\n+  public static final String CPU_MAX_ALLOWED_DELAY_IN_MS = PREFIX + \"cpu.max.allowed.delay.in.ms\";\n+  public static final String MEMORY_MAX_ALLOWED_DELAY_IN_MS = PREFIX + \"memory.max.allowed.delay.in.ms\";\n+\n+  private static final String DEFAULT_REST_REQUEST_QUOTA_STRING =\n+      \"{\\\"PUT\\\": \\\"-1\\\",\\\"GET\\\": \\\"-1\\\",\\\"POST\\\": \\\"-1\\\",\\\"HEAD\\\": \\\"-1\\\",\\\"OPTIONS\\\": \\\"-1\\\",\\\"UNKNOWN\\\": \\\"-1\\\",\\\"DELETE\\\": \\\"-1\\\"}\";", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgyMzA1NQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r535823055", "bodyText": "+1", "author": "lightningrob", "createdAt": "2020-12-04T04:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMDc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java b/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java\nindex a631bde2d..5abfd8624 100644\n--- a/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java\n+++ b/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java\n\n@@ -13,6 +13,9 @@\n  */\n package com.github.ambry.config;\n \n+import org.json.JSONObject;\n+\n+\n /**\n  * Config for Host Level Throttling.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMjI5Ng==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r529012296", "bodyText": "is there a constant somewhere for this pool name?", "author": "cgtz", "createdAt": "2020-11-23T21:37:10Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {\n+      if (mxBean.getName().equals(\"direct\")) {", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MzEwNw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541373107", "bodyText": "It looks like there is no constant definition. The name comes from a low level implementation: https://java-browser.yawk.at/java/8/java/nio/Bits.java#740", "author": "zzmao", "createdAt": "2020-12-11T22:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMjI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex 6f74ae632..7c690f797 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMzcxNQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r529023715", "bodyText": "Maybe memoryRecordTime can be atomic and getAndUpdate can be used in a way such that only one thread will update this value per cycle.\nAlso, without using volatile, memoryPercentage is eventually consistent. Maybe that is okay for this use case though.", "author": "cgtz", "createdAt": "2020-11-23T22:00:22Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {\n+      if (mxBean.getName().equals(\"direct\")) {\n+        directMemoryMxBean = mxBean;\n+        break;\n+      }\n+    }\n+    if (directMemoryMxBean == null) {\n+      logger.error(\"Couldn't get directMemoryMxBean\");\n+    }\n+\n+    osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n+  }\n+\n+  int getCpuPercentage() {\n+    // In experiments, osBean.getSystemCpuLoad() takes 15-25 ms\n+    if (System.currentTimeMillis() <= cpuRecordTime + cpuMaxAllowedDelayInMs) {\n+      return cpuPercentage;\n+    }\n+    cpuPercentage = (int) (osBean.getSystemCpuLoad() * 100);\n+    cpuRecordTime = System.currentTimeMillis();\n+    logger.trace(\"CPU percentage: {}\", cpuPercentage);\n+    return cpuPercentage;\n+  }\n+\n+  int getMemoryPercentage() {\n+    // In experiments, Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() takes 2-6ms\n+    // directMemoryMxBean.getMemoryUsed() takes 2-15ms\n+    if (System.currentTimeMillis() <= memoryRecordTime + memoryMaxAllowedDelayInMs) {", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4NjUwNA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541386504", "bodyText": "atomic memoryRecordTime used.", "author": "zzmao", "createdAt": "2020-12-11T23:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMzcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex 6f74ae632..7c690f797 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4OTEyMA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539589120", "bodyText": "I guess it will be null even if you don't assign.", "author": "ankagrawal", "createdAt": "2020-12-09T19:34:27Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4NjQ0MQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541386441", "bodyText": "fixed.", "author": "zzmao", "createdAt": "2020-12-11T23:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4OTEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex 6f74ae632..7c690f797 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MTQzNg==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539591436", "bodyText": "do you mean hardwareThresholdMap.get(HardwareResource.CPU)?", "author": "ankagrawal", "createdAt": "2020-12-09T19:37:57Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import com.github.ambry.config.HostThrottleConfig;\n+import com.github.ambry.rest.RestMethod;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.utils.RejectThrottler;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to decide if a request should be throttled.\n+ */\n+public class HostLevelThrottler {\n+  private static final Logger logger = LoggerFactory.getLogger(HostLevelThrottler.class);\n+  private final Map<RestMethod, RejectThrottler> quotaMap;\n+  private final Map<HardwareResource, Criteria> hardwareThresholdMap;\n+  private final HardwareUsageMeter hardwareUsageMeter;\n+\n+  public HostLevelThrottler(HostThrottleConfig hostThrottleConfig) {\n+    this.hardwareUsageMeter =\n+        new HardwareUsageMeter(hostThrottleConfig.cpuMaxAllowedDelayInMs, hostThrottleConfig.memoryMaxAllowedDelayInMs);\n+    JSONObject quota = new JSONObject(hostThrottleConfig.restRequestQuota);\n+    JSONObject thresholds = new JSONObject(hostThrottleConfig.hardwareThresholds);\n+    quotaMap = new HashMap<>();\n+    hardwareThresholdMap = new HashMap<>();\n+    for (RestMethod restMethod : RestMethod.values()) {\n+      quotaMap.put(restMethod, new RejectThrottler(quota.optInt(restMethod.name(), -1)));\n+    }\n+    // All criteria should be satisfied.\n+    // Future work: if multiple throttling rules under \"OR\" condition needed, a list of thresholds/hardwareThresholdMap can be used.\n+    for (HardwareResource hardwareResource : HardwareResource.values()) {\n+      if (thresholds.has(hardwareResource.name())) {\n+        JSONObject jsonObject = thresholds.getJSONObject(hardwareResource.name());\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+          Criteria criteria = objectMapper.readValue(jsonObject.toString(), Criteria.class);\n+          hardwareThresholdMap.put(hardwareResource, criteria);\n+        } catch (IOException e) {\n+          logger.error(\"Error while parsing {} threshold \", hardwareResource.name(), e);\n+          continue;\n+        }\n+      }\n+    }\n+    logger.info(\"Host throttling config: {} {}\", quotaMap, hardwareThresholdMap);\n+  }\n+\n+  public HostLevelThrottler(Map<RestMethod, RejectThrottler> quotaMap,\n+      Map<HardwareResource, Criteria> hardwareResourcesCriteriaMap, HardwareUsageMeter hardwareUsageMeter) {\n+    this.quotaMap = quotaMap;\n+    this.hardwareThresholdMap = new HashMap<>();\n+    this.hardwareUsageMeter = hardwareUsageMeter;\n+  }\n+\n+  /**\n+   * Return {@code true} if throttling is required. Return {@code false} if no throttler for this rest method or quota\n+   * is not reached.\n+   * @param restRequest provides the information.\n+   */\n+  public boolean shouldThrottle(RestRequest restRequest) {\n+    boolean shouldThrottle;\n+    // Check quotaMap\n+    RejectThrottler throttler = quotaMap.get(restRequest.getRestMethod());\n+    shouldThrottle = (throttler != null && throttler.shouldThrottle(1));\n+    // Check hardwareThresholdMap\n+    if (!shouldThrottle && hardwareThresholdMap.containsKey(HardwareResource.MEMORY)) {\n+      shouldThrottle = !hardwareThresholdMap.get(HardwareResource.MEMORY)\n+          .meetRequirement((long) hardwareUsageMeter.getMemoryPercentage());\n+      if (shouldThrottle) {\n+        logger.warn(\"Throttle because of Memory: {}%\", hardwareUsageMeter.getMemoryPercentage());\n+      }\n+    }\n+\n+    if (!shouldThrottle && hardwareThresholdMap.containsKey(HardwareResource.CPU)) {\n+      shouldThrottle = !hardwareThresholdMap.get(HardwareResource.MEMORY)", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4NjM3Mw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541386373", "bodyText": "fixed.", "author": "zzmao", "createdAt": "2020-12-11T23:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MTQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java b/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java\nindex c9e7b7e31..c5ab09697 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java\n\n@@ -49,10 +49,10 @@ public class HostLevelThrottler {\n     // Future work: if multiple throttling rules under \"OR\" condition needed, a list of thresholds/hardwareThresholdMap can be used.\n     for (HardwareResource hardwareResource : HardwareResource.values()) {\n       if (thresholds.has(hardwareResource.name())) {\n-        JSONObject jsonObject = thresholds.getJSONObject(hardwareResource.name());\n+        String jsonString = thresholds.getString(hardwareResource.name());\n         ObjectMapper objectMapper = new ObjectMapper();\n         try {\n-          Criteria criteria = objectMapper.readValue(jsonObject.toString(), Criteria.class);\n+          Criteria criteria = objectMapper.readValue(jsonString, Criteria.class);\n           hardwareThresholdMap.put(hardwareResource, criteria);\n         } catch (IOException e) {\n           logger.error(\"Error while parsing {} threshold \", hardwareResource.name(), e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTE1NA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539595154", "bodyText": "A cleaner way to implement both the blocks could be iterating for all HardwareResources. This will also help to add new hardware resources without code change here.\nfor(HardwareResource hardwareResource : HardwareResource.values()) {\nif (!shouldThrottle && hardwareThresholdMap.containsKey(hardwareResource)) {\nshouldThrottle = !hardwareThresholdMap.get(HardwareResource.MEMORY)\n.meetRequirement((long) hardwareUsageMeter.getMemoryPercentage());  // TODO (NOTE: get the specific resource requirement from a map)\nif (shouldThrottle) {\nlogger.warn(\"Throttle because of Memory: {}%\", hardwareUsageMeter.getMemoryPercentage());\n}\n}", "author": "ankagrawal", "createdAt": "2020-12-09T19:43:33Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import com.github.ambry.config.HostThrottleConfig;\n+import com.github.ambry.rest.RestMethod;\n+import com.github.ambry.rest.RestRequest;\n+import com.github.ambry.utils.RejectThrottler;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to decide if a request should be throttled.\n+ */\n+public class HostLevelThrottler {\n+  private static final Logger logger = LoggerFactory.getLogger(HostLevelThrottler.class);\n+  private final Map<RestMethod, RejectThrottler> quotaMap;\n+  private final Map<HardwareResource, Criteria> hardwareThresholdMap;\n+  private final HardwareUsageMeter hardwareUsageMeter;\n+\n+  public HostLevelThrottler(HostThrottleConfig hostThrottleConfig) {\n+    this.hardwareUsageMeter =\n+        new HardwareUsageMeter(hostThrottleConfig.cpuMaxAllowedDelayInMs, hostThrottleConfig.memoryMaxAllowedDelayInMs);\n+    JSONObject quota = new JSONObject(hostThrottleConfig.restRequestQuota);\n+    JSONObject thresholds = new JSONObject(hostThrottleConfig.hardwareThresholds);\n+    quotaMap = new HashMap<>();\n+    hardwareThresholdMap = new HashMap<>();\n+    for (RestMethod restMethod : RestMethod.values()) {\n+      quotaMap.put(restMethod, new RejectThrottler(quota.optInt(restMethod.name(), -1)));\n+    }\n+    // All criteria should be satisfied.\n+    // Future work: if multiple throttling rules under \"OR\" condition needed, a list of thresholds/hardwareThresholdMap can be used.\n+    for (HardwareResource hardwareResource : HardwareResource.values()) {\n+      if (thresholds.has(hardwareResource.name())) {\n+        JSONObject jsonObject = thresholds.getJSONObject(hardwareResource.name());\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+          Criteria criteria = objectMapper.readValue(jsonObject.toString(), Criteria.class);\n+          hardwareThresholdMap.put(hardwareResource, criteria);\n+        } catch (IOException e) {\n+          logger.error(\"Error while parsing {} threshold \", hardwareResource.name(), e);\n+          continue;\n+        }\n+      }\n+    }\n+    logger.info(\"Host throttling config: {} {}\", quotaMap, hardwareThresholdMap);\n+  }\n+\n+  public HostLevelThrottler(Map<RestMethod, RejectThrottler> quotaMap,\n+      Map<HardwareResource, Criteria> hardwareResourcesCriteriaMap, HardwareUsageMeter hardwareUsageMeter) {\n+    this.quotaMap = quotaMap;\n+    this.hardwareThresholdMap = new HashMap<>();\n+    this.hardwareUsageMeter = hardwareUsageMeter;\n+  }\n+\n+  /**\n+   * Return {@code true} if throttling is required. Return {@code false} if no throttler for this rest method or quota\n+   * is not reached.\n+   * @param restRequest provides the information.\n+   */\n+  public boolean shouldThrottle(RestRequest restRequest) {\n+    boolean shouldThrottle;\n+    // Check quotaMap\n+    RejectThrottler throttler = quotaMap.get(restRequest.getRestMethod());\n+    shouldThrottle = (throttler != null && throttler.shouldThrottle(1));\n+    // Check hardwareThresholdMap\n+    if (!shouldThrottle && hardwareThresholdMap.containsKey(HardwareResource.MEMORY)) {", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4Nzg1OA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539787858", "bodyText": "+1", "author": "lightningrob", "createdAt": "2020-12-10T02:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4NjMyMQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541386321", "bodyText": "fixed.", "author": "zzmao", "createdAt": "2020-12-11T23:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java b/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java\nindex c9e7b7e31..c5ab09697 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HostLevelThrottler.java\n\n@@ -49,10 +49,10 @@ public class HostLevelThrottler {\n     // Future work: if multiple throttling rules under \"OR\" condition needed, a list of thresholds/hardwareThresholdMap can be used.\n     for (HardwareResource hardwareResource : HardwareResource.values()) {\n       if (thresholds.has(hardwareResource.name())) {\n-        JSONObject jsonObject = thresholds.getJSONObject(hardwareResource.name());\n+        String jsonString = thresholds.getString(hardwareResource.name());\n         ObjectMapper objectMapper = new ObjectMapper();\n         try {\n-          Criteria criteria = objectMapper.readValue(jsonObject.toString(), Criteria.class);\n+          Criteria criteria = objectMapper.readValue(jsonString, Criteria.class);\n           hardwareThresholdMap.put(hardwareResource, criteria);\n         } catch (IOException e) {\n           logger.error(\"Error while parsing {} threshold \", hardwareResource.name(), e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3OTM0NQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539779345", "bodyText": "Nit: 2020", "author": "lightningrob", "createdAt": "2020-12-10T01:42:49Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0NjAzNQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r542746035", "bodyText": "fixed.", "author": "zzmao", "createdAt": "2020-12-14T20:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3OTM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex 6f74ae632..7c690f797 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MzIyMQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539783221", "bodyText": "directMemoryMxBean = pools.stream().filter(bean -> bean.getName().equals(\"direct\")).findFirst()...\ndirectMemoryMxBean could also be Optional", "author": "lightningrob", "createdAt": "2020-12-10T01:53:31Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4ODk1MA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541388950", "bodyText": "changed to\ndirectMemoryMxBean = pools.stream().filter(bean -> bean.getName().equals(\"direct\")).findFirst().orElse(null);", "author": "zzmao", "createdAt": "2020-12-11T23:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MzIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex 6f74ae632..7c690f797 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NDY5NQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539784695", "bodyText": "Might be clearer to call it cpu/memorySamplingPeriodMs", "author": "lightningrob", "createdAt": "2020-12-10T01:57:14Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0NTk3Nw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r542745977", "bodyText": "good name. Changed.", "author": "zzmao", "createdAt": "2020-12-14T20:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NDY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex 6f74ae632..7c690f797 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NzY0OQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539787649", "bodyText": "Following Casey's suggestion, the class can have generic method geConsumptionPercentage(HardwareResource resource) that throttler can call.", "author": "lightningrob", "createdAt": "2020-12-10T02:03:39Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private long cpuRecordTime = 0;\n+  private final int cpuMaxAllowedDelayInMs;\n+  private int cpuPercentage;\n+  private long memoryRecordTime = 0;\n+  private final int memoryMaxAllowedDelayInMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean = null;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuMaxAllowedDelayInMs, int memoryMaxAllowedDelayInMs) {\n+    this.cpuMaxAllowedDelayInMs = cpuMaxAllowedDelayInMs;\n+    this.memoryMaxAllowedDelayInMs = memoryMaxAllowedDelayInMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    for (BufferPoolMXBean mxBean : pools) {\n+      if (mxBean.getName().equals(\"direct\")) {\n+        directMemoryMxBean = mxBean;\n+        break;\n+      }\n+    }\n+    if (directMemoryMxBean == null) {\n+      logger.error(\"Couldn't get directMemoryMxBean\");\n+    }\n+\n+    osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n+  }\n+\n+  int getCpuPercentage() {", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4OTYxNw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541389617", "bodyText": "good point. Added.", "author": "zzmao", "createdAt": "2020-12-11T23:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NzY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex 6f74ae632..7c690f797 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 LinkedIn Corp. All rights reserved.\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODQzNA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539788434", "bodyText": "Separate lines with javadoc.", "author": "lightningrob", "createdAt": "2020-12-10T02:05:38Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+/**\n+ * Hardware Resource that ambry needs to monitor for throttling\n+ */\n+public enum HardwareResource {\n+  CPU, MEMORY", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM5MDE5Mw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r541390193", "bodyText": "what does this mean?", "author": "zzmao", "createdAt": "2020-12-11T23:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java\nindex 40161bf04..6c0a5d49f 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java\n\n@@ -14,7 +14,7 @@\n package com.github.ambry.commons;\n \n /**\n- * Hardware Resource that ambry needs to monitor for throttling\n+ * Hardware Resource that Ambry needs to monitor for throttling\n  */\n public enum HardwareResource {\n   CPU, MEMORY\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODU1MA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r539788550", "bodyText": "Nit: capitalize Ambry.", "author": "lightningrob", "createdAt": "2020-12-10T02:06:01Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+/**\n+ * Hardware Resource that ambry needs to monitor for throttling", "originalCommit": "50fdaa18cf9cec79d1920565b8e307d8de4d8b60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0NjI0NA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r542746244", "bodyText": "fixed.", "author": "zzmao", "createdAt": "2020-12-14T20:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java\nindex 40161bf04..6c0a5d49f 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareResource.java\n\n@@ -14,7 +14,7 @@\n package com.github.ambry.commons;\n \n /**\n- * Hardware Resource that ambry needs to monitor for throttling\n+ * Hardware Resource that Ambry needs to monitor for throttling\n  */\n public enum HardwareResource {\n   CPU, MEMORY\n"}}, {"oid": "0c951d6f7db5707483d523fe8001262c88c4e6d4", "url": "https://github.com/linkedin/ambry/commit/0c951d6f7db5707483d523fe8001262c88c4e6d4", "message": "address comments", "committedDate": "2020-12-12T22:49:52Z", "type": "forcePushed"}, {"oid": "b959516fe1d4b50343a5f1689305c60e61684232", "url": "https://github.com/linkedin/ambry/commit/b959516fe1d4b50343a5f1689305c60e61684232", "message": "address comments", "committedDate": "2020-12-14T20:28:26Z", "type": "forcePushed"}, {"oid": "cf39b4c218913efb3d7b8ff91d6eb96778acd79b", "url": "https://github.com/linkedin/ambry/commit/cf39b4c218913efb3d7b8ff91d6eb96778acd79b", "message": "Add test", "committedDate": "2020-12-15T17:39:31Z", "type": "forcePushed"}, {"oid": "1090c8ee24df9c7c9670efce53841eb330711202", "url": "https://github.com/linkedin/ambry/commit/1090c8ee24df9c7c9670efce53841eb330711202", "message": "Host Level Throttling", "committedDate": "2020-12-16T00:10:23Z", "type": "commit"}, {"oid": "1090c8ee24df9c7c9670efce53841eb330711202", "url": "https://github.com/linkedin/ambry/commit/1090c8ee24df9c7c9670efce53841eb330711202", "message": "Host Level Throttling", "committedDate": "2020-12-16T00:10:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4MDU5OA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r544780598", "bodyText": "why is this inner json object converted to a string?\ni.e. {\"MEMORY\": \"{\\\"threshold\\\": 101}\"} instead of {\"MEMORY\": {\"threshold\": 101}}", "author": "cgtz", "createdAt": "2020-12-17T03:15:25Z", "path": "ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.config;\n+\n+import org.json.JSONObject;\n+\n+\n+/**\n+ * Config for Host Level Throttling.\n+ */\n+public class HostThrottleConfig {\n+  private static final String PREFIX = \"host.throttle.\";\n+  public static final String REST_REQUEST_QUOTA_STRING = PREFIX + \"rest.request.quota\";\n+  public static final String HARDWARE_THRESHOLDS = PREFIX + \"hardware.thresholds\";\n+  public static final String CPU_SAMPLING_PERIOD_MS = PREFIX + \"cpu.sampling.period.ms\";\n+  public static final String MEMORY_SAMPLING_PERIOD_MS = PREFIX + \"memory.sampling.period.ms\";\n+\n+  private static final String DEFAULT_REST_REQUEST_QUOTA_STRING = new JSONObject().put(\"PUT\", -1)\n+      .put(\"PUT\", -1)\n+      .put(\"GET\", -1)\n+      .put(\"POST\", -1)\n+      .put(\"HEAD\", -1)\n+      .put(\"OPTIONS\", -1)\n+      .put(\"DELETE\", -1)\n+      .put(\"UNKNOWN\", -1)\n+      .toString();\n+  /**\n+   * A better looking sample:\n+   *   {\n+   *   \"MEMORY\": {\n+   *     \"threshold\": 90,\n+   *     \"boundType\": \"UpperBound\"\n+   *   },\n+   *   \"CPU\": {\n+   *     \"threshold\": 95,\n+   *     \"boundType\": \"UpperBound\"\n+   *   }\n+   * }\n+   */\n+  private static final String DEFAULT_HARDWARE_THRESHOLDS_STRING =\n+      new JSONObject().put(\"MEMORY\", new JSONObject().put(\"threshold\", 101).put(\"boundType\", \"UpperBound\").toString())", "originalCommit": "1090c8ee24df9c7c9670efce53841eb330711202", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e7c94c50bd953d9a52c7d2c646294f540662ff", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java b/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java\nindex 98bb63eef..1c6d4dbf2 100644\n--- a/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java\n+++ b/ambry-api/src/main/java/com/github/ambry/config/HostThrottleConfig.java\n\n@@ -49,8 +49,8 @@ public class HostThrottleConfig {\n    * }\n    */\n   private static final String DEFAULT_HARDWARE_THRESHOLDS_STRING =\n-      new JSONObject().put(\"MEMORY\", new JSONObject().put(\"threshold\", 101).put(\"boundType\", \"UpperBound\").toString())\n-          .put(\"CPU\", new JSONObject().put(\"threshold\", 101).put(\"boundType\", \"UpperBound\").toString())\n+      new JSONObject().put(\"MEMORY\", new JSONObject().put(\"threshold\", 101).put(\"boundType\", \"UpperBound\"))\n+          .put(\"CPU\", new JSONObject().put(\"threshold\", 101).put(\"boundType\", \"UpperBound\"))\n           .toString();\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545298675", "bodyText": "Just a clarifying question: is maxMemory the sum of max heap size and max direct memory size?", "author": "cgtz", "createdAt": "2020-12-17T18:12:12Z", "path": "ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ */\n+package com.github.ambry.commons;\n+\n+import java.lang.management.BufferPoolMXBean;\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A class to report hardware usage.\n+ */\n+public class HardwareUsageMeter {\n+  private static final Logger logger = LoggerFactory.getLogger(HardwareUsageMeter.class);\n+  private AtomicLong cpuLastSampleTime = new AtomicLong(0);\n+  private final int cpuSamplingPeriodMs;\n+  private int cpuPercentage;\n+  private AtomicLong memoryLastSampleTime = new AtomicLong(0);\n+  private final int memorySamplingPeriodMs;\n+  private int memoryPercentage;\n+  private long maxMemory = Runtime.getRuntime().maxMemory();\n+  private BufferPoolMXBean directMemoryMxBean;\n+  private OperatingSystemMXBean osBean;\n+\n+  public HardwareUsageMeter(int cpuSamplingPeriodMs, int memorySamplingPeriodMs) {\n+    this.cpuSamplingPeriodMs = cpuSamplingPeriodMs;\n+    this.memorySamplingPeriodMs = memorySamplingPeriodMs;\n+\n+    List<BufferPoolMXBean> pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n+    directMemoryMxBean = pools.stream().filter(bean -> bean.getName().equals(\"direct\")).findFirst().orElse(null);\n+    if (directMemoryMxBean == null) {\n+      logger.error(\"Couldn't get directMemoryMxBean\");\n+    }\n+    osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n+  }\n+\n+  private int getCpuPercentage() {\n+    // In experiments, osBean.getSystemCpuLoad() takes 15-25 ms\n+    if (System.currentTimeMillis() <= cpuLastSampleTime.get() + cpuSamplingPeriodMs) {\n+      return cpuPercentage;\n+    }\n+    cpuPercentage = (int) (osBean.getSystemCpuLoad() * 100);\n+    cpuLastSampleTime.set(System.currentTimeMillis());\n+    logger.trace(\"CPU percentage: {}\", cpuPercentage);\n+    return cpuPercentage;\n+  }\n+\n+  private int getMemoryPercentage() {\n+    // In experiments, Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() takes 2-6ms\n+    // directMemoryMxBean.getMemoryUsed() takes 2-15ms\n+    if (System.currentTimeMillis() <= memoryLastSampleTime.get() + memorySamplingPeriodMs) {\n+      return memoryPercentage;\n+    }\n+    long usedHeapMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+    memoryPercentage = (int) ((usedHeapMemory + directMemoryMxBean.getMemoryUsed()) * 100 / maxMemory);", "originalCommit": "1090c8ee24df9c7c9670efce53841eb330711202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NjA2OA==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545396068", "bodyText": "Hi Casey,\nThe maxMemory is close to -Xmx, based on my test(1%-5% less).\nI assumed it's heap+direct memory. Because in our previous heap OOM, where 32GB Xmx was set, most of heap OOM's heap dump were much smaller than 32GB(12GB or 20GB). So I thought Xms includes heap + direct, then maxMemory should be the max for heap + direct.\nHowever, I double checked Xms option, it's heap only. This answer also states it doesn't include direct memory.\nI am confused now, if Xms is heap only, why our heap dumps are much less than 32GB?\n\nFor this PR, I can revise the code to return heap usage only in getMemoryPercentage(will be renamed to getHeapMemoryPercentage), and add getDirectMemoryPercentage in next PR(haven't got a good way to get max direct memory.)", "author": "zzmao", "createdAt": "2020-12-17T20:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxNzk3MQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545417971", "bodyText": "I'm not sure why our heap dumps are smaller. It could be the difference between a full heap dump that also includes yet-to-be garbage collected objects and a regular heap dump.", "author": "cgtz", "createdAt": "2020-12-17T21:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQyNDQ0Nw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545424447", "bodyText": "Found this: https://stackoverflow.com/questions/3773775/default-for-xxmaxdirectmemorysize\nlooks like our servers doesn't specify xxmaxdirectmemorysize so total allocation for heap+direct is 2*Runtime.getRuntime().maxMemory()", "author": "zzmao", "createdAt": "2020-12-17T21:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQyODIyNw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545428227", "bodyText": "I wonder if we could either read the property xxmaxdirectmemorysize or, if it is not set, use max heap size.\nWe do set this property on ambry-server to support in memory indexes, but likely not on ambry-frontend.", "author": "cgtz", "createdAt": "2020-12-17T21:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0ODQzNg==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545448436", "bodyText": "We could.\nsun.misc.VM.maxDirectMemory()\nIf xxmaxdirectmemorysize is not set, it returns the same value of Runtime.getRuntime().maxMemory(). If set, it returns the value of xxmaxdirectmemorysize.\nTested in my local, returned expected value.", "author": "zzmao", "createdAt": "2020-12-17T22:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ1MjQ3MQ==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545452471", "bodyText": "The only problem with sun packages is that they are private-ish (SDK internal) APIs, and there are problems accessing them in java 11: https://stackoverflow.com/questions/53543062/replace-access-to-sun-misc-vm-for-jdk-11", "author": "cgtz", "createdAt": "2020-12-17T22:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ2NTgwMg==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545465802", "bodyText": "@zzmao since our travis build is on java 11, it will fail when using sun.misc packages:\n/home/travis/build/linkedin/ambry/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java:40: error: package sun.misc does not exist\n  private long maxDirectMemory = sun.misc.VM.maxDirectMemory();\n                                         ^\nNote: /home/travis/build/linkedin/ambry/ambry-commons/src/main/java/com/github/ambry/commons/CommonUtils.java uses or overrides a deprecated API.\n\n\nJust saw your previous comment.\nWe could also parse the vm option:\nHotSpotDiagnosticMXBean hsdiag = ManagementFactory\n     .getPlatformMXBean(HotSpotDiagnosticMXBean.class);\nhsdiag.getVMOption(\"MaxDirectMemorySize\")", "author": "zzmao", "createdAt": "2020-12-17T23:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ2Nzg5Mw==", "url": "https://github.com/linkedin/ambry/pull/1699#discussion_r545467893", "bodyText": "Yeah maybe that's the best approach. If it is set, use the value of the vm option, if not set, use the heap size.", "author": "cgtz", "createdAt": "2020-12-17T23:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f38e1350f89e1a09ac0046282a9ed03f8867bacb", "chunk": "diff --git a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\nindex d12e1051a..85c717f97 100644\n--- a/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n+++ b/ambry-commons/src/main/java/com/github/ambry/commons/HardwareUsageMeter.java\n\n@@ -13,6 +13,7 @@\n  */\n package com.github.ambry.commons;\n \n+import com.sun.management.HotSpotDiagnosticMXBean;\n import java.lang.management.BufferPoolMXBean;\n import java.lang.management.ManagementFactory;\n import com.sun.management.OperatingSystemMXBean;\n"}}, {"oid": "66e7c94c50bd953d9a52c7d2c646294f540662ff", "url": "https://github.com/linkedin/ambry/commit/66e7c94c50bd953d9a52c7d2c646294f540662ff", "message": "Cgetz comment", "committedDate": "2020-12-17T20:12:01Z", "type": "commit"}, {"oid": "f38e1350f89e1a09ac0046282a9ed03f8867bacb", "url": "https://github.com/linkedin/ambry/commit/f38e1350f89e1a09ac0046282a9ed03f8867bacb", "message": "add direct memory detect", "committedDate": "2020-12-18T05:28:25Z", "type": "forcePushed"}, {"oid": "e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "url": "https://github.com/linkedin/ambry/commit/e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "message": "direct memory", "committedDate": "2020-12-18T05:59:47Z", "type": "commit"}, {"oid": "e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "url": "https://github.com/linkedin/ambry/commit/e2a30c6d4988d4e836c5ae352c91fe0374ab9fb5", "message": "direct memory", "committedDate": "2020-12-18T05:59:47Z", "type": "forcePushed"}]}