{"pr_number": 1689, "pr_title": "Support UTF-8 char set in buildUserMetadata method", "pr_createdAt": "2020-11-10T17:24:37Z", "pr_url": "https://github.com/linkedin/ambry/pull/1689", "timeline": [{"oid": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44", "url": "https://github.com/linkedin/ambry/commit/9fe50be9b3bcbeecbc06625c90b3b08362d6fe44", "message": "Support UTF-8 char set in buildUserMetadata method\n\nReplace ASCII char set with UTF-8 to support more characters (i.e Chinese characters) in the\nuser metadata.", "committedDate": "2020-11-10T17:21:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1Mzk1Nw==", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520753957", "bodyText": "I changed this because  String keyAlgo = Utils.readIntString(dataStream) in deserializeKeyRecord() is actually using UTF-8. (line 383)", "author": "jsjtzyy", "createdAt": "2020-11-10T17:47:55Z", "path": "ambry-router/src/main/java/com/github/ambry/router/GCMCryptoService.java", "diffHunk": "@@ -366,18 +366,17 @@ private static void serializeKeyRecord(ByteBuffer outputBuffer, byte[] key, Stri\n       outputBuffer.putShort(KEY_RECORD_VERSION_V_1);\n       outputBuffer.putInt(key.length);\n       outputBuffer.put(key);\n-      Utils.serializeString(outputBuffer, keyGenAlgo, StandardCharsets.US_ASCII);\n+      Utils.serializeString(outputBuffer, keyGenAlgo, StandardCharsets.UTF_8);", "originalCommit": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NjM1Nw==", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520756357", "bodyText": "I thought of one slight deployment issue with changing the charset without making a new user metadata version.\nIf you deploy this change to one frontend, a user could write a non-ascii value into user metadata, and the binary format will now store its real utf-8 value instead of a ? character.\nIf this blob's user metadata is fetched on a frontend without this change, that frontend will attempt to decode as ascii and a deserialization error will occur.\nHowever, this may be a negligible number of users affected and any problems will be resolved by completing the deployment, so maybe continuing with this approach and opting for a fast deployment is the easiest solution. Another option would be to make a user metadata v2 and a config to switch the version; then you could deploy read support for v2 and then switch on serialization in v2.", "author": "cgtz", "createdAt": "2020-11-10T17:51:39Z", "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "diffHunk": "@@ -443,12 +443,12 @@ public static BlobProperties buildBlobProperties(Map<String, Object> args) throw\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;", "originalCommit": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4ODQ1MQ==", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520788451", "bodyText": "Yeah, this is indeed a deployment issue as frontends can't be deployed simultaneously. The edge case only affects China team for now. I guess the impact should be very minimum.  (I agree introducing metadata v2 is theoretically the safest way to migrate from ascii to utf-8 smoothly, however we can tolerate the transient error as only one team is really building metadata with non-ascii character, we can coordinate with them when rolling out this change).", "author": "jsjtzyy", "createdAt": "2020-11-10T18:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NjM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9e5f34f4e7348416f14bd3b54ad62174ea4ef447", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java b/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\nindex fe422a46b..84962ea42 100644\n--- a/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\n+++ b/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\n\n@@ -443,12 +445,12 @@ public class RestUtils {\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;\n+          sizeToAllocate += keyToStore.getBytes(CHARSET).length;\n           String value = getHeader(args, key, true);\n           userMetadataMap.put(keyToStore, value);\n           // value size\n           sizeToAllocate += 4;\n-          sizeToAllocate += value.getBytes(StandardCharsets.UTF_8).length;\n+          sizeToAllocate += value.getBytes(CHARSET).length;\n         }\n       }\n       if (sizeToAllocate == 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDgxMg==", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520860812", "bodyText": "Can you make the Charset a class level constant?", "author": "lightningrob", "createdAt": "2020-11-10T20:41:36Z", "path": "ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java", "diffHunk": "@@ -443,12 +443,12 @@ public static BlobProperties buildBlobProperties(Map<String, Object> args) throw\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;\n           String value = getHeader(args, key, true);\n           userMetadataMap.put(keyToStore, value);\n           // value size\n           sizeToAllocate += 4;\n-          sizeToAllocate += value.getBytes(StandardCharsets.US_ASCII).length;\n+          sizeToAllocate += value.getBytes(StandardCharsets.UTF_8).length;", "originalCommit": "9fe50be9b3bcbeecbc06625c90b3b08362d6fe44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MzE1Mw==", "url": "https://github.com/linkedin/ambry/pull/1689#discussion_r520883153", "bodyText": "Sure, will do.", "author": "jsjtzyy", "createdAt": "2020-11-10T21:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "9e5f34f4e7348416f14bd3b54ad62174ea4ef447", "chunk": "diff --git a/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java b/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\nindex fe422a46b..84962ea42 100644\n--- a/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\n+++ b/ambry-api/src/main/java/com/github/ambry/rest/RestUtils.java\n\n@@ -443,12 +445,12 @@ public class RestUtils {\n           // key size\n           sizeToAllocate += 4;\n           String keyToStore = key.substring(Headers.USER_META_DATA_HEADER_PREFIX.length());\n-          sizeToAllocate += keyToStore.getBytes(StandardCharsets.UTF_8).length;\n+          sizeToAllocate += keyToStore.getBytes(CHARSET).length;\n           String value = getHeader(args, key, true);\n           userMetadataMap.put(keyToStore, value);\n           // value size\n           sizeToAllocate += 4;\n-          sizeToAllocate += value.getBytes(StandardCharsets.UTF_8).length;\n+          sizeToAllocate += value.getBytes(CHARSET).length;\n         }\n       }\n       if (sizeToAllocate == 0) {\n"}}, {"oid": "9e5f34f4e7348416f14bd3b54ad62174ea4ef447", "url": "https://github.com/linkedin/ambry/commit/9e5f34f4e7348416f14bd3b54ad62174ea4ef447", "message": "address comment", "committedDate": "2020-11-10T21:44:04Z", "type": "commit"}]}