{"pr_number": 8432, "pr_title": "SAK-44067: SAMIGO - Can't edit calculated questions with comma on the solution", "pr_createdAt": "2020-08-06T09:02:10Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8432", "timeline": [{"oid": "60ac6eaf3501c17e4f20c6300f3d51e399567dd9", "url": "https://github.com/sakaiproject/sakai/commit/60ac6eaf3501c17e4f20c6300f3d51e399567dd9", "message": "SAK-44067: SAMIGO - Can't edit calculated questions with comma on the solution", "committedDate": "2020-08-06T09:01:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMjY0Nw==", "url": "https://github.com/sakaiproject/sakai/pull/8432#discussion_r477512647", "bodyText": "Does the answer text always have a pipe separator? Do we need a length check on this array?", "author": "adrianfish", "createdAt": "2020-08-26T18:46:57Z", "path": "samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/ui/listener/author/ItemModifyListener.java", "diffHunk": "@@ -748,9 +748,11 @@ private void populateItemTextForCalculatedQuestion(ItemAuthorBean itemauthorbean\n               for (AnswerIfc answer : answers) {\n                   if (answer.getIsCorrect()) {\n                       String text = answer.getText();\n-                      String min = text.substring(0, text.indexOf(\"|\"));\n-                      String max = text.substring(text.indexOf(\"|\") + 1, text.indexOf(\",\"));\n-                      String decimalPlaces = text.substring(text.indexOf(\",\") + 1);              \n+                      String[] partsText = text.split(\"\\\\|\");\n+                      String min = partsText[0];", "originalCommit": "60ac6eaf3501c17e4f20c6300f3d51e399567dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94b7ee9fce2d35d614b0a83c83cf37bee8551bda", "chunk": "diff --git a/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/ui/listener/author/ItemModifyListener.java b/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/ui/listener/author/ItemModifyListener.java\nindex 2c341a5be7..68f5e048a1 100644\n--- a/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/ui/listener/author/ItemModifyListener.java\n+++ b/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/ui/listener/author/ItemModifyListener.java\n\n@@ -736,58 +736,75 @@ public class ItemModifyListener implements ActionListener\n   }\n \n   private void populateItemTextForCalculatedQuestion(ItemAuthorBean itemauthorbean, ItemFacade itemfacade, ItemBean bean) {\n-      CalculatedQuestionBean calcQuestionBean = new CalculatedQuestionBean();\n-      String instructions = itemfacade.getInstruction();\n-      GradingService gs = new GradingService();\n-      List<String> variables = gs.extractVariables(instructions);\n-      List<ItemTextIfc> list = itemfacade.getItemTextArray();\n-      for (ItemTextIfc itemBean : list) {\n-          if (variables.contains(itemBean.getText())) {\n-              CalculatedQuestionVariableBean variable = new CalculatedQuestionVariableBean();\n-              List<AnswerIfc> answers = itemBean.getAnswerArray();\n-              for (AnswerIfc answer : answers) {\n-                  if (answer.getIsCorrect()) {\n-                      String text = answer.getText();\n-                      String[] partsText = text.split(\"\\\\|\");\n-                      String min = partsText[0];\n-                      String[] partsMaxDp = partsText[1].split(\",\");\n-                      String max = partsMaxDp[0];\n-                      String decimalPlaces = partsMaxDp[1];\n-                      variable.setName(itemBean.getText());\n-                      variable.setSequence(itemBean.getSequence());\n-                      variable.setMin(min);\n-                      variable.setMax(max);\n-                      variable.setDecimalPlaces(decimalPlaces);\n-                      calcQuestionBean.addVariable(variable);\n-                      break;\n-                  }\n+\n+    CalculatedQuestionBean calcQuestionBean = new CalculatedQuestionBean();\n+    String instructions = itemfacade.getInstruction();\n+    GradingService gs = new GradingService();\n+    List<String> variables = gs.extractVariables(instructions);\n+    List<ItemTextIfc> list = itemfacade.getItemTextArray();\n+    for (ItemTextIfc itemBean : list) {\n+      if (variables.contains(itemBean.getText())) {\n+        CalculatedQuestionVariableBean variable = new CalculatedQuestionVariableBean();\n+        List<AnswerIfc> answers = itemBean.getAnswerArray();\n+        for (AnswerIfc answer : answers) {\n+          if (answer.getIsCorrect()) {\n+            String text = answer.getText();\n+            variable.setName(itemBean.getText());\n+            variable.setSequence(itemBean.getSequence());\n+            String[] partsText = text.split(\"\\\\|\");\n+            if (partsText != null && partsText.length == 2) {\n+              String min = partsText[0];\n+              variable.setMin(min);\n+              String[] partsMaxDp = partsText[1].split(\",\");\n+              if (partsMaxDp != null && partsMaxDp.length == 2) {\n+                String max = partsMaxDp[0];\n+                variable.setMax(max);\n+                String decimalPlaces = partsMaxDp[1];\n+                variable.setDecimalPlaces(decimalPlaces);\n+              } else {\n+                log.error(\"Calculated question answer text {} is not formatted correctly.\", text);\n               }\n-          } else {\n-              CalculatedQuestionFormulaBean formula = new CalculatedQuestionFormulaBean();\n-              List<AnswerIfc> answers = itemBean.getAnswerArray();\n-              for (AnswerIfc answer : answers) {\n-                  if (answer.getIsCorrect()) {\n-                      String text = answer.getText();\n-                      String[] partsText = text.split(\"\\\\|\");\n-                      String formulaStr = partsText[0];\n-                      String[] partsTolDp = partsText[1].split(\",\");\n-                      String tolerance = partsTolDp[0];\n-                      String decimalPlaces = partsTolDp[1];\n-                      formula.setName(itemBean.getText());\n-                      formula.setSequence(itemBean.getSequence());\n-                      formula.setText(formulaStr);\n-                      formula.setTolerance(tolerance);\n-                      formula.setDecimalPlaces(decimalPlaces);\n-                      calcQuestionBean.addFormula(formula);\n-                      break;\n-                  }\n+            } else {\n+              log.error(\"Calculated question answer text {} is not formatted correctly.\", text);\n+            }\n+            calcQuestionBean.addVariable(variable);\n+            break;\n+          }\n+        }\n+      } else {\n+        CalculatedQuestionFormulaBean formula = new CalculatedQuestionFormulaBean();\n+        List<AnswerIfc> answers = itemBean.getAnswerArray();\n+        for (AnswerIfc answer : answers) {\n+          if (answer.getIsCorrect()) {\n+            String text = answer.getText();\n+            formula.setName(itemBean.getText());\n+            formula.setSequence(itemBean.getSequence());\n+            String[] partsText = text.split(\"\\\\|\");\n+            if (partsText != null && partsText.length == 2) {\n+              String formulaStr = partsText[0];\n+              formula.setText(formulaStr);\n+              String[] partsTolDp = partsText[1].split(\",\");\n+              if (partsTolDp != null && partsTolDp.length == 2) {\n+                String tolerance = partsTolDp[0];\n+                formula.setTolerance(tolerance);\n+                String decimalPlaces = partsTolDp[1];\n+                formula.setDecimalPlaces(decimalPlaces);\n+              } else {\n+                log.error(\"Calculated question answer text {} is not formatted correctly.\", text);\n               }\n+            } else {\n+              log.error(\"Calculated question answer text {} is not formatted correctly.\", text);\n+            }\n+            calcQuestionBean.addFormula(formula);\n+            break;\n           }\n+        }\n       }\n-      // extract the calculation formulas and populate the calcQuestionBean (we are ignoring the error returns for now)\n-      CalculatedQuestionExtractListener.createCalculationsFromInstructions(calcQuestionBean, instructions, gs);\n-      CalculatedQuestionExtractListener.validateCalculations(calcQuestionBean, gs);\n-      bean.setCalculatedQuestion(calcQuestionBean);\n+    }\n+    // extract the calculation formulas and populate the calcQuestionBean (we are ignoring the error returns for now)\n+    CalculatedQuestionExtractListener.createCalculationsFromInstructions(calcQuestionBean, instructions, gs);\n+    CalculatedQuestionExtractListener.validateCalculations(calcQuestionBean, gs);\n+    bean.setCalculatedQuestion(calcQuestionBean);\n   }\n   \n   private void populateItemTextForImageMapQuestion(ItemAuthorBean itemauthorbean, ItemFacade itemfacade, ItemBean bean)  {\n"}}, {"oid": "94b7ee9fce2d35d614b0a83c83cf37bee8551bda", "url": "https://github.com/sakaiproject/sakai/commit/94b7ee9fce2d35d614b0a83c83cf37bee8551bda", "message": "Added some protection for null arrays", "committedDate": "2020-08-28T12:33:28Z", "type": "commit"}]}