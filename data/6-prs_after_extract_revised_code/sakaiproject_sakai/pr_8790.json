{"pr_number": 8790, "pr_title": "SAK-44305 Messages > Save Draft > Recipient not Saved", "pr_createdAt": "2020-11-06T13:08:50Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8790", "timeline": [{"oid": "461671bf52d938021a97673d0ed80c2a85d0da5f", "url": "https://github.com/sakaiproject/sakai/commit/461671bf52d938021a97673d0ed80c2a85d0da5f", "message": "SAK-44305 Messages > Save Draft > Recipient not Saved", "committedDate": "2020-11-06T12:09:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518913705", "bodyText": "minor comment public is redundant on an interface", "author": "ern", "createdAt": "2020-11-06T17:57:58Z", "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "originalCommit": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxNjY0Mw==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518916643", "bodyText": "Personally, I prefer to see it stated explicitly, but this is opinionated.", "author": "bjones86", "createdAt": "2020-11-06T18:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjQxMw==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518922413", "bodyText": "It's redundant!", "author": "ern", "createdAt": "2020-11-06T18:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzU0Ng==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518947546", "bodyText": "It's actually not redundant. From the official Java tutorial: \"The public access specifier indicates that the interface can be used by any class in any package. If you do not specify that the interface is public, then your interface is accessible only to classes defined in the same package as the interface.\"", "author": "plukasew", "createdAt": "2020-11-06T19:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzOTM5NQ==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r519839395", "bodyText": "The JLS has it as a practice that is both redundant and discouraged, see:\nhttps://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.4\nEvery method declaration in the body of an interface is implicitly public (\u00a76.6). It is permitted, but discouraged as a matter of style, to redundantly specify the public modifier for a method declaration in an interface.", "author": "ern", "createdAt": "2020-11-09T14:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MTcwNQ==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r519841705", "bodyText": "I see, you're talking about methods and I was talking about the interface itself. I'll keep that in mind. Originally this file was a class, and will become a class again after I revise this PR.", "author": "plukasew", "createdAt": "2020-11-09T14:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0OTU2Mg==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r519849562", "bodyText": "\ud83d\udc4d  Thanks Paul", "author": "ern", "createdAt": "2020-11-09T14:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ed103b4b6cbf16eb2a0879f858722483411fd56", "chunk": "diff --git a/msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java b/msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java\nindex 130ea557a0..fd69a177e7 100644\n--- a/msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java\n+++ b/msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java\n\n@@ -1,32 +1,95 @@\n package org.sakaiproject.api.app.messageforums;\n \n+import javax.persistence.*;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.hibernate.annotations.ColumnDefault;\n+\n /**\n  * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n  * It can be thought of as a more compact version of MembershipItem.\n  *\n  * @author plukasew\n  */\n-public interface DraftRecipient\n+@Entity @Table(name = \"MFR_DRAFT_RECIPIENT_T\", indexes = { @Index(name = \"MFR_DRAFT_REC_MSG_ID_I\", columnList = \"DRAFT_ID\" ) } )\n+@NamedQuery(name = \"findDraftRecipientsByMessageId\", query = \"from DraftRecipient d where d.draftId = :id\")\n+@Getter @Setter\n+public class DraftRecipient\n {\n \tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";\n \n-\tpublic Long getId();\n-\n-\tpublic void setId(Long id);\n-\n-\tpublic int getType();\n-\n-\tpublic void setType(int value);\n+\t@Id @Column(name = \"ID\")\n+\t@GeneratedValue(strategy = GenerationType.AUTO, generator = \"draft_recipient_sequence\")\n+    @SequenceGenerator(name = \"draft_recipient_sequence\", sequenceName = \"MFR_DRAFT_RECIPIENT_S\")\n+\tprivate Long id;\n \n-\tpublic String getRecipientId();\n+\t@Column(name = \"TYPE\", nullable = false)\n+\tprivate int type; // we borrow the types from MembershipItem\n \n-\tpublic void setRecipientId(String value);\n+\t@Column(name = \"RECIPIENT_ID\", nullable = false)\n+\tprivate String recipientId;\n+\t\n+\t@Column(name = \"DRAFT_ID\", nullable = false)\n+\tprivate long draftId;\n+\t\n+\t@Column(name = \"BCC\", nullable = false) @ColumnDefault(\"0\")\n+\tprivate boolean bcc;\n \n-\tpublic long getDraftId();\n+\tpublic DraftRecipient()\n+\t{\n+\t\ttype = MembershipItem.TYPE_NOT_SPECIFIED;\n+\t\trecipientId = \"\";\n+\t\tdraftId = -1L;\n+\t\tbcc = false;\n+\t}\n \n-\tpublic void setDraftId(long value);\n+\tpublic static DraftRecipient from(MembershipItem item, long draftMsgId, boolean bcc)\n+\t{\n+\t\tDraftRecipient dr = new DraftRecipient();\n+\t\tdr.draftId = draftMsgId;\n+\t\tdr.bcc = bcc;\n+\t\tint type = item.getType();\n+\t\tdr.type = type;\n+\t\tswitch(type)\n+\t\t{\n+\t\t\tcase MembershipItem.TYPE_ALL_PARTICIPANTS:\n+\t\t\t\tdr.recipientId = DraftRecipient.ALL_PARTICIPANTS_ID;\n+\t\t\t\tbreak;\n+\t\t\tcase MembershipItem.TYPE_ROLE:\n+\t\t\t\tif (item.getRole() != null)\n+\t\t\t\t{\n+\t\t\t\t\tdr.recipientId = item.getRole().getId();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase MembershipItem.TYPE_GROUP:\n+\t\t\tcase MembershipItem.TYPE_MYGROUPS:\n+\t\t\t\tif (item.getGroup() != null)\n+\t\t\t\t{\n+\t\t\t\t\tdr.recipientId = item.getGroup().getId();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase MembershipItem.TYPE_USER:\n+\t\t\tcase MembershipItem.TYPE_MYGROUPMEMBERS:\n+\t\t\t\tif (item.getUser() != null)\n+\t\t\t\t{\n+\t\t\t\t\tdr.recipientId = item.getUser().getId();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase MembershipItem.TYPE_MYGROUPROLES:\n+\t\t\t\t// we need to store both group and role ids\n+\t\t\t\tif (item.getGroup() != null && item.getRole() != null)\n+\t\t\t\t{\n+\t\t\t\t\tdr.recipientId = item.getGroup().getId() + \"+++\" + item.getRole().getId();\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t}\n \n-\tpublic boolean isBcc();\n+\t\tif (dr.recipientId.isEmpty())\n+\t\t{\n+\t\t\tdr.type = MembershipItem.TYPE_NOT_SPECIFIED;\n+\t\t}\n \n-\tpublic void setBcc(boolean value);\n+\t\treturn dr;\n+\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxNzA3OA==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518917078", "bodyText": "minor this can be further shortened removing intermediate vars:\nreturn getHibernateTemplate().execute(session -> session.getNamedQuery(\"findDraftRecipientsByMessageId\")\n           .setParameter()\n          .list();", "author": "ern", "createdAt": "2020-11-06T18:04:25Z", "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java", "diffHunk": "@@ -2091,4 +2092,28 @@ public List findMovedHistoryByMessageId(final Long messageid){\n \n \t}\n \n+\t@Override\n+\tpublic void saveDraftRecipients(long msgId, List<DraftRecipient> recipients) {\n+\t\tfor (DraftRecipient dr : recipients) {\n+\t\t\tgetHibernateTemplate().persist(dr);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic List<DraftRecipient> findDraftRecipientsByMessageId(long msgId) {\n+\t\tHibernateCallback<List> hcb = session -> {", "originalCommit": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ed103b4b6cbf16eb2a0879f858722483411fd56", "chunk": "diff --git a/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java b/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java\nindex 47c38634cf..01a9159a1b 100644\n--- a/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java\n+++ b/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java\n\n@@ -2101,13 +2101,8 @@ public class MessageForumsMessageManagerImpl extends HibernateDaoSupport impleme\n \n \t@Override\n \tpublic List<DraftRecipient> findDraftRecipientsByMessageId(long msgId) {\n-\t\tHibernateCallback<List> hcb = session -> {\n-\t\t\tQuery q = session.getNamedQuery(\"findDraftRecipientsByMessageId\");\n-\t\t\tq.setParameter(\"id\", msgId, LongType.INSTANCE);\n-\t\t\treturn q.list();\n-\t\t};\n-\n-\t\treturn getHibernateTemplate().execute(hcb);\n+\t\treturn getHibernateTemplate().execute(session -> session.getNamedQuery(\"findDraftRecipientsByMessageId\"))\n+\t\t\t\t.setParameter(\"id\", msgId, LongType.INSTANCE).list();\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjA2Nw==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518922067", "bodyText": "POJO's have little need for an interface and an impl move this to the interface and make it class", "author": "ern", "createdAt": "2020-11-06T18:14:13Z", "path": "msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipientImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.sakaiproject.component.app.messageforums.dao.hibernate;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.sakaiproject.api.app.messageforums.DraftRecipient;\n+import org.sakaiproject.api.app.messageforums.MembershipItem;\n+\n+@Getter @Setter\n+public class DraftRecipientImpl implements DraftRecipient", "originalCommit": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODcyOQ==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518948729", "bodyText": "I was just following the pattern used in the rest of the tool, but I agree so I'll change it.", "author": "plukasew", "createdAt": "2020-11-06T19:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1ed103b4b6cbf16eb2a0879f858722483411fd56", "chunk": "diff --git a/msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipientImpl.java b/msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipientImpl.java\ndeleted file mode 100644\nindex 5c246ead9e..0000000000\n--- a/msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipientImpl.java\n+++ /dev/null\n\n@@ -1,73 +0,0 @@\n-package org.sakaiproject.component.app.messageforums.dao.hibernate;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.sakaiproject.api.app.messageforums.DraftRecipient;\n-import org.sakaiproject.api.app.messageforums.MembershipItem;\n-\n-@Getter @Setter\n-public class DraftRecipientImpl implements DraftRecipient\n-{\n-\tprivate Long id;\n-\tprivate int type; // we borrow the types from MembershipItem\n-\tprivate String recipientId;\n-\tprivate long draftId;\n-\tprivate boolean bcc;\n-\n-\tpublic DraftRecipientImpl()\n-\t{\n-\t\ttype = MembershipItem.TYPE_NOT_SPECIFIED;\n-\t\trecipientId = \"\";\n-\t\tdraftId = -1L;\n-\t\tbcc = false;\n-\t}\n-\n-\tpublic static DraftRecipientImpl from(MembershipItem item, long draftMsgId, boolean bcc)\n-\t{\n-\t\tDraftRecipientImpl dr = new DraftRecipientImpl();\n-\t\tdr.draftId = draftMsgId;\n-\t\tdr.bcc = bcc;\n-\t\tint type = item.getType();\n-\t\tdr.type = type;\n-\t\tswitch(type)\n-\t\t{\n-\t\t\tcase MembershipItem.TYPE_ALL_PARTICIPANTS:\n-\t\t\t\tdr.recipientId = DraftRecipient.ALL_PARTICIPANTS_ID;\n-\t\t\t\tbreak;\n-\t\t\tcase MembershipItem.TYPE_ROLE:\n-\t\t\t\tif (item.getRole() != null)\n-\t\t\t\t{\n-\t\t\t\t\tdr.recipientId = item.getRole().getId();\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase MembershipItem.TYPE_GROUP:\n-\t\t\tcase MembershipItem.TYPE_MYGROUPS:\n-\t\t\t\tif (item.getGroup() != null)\n-\t\t\t\t{\n-\t\t\t\t\tdr.recipientId = item.getGroup().getId();\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase MembershipItem.TYPE_USER:\n-\t\t\tcase MembershipItem.TYPE_MYGROUPMEMBERS:\n-\t\t\t\tif (item.getUser() != null)\n-\t\t\t\t{\n-\t\t\t\t\tdr.recipientId = item.getUser().getId();\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase MembershipItem.TYPE_MYGROUPROLES:\n-\t\t\t\t// we need to store both group and role ids\n-\t\t\t\tif (item.getGroup() != null && item.getRole() != null)\n-\t\t\t\t{\n-\t\t\t\t\tdr.recipientId = item.getGroup().getId() + \"+++\" + item.getRole().getId();\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\tif (dr.recipientId.isEmpty())\n-\t\t{\n-\t\t\tdr.type = MembershipItem.TYPE_NOT_SPECIFIED;\n-\t\t}\n-\n-\t\treturn dr;\n-\t}\n-}\n"}}, {"oid": "1ed103b4b6cbf16eb2a0879f858722483411fd56", "url": "https://github.com/sakaiproject/sakai/commit/1ed103b4b6cbf16eb2a0879f858722483411fd56", "message": "SAK-44305 switch to JPA", "committedDate": "2020-11-10T13:42:40Z", "type": "commit"}, {"oid": "1ed103b4b6cbf16eb2a0879f858722483411fd56", "url": "https://github.com/sakaiproject/sakai/commit/1ed103b4b6cbf16eb2a0879f858722483411fd56", "message": "SAK-44305 switch to JPA", "committedDate": "2020-11-10T13:42:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5NzIwNw==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r529697207", "bodyText": "Is this always adding a new transient DraftRecipient? if not will need to use merge", "author": "ern", "createdAt": "2020-11-24T16:12:45Z", "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java", "diffHunk": "@@ -2091,4 +2092,23 @@ public List findMovedHistoryByMessageId(final Long messageid){\n \n \t}\n \n+\t@Override\n+\tpublic void saveDraftRecipients(long msgId, List<DraftRecipient> recipients) {\n+\t\tfor (DraftRecipient dr : recipients) {\n+\t\t\tgetHibernateTemplate().persist(dr);", "originalCommit": "1ed103b4b6cbf16eb2a0879f858722483411fd56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNTE2MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r529705161", "bodyText": "Confirmed with Paul: when the draft is saved or the message is sent, the old rows are deleted and the new rows are added, so persist() is appropriate here. Thanks, @ern!", "author": "bjones86", "createdAt": "2020-11-24T16:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5NzIwNw=="}], "type": "inlineReview", "revised_code": null}]}