{"pr_number": 8796, "pr_title": "SAK-44638: Bugs fixes for SAK-42856: Message destination error", "pr_createdAt": "2020-11-09T12:41:02Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8796", "timeline": [{"oid": "b3177d9515e9bbe51c839ab46f77a78a9cc9e86f", "url": "https://github.com/sakaiproject/sakai/commit/b3177d9515e9bbe51c839ab46f77a78a9cc9e86f", "message": "SAK-44638: Bugs fixes for SAK-42856: Message destination error", "committedDate": "2020-11-09T12:36:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r525246667", "bodyText": "Why are we switching to DES here?", "author": "ern", "createdAt": "2020-11-17T15:27:16Z", "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/ui/PrivateMessageManagerImpl.java", "diffHunk": "@@ -2269,15 +2270,15 @@ public void processPvtMsgReplySentAction(PrivateMessage currentMessage, PrivateM\n   private String encrypt(String value) {\n \t  try {\n \t\t  IvParameterSpec iv = new IvParameterSpec(INIT_VECTOR.getBytes(StandardCharsets.UTF_8));\n-\t\t  String key = serverConfigurationService.getString(\"msgcntr.no.reply.secret\", \"1111111111111111\");\n-\t\t  SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"AES\");\n+\t\t  String key = serverConfigurationService.getString(\"msgcntr.no.reply.secret\", \"11111111\");\n+\t\t  SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"DES\");", "originalCommit": "b3177d9515e9bbe51c839ab46f77a78a9cc9e86f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2NTI0Mw==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r525265243", "bodyText": "let's use serverName as the default instead of 111111", "author": "ottenhoff", "createdAt": "2020-11-17T15:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNzM3OQ==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r528607379", "bodyText": "The RFC specification for email addresses states that the local part of the address cannot exceed 64 characters.  For this reason, if we use an AES algorithm, because it requires at least 16 characters for its key and its seed, the encryption that returns when it is converted to hexadecimal and the mail identification header is added, it can sometimes exceed those 64 characters.\nFor this reason we have changed the encryption algorithm as DES uses 8 characters for the key and the seed, generating more manageable values for the local part of the email address.\nRegarding the key, it must have 8 characters.  It can not be used serverName because it will have a variable length depending on the client that uses it.  When enabling this functionality, the necessary property must be enabled and, therefore, this \"msgcntr.no.reply.secret\" can also be enabled in default.sakai.properties.  However, this value \"11111111\" is defined by default in case you have not enabled the property \"msgcntr.no.reply.secret\".", "author": "victorGomollon", "createdAt": "2020-11-23T10:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5MzQwNw==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r530193407", "bodyText": "I think we cannot use the serverName by default because in cluster environments this value will be different for each instance so you will have to decrypt the key in the same instance you use for create it.\nOn the other hand you cannot use AES and remove characters to fit to 64 bytes because later you won't be able to decrypt the key.", "author": "juanjmerono", "createdAt": "2020-11-25T08:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0MzIxOQ==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r530443219", "bodyText": "serverName should be identical across all nodes in a cluster.\nI think using one central secret is fine, e.g., \"sakai.encryption.secret\" and then we can use it in other places like BasicLTI", "author": "ottenhoff", "createdAt": "2020-11-25T15:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg3OTAyNw==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r530879027", "bodyText": "\ud83e\udd14 Sorry I was thinking in serverId, anyway using a common secret make sense to me, but you still have to use a \"default\" value for an OOTB install. Maybe using serverConfigurationService.getString(\"sakai.encryption.secret\") and adding a default value '111111' in kernel.properties is a better solution?", "author": "juanjmerono", "createdAt": "2020-11-26T09:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4OTYwOQ==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r533489609", "bodyText": "@ottenhoff  .... could you take a look on this?", "author": "SedueRey", "createdAt": "2020-12-01T15:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5MTcwMg==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r533491702", "bodyText": "This is what makes most sense to me:\nserverConfigurationService.getString(\"sakai.encryption.secret\", serverConfigurationService.getServerName())", "author": "ottenhoff", "createdAt": "2020-12-01T15:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5NDIxMw==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r533494213", "bodyText": "Thanks, @ottenhoff \ud83d\udc4d :) ... I'm going to talk to @victorGomollon", "author": "SedueRey", "createdAt": "2020-12-01T15:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjY2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b8fb41b84b500885a2ae7f92873b5e1ec123aea1", "chunk": "diff --git a/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/ui/PrivateMessageManagerImpl.java b/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/ui/PrivateMessageManagerImpl.java\nindex 870a110f81..0d3bda1833 100644\n--- a/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/ui/PrivateMessageManagerImpl.java\n+++ b/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/ui/PrivateMessageManagerImpl.java\n\n@@ -2270,7 +2270,7 @@ return topicTypeUuid;\n   private String encrypt(String value) {\n \t  try {\n \t\t  IvParameterSpec iv = new IvParameterSpec(INIT_VECTOR.getBytes(StandardCharsets.UTF_8));\n-\t\t  String key = serverConfigurationService.getString(\"msgcntr.no.reply.secret\", \"11111111\");\n+\t\t  String key = serverConfigurationService.getString(\"msgcntr.no.reply.secret\", serverConfigurationService.getServerName());\n \t\t  SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"DES\");\n \n \t\t  Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5PADDING\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2NjYyMg==", "url": "https://github.com/sakaiproject/sakai/pull/8796#discussion_r525266622", "bodyText": "Please move this mailSupport variable to line 193 ...... and then it can be removed from line 203", "author": "ottenhoff", "createdAt": "2020-11-17T15:45:50Z", "path": "mailarchive/mailarchive-subetha/src/java/org/sakaiproject/mailarchive/SakaiMessageHandlerFactory.java", "diffHunk": "@@ -185,7 +187,25 @@ public void recipient(String to) throws RejectException {\n                 if (StringUtils.isNotBlank(fromReply) && to.startsWith(serverConfigurationService.getString(FROM_REPLY, StringUtils.EMPTY))) {\n                     isMessageId = true;\n                     String id = to.replace(serverConfigurationService.getString(FROM_REPLY), StringUtils.EMPTY).split(\"@\")[0];\n-                    currentMessage = synopticMsgcntrManager.getPvtMessageManager().getPrivateMessage(id);\n+                    try {\n+                        currentMessage = synopticMsgcntrManager.getPvtMessageManager().getPrivateMessage(id);\n+                    } catch (MessagingException me) {\n+                        if (me.getMessage().startsWith(MESSAGE_ERROR_521)) {\n+                            // BOUNCE REPLY - send a message back to the user to let them know their email failed\n+                            String errMsg = rb.getString(\"mail.support.521\") + \"\\n\\n\";\n+                            String mailSupport = StringUtils.trimToNull(serverConfigurationService.getString(\"mail.support\"));", "originalCommit": "b3177d9515e9bbe51c839ab46f77a78a9cc9e86f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8debb5f584a8f5a47e772f4125eaff90dadcba5a", "chunk": "diff --git a/mailarchive/mailarchive-subetha/src/java/org/sakaiproject/mailarchive/SakaiMessageHandlerFactory.java b/mailarchive/mailarchive-subetha/src/java/org/sakaiproject/mailarchive/SakaiMessageHandlerFactory.java\nindex b2c1ea822b..74f3effcf0 100644\n--- a/mailarchive/mailarchive-subetha/src/java/org/sakaiproject/mailarchive/SakaiMessageHandlerFactory.java\n+++ b/mailarchive/mailarchive-subetha/src/java/org/sakaiproject/mailarchive/SakaiMessageHandlerFactory.java\n\n@@ -190,17 +190,16 @@ public class SakaiMessageHandlerFactory implements MessageHandlerFactory {\n                     try {\n                         currentMessage = synopticMsgcntrManager.getPvtMessageManager().getPrivateMessage(id);\n                     } catch (MessagingException me) {\n+                    \tString mailSupport = StringUtils.trimToNull(serverConfigurationService.getString(\"mail.support\"));\n                         if (me.getMessage().startsWith(MESSAGE_ERROR_521)) {\n                             // BOUNCE REPLY - send a message back to the user to let them know their email failed\n                             String errMsg = rb.getString(\"mail.support.521\") + \"\\n\\n\";\n-                            String mailSupport = StringUtils.trimToNull(serverConfigurationService.getString(\"mail.support\"));\n                             if (StringUtils.isNotBlank(mailSupport)) {\n                                 errMsg += rb.getFormattedMessage(\"err_questions\", mailSupport) + \"\\n\";\n                             }\n                             throw new RejectException(Integer.parseInt(MESSAGE_ERROR_521), errMsg);\n                         }\n                         String errMsg = rb.getString(\"mail.support.421\") + \"\\n\\n\";\n-                        String mailSupport = StringUtils.trimToNull(serverConfigurationService.getString(\"mail.support\"));\n                         if (StringUtils.isNotBlank(mailSupport)) {\n                             errMsg += rb.getFormattedMessage(\"err_questions\", mailSupport) + \"\\n\";\n                         }\n"}}, {"oid": "8debb5f584a8f5a47e772f4125eaff90dadcba5a", "url": "https://github.com/sakaiproject/sakai/commit/8debb5f584a8f5a47e772f4125eaff90dadcba5a", "message": "SAK-44638: Resolved Issues", "committedDate": "2020-11-20T07:56:48Z", "type": "commit"}, {"oid": "b8fb41b84b500885a2ae7f92873b5e1ec123aea1", "url": "https://github.com/sakaiproject/sakai/commit/b8fb41b84b500885a2ae7f92873b5e1ec123aea1", "message": "SAK-44638: Resolved issues", "committedDate": "2020-12-01T15:55:26Z", "type": "commit"}, {"oid": "dea5968446add5d9c68caf025f7ebbc8c80a2fd8", "url": "https://github.com/sakaiproject/sakai/commit/dea5968446add5d9c68caf025f7ebbc8c80a2fd8", "message": "SAK-44638: Midified name properties", "committedDate": "2020-12-01T16:08:38Z", "type": "commit"}]}