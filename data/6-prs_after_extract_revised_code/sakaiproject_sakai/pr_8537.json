{"pr_number": 8537, "pr_title": "SAK-43610: samigo > time exceptions > add validation to time limit", "pr_createdAt": "2020-09-08T19:02:14Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8537", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNDI5Mw==", "url": "https://github.com/sakaiproject/sakai/pull/8537#discussion_r485134293", "bodyText": "This is the newly introduced validation routine.", "author": "bjones86", "createdAt": "2020-09-08T19:02:49Z", "path": "samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/util/ExtendedTimeValidator.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/**\n+ * Copyright (c) 2005-2020 The Apereo Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *             http://opensource.org/licenses/ecl2\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.sakaiproject.tool.assessment.util;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.faces.application.FacesMessage;\n+import javax.faces.context.FacesContext;\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import org.sakaiproject.tool.assessment.data.dao.assessment.ExtendedTime;\n+import org.sakaiproject.tool.assessment.data.ifc.assessment.AssessmentAccessControlIfc;\n+import org.sakaiproject.tool.assessment.ui.bean.author.AssessmentSettingsBean;\n+import org.sakaiproject.tool.assessment.ui.bean.author.PublishedAssessmentSettingsBean;\n+import org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil;\n+\n+/**\n+ * Centralized extended time validator:\n+ * - name or group must be supplied\n+ * - due date can't be before now, or before start date\n+ * - retract date can't be before now, or before start date\n+ * - retract date can't be before due date; auto pushed to due date\n+ * - due date can't be the same as start date\n+ * - open window can't be less than time limit\n+ *\n+ * @author bjones86\n+ */\n+public class ExtendedTimeValidator\n+{\n+    public static final String ERROR_KEY_USER_OR_GROUP_NOT_SET        = \"extended_time_user_and_group_set\";\n+    public static final String ERROR_KEY_DUE_BEFORE_START             = \"extended_time_due_earlier_than_available\";\n+    public static final String ERROR_KEY_RETRACT_BEFORE_START         = \"extended_time_retract_earlier_than_available\";\n+    public static final String ERROR_KEY_DUE_SAME_AS_START            = \"extended_time_due_same_as_available\";\n+    public static final String ERROR_KEY_OPEN_WINDOW_LESS_THAN_LIMIT  = \"extended_time_open_window_less_than_time_limit\";\n+    public static final String ERROR_KEY_USER_SUBSTRING               = \"extended_time_error_user\";\n+    public static final String ERROR_KEY_GROUP_SUBSTRING              = \"extended_time_error_group\";\n+\n+    public static final String MSG_KEY_AND            = \"extended_time_and\";\n+    public static final String MSG_KEY_DUP_USERS      = \"extended_time_duplicate_users\";\n+    public static final String MSG_KEY_DUP_GROUPS     = \"extended_time_duplicate_groups\";\n+    public static final String MSG_KEY_NAME_NOT_FOUND = \"extended_time_name_not_found\";\n+\n+    public static final String ASSESSMENT_SETTINGS_BUNDLE = \"org.sakaiproject.tool.assessment.bundle.AssessmentSettingsMessages\";\n+\n+    private static Object settingsBean;\n+\n+    /**\n+     * Validate a single {@link ExtendedTime} entry.\n+     * @param entry the {@link ExtendedTime} entry to validate\n+     * @param context The {@link FacesContext}, in case validation errors are generated\n+     * @param settings The SettingsBean, for quiz settings (either {@link AssessmentSettingsBean} or {@link PublishedAssessmentSettingsBean})\n+     * @return true if all entities are valid; false otherwise.\n+     */\n+    public static boolean validateEntry( ExtendedTime entry, FacesContext context, Object settings )\n+    {\n+        List<ExtendedTime> entries = new ArrayList<>( 1 );\n+        entries.add( entry );\n+        return validateEntries( entries, context , settings );\n+    }\n+\n+    /**\n+     * Validate a list of {@link ExtendedTime} entries.\n+     * @param entries The {@link ExtendedTime} entries to validate\n+     * @param context The {@link FacesContext}, in case validation errors are generated\n+     * @param settings The SettingsBean, for quiz settings (either {@link AssessmentSettingsBean} or {@link PublishedAssessmentSettingsBean})\n+     * @return true if all entities are valid; false otherwise.\n+     */\n+    public static boolean validateEntries( List<ExtendedTime> entries, FacesContext context, Object settings )\n+    {\n+        boolean valid = true;\n+        settingsBean = settings;\n+        List<String> users = new ArrayList<>( entries.size() );\n+        List<String> groups = new ArrayList<>( entries.size() );\n+        for( ExtendedTime entry : entries )\n+        {\n+            String user = entry.getUser();\n+            String group = entry.getGroup();\n+            Date startDate = entry.getStartDate();\n+            Date dueDate = entry.getDueDate();\n+            Date retractDate = entry.getRetractDate();\n+\n+            if( StringUtils.isNotEmpty( user ) )\n+            {\n+                users.add( user );\n+            }\n+\n+            if( StringUtils.isNotEmpty( group ) )\n+            {\n+                groups.add( group );\n+            }\n+\n+            // Name & group validation\n+            if( StringUtils.isBlank( user ) && StringUtils.isBlank( group ) )\n+            {\n+                String errorMsg = getError( ERROR_KEY_USER_OR_GROUP_NOT_SET, entry );\n+                context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                valid = false;\n+            }\n+\n+            // Due date can't be before now, or before start date\n+            if( (startDate != null && dueDate != null && dueDate.before( startDate ))\n+                || (startDate == null && dueDate != null && dueDate.before( new Date() )) )\n+            {\n+                String errorMsg = getError( ERROR_KEY_DUE_BEFORE_START, entry );\n+                context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                entry.setStartDate( new Date() );\n+                valid = false;\n+            }\n+\n+            boolean isEntryRetractEarlierThanAvailable = false;\n+            if( StringUtils.equals( getLateHandling(), AssessmentAccessControlIfc.ACCEPT_LATE_SUBMISSION.toString() ) )\n+            {\n+                // Retract date can't be before now, or before start date\n+                if( (retractDate != null && startDate != null && retractDate.before( startDate ))\n+                    || (retractDate != null && startDate == null && retractDate.before( new Date() )) )\n+                {\n+                    String errorMsg = getError( ERROR_KEY_RETRACT_BEFORE_START, entry );\n+                    context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                    entry.setStartDate( new Date() );\n+                    isEntryRetractEarlierThanAvailable = true;\n+                    valid = false;\n+                }\n+\n+                // Retract date can't be before due date; push it to the due date\n+                if( !isEntryRetractEarlierThanAvailable && (retractDate != null && dueDate != null && retractDate.before( dueDate )) )\n+                {\n+                    entry.setRetractDate( dueDate );\n+                }\n+            }\n+\n+            // Due date can't be the same as start date\n+            if( dueDate != null && startDate != null && dueDate.equals( startDate ) )\n+            {\n+                String errorMsg = getError( ERROR_KEY_DUE_SAME_AS_START, entry );\n+                context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                valid = false;\n+            }\n+\n+            // If time limit is set, ensure open window is not less than the time limit\n+            boolean hasTimer = (entry.getTimeHours() != null && entry.getTimeHours() > 0) || (entry.getTimeMinutes() != null && entry.getTimeMinutes() > 0);\n+            if (hasTimer)\n+            {\n+                Date due = entry.getRetractDate() != null ? entry.getRetractDate() : entry.getDueDate();\n+                long timerMinutes = 0;\n+                if( entry.getTimeHours() != null )\n+                {\n+                    timerMinutes += entry.getTimeHours().longValue() * 60;\n+                }\n+                if( entry.getTimeMinutes() != null )\n+                {\n+                    timerMinutes += entry.getTimeMinutes().longValue();\n+                }\n+\n+                long openWindowMinutes = (due.getTime() - entry.getStartDate().getTime()) / 1000 / 60;\n+                if( openWindowMinutes < timerMinutes )\n+                {\n+                    String errorString = getError( ERROR_KEY_OPEN_WINDOW_LESS_THAN_LIMIT, entry );\n+                    context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorString, null ) );\n+                    valid = false;\n+                }\n+            }\n+        }", "originalCommit": "51997deee5952aa6d7172833e4b62d5465e24fd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "686f2519171ada6b418c2b32bd5d23d815f47fbf", "chunk": "diff --git a/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/util/ExtendedTimeValidator.java b/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/util/ExtendedTimeValidator.java\nindex 569deb8c70..02f024314f 100644\n--- a/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/util/ExtendedTimeValidator.java\n+++ b/samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/util/ExtendedTimeValidator.java\n\n@@ -18,6 +18,7 @@ package org.sakaiproject.tool.assessment.util;\n \n import java.text.MessageFormat;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n"}}, {"oid": "686f2519171ada6b418c2b32bd5d23d815f47fbf", "url": "https://github.com/sakaiproject/sakai/commit/686f2519171ada6b418c2b32bd5d23d815f47fbf", "message": "SAK-43610: samigo > time exceptions > add validation to time limit", "committedDate": "2020-09-08T19:10:51Z", "type": "commit"}, {"oid": "686f2519171ada6b418c2b32bd5d23d815f47fbf", "url": "https://github.com/sakaiproject/sakai/commit/686f2519171ada6b418c2b32bd5d23d815f47fbf", "message": "SAK-43610: samigo > time exceptions > add validation to time limit", "committedDate": "2020-09-08T19:10:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMTYyMA==", "url": "https://github.com/sakaiproject/sakai/pull/8537#discussion_r485231620", "bodyText": "i occassionally see instructors choose both user and group .... does it make sense to just assume that they mean one user and ignore the group selection ?", "author": "ottenhoff", "createdAt": "2020-09-08T22:33:48Z", "path": "samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/util/ExtendedTimeValidator.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/**\n+ * Copyright (c) 2005-2020 The Apereo Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *             http://opensource.org/licenses/ecl2\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.sakaiproject.tool.assessment.util;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.faces.application.FacesMessage;\n+import javax.faces.context.FacesContext;\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import org.sakaiproject.tool.assessment.data.dao.assessment.ExtendedTime;\n+import org.sakaiproject.tool.assessment.data.ifc.assessment.AssessmentAccessControlIfc;\n+import org.sakaiproject.tool.assessment.ui.bean.author.AssessmentSettingsBean;\n+import org.sakaiproject.tool.assessment.ui.bean.author.PublishedAssessmentSettingsBean;\n+import org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil;\n+\n+/**\n+ * Centralized extended time validator:\n+ * - name or group must be supplied\n+ * - due date can't be before now, or before start date\n+ * - retract date can't be before now, or before start date\n+ * - retract date can't be before due date; auto pushed to due date\n+ * - due date can't be the same as start date\n+ * - open window can't be less than time limit\n+ *\n+ * @author bjones86\n+ */\n+public class ExtendedTimeValidator\n+{\n+    public static final String ERROR_KEY_USER_OR_GROUP_NOT_SET        = \"extended_time_user_and_group_set\";\n+    public static final String ERROR_KEY_DUE_BEFORE_START             = \"extended_time_due_earlier_than_available\";\n+    public static final String ERROR_KEY_RETRACT_BEFORE_START         = \"extended_time_retract_earlier_than_available\";\n+    public static final String ERROR_KEY_DUE_SAME_AS_START            = \"extended_time_due_same_as_available\";\n+    public static final String ERROR_KEY_OPEN_WINDOW_LESS_THAN_LIMIT  = \"extended_time_open_window_less_than_time_limit\";\n+    public static final String ERROR_KEY_USER_SUBSTRING               = \"extended_time_error_user\";\n+    public static final String ERROR_KEY_GROUP_SUBSTRING              = \"extended_time_error_group\";\n+\n+    public static final String MSG_KEY_AND            = \"extended_time_and\";\n+    public static final String MSG_KEY_DUP_USERS      = \"extended_time_duplicate_users\";\n+    public static final String MSG_KEY_DUP_GROUPS     = \"extended_time_duplicate_groups\";\n+    public static final String MSG_KEY_NAME_NOT_FOUND = \"extended_time_name_not_found\";\n+\n+    public static final String ASSESSMENT_SETTINGS_BUNDLE = \"org.sakaiproject.tool.assessment.bundle.AssessmentSettingsMessages\";\n+\n+    private static Object settingsBean;\n+\n+    /**\n+     * Validate a single {@link ExtendedTime} entry.\n+     * @param entry the {@link ExtendedTime} entry to validate\n+     * @param context The {@link FacesContext}, in case validation errors are generated\n+     * @param settings The SettingsBean, for quiz settings (either {@link AssessmentSettingsBean} or {@link PublishedAssessmentSettingsBean})\n+     * @return true if all entities are valid; false otherwise.\n+     */\n+    public static boolean validateEntry( ExtendedTime entry, FacesContext context, Object settings )\n+    {\n+        return validateEntries( Collections.singletonList( entry ), context , settings );\n+    }\n+\n+    /**\n+     * Validate a list of {@link ExtendedTime} entries.\n+     * @param entries The {@link ExtendedTime} entries to validate\n+     * @param context The {@link FacesContext}, in case validation errors are generated\n+     * @param settings The SettingsBean, for quiz settings (either {@link AssessmentSettingsBean} or {@link PublishedAssessmentSettingsBean})\n+     * @return true if all entities are valid; false otherwise.\n+     */\n+    public static boolean validateEntries( List<ExtendedTime> entries, FacesContext context, Object settings )\n+    {\n+        boolean valid = true;\n+        settingsBean = settings;\n+        List<String> users = new ArrayList<>( entries.size() );\n+        List<String> groups = new ArrayList<>( entries.size() );\n+        for( ExtendedTime entry : entries )\n+        {\n+            String user = entry.getUser();\n+            String group = entry.getGroup();\n+            Date startDate = entry.getStartDate();\n+            Date dueDate = entry.getDueDate();\n+            Date retractDate = entry.getRetractDate();\n+\n+            if( StringUtils.isNotEmpty( user ) )\n+            {\n+                users.add( user );\n+            }\n+\n+            if( StringUtils.isNotEmpty( group ) )", "originalCommit": "686f2519171ada6b418c2b32bd5d23d815f47fbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwODM2Mg==", "url": "https://github.com/sakaiproject/sakai/pull/8537#discussion_r485608362", "bodyText": "This is the original logic. In my testing, you can still select either a user, or a group, or a user and a group.", "author": "bjones86", "createdAt": "2020-09-09T13:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMTYyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMjY3Nw==", "url": "https://github.com/sakaiproject/sakai/pull/8537#discussion_r485232677", "bodyText": "wow this is a lot of lifting for duplicates!", "author": "ottenhoff", "createdAt": "2020-09-08T22:36:40Z", "path": "samigo/samigo-app/src/java/org/sakaiproject/tool/assessment/util/ExtendedTimeValidator.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/**\n+ * Copyright (c) 2005-2020 The Apereo Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *             http://opensource.org/licenses/ecl2\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.sakaiproject.tool.assessment.util;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.faces.application.FacesMessage;\n+import javax.faces.context.FacesContext;\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import org.sakaiproject.tool.assessment.data.dao.assessment.ExtendedTime;\n+import org.sakaiproject.tool.assessment.data.ifc.assessment.AssessmentAccessControlIfc;\n+import org.sakaiproject.tool.assessment.ui.bean.author.AssessmentSettingsBean;\n+import org.sakaiproject.tool.assessment.ui.bean.author.PublishedAssessmentSettingsBean;\n+import org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil;\n+\n+/**\n+ * Centralized extended time validator:\n+ * - name or group must be supplied\n+ * - due date can't be before now, or before start date\n+ * - retract date can't be before now, or before start date\n+ * - retract date can't be before due date; auto pushed to due date\n+ * - due date can't be the same as start date\n+ * - open window can't be less than time limit\n+ *\n+ * @author bjones86\n+ */\n+public class ExtendedTimeValidator\n+{\n+    public static final String ERROR_KEY_USER_OR_GROUP_NOT_SET        = \"extended_time_user_and_group_set\";\n+    public static final String ERROR_KEY_DUE_BEFORE_START             = \"extended_time_due_earlier_than_available\";\n+    public static final String ERROR_KEY_RETRACT_BEFORE_START         = \"extended_time_retract_earlier_than_available\";\n+    public static final String ERROR_KEY_DUE_SAME_AS_START            = \"extended_time_due_same_as_available\";\n+    public static final String ERROR_KEY_OPEN_WINDOW_LESS_THAN_LIMIT  = \"extended_time_open_window_less_than_time_limit\";\n+    public static final String ERROR_KEY_USER_SUBSTRING               = \"extended_time_error_user\";\n+    public static final String ERROR_KEY_GROUP_SUBSTRING              = \"extended_time_error_group\";\n+\n+    public static final String MSG_KEY_AND            = \"extended_time_and\";\n+    public static final String MSG_KEY_DUP_USERS      = \"extended_time_duplicate_users\";\n+    public static final String MSG_KEY_DUP_GROUPS     = \"extended_time_duplicate_groups\";\n+    public static final String MSG_KEY_NAME_NOT_FOUND = \"extended_time_name_not_found\";\n+\n+    public static final String ASSESSMENT_SETTINGS_BUNDLE = \"org.sakaiproject.tool.assessment.bundle.AssessmentSettingsMessages\";\n+\n+    private static Object settingsBean;\n+\n+    /**\n+     * Validate a single {@link ExtendedTime} entry.\n+     * @param entry the {@link ExtendedTime} entry to validate\n+     * @param context The {@link FacesContext}, in case validation errors are generated\n+     * @param settings The SettingsBean, for quiz settings (either {@link AssessmentSettingsBean} or {@link PublishedAssessmentSettingsBean})\n+     * @return true if all entities are valid; false otherwise.\n+     */\n+    public static boolean validateEntry( ExtendedTime entry, FacesContext context, Object settings )\n+    {\n+        return validateEntries( Collections.singletonList( entry ), context , settings );\n+    }\n+\n+    /**\n+     * Validate a list of {@link ExtendedTime} entries.\n+     * @param entries The {@link ExtendedTime} entries to validate\n+     * @param context The {@link FacesContext}, in case validation errors are generated\n+     * @param settings The SettingsBean, for quiz settings (either {@link AssessmentSettingsBean} or {@link PublishedAssessmentSettingsBean})\n+     * @return true if all entities are valid; false otherwise.\n+     */\n+    public static boolean validateEntries( List<ExtendedTime> entries, FacesContext context, Object settings )\n+    {\n+        boolean valid = true;\n+        settingsBean = settings;\n+        List<String> users = new ArrayList<>( entries.size() );\n+        List<String> groups = new ArrayList<>( entries.size() );\n+        for( ExtendedTime entry : entries )\n+        {\n+            String user = entry.getUser();\n+            String group = entry.getGroup();\n+            Date startDate = entry.getStartDate();\n+            Date dueDate = entry.getDueDate();\n+            Date retractDate = entry.getRetractDate();\n+\n+            if( StringUtils.isNotEmpty( user ) )\n+            {\n+                users.add( user );\n+            }\n+\n+            if( StringUtils.isNotEmpty( group ) )\n+            {\n+                groups.add( group );\n+            }\n+\n+            // Name & group validation\n+            if( StringUtils.isBlank( user ) && StringUtils.isBlank( group ) )\n+            {\n+                String errorMsg = getError( ERROR_KEY_USER_OR_GROUP_NOT_SET, entry );\n+                context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                valid = false;\n+            }\n+\n+            // Due date can't be before now, or before start date\n+            if( (startDate != null && dueDate != null && dueDate.before( startDate ))\n+                || (startDate == null && dueDate != null && dueDate.before( new Date() )) )\n+            {\n+                String errorMsg = getError( ERROR_KEY_DUE_BEFORE_START, entry );\n+                context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                entry.setStartDate( new Date() );\n+                valid = false;\n+            }\n+\n+            boolean isEntryRetractEarlierThanAvailable = false;\n+            if( StringUtils.equals( getLateHandling(), AssessmentAccessControlIfc.ACCEPT_LATE_SUBMISSION.toString() ) )\n+            {\n+                // Retract date can't be before now, or before start date\n+                if( (retractDate != null && startDate != null && retractDate.before( startDate ))\n+                    || (retractDate != null && startDate == null && retractDate.before( new Date() )) )\n+                {\n+                    String errorMsg = getError( ERROR_KEY_RETRACT_BEFORE_START, entry );\n+                    context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                    entry.setStartDate( new Date() );\n+                    isEntryRetractEarlierThanAvailable = true;\n+                    valid = false;\n+                }\n+\n+                // Retract date can't be before due date; push it to the due date\n+                if( !isEntryRetractEarlierThanAvailable && (retractDate != null && dueDate != null && retractDate.before( dueDate )) )\n+                {\n+                    entry.setRetractDate( dueDate );\n+                }\n+            }\n+\n+            // Due date can't be the same as start date\n+            if( dueDate != null && startDate != null && dueDate.equals( startDate ) )\n+            {\n+                String errorMsg = getError( ERROR_KEY_DUE_SAME_AS_START, entry );\n+                context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorMsg, null ) );\n+                valid = false;\n+            }\n+\n+            // If time limit is set, ensure open window is not less than the time limit\n+            boolean hasTimer = (entry.getTimeHours() != null && entry.getTimeHours() > 0) || (entry.getTimeMinutes() != null && entry.getTimeMinutes() > 0);\n+            if (hasTimer)\n+            {\n+                Date due = entry.getRetractDate() != null ? entry.getRetractDate() : entry.getDueDate();\n+                long timerMinutes = 0;\n+                if( entry.getTimeHours() != null )\n+                {\n+                    timerMinutes += entry.getTimeHours().longValue() * 60;\n+                }\n+                if( entry.getTimeMinutes() != null )\n+                {\n+                    timerMinutes += entry.getTimeMinutes().longValue();\n+                }\n+\n+                long openWindowMinutes = (due.getTime() - entry.getStartDate().getTime()) / 1000 / 60;\n+                if( openWindowMinutes < timerMinutes )\n+                {\n+                    String errorString = getError( ERROR_KEY_OPEN_WINDOW_LESS_THAN_LIMIT, entry );\n+                    context.addMessage( null, new FacesMessage( FacesMessage.SEVERITY_WARN, errorString, null ) );\n+                    valid = false;\n+                }\n+            }\n+        }\n+\n+        // Check for duplicate users\n+        Set<String> duplicateUsers = findDuplicates(users);\n+        if( !duplicateUsers.isEmpty() )\n+        {\n+            String dupUsers = \"\";\n+            int count = 0;\n+            int end = users.size();\n+            for( String entry : duplicateUsers )\n+            {\n+                if( count == 0 )\n+                {\n+                    dupUsers = \"'\" + getUserName( entry ) + \"'\";\n+                }\n+                else if( count < (end - 1) )\n+                {\n+                    dupUsers = dupUsers + \", '\" + getUserName( entry ) + \"'\";\n+                }\n+                else\n+                {\n+                    String and = ContextUtil.getLocalizedString( ASSESSMENT_SETTINGS_BUNDLE, MSG_KEY_AND );\n+                    dupUsers = dupUsers + \", \" + and + \" '\" + getUserName( entry );", "originalCommit": "686f2519171ada6b418c2b32bd5d23d815f47fbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwODczNQ==", "url": "https://github.com/sakaiproject/sakai/pull/8537#discussion_r485608735", "bodyText": "Yeah I didn't write most of this code. Some could certainly be improved but I tried not to touch original logic.", "author": "bjones86", "createdAt": "2020-09-09T13:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMjY3Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6420fc260493f27055113d5bb12c7f9e15847f56", "url": "https://github.com/sakaiproject/sakai/commit/6420fc260493f27055113d5bb12c7f9e15847f56", "message": "SAK-43610: don't overwrite errors boolean if all exceptions are valid", "committedDate": "2020-09-09T13:31:55Z", "type": "commit"}]}