{"pr_number": 8884, "pr_title": "SAK-44763 - Improve URL matching on CC import", "pr_createdAt": "2020-12-09T20:55:30Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8884", "timeline": [{"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587", "url": "https://github.com/sakaiproject/sakai/commit/9d80e37d35be38467e437df3fd3b1a87d4421587", "message": "SAK-44763 - Improve URL matching on CC import", "committedDate": "2020-12-09T20:52:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r539643396", "bodyText": "If you have a nice URL object, then just re-create it from the URL \ud83d\udc4d\nnew URI(uri.getScheme(),\nuri.getAuthority(),\nuri.getPath(),\nnull, // Ignore query\nuri.getFragment()).toString();", "author": "ottenhoff", "createdAt": "2020-12-09T20:59:41Z", "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "originalCommit": "9d80e37d35be38467e437df3fd3b1a87d4421587", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0NDc3MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r539644771", "bodyText": "I really wanted to find a StringUtils that did this :(", "author": "csev", "createdAt": "2020-12-09T21:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjM4Nw==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r540426387", "bodyText": "Sam - I just want this to be a string match.  I don't want a bunch of conditional code with ports, etc.", "author": "csev", "createdAt": "2020-12-10T19:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyOTA4Nw==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r540429087", "bodyText": "ok ...... I prefer using the nice URL object because URLs are complex.... but string matching is fine if you know what the URL looks like", "author": "ottenhoff", "createdAt": "2020-12-10T19:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyOTMxMA==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r540429310", "bodyText": "for example, is the fragment ever used or important ?", "author": "ottenhoff", "createdAt": "2020-12-10T19:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4Nzg2Mg==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543487862", "bodyText": "It looks like org.apache.http.client.utils.URIBuilder does this?\n    URIBuilder uriBuilder = new URIBuilder(url);\n    uriBuilder.removeQuery();\n\n    return uriBuilder.build().toString();\n\nhttps://stackoverflow.com/a/54032843/3708872\nThere's some other ideas near the top for just using URI like the top answer which seems like what @ottenhoff suggests https://stackoverflow.com/a/27267375/3708872", "author": "jonespm", "createdAt": "2020-12-15T16:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MjAzNw==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543492037", "bodyText": "yeah but i'm understanding chuck's concern from the phone call: the URL can't change at all because it's part of the hash..... so putting the URL through any type of processing doesn't make sense.", "author": "ottenhoff", "createdAt": "2020-12-15T16:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNjUzOQ==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543736539", "bodyText": "I took Matt's suggestion, wrapped in a really cranky unit test - and the URIBuilder code passed with flying colors.   It handles al the things I expected it to handle and then some.  I think it tweaked less than a URL processor because URIs are more strings than URLs - but they do know how to pitch a query string.  So that turned out nicely.", "author": "csev", "createdAt": "2020-12-15T22:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3b0701b75a829648b9ae9452497ba3928f103a54", "chunk": "diff --git a/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java b/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java\nindex 9bcc7ac07c..4f4ae8c620 100644\n--- a/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java\n+++ b/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java\n\n@@ -2749,27 +2749,21 @@ public class SakaiBLTIUtil {\n \t\treturn retval;\n \t}\n \n-\t// TODO: Move this into SakaiBLTIUtil\n-\tpublic static Map<String, Object> findBestToolMatch(String launchUrl, List<Map<String,Object>> tools)\n+\tpublic static Map<String, Object> findBestToolMatch(boolean global, String launchUrl, List<Map<String,Object>> tools)\n \t{\n-\t\t// First we look for a local tool with an exact match\n-\t\tfor ( Map<String,Object> tool : tools ) {\n-\t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n-\t\t\tString toolSite = (String) tool.get(LTIService.LTI_SITE_ID);\n-\t\t\tif ( StringUtils.stripToNull(toolSite) == null ) continue;\n-\t\t\tif ( launchUrl != null && launchUrl.equals(toolLaunch) ) {\n-\t\t\t\tlog.debug(\"Matched exact local tool {}={}\", launchUrl, toolLaunch);\n-\t\t\t\treturn tool;\n-\t\t\t}\n-\t\t}\n+\t\tboolean local = ! global;  // Makes it easier to read :)\n \n-\t\t// Next we look for a global tool with an exact match\n+\t\t// First we look for a tool with an exact match\n \t\tfor ( Map<String,Object> tool : tools ) {\n \t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n \t\t\tString toolSite = (String) tool.get(LTIService.LTI_SITE_ID);\n-\t\t\tif ( StringUtils.stripToNull(toolSite) != null ) continue;\n+\n+\t\t\tif ( local && StringUtils.stripToNull(toolSite) == null ) continue;\n+\t\t\tif ( global && StringUtils.stripToNull(toolSite) != null ) continue;\n+\n \t\t\tif ( launchUrl != null && launchUrl.equals(toolLaunch) ) {\n-\t\t\t\tlog.debug(\"Matched exact global tool {}={}\", launchUrl, toolLaunch);\n+\t\t\t\tlog.debug(\"Matched exact tool {}={}\", launchUrl, toolLaunch);\n+\t\t\t\t// System.out.println(\"Matched exact tool\");\n \t\t\t\treturn tool;\n \t\t\t}\n \t\t}\n"}}, {"oid": "3b0701b75a829648b9ae9452497ba3928f103a54", "url": "https://github.com/sakaiproject/sakai/commit/3b0701b75a829648b9ae9452497ba3928f103a54", "message": "SAK-44763 - Change priority to all local first, unit test", "committedDate": "2020-12-10T15:49:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3Njc5MA==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543476790", "bodyText": "use log.debug much better than System.out", "author": "ern", "createdAt": "2020-12-15T16:06:53Z", "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,120 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;\n+\t\t// Next we snip off the query string\n+\t\tString retval = urlString;\n+\t\tint pos = retval.indexOf('?');\n+\t\tif ( pos > 1 ) {\n+\t\t\tretval = retval.substring(0,pos);\n+\t\t}\n+\t\treturn retval;\n+\t}\n+\n+\tpublic static Map<String, Object> findBestToolMatch(boolean global, String launchUrl, List<Map<String,Object>> tools)\n+\t{\n+\t\tboolean local = ! global;  // Makes it easier to read :)\n+\n+\t\t// First we look for a tool with an exact match\n+\t\tfor ( Map<String,Object> tool : tools ) {\n+\t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n+\t\t\tString toolSite = (String) tool.get(LTIService.LTI_SITE_ID);\n+\n+\t\t\tif ( local && StringUtils.stripToNull(toolSite) == null ) continue;\n+\t\t\tif ( global && StringUtils.stripToNull(toolSite) != null ) continue;\n+\n+\t\t\tif ( launchUrl != null && launchUrl.equals(toolLaunch) ) {\n+\t\t\t\tlog.debug(\"Matched exact tool {}={}\", launchUrl, toolLaunch);\n+\t\t\t\t// System.out.println(\"Matched exact tool\");", "originalCommit": "3b0701b75a829648b9ae9452497ba3928f103a54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MzY2NA==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543493664", "bodyText": "OK", "author": "csev", "createdAt": "2020-12-15T16:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3Njc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNzMyNA==", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543737324", "bodyText": "There were just a few - they are gone now - thanks.", "author": "csev", "createdAt": "2020-12-15T22:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3Njc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "abbdc45291472386fd8722eb24ca8dc816d72828", "chunk": "diff --git a/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java b/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java\nindex 4f4ae8c620..6d99ccd691 100644\n--- a/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java\n+++ b/basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java\n\n@@ -2740,13 +2741,13 @@ public class SakaiBLTIUtil {\n \tpublic static String stripOffQuery(String urlString)\n \t{\n \t\tif ( urlString == null ) return null;\n-\t\t// Next we snip off the query string\n-\t\tString retval = urlString;\n-\t\tint pos = retval.indexOf('?');\n-\t\tif ( pos > 1 ) {\n-\t\t\tretval = retval.substring(0,pos);\n+\t\ttry {\n+\t\t\tURIBuilder uriBuilder = new URIBuilder(urlString);\n+\t\t\turiBuilder.removeQuery();\n+\t\t\treturn uriBuilder.build().toString();\n+\t\t} catch(java.net.URISyntaxException e) {\n+\t\t\treturn null;\n \t\t}\n-\t\treturn retval;\n \t}\n \n \tpublic static Map<String, Object> findBestToolMatch(boolean global, String launchUrl, List<Map<String,Object>> tools)\n"}}, {"oid": "abbdc45291472386fd8722eb24ca8dc816d72828", "url": "https://github.com/sakaiproject/sakai/commit/abbdc45291472386fd8722eb24ca8dc816d72828", "message": "SAK-44763 - Use URIBuilder to remove the query\n\nPer Matt Jones.", "committedDate": "2020-12-15T22:31:29Z", "type": "commit"}, {"oid": "42045f2e5066932581806c415b6377b9d94f4999", "url": "https://github.com/sakaiproject/sakai/commit/42045f2e5066932581806c415b6377b9d94f4999", "message": "SAK-44763 - Remove System.out.println per Earle", "committedDate": "2020-12-15T22:36:20Z", "type": "commit"}]}