{"pr_number": 8270, "pr_title": "SAK-43238 Embedded Announcement block in Lessons display order", "pr_createdAt": "2020-06-04T21:21:04Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8270", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDA3MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r437520071", "bodyText": "Use newer logging lingo (slf4j) log.debug", "author": "ern", "createdAt": "2020-06-09T15:26:23Z", "path": "announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java", "diffHunk": "@@ -243,6 +257,29 @@ public String getEntityPrefix() {\n \t\t\tlog.debug(\"announcements.size(): {}\", announcements.size());\n \t\t}\n \t\t\n+\t\tif (AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder)) {\n+\t\t\ttry {\n+\t\t\t\tList<AnnouncementWrapper> messageList = new ArrayList<>();\n+\t\t\t\tAnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n+\t\t\t\tfor (Message msg : announcements) {\n+\t\t\t\t\tAnnouncementChannel curChannel = (AnnouncementChannel) announcementService.getChannel(msg.getReference().replace(\"msg\", \"channel\").replaceAll(\"main/(.*)\", \"main\"));\n+\t\t\t\t\tmessageList.add(new AnnouncementWrapper((AnnouncementMessage) msg, curChannel, defaultChannel, null, null));\n+\t\t\t\t}\n+\t\t\t\tSortedIterator<AnnouncementWrapper> rvSorted = new SortedIterator<>(messageList.iterator(), new AnnouncementWrapperComparator(sortCurrentOrder, announcementSortAsc));\n+\t\t\t\t\n+\t\t\t\tList<Message> subrv = new ArrayList();\n+\t\t\t\tfor (int index = 0; index < announcements.size(); index++) {\n+\t\t\t\t\tsubrv.add(rvSorted.next());\n+\t\t\t\t}\n+\t\t\t\tannouncements = subrv;\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif(log.isDebugEnabled()) {", "originalCommit": "944c49c2b0d044a08b1fbac35c0629af1f709476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTc3NQ==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r437755775", "bodyText": "there are many places in this class using log.isDebugEnabled().  I'd guess we'd want to keep it similar to how the rest of the file checks if debug is enabled?  or did you mean change log.warn() to log.debug()?", "author": "austin48", "createdAt": "2020-06-09T22:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d52786f88ce1f81e5b73ecb4a8597159bb4258a9", "chunk": "diff --git a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\nindex 4e18b3584a..664964a012 100644\n--- a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n+++ b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n\n@@ -227,59 +230,51 @@ public class AnnouncementEntityProviderImpl extends AbstractEntityProvider imple\n \t\t//get the announcements for each channel\n \t\tList<Message> announcements = new ArrayList<Message>();\n \t\t\n-\t\tboolean enableReorder = ComponentManager.get(ServerConfigurationService.class).getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n+\t\tboolean enableReorder = serverConfigurationService.getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n \t\tString sortCurrentOrder = AnnouncementAction.SORT_DATE;\n \t\tif (enableReorder){\n \t\t\tsortCurrentOrder = AnnouncementAction.SORT_MESSAGE_ORDER;\n \t\t}\n-\t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null:new ViewableFilter(null, t, numberOfAnnouncements);\n-\t\t\n-\t\t//for each channel\n-\t\tfor(String channel: channels) {\n-\t\t\ttry {\n-\t\t\t\tannouncements.addAll(announcementService.getMessages(channel, msgFilter, announcementSortAsc, false));\n-\t\t\t} catch (PermissionException | IdUnusedException | NullPointerException ex) {\n-\t\t\t\t//user may not have access to view the channel but get all public messages in this channel\n-\t\t\t\tAnnouncementChannel announcementChannel = (AnnouncementChannel)announcementService.getChannelPublic(channel);\n-\t\t\t\tif(announcementChannel != null){\n-\t\t\t\t\tList<Message> publicMessages = announcementChannel.getMessagesPublic(null, true);\n-\t\t\t\t\tfor(Message message : publicMessages){\n-\t\t\t\t\t\t//Add message only if it is within the time range\n-\t\t\t\t\t\tif(isMessageWithinPastNDays(message, numberOfDaysInThePast) && announcementService.isMessageViewable((AnnouncementMessage) message)){\n-\t\t\t\t\t\t\tannouncements.add(message);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(log.isDebugEnabled()) {\n-\t\t\tlog.debug(\"announcements.size(): {}\", announcements.size());\n-\t\t}\n+\t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null : new ViewableFilter(null, t, numberOfAnnouncements);\n \t\t\n \t\tif (AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder)) {\n \t\t\ttry {\n \t\t\t\tList<AnnouncementWrapper> messageList = new ArrayList<>();\n-\t\t\t\tAnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n+\t\t\t\tfinal AnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n \t\t\t\tfor (Message msg : announcements) {\n \t\t\t\t\tAnnouncementChannel curChannel = (AnnouncementChannel) announcementService.getChannel(msg.getReference().replace(\"msg\", \"channel\").replaceAll(\"main/(.*)\", \"main\"));\n \t\t\t\t\tmessageList.add(new AnnouncementWrapper((AnnouncementMessage) msg, curChannel, defaultChannel, null, null));\n \t\t\t\t}\n-\t\t\t\tSortedIterator<AnnouncementWrapper> rvSorted = new SortedIterator<>(messageList.iterator(), new AnnouncementWrapperComparator(sortCurrentOrder, announcementSortAsc));\n-\t\t\t\t\n-\t\t\t\tList<Message> subrv = new ArrayList();\n-\t\t\t\tfor (int index = 0; index < announcements.size(); index++) {\n-\t\t\t\t\tsubrv.add(rvSorted.next());\n-\t\t\t\t}\n-\t\t\t\tannouncements = subrv;\n+\t\t\t\tComparator<AnnouncementWrapper> sortedAnnouncements = new AnnouncementWrapperComparator(sortCurrentOrder, announcementSortAsc);\n+\t\t\t\tmessageList.sort(sortedAnnouncements);\n+\t\t\t\tannouncements.addAll(messageList);\n \t\t\t} catch (Exception e) {\n-\t\t\t\tif(log.isDebugEnabled()) {\n-\t\t\t\t\tlog.warn(\"Error sorting announcements by \" + AnnouncementAction.SORT_MESSAGE_ORDER + \".\" + e.getMessage());\n+\t\t\t\tlog.warn(\"Error sorting announcements by {}, {}\", AnnouncementAction.SORT_MESSAGE_ORDER, e.toString());\n+\t\t\t}\n+\t\t} else {\n+\t\t\t//for each channel\n+\t\t\tfor (String channel : channels) {\n+\t\t\t\ttry {\n+\t\t\t\t\tannouncements.addAll(announcementService.getMessages(channel, msgFilter, announcementSortAsc, false));\n+\t\t\t\t} catch (PermissionException | IdUnusedException | NullPointerException ex) {\n+\t\t\t\t\t//user may not have access to view the channel but get all public messages in this channel\n+\t\t\t\t\tAnnouncementChannel announcementChannel = (AnnouncementChannel) announcementService.getChannelPublic(channel);\n+\t\t\t\t\tif (announcementChannel != null) {\n+\t\t\t\t\t\tList<Message> publicMessages = announcementChannel.getMessagesPublic(null, true);\n+\t\t\t\t\t\tfor (Message message : publicMessages) {\n+\t\t\t\t\t\t\t//Add message only if it is within the time range\n+\t\t\t\t\t\t\tif (isMessageWithinPastNDays(message, numberOfDaysInThePast) && announcementService.isMessageViewable((AnnouncementMessage) message)) {\n+\t\t\t\t\t\t\t\tannouncements.add(message);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\n \t\t}\n-\t\t\n+\n+\t\tlog.debug(\"announcements.size(): {}\", announcements.size());\n+\n+\n \t\t//convert raw announcements into decorated announcements\n \t\tList<DecoratedAnnouncement> decoratedAnnouncements = new ArrayList<DecoratedAnnouncement>();\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDQ4Mw==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r437520483", "bodyText": "No need to loop here just use Collections.addAll", "author": "ern", "createdAt": "2020-06-09T15:26:59Z", "path": "announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java", "diffHunk": "@@ -243,6 +257,29 @@ public String getEntityPrefix() {\n \t\t\tlog.debug(\"announcements.size(): {}\", announcements.size());\n \t\t}\n \t\t\n+\t\tif (AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder)) {\n+\t\t\ttry {\n+\t\t\t\tList<AnnouncementWrapper> messageList = new ArrayList<>();\n+\t\t\t\tAnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n+\t\t\t\tfor (Message msg : announcements) {\n+\t\t\t\t\tAnnouncementChannel curChannel = (AnnouncementChannel) announcementService.getChannel(msg.getReference().replace(\"msg\", \"channel\").replaceAll(\"main/(.*)\", \"main\"));\n+\t\t\t\t\tmessageList.add(new AnnouncementWrapper((AnnouncementMessage) msg, curChannel, defaultChannel, null, null));\n+\t\t\t\t}\n+\t\t\t\tSortedIterator<AnnouncementWrapper> rvSorted = new SortedIterator<>(messageList.iterator(), new AnnouncementWrapperComparator(sortCurrentOrder, announcementSortAsc));\n+\t\t\t\t\n+\t\t\t\tList<Message> subrv = new ArrayList();\n+\t\t\t\tfor (int index = 0; index < announcements.size(); index++) {\n+\t\t\t\t\tsubrv.add(rvSorted.next());", "originalCommit": "944c49c2b0d044a08b1fbac35c0629af1f709476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NDYyNA==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r437754624", "bodyText": "I believe I can only add a collection to another collection.  Plus, I needed to sort messageList, thus the SortedIterator rvSorted... which is similar logic that I copied from elsewhere in AnnouncementAction.java", "author": "austin48", "createdAt": "2020-06-09T22:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d52786f88ce1f81e5b73ecb4a8597159bb4258a9", "chunk": "diff --git a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\nindex 4e18b3584a..664964a012 100644\n--- a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n+++ b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n\n@@ -227,59 +230,51 @@ public class AnnouncementEntityProviderImpl extends AbstractEntityProvider imple\n \t\t//get the announcements for each channel\n \t\tList<Message> announcements = new ArrayList<Message>();\n \t\t\n-\t\tboolean enableReorder = ComponentManager.get(ServerConfigurationService.class).getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n+\t\tboolean enableReorder = serverConfigurationService.getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n \t\tString sortCurrentOrder = AnnouncementAction.SORT_DATE;\n \t\tif (enableReorder){\n \t\t\tsortCurrentOrder = AnnouncementAction.SORT_MESSAGE_ORDER;\n \t\t}\n-\t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null:new ViewableFilter(null, t, numberOfAnnouncements);\n-\t\t\n-\t\t//for each channel\n-\t\tfor(String channel: channels) {\n-\t\t\ttry {\n-\t\t\t\tannouncements.addAll(announcementService.getMessages(channel, msgFilter, announcementSortAsc, false));\n-\t\t\t} catch (PermissionException | IdUnusedException | NullPointerException ex) {\n-\t\t\t\t//user may not have access to view the channel but get all public messages in this channel\n-\t\t\t\tAnnouncementChannel announcementChannel = (AnnouncementChannel)announcementService.getChannelPublic(channel);\n-\t\t\t\tif(announcementChannel != null){\n-\t\t\t\t\tList<Message> publicMessages = announcementChannel.getMessagesPublic(null, true);\n-\t\t\t\t\tfor(Message message : publicMessages){\n-\t\t\t\t\t\t//Add message only if it is within the time range\n-\t\t\t\t\t\tif(isMessageWithinPastNDays(message, numberOfDaysInThePast) && announcementService.isMessageViewable((AnnouncementMessage) message)){\n-\t\t\t\t\t\t\tannouncements.add(message);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(log.isDebugEnabled()) {\n-\t\t\tlog.debug(\"announcements.size(): {}\", announcements.size());\n-\t\t}\n+\t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null : new ViewableFilter(null, t, numberOfAnnouncements);\n \t\t\n \t\tif (AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder)) {\n \t\t\ttry {\n \t\t\t\tList<AnnouncementWrapper> messageList = new ArrayList<>();\n-\t\t\t\tAnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n+\t\t\t\tfinal AnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n \t\t\t\tfor (Message msg : announcements) {\n \t\t\t\t\tAnnouncementChannel curChannel = (AnnouncementChannel) announcementService.getChannel(msg.getReference().replace(\"msg\", \"channel\").replaceAll(\"main/(.*)\", \"main\"));\n \t\t\t\t\tmessageList.add(new AnnouncementWrapper((AnnouncementMessage) msg, curChannel, defaultChannel, null, null));\n \t\t\t\t}\n-\t\t\t\tSortedIterator<AnnouncementWrapper> rvSorted = new SortedIterator<>(messageList.iterator(), new AnnouncementWrapperComparator(sortCurrentOrder, announcementSortAsc));\n-\t\t\t\t\n-\t\t\t\tList<Message> subrv = new ArrayList();\n-\t\t\t\tfor (int index = 0; index < announcements.size(); index++) {\n-\t\t\t\t\tsubrv.add(rvSorted.next());\n-\t\t\t\t}\n-\t\t\t\tannouncements = subrv;\n+\t\t\t\tComparator<AnnouncementWrapper> sortedAnnouncements = new AnnouncementWrapperComparator(sortCurrentOrder, announcementSortAsc);\n+\t\t\t\tmessageList.sort(sortedAnnouncements);\n+\t\t\t\tannouncements.addAll(messageList);\n \t\t\t} catch (Exception e) {\n-\t\t\t\tif(log.isDebugEnabled()) {\n-\t\t\t\t\tlog.warn(\"Error sorting announcements by \" + AnnouncementAction.SORT_MESSAGE_ORDER + \".\" + e.getMessage());\n+\t\t\t\tlog.warn(\"Error sorting announcements by {}, {}\", AnnouncementAction.SORT_MESSAGE_ORDER, e.toString());\n+\t\t\t}\n+\t\t} else {\n+\t\t\t//for each channel\n+\t\t\tfor (String channel : channels) {\n+\t\t\t\ttry {\n+\t\t\t\t\tannouncements.addAll(announcementService.getMessages(channel, msgFilter, announcementSortAsc, false));\n+\t\t\t\t} catch (PermissionException | IdUnusedException | NullPointerException ex) {\n+\t\t\t\t\t//user may not have access to view the channel but get all public messages in this channel\n+\t\t\t\t\tAnnouncementChannel announcementChannel = (AnnouncementChannel) announcementService.getChannelPublic(channel);\n+\t\t\t\t\tif (announcementChannel != null) {\n+\t\t\t\t\t\tList<Message> publicMessages = announcementChannel.getMessagesPublic(null, true);\n+\t\t\t\t\t\tfor (Message message : publicMessages) {\n+\t\t\t\t\t\t\t//Add message only if it is within the time range\n+\t\t\t\t\t\t\tif (isMessageWithinPastNDays(message, numberOfDaysInThePast) && announcementService.isMessageViewable((AnnouncementMessage) message)) {\n+\t\t\t\t\t\t\t\tannouncements.add(message);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\n \t\t}\n-\t\t\n+\n+\t\tlog.debug(\"announcements.size(): {}\", announcements.size());\n+\n+\n \t\t//convert raw announcements into decorated announcements\n \t\tList<DecoratedAnnouncement> decoratedAnnouncements = new ArrayList<DecoratedAnnouncement>();\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMjI3MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r437522271", "bodyText": "BooleanUtils maybe more appropriate here", "author": "ern", "createdAt": "2020-06-09T15:29:33Z", "path": "announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java", "diffHunk": "@@ -130,6 +135,7 @@ public String getEntityPrefix() {\n \t\t//we use this zero value to determine if we need to look up from the tool config, or use the defaults if still not set.\n \t\tint numberOfAnnouncements = NumberUtils.toInt((String)params.get(\"n\"), 0);\n \t\tint numberOfDaysInThePast = NumberUtils.toInt((String)params.get(\"d\"), 0);\n+\t\tboolean announcementSortAsc = NumberUtils.toInt((String)params.get(\"a\"), 0) == 1 ? true:false;", "originalCommit": "944c49c2b0d044a08b1fbac35c0629af1f709476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1MzA5NA==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r437753094", "bodyText": "Do you mean something like this:\nboolean announcementSortAsc = BooleanUtils.toBoolean(NumberUtils.toInt((String)params.get(\"a\"), 0));\nHowever, the issue I have with that is values greater than 1 will also evaluate to true.  I looked at other methods in BooleanUtils, but I couldn't find anything else that didn't require catching exceptions or checking for null afterwards.", "author": "austin48", "createdAt": "2020-06-09T22:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMjI3MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2e62df7b3f504f0cecd414822d4d1b52bd63ad99", "url": "https://github.com/sakaiproject/sakai/commit/2e62df7b3f504f0cecd414822d4d1b52bd63ad99", "message": "SAK-43238 Embedded Announcement block in Lessons display order", "committedDate": "2020-10-07T18:59:43Z", "type": "commit"}, {"oid": "d52786f88ce1f81e5b73ecb4a8597159bb4258a9", "url": "https://github.com/sakaiproject/sakai/commit/d52786f88ce1f81e5b73ecb4a8597159bb4258a9", "message": "Updated PR that doesn't use deprecated SortedIterator", "committedDate": "2020-10-07T19:30:45Z", "type": "commit"}, {"oid": "d52786f88ce1f81e5b73ecb4a8597159bb4258a9", "url": "https://github.com/sakaiproject/sakai/commit/d52786f88ce1f81e5b73ecb4a8597159bb4258a9", "message": "Updated PR that doesn't use deprecated SortedIterator", "committedDate": "2020-10-07T19:30:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NjU1OQ==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r501396559", "bodyText": "the announcements list is always empty here because the else block below used to be above this sort block and always populated the list first.", "author": "austin48", "createdAt": "2020-10-08T01:20:24Z", "path": "announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java", "diffHunk": "@@ -227,59 +230,51 @@ public String getEntityPrefix() {\n \t\t//get the announcements for each channel\n \t\tList<Message> announcements = new ArrayList<Message>();\n \t\t\n-\t\tboolean enableReorder = ComponentManager.get(ServerConfigurationService.class).getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n+\t\tboolean enableReorder = serverConfigurationService.getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n \t\tString sortCurrentOrder = AnnouncementAction.SORT_DATE;\n \t\tif (enableReorder){\n \t\t\tsortCurrentOrder = AnnouncementAction.SORT_MESSAGE_ORDER;\n \t\t}\n-\t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null:new ViewableFilter(null, t, numberOfAnnouncements);\n-\t\t\n-\t\t//for each channel\n-\t\tfor(String channel: channels) {\n-\t\t\ttry {\n-\t\t\t\tannouncements.addAll(announcementService.getMessages(channel, msgFilter, announcementSortAsc, false));\n-\t\t\t} catch (PermissionException | IdUnusedException | NullPointerException ex) {\n-\t\t\t\t//user may not have access to view the channel but get all public messages in this channel\n-\t\t\t\tAnnouncementChannel announcementChannel = (AnnouncementChannel)announcementService.getChannelPublic(channel);\n-\t\t\t\tif(announcementChannel != null){\n-\t\t\t\t\tList<Message> publicMessages = announcementChannel.getMessagesPublic(null, true);\n-\t\t\t\t\tfor(Message message : publicMessages){\n-\t\t\t\t\t\t//Add message only if it is within the time range\n-\t\t\t\t\t\tif(isMessageWithinPastNDays(message, numberOfDaysInThePast) && announcementService.isMessageViewable((AnnouncementMessage) message)){\n-\t\t\t\t\t\t\tannouncements.add(message);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(log.isDebugEnabled()) {\n-\t\t\tlog.debug(\"announcements.size(): {}\", announcements.size());\n-\t\t}\n+\t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null : new ViewableFilter(null, t, numberOfAnnouncements);\n \t\t\n \t\tif (AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder)) {\n \t\t\ttry {\n \t\t\t\tList<AnnouncementWrapper> messageList = new ArrayList<>();\n-\t\t\t\tAnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n+\t\t\t\tfinal AnnouncementChannel defaultChannel = (AnnouncementChannel) announcementService.getChannel(\"/announcement/channel/\" + siteId + \"/main\");\n \t\t\t\tfor (Message msg : announcements) {", "originalCommit": "d52786f88ce1f81e5b73ecb4a8597159bb4258a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5Njc2MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r501996761", "bodyText": "i don't follow. announcements is always empty on line 244?", "author": "ottenhoff", "createdAt": "2020-10-08T20:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NjU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwMzk4NQ==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r502003985", "bodyText": "yes on line 244\nfor (Message msg : announcements) {\ndue to Earle's change, when the code gets to line 244, announcements haven't been added to the announcements list yet.  Because the block that used to set it got moved into an else block.", "author": "austin48", "createdAt": "2020-10-08T20:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NjU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNzMxNA==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r502007314", "bodyText": "okay can you make the change to fix it ?", "author": "ottenhoff", "createdAt": "2020-10-08T20:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NjU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMzg2MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r502013861", "bodyText": "ok, will do", "author": "austin48", "createdAt": "2020-10-08T21:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NjU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMzY3Mg==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r502723672", "bodyText": "committed latest fix\nbut i'm not totally sure about these lines\nannouncements.removeAll(announcements);\nannouncements.addAll(messageList);\n\nit works, but I'm not sure if that's the best way to \"replace\" the contents of announcements", "author": "austin48", "createdAt": "2020-10-10T00:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NjU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd2115db906afb62d5dd147c56c4a85edf5e53c7", "chunk": "diff --git a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\nindex 664964a012..244a5b64e2 100644\n--- a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n+++ b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n\n@@ -237,6 +237,25 @@ public class AnnouncementEntityProviderImpl extends AbstractEntityProvider imple\n \t\t}\n \t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null : new ViewableFilter(null, t, numberOfAnnouncements);\n \t\t\n+\t\t//for each channel\n+\t\tfor (String channel : channels) {\n+\t\t\ttry {\n+\t\t\t\tannouncements.addAll(announcementService.getMessages(channel, msgFilter, announcementSortAsc, false));\n+\t\t\t} catch (PermissionException | IdUnusedException | NullPointerException ex) {\n+\t\t\t\t//user may not have access to view the channel but get all public messages in this channel\n+\t\t\t\tAnnouncementChannel announcementChannel = (AnnouncementChannel) announcementService.getChannelPublic(channel);\n+\t\t\t\tif (announcementChannel != null) {\n+\t\t\t\t\tList<Message> publicMessages = announcementChannel.getMessagesPublic(null, true);\n+\t\t\t\t\tfor (Message message : publicMessages) {\n+\t\t\t\t\t\t//Add message only if it is within the time range\n+\t\t\t\t\t\tif (isMessageWithinPastNDays(message, numberOfDaysInThePast) && announcementService.isMessageViewable((AnnouncementMessage) message)) {\n+\t\t\t\t\t\t\tannouncements.add(message);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n \t\tif (AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder)) {\n \t\t\ttry {\n \t\t\t\tList<AnnouncementWrapper> messageList = new ArrayList<>();\n"}}, {"oid": "fd2115db906afb62d5dd147c56c4a85edf5e53c7", "url": "https://github.com/sakaiproject/sakai/commit/fd2115db906afb62d5dd147c56c4a85edf5e53c7", "message": "SAK-43238 Announcement navigation tabs are incorrect after viewing an announcement", "committedDate": "2020-10-10T00:44:13Z", "type": "commit"}, {"oid": "06ab7c095b9e191b0cc99a946129d3323c9891b9", "url": "https://github.com/sakaiproject/sakai/commit/06ab7c095b9e191b0cc99a946129d3323c9891b9", "message": "SAK-43238 Embedded Announcement block in Lessons display order\n\nuse clear() instead of removeAll()", "committedDate": "2020-11-02T20:06:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwODA5Mg==", "url": "https://github.com/sakaiproject/sakai/pull/8270#discussion_r529708092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tString sortCurrentOrder = AnnouncementAction.SORT_DATE;\n          \n          \n            \n            \t\tif (enableReorder){\n          \n          \n            \n            \t\t\tsortCurrentOrder = AnnouncementAction.SORT_MESSAGE_ORDER;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tfinal String sortCurrentOrder = enableReorder ? AnnouncementAction.SORT_MESSAGE_ORDER : AnnouncementAction.SORT_DATE;", "author": "adrianfish", "createdAt": "2020-11-24T16:25:00Z", "path": "announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java", "diffHunk": "@@ -213,36 +222,60 @@ public String getEntityPrefix() {\n \n \t\tlog.debug(\"numberOfAnnouncements: {}\", numberOfAnnouncements);\n \t\tlog.debug(\"numberOfDaysInThePast: {}\", numberOfDaysInThePast);\n+\t\tlog.debug(\"announcementSortAsc: {}\", announcementSortAsc);\n \t\t\n \t\t//get the Sakai Time for the given java Date\n \t\tTime t = timeService.newTime(getTimeForDaysInPast(numberOfDaysInThePast).getTime());\n \t\t\n \t\t//get the announcements for each channel\n \t\tList<Message> announcements = new ArrayList<Message>();\n \t\t\n+\t\tboolean enableReorder = serverConfigurationService.getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n+\t\tString sortCurrentOrder = AnnouncementAction.SORT_DATE;\n+\t\tif (enableReorder){\n+\t\t\tsortCurrentOrder = AnnouncementAction.SORT_MESSAGE_ORDER;\n+\t\t}", "originalCommit": "06ab7c095b9e191b0cc99a946129d3323c9891b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe6e080def52f0debed1d18dd52aad3d7461a7fd", "chunk": "diff --git a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\nindex 1f0a958c91..026b89bfd4 100644\n--- a/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n+++ b/announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java\n\n@@ -231,10 +231,7 @@ public class AnnouncementEntityProviderImpl extends AbstractEntityProvider imple\n \t\tList<Message> announcements = new ArrayList<Message>();\n \t\t\n \t\tboolean enableReorder = serverConfigurationService.getBoolean(AnnouncementAction.SAK_PROP_ANNC_REORDER, AnnouncementAction.SAK_PROP_ANNC_REORDER_DEFAULT);\n-\t\tString sortCurrentOrder = AnnouncementAction.SORT_DATE;\n-\t\tif (enableReorder){\n-\t\t\tsortCurrentOrder = AnnouncementAction.SORT_MESSAGE_ORDER;\n-\t\t}\n+\t\tfinal String sortCurrentOrder = enableReorder ? AnnouncementAction.SORT_MESSAGE_ORDER : AnnouncementAction.SORT_DATE;\n \t\tViewableFilter msgFilter = AnnouncementAction.SORT_MESSAGE_ORDER.equals(sortCurrentOrder) ? null : new ViewableFilter(null, t, numberOfAnnouncements);\n \t\t\n \t\t//for each channel\n"}}, {"oid": "fe6e080def52f0debed1d18dd52aad3d7461a7fd", "url": "https://github.com/sakaiproject/sakai/commit/fe6e080def52f0debed1d18dd52aad3d7461a7fd", "message": "Update announcement/announcement-tool/tool/src/java/org/sakaiproject/announcement/entityprovider/AnnouncementEntityProviderImpl.java", "committedDate": "2020-11-24T16:25:09Z", "type": "commit"}]}