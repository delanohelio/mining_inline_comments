{"pr_number": 8195, "pr_title": "SAK-43541 Add optional converter for attachments", "pr_createdAt": "2020-04-28T01:17:14Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8195", "timeline": [{"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e", "url": "https://github.com/sakaiproject/sakai/commit/bc9dd0ec421b517b79a061a9915112b2fb58341e", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-04-28T13:18:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5ODIzMA==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r423798230", "bodyText": "Maybe an index on REFERENCE?", "author": "ern", "createdAt": "2020-05-12T14:52:23Z", "path": "kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**********************************************************************************\n+ * $URL$\n+ * $Id$\n+ ***********************************************************************************\n+ *\n+ * Copyright (c) 2004, 2005, 2006, 2008 Sakai Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.opensource.org/licenses/ECL-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ **********************************************************************************/\n+\n+package org.sakaiproject.content.hbm;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Index;\n+import javax.persistence.Table;\n+\n+import java.time.Instant;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.Type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Entity\n+@Table(name = \"FILE_CONVERSION_QUEUE\", indexes = {\n+    @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n+  }\n+)\n+@Cacheable\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@Getter\n+@Setter\n+@ToString\n+public class FileConversionQueueItem {\n+\n+  @Id\n+  @Column(name = \"ID\")\n+  @GeneratedValue\n+  private Long id;\n+\n+  @Column(name = \"REFERENCE\", length = 255)", "originalCommit": "bc9dd0ec421b517b79a061a9915112b2fb58341e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1bd10f315274376640ecaec92ba6cf4ad2efba64", "chunk": "diff --git a/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java b/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java\nindex aaa1b45d23..32309a1482 100644\n--- a/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java\n+++ b/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java\n\n@@ -21,51 +21,57 @@\n \n package org.sakaiproject.content.hbm;\n \n+import java.time.Instant;\n+\n import javax.persistence.Cacheable;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n import javax.persistence.Index;\n import javax.persistence.Table;\n \n-import java.time.Instant;\n-\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.hibernate.annotations.Type;\n \n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@Cacheable\n+@Data\n @Entity\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n @Table(name = \"FILE_CONVERSION_QUEUE\", indexes = {\n-    @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n-  }\n-)\n-@Cacheable\n-@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n-@Getter\n-@Setter\n-@ToString\n+        @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n+})\n public class FileConversionQueueItem {\n \n-  @Id\n-  @Column(name = \"ID\")\n-  @GeneratedValue\n-  private Long id;\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue\n+    @EqualsAndHashCode.Include\n+    private Long id;\n+\n+    @Column(name = \"REFERENCE\", length = 255)\n+    private String reference;\n \n-  @Column(name = \"REFERENCE\", length = 255)\n-  private String reference;\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"STATUS\", length = 16)\n+    private Status status;\n \n-  @Column(name = \"STATUS\", length = 16)\n-  private String status;\n+    @Column(name = \"ATTEMPTS\")\n+    private Integer attempts;\n \n-  @Column(name = \"ATTEMPTS\")\n-  private Integer attempts;\n+    @Column(name = \"LAST_ATTEMPT_STARTED\")\n+    @Type(type = \"org.sakaiproject.springframework.orm.hibernate.type.InstantType\")\n+    private Instant lastAttemptStarted;\n \n-  @Column(name = \"LAST_ATTEMPT_STARTED\")\n-  @Type(type = \"org.sakaiproject.springframework.orm.hibernate.type.InstantType\")\n-  private Instant lastAttemptStarted;\n+    public enum Status {\n+        NOT_STARTED,\n+        IN_PROGRESS\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDIxNA==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r423804214", "bodyText": "log.warn(\"Could not access properties for resource {}, {}\", resourceId, e.toString())\nmessage vs e.printStackTrace", "author": "ern", "createdAt": "2020-05-12T14:59:47Z", "path": "assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java", "diffHunk": "@@ -1294,6 +1295,34 @@ public SimpleSubmission(AssignmentSubmission as, boolean anonymousGrading) {\n                     this.late = dateSubmitted.compareTo(as.getAssignment().getDueDate()) > 0;\n                 }\n                 this.submittedAttachments = as.getAttachments();\n+\n+                SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+                    if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)) {\n+                        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+                    } else {\n+                        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+                    }\n+                };\n+\n+                try {\n+                    securityService.pushAdvisor(securityAdvisor);\n+                    this.submittedAttachments.forEach(ref -> {\n+\n+                        try {\n+                            ResourceProperties props = contentHostingService.getProperties(ref.replaceFirst(\"\\\\/content\", \"\"));\n+                            String previewId = props.getProperty(ContentHostingService.PREVIEW);\n+                            System.out.println(previewId);\n+                            if (StringUtils.isNotEmpty(previewId)) {\n+                                previewableAttachments.put(ref, contentHostingService.getResource(previewId).getReference());\n+                            }\n+                        } catch (Exception e) {\n+                            e.printStackTrace();", "originalCommit": "bc9dd0ec421b517b79a061a9915112b2fb58341e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26b6a647fe57cf66ea263c98ad7ba159559faf90", "chunk": "diff --git a/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java b/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java\nindex d01d89779f..9e4fd13121 100644\n--- a/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java\n+++ b/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java\n\n@@ -1312,12 +1312,11 @@ public class AssignmentEntityProvider extends AbstractEntityProvider implements\n                         try {\n                             ResourceProperties props = contentHostingService.getProperties(ref.replaceFirst(\"\\\\/content\", \"\"));\n                             String previewId = props.getProperty(ContentHostingService.PREVIEW);\n-                            System.out.println(previewId);\n                             if (StringUtils.isNotEmpty(previewId)) {\n                                 previewableAttachments.put(ref, contentHostingService.getResource(previewId).getReference());\n                             }\n                         } catch (Exception e) {\n-                            e.printStackTrace();\n+                            log.warn(\"Could not access properties for resource {}, {}\", resourceId, e.toString())\n                         }\n                     });\n                 } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r423804543", "bodyText": ":( securityAdivisor", "author": "ern", "createdAt": "2020-05-12T15:00:09Z", "path": "assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java", "diffHunk": "@@ -1294,6 +1295,34 @@ public SimpleSubmission(AssignmentSubmission as, boolean anonymousGrading) {\n                     this.late = dateSubmitted.compareTo(as.getAssignment().getDueDate()) > 0;\n                 }\n                 this.submittedAttachments = as.getAttachments();\n+\n+                SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+                    if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)) {\n+                        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+                    } else {\n+                        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+                    }\n+                };\n+\n+                try {\n+                    securityService.pushAdvisor(securityAdvisor);", "originalCommit": "bc9dd0ec421b517b79a061a9915112b2fb58341e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1ODYxMg==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425058612", "bodyText": "What do you suggest? Switch to an admin user session? I don't know what to do in these circumstances.", "author": "adrianfish", "createdAt": "2020-05-14T11:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExNTMzNw==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425115337", "bodyText": "That's much more dangerous, especially if on a user thread.", "author": "bjones86", "createdAt": "2020-05-14T12:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNDc1NA==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425134754", "bodyText": "I could switch to the owner of the resource, create a temporary session while doing the business. That seems sensible.", "author": "adrianfish", "createdAt": "2020-05-14T13:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0NjUyMw==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425146523", "bodyText": "I don't think anyone wants you to jump sessions! I think what ern is saying is that it's too bad we still have the advisor pattern as opposed to an API method that could be used to perform this content read", "author": "ottenhoff", "createdAt": "2020-05-14T13:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MDg0NA==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425340844", "bodyText": "I attach a lot of meaning to all of Earle's comments :) I tried a jumping session approach, but  the idea of a worker pool with loads of threadlocal session data floating around spooked me a bit.", "author": "adrianfish", "createdAt": "2020-05-14T18:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MjY3Mg==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425342672", "bodyText": "Yeah, session swapping is really, really bad. We should never do it. Sometimes our only option is a SecurityAdvisor.", "author": "bjones86", "createdAt": "2020-05-14T18:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5ODUxOQ==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425898519", "bodyText": "Sam hit it on the head", "author": "ern", "createdAt": "2020-05-15T16:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwMzM2MQ==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425903361", "bodyText": "The SecurityAdvisor exists simply because the API doesn't accommodate the need to do something without a specific permission.\nWe all agree there are times when a user actions should do something regardless of the permission they hold. The SecurityAdvisor itself is evidence of this need yet the API doesn't allow us to do it.\nIf the API had accounted for this then there will be no need for the SecurityAdvisor and the code would be safer because you don't need to elevate someone's permissions.\nWhat I would like people to do is to only use the SecurityAdvisor as a last resort, it's a bad pattern and we should look to limit its use whenever possible.", "author": "ern", "createdAt": "2020-05-15T16:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwNzg2Nw==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425907867", "bodyText": "Yeah, that's why I said sometimes it's our only option short of redesigning entire services.", "author": "bjones86", "createdAt": "2020-05-15T16:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "26b6a647fe57cf66ea263c98ad7ba159559faf90", "chunk": "diff --git a/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java b/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java\nindex d01d89779f..9e4fd13121 100644\n--- a/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java\n+++ b/assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java\n\n@@ -1312,12 +1312,11 @@ public class AssignmentEntityProvider extends AbstractEntityProvider implements\n                         try {\n                             ResourceProperties props = contentHostingService.getProperties(ref.replaceFirst(\"\\\\/content\", \"\"));\n                             String previewId = props.getProperty(ContentHostingService.PREVIEW);\n-                            System.out.println(previewId);\n                             if (StringUtils.isNotEmpty(previewId)) {\n                                 previewableAttachments.put(ref, contentHostingService.getResource(previewId).getReference());\n                             }\n                         } catch (Exception e) {\n-                            e.printStackTrace();\n+                            log.warn(\"Could not access properties for resource {}, {}\", resourceId, e.toString())\n                         }\n                     });\n                 } finally {\n"}}, {"oid": "26b6a647fe57cf66ea263c98ad7ba159559faf90", "url": "https://github.com/sakaiproject/sakai/commit/26b6a647fe57cf66ea263c98ad7ba159559faf90", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-05-14T18:26:32Z", "type": "forcePushed"}, {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba", "url": "https://github.com/sakaiproject/sakai/commit/450c1887e773276b44e93042f8ba4c1173fe61ba", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-05-14T19:07:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODEyMQ==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425908121", "bodyText": "prefer use an integer enum as it is less storage on the db side than a string", "author": "ern", "createdAt": "2020-05-15T16:17:34Z", "path": "kernel/api/src/main/java/org/sakaiproject/content/api/FileConversionService.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.sakaiproject.content.api;\n+\n+public interface FileConversionService {\n+\n+    enum FileConversionStatus { DISABLED, NOT_STARTED, IN_PROGRESS, COMPLETED, UNKNOWN };", "originalCommit": "450c1887e773276b44e93042f8ba4c1173fe61ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "chunk": "diff --git a/kernel/api/src/main/java/org/sakaiproject/content/api/FileConversionService.java b/kernel/api/src/main/java/org/sakaiproject/content/api/FileConversionService.java\nindex 14e0dca3bc..fd74bc6c7f 100644\n--- a/kernel/api/src/main/java/org/sakaiproject/content/api/FileConversionService.java\n+++ b/kernel/api/src/main/java/org/sakaiproject/content/api/FileConversionService.java\n\n@@ -2,7 +2,8 @@ package org.sakaiproject.content.api;\n \n public interface FileConversionService {\n \n-    enum FileConversionStatus { DISABLED, NOT_STARTED, IN_PROGRESS, COMPLETED, UNKNOWN };\n+    public static final String NOT_STARTED = \"NOT_STARTED\";\n+    public static final String IN_PROGRESS = \"IN_PROGRESS\";\n \n     boolean canConvert(String fromType);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODI2NQ==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425908265", "bodyText": "use integer enum", "author": "ern", "createdAt": "2020-05-15T16:17:52Z", "path": "kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**********************************************************************************\n+ * $URL$\n+ * $Id$\n+ ***********************************************************************************\n+ *\n+ * Copyright (c) 2004, 2005, 2006, 2008 Sakai Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.opensource.org/licenses/ECL-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ **********************************************************************************/\n+\n+package org.sakaiproject.content.hbm;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Index;\n+import javax.persistence.Table;\n+\n+import java.time.Instant;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.Type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Entity\n+@Table(name = \"FILE_CONVERSION_QUEUE\", indexes = {\n+    @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n+  }\n+)\n+@Cacheable\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@Getter\n+@Setter\n+@ToString\n+public class FileConversionQueueItem {\n+\n+  @Id\n+  @Column(name = \"ID\")\n+  @GeneratedValue\n+  private Long id;\n+\n+  @Column(name = \"REFERENCE\", length = 255)\n+  private String reference;\n+\n+  @Column(name = \"STATUS\", length = 16)\n+  private String status;", "originalCommit": "450c1887e773276b44e93042f8ba4c1173fe61ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1bd10f315274376640ecaec92ba6cf4ad2efba64", "chunk": "diff --git a/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java b/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java\nindex aaa1b45d23..32309a1482 100644\n--- a/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java\n+++ b/kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java\n\n@@ -21,51 +21,57 @@\n \n package org.sakaiproject.content.hbm;\n \n+import java.time.Instant;\n+\n import javax.persistence.Cacheable;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n import javax.persistence.Index;\n import javax.persistence.Table;\n \n-import java.time.Instant;\n-\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.hibernate.annotations.Type;\n \n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n \n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@Cacheable\n+@Data\n @Entity\n+@EqualsAndHashCode(onlyExplicitlyIncluded = true)\n @Table(name = \"FILE_CONVERSION_QUEUE\", indexes = {\n-    @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n-  }\n-)\n-@Cacheable\n-@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n-@Getter\n-@Setter\n-@ToString\n+        @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n+})\n public class FileConversionQueueItem {\n \n-  @Id\n-  @Column(name = \"ID\")\n-  @GeneratedValue\n-  private Long id;\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue\n+    @EqualsAndHashCode.Include\n+    private Long id;\n+\n+    @Column(name = \"REFERENCE\", length = 255)\n+    private String reference;\n \n-  @Column(name = \"REFERENCE\", length = 255)\n-  private String reference;\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"STATUS\", length = 16)\n+    private Status status;\n \n-  @Column(name = \"STATUS\", length = 16)\n-  private String status;\n+    @Column(name = \"ATTEMPTS\")\n+    private Integer attempts;\n \n-  @Column(name = \"ATTEMPTS\")\n-  private Integer attempts;\n+    @Column(name = \"LAST_ATTEMPT_STARTED\")\n+    @Type(type = \"org.sakaiproject.springframework.orm.hibernate.type.InstantType\")\n+    private Instant lastAttemptStarted;\n \n-  @Column(name = \"LAST_ATTEMPT_STARTED\")\n-  @Type(type = \"org.sakaiproject.springframework.orm.hibernate.type.InstantType\")\n-  private Instant lastAttemptStarted;\n+    public enum Status {\n+        NOT_STARTED,\n+        IN_PROGRESS\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODc3Mw==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425908773", "bodyText": "query shouldn't be in the service create a Repository (aka DAO)", "author": "ern", "createdAt": "2020-05-15T16:18:45Z", "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -0,0 +1,298 @@\n+package org.sakaiproject.content.impl;\n+\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.util.EntityUtils;\n+\n+import org.hibernate.criterion.Restrictions;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+\n+import org.sakaiproject.authz.api.SecurityAdvisor;\n+import org.sakaiproject.authz.api.SecurityService;\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.content.api.ContentHostingService;\n+import org.sakaiproject.content.api.ContentResource;\n+import org.sakaiproject.content.api.FileConversionService;\n+import org.sakaiproject.content.hbm.FileConversionQueueItem;\n+import org.sakaiproject.entity.api.ResourceProperties;\n+import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FileConversionServiceImpl implements FileConversionService {\n+\n+  private String converterBaseUrl;\n+  private boolean enabled;\n+  private List<String> fromTypes;\n+  private int pause;\n+  private int queueIntervalMinutes;\n+  private ExecutorService workers;\n+  private ScheduledExecutorService master;\n+\n+  @Setter\n+  private ContentHostingService contentHostingService;\n+\n+  @Setter\n+  private PlatformTransactionManager transactionManager;\n+\n+  @Setter\n+  private SecurityService securityService;\n+\n+  @Setter\n+  private ServerConfigurationService serverConfigurationService;\n+\n+  @Setter\n+  private SessionFactory sessionFactory;\n+\n+  private TransactionTemplate transactionTemplate;\n+\n+  public void init() {\n+\n+    transactionTemplate = new TransactionTemplate(transactionManager);\n+\n+    enabled = serverConfigurationService.getBoolean(\"fileconversion.enabled\", false);\n+\n+    if (enabled) {\n+      fromTypes = serverConfigurationService.getStringList(\"fileconversion.fromtypes\",\n+        Arrays.asList(ContentHostingService.DOCX_MIMETYPE\n+                        , ContentHostingService.DOC_MIMETYPE\n+                        , ContentHostingService.ODT_MIMETYPE\n+                        , ContentHostingService.ODP_MIMETYPE\n+                        , ContentHostingService.PPT_MIMETYPE\n+                        , ContentHostingService.PPTX_MIMETYPE));\n+      converterBaseUrl = serverConfigurationService.getString(\"fileconversion.converterurl\", \"http://localhost:9980\");\n+\n+      workers = Executors.newFixedThreadPool(serverConfigurationService.getInt(\"fileconversion.workerthreads\", 20));\n+      master = Executors.newScheduledThreadPool(1);\n+      queueIntervalMinutes = serverConfigurationService.getInt(\"fileconversion.queueintervalminutes\", 1);\n+      pause = serverConfigurationService.getInt(\"fileconversion.pausemillis\", 1000);\n+    }\n+  }\n+\n+  public void startIfEnabled() {\n+\n+    log.debug(\"startIfEnabled()\");\n+\n+    if (!enabled) {\n+        log.debug(\"Not enabled in Sakai properties. Not starting.\");\n+        return;\n+    }\n+\n+    SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+      if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_ADD.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_WRITE_ANY.equals(function)) {\n+        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+      } else {\n+        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+      }\n+    };\n+\n+    master.scheduleWithFixedDelay(() -> {\n+\n+      log.debug(\"scheduling ...\");\n+\n+      // Read a record from the queue table and create a worker to handle it\n+      Session session = sessionFactory.openSession();\n+      List<FileConversionQueueItem> items\n+        = session.createCriteria(FileConversionQueueItem.class)", "originalCommit": "450c1887e773276b44e93042f8ba4c1173fe61ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "chunk": "diff --git a/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java b/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java\nindex 2ed6dc10f4..ea3224b2fd 100644\n--- a/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java\n+++ b/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java\n\n@@ -124,7 +124,7 @@ public class FileConversionServiceImpl implements FileConversionService {\n       Session session = sessionFactory.openSession();\n       List<FileConversionQueueItem> items\n         = session.createCriteria(FileConversionQueueItem.class)\n-          .add(Restrictions.eq(\"status\", FileConversionStatus.NOT_STARTED.name())).list();\n+          .add(Restrictions.eq(\"status\", NOT_STARTED)).list();\n       session.close();\n \n       log.debug(\"Number of unstarted conversion items: {}\", items.size());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwOTAxMA==", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425909010", "bodyText": "should just use the enum", "author": "ern", "createdAt": "2020-05-15T16:19:10Z", "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -0,0 +1,298 @@\n+package org.sakaiproject.content.impl;\n+\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.util.EntityUtils;\n+\n+import org.hibernate.criterion.Restrictions;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+\n+import org.sakaiproject.authz.api.SecurityAdvisor;\n+import org.sakaiproject.authz.api.SecurityService;\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.content.api.ContentHostingService;\n+import org.sakaiproject.content.api.ContentResource;\n+import org.sakaiproject.content.api.FileConversionService;\n+import org.sakaiproject.content.hbm.FileConversionQueueItem;\n+import org.sakaiproject.entity.api.ResourceProperties;\n+import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FileConversionServiceImpl implements FileConversionService {\n+\n+  private String converterBaseUrl;\n+  private boolean enabled;\n+  private List<String> fromTypes;\n+  private int pause;\n+  private int queueIntervalMinutes;\n+  private ExecutorService workers;\n+  private ScheduledExecutorService master;\n+\n+  @Setter\n+  private ContentHostingService contentHostingService;\n+\n+  @Setter\n+  private PlatformTransactionManager transactionManager;\n+\n+  @Setter\n+  private SecurityService securityService;\n+\n+  @Setter\n+  private ServerConfigurationService serverConfigurationService;\n+\n+  @Setter\n+  private SessionFactory sessionFactory;\n+\n+  private TransactionTemplate transactionTemplate;\n+\n+  public void init() {\n+\n+    transactionTemplate = new TransactionTemplate(transactionManager);\n+\n+    enabled = serverConfigurationService.getBoolean(\"fileconversion.enabled\", false);\n+\n+    if (enabled) {\n+      fromTypes = serverConfigurationService.getStringList(\"fileconversion.fromtypes\",\n+        Arrays.asList(ContentHostingService.DOCX_MIMETYPE\n+                        , ContentHostingService.DOC_MIMETYPE\n+                        , ContentHostingService.ODT_MIMETYPE\n+                        , ContentHostingService.ODP_MIMETYPE\n+                        , ContentHostingService.PPT_MIMETYPE\n+                        , ContentHostingService.PPTX_MIMETYPE));\n+      converterBaseUrl = serverConfigurationService.getString(\"fileconversion.converterurl\", \"http://localhost:9980\");\n+\n+      workers = Executors.newFixedThreadPool(serverConfigurationService.getInt(\"fileconversion.workerthreads\", 20));\n+      master = Executors.newScheduledThreadPool(1);\n+      queueIntervalMinutes = serverConfigurationService.getInt(\"fileconversion.queueintervalminutes\", 1);\n+      pause = serverConfigurationService.getInt(\"fileconversion.pausemillis\", 1000);\n+    }\n+  }\n+\n+  public void startIfEnabled() {\n+\n+    log.debug(\"startIfEnabled()\");\n+\n+    if (!enabled) {\n+        log.debug(\"Not enabled in Sakai properties. Not starting.\");\n+        return;\n+    }\n+\n+    SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+      if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_ADD.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_WRITE_ANY.equals(function)) {\n+        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+      } else {\n+        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+      }\n+    };\n+\n+    master.scheduleWithFixedDelay(() -> {\n+\n+      log.debug(\"scheduling ...\");\n+\n+      // Read a record from the queue table and create a worker to handle it\n+      Session session = sessionFactory.openSession();\n+      List<FileConversionQueueItem> items\n+        = session.createCriteria(FileConversionQueueItem.class)\n+          .add(Restrictions.eq(\"status\", FileConversionStatus.NOT_STARTED.name())).list();\n+      session.close();\n+\n+      log.debug(\"Number of unstarted conversion items: {}\", items.size());\n+\n+      securityService.pushAdvisor(securityAdvisor);\n+\n+      try {\n+        items.forEach(item -> {\n+\n+          final String ref = item.getReference();\n+\n+          log.debug(\"Converting ref {} ...\", ref);\n+\n+          try {\n+            final ContentResource source = contentHostingService.getResource(ref);\n+\n+            workers.submit(() -> {\n+\n+              log.debug(\"Setting item with ref {} to IN_PROGRESS ...\", ref);\n+              item.setStatus(FileConversionStatus.IN_PROGRESS.name());\n+              item.setAttempts(item.getAttempts() + 1);\n+              item.setLastAttemptStarted(Instant.now());\n+\n+              FileConversionQueueItem inProgressItem = transactionTemplate.execute(status -> {\n+                return (FileConversionQueueItem) sessionFactory.getCurrentSession().merge(item);\n+              });\n+\n+              try {\n+                String sourceFileName = ref.substring(ref.lastIndexOf(\"/\") + 1);\n+                log.debug(\"Source Filename: {}\", sourceFileName);\n+                String convertedFileName = \"\";\n+                if (sourceFileName.contains(\".\")) {\n+                  convertedFileName = sourceFileName.split(\"\\\\.\")[0] + \".pdf\";\n+                } else {\n+                  convertedFileName = sourceFileName + \".pdf\";\n+                }\n+\n+                int timeoutMillis = 5000;\n+                RequestConfig config = RequestConfig.custom()\n+                  .setConnectTimeout(timeoutMillis)\n+                  .setConnectionRequestTimeout(timeoutMillis)\n+                  .setSocketTimeout(timeoutMillis * 1000).build();\n+                CloseableHttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n+\n+                HttpPost httpPost = new HttpPost(converterBaseUrl + \"/lool/convert-to/pdf\");\n+\n+                HttpEntity multipart = MultipartEntityBuilder.create()\n+                  .setMode(HttpMultipartMode.BROWSER_COMPATIBLE)\n+                  .addBinaryBody(\"data\", source.streamContent(), ContentType.MULTIPART_FORM_DATA, URLEncoder.encode(convertedFileName, StandardCharsets.UTF_8.toString()))\n+                  .build();\n+\n+                httpPost.setEntity(multipart);\n+                CloseableHttpResponse response = client.execute(httpPost);\n+                byte[] convertedFileBytes = EntityUtils.toByteArray(response.getEntity());\n+                client.close();\n+\n+                String previewId = ref.substring(0, ref.lastIndexOf(\"/\")) + convertedFileName;\n+\n+                log.debug(\"Converted file id: {}\", previewId);\n+                ResourcePropertiesEdit properties = contentHostingService.newResourceProperties();\n+                properties.addProperty(ResourceProperties.PROP_DISPLAY_NAME, convertedFileName);\n+\n+                securityService.pushAdvisor(securityAdvisor);\n+                ContentResource previewResource\n+                    = contentHostingService.addAttachmentResource(convertedFileName, \"application/pdf\", convertedFileBytes, properties);\n+\n+                contentHostingService.addProperty(ref, ContentHostingService.PREVIEW, previewResource.getId());\n+\n+                log.debug(\"Deleting item with ref {}. It's been successfully converted.\", ref);\n+                transactionTemplate.execute(new TransactionCallbackWithoutResult() {\n+\n+                  public void doInTransactionWithoutResult(TransactionStatus status) {\n+                    FileConversionQueueItem di = (FileConversionQueueItem) sessionFactory.getCurrentSession().merge(inProgressItem);\n+                    sessionFactory.getCurrentSession().delete(di);\n+                  }\n+                });\n+              } catch (Exception e) {\n+                item.setStatus(FileConversionStatus.NOT_STARTED.name());\n+                transactionTemplate.execute(new TransactionCallbackWithoutResult() {\n+\n+                  public void doInTransactionWithoutResult(TransactionStatus status) {\n+                    sessionFactory.getCurrentSession().merge(item);\n+                  }\n+                });\n+                log.error(\"Call to conversion service failed\", e);\n+              } finally {\n+                securityService.popAdvisor(securityAdvisor);\n+              }\n+            });\n+          } catch (IdUnusedException iue) {\n+            log.error(\"No resource found for ref {}\", ref);\n+          } catch (PermissionException pe) {\n+            log.error(\"No permissions to get the resource or its properties. Resource: {}\", ref, pe);\n+          } catch (Exception e) {\n+            log.error(\"Failed to convert resource for ref {}\", ref, e);\n+          }\n+          try {\n+            Thread.sleep(pause);\n+          } catch (Exception se) {\n+          }\n+        });\n+      } finally {\n+        securityService.popAdvisor(securityAdvisor);\n+      }\n+    }, 0, queueIntervalMinutes, TimeUnit.MINUTES);\n+  }\n+\n+  public void destroy() {\n+\n+    workers.shutdownNow();\n+    master.shutdownNow();\n+  }\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  public FileConversionStatus getStatus(String ref) {\n+\n+    if (!enabled) {\n+      return FileConversionStatus.DISABLED;\n+    }\n+\n+    List<FileConversionQueueItem> items = sessionFactory.getCurrentSession()\n+      .createCriteria(FileConversionQueueItem.class)\n+        .add(Restrictions.eq(\"reference\", ref)).list();\n+\n+    if (items.isEmpty() || items.size() > 1) {\n+      log.warn(\"There should be a max of one conversion for {}\", ref);\n+      return FileConversionStatus.UNKNOWN;\n+    } else {\n+      switch(items.get(0).getStatus()) {\n+        case \"NOT_STARTED\":\n+          return FileConversionStatus.NOT_STARTED;\n+        case \"IN_PROGRESS\":\n+          return FileConversionStatus.IN_PROGRESS;\n+        case \"COMPLETED\":\n+          return FileConversionStatus.COMPLETED;\n+        default:\n+          return FileConversionStatus.UNKNOWN;\n+      }", "originalCommit": "450c1887e773276b44e93042f8ba4c1173fe61ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "chunk": "diff --git a/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java b/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java\nindex 2ed6dc10f4..ea3224b2fd 100644\n--- a/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java\n+++ b/kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java\n\n@@ -124,7 +124,7 @@ public class FileConversionServiceImpl implements FileConversionService {\n       Session session = sessionFactory.openSession();\n       List<FileConversionQueueItem> items\n         = session.createCriteria(FileConversionQueueItem.class)\n-          .add(Restrictions.eq(\"status\", FileConversionStatus.NOT_STARTED.name())).list();\n+          .add(Restrictions.eq(\"status\", NOT_STARTED)).list();\n       session.close();\n \n       log.debug(\"Number of unstarted conversion items: {}\", items.size());\n"}}, {"oid": "f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "url": "https://github.com/sakaiproject/sakai/commit/f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-05-15T19:57:52Z", "type": "forcePushed"}, {"oid": "7e5ac4b1f00ee12fca6d050bcf2a25314c8b37ca", "url": "https://github.com/sakaiproject/sakai/commit/7e5ac4b1f00ee12fca6d050bcf2a25314c8b37ca", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-05-18T15:03:50Z", "type": "forcePushed"}, {"oid": "1bd10f315274376640ecaec92ba6cf4ad2efba64", "url": "https://github.com/sakaiproject/sakai/commit/1bd10f315274376640ecaec92ba6cf4ad2efba64", "message": "SAK-43541 FileConversionQueue for converting files using an external service", "committedDate": "2020-05-20T18:48:52Z", "type": "forcePushed"}, {"oid": "bfd2094af85bc2c32858ec16b008610c387f567b", "url": "https://github.com/sakaiproject/sakai/commit/bfd2094af85bc2c32858ec16b008610c387f567b", "message": "SAK-43541 FileConversionQueue for converting files using an external service", "committedDate": "2020-05-20T18:59:49Z", "type": "forcePushed"}, {"oid": "d1dd43b1db67dfa330d5a2d0d0a9b5d025464627", "url": "https://github.com/sakaiproject/sakai/commit/d1dd43b1db67dfa330d5a2d0d0a9b5d025464627", "message": "SAK-43541 FileConversionQueue for converting files using an external service\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-05-27T15:46:21Z", "type": "forcePushed"}, {"oid": "267b050d5afa67ecd8153e0545e860a5af354740", "url": "https://github.com/sakaiproject/sakai/commit/267b050d5afa67ecd8153e0545e860a5af354740", "message": "SAK-43541 FileConversionQueue for converting files using an external service\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-05-27T15:55:38Z", "type": "commit"}, {"oid": "267b050d5afa67ecd8153e0545e860a5af354740", "url": "https://github.com/sakaiproject/sakai/commit/267b050d5afa67ecd8153e0545e860a5af354740", "message": "SAK-43541 FileConversionQueue for converting files using an external service\n\nhttps://jira.sakaiproject.org/browse/SAK-43541", "committedDate": "2020-05-27T15:55:38Z", "type": "forcePushed"}]}