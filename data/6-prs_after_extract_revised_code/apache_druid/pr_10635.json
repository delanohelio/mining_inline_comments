{"pr_number": 10635, "pr_title": "Add SQL functions to format numbers into human readable format", "pr_createdAt": "2020-12-04T09:13:37Z", "pr_url": "https://github.com/apache/druid/pull/10635", "timeline": [{"oid": "6dd891ef72cd782f22e02ccb9899f633f461b77d", "url": "https://github.com/apache/druid/commit/6dd891ef72cd782f22e02ccb9899f633f461b77d", "message": "add binary_byte_format/decimal_byte_format/decimal_format", "committedDate": "2020-12-22T01:21:31Z", "type": "commit"}, {"oid": "1ecbbfc65776d02e32a868300b07741bd95ef4d0", "url": "https://github.com/apache/druid/commit/1ecbbfc65776d02e32a868300b07741bd95ef4d0", "message": "clean code", "committedDate": "2020-12-22T01:21:31Z", "type": "commit"}, {"oid": "a6afe8521c2c49b2187a802fc4f9675a6d88455f", "url": "https://github.com/apache/druid/commit/a6afe8521c2c49b2187a802fc4f9675a6d88455f", "message": "fix doc", "committedDate": "2020-12-22T01:21:31Z", "type": "commit"}, {"oid": "f5fab7159fff0d21186524d74d32a61689cbef26", "url": "https://github.com/apache/druid/commit/f5fab7159fff0d21186524d74d32a61689cbef26", "message": "fix review comments", "committedDate": "2020-12-22T01:21:31Z", "type": "commit"}, {"oid": "be3c333612e7aad74f4b2e90b0bc25b0b33da6af", "url": "https://github.com/apache/druid/commit/be3c333612e7aad74f4b2e90b0bc25b0b33da6af", "message": "add spelling check rules", "committedDate": "2020-12-22T01:21:32Z", "type": "commit"}, {"oid": "e02809a2a976c32328f2be86bd42533cc0c1469f", "url": "https://github.com/apache/druid/commit/e02809a2a976c32328f2be86bd42533cc0c1469f", "message": "remove extra param", "committedDate": "2020-12-22T01:21:32Z", "type": "commit"}, {"oid": "b5a3756633260a0ec55721f47f518abcaaf727f5", "url": "https://github.com/apache/druid/commit/b5a3756633260a0ec55721f47f518abcaaf727f5", "message": "improve type handling and null handling", "committedDate": "2020-12-22T01:21:32Z", "type": "commit"}, {"oid": "e279c18a05c6b93246ab00a46f2d743225cad3ca", "url": "https://github.com/apache/druid/commit/e279c18a05c6b93246ab00a46f2d743225cad3ca", "message": "remove extra zeros", "committedDate": "2020-12-22T01:21:32Z", "type": "commit"}, {"oid": "91e6a550ff8dbacae2d6da91262784df0a52d6c5", "url": "https://github.com/apache/druid/commit/91e6a550ff8dbacae2d6da91262784df0a52d6c5", "message": "fix tests and add space between unit suffix and number as most size-format functions do", "committedDate": "2020-12-22T01:39:23Z", "type": "commit"}, {"oid": "91e6a550ff8dbacae2d6da91262784df0a52d6c5", "url": "https://github.com/apache/druid/commit/91e6a550ff8dbacae2d6da91262784df0a52d6c5", "message": "fix tests and add space between unit suffix and number as most size-format functions do", "committedDate": "2020-12-22T01:39:23Z", "type": "forcePushed"}, {"oid": "5d0fe124f5438e608d3d3eda1f80f39fa17a56ff", "url": "https://github.com/apache/druid/commit/5d0fe124f5438e608d3d3eda1f80f39fa17a56ff", "message": "fix tests", "committedDate": "2020-12-23T01:12:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTc4Mg==", "url": "https://github.com/apache/druid/pull/10635#discussion_r547515782", "bodyText": "All unit tests are run with both values of druid.generic.useDefaultValueForNull, so it isn't necessary to explicitly configure it. What we typically do is try to just write the test to check for the mode and adjust the expectation accordingly, e.g. to use another example from this file\nassertExpr(\"lpad(x, 2, '')\", NullHandling.replaceWithDefault() ? null : \"fo\");", "author": "clintropolis", "createdAt": "2020-12-22T21:28:56Z", "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "diffHunk": "@@ -519,6 +525,203 @@ public void testLeast()\n     assertExpr(\"least(1, null, 'A')\", \"1\");\n   }\n \n+  @Test\n+  public void testSizeFormat()\n+  {\n+    assertExpr(\"binary_byte_format(-1024)\", \"-1.00 KiB\");\n+    assertExpr(\"binary_byte_format(1024)\", \"1.00 KiB\");\n+    assertExpr(\"binary_byte_format(1024*1024)\", \"1.00 MiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024)\", \"1.00 GiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024*1024)\", \"1.00 TiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024*1024*1024)\", \"1.00 PiB\");\n+\n+    assertExpr(\"decimal_byte_format(-1000)\", \"-1.00 KB\");\n+    assertExpr(\"decimal_byte_format(1000)\", \"1.00 KB\");\n+    assertExpr(\"decimal_byte_format(1000*1000)\", \"1.00 MB\");\n+    assertExpr(\"decimal_byte_format(1000*1000*1000)\", \"1.00 GB\");\n+    assertExpr(\"decimal_byte_format(1000*1000*1000*1000)\", \"1.00 TB\");\n+\n+    assertExpr(\"decimal_format(-1000)\", \"-1.00 K\");\n+    assertExpr(\"decimal_format(1000)\", \"1.00 K\");\n+    assertExpr(\"decimal_format(1000*1000)\", \"1.00 M\");\n+    assertExpr(\"decimal_format(1000*1000*1000)\", \"1.00 G\");\n+    assertExpr(\"decimal_format(1000*1000*1000*1000)\", \"1.00 T\");\n+  }\n+\n+  @Test\n+  public void testSizeFormatWithDifferentPrecision()\n+  {\n+    assertExpr(\"binary_byte_format(1024, 0)\", \"1 KiB\");\n+    assertExpr(\"binary_byte_format(1024*1024, 1)\", \"1.0 MiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024, 2)\", \"1.00 GiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024*1024, 3)\", \"1.000 TiB\");\n+\n+    assertExpr(\"decimal_byte_format(1234, 0)\", \"1 KB\");\n+    assertExpr(\"decimal_byte_format(1234*1000, 1)\", \"1.2 MB\");\n+    assertExpr(\"decimal_byte_format(1234*1000*1000, 2)\", \"1.23 GB\");\n+    assertExpr(\"decimal_byte_format(1234*1000*1000*1000, 3)\", \"1.234 TB\");\n+\n+    assertExpr(\"decimal_format(1234, 0)\", \"1 K\");\n+    assertExpr(\"decimal_format(1234*1000,1)\", \"1.2 M\");\n+    assertExpr(\"decimal_format(1234*1000*1000,2)\", \"1.23 G\");\n+    assertExpr(\"decimal_format(1234*1000*1000*1000,3)\", \"1.234 T\");\n+  }\n+\n+  @Test\n+  public void testSizeFormatWithEdgeCases()\n+  {\n+    //a nonexist value is null which is treated as 0\n+    assertExpr(\"binary_byte_format(nonexist)\", \"0 B\");\n+\n+    //f = 12.34\n+    assertExpr(\"binary_byte_format(f)\", \"12 B\");\n+\n+    //nan is Double.NaN\n+    assertExpr(\"binary_byte_format(nan)\", \"0 B\");\n+\n+    //inf = Double.POSITIVE_INFINITY\n+    assertExpr(\"binary_byte_format(inf)\", \"8.00 EiB\");\n+\n+    //inf = Double.NEGATIVE_INFINITY\n+    assertExpr(\"binary_byte_format(-inf)\", \"-8.00 EiB\");\n+\n+    // o = 0\n+    assertExpr(\"binary_byte_format(o)\", \"0 B\");\n+\n+    // od = 0D\n+    assertExpr(\"binary_byte_format(od)\", \"0 B\");\n+\n+    // of = 0F\n+    assertExpr(\"binary_byte_format(of)\", \"0 B\");\n+  }\n+\n+  @Test\n+  public void testSizeForatInvalidArgumentType()\n+  {\n+    try {\n+      //x = \"foo\"\n+      Parser.parse(\"binary_byte_format(x)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs a number as its first argument\", e.getMessage());\n+    }\n+\n+    try {\n+      //x = \"foo\"\n+      Parser.parse(\"binary_byte_format(1024, x)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs an integer as its second argument\", e.getMessage());\n+    }\n+\n+    try {\n+      //of = 0F\n+      Parser.parse(\"binary_byte_format(1024, of)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs an integer as its second argument\", e.getMessage());\n+    }\n+\n+    try {\n+      //of = 0F\n+      Parser.parse(\"binary_byte_format(1024, nonexist)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs an integer as its second argument\", e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void testSizeFormatInvalidPrecision()\n+  {\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, maxLong)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[9223372036854775807] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, minLong)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[-9223372036854775808] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, -1)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[-1] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, 4)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[4] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void testSizeFormatInvalidArgumentSize()\n+  {\n+    expectedException.expect(IAE.class);\n+    expectedException.expectMessage(\"Function[binary_byte_format] needs 1 or 2 arguments\");\n+    Parser.parse(\"binary_byte_format(1024, 2, 3)\", ExprMacroTable.nil())\n+          .eval(bindings);\n+  }\n+\n+  @Test\n+  public void testSizeFormatWithNoDefaultValueForNull()\n+  {\n+    NullHandling.updateForTests(false);", "originalCommit": "91e6a550ff8dbacae2d6da91262784df0a52d6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcyNzIxMw==", "url": "https://github.com/apache/druid/pull/10635#discussion_r551727213", "bodyText": "MySQL ships a similar function format_bytes\nI struggled the two different approaches at first. And at last I chose to do it by 3 different functions. The reasons are,\n\n\ndifferent function names are more meaningful than different arguments for one function. Since there're 3 different unit systems in this PR, how to name them in a short enough way and without ambiguity is a big challenge. For example,  FORMAT(number, 'si'), FORMAT(number, 'dec'), si and dec are standard abbreviation and short enough but they're hard to understand; FORMAT(number, 'binary_byte'), it's clear enough, but it's not so simple compared to binary_byte_format(number)\n\n\nat the underlying layer, there are always different format functions, and if we provide one function at the user side, we have to do some checks on the format specifier and dispatch calls to those different functions. It's a little bit simple if different functions are provided.\n\n\nBut as you mentioned, there are also some drawbacks in this way. If the standard is to keep consistent with other databases or keep less numbers of functions exposed to users, maybe we need to combine these functions together.", "author": "FrankChen021", "createdAt": "2021-01-05T05:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8e4eede275f1116ba8f2766fb014e0d6ecda600a", "chunk": "diff --git a/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java b/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java\nindex eed83c6e25..316396e315 100644\n--- a/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java\n+++ b/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java\n\n@@ -721,6 +721,58 @@ public class FunctionTest extends InitializedNullHandlingTest\n     NullHandling.updateForTests(true);\n   }\n \n+  @Test\n+  public void testBitwise()\n+  {\n+    // happy path maths\n+    assertExpr(\"bitwiseAnd(3, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(2, 1)\", 0L);\n+    assertExpr(\"bitwiseOr(3, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1)\", 3L);\n+    assertExpr(\"bitwiseXor(3, 1)\", 2L);\n+    assertExpr(\"bitwiseXor(2, 1)\", 3L);\n+    assertExpr(\"bitwiseShiftLeft(2, 1)\", 4L);\n+    assertExpr(\"bitwiseShiftRight(2, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(bitwiseComplement(1), 7)\", 6L);\n+\n+    // funny types\n+    // two strings is sad\n+    assertExpr(\"bitwiseAnd('2', '1')\", null);\n+    // but one is ok, druid forgives you\n+    assertExpr(\"bitwiseAnd(3, '1')\", 1L);\n+    assertExpr(\"bitwiseAnd(2, null)\", NullHandling.replaceWithDefault() ? 0L : null);\n+\n+    // unary doesn't accept any slop\n+    assertExpr(\"bitwiseComplement('1')\", null);\n+    assertExpr(\"bitwiseComplement(null)\", null);\n+\n+    // doubles are cast\n+    assertExpr(\"bitwiseOr(2.345, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1.3)\", 3L);\n+    assertExpr(\"bitwiseAnd(2.345, 2.0)\", 2L);\n+\n+    // but can be converted to be double-like\n+    assertExpr(\n+        \"bitwiseAnd(bitwiseConvertDoubleToLongBits(2.345), bitwiseConvertDoubleToLongBits(2.0))\",\n+        4611686018427387904L\n+    );\n+    assertExpr(\n+        \"bitwiseConvertLongBitsToDouble(bitwiseAnd(bitwiseConvertDoubleToLongBits(2.345), bitwiseConvertDoubleToLongBits(2.0)))\",\n+        2.0\n+    );\n+    assertExpr(\"bitwiseConvertDoubleToLongBits(2.0)\", 4611686018427387904L);\n+    assertExpr(\"bitwiseConvertDoubleToLongBits(bitwiseConvertDoubleToLongBits(2.0))\", 4886405595696988160L);\n+    assertExpr(\"bitwiseConvertLongBitsToDouble(4611686018427387904)\", 2.0);\n+    assertExpr(\"bitwiseConvertLongBitsToDouble(bitwiseConvertLongBitsToDouble(4611686018427387904))\", 1.0E-323);\n+\n+    // conversion returns null if nonsense inputs\n+    assertExpr(\"bitwiseConvertLongBitsToDouble('wat')\", null);\n+    assertExpr(\"bitwiseConvertLongBitsToDouble('1')\", null);\n+    assertExpr(\"bitwiseConvertLongBitsToDouble(null)\", null);\n+    assertExpr(\"bitwiseConvertDoubleToLongBits('wat')\", null);\n+    assertExpr(\"bitwiseConvertDoubleToLongBits('1.0')\", null);\n+    assertExpr(\"bitwiseConvertDoubleToLongBits(null)\", null);\n+  }\n \n   private void assertExpr(final String expression, @Nullable final Object expectedResult)\n   {\n"}}, {"oid": "8e4eede275f1116ba8f2766fb014e0d6ecda600a", "url": "https://github.com/apache/druid/commit/8e4eede275f1116ba8f2766fb014e0d6ecda600a", "message": "merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-02-22T07:24:56Z", "type": "commit"}, {"oid": "94206b693ce67cf66741f340360e95268aeb3246", "url": "https://github.com/apache/druid/commit/94206b693ce67cf66741f340360e95268aeb3246", "message": "add examples", "committedDate": "2021-02-22T07:39:33Z", "type": "commit"}, {"oid": "f19e6a59ef82e4d056e05a6954b3a9203a040eec", "url": "https://github.com/apache/druid/commit/f19e6a59ef82e4d056e05a6954b3a9203a040eec", "message": "change function names according to review comments", "committedDate": "2021-02-22T09:09:28Z", "type": "commit"}, {"oid": "5dca644d6877d69dbc06d150f330f8fd0dcbaafa", "url": "https://github.com/apache/druid/commit/5dca644d6877d69dbc06d150f330f8fd0dcbaafa", "message": "merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-03-05T08:38:23Z", "type": "commit"}, {"oid": "47d22f9b0f479fa920a2315e1429c890859391c7", "url": "https://github.com/apache/druid/commit/47d22f9b0f479fa920a2315e1429c890859391c7", "message": "fix merge\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-03-05T10:24:17Z", "type": "commit"}, {"oid": "ad7d8312c46c22db73dada4f5e14caf894e976c0", "url": "https://github.com/apache/druid/commit/ad7d8312c46c22db73dada4f5e14caf894e976c0", "message": "no need to configure NullHandling explicitly for tests\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-03-05T10:29:28Z", "type": "commit"}, {"oid": "c3dbb1e5e0d5fabfdb116de89f0657a772605d3d", "url": "https://github.com/apache/druid/commit/c3dbb1e5e0d5fabfdb116de89f0657a772605d3d", "message": "fix tests in SQL-Compatible mode\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-03-08T09:32:25Z", "type": "commit"}, {"oid": "f21bc878228dd68f11d2ff06afb5d543c68ad24e", "url": "https://github.com/apache/druid/commit/f21bc878228dd68f11d2ff06afb5d543c68ad24e", "message": "Merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-05-13T02:01:15Z", "type": "commit"}, {"oid": "f21bc878228dd68f11d2ff06afb5d543c68ad24e", "url": "https://github.com/apache/druid/commit/f21bc878228dd68f11d2ff06afb5d543c68ad24e", "message": "Merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-05-13T02:01:15Z", "type": "forcePushed"}, {"oid": "81195458fda6bb3f1ff2f1d918d5bf87568e2699", "url": "https://github.com/apache/druid/commit/81195458fda6bb3f1ff2f1d918d5bf87568e2699", "message": "Merge branch 'master' into size-format to resolve conflicts", "committedDate": "2021-06-18T08:22:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjA5OTg1Mg==", "url": "https://github.com/apache/druid/pull/10635#discussion_r656099852", "bodyText": "this should use the recently added returnTypeCascadeNullable since it returns null if the input is null (see #11327)", "author": "clintropolis", "createdAt": "2021-06-22T10:45:19Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/HumanReadableFormatOperatorConversion.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.expression.builtin;\n+\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.SqlFunction;\n+import org.apache.calcite.sql.SqlFunctionCategory;\n+import org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.calcite.sql.SqlOperator;\n+import org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.calcite.sql.type.SqlOperandTypeChecker;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.segment.column.RowSignature;\n+import org.apache.druid.sql.calcite.expression.DruidExpression;\n+import org.apache.druid.sql.calcite.expression.OperatorConversions;\n+import org.apache.druid.sql.calcite.expression.SqlOperatorConversion;\n+import org.apache.druid.sql.calcite.planner.PlannerContext;\n+\n+public class HumanReadableFormatOperatorConversion implements SqlOperatorConversion\n+{\n+  public static final SqlOperatorConversion BINARY_BYTE_FORMAT = new HumanReadableFormatOperatorConversion(\"human_readable_binary_byte_format\");\n+  public static final SqlOperatorConversion DECIMAL_BYTE_FORMAT = new HumanReadableFormatOperatorConversion(\"human_readable_decimal_byte_format\");\n+  public static final SqlOperatorConversion DECIMAL_FORMAT = new HumanReadableFormatOperatorConversion(\"human_readable_decimal_format\");\n+\n+  private final String name;\n+  private final SqlFunction sqlFunction;\n+\n+  private HumanReadableFormatOperatorConversion(String name)\n+  {\n+    this.sqlFunction = OperatorConversions\n+        .operatorBuilder(StringUtils.toUpperCase(name))\n+        .operandTypeChecker(new HumanReadableFormatOperandTypeChecker())\n+        .functionCategory(SqlFunctionCategory.STRING)\n+        .returnTypeNonNull(SqlTypeName.VARCHAR)", "originalCommit": "81195458fda6bb3f1ff2f1d918d5bf87568e2699", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Njg5MzkwMg==", "url": "https://github.com/apache/druid/pull/10635#discussion_r656893902", "bodyText": "Fixed", "author": "FrankChen021", "createdAt": "2021-06-23T08:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjA5OTg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fc7cc9bd95aeaab565ce1ad9b05b41c34935e7de", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/HumanReadableFormatOperatorConversion.java b/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/HumanReadableFormatOperatorConversion.java\nindex 4002f625b5..f9f06e10f3 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/HumanReadableFormatOperatorConversion.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/HumanReadableFormatOperatorConversion.java\n\n@@ -51,7 +51,7 @@ public class HumanReadableFormatOperatorConversion implements SqlOperatorConvers\n         .operatorBuilder(StringUtils.toUpperCase(name))\n         .operandTypeChecker(new HumanReadableFormatOperandTypeChecker())\n         .functionCategory(SqlFunctionCategory.STRING)\n-        .returnTypeNonNull(SqlTypeName.VARCHAR)\n+        .returnTypeCascadeNullable(SqlTypeName.VARCHAR)\n         .build();\n \n     this.name = name;\n"}}, {"oid": "fc7cc9bd95aeaab565ce1ad9b05b41c34935e7de", "url": "https://github.com/apache/druid/commit/fc7cc9bd95aeaab565ce1ad9b05b41c34935e7de", "message": "Resolve review comments", "committedDate": "2021-06-23T08:47:05Z", "type": "commit"}, {"oid": "fa1f05795e2f829f977ed89cf10627f2727552d7", "url": "https://github.com/apache/druid/commit/fa1f05795e2f829f977ed89cf10627f2727552d7", "message": "Update SQL test case to check null handling", "committedDate": "2021-06-23T08:49:46Z", "type": "commit"}, {"oid": "12edaabc96f385a2cd400f00ca71af74d0c7e160", "url": "https://github.com/apache/druid/commit/12edaabc96f385a2cd400f00ca71af74d0c7e160", "message": "Fix intellij inspections", "committedDate": "2021-06-24T01:54:35Z", "type": "commit"}, {"oid": "27d9a41ade079ea807650adebf3fa5b6dbe806ba", "url": "https://github.com/apache/druid/commit/27d9a41ade079ea807650adebf3fa5b6dbe806ba", "message": "Merge branch 'master' to resolve conflicts", "committedDate": "2021-06-26T16:02:05Z", "type": "commit"}, {"oid": "27d9a41ade079ea807650adebf3fa5b6dbe806ba", "url": "https://github.com/apache/druid/commit/27d9a41ade079ea807650adebf3fa5b6dbe806ba", "message": "Merge branch 'master' to resolve conflicts", "committedDate": "2021-06-26T16:02:05Z", "type": "forcePushed"}, {"oid": "30eb6eda3c521dc65bc36ef5f607332cee074bd2", "url": "https://github.com/apache/druid/commit/30eb6eda3c521dc65bc36ef5f607332cee074bd2", "message": "Add more examples", "committedDate": "2021-06-29T09:12:31Z", "type": "commit"}, {"oid": "e773dac201b3c56834ae31b88cc336b3cbf500a0", "url": "https://github.com/apache/druid/commit/e773dac201b3c56834ae31b88cc336b3cbf500a0", "message": "Fix example", "committedDate": "2021-06-29T09:15:33Z", "type": "commit"}, {"oid": "f3c62a3ac69a38a8b8372fa5ea62914dc5debc51", "url": "https://github.com/apache/druid/commit/f3c62a3ac69a38a8b8372fa5ea62914dc5debc51", "message": "Merge branch 'master' into size-format\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2021-08-13T06:57:35Z", "type": "commit"}]}