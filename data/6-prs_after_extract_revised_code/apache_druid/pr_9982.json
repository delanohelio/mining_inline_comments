{"pr_number": 9982, "pr_title": "make joinables closeable", "pr_createdAt": "2020-06-03T20:53:55Z", "pr_url": "https://github.com/apache/druid/pull/9982", "timeline": [{"oid": "d7896d53714d4d3fb7a795037f8ef4485fa57c82", "url": "https://github.com/apache/druid/commit/d7896d53714d4d3fb7a795037f8ef4485fa57c82", "message": "make joinables closeable", "committedDate": "2020-06-03T20:42:51Z", "type": "commit"}, {"oid": "c68ba6ab23c81cccb852e7d1fae5e37ac4043014", "url": "https://github.com/apache/druid/commit/c68ba6ab23c81cccb852e7d1fae5e37ac4043014", "message": "tests and adjustments", "committedDate": "2020-06-04T09:24:51Z", "type": "commit"}, {"oid": "c01963cd7f7d2d6891170f9aceedbfe080e74bec", "url": "https://github.com/apache/druid/commit/c01963cd7f7d2d6891170f9aceedbfe080e74bec", "message": "refactor to make join stuffs impelement ReferenceCountedObject instead of Closable, more tests", "committedDate": "2020-06-05T11:41:36Z", "type": "commit"}, {"oid": "8236e0dba7da90a6ea03ae6ebfff9a6f2642caea", "url": "https://github.com/apache/druid/commit/8236e0dba7da90a6ea03ae6ebfff9a6f2642caea", "message": "fixes", "committedDate": "2020-06-05T20:47:26Z", "type": "commit"}, {"oid": "c32c2c27aa546f1e3170c9f88f01b1094d86fd76", "url": "https://github.com/apache/druid/commit/c32c2c27aa546f1e3170c9f88f01b1094d86fd76", "message": "javadocs and stuff", "committedDate": "2020-06-06T04:54:58Z", "type": "commit"}, {"oid": "b4712207608543708b4f5a54adc180cf27ce9cb3", "url": "https://github.com/apache/druid/commit/b4712207608543708b4f5a54adc180cf27ce9cb3", "message": "Merge remote-tracking branch 'upstream/master' into closeable-joinable", "committedDate": "2020-06-08T09:47:28Z", "type": "commit"}, {"oid": "c52884284f66faec5037221e4078bbb544379f48", "url": "https://github.com/apache/druid/commit/c52884284f66faec5037221e4078bbb544379f48", "message": "fix bugs", "committedDate": "2020-06-08T21:53:59Z", "type": "commit"}, {"oid": "7c69e1b85fc9b2ca77d33a7f2e2ecf015976343e", "url": "https://github.com/apache/druid/commit/7c69e1b85fc9b2ca77d33a7f2e2ecf015976343e", "message": "more test", "committedDate": "2020-06-09T00:19:05Z", "type": "commit"}, {"oid": "f3ac57f1d93106affa09161266d7abdca6ac2042", "url": "https://github.com/apache/druid/commit/f3ac57f1d93106affa09161266d7abdca6ac2042", "message": "fix lgtm alert", "committedDate": "2020-06-09T01:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDE0NQ==", "url": "https://github.com/apache/druid/pull/9982#discussion_r436240145", "bodyText": "I think Closer should be Closeable here", "author": "jon-wei", "createdAt": "2020-06-06T05:27:02Z", "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.java.util.common.io.Closer;\n+\n+import java.io.Closeable;\n+import java.util.Optional;\n+\n+/**\n+ * Interface for an object that may have a reference acquired in the form of a {@link Closeable}. This is intended to be\n+ * used with an implementation of {@link ReferenceCountingCloseableObject}, or anything else that wishes to provide\n+ * a method to account for the acquire and release of a reference to the object.\n+ */\n+public interface ReferenceCountedObject\n+{\n+  /**\n+   * This method is expected to increment a reference count and provide a {@link Closer} that decrements the reference", "originalCommit": "c32c2c27aa546f1e3170c9f88f01b1094d86fd76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNTg1MA==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437125850", "bodyText": "Oops, thanks, was previously using Closer but changed and didn't fixup javadoc", "author": "clintropolis", "createdAt": "2020-06-09T04:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e0606ad52d7b9b3cf33021cf28fc6a4ed5446fda", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java b/processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java\nindex fe7a612b0d..b293fd4c00 100644\n--- a/processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java\n+++ b/processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java\n\n@@ -19,8 +19,6 @@\n \n package org.apache.druid.segment;\n \n-import org.apache.druid.java.util.common.io.Closer;\n-\n import java.io.Closeable;\n import java.util.Optional;\n \n"}}, {"oid": "d1c19a0c29a16eb0864f96be4b2e37d2dacf546d", "url": "https://github.com/apache/druid/commit/d1c19a0c29a16eb0864f96be4b2e37d2dacf546d", "message": "simplify", "committedDate": "2020-06-09T04:03:52Z", "type": "commit"}, {"oid": "e0606ad52d7b9b3cf33021cf28fc6a4ed5446fda", "url": "https://github.com/apache/druid/commit/e0606ad52d7b9b3cf33021cf28fc6a4ed5446fda", "message": "fixup javadoc", "committedDate": "2020-06-09T04:07:21Z", "type": "commit"}, {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094", "url": "https://github.com/apache/druid/commit/4fd013520210287d8db2b56a7f1e65d62121a094", "message": "Merge remote-tracking branch 'upstream/master' into closeable-joinable", "committedDate": "2020-06-09T11:33:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTM4OA==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437611388", "bodyText": "nit: it's emitting nothing and can be a Logger.", "author": "jihoonson", "createdAt": "2020-06-09T17:49:25Z", "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.java.util.common.io.Closer;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.io.Closeable;\n+import java.util.Optional;\n+import java.util.concurrent.Phaser;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * ReferenceCountingCloseableObject implements something like automatic reference count-based resource management,\n+ * backed by a {@link Phaser}.\n+ *\n+ * ReferenceCountingCloseableObject allows consumers to call {@link #close()} before some other \"users\", which called\n+ * {@link #increment()} or {@link #incrementReferenceAndDecrementOnceCloseable()}, but have not called\n+ * {@link #decrement()} yet or the closer for {@link #incrementReferenceAndDecrementOnceCloseable()}, and the wrapped\n+ * object won't be actually closed until that all references are released.\n+ */\n+public abstract class ReferenceCountingCloseableObject<BaseObject extends Closeable> implements Closeable\n+{\n+  private static final EmittingLogger log = new EmittingLogger(ReferenceCountingCloseableObject.class);", "originalCommit": "4fd013520210287d8db2b56a7f1e65d62121a094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTExNw==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755117", "bodyText": "Ah, I just copied this from ReferenceCountingSegment, changed.", "author": "clintropolis", "createdAt": "2020-06-09T22:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "631501e1c33b1d1df1495bbfef542da4a771cb03", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java b/processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java\nindex 717c6f60a0..db37fc5956 100644\n--- a/processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java\n+++ b/processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java\n\n@@ -20,7 +20,7 @@\n package org.apache.druid.segment;\n \n import org.apache.druid.java.util.common.io.Closer;\n-import org.apache.druid.java.util.emitter.EmittingLogger;\n+import org.apache.druid.java.util.common.logger.Logger;\n \n import java.io.Closeable;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNjg0MA==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437616840", "bodyText": "Hmm, should the contract of acquireReferences() clarify that this method should never throw an exception? Otherwise, we should make sure the closer will be safely closed on exceptions.", "author": "jihoonson", "createdAt": "2020-06-09T17:58:52Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java", "diffHunk": "@@ -98,4 +101,30 @@ public void close() throws IOException\n   {\n     baseSegment.close();\n   }\n+\n+  @Override\n+  public Optional<Closeable> acquireReferences()\n+  {\n+    Closer closer = Closer.create();\n+    boolean acquireFailed = baseSegment.acquireReferences().map(closeable -> {\n+      closer.register(closeable);\n+      return false;\n+    }).orElse(true);\n+\n+    for (JoinableClause claws : clauses) {\n+      if (acquireFailed) {\n+        break;\n+      }\n+      acquireFailed |= claws.acquireReferences().map(closeable -> {", "originalCommit": "4fd013520210287d8db2b56a7f1e65d62121a094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTE0Mg==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755142", "bodyText": "modified javadoc to more clearly explain the contract", "author": "clintropolis", "createdAt": "2020-06-09T22:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNjg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "7d53883c99890d2431adeb5ca132739a53f9080d", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java\nindex 8845e6c69d..67e2c261ff 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java\n\n@@ -106,25 +106,30 @@ public class HashJoinSegment implements SegmentReference\n   public Optional<Closeable> acquireReferences()\n   {\n     Closer closer = Closer.create();\n-    boolean acquireFailed = baseSegment.acquireReferences().map(closeable -> {\n-      closer.register(closeable);\n-      return false;\n-    }).orElse(true);\n-\n-    for (JoinableClause claws : clauses) {\n-      if (acquireFailed) {\n-        break;\n-      }\n-      acquireFailed |= claws.acquireReferences().map(closeable -> {\n+    try {\n+      boolean acquireFailed = baseSegment.acquireReferences().map(closeable -> {\n         closer.register(closeable);\n         return false;\n       }).orElse(true);\n-    }\n-    if (acquireFailed) {\n+\n+      for (JoinableClause joinClause : clauses) {\n+        if (acquireFailed) {\n+          break;\n+        }\n+        acquireFailed |= joinClause.acquireReferences().map(closeable -> {\n+          closer.register(closeable);\n+          return false;\n+        }).orElse(true);\n+      }\n+      if (acquireFailed) {\n+        CloseQuietly.close(closer);\n+        return Optional.empty();\n+      } else {\n+        return Optional.of(closer);\n+      }\n+    } catch (Exception ex) {\n       CloseQuietly.close(closer);\n       return Optional.empty();\n-    } else {\n-      return Optional.of(closer);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyMjIwMA==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437622200", "bodyText": "nit: Javadoc?", "author": "jihoonson", "createdAt": "2020-06-09T18:08:14Z", "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java", "diffHunk": "@@ -30,8 +31,11 @@\n  *\n  * The main user of this class is {@link IndexedTableJoinable}, and its main purpose is to participate in joins.\n  */\n-public interface IndexedTable\n+public interface IndexedTable extends ReferenceCountedObject\n {\n+  @SuppressWarnings(\"unused\")\n+  String version();", "originalCommit": "4fd013520210287d8db2b56a7f1e65d62121a094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTI1OQ==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755259", "bodyText": "added", "author": "clintropolis", "createdAt": "2020-06-09T22:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyMjIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "631501e1c33b1d1df1495bbfef542da4a771cb03", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java b/processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java\nindex c6db7e08b0..ed685cf83b 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java\n\n@@ -33,6 +33,9 @@ import java.util.Set;\n  */\n public interface IndexedTable extends ReferenceCountedObject\n {\n+  /**\n+   * Returns the version of this table, used to compare against when loading a new version of the table\n+   */\n   @SuppressWarnings(\"unused\")\n   String version();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTU3NQ==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437635575", "bodyText": "Probably worth commenting why it should be lazy. Same for other orElseGet().", "author": "jihoonson", "createdAt": "2020-06-09T18:31:10Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/QueryMaker.java", "diffHunk": "@@ -126,7 +126,7 @@ public ObjectMapper getJsonMapper()\n     return DataSourceAnalysis.forDataSource(query.getDataSource())\n                              .getBaseQuerySegmentSpec()\n                              .map(QuerySegmentSpec::getIntervals)\n-                             .orElse(query.getIntervals());\n+                             .orElseGet(query::getIntervals);", "originalCommit": "4fd013520210287d8db2b56a7f1e65d62121a094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTgyMw==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755823", "bodyText": "I'm not sure a comment is necessary... I think we should probably always use orElseGet if the 'else' isn't a primitive because Optional must eagerly evaluate whatever goes in there. This should maybe be done with some sort of static analysis, but I couldn't figure it out in like the 2 minutes I devoted to it so far.", "author": "clintropolis", "createdAt": "2020-06-09T22:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjY4Mw==", "url": "https://github.com/apache/druid/pull/9982#discussion_r437756683", "bodyText": "btw, I made the changes here after I made the mistake of not using orElseGet in ReferenceCountingSegmentQueryRunner and funny side-effects were happening causing integration tests to fail, so I looked for other usages of orElse and switched the ones that were not returning a primitive or static value to use orElseGet, of which there were only these 2 I think.", "author": "clintropolis", "createdAt": "2020-06-09T22:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTU3NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "631501e1c33b1d1df1495bbfef542da4a771cb03", "url": "https://github.com/apache/druid/commit/631501e1c33b1d1df1495bbfef542da4a771cb03", "message": "review stuffs", "committedDate": "2020-06-09T22:21:47Z", "type": "commit"}, {"oid": "25d299d0e3c79971472c65ef9f79216a0866a435", "url": "https://github.com/apache/druid/commit/25d299d0e3c79971472c65ef9f79216a0866a435", "message": "Merge remote-tracking branch 'upstream/master' into closeable-joinable", "committedDate": "2020-06-09T22:27:00Z", "type": "commit"}, {"oid": "7d53883c99890d2431adeb5ca132739a53f9080d", "url": "https://github.com/apache/druid/commit/7d53883c99890d2431adeb5ca132739a53f9080d", "message": "safeguard against exceptions", "committedDate": "2020-06-09T23:02:46Z", "type": "commit"}, {"oid": "f08f8660801e669d34248fe40e29f45bc28bc0e3", "url": "https://github.com/apache/druid/commit/f08f8660801e669d34248fe40e29f45bc28bc0e3", "message": "i hate this checkstyle rule", "committedDate": "2020-06-10T01:20:42Z", "type": "commit"}, {"oid": "ecf24bf82257c9bc5a3038c549ed2fe97baf1741", "url": "https://github.com/apache/druid/commit/ecf24bf82257c9bc5a3038c549ed2fe97baf1741", "message": "make IndexedTable extend Closeable", "committedDate": "2020-06-10T01:34:35Z", "type": "commit"}]}