{"pr_number": 9373, "pr_title": "Fix join filter push down post-join virtual column handling", "pr_createdAt": "2020-02-17T19:01:03Z", "pr_url": "https://github.com/apache/druid/pull/9373", "timeline": [{"oid": "9c5bdac9696dbcdd93f6ccf4d0696cbecc75d24f", "url": "https://github.com/apache/druid/commit/9c5bdac9696dbcdd93f6ccf4d0696cbecc75d24f", "message": "Fix join filter push down post-join virtual column handling", "committedDate": "2020-02-17T18:57:11Z", "type": "commit"}, {"oid": "2f35d40c2358f1d7039048e08dbaf815c24c5a7c", "url": "https://github.com/apache/druid/commit/2f35d40c2358f1d7039048e08dbaf815c24c5a7c", "message": "Remove unused adapter param, update javadocs", "committedDate": "2020-02-18T21:00:06Z", "type": "commit"}, {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "url": "https://github.com/apache/druid/commit/c6263ded2278ca509ee9bd7dc4647239fd837d8a", "message": "Fix TC", "committedDate": "2020-02-19T00:47:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNDI1NQ==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381434255", "bodyText": "missing unit tests for this in HashJoinSegmentStorageAdapterTest", "author": "suneet-s", "createdAt": "2020-02-19T17:38:36Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n         preJoinVirtualColumns.add(virtualColumn);\n+        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n+        // base column set.\n+        baseColumns.add(virtualColumn.getOutputName());", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMDEzNA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381520134", "bodyText": "This case is covered by JoinFilterAnalyzerTest.test_filterPushDown_factToRegionToCountryLeftFilterOnChannelVirtualColumn", "author": "jon-wei", "createdAt": "2020-02-19T20:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNDI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "73891167d767d76095b7b5172b8b74508b56c7d1", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\nindex 50054d7553..1c57e3f76a 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n\n@@ -224,24 +223,14 @@ public class HashJoinSegmentStorageAdapter implements StorageAdapter\n       @Nullable final QueryMetrics<?> queryMetrics\n   )\n   {\n-    final Set<String> baseColumns = new HashSet<>();\n-    Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n-    Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n \n     final List<VirtualColumn> preJoinVirtualColumns = new ArrayList<>();\n     final List<VirtualColumn> postJoinVirtualColumns = new ArrayList<>();\n-\n-    for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n-      // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n-      if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n-        preJoinVirtualColumns.add(virtualColumn);\n-        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n-        // base column set.\n-        baseColumns.add(virtualColumn.getOutputName());\n-      } else {\n-        postJoinVirtualColumns.add(virtualColumn);\n-      }\n-    }\n+    final Set<String> baseColumns = determineBaseColumnsWithPreAndPostJoinVirtualColumns(\n+        virtualColumns,\n+        preJoinVirtualColumns,\n+        postJoinVirtualColumns\n+    );\n \n     JoinFilterSplit joinFilterSplit = JoinFilterAnalyzer.splitFilter(\n         this,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzkxOA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381437918", "bodyText": "This is very similar to the code above in makeCursors(...) Perhaps move this into a utility function so they stay in sync. Or do you want this function to provide different functionality?", "author": "suneet-s", "createdAt": "2020-02-19T17:44:56Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting\n+  public Set<String> getAdapterBaseColumnNamesWithVirtualColumns(VirtualColumns virtualColumns)\n+  {\n+    final Set<String> baseColumns = new HashSet<>();\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n+\n+    for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n+      if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjIzMA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552230", "bodyText": "I initially wanted it to provide different functionality (where the non-testing version also adds virtual columns to the prejoin/postjoin lists), but I collapsed them into one method", "author": "jon-wei", "createdAt": "2020-02-19T21:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "73891167d767d76095b7b5172b8b74508b56c7d1", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\nindex 50054d7553..1c57e3f76a 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n\n@@ -302,16 +291,42 @@ public class HashJoinSegmentStorageAdapter implements StorageAdapter\n     return enableFilterPushDown;\n   }\n \n-  @VisibleForTesting\n-  public Set<String> getAdapterBaseColumnNamesWithVirtualColumns(VirtualColumns virtualColumns)\n+  /**\n+   * Return a String set containing the name of columns that belong to the base table (including any pre-join virtual\n+   * columns as well).\n+   *\n+   * Additionally, if the preJoinVirtualColumns and/or postJoinVirtualColumns arguments are provided, this method\n+   * will add each VirtualColumn in the provided virtualColumns to either preJoinVirtualColumns or\n+   * postJoinVirtualColumns based on whether the virtual column is pre-join or post-join.\n+   *\n+   * @param virtualColumns List of virtual columns from the query\n+   * @param preJoinVirtualColumns If provided, virtual columns determined to be pre-join will be added to this list\n+   * @param postJoinVirtualColumns If provided, virtual columns determined to be post-join will be added to this list\n+   * @return The set of base column names, including any pre-join virtual columns.\n+   */\n+  public Set<String> determineBaseColumnsWithPreAndPostJoinVirtualColumns(\n+      VirtualColumns virtualColumns,\n+      @Nullable List<VirtualColumn> preJoinVirtualColumns,\n+      @Nullable List<VirtualColumn> postJoinVirtualColumns\n+  )\n   {\n     final Set<String> baseColumns = new HashSet<>();\n     Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n     Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n \n     for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n+      // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n+        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n+        // base column set.\n         baseColumns.add(virtualColumn.getOutputName());\n+        if (preJoinVirtualColumns != null) {\n+          preJoinVirtualColumns.add(virtualColumn);\n+        }\n+      } else {\n+        if (postJoinVirtualColumns != null) {\n+          postJoinVirtualColumns.add(virtualColumn);\n+        }\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTE5Mw==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381439193", "bodyText": "nit: public functions marked VisibleForTesting are hard to maintain, because people can accidentally call this function from another package and there's nothing that warns them they're doing something wrong.\nI also noticed this function is only called in a test, can we refactor this so that we don't need a public VisibleForTesting function", "author": "suneet-s", "createdAt": "2020-02-19T17:47:07Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjQ0Mg==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552442", "bodyText": "I collapsed this into a shared method with the block in makeCursors and removed VisibleForTesting", "author": "jon-wei", "createdAt": "2020-02-19T21:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "73891167d767d76095b7b5172b8b74508b56c7d1", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\nindex 50054d7553..1c57e3f76a 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n\n@@ -302,16 +291,42 @@ public class HashJoinSegmentStorageAdapter implements StorageAdapter\n     return enableFilterPushDown;\n   }\n \n-  @VisibleForTesting\n-  public Set<String> getAdapterBaseColumnNamesWithVirtualColumns(VirtualColumns virtualColumns)\n+  /**\n+   * Return a String set containing the name of columns that belong to the base table (including any pre-join virtual\n+   * columns as well).\n+   *\n+   * Additionally, if the preJoinVirtualColumns and/or postJoinVirtualColumns arguments are provided, this method\n+   * will add each VirtualColumn in the provided virtualColumns to either preJoinVirtualColumns or\n+   * postJoinVirtualColumns based on whether the virtual column is pre-join or post-join.\n+   *\n+   * @param virtualColumns List of virtual columns from the query\n+   * @param preJoinVirtualColumns If provided, virtual columns determined to be pre-join will be added to this list\n+   * @param postJoinVirtualColumns If provided, virtual columns determined to be post-join will be added to this list\n+   * @return The set of base column names, including any pre-join virtual columns.\n+   */\n+  public Set<String> determineBaseColumnsWithPreAndPostJoinVirtualColumns(\n+      VirtualColumns virtualColumns,\n+      @Nullable List<VirtualColumn> preJoinVirtualColumns,\n+      @Nullable List<VirtualColumn> postJoinVirtualColumns\n+  )\n   {\n     final Set<String> baseColumns = new HashSet<>();\n     Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n     Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n \n     for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n+      // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n+        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n+        // base column set.\n         baseColumns.add(virtualColumn.getOutputName());\n+        if (preJoinVirtualColumns != null) {\n+          preJoinVirtualColumns.add(virtualColumn);\n+        }\n+      } else {\n+        if (postJoinVirtualColumns != null) {\n+          postJoinVirtualColumns.add(virtualColumn);\n+        }\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTQxNA==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381439414", "bodyText": "\ud83d\udc4d", "author": "suneet-s", "createdAt": "2020-02-19T17:47:29Z", "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -72,8 +72,21 @@\n   private static final String PUSH_DOWN_VIRTUAL_COLUMN_NAME_BASE = \"JOIN-FILTER-PUSHDOWN-VIRTUAL-COLUMN-\";\n   private static final ColumnSelectorFactory ALL_NULL_COLUMN_SELECTOR_FACTORY = new AllNullColumnSelectorFactory();\n \n+  /**\n+   * Analyze a filter and return a JoinFilterSplit indicating what parts of the filter should be applied pre-join\n+   * and post-join.\n+   *\n+   * @param hashJoinSegmentStorageAdapter The storage adapter that is being queried\n+   * @param baseColumnNames               Set of names of columns that belong to the base table,\n+   *                                      including pre-join virtual columns\n+   * @param originalFilter                Original filter from the query\n+   * @param enableFilterPushDown          Whether to enable filter push down\n+   * @return A JoinFilterSplit indicating what parts of the filter should be applied pre-join\n+   *         and post-join.\n+   */", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MTg5Mg==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381441892", "bodyText": "what happens if one of the required columns is a virtual column?", "author": "suneet-s", "createdAt": "2020-02-19T17:52:00Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjkxMQ==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552911", "bodyText": "Virtual columns currently can't use other virtual columns as input (they're each constructed independently from the base columns), if you tried I think it would just operate as if you referenced a non-existent column", "author": "jon-wei", "createdAt": "2020-02-19T21:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MTg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "73891167d767d76095b7b5172b8b74508b56c7d1", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\nindex 50054d7553..1c57e3f76a 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java\n\n@@ -224,24 +223,14 @@ public class HashJoinSegmentStorageAdapter implements StorageAdapter\n       @Nullable final QueryMetrics<?> queryMetrics\n   )\n   {\n-    final Set<String> baseColumns = new HashSet<>();\n-    Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n-    Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n \n     final List<VirtualColumn> preJoinVirtualColumns = new ArrayList<>();\n     final List<VirtualColumn> postJoinVirtualColumns = new ArrayList<>();\n-\n-    for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n-      // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n-      if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n-        preJoinVirtualColumns.add(virtualColumn);\n-        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n-        // base column set.\n-        baseColumns.add(virtualColumn.getOutputName());\n-      } else {\n-        postJoinVirtualColumns.add(virtualColumn);\n-      }\n-    }\n+    final Set<String> baseColumns = determineBaseColumnsWithPreAndPostJoinVirtualColumns(\n+        virtualColumns,\n+        preJoinVirtualColumns,\n+        postJoinVirtualColumns\n+    );\n \n     JoinFilterSplit joinFilterSplit = JoinFilterAnalyzer.splitFilter(\n         this,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MzA3MQ==", "url": "https://github.com/apache/druid/pull/9373#discussion_r381443071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!requiredBindings.stream().allMatch(requiredBinding -> baseColumnNames.contains(requiredBinding))) {\n          \n          \n            \n                    if (!baseColumnNames.containsAll(requiredBindings)) {", "author": "suneet-s", "createdAt": "2020-02-19T17:54:01Z", "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -538,18 +562,18 @@ private static void getCorrelationForRHSColumn(\n         // We push down if the function only requires base table columns\n         Expr.BindingDetails bindingDetails = lhsExpr.analyzeInputs();\n         Set<String> requiredBindings = bindingDetails.getRequiredBindings();\n-        if (!requiredBindings.stream().allMatch(requiredBinding -> adapter.isBaseColumn(requiredBinding))) {\n+        if (!requiredBindings.stream().allMatch(requiredBinding -> baseColumnNames.contains(requiredBinding))) {", "originalCommit": "c6263ded2278ca509ee9bd7dc4647239fd837d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a79ae99660a5b42f9d6aaa065aafcde2716c48", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java b/processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java\nindex 16fb330d05..dad06865e0 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java\n\n@@ -562,7 +562,7 @@ public class JoinFilterAnalyzer\n         // We push down if the function only requires base table columns\n         Expr.BindingDetails bindingDetails = lhsExpr.analyzeInputs();\n         Set<String> requiredBindings = bindingDetails.getRequiredBindings();\n-        if (!requiredBindings.stream().allMatch(requiredBinding -> baseColumnNames.contains(requiredBinding))) {\n+        if (!baseColumnNames.containsAll(requiredBindings)) {\n           break;\n         }\n         correlatedBaseExpressions.add(lhsExpr);\n"}}, {"oid": "64a79ae99660a5b42f9d6aaa065aafcde2716c48", "url": "https://github.com/apache/druid/commit/64a79ae99660a5b42f9d6aaa065aafcde2716c48", "message": "Update processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java\n\nCo-Authored-By: Suneet Saldanha <44787917+suneet-s@users.noreply.github.com>", "committedDate": "2020-02-19T20:18:01Z", "type": "commit"}, {"oid": "73891167d767d76095b7b5172b8b74508b56c7d1", "url": "https://github.com/apache/druid/commit/73891167d767d76095b7b5172b8b74508b56c7d1", "message": "Address PR comments", "committedDate": "2020-02-19T21:21:32Z", "type": "commit"}, {"oid": "b3edd512067ca207f5c422d661c6cef6bfdcdee0", "url": "https://github.com/apache/druid/commit/b3edd512067ca207f5c422d661c6cef6bfdcdee0", "message": "Merge branch 'fix_join_virtcolumn' of github.com:jon-wei/druid into fix_join_virtcolumn", "committedDate": "2020-02-19T21:21:59Z", "type": "commit"}]}