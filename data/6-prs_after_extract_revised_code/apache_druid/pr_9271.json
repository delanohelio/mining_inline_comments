{"pr_number": 9271, "pr_title": "Expose JoinableFactory through Guice Bindings", "pr_createdAt": "2020-01-28T01:19:33Z", "pr_url": "https://github.com/apache/druid/pull/9271", "timeline": [{"oid": "3f28baf440ed892a44b75ab7e6750ff043146a05", "url": "https://github.com/apache/druid/commit/3f28baf440ed892a44b75ab7e6750ff043146a05", "message": "Make JoinableFactory an extension point\n\nThis change makes it so that extensions can register a JoinableFactory that\nshould be used for a DataSource.\n\nExtensions can provide the factories via DruidBinders#joinableFactoryBinder\nKnown DataSources - like InlineDataSource are provided in the\nJoinableFactoryModule. This module installs a FactoryWarehouse that is\nused to decide which factory should be used to generate the Joinable for\nthe provided DataSource.\n\nThe ExtensionPoint is marked as Beta since it is not yet clear if this\nneeds to remain available to other extensions or if the best way to\nregister a factory is by using the datasource class.", "committedDate": "2020-01-28T01:18:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NjE4OA==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371576188", "bodyText": "Do you want to add a unit test for this class?", "author": "ccaominh", "createdAt": "2020-01-28T01:50:07Z", "path": "server/src/main/java/org/apache/druid/guice/JoinableFactoryModule.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.guice;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.multibindings.MapBinder;\n+import org.apache.druid.query.DataSource;\n+import org.apache.druid.query.InlineDataSource;\n+import org.apache.druid.segment.join.InlineJoinableFactory;\n+import org.apache.druid.segment.join.JoinableFactory;\n+import org.apache.druid.segment.join.MapDataSourceJoinableFactoryWarehouse;\n+\n+import java.util.Map;\n+\n+/**\n+ * Module that installs {@link JoinableFactory} for the appropriate DataSource.\n+ */\n+public class JoinableFactoryModule implements Module", "originalCommit": "3f28baf440ed892a44b75ab7e6750ff043146a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5MjA1Mw==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371592053", "bodyText": "\ud83d\udc4d I have them written in the next patch. Going to wait for any other reviews to come in before pushing that back up", "author": "suneet-s", "createdAt": "2020-01-28T03:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NjE4OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "eaa807002ea0129f033cbf41211deb8fdda7612b", "url": "https://github.com/apache/druid/commit/eaa807002ea0129f033cbf41211deb8fdda7612b", "message": "Add module test", "committedDate": "2020-01-28T07:55:39Z", "type": "commit"}, {"oid": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c", "url": "https://github.com/apache/druid/commit/6d99e5df3a89a8dac42744c611d34bd7dd8cc08c", "message": "Merge remote-tracking branch 'upstream/master' into joinable-factory", "committedDate": "2020-01-28T07:56:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Mzc1Mg==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371663752", "bodyText": "How does it make different from other extension points without @Beta? Does it mean this extension point can change in breaking ways even between minor releases?", "author": "jihoonson", "createdAt": "2020-01-28T08:34:40Z", "path": "processing/src/main/java/org/apache/druid/segment/join/JoinableFactory.java", "diffHunk": "@@ -19,13 +19,17 @@\n \n package org.apache.druid.segment.join;\n \n+import com.google.common.annotations.Beta;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n import org.apache.druid.query.DataSource;\n \n import java.util.Optional;\n \n /**\n  * Utility for creating {@link Joinable} objects.\n  */\n+@Beta", "originalCommit": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3MTgwMg==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371771802", "bodyText": "Yes. That's what I wanted to convey. It may also be that this ExtensionPoint goes away completely in a near future version, so core extensions should not rely on this.", "author": "suneet-s", "createdAt": "2020-01-28T12:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Mzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MjgyMw==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371972823", "bodyText": "It may also be that this ExtensionPoint goes away completely in a near future version, so core extensions should not rely on this.\n\nWould you please add this to the javadoc?\n\nso core extensions should not rely on this.\n\nHmm, would you elaborate more on this? Are you referring to the Druid core extensions here? Per my understanding, the extension point and public api interfaces are more for third party extensions which are neither core nor contrib extensions. I think it doesn\u2019t matter much whether the core or contrib extensions rely on some beta extension points or not because we will fix the code for them by ourselves. But the third party extensions are not in the Druid repository but in their own and so changed in extension points and apis should be noticed.\nHow about making this interface as an extension point once all dusts settle down?", "author": "jihoonson", "createdAt": "2020-01-28T18:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Mzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjY4Mg==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371976682", "bodyText": "Good suggestion. I thought it had to be an extension point for the factory to be bound from an extension. I've removed the annotations.", "author": "suneet-s", "createdAt": "2020-01-28T18:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Mzc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "23731df7e2c06fca6920c332bb52230d8f269f38", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/join/JoinableFactory.java b/processing/src/main/java/org/apache/druid/segment/join/JoinableFactory.java\nindex 42ce2d6407..5016d75a79 100644\n--- a/processing/src/main/java/org/apache/druid/segment/join/JoinableFactory.java\n+++ b/processing/src/main/java/org/apache/druid/segment/join/JoinableFactory.java\n\n@@ -19,8 +19,6 @@\n \n package org.apache.druid.segment.join;\n \n-import com.google.common.annotations.Beta;\n-import org.apache.druid.guice.annotations.ExtensionPoint;\n import org.apache.druid.query.DataSource;\n \n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2NTQxNQ==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371665415", "bodyText": "{@link DruidBinders}?", "author": "jihoonson", "createdAt": "2020-01-28T08:38:48Z", "path": "processing/src/main/java/org/apache/druid/segment/join/MapDataSourceJoinableFactoryWarehouse.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.query.DataSource;\n+\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A {@link JoinableFactory} that delegates to the appropriate factory based on the type of the datasource.\n+ *\n+ * Datasources can register a factory via a DruidBinder", "originalCommit": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3Mjk0Ng==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371772946", "bodyText": "DruidBinders is available in the server sub-module, and the warehouse is in the processing sub-module so it's not available from in here", "author": "suneet-s", "createdAt": "2020-01-28T12:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2NTQxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Nzk3Ng==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371667976", "bodyText": "What is props for?", "author": "jihoonson", "createdAt": "2020-01-28T08:44:55Z", "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.guice;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Key;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import org.apache.druid.query.DataSource;\n+import org.apache.druid.query.InlineDataSource;\n+import org.apache.druid.segment.join.InlineJoinableFactory;\n+import org.apache.druid.segment.join.JoinableFactory;\n+import org.apache.druid.segment.join.MapDataSourceJoinableFactoryWarehouse;\n+import org.apache.druid.segment.join.NoopDataSource;\n+import org.apache.druid.segment.join.NoopJoinableFactory;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class JoinableFactoryModuleTest\n+{\n+  private Injector injector;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Properties props = new Properties();\n+    injector = makeInjectorWithProperties(props);\n+  }\n+\n+  @Test\n+  public void testInjectJoinableFactoryIsSingleton()\n+  {\n+    JoinableFactory factory = injector.getInstance(JoinableFactory.class);\n+    Assert.assertEquals(MapDataSourceJoinableFactoryWarehouse.class, factory.getClass());\n+    JoinableFactory otherFactory = injector.getInstance(JoinableFactory.class);\n+    Assert.assertSame(factory, otherFactory);\n+  }\n+\n+  @Test\n+  public void testInjectDefaultBindingsShouldBeInjected()\n+  {\n+    Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n+        injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n+    Assert.assertEquals(1, joinableFactories.size());\n+    Assert.assertEquals(InlineJoinableFactory.class, joinableFactories.get(InlineDataSource.class).getClass());\n+  }\n+\n+  @Test\n+  public void testJoinableFactoryCanBind()\n+  {\n+    injector = makeInjectorWithProperties(\n+        new Properties(),\n+        binder -> DruidBinders.joinableFactoryBinder(binder).addBinding(NoopDataSource.class).toInstance(NoopJoinableFactory.INSTANCE));\n+    Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n+        injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n+    Assert.assertEquals(2, joinableFactories.size());\n+    Assert.assertEquals(NoopJoinableFactory.INSTANCE, joinableFactories.get(NoopDataSource.class));\n+  }\n+\n+  private Injector makeInjectorWithProperties(final Properties props, Module... otherModules)", "originalCommit": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NTgxNg==", "url": "https://github.com/apache/druid/pull/9271#discussion_r371775816", "bodyText": "oops - I actually don't need a bunch of the bindings here. Removed.", "author": "suneet-s", "createdAt": "2020-01-28T12:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Nzk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "554e36e4dc2029a2c41db4f658abb1c15683f50b", "chunk": "diff --git a/server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java b/server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java\nindex 65bff01362..a3bd0ab055 100644\n--- a/server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java\n+++ b/server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java\n\n@@ -37,10 +37,7 @@ import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n-import javax.validation.Validation;\n-import javax.validation.Validator;\n import java.util.Map;\n-import java.util.Properties;\n \n public class JoinableFactoryModuleTest\n {\n"}}, {"oid": "554e36e4dc2029a2c41db4f658abb1c15683f50b", "url": "https://github.com/apache/druid/commit/554e36e4dc2029a2c41db4f658abb1c15683f50b", "message": "remove useless bindings in test", "committedDate": "2020-01-28T12:42:25Z", "type": "commit"}, {"oid": "23731df7e2c06fca6920c332bb52230d8f269f38", "url": "https://github.com/apache/druid/commit/23731df7e2c06fca6920c332bb52230d8f269f38", "message": "remove ExtensionPoint annotation", "committedDate": "2020-01-28T18:25:58Z", "type": "commit"}, {"oid": "91ee6764cfaee72c2b6226e967882c77bb4034d6", "url": "https://github.com/apache/druid/commit/91ee6764cfaee72c2b6226e967882c77bb4034d6", "message": "Make LifecycleLock not final to help with testing", "committedDate": "2020-01-28T19:08:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MTMxMg==", "url": "https://github.com/apache/druid/pull/9271#discussion_r372081312", "bodyText": "MapJoinableFactory sounds like a nicer name to me since the \"DataSource\" isn't adding much, and this is actually a JoinableFactory, not a JoinableFactoryWarehouse.\nFactories come from warehouses? \ud83d\ude42", "author": "gianm", "createdAt": "2020-01-28T21:57:02Z", "path": "processing/src/main/java/org/apache/druid/segment/join/MapDataSourceJoinableFactoryWarehouse.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.query.DataSource;\n+\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A {@link JoinableFactory} that delegates to the appropriate factory based on the type of the datasource.\n+ *\n+ * Datasources can register a factory via a DruidBinder\n+ */\n+public class MapDataSourceJoinableFactoryWarehouse implements JoinableFactory", "originalCommit": "91ee6764cfaee72c2b6226e967882c77bb4034d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NjM0OQ==", "url": "https://github.com/apache/druid/pull/9271#discussion_r372086349", "bodyText": "many factories in a warehouse? \ud83d\ude43\nI'll change the name in my next patch - I put DataSource in there because I wanted to indicate that it was getting the factory from the datasource. I'll use MapJoinableFactory", "author": "suneet-s", "createdAt": "2020-01-28T22:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MTMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4ODQ5Nw==", "url": "https://github.com/apache/druid/pull/9271#discussion_r372088497", "bodyText": "Changed my mind - decided to make a separate PR to keep the deltas small - #9275", "author": "suneet-s", "createdAt": "2020-01-28T22:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MTMxMg=="}], "type": "inlineReview", "revised_code": null}]}