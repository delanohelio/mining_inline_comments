{"pr_number": 10014, "pr_title": "ROUND and having comparators correctly handle special double values", "pr_createdAt": "2020-06-10T08:33:26Z", "pr_url": "https://github.com/apache/druid/pull/10014", "timeline": [{"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b", "url": "https://github.com/apache/druid/commit/bea321019ae87296b3fe1e53ace4b3b576012a5b", "message": "ROUND and having comparators correctly handle doubles\n\nDouble.NaN, Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY are not real\nnumbers. Because of this, they can not be converted to BigDecimal and instead\nthrow a NumberFormatException.\n\nThis change adds support for calculations that produce these numbers either\nfor use in the `ROUND` function or the HavingSpecMetricComparator by not\nattempting to convert the number to a BigDecimal.\n\nThe bug in ROUND was first introduced in #7224 where we added the ability to\nround to any decimal place. This PR changes the behavior back to using\n`Math.round` if we recognize a number that can not be converted to a\nBigDecimal.", "committedDate": "2020-06-10T08:22:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA==", "url": "https://github.com/apache/druid/pull/10014#discussion_r437956928", "bodyText": "I wasn't sure how to deal with non numbers here, so I decided to leave the behavior as is and let it fail. It's unclear to me if Calcite will allow us to get here. In my local testing, I've seen NumberFormatExceptions thrown in Calcite when I tried to write sql expressions that would compute to Nan or infinity (like 0D / 0).\nMy thoughts were this is an edge case so it's ok to leave this behavior as is.", "author": "suneet-s", "createdAt": "2020-06-10T08:37:21Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "originalCommit": "bea321019ae87296b3fe1e53ace4b3b576012a5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNDA2Nw==", "url": "https://github.com/apache/druid/pull/10014#discussion_r439134067", "bodyText": "Wondering what is your thought on making this reduce to value of 0 (same as the other stuff)", "author": "maytasm", "createdAt": "2020-06-12T00:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTE0NA==", "url": "https://github.com/apache/druid/pull/10014#discussion_r440505144", "bodyText": "I thought this might produce confusing behavior if the literal was used in a comparison operation. For eg. 1 < POSITIVE_INFINITY would return false because POSITIVE_INFINITY would evaluate to if we changed the code here.", "author": "suneet-s", "createdAt": "2020-06-15T23:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTYyMA==", "url": "https://github.com/apache/druid/pull/10014#discussion_r440505620", "bodyText": "I guess the same argument can be made if we compared 2 columns x < y and x was 1, y was POSITIVE_INFINITY then the result of the comparison would be false after this change.", "author": "suneet-s", "createdAt": "2020-06-15T23:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzNDA2NQ==", "url": "https://github.com/apache/druid/pull/10014#discussion_r440534065", "bodyText": "Do you know if this is mention in Druid docs?", "author": "maytasm", "createdAt": "2020-06-16T01:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMTMyMg==", "url": "https://github.com/apache/druid/pull/10014#discussion_r440901322", "bodyText": "I don't think so. I was afraid documenting all the edge cases would make the docs too verbose.", "author": "suneet-s", "createdAt": "2020-06-16T14:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "2c3f405b83dd9b1c9cc04cd5e96adf53c934868d", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java b/sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java\nindex a0099a46f7..c181cb8c88 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java\n\n@@ -121,11 +121,13 @@ public class DruidRexExecutor implements RexExecutor\n           } else {\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n+\n             } else {\n-              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException.\n+              // If you find yourself in such a position, consider casting the literal to a BIGINT so that\n+              // the query can execute.\n               bigDecimal = BigDecimal.valueOf(exprResult.asDouble());\n             }\n-\n             literal = rexBuilder.makeLiteral(bigDecimal, constExp.getType(), true);\n           }\n         } else if (sqlTypeName == SqlTypeName.ARRAY) {\n"}}, {"oid": "ac09d884279cbc3eb366504c3492c067a6d177e6", "url": "https://github.com/apache/druid/commit/ac09d884279cbc3eb366504c3492c067a6d177e6", "message": "Add tests and fix spellcheck", "committedDate": "2020-06-10T14:41:21Z", "type": "commit"}, {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab", "url": "https://github.com/apache/druid/commit/526964cc2fad25cce996a475825f2f80f83b6bab", "message": "update error message in ExpressionsTest", "committedDate": "2020-06-10T15:52:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzAwNA==", "url": "https://github.com/apache/druid/pull/10014#discussion_r439133004", "bodyText": "Should we use Math.round(val) here instead of hard-code to 0?", "author": "maytasm", "createdAt": "2020-06-12T00:00:03Z", "path": "core/src/main/java/org/apache/druid/math/expr/Function.java", "diffHunk": "@@ -737,7 +745,12 @@ private ExprEval eval(ExprEval param, int scale)\n       if (param.type() == ExprType.LONG) {\n         return ExprEval.of(BigDecimal.valueOf(param.asLong()).setScale(scale, RoundingMode.HALF_UP).longValue());\n       } else if (param.type() == ExprType.DOUBLE) {\n-        return ExprEval.of(BigDecimal.valueOf(param.asDouble()).setScale(scale, RoundingMode.HALF_UP).doubleValue());\n+        double val = param.asDouble();\n+        if (Double.isNaN(val) || val == Double.POSITIVE_INFINITY || val == Double.NEGATIVE_INFINITY) {\n+          // This is the behavior of Math.round()\n+          return ExprEval.of(0L);", "originalCommit": "526964cc2fad25cce996a475825f2f80f83b6bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjA5Ng==", "url": "https://github.com/apache/druid/pull/10014#discussion_r440316096", "bodyText": "I wasn't sure of the perf implications of calling Math.round It looks like it calls out to some native function, does some bit magic and then finally just casts the object to a long - which is how we get 0L\nSo I thought it would be better to just return 0 directly", "author": "suneet-s", "createdAt": "2020-06-15T16:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzNDE4NA==", "url": "https://github.com/apache/druid/pull/10014#discussion_r440534184", "bodyText": "Sounds good to me.", "author": "maytasm", "createdAt": "2020-06-16T01:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "2c3f405b83dd9b1c9cc04cd5e96adf53c934868d", "chunk": "diff --git a/core/src/main/java/org/apache/druid/math/expr/Function.java b/core/src/main/java/org/apache/druid/math/expr/Function.java\nindex dc967734c0..7c67a37663 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/Function.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/Function.java\n\n@@ -746,7 +746,7 @@ public interface Function\n         return ExprEval.of(BigDecimal.valueOf(param.asLong()).setScale(scale, RoundingMode.HALF_UP).longValue());\n       } else if (param.type() == ExprType.DOUBLE) {\n         double val = param.asDouble();\n-        if (Double.isNaN(val) || val == Double.POSITIVE_INFINITY || val == Double.NEGATIVE_INFINITY) {\n+        if (Double.isNaN(val) || Double.isInfinite(val)) {\n           // This is the behavior of Math.round()\n           return ExprEval.of(0L);\n         }\n"}}, {"oid": "643d4fd24f6bed18f183254068da0492aa2cc8a5", "url": "https://github.com/apache/druid/commit/643d4fd24f6bed18f183254068da0492aa2cc8a5", "message": "Merge remote-tracking branch 'upstream/master' into bigDecimal", "committedDate": "2020-06-15T22:53:50Z", "type": "commit"}, {"oid": "2c3f405b83dd9b1c9cc04cd5e96adf53c934868d", "url": "https://github.com/apache/druid/commit/2c3f405b83dd9b1c9cc04cd5e96adf53c934868d", "message": "Address comments", "committedDate": "2020-06-16T01:15:22Z", "type": "commit"}, {"oid": "7199359cfb938f79cd1d640faefd50d74eb3a078", "url": "https://github.com/apache/druid/commit/7199359cfb938f79cd1d640faefd50d74eb3a078", "message": "fix up round for infinity", "committedDate": "2020-06-16T15:21:51Z", "type": "commit"}, {"oid": "81fd9e80020eb483867a45e2505986354537b11a", "url": "https://github.com/apache/druid/commit/81fd9e80020eb483867a45e2505986354537b11a", "message": "round non numeric doubles returns a double", "committedDate": "2020-06-16T18:08:32Z", "type": "commit"}, {"oid": "ac481ec18ca09a3670e18cacb7aa0f793a786baa", "url": "https://github.com/apache/druid/commit/ac481ec18ca09a3670e18cacb7aa0f793a786baa", "message": "Merge remote-tracking branch 'upstream/master' into bigDecimal", "committedDate": "2020-06-16T18:09:10Z", "type": "commit"}, {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e", "url": "https://github.com/apache/druid/commit/eb8fb51e1a637b04ac794f4ed82e357a0797b96e", "message": "fix spotbugs", "committedDate": "2020-06-16T19:32:13Z", "type": "commit"}, {"oid": "75c3581bf297319b8b05e24f403db47da4275db9", "url": "https://github.com/apache/druid/commit/75c3581bf297319b8b05e24f403db47da4275db9", "message": "Update docs/misc/math-expr.md", "committedDate": "2020-06-16T21:38:48Z", "type": "commit"}, {"oid": "1d69625603f5eff7a1a4f83b4d98b1450a58b967", "url": "https://github.com/apache/druid/commit/1d69625603f5eff7a1a4f83b4d98b1450a58b967", "message": "Update docs/querying/sql.md", "committedDate": "2020-06-16T21:38:55Z", "type": "commit"}]}