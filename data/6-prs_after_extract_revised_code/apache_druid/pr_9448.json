{"pr_number": 9448, "pr_title": "Fix superbatch merge last partition boundaries", "pr_createdAt": "2020-03-02T19:15:25Z", "pr_url": "https://github.com/apache/druid/pull/9448", "timeline": [{"oid": "086e6d76c9d41ab4e90220e93a88cafaa9c50414", "url": "https://github.com/apache/druid/commit/086e6d76c9d41ab4e90220e93a88cafaa9c50414", "message": "Fix superbatch merge last partition boundaries\n\nA bug in the computation for the last parallel merge partition could\ncause an IndexOutOfBoundsException or precondition failure due to an\nempty partition.", "committedDate": "2020-03-01T01:45:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjczMA==", "url": "https://github.com/apache/druid/pull/9448#discussion_r386626730", "bodyText": "Can you add comment on  purpose of (index < remainder ? index : remainder) ?\ni.e. splitting the remainder across the first remainder tasks etc.", "author": "maytasm", "createdAt": "2020-03-02T20:18:08Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java", "diffHunk": "@@ -760,29 +761,39 @@ private PartitionBoundaries determineRangePartition(Collection<StringDistributio\n     // See PartitionStat in GeneratedPartitionsReport.\n     final List<Pair<Interval, Integer>> partitions = new ArrayList<>(partitionToLocations.keySet());\n     Collections.shuffle(partitions, ThreadLocalRandom.current());\n-    final int numPartitionsPerTask = (int) Math.round(partitions.size() / (double) numMergeTasks);\n \n     final List<M> assignedPartitionLocations = new ArrayList<>(numMergeTasks);\n-    for (int i = 0; i < numMergeTasks - 1; i++) {\n+    for (int i = 0; i < numMergeTasks; i++) {\n+      Pair<Integer, Integer> partitionBoundaries = getPartitionBoundaries(i, partitions.size(), numMergeTasks);\n       final List<L> assignedToSameTask = partitions\n-          .subList(i * numPartitionsPerTask, (i + 1) * numPartitionsPerTask)\n+          .subList(partitionBoundaries.lhs, partitionBoundaries.rhs)\n           .stream()\n           .flatMap(intervalAndPartitionId -> partitionToLocations.get(intervalAndPartitionId).stream())\n           .collect(Collectors.toList());\n       assignedPartitionLocations.add(createPartialSegmentMergeIOConfig.apply(assignedToSameTask));\n     }\n \n-    // The last task is assigned all remaining partitions.\n-    final List<L> assignedToSameTask = partitions\n-        .subList((numMergeTasks - 1) * numPartitionsPerTask, partitions.size())\n-        .stream()\n-        .flatMap(intervalAndPartitionId -> partitionToLocations.get(intervalAndPartitionId).stream())\n-        .collect(Collectors.toList());\n-    assignedPartitionLocations.add(createPartialSegmentMergeIOConfig.apply(assignedToSameTask));\n-\n     return assignedPartitionLocations;\n   }\n \n+  /**\n+   * Partition items into as evenly-sized splits as possible.\n+   *\n+   * @param index  index of partition\n+   * @param total  number of items to partitions\n+   * @param splits number of desired partitions\n+   *\n+   * @return partition range: [lhs, rhs)\n+   */\n+  private static Pair<Integer, Integer> getPartitionBoundaries(int index, int total, int splits)\n+  {\n+    int chunk = total / splits;\n+    int remainder = total % splits;\n+    int start = index * chunk + (index < remainder ? index : remainder);", "originalCommit": "086e6d76c9d41ab4e90220e93a88cafaa9c50414", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNjkwNQ==", "url": "https://github.com/apache/druid/pull/9448#discussion_r387316905", "bodyText": "I think index * (chunk + index < remainder ? 1 : 0) is more clear.", "author": "jihoonson", "createdAt": "2020-03-03T21:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODA1MQ==", "url": "https://github.com/apache/druid/pull/9448#discussion_r387318051", "bodyText": "I think the comment would be nice.", "author": "jihoonson", "createdAt": "2020-03-03T21:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjczMA=="}], "type": "inlineReview", "revised_code": {"commit": "4ad4f2a467d32d1dd3bc983212f9695e4ad7a8c8", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\nindex a178228326..e2106f82b2 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\n\n@@ -780,7 +780,7 @@ public class ParallelIndexSupervisorTask extends AbstractBatchIndexTask implemen\n    * Partition items into as evenly-sized splits as possible.\n    *\n    * @param index  index of partition\n-   * @param total  number of items to partitions\n+   * @param total  number of items to partition\n    * @param splits number of desired partitions\n    *\n    * @return partition range: [lhs, rhs)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjg0MQ==", "url": "https://github.com/apache/druid/pull/9448#discussion_r386626841", "bodyText": "same here for (index < remainder ? 1 : 0)", "author": "maytasm", "createdAt": "2020-03-02T20:18:22Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java", "diffHunk": "@@ -760,29 +761,39 @@ private PartitionBoundaries determineRangePartition(Collection<StringDistributio\n     // See PartitionStat in GeneratedPartitionsReport.\n     final List<Pair<Interval, Integer>> partitions = new ArrayList<>(partitionToLocations.keySet());\n     Collections.shuffle(partitions, ThreadLocalRandom.current());\n-    final int numPartitionsPerTask = (int) Math.round(partitions.size() / (double) numMergeTasks);\n \n     final List<M> assignedPartitionLocations = new ArrayList<>(numMergeTasks);\n-    for (int i = 0; i < numMergeTasks - 1; i++) {\n+    for (int i = 0; i < numMergeTasks; i++) {\n+      Pair<Integer, Integer> partitionBoundaries = getPartitionBoundaries(i, partitions.size(), numMergeTasks);\n       final List<L> assignedToSameTask = partitions\n-          .subList(i * numPartitionsPerTask, (i + 1) * numPartitionsPerTask)\n+          .subList(partitionBoundaries.lhs, partitionBoundaries.rhs)\n           .stream()\n           .flatMap(intervalAndPartitionId -> partitionToLocations.get(intervalAndPartitionId).stream())\n           .collect(Collectors.toList());\n       assignedPartitionLocations.add(createPartialSegmentMergeIOConfig.apply(assignedToSameTask));\n     }\n \n-    // The last task is assigned all remaining partitions.\n-    final List<L> assignedToSameTask = partitions\n-        .subList((numMergeTasks - 1) * numPartitionsPerTask, partitions.size())\n-        .stream()\n-        .flatMap(intervalAndPartitionId -> partitionToLocations.get(intervalAndPartitionId).stream())\n-        .collect(Collectors.toList());\n-    assignedPartitionLocations.add(createPartialSegmentMergeIOConfig.apply(assignedToSameTask));\n-\n     return assignedPartitionLocations;\n   }\n \n+  /**\n+   * Partition items into as evenly-sized splits as possible.\n+   *\n+   * @param index  index of partition\n+   * @param total  number of items to partitions\n+   * @param splits number of desired partitions\n+   *\n+   * @return partition range: [lhs, rhs)\n+   */\n+  private static Pair<Integer, Integer> getPartitionBoundaries(int index, int total, int splits)\n+  {\n+    int chunk = total / splits;\n+    int remainder = total % splits;\n+    int start = index * chunk + (index < remainder ? index : remainder);\n+    int stop = start + chunk + (index < remainder ? 1 : 0);", "originalCommit": "086e6d76c9d41ab4e90220e93a88cafaa9c50414", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ad4f2a467d32d1dd3bc983212f9695e4ad7a8c8", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\nindex a178228326..e2106f82b2 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\n\n@@ -780,7 +780,7 @@ public class ParallelIndexSupervisorTask extends AbstractBatchIndexTask implemen\n    * Partition items into as evenly-sized splits as possible.\n    *\n    * @param index  index of partition\n-   * @param total  number of items to partitions\n+   * @param total  number of items to partition\n    * @param splits number of desired partitions\n    *\n    * @return partition range: [lhs, rhs)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODIxNA==", "url": "https://github.com/apache/druid/pull/9448#discussion_r386628214", "bodyText": "Some ideas for other assertions.\n\nVerify that the split is evenly distributed. i.e. we should have 10 tasks with 2 each (for 20), 4 tasks with 3 and 6 tasks with 2 (for 24), etc.", "author": "maytasm", "createdAt": "2020-03-02T20:21:18Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.common.task.batch.parallel;\n+\n+import org.apache.druid.java.util.common.Intervals;\n+import org.apache.druid.java.util.common.Pair;\n+import org.joda.time.Interval;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+@RunWith(Enclosed.class)\n+public class ParallelIndexSupervisorTaskTest\n+{\n+  @RunWith(Parameterized.class)\n+  public static class CreateMergeIoConfigsTest\n+  {\n+    private static final Function<List<HashPartitionLocation>, PartialHashSegmentMergeIOConfig>\n+        CREATE_PARTIAL_SEGMENT_MERGE_IO_CONFIG = PartialHashSegmentMergeIOConfig::new;\n+\n+    @Parameterized.Parameters(name = \"count = {0}\")\n+    public static Iterable<? extends Object> data()\n+    {\n+      // different scenarios for last (index = 10 - 1 = 9) partition:\n+      return Arrays.asList(\n+          20,  // even partitions per task: round(20 / 10) * (10 - 1) = 2 * 9 = 18 < 20\n+          24,  // round down:               round(24 / 10) * (10 - 1) = 2 * 9 = 18 < 24\n+          25,  // round up to greater:      round(25 / 10) * (10 - 1) = 3 * 9 = 27 > 25 (index out of bounds)\n+          27   // round up to equal:        round(27 / 10) * (10 - 1) = 3 * 9 = 27 == 27 (empty partition)\n+      );\n+    }\n+\n+    @Parameterized.Parameter\n+    public int count;\n+\n+    @Test\n+    public void handlesLastPartitionCorrectly()", "originalCommit": "086e6d76c9d41ab4e90220e93a88cafaa9c50414", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ad4f2a467d32d1dd3bc983212f9695e4ad7a8c8", "chunk": "diff --git a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java\nindex 4d8c3d1a4b..b882aac207 100644\n--- a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java\n+++ b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java\n\n@@ -19,8 +19,10 @@\n \n package org.apache.druid.indexing.common.task.batch.parallel;\n \n+import com.google.common.collect.Ordering;\n import org.apache.druid.java.util.common.Intervals;\n import org.apache.druid.java.util.common.Pair;\n+import org.hamcrest.Matchers;\n import org.joda.time.Interval;\n import org.junit.Assert;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNDMwNA==", "url": "https://github.com/apache/druid/pull/9448#discussion_r387314304", "bodyText": "to partition?", "author": "jihoonson", "createdAt": "2020-03-03T21:49:09Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java", "diffHunk": "@@ -760,29 +761,39 @@ private PartitionBoundaries determineRangePartition(Collection<StringDistributio\n     // See PartitionStat in GeneratedPartitionsReport.\n     final List<Pair<Interval, Integer>> partitions = new ArrayList<>(partitionToLocations.keySet());\n     Collections.shuffle(partitions, ThreadLocalRandom.current());\n-    final int numPartitionsPerTask = (int) Math.round(partitions.size() / (double) numMergeTasks);\n \n     final List<M> assignedPartitionLocations = new ArrayList<>(numMergeTasks);\n-    for (int i = 0; i < numMergeTasks - 1; i++) {\n+    for (int i = 0; i < numMergeTasks; i++) {\n+      Pair<Integer, Integer> partitionBoundaries = getPartitionBoundaries(i, partitions.size(), numMergeTasks);\n       final List<L> assignedToSameTask = partitions\n-          .subList(i * numPartitionsPerTask, (i + 1) * numPartitionsPerTask)\n+          .subList(partitionBoundaries.lhs, partitionBoundaries.rhs)\n           .stream()\n           .flatMap(intervalAndPartitionId -> partitionToLocations.get(intervalAndPartitionId).stream())\n           .collect(Collectors.toList());\n       assignedPartitionLocations.add(createPartialSegmentMergeIOConfig.apply(assignedToSameTask));\n     }\n \n-    // The last task is assigned all remaining partitions.\n-    final List<L> assignedToSameTask = partitions\n-        .subList((numMergeTasks - 1) * numPartitionsPerTask, partitions.size())\n-        .stream()\n-        .flatMap(intervalAndPartitionId -> partitionToLocations.get(intervalAndPartitionId).stream())\n-        .collect(Collectors.toList());\n-    assignedPartitionLocations.add(createPartialSegmentMergeIOConfig.apply(assignedToSameTask));\n-\n     return assignedPartitionLocations;\n   }\n \n+  /**\n+   * Partition items into as evenly-sized splits as possible.\n+   *\n+   * @param index  index of partition\n+   * @param total  number of items to partitions", "originalCommit": "086e6d76c9d41ab4e90220e93a88cafaa9c50414", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ad4f2a467d32d1dd3bc983212f9695e4ad7a8c8", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\nindex a178228326..e2106f82b2 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java\n\n@@ -780,7 +780,7 @@ public class ParallelIndexSupervisorTask extends AbstractBatchIndexTask implemen\n    * Partition items into as evenly-sized splits as possible.\n    *\n    * @param index  index of partition\n-   * @param total  number of items to partitions\n+   * @param total  number of items to partition\n    * @param splits number of desired partitions\n    *\n    * @return partition range: [lhs, rhs)\n"}}, {"oid": "4ad4f2a467d32d1dd3bc983212f9695e4ad7a8c8", "url": "https://github.com/apache/druid/commit/4ad4f2a467d32d1dd3bc983212f9695e4ad7a8c8", "message": "Improve comments and tests", "committedDate": "2020-03-04T02:09:51Z", "type": "commit"}]}