{"pr_number": 10076, "pr_title": "ensure ParallelMergeCombiningSequence closes its closeables", "pr_createdAt": "2020-06-25T06:04:30Z", "pr_url": "https://github.com/apache/druid/pull/10076", "timeline": [{"oid": "400bc4eddd31428cc3ffe26f5fb6ef2fc9446c84", "url": "https://github.com/apache/druid/commit/400bc4eddd31428cc3ffe26f5fb6ef2fc9446c84", "message": "ensure close for all closeables of ParallelMergeCombiningSequence", "committedDate": "2020-06-25T05:56:57Z", "type": "commit"}, {"oid": "0c2a22073ee2ae98b8f1707ca6b7538acf5dae99", "url": "https://github.com/apache/druid/commit/0c2a22073ee2ae98b8f1707ca6b7538acf5dae99", "message": "revert unneeded change", "committedDate": "2020-06-25T06:02:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNjc2OA==", "url": "https://github.com/apache/druid/pull/10076#discussion_r445326768", "bodyText": "I... can't remember if there is a reason why this explodes violently while the others are all CloseQuietly... I'll try to figure out if this should be eaten too.", "author": "clintropolis", "createdAt": "2020-06-25T06:08:30Z", "path": "core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java", "diffHunk": "@@ -1036,11 +1047,13 @@ public boolean isReleasable()\n     @Override\n     public void close()\n     {\n-      try {\n-        yielder.close();\n-      }\n-      catch (IOException e) {\n-        throw new RuntimeException(\"Failed to close yielder\", e);\n+      if (yielder != null) {\n+        try {\n+          yielder.close();\n+        }\n+        catch (IOException e) {\n+          throw new RuntimeException(\"Failed to close yielder\", e);", "originalCommit": "0c2a22073ee2ae98b8f1707ca6b7538acf5dae99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMDUyNQ==", "url": "https://github.com/apache/druid/pull/10076#discussion_r445710525", "bodyText": "It seems the exception will be eventually handled by CloseQuietly.", "author": "jihoonson", "createdAt": "2020-06-25T17:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyNjc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "464136b55ab430dc4b684980b31a07af719f4fee", "chunk": "diff --git a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\nindex 6254aa8b09..3335efd50f 100644\n--- a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n+++ b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n\n@@ -1045,15 +1046,10 @@ public class ParallelMergeCombiningSequence<T> extends YieldingSequenceBase<T>\n     }\n \n     @Override\n-    public void close()\n+    public void close() throws IOException\n     {\n       if (yielder != null) {\n-        try {\n-          yielder.close();\n-        }\n-        catch (IOException e) {\n-          throw new RuntimeException(\"Failed to close yielder\", e);\n-        }\n+        yielder.close();\n       }\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5Njg3MA==", "url": "https://github.com/apache/druid/pull/10076#discussion_r445696870", "bodyText": "nit: Closer.register() has null check. You can use registerAll() instead.", "author": "jihoonson", "createdAt": "2020-06-25T16:46:24Z", "path": "core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java", "diffHunk": "@@ -1350,4 +1363,24 @@ long getTotalCpuTimeNanos()\n       return totalCpuTimeNanos;\n     }\n   }\n+\n+  private static <T> void closeAllCursors(final PriorityQueue<BatchedResultsCursor<T>> pQueue)\n+  {\n+    Closer closer = Closer.create();\n+    while (!pQueue.isEmpty()) {\n+      final BatchedResultsCursor<T> yielder = pQueue.poll();\n+      if (yielder != null) {\n+        // Note: yielder can be null if our comparator threw an exception during queue.add.\n+        closer.register(yielder);", "originalCommit": "0c2a22073ee2ae98b8f1707ca6b7538acf5dae99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "464136b55ab430dc4b684980b31a07af719f4fee", "chunk": "diff --git a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\nindex 6254aa8b09..3335efd50f 100644\n--- a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n+++ b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n\n@@ -1364,23 +1360,10 @@ public class ParallelMergeCombiningSequence<T> extends YieldingSequenceBase<T>\n     }\n   }\n \n-  private static <T> void closeAllCursors(final PriorityQueue<BatchedResultsCursor<T>> pQueue)\n-  {\n-    Closer closer = Closer.create();\n-    while (!pQueue.isEmpty()) {\n-      final BatchedResultsCursor<T> yielder = pQueue.poll();\n-      if (yielder != null) {\n-        // Note: yielder can be null if our comparator threw an exception during queue.add.\n-        closer.register(yielder);\n-      }\n-    }\n-    CloseQuietly.close(closer);\n-  }\n-\n-  private static <T> void closeAllCursors(final List<BatchedResultsCursor<T>> list)\n+  private static <T> void closeAllCursors(final Collection<BatchedResultsCursor<T>> cursors)\n   {\n     Closer closer = Closer.create();\n-    closer.registerAll(list);\n+    closer.registerAll(cursors);\n     CloseQuietly.close(closer);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMTQyMw==", "url": "https://github.com/apache/druid/pull/10076#discussion_r445711423", "bodyText": "You can merge these methods if you use registerAll() above.", "author": "jihoonson", "createdAt": "2020-06-25T17:10:47Z", "path": "core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java", "diffHunk": "@@ -1350,4 +1363,24 @@ long getTotalCpuTimeNanos()\n       return totalCpuTimeNanos;\n     }\n   }\n+\n+  private static <T> void closeAllCursors(final PriorityQueue<BatchedResultsCursor<T>> pQueue)\n+  {\n+    Closer closer = Closer.create();\n+    while (!pQueue.isEmpty()) {\n+      final BatchedResultsCursor<T> yielder = pQueue.poll();\n+      if (yielder != null) {\n+        // Note: yielder can be null if our comparator threw an exception during queue.add.\n+        closer.register(yielder);\n+      }\n+    }\n+    CloseQuietly.close(closer);\n+  }\n+\n+  private static <T> void closeAllCursors(final List<BatchedResultsCursor<T>> list)", "originalCommit": "0c2a22073ee2ae98b8f1707ca6b7538acf5dae99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "464136b55ab430dc4b684980b31a07af719f4fee", "chunk": "diff --git a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\nindex 6254aa8b09..3335efd50f 100644\n--- a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n+++ b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n\n@@ -1364,23 +1360,10 @@ public class ParallelMergeCombiningSequence<T> extends YieldingSequenceBase<T>\n     }\n   }\n \n-  private static <T> void closeAllCursors(final PriorityQueue<BatchedResultsCursor<T>> pQueue)\n-  {\n-    Closer closer = Closer.create();\n-    while (!pQueue.isEmpty()) {\n-      final BatchedResultsCursor<T> yielder = pQueue.poll();\n-      if (yielder != null) {\n-        // Note: yielder can be null if our comparator threw an exception during queue.add.\n-        closer.register(yielder);\n-      }\n-    }\n-    CloseQuietly.close(closer);\n-  }\n-\n-  private static <T> void closeAllCursors(final List<BatchedResultsCursor<T>> list)\n+  private static <T> void closeAllCursors(final Collection<BatchedResultsCursor<T>> cursors)\n   {\n     Closer closer = Closer.create();\n-    closer.registerAll(list);\n+    closer.registerAll(cursors);\n     CloseQuietly.close(closer);\n   }\n }\n"}}, {"oid": "464136b55ab430dc4b684980b31a07af719f4fee", "url": "https://github.com/apache/druid/commit/464136b55ab430dc4b684980b31a07af719f4fee", "message": "consolidate methods", "committedDate": "2020-06-25T19:28:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDYzMA==", "url": "https://github.com/apache/druid/pull/10076#discussion_r446200630", "bodyText": "Have you considered closing the sequenceCursors in a finally block incase a Throwable is thrown instead of an exception?", "author": "suneet-s", "createdAt": "2020-06-26T13:57:37Z", "path": "core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java", "diffHunk": "@@ -341,6 +344,7 @@ protected void compute()\n         }\n       }\n       catch (Exception ex) {\n+        closeAllCursors(sequenceCursors);", "originalCommit": "464136b55ab430dc4b684980b31a07af719f4fee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTc3NA==", "url": "https://github.com/apache/druid/pull/10076#discussion_r446285774", "bodyText": "Sorry, I misread this. A finally block won't work \ud83e\udd26\nDoes it provide any better guarantees if we catch a Throwable instead of an exception here - so that in case any of the code in the try block throws an Error instead of an Exception\nThis code appears to have been running ok all this time with a catch (Exception) block so I'm guessing it's not too bad if the catch condition is left as is", "author": "suneet-s", "createdAt": "2020-06-26T16:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MzYzOQ==", "url": "https://github.com/apache/druid/pull/10076#discussion_r446363639", "bodyText": "Seems reasonable to switch to catching throwable, can swap it out", "author": "clintropolis", "createdAt": "2020-06-26T19:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d574714bdf92450cf33f51341da3f9d4517723ae", "chunk": "diff --git a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\nindex 3335efd50f..a18a1c805c 100644\n--- a/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n+++ b/core/src/main/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequence.java\n\n@@ -343,9 +343,9 @@ public class ParallelMergeCombiningSequence<T> extends YieldingSequenceBase<T>\n           spawnParallelTasks(parallelTaskCount);\n         }\n       }\n-      catch (Exception ex) {\n+      catch (Throwable t) {\n         closeAllCursors(sequenceCursors);\n-        cancellationGizmo.cancel(ex);\n+        cancellationGizmo.cancel(t);\n         out.offer(ResultBatch.TERMINAL);\n       }\n     }\n"}}, {"oid": "d574714bdf92450cf33f51341da3f9d4517723ae", "url": "https://github.com/apache/druid/commit/d574714bdf92450cf33f51341da3f9d4517723ae", "message": "catch throwable instead of exception", "committedDate": "2020-06-26T19:16:14Z", "type": "commit"}]}