{"pr_number": 9429, "pr_title": "fix issue when distinct grouping dimensions are optimized into the same virtual column expression", "pr_createdAt": "2020-02-27T05:18:45Z", "pr_url": "https://github.com/apache/druid/pull/9429", "timeline": [{"oid": "29a63e0eef086abf81b3c97df1a38d8b0f2f308c", "url": "https://github.com/apache/druid/commit/29a63e0eef086abf81b3c97df1a38d8b0f2f308c", "message": "fix issue when distinct grouping dimensions are optimized into the same virtual column expression", "committedDate": "2020-02-27T05:15:57Z", "type": "commit"}, {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325", "url": "https://github.com/apache/druid/commit/9e309aaeb9bc2d2647be56fdee3866835861a325", "message": "fix tests", "committedDate": "2020-02-27T07:10:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mzc5MA==", "url": "https://github.com/apache/druid/pull/9429#discussion_r385253790", "bodyText": "How about inputColumn? (I think it's a bit weird to call columns in the table \"dimensions\" and would like to get away from that in new code.)\nIt would also be good to include a comment about what the relationship is between inputColumn and expression, with some examples. It might get confusing to have both. Additionally: if the expression is a simple column reference, is it required that expression.getDirectColumn().equals(inputColumn)? If so it would be good to validate that in the constructor.", "author": "gianm", "createdAt": "2020-02-27T17:19:01Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -28,6 +28,7 @@\n \n public class DimensionExpression\n {\n+  private final String inputDimension;", "originalCommit": "9e309aaeb9bc2d2647be56fdee3866835861a325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNTM1OQ==", "url": "https://github.com/apache/druid/pull/9429#discussion_r385425359", "bodyText": "Heh, I initially had it named inputColumn but changed to inputDimension to match the DimensionSpec which it creates.\nHowever, since this field actually is only used when creating a DimensionSpec when the DimensionExpression is for a virtual column, I have renamed the field to virtualColumn. When a DimensionExpression is a direct access or simple extraction, we use expression.getSimpleExtraction().toDimensionSpec to craft the DimensionSpec instead, so this field is ignored.\nTo help clarify this, i collapsed the constructors into a single private constructor and made static methods DimensionExpression.ofSimpleColumn and DimensionExpression.ofVirtualColumn for creating the two types of DimensionExpression we have, as per your other comment, which I think helps clear up usage.", "author": "clintropolis", "createdAt": "2020-02-27T23:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mzc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "cff14aadcd6b7fa013e42e225df98eab378761f9", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\nindex 595adae388..0a9a4a8e19 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n\n@@ -28,36 +29,53 @@ import java.util.Objects;\n \n public class DimensionExpression\n {\n-  private final String inputDimension;\n-  private final String outputName;\n-  private final DruidExpression expression;\n-  private final ValueType outputType;\n+  /**\n+   * Create a dimension expresison for direct column access or simple extractions\n+   */\n+  public static DimensionExpression ofSimpleColumn(\n+      final String outputName,\n+      final DruidExpression expression,\n+      final ValueType outputType\n+  )\n+  {\n+    return new DimensionExpression(outputName, outputName, expression, outputType);\n+  }\n \n-  public DimensionExpression(\n+  /**\n+   * Create a dimension expression for a virtual column\n+   */\n+  public static DimensionExpression ofVirtualColumn(\n+      final String virtualColumn,\n       final String outputName,\n       final DruidExpression expression,\n       final ValueType outputType\n   )\n   {\n-    this(outputName, outputName, expression, outputType);\n+    return new DimensionExpression(virtualColumn, outputName, expression, outputType);\n   }\n \n-  public DimensionExpression(\n-      final String inputDimension,\n+  private final String virtualColumn;\n+  private final String outputName;\n+  private final DruidExpression expression;\n+  private final ValueType outputType;\n+\n+  private DimensionExpression(\n+      final String virtualColumn,\n       final String outputName,\n       final DruidExpression expression,\n       final ValueType outputType\n   )\n   {\n-    this.inputDimension = inputDimension;\n+    Preconditions.checkArgument(!expression.isSimpleExtraction() || outputName.equals(virtualColumn));\n+    this.virtualColumn = virtualColumn;\n     this.outputName = outputName;\n     this.expression = expression;\n     this.outputType = outputType;\n   }\n \n-  public String getInputDimension()\n+  public String getVirtualColumn()\n   {\n-    return inputDimension;\n+    return virtualColumn;\n   }\n \n   public String getOutputName()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NDIwMg==", "url": "https://github.com/apache/druid/pull/9429#discussion_r385254202", "bodyText": "It's not immediately clear when each constructor should be used. They need javadocs, or to be made private and replaced with nicely-named static factories, or (IMO ideally) both.", "author": "gianm", "createdAt": "2020-02-27T17:19:47Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -38,11 +39,27 @@ public DimensionExpression(\n       final ValueType outputType\n   )\n   {\n+    this(outputName, outputName, expression, outputType);\n+  }\n+\n+  public DimensionExpression(", "originalCommit": "9e309aaeb9bc2d2647be56fdee3866835861a325", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff14aadcd6b7fa013e42e225df98eab378761f9", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\nindex 595adae388..0a9a4a8e19 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n\n@@ -28,36 +29,53 @@ import java.util.Objects;\n \n public class DimensionExpression\n {\n-  private final String inputDimension;\n-  private final String outputName;\n-  private final DruidExpression expression;\n-  private final ValueType outputType;\n+  /**\n+   * Create a dimension expresison for direct column access or simple extractions\n+   */\n+  public static DimensionExpression ofSimpleColumn(\n+      final String outputName,\n+      final DruidExpression expression,\n+      final ValueType outputType\n+  )\n+  {\n+    return new DimensionExpression(outputName, outputName, expression, outputType);\n+  }\n \n-  public DimensionExpression(\n+  /**\n+   * Create a dimension expression for a virtual column\n+   */\n+  public static DimensionExpression ofVirtualColumn(\n+      final String virtualColumn,\n       final String outputName,\n       final DruidExpression expression,\n       final ValueType outputType\n   )\n   {\n-    this(outputName, outputName, expression, outputType);\n+    return new DimensionExpression(virtualColumn, outputName, expression, outputType);\n   }\n \n-  public DimensionExpression(\n-      final String inputDimension,\n+  private final String virtualColumn;\n+  private final String outputName;\n+  private final DruidExpression expression;\n+  private final ValueType outputType;\n+\n+  private DimensionExpression(\n+      final String virtualColumn,\n       final String outputName,\n       final DruidExpression expression,\n       final ValueType outputType\n   )\n   {\n-    this.inputDimension = inputDimension;\n+    Preconditions.checkArgument(!expression.isSimpleExtraction() || outputName.equals(virtualColumn));\n+    this.virtualColumn = virtualColumn;\n     this.outputName = outputName;\n     this.expression = expression;\n     this.outputType = outputType;\n   }\n \n-  public String getInputDimension()\n+  public String getVirtualColumn()\n   {\n-    return inputDimension;\n+    return virtualColumn;\n   }\n \n   public String getOutputName()\n"}}, {"oid": "cff14aadcd6b7fa013e42e225df98eab378761f9", "url": "https://github.com/apache/druid/commit/cff14aadcd6b7fa013e42e225df98eab378761f9", "message": "more better", "committedDate": "2020-02-27T23:08:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTE3OA==", "url": "https://github.com/apache/druid/pull/9429#discussion_r389201178", "bodyText": "Missing a ,  here.", "author": "gianm", "createdAt": "2020-03-07T00:10:59Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -72,21 +107,23 @@ public boolean equals(final Object o)\n       return false;\n     }\n     final DimensionExpression that = (DimensionExpression) o;\n-    return Objects.equals(outputName, that.outputName) &&\n+    return Objects.equals(virtualColumn, that.virtualColumn) &&\n+           Objects.equals(outputName, that.outputName) &&\n            Objects.equals(expression, that.expression) &&\n            outputType == that.outputType;\n   }\n \n   @Override\n   public int hashCode()\n   {\n-    return Objects.hash(outputName, expression, outputType);\n+    return Objects.hash(virtualColumn, outputName, expression, outputType);\n   }\n \n   @Override\n   public String toString()\n   {\n     return \"DimensionExpression{\" +\n+           \"virtualColumn='\" + virtualColumn + '\\'' +\n            \"outputName='\" + outputName + '\\'' +", "originalCommit": "cff14aadcd6b7fa013e42e225df98eab378761f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "633eda6a9bc588c08b7bc2e95f212bbd4ef20847", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\nindex 0a9a4a8e19..10b5bbefe3 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n\n@@ -124,7 +124,7 @@ public class DimensionExpression\n   {\n     return \"DimensionExpression{\" +\n            \"virtualColumn='\" + virtualColumn + '\\'' +\n-           \"outputName='\" + outputName + '\\'' +\n+           \", outputName='\" + outputName + '\\'' +\n            \", expression=\" + expression +\n            \", outputType=\" + outputType +\n            '}';\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTIwMQ==", "url": "https://github.com/apache/druid/pull/9429#discussion_r389201201", "bodyText": "\"expression\" (spelling)", "author": "gianm", "createdAt": "2020-03-07T00:11:07Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -28,21 +29,55 @@\n \n public class DimensionExpression\n {\n+  /**\n+   * Create a dimension expresison for direct column access or simple extractions", "originalCommit": "cff14aadcd6b7fa013e42e225df98eab378761f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "633eda6a9bc588c08b7bc2e95f212bbd4ef20847", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\nindex 0a9a4a8e19..10b5bbefe3 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java\n\n@@ -30,7 +30,7 @@ import java.util.Objects;\n public class DimensionExpression\n {\n   /**\n-   * Create a dimension expresison for direct column access or simple extractions\n+   * Create a dimension expression for direct column access or simple extractions\n    */\n   public static DimensionExpression ofSimpleColumn(\n       final String outputName,\n"}}, {"oid": "633eda6a9bc588c08b7bc2e95f212bbd4ef20847", "url": "https://github.com/apache/druid/commit/633eda6a9bc588c08b7bc2e95f212bbd4ef20847", "message": "fixes", "committedDate": "2020-03-09T18:42:19Z", "type": "commit"}]}