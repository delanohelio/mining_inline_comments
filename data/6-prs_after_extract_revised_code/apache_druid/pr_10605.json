{"pr_number": 10605, "pr_title": "bitwise math function expressions", "pr_createdAt": "2020-11-25T10:27:16Z", "pr_url": "https://github.com/apache/druid/pull/10605", "timeline": [{"oid": "b940467023a895529f828f88f5208532bb77ef70", "url": "https://github.com/apache/druid/commit/b940467023a895529f828f88f5208532bb77ef70", "message": "expressions: adding bitwise expressions", "committedDate": "2020-08-01T23:10:28Z", "type": "commit"}, {"oid": "a8e08e0e090b56580a81f35d2179ec3d6a996a6e", "url": "https://github.com/apache/druid/commit/a8e08e0e090b56580a81f35d2179ec3d6a996a6e", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions", "committedDate": "2020-11-24T08:16:08Z", "type": "commit"}, {"oid": "88529c0b70997eae17089498fbe5326d39d2f924", "url": "https://github.com/apache/druid/commit/88529c0b70997eae17089498fbe5326d39d2f924", "message": "double handling and vectorization", "committedDate": "2020-11-25T09:58:03Z", "type": "commit"}, {"oid": "ecc103ade747d4212f775777efb4c1e3a0e2fc19", "url": "https://github.com/apache/druid/commit/ecc103ade747d4212f775777efb4c1e3a0e2fc19", "message": "move conversion to Evals", "committedDate": "2020-11-25T10:13:06Z", "type": "commit"}, {"oid": "1b5269b3892105463d516855b535dc427adbc8d7", "url": "https://github.com/apache/druid/commit/1b5269b3892105463d516855b535dc427adbc8d7", "message": "revert unintended changes", "committedDate": "2020-11-25T10:24:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3NTU3MQ==", "url": "https://github.com/apache/druid/pull/10605#discussion_r553775571", "bodyText": "Why add this instead of calling the thing in Double?", "author": "gianm", "createdAt": "2021-01-08T07:04:51Z", "path": "core/src/main/java/org/apache/druid/math/expr/Evals.java", "diffHunk": "@@ -71,4 +71,14 @@ public static boolean asBoolean(@Nullable String x)\n   {\n     return !NullHandling.isNullOrEquivalent(x) && Boolean.parseBoolean(x);\n   }\n+\n+  public static long doubleToLongBits(double x)\n+  {\n+    return Double.doubleToLongBits(x);", "originalCommit": "1b5269b3892105463d516855b535dc427adbc8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgxMDAwMw==", "url": "https://github.com/apache/druid/pull/10605#discussion_r553810003", "bodyText": "Trying to remember.. I think i was just trying to be consistent with the other value conversion functions and put it here, but it probably could just call it directly as it seems unlike we would change the function", "author": "clintropolis", "createdAt": "2021-01-08T08:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3NTU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "85e30745167b02585a00a378635102c42db49573", "chunk": "diff --git a/core/src/main/java/org/apache/druid/math/expr/Evals.java b/core/src/main/java/org/apache/druid/math/expr/Evals.java\nindex 0ac050a71a..f6e3e4f74c 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/Evals.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/Evals.java\n\n@@ -71,14 +71,4 @@ public class Evals\n   {\n     return !NullHandling.isNullOrEquivalent(x) && Boolean.parseBoolean(x);\n   }\n-\n-  public static long doubleToLongBits(double x)\n-  {\n-    return Double.doubleToLongBits(x);\n-  }\n-\n-  public static double longBitsToDouble(long x)\n-  {\n-    return Double.longBitsToDouble(x);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MDAzNg==", "url": "https://github.com/apache/druid/pull/10605#discussion_r553780036", "bodyText": "Please include (double, double) and (long, double) in addition to (double, long) args.", "author": "gianm", "createdAt": "2021-01-08T07:20:16Z", "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "diffHunk": "@@ -519,6 +519,31 @@ public void testLeast()\n     assertExpr(\"least(1, null, 'A')\", \"1\");\n   }\n \n+  @Test\n+  public void testBitwise()\n+  {\n+    assertExpr(\"bitwiseAnd(3, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(2, 1)\", 0L);\n+    assertExpr(\"bitwiseOr(3, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1)\", 3L);\n+    assertExpr(\"bitwiseXor(3, 1)\", 2L);\n+    assertExpr(\"bitwiseXor(2, 1)\", 3L);\n+    assertExpr(\"bitwiseShiftLeft(2, 1)\", 4L);\n+    assertExpr(\"bitwiseShiftRight(2, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(bitwiseComplement(1), 7)\", 6L);\n+    assertExpr(\"bitwiseAnd('2', '1')\", null);\n+    assertExpr(\"bitwiseAnd(2, '1')\", 0L);\n+\n+    assertExpr(\"bitwiseOr(2.345, 1)\", 4612462889363109315L);", "originalCommit": "1b5269b3892105463d516855b535dc427adbc8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgxMTcxNQ==", "url": "https://github.com/apache/druid/pull/10605#discussion_r553811715", "bodyText": "more exhaustive coverage which should include these combinations is done in VectorExprSanityTest, where non-vectorized and vectorized evaluation results are asserted to be equal with a variety of combinations of inputs, but I can add explicit tests here since those don't necessarily confirm correctness, just self consistency between the two evaluation modes.", "author": "clintropolis", "createdAt": "2021-01-08T08:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MDAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIyNDM2MQ==", "url": "https://github.com/apache/druid/pull/10605#discussion_r554224361", "bodyText": "I see, I missed that test. Sounds good.", "author": "gianm", "createdAt": "2021-01-08T22:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MDAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "85e30745167b02585a00a378635102c42db49573", "chunk": "diff --git a/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java b/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java\nindex c50f4eb499..96a22840eb 100644\n--- a/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java\n+++ b/core/src/test/java/org/apache/druid/math/expr/FunctionTest.java\n\n@@ -534,14 +534,24 @@ public class FunctionTest extends InitializedNullHandlingTest\n     assertExpr(\"bitwiseAnd('2', '1')\", null);\n     assertExpr(\"bitwiseAnd(2, '1')\", 0L);\n \n-    assertExpr(\"bitwiseOr(2.345, 1)\", 4612462889363109315L);\n-    assertExpr(\"bitwiseAnd(2.345, 2.0)\", 4611686018427387904L);\n+    // doubles are cast\n+    assertExpr(\"bitwiseOr(2.345, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1.3)\", 3L);\n+    assertExpr(\"bitwiseAnd(2.345, 2.0)\", 2L);\n+\n+    // but can be converted to be double-like\n     assertExpr(\n-        \"bitwiseAnd(bitwiseConvertDouble(2.345), bitwiseConvertDouble(2.0))\",\n+        \"bitwiseAnd(bitwiseConvertDoubleToLongBits(2.345), bitwiseConvertDoubleToLongBits(2.0))\",\n         4611686018427387904L\n     );\n-    assertExpr(\"bitwiseConvertDouble(bitwiseAnd(2.345, 2.0))\", 2.0);\n-    assertExpr(\"bitwiseConvertDouble(2.0)\", 4611686018427387904L);\n+    assertExpr(\n+        \"bitwiseConvertLongBitsToDouble(bitwiseAnd(bitwiseConvertDoubleToLongBits(2.345), bitwiseConvertDoubleToLongBits(2.0)))\",\n+        2.0\n+    );\n+    assertExpr(\"bitwiseConvertDoubleToLongBits(2.0)\", 4611686018427387904L);\n+    assertExpr(\"bitwiseConvertDoubleToLongBits(bitwiseConvertDoubleToLongBits(2.0))\", 4886405595696988160L);\n+    assertExpr(\"bitwiseConvertLongBitsToDouble(4611686018427387904)\", 2.0);\n+    assertExpr(\"bitwiseConvertLongBitsToDouble(bitwiseConvertLongBitsToDouble(4611686018427387904))\", 1.0E-323);\n   }\n \n   private void assertExpr(final String expression, @Nullable final Object expectedResult)\n"}}, {"oid": "55e0a84318e41ac196a997a112a8255872a4dd0e", "url": "https://github.com/apache/druid/commit/55e0a84318e41ac196a997a112a8255872a4dd0e", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions", "committedDate": "2021-01-08T12:16:55Z", "type": "commit"}, {"oid": "61d31182d010cd3b73f41703a97eab9f613da92a", "url": "https://github.com/apache/druid/commit/61d31182d010cd3b73f41703a97eab9f613da92a", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions", "committedDate": "2021-01-08T21:39:49Z", "type": "commit"}, {"oid": "85e30745167b02585a00a378635102c42db49573", "url": "https://github.com/apache/druid/commit/85e30745167b02585a00a378635102c42db49573", "message": "less magic, split convert functions, fix parser for funny exponent doubles", "committedDate": "2021-01-09T02:15:00Z", "type": "commit"}, {"oid": "f16026aa0a89b9fbf9e54c9df15b45df0a537fef", "url": "https://github.com/apache/druid/commit/f16026aa0a89b9fbf9e54c9df15b45df0a537fef", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions", "committedDate": "2021-01-12T02:12:58Z", "type": "commit"}, {"oid": "d988512555c145cff650a8325e4f7616b273dbae", "url": "https://github.com/apache/druid/commit/d988512555c145cff650a8325e4f7616b273dbae", "message": "fix spelling exceptions list", "committedDate": "2021-01-12T02:14:37Z", "type": "commit"}, {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e", "url": "https://github.com/apache/druid/commit/72a452a2a1884cd9cfad998a23723040b9eac70e", "message": "more spelling", "committedDate": "2021-01-12T20:36:25Z", "type": "commit"}, {"oid": "58fb61757ca7b24f5e09d61048771dc84545f473", "url": "https://github.com/apache/druid/commit/58fb61757ca7b24f5e09d61048771dc84545f473", "message": "fix grammar, add more test, fix docs", "committedDate": "2021-01-20T12:45:02Z", "type": "commit"}, {"oid": "623e0b78ff3779e4a4941886d3a5176bf9ff845d", "url": "https://github.com/apache/druid/commit/623e0b78ff3779e4a4941886d3a5176bf9ff845d", "message": "fix docs", "committedDate": "2021-01-20T21:29:33Z", "type": "commit"}]}