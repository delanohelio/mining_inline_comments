{"pr_number": 9518, "pr_title": "AWS RDS token based password  provider", "pr_createdAt": "2020-03-14T06:28:31Z", "pr_url": "https://github.com/apache/druid/pull/9518", "timeline": [{"oid": "c024ec6a79c99a3e364f94965b273d088e97ddc3", "url": "https://github.com/apache/druid/commit/c024ec6a79c99a3e364f94965b273d088e97ddc3", "message": "refresh db pwd", "committedDate": "2020-03-14T03:37:17Z", "type": "commit"}, {"oid": "5cef48e27a7ae8f558b35adf2621440fe1faadda", "url": "https://github.com/apache/druid/commit/5cef48e27a7ae8f558b35adf2621440fe1faadda", "message": "aws iam token password provider", "committedDate": "2020-03-14T06:32:49Z", "type": "commit"}, {"oid": "5cef48e27a7ae8f558b35adf2621440fe1faadda", "url": "https://github.com/apache/druid/commit/5cef48e27a7ae8f558b35adf2621440fe1faadda", "message": "aws iam token password provider", "committedDate": "2020-03-14T06:32:49Z", "type": "forcePushed"}, {"oid": "85932c03fdd33e0c1e87bb4ead7243c36846e240", "url": "https://github.com/apache/druid/commit/85932c03fdd33e0c1e87bb4ead7243c36846e240", "message": "fix analyze-dependencies build", "committedDate": "2020-03-14T21:52:48Z", "type": "commit"}, {"oid": "2314fa4f72b0bc8d4b92fadb8f7d11d3899ae676", "url": "https://github.com/apache/druid/commit/2314fa4f72b0bc8d4b92fadb8f7d11d3899ae676", "message": "fix doc build", "committedDate": "2020-03-14T21:52:55Z", "type": "commit"}, {"oid": "955b62fc607b63dbb79392d944034172c0bc59cf", "url": "https://github.com/apache/druid/commit/955b62fc607b63dbb79392d944034172c0bc59cf", "message": "add  ut for BasicDataSourceExt", "committedDate": "2020-03-14T22:21:26Z", "type": "commit"}, {"oid": "553f622fd204bdac14d042bf7419899281f1648e", "url": "https://github.com/apache/druid/commit/553f622fd204bdac14d042bf7419899281f1648e", "message": "more doc updates", "committedDate": "2020-03-14T22:26:20Z", "type": "commit"}, {"oid": "ede86cca0feedf003c38fb498b6acad4cce53825", "url": "https://github.com/apache/druid/commit/ede86cca0feedf003c38fb498b6acad4cce53825", "message": "more  doc update", "committedDate": "2020-03-14T22:44:58Z", "type": "commit"}, {"oid": "162e522676867949332b82305220f202da9d6a13", "url": "https://github.com/apache/druid/commit/162e522676867949332b82305220f202da9d6a13", "message": "Merge remote-tracking branch 'apache/master' into aws_pwd_provider", "committedDate": "2020-03-26T21:41:19Z", "type": "commit"}, {"oid": "f9087568d35c61c18047ec993d1d0c61fb8c930b", "url": "https://github.com/apache/druid/commit/f9087568d35c61c18047ec993d1d0c61fb8c930b", "message": "moving aws  token password  provider to new extension", "committedDate": "2020-03-26T22:31:20Z", "type": "commit"}, {"oid": "35a05274c64ec115c92a72fa9a5f0fe35456250e", "url": "https://github.com/apache/druid/commit/35a05274c64ec115c92a72fa9a5f0fe35456250e", "message": "remove duplicate changes", "committedDate": "2020-03-26T22:34:16Z", "type": "commit"}, {"oid": "52ff609d08e05abd51b39355280480885af6d96a", "url": "https://github.com/apache/druid/commit/52ff609d08e05abd51b39355280480885af6d96a", "message": "make  all config inline", "committedDate": "2020-03-26T23:07:24Z", "type": "commit"}, {"oid": "52efefc289c6c49fc2c9a1af21a36e76114c51b3", "url": "https://github.com/apache/druid/commit/52efefc289c6c49fc2c9a1af21a36e76114c51b3", "message": "extension docs", "committedDate": "2020-03-26T23:21:38Z", "type": "commit"}, {"oid": "6969403c5f59378812efe6b796527d030c530ec6", "url": "https://github.com/apache/druid/commit/6969403c5f59378812efe6b796527d030c530ec6", "message": "refresh db  password  in SQL Firehose code path as well", "committedDate": "2020-03-26T23:24:37Z", "type": "commit"}, {"oid": "27f56523323aab10ff37d46e32c12154c280417d", "url": "https://github.com/apache/druid/commit/27f56523323aab10ff37d46e32c12154c280417d", "message": "add ut", "committedDate": "2020-03-27T00:38:06Z", "type": "commit"}, {"oid": "ee98fc81c92df882a1020e43142bccd11e4a26b6", "url": "https://github.com/apache/druid/commit/ee98fc81c92df882a1020e43142bccd11e4a26b6", "message": "fix build", "committedDate": "2020-03-27T04:12:21Z", "type": "commit"}, {"oid": "46e22642f4be54b69d28a35d2a15d0ae242b4c86", "url": "https://github.com/apache/druid/commit/46e22642f4be54b69d28a35d2a15d0ae242b4c86", "message": "add new extension to distribution", "committedDate": "2020-03-27T06:56:31Z", "type": "commit"}, {"oid": "ca825017a94e59939a038093bde109b17517cd83", "url": "https://github.com/apache/druid/commit/ca825017a94e59939a038093bde109b17517cd83", "message": "rds lib is not provided", "committedDate": "2020-03-27T07:03:18Z", "type": "commit"}, {"oid": "1a7726c07ec1e88a2f8ce685538ca61344c0b763", "url": "https://github.com/apache/druid/commit/1a7726c07ec1e88a2f8ce685538ca61344c0b763", "message": "fix license build", "committedDate": "2020-03-27T18:36:43Z", "type": "commit"}, {"oid": "f5214e03c1d94ab65713d0a11c6f20096058f1f6", "url": "https://github.com/apache/druid/commit/f5214e03c1d94ab65713d0a11c6f20096058f1f6", "message": "add version to license", "committedDate": "2020-03-28T07:48:17Z", "type": "commit"}, {"oid": "22a35aa536c40fcaa8a48ae07f47defab3928647", "url": "https://github.com/apache/druid/commit/22a35aa536c40fcaa8a48ae07f47defab3928647", "message": "Merge remote-tracking branch 'apache/master' into aws_pwd_provider", "committedDate": "2020-04-05T01:19:28Z", "type": "commit"}, {"oid": "d65edc01e891da8b7df81fb38e3d196004d7e091", "url": "https://github.com/apache/druid/commit/d65edc01e891da8b7df81fb38e3d196004d7e091", "message": "change parent version to 0.19.0-snapshot", "committedDate": "2020-04-05T01:20:27Z", "type": "commit"}, {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb", "url": "https://github.com/apache/druid/commit/ff1f02ab38715bc784f26e4394d4ec18872983bb", "message": "Merge remote-tracking branch 'apache/master' into aws_pwd_provider", "committedDate": "2020-05-30T00:38:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2Njg0OA==", "url": "https://github.com/apache/druid/pull/9518#discussion_r551666848", "bodyText": "Maybe AWSRDSModule?", "author": "jihoonson", "createdAt": "2021-01-05T01:34:50Z", "path": "extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.aws.rds;\n+\n+import com.fasterxml.jackson.databind.Module;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Binder;\n+import org.apache.druid.initialization.DruidModule;\n+\n+import java.util.List;\n+\n+public class AWSModule implements DruidModule", "originalCommit": "ff1f02ab38715bc784f26e4394d4ec18872983bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxMjk5NQ==", "url": "https://github.com/apache/druid/pull/9518#discussion_r551712995", "bodyText": "will change", "author": "himanshug", "createdAt": "2021-01-05T04:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMDUyOA==", "url": "https://github.com/apache/druid/pull/9518#discussion_r552200528", "bodyText": "changed", "author": "himanshug", "createdAt": "2021-01-05T21:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2Njg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "6ab56872d007d82f229caafa1e1f753f92a5126c", "chunk": "diff --git a/extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java b/extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSRDSModule.java\nsimilarity index 95%\nrename from extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java\nrename to extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSRDSModule.java\nindex c16bd333e5..298792a09b 100644\n--- a/extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java\n+++ b/extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSRDSModule.java\n\n@@ -28,14 +28,14 @@ import org.apache.druid.initialization.DruidModule;\n \n import java.util.List;\n \n-public class AWSModule implements DruidModule\n+public class AWSRDSModule implements DruidModule\n {\n   @Override\n   public List<? extends Module> getJacksonModules()\n   {\n     return ImmutableList.of(\n         new SimpleModule(\"DruidAwsRdsExtentionsModule\").registerSubtypes(\n-            new NamedType(AWSRDSTokenPasswordProvider.class, \"awsrdstoken\")\n+            new NamedType(AWSRDSTokenPasswordProvider.class, \"aws-rds-token\")\n         )\n     );\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng==", "url": "https://github.com/apache/druid/pull/9518#discussion_r551667346", "bodyText": "Haha, would you fix ummm copies?", "author": "jihoonson", "createdAt": "2021-01-05T01:36:09Z", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that PasswordProvider is asked for password every time a brand new connection is established\n+ * with DB. PasswordProvider impls such as based on AWS tokens refresh the underlying token periodically since\n+ * each token is valid for a certain period of time only.\n+ * So, This class overrides[ummm copies] the methods from base class in order to keep track of connection properties", "originalCommit": "ff1f02ab38715bc784f26e4394d4ec18872983bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxMjk0Ng==", "url": "https://github.com/apache/druid/pull/9518#discussion_r551712946", "bodyText": "not sure if there is anything to fix as of now , BasicDataSource isn't open enough for extension to let us dynamically get password from config everytime a new connection is setup.", "author": "himanshug", "createdAt": "2021-01-05T04:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTY1NQ==", "url": "https://github.com/apache/druid/pull/9518#discussion_r551731655", "bodyText": "Oh, I just assumed that you wanted to add a link instead of ummm copies. It would be enough to just remove it if there is nothing to fix.", "author": "jihoonson", "createdAt": "2021-01-05T05:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMDY4Mg==", "url": "https://github.com/apache/druid/pull/9518#discussion_r552200682", "bodyText": "i see :) , updated the comment to hopefully remove the link confusion", "author": "himanshug", "createdAt": "2021-01-05T21:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6ab56872d007d82f229caafa1e1f753f92a5126c", "chunk": "diff --git a/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java b/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\nindex 642938c052..f2ced95757 100644\n--- a/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\n+++ b/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\n\n@@ -30,11 +30,12 @@ import java.sql.SQLException;\n import java.util.Properties;\n \n /**\n- * This class exists so that PasswordProvider is asked for password every time a brand new connection is established\n- * with DB. PasswordProvider impls such as based on AWS tokens refresh the underlying token periodically since\n- * each token is valid for a certain period of time only.\n- * So, This class overrides[ummm copies] the methods from base class in order to keep track of connection properties\n- * and call MetadataStorageConnectorConfig.getPassword() everytime a new connection is setup.\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n  */\n public class BasicDataSourceExt extends BasicDataSource\n {\n"}}, {"oid": "6ef6341d41ac87112b21447d5e3029e1e9990f03", "url": "https://github.com/apache/druid/commit/6ef6341d41ac87112b21447d5e3029e1e9990f03", "message": "Merge remote-tracking branch 'origin/master' into aws_pwd_provider", "committedDate": "2021-01-05T15:48:05Z", "type": "commit"}, {"oid": "6ab56872d007d82f229caafa1e1f753f92a5126c", "url": "https://github.com/apache/druid/commit/6ab56872d007d82f229caafa1e1f753f92a5126c", "message": "address review comments", "committedDate": "2021-01-05T16:00:33Z", "type": "commit"}, {"oid": "f04c23acbc057823cce5369038adfb07ed6340c3", "url": "https://github.com/apache/druid/commit/f04c23acbc057823cce5369038adfb07ed6340c3", "message": "fix core/ code coverage", "committedDate": "2021-01-05T21:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyNjUyMw==", "url": "https://github.com/apache/druid/pull/9518#discussion_r552326523", "bodyText": "nit: i think we've been trying to tone it down and be professional and shit \ud83d\ude1b , related #10270", "author": "clintropolis", "createdAt": "2021-01-06T02:17:19Z", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n+ */\n+public class BasicDataSourceExt extends BasicDataSource\n+{\n+  private static final Logger LOGGER = new Logger(BasicDataSourceExt.class);\n+\n+  private Properties connectionProperties;\n+  private final MetadataStorageConnectorConfig connectorConfig;\n+\n+  public BasicDataSourceExt(MetadataStorageConnectorConfig connectorConfig)\n+  {\n+    this.connectorConfig = connectorConfig;\n+    this.connectionProperties = new Properties();\n+  }\n+\n+  @Override\n+  public void addConnectionProperty(String name, String value)\n+  {\n+    connectionProperties.put(name, value);\n+    super.addConnectionProperty(name, value);\n+  }\n+\n+  @Override\n+  public void removeConnectionProperty(String name)\n+  {\n+    connectionProperties.remove(name);\n+    super.removeConnectionProperty(name);\n+  }\n+\n+  @Override\n+  public void setConnectionProperties(String connectionProperties)\n+  {\n+    if (connectionProperties == null) {\n+      throw new NullPointerException(\"connectionProperties is null\");\n+    }\n+\n+    String[] entries = connectionProperties.split(\";\");\n+    Properties properties = new Properties();\n+    for (String entry : entries) {\n+      if (entry.length() > 0) {\n+        int index = entry.indexOf('=');\n+        if (index > 0) {\n+          String name = entry.substring(0, index);\n+          String value = entry.substring(index + 1);\n+          properties.setProperty(name, value);\n+        } else {\n+          // no value is empty string which is how java.util.Properties works\n+          properties.setProperty(entry, \"\");\n+        }\n+      }\n+    }\n+    this.connectionProperties = properties;\n+    super.setConnectionProperties(connectionProperties);\n+  }\n+\n+  @VisibleForTesting\n+  public Properties getConnectionProperties()\n+  {\n+    return connectionProperties;\n+  }\n+\n+  @Override\n+  protected ConnectionFactory createConnectionFactory() throws SQLException\n+  {\n+    Driver driverToUse = getDriver();\n+\n+    if (driverToUse == null) {\n+      Class<?> driverFromCCL = null;\n+      if (getDriverClassName() != null) {\n+        try {\n+          try {\n+            if (getDriverClassLoader() == null) {\n+              driverFromCCL = Class.forName(getDriverClassName());\n+            } else {\n+              driverFromCCL = Class.forName(\n+                  getDriverClassName(), true, getDriverClassLoader());\n+            }\n+          }\n+          catch (ClassNotFoundException cnfe) {\n+            driverFromCCL = Thread.currentThread(\n+            ).getContextClassLoader().loadClass(\n+                getDriverClassName());\n+          }\n+        }\n+        catch (Exception t) {\n+          String message = \"Cannot load JDBC driver class '\" +\n+                           getDriverClassName() + \"'\";\n+          LOGGER.error(t, message);\n+          throw new SQLException(message, t);\n+        }\n+      }\n+\n+      try {\n+        if (driverFromCCL == null) {\n+          driverToUse = DriverManager.getDriver(getUrl());\n+        } else {\n+          // Usage of DriverManager is not possible, as it does not\n+          // respect the ContextClassLoader\n+          // N.B. This cast may cause ClassCastException which is handled below\n+          driverToUse = (Driver) driverFromCCL.newInstance();\n+          if (!driverToUse.acceptsURL(getUrl())) {\n+            throw new SQLException(\"No suitable driver\", \"08001\");\n+          }\n+        }\n+      }\n+      catch (Exception t) {\n+        String message = \"Cannot create JDBC driver of class '\" +\n+                         (getDriverClassName() != null ? getDriverClassName() : \"\") +\n+                         \"' for connect URL '\" + getUrl() + \"'\";\n+        LOGGER.error(t, message);\n+        throw new SQLException(message, t);\n+      }\n+    }\n+\n+    if (driverToUse == null) {\n+      throw new RE(\"WTH! Couln't find a Driver\");", "originalCommit": "f04c23acbc057823cce5369038adfb07ed6340c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4MzA1Ng==", "url": "https://github.com/apache/druid/pull/9518#discussion_r552983056", "bodyText": "changed, I thought \"WTF\" to \"WTH\" transition was that :)", "author": "himanshug", "createdAt": "2021-01-06T22:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyNjUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "254de29b3688941e38048b64b41f8b7b2dd34119", "chunk": "diff --git a/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java b/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\nindex 4380134649..c24ace0357 100644\n--- a/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\n+++ b/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\n\n@@ -34,7 +34,7 @@ import java.util.Properties;\n  * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n  * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n  * underlying token periodically since each token is valid for a certain period of time only.\n- * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n  * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n  * connection is setup.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxMTY3MA==", "url": "https://github.com/apache/druid/pull/9518#discussion_r552411670", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n          \n          \n            \n             * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n          \n          \n            \n             * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n          \n          \n            \n             * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new", "author": "clintropolis", "createdAt": "2021-01-06T07:29:52Z", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new", "originalCommit": "f04c23acbc057823cce5369038adfb07ed6340c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "254de29b3688941e38048b64b41f8b7b2dd34119", "chunk": "diff --git a/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java b/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\nindex 4380134649..c24ace0357 100644\n--- a/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\n+++ b/server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\n\n@@ -34,7 +34,7 @@ import java.util.Properties;\n  * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n  * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n  * underlying token periodically since each token is valid for a certain period of time only.\n- * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n  * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n  * connection is setup.\n  */\n"}}, {"oid": "254de29b3688941e38048b64b41f8b7b2dd34119", "url": "https://github.com/apache/druid/commit/254de29b3688941e38048b64b41f8b7b2dd34119", "message": "Update server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java\n\nCo-authored-by: Clint Wylie <cjwylie@gmail.com>", "committedDate": "2021-01-06T21:57:07Z", "type": "commit"}, {"oid": "fe2ab6a58e49dc4e7d3be834193e51304a27b7ac", "url": "https://github.com/apache/druid/commit/fe2ab6a58e49dc4e7d3be834193e51304a27b7ac", "message": "address review comments", "committedDate": "2021-01-06T21:58:10Z", "type": "commit"}, {"oid": "71c452b97e19a6422cf8e49c4636047eecafddb5", "url": "https://github.com/apache/druid/commit/71c452b97e19a6422cf8e49c4636047eecafddb5", "message": "fix spellchecker", "committedDate": "2021-01-06T22:01:00Z", "type": "commit"}, {"oid": "3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f", "url": "https://github.com/apache/druid/commit/3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f", "message": "remove inadvertant website file change", "committedDate": "2021-01-06T22:04:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTgzMQ==", "url": "https://github.com/apache/druid/pull/9518#discussion_r575571831", "bodyText": "@himanshug Did you adopt this source code from org.apache.commons.dbcp2.BasicDataSource? If so, it should be added in the licenses.yaml file.", "author": "jihoonson", "createdAt": "2021-02-12T23:24:24Z", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n+ */\n+public class BasicDataSourceExt extends BasicDataSource\n+{\n+  private static final Logger LOGGER = new Logger(BasicDataSourceExt.class);\n+\n+  private Properties connectionProperties;\n+  private final MetadataStorageConnectorConfig connectorConfig;\n+\n+  public BasicDataSourceExt(MetadataStorageConnectorConfig connectorConfig)\n+  {\n+    this.connectorConfig = connectorConfig;\n+    this.connectionProperties = new Properties();\n+  }\n+\n+  @Override\n+  public void addConnectionProperty(String name, String value)\n+  {\n+    connectionProperties.put(name, value);\n+    super.addConnectionProperty(name, value);\n+  }\n+\n+  @Override\n+  public void removeConnectionProperty(String name)\n+  {\n+    connectionProperties.remove(name);\n+    super.removeConnectionProperty(name);\n+  }\n+\n+  @Override\n+  public void setConnectionProperties(String connectionProperties)\n+  {\n+    if (connectionProperties == null) {\n+      throw new NullPointerException(\"connectionProperties is null\");\n+    }\n+\n+    String[] entries = connectionProperties.split(\";\");\n+    Properties properties = new Properties();\n+    for (String entry : entries) {\n+      if (entry.length() > 0) {\n+        int index = entry.indexOf('=');\n+        if (index > 0) {\n+          String name = entry.substring(0, index);\n+          String value = entry.substring(index + 1);\n+          properties.setProperty(name, value);\n+        } else {\n+          // no value is empty string which is how java.util.Properties works\n+          properties.setProperty(entry, \"\");\n+        }\n+      }\n+    }\n+    this.connectionProperties = properties;\n+    super.setConnectionProperties(connectionProperties);\n+  }\n+\n+  @VisibleForTesting\n+  public Properties getConnectionProperties()\n+  {\n+    return connectionProperties;\n+  }\n+\n+  @Override\n+  protected ConnectionFactory createConnectionFactory() throws SQLException", "originalCommit": "3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MzM2OQ==", "url": "https://github.com/apache/druid/pull/9518#discussion_r575573369", "bodyText": "yeah, most code in this file is copied from org.apache.commons.dbcp2.BasicDataSource , will send a PR shortly.", "author": "himanshug", "createdAt": "2021-02-12T23:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MzY5OQ==", "url": "https://github.com/apache/druid/pull/9518#discussion_r575573699", "bodyText": "Thank you!", "author": "jihoonson", "createdAt": "2021-02-12T23:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTgzMQ=="}], "type": "inlineReview", "revised_code": null}]}