{"pr_number": 10248, "pr_title": "fix bug with expressions on sparse string realtime columns without explicit null valued rows", "pr_createdAt": "2020-08-06T10:13:57Z", "pr_url": "https://github.com/apache/druid/pull/10248", "timeline": [{"oid": "0a93dada22a8d3eaf1d0fe42fa98de5af0921ec0", "url": "https://github.com/apache/druid/commit/0a93dada22a8d3eaf1d0fe42fa98de5af0921ec0", "message": "fix bug with realtime expressions on sparse string columns", "committedDate": "2020-08-06T10:05:09Z", "type": "commit"}, {"oid": "bcedf207ebaef2d9066859b19dd2c181fb09ca6a", "url": "https://github.com/apache/druid/commit/bcedf207ebaef2d9066859b19dd2c181fb09ca6a", "message": "fix test", "committedDate": "2020-08-06T10:18:34Z", "type": "commit"}, {"oid": "e3c6e73284d2eb60fbcfe691260c3b32756da679", "url": "https://github.com/apache/druid/commit/e3c6e73284d2eb60fbcfe691260c3b32756da679", "message": "add comment back", "committedDate": "2020-08-06T10:25:14Z", "type": "commit"}, {"oid": "3951eb3b9946f19afa541530c9ed4989ce15a59f", "url": "https://github.com/apache/druid/commit/3951eb3b9946f19afa541530c9ed4989ce15a59f", "message": "push capabilities for dimensions to dimension indexers since they know things", "committedDate": "2020-08-06T12:13:23Z", "type": "commit"}, {"oid": "96f19350716fa9de7c9cb7f402cbbf112f53daef", "url": "https://github.com/apache/druid/commit/96f19350716fa9de7c9cb7f402cbbf112f53daef", "message": "style", "committedDate": "2020-08-06T12:15:35Z", "type": "commit"}, {"oid": "cf8e34efc700910165a8a3a6e1f773f804a03cc0", "url": "https://github.com/apache/druid/commit/cf8e34efc700910165a8a3a6e1f773f804a03cc0", "message": "style", "committedDate": "2020-08-06T12:31:10Z", "type": "commit"}, {"oid": "8be87df0b22371bb1241d4d2705c4243b5519a40", "url": "https://github.com/apache/druid/commit/8be87df0b22371bb1241d4d2705c4243b5519a40", "message": "fixes", "committedDate": "2020-08-06T21:43:59Z", "type": "commit"}, {"oid": "366a1c74953efb07a2b9ede134c274e2b79384a2", "url": "https://github.com/apache/druid/commit/366a1c74953efb07a2b9ede134c274e2b79384a2", "message": "getting a bit carried away", "committedDate": "2020-08-07T02:18:42Z", "type": "commit"}, {"oid": "5c0c2ad3207e782e101dd942bbdfbab3f3398cf4", "url": "https://github.com/apache/druid/commit/5c0c2ad3207e782e101dd942bbdfbab3f3398cf4", "message": "missed one", "committedDate": "2020-08-07T02:26:13Z", "type": "commit"}, {"oid": "dee4293c31a6b8488c455c4a27f8f7fdb4aced98", "url": "https://github.com/apache/druid/commit/dee4293c31a6b8488c455c4a27f8f7fdb4aced98", "message": "fix it", "committedDate": "2020-08-07T02:53:46Z", "type": "commit"}, {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "url": "https://github.com/apache/druid/commit/9fffcd58695a516072b9274bd05fc90a9109c5a3", "message": "benchmark build fix", "committedDate": "2020-08-07T04:55:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466842879", "bodyText": "Negative maybe makes me do a double-take when reading. Is this equivalent to capabilities.isDictionaryEncoded.isFalse()?\nAlso, that has the effect of making this check lax (it will pass if the dictionary-encodedness is unknown). That doesn't seem correct. Shouldn't it be strict, if it relies on dictionary-encodedness? Or if it doesn't rely on it, then the check should be removed.", "author": "gianm", "createdAt": "2020-08-07T06:18:01Z", "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -73,16 +73,16 @@ private DimensionHandlerUtils()\n   )\n   {\n     if (capabilities == null) {\n-      return new StringDimensionHandler(dimensionName, multiValueHandling, true);\n+      return new StringDimensionHandler(dimensionName, multiValueHandling, true, false);\n     }\n \n     multiValueHandling = multiValueHandling == null ? MultiValueHandling.ofDefault() : multiValueHandling;\n \n     if (capabilities.getType() == ValueType.STRING) {\n-      if (!capabilities.isDictionaryEncoded()) {\n+      if (!capabilities.isDictionaryEncoded().isMaybeTrue()) {", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MzM2OQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467363369", "bodyText": "There wasn't actually an isFalse, but I added it, and changed a few places to use it to read cleaner. The relaxed check isn't actually necessary here either due to the CoerceLogic changes, but I have left is as isFalse() instead instead of the slightly more strict ! ... isTrue().", "author": "clintropolis", "createdAt": "2020-08-08T05:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxODY0OQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r468218649", "bodyText": "Sorry, I don't understand the comment\u2026\u00a0are you saying that the laxer isFalse() version is the most correct one? Or are you saying it doesn't matter because unknowns aren't expected here?", "author": "gianm", "createdAt": "2020-08-10T22:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1ODQxNQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r468258415", "bodyText": "I hope this doesn't make this more confusing \ud83d\ude1c\nUnknowns are no longer expected to be here, but the unknowns which could previously appear here, prior to the coercion logic refactoring, should have been treated as true anyway due to the context of how this method is called. This is because unknown would only happen from string dimension indexers of the incremental index which ultimately always produce string columns with a dictionary, and these handlers this method are making are used for things like index merging, etc, and so could safely treat unknown from the dim indexer as true because it wants the desired state rather than the current state.\nNot going to do in this PR, but I am trying to plan out how to refactor ColumnCapabilitiesImpl into a builder that requires a coercion logic to build into a ColumnCapabilities, and changing ColumnCapabilities back to having only boolean, instead of the Capable enum. The idea being to limit the surface area of having to deal with unknown to where is absolutely necessary, because it makes things overly complex to have to deal with these tri-state booleans everywhere.", "author": "clintropolis", "createdAt": "2020-08-11T00:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3MDI4Mg==", "url": "https://github.com/apache/druid/pull/10248#discussion_r468270282", "bodyText": "This is because unknown would only happen from string dimension indexers of the incremental index which ultimately always produce string columns with a dictionary, and these handlers this method are making are used for things like index merging, etc, and so could safely treat unknown from the dim indexer as true because it wants the desired state rather than the current state.\n\nThanks for explaining it. This sounds brittle for the following reason:\n\nAt the call site here, the check really does mean to require a dictionary.\nSo logically it should treat unknowns as false (to be safe \u2014\u00a0if it's not sure if a dictionary exists, and it requires one, then it should fail the check).\nBut it sounds like there are cases where an unknown will appear, and we \"know\" that it is really meant to be a true. So we need to treat unknowns as OK instead of not OK.\n\nBut what if a new case appears in a future patch that isn't (3)? Then this check is too lax. And because the new case is likely to come from a new call site of getHandlerFromCapabilities, whoever adds it will probably not realize they need to update the check here.\nSo instead, would it work to keep the check strict, and resolving unknowns to trues at the current call sites? Then, if a new caller is added, it'd have to deal with the ambiguity.", "author": "gianm", "createdAt": "2020-08-11T01:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1MzA3Mw==", "url": "https://github.com/apache/druid/pull/10248#discussion_r468353073", "bodyText": "I changed the check back to the stricter check, and added more explicit calls to snapshot method around the callers of this method where necessary (which caught one I was mistakenly coercing out of band with CoerceLogic).", "author": "clintropolis", "createdAt": "2020-08-11T06:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2NzUxNg==", "url": "https://github.com/apache/druid/pull/10248#discussion_r468767516", "bodyText": "which caught one I was mistakenly coercing out of band with CoerceLogic\n\nThe system works!!", "author": "gianm", "createdAt": "2020-08-11T18:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java b/processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java\nindex 6bec81e763..c83aa0d7cb 100644\n--- a/processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java\n+++ b/processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java\n\n@@ -79,7 +79,7 @@ public final class DimensionHandlerUtils\n     multiValueHandling = multiValueHandling == null ? MultiValueHandling.ofDefault() : multiValueHandling;\n \n     if (capabilities.getType() == ValueType.STRING) {\n-      if (!capabilities.isDictionaryEncoded().isMaybeTrue()) {\n+      if (capabilities.isDictionaryEncoded().isFalse()) {\n         throw new IAE(\"String column must have dictionary encoding.\");\n       }\n       return new StringDimensionHandler(dimensionName, multiValueHandling, capabilities.hasBitmapIndexes(), capabilities.hasSpatialIndexes());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MDc3OQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466850779", "bodyText": "ColumnCapabilities is a more typical return value (the Impl is an impl but we should generally return an interface).", "author": "gianm", "createdAt": "2020-08-07T06:40:43Z", "path": "processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java", "diffHunk": "@@ -236,6 +237,7 @@ DimensionSelector makeDimensionSelector(\n       IncrementalIndex.DimensionDesc desc\n   );\n \n+  ColumnCapabilitiesImpl getColumnCapabilities();", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTY2Nw==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467351667", "bodyText": "changed many places to use ColumnCapabilities instead of ColumnCapabilitiesImpl, since they are no longer set from multiple places", "author": "clintropolis", "createdAt": "2020-08-08T02:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MDc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java b/processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java\nindex 9b80fb50c6..277deb94e9 100644\n--- a/processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java\n+++ b/processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java\n\n@@ -237,7 +237,7 @@ public interface DimensionIndexer\n       IncrementalIndex.DimensionDesc desc\n   );\n \n-  ColumnCapabilitiesImpl getColumnCapabilities();\n+  ColumnCapabilities getColumnCapabilities();\n   /**\n    * Compares the row values for this DimensionIndexer's dimension from a Row key.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTY1OA==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466851658", "bodyText": "Can this be private? Looks like it isn't used outside of this class.", "author": "gianm", "createdAt": "2020-08-07T06:43:08Z", "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java", "diffHunk": "@@ -400,6 +404,17 @@ public int getCardinality()\n     return dimLookup.size();\n   }\n \n+  /**\n+   * returns true if all values are encoded in {@link #dimLookup}\n+   */\n+  public boolean dictionaryEncodesAllValues()", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTU5OA==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467351598", "bodyText": "oops, yes, this is a relic from an earlier, uglier, version of this fix, it is private now", "author": "clintropolis", "createdAt": "2020-08-08T02:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java b/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java\nindex e8d3c96e50..49609940c5 100644\n--- a/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java\n+++ b/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java\n\n@@ -407,7 +408,7 @@ public class StringDimensionIndexer implements DimensionIndexer<Integer, int[],\n   /**\n    * returns true if all values are encoded in {@link #dimLookup}\n    */\n-  public boolean dictionaryEncodesAllValues()\n+  private boolean dictionaryEncodesAllValues()\n   {\n     // name lookup is possible in advance if we explicitly process a value for every row, or if we've encountered an\n     // actual null value and it is present in our dictionary. otherwise the dictionary will be missing ids for implicit\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTk3MQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466851971", "bodyText": "Please add some punctuation to this multiline comment \ud83d\ude42\nI think I parsed it correctly, but it wasn't effortless.", "author": "gianm", "createdAt": "2020-08-07T06:44:01Z", "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java", "diffHunk": "@@ -456,6 +471,30 @@ public int getUnsortedEncodedKeyComponentHashCode(int[] key)\n     return Arrays.hashCode(key);\n   }\n \n+  @Override\n+  public ColumnCapabilitiesImpl getColumnCapabilities()\n+  {\n+    ColumnCapabilitiesImpl capabilites = new ColumnCapabilitiesImpl().setType(ValueType.STRING)\n+                                                                     .setHasBitmapIndexes(hasBitmapIndexes)\n+                                                                     .setHasSpatialIndexes(hasSpatialIndexes)\n+                                                                     .setDictionaryValuesUnique(true)\n+                                                                     .setDictionaryValuesSorted(false);\n+\n+    // strings are only single valued, until they are not...", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTU1OQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467351559", "bodyText": "reworked these comments, hopefully it is a bit clearer", "author": "clintropolis", "createdAt": "2020-08-08T02:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java b/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java\nindex e8d3c96e50..49609940c5 100644\n--- a/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java\n+++ b/processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java\n\n@@ -472,7 +473,7 @@ public class StringDimensionIndexer implements DimensionIndexer<Integer, int[],\n   }\n \n   @Override\n-  public ColumnCapabilitiesImpl getColumnCapabilities()\n+  public ColumnCapabilities getColumnCapabilities()\n   {\n     ColumnCapabilitiesImpl capabilites = new ColumnCapabilitiesImpl().setType(ValueType.STRING)\n                                                                      .setHasBitmapIndexes(hasBitmapIndexes)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzAxNg==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466853016", "bodyText": "It looks like this is only used in the tests. If so, it should be moved there.", "author": "gianm", "createdAt": "2020-08-07T06:46:48Z", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -105,4 +104,46 @@ public String toString()\n       return StringUtils.toLowerCase(super.toString());\n     }\n   }\n+\n+  interface CoercionLogic\n+  {\n+    boolean dictionaryEncoded();\n+    boolean dictionaryValuesSorted();\n+    boolean dictionaryValuesUnique();\n+    boolean multipleValues();\n+  }\n+\n+  class AllCoercionLogic implements CoercionLogic", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTUxMA==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467351510", "bodyText": "removed", "author": "clintropolis", "createdAt": "2020-08-08T02:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java b/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java\nindex 329324d7b9..037510208a 100644\n--- a/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java\n+++ b/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java\n\n@@ -112,38 +117,4 @@ public interface ColumnCapabilities\n     boolean dictionaryValuesUnique();\n     boolean multipleValues();\n   }\n-\n-  class AllCoercionLogic implements CoercionLogic\n-  {\n-    private final boolean coerceTo;\n-\n-    public AllCoercionLogic(boolean coerceTo)\n-    {\n-      this.coerceTo = coerceTo;\n-    }\n-\n-    @Override\n-    public boolean dictionaryEncoded()\n-    {\n-      return coerceTo;\n-    }\n-\n-    @Override\n-    public boolean dictionaryValuesSorted()\n-    {\n-      return coerceTo;\n-    }\n-\n-    @Override\n-    public boolean dictionaryValuesUnique()\n-    {\n-      return coerceTo;\n-    }\n-\n-    @Override\n-    public boolean multipleValues()\n-    {\n-      return coerceTo;\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzA3Nw==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466853077", "bodyText": "Please add some javadocs. The purpose of this interface isn't immediately obvious.", "author": "gianm", "createdAt": "2020-08-07T06:47:00Z", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -105,4 +104,46 @@ public String toString()\n       return StringUtils.toLowerCase(super.toString());\n     }\n   }\n+\n+  interface CoercionLogic", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTUwMw==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467351503", "bodyText": "Added some javadocs, also tried my hand at documenting ColumnCapabilities while i was there", "author": "clintropolis", "createdAt": "2020-08-08T02:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java b/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java\nindex 329324d7b9..037510208a 100644\n--- a/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java\n+++ b/processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java\n\n@@ -112,38 +117,4 @@ public interface ColumnCapabilities\n     boolean dictionaryValuesUnique();\n     boolean multipleValues();\n   }\n-\n-  class AllCoercionLogic implements CoercionLogic\n-  {\n-    private final boolean coerceTo;\n-\n-    public AllCoercionLogic(boolean coerceTo)\n-    {\n-      this.coerceTo = coerceTo;\n-    }\n-\n-    @Override\n-    public boolean dictionaryEncoded()\n-    {\n-      return coerceTo;\n-    }\n-\n-    @Override\n-    public boolean dictionaryValuesSorted()\n-    {\n-      return coerceTo;\n-    }\n-\n-    @Override\n-    public boolean dictionaryValuesUnique()\n-    {\n-      return coerceTo;\n-    }\n-\n-    @Override\n-    public boolean multipleValues()\n-    {\n-      return coerceTo;\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1ODUzNQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466858535", "bodyText": "Why does this test need to be deleted?", "author": "gianm", "createdAt": "2020-08-07T07:01:12Z", "path": "processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java", "diffHunk": "@@ -2012,32 +2011,6 @@ public void testDictIdSeeker()\n     Assert.assertEquals(-1, dictIdSeeker.seek(5));\n   }\n \n-  @Test(expected = IllegalArgumentException.class)\n-  public void testCloser() throws Exception", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTQ3MA==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467351470", "bodyText": "2 reasons, first, the mechanism by which it was causing the failure (artificially setting spatial index) doesn't work anymore since the capabilities are computed from the indexer rather than stored in a map. However, looking closer, the test didn't appear to be actually testing what it says (the closer cleaning up temporary files), because the paths it is checking for existence do not appear to be created anywhere in the code and only appear in this test, so removing it entirely didn't seem like a loss.", "author": "clintropolis", "createdAt": "2020-08-08T02:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1ODUzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1OTAzNQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r466859035", "bodyText": "Is this the regression test? If so could you add a comment that this is a regression test for whichever the issue number is?", "author": "gianm", "createdAt": "2020-08-07T07:02:20Z", "path": "processing/src/test/java/org/apache/druid/segment/virtual/ExpressionSelectorsTest.java", "diffHunk": "@@ -231,6 +252,80 @@ public void testCoerceExprToValue()\n     );\n   }\n \n+  @Test\n+  public void testIncrementIndexStringSelector() throws IndexSizeExceededException", "originalCommit": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTIzMA==", "url": "https://github.com/apache/druid/pull/10248#discussion_r467351230", "bodyText": "added a comment, (there isn't an open issue as far as I could tell)", "author": "clintropolis", "createdAt": "2020-08-08T02:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1OTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyMTQ2MQ==", "url": "https://github.com/apache/druid/pull/10248#discussion_r468221461", "bodyText": "A link to this PR would suffice, IMO.", "author": "gianm", "createdAt": "2020-08-10T22:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1OTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NjY3Mg==", "url": "https://github.com/apache/druid/pull/10248#discussion_r468256672", "bodyText": "added link to PR", "author": "clintropolis", "createdAt": "2020-08-11T00:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1OTAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "626fbb43b12ce1656f37483fbdb8c73cbb9fcb09", "chunk": "diff --git a/processing/src/test/java/org/apache/druid/segment/virtual/ExpressionSelectorsTest.java b/processing/src/test/java/org/apache/druid/segment/virtual/ExpressionSelectorsTest.java\nindex bff21d83c8..52143b0ffd 100644\n--- a/processing/src/test/java/org/apache/druid/segment/virtual/ExpressionSelectorsTest.java\n+++ b/processing/src/test/java/org/apache/druid/segment/virtual/ExpressionSelectorsTest.java\n\n@@ -255,6 +255,12 @@ public class ExpressionSelectorsTest extends InitializedNullHandlingTest\n   @Test\n   public void testIncrementIndexStringSelector() throws IndexSizeExceededException\n   {\n+    // This test covers a regression caused by ColumnCapabilites.isDictionaryEncoded not matching the value of\n+    // DimensionSelector.nameLookupPossibleInAdvance in the indexers of an IncrementalIndex, which resulted in an\n+    // exception trying to make an optimized string expression selector that was not appropriate to use for the\n+    // underlying dimension selector.\n+    // This occurred during schemaless ingestion with spare dimension values and no explicit null rows, so the\n+    // conditions are replicated by this test.\n     IncrementalIndexSchema schema = new IncrementalIndexSchema(\n         0,\n         new TimestampSpec(\"time\", \"millis\", DateTimes.nowUtc()),\n"}}, {"oid": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "url": "https://github.com/apache/druid/commit/49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "message": "review stuffs", "committedDate": "2020-08-07T11:48:46Z", "type": "commit"}, {"oid": "626fbb43b12ce1656f37483fbdb8c73cbb9fcb09", "url": "https://github.com/apache/druid/commit/626fbb43b12ce1656f37483fbdb8c73cbb9fcb09", "message": "javadoc and comments", "committedDate": "2020-08-08T02:22:22Z", "type": "commit"}, {"oid": "0b46811abe0f7917274a4b8af645ddea10a7ef7f", "url": "https://github.com/apache/druid/commit/0b46811abe0f7917274a4b8af645ddea10a7ef7f", "message": "add comment", "committedDate": "2020-08-11T00:18:20Z", "type": "commit"}, {"oid": "09abd38e2d2e94e5f572fa213cea901c519665ac", "url": "https://github.com/apache/druid/commit/09abd38e2d2e94e5f572fa213cea901c519665ac", "message": "more strict check", "committedDate": "2020-08-11T02:58:45Z", "type": "commit"}, {"oid": "9ecefc2309863f313a6c91531455d89e9eac797a", "url": "https://github.com/apache/druid/commit/9ecefc2309863f313a6c91531455d89e9eac797a", "message": "fix missed usaged of impl instead of interface", "committedDate": "2020-08-11T11:21:32Z", "type": "commit"}]}