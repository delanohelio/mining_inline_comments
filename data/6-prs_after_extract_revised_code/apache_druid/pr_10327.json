{"pr_number": 10327, "pr_title": "benchmark for indexed table experiments", "pr_createdAt": "2020-08-27T23:43:06Z", "pr_url": "https://github.com/apache/druid/pull/10327", "timeline": [{"oid": "bcc2d60d2dbc3d5bcbd32edb356c818c4f11a497", "url": "https://github.com/apache/druid/commit/bcc2d60d2dbc3d5bcbd32edb356c818c4f11a497", "message": "benchmark for indexed table experiments", "committedDate": "2020-08-27T23:20:29Z", "type": "commit"}, {"oid": "cafb389edbfaa5ae52d10de167c9f2b2fe151b24", "url": "https://github.com/apache/druid/commit/cafb389edbfaa5ae52d10de167c9f2b2fe151b24", "message": "fix style", "committedDate": "2020-08-28T04:00:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1ODQ1OQ==", "url": "https://github.com/apache/druid/pull/10327#discussion_r480358459", "bodyText": "This includes benchmarking closing the table. I'm not sure how much of a difference that would make. Do you want this benchmark to measure just makeTable?", "author": "suneet-s", "createdAt": "2020-08-31T19:43:00Z", "path": "benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.benchmark;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.druid.java.util.common.io.Closer;\n+import org.apache.druid.segment.QueryableIndexSegment;\n+import org.apache.druid.segment.join.table.IndexedTable;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 3)\n+@Measurement(iterations = 5)\n+public class IndexedTableLoadingBenchmark\n+{\n+  private static List<Set<String>> KEY_COLUMN_SETS = ImmutableList.of(\n+      ImmutableSet.of(\"stringKey\", \"longKey\")\n+  );\n+\n+  @Param({\"0\"})\n+  int keyColumns;\n+\n+  @Param({\"50000\", \"500000\", \"5000000\"})\n+  int rowsPerSegment;\n+\n+  @Param({\"segment\"})\n+  String indexedTableType;\n+\n+  Closer closer = Closer.create();\n+\n+  QueryableIndexSegment tableSegment = null;\n+\n+  @Setup(Level.Trial)\n+  public void setup()\n+  {\n+    tableSegment = IndexedTableJoinCursorBenchmark.makeQueryableIndexSegment(closer, \"join\", rowsPerSegment);\n+  }\n+\n+  @TearDown\n+  public void tearDown() throws IOException\n+  {\n+    closer.close();\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public void loadTable(Blackhole blackhole)\n+  {\n+    try (\n+        IndexedTable table =", "originalCommit": "cafb389edbfaa5ae52d10de167c9f2b2fe151b24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3OTEwNA==", "url": "https://github.com/apache/druid/pull/10327#discussion_r488079104", "bodyText": "yeah, that makes sense, modified to close in a teardown method that runs after each iteration", "author": "clintropolis", "createdAt": "2020-09-14T16:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1ODQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "46ebf9c738f3f227db8341f9a106fb6dae170e57", "chunk": "diff --git a/benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java b/benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java\nindex a6ea0520bc..ca6ac13fbc 100644\n--- a/benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java\n+++ b/benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java\n\n@@ -66,6 +66,7 @@ public class IndexedTableLoadingBenchmark\n   Closer closer = Closer.create();\n \n   QueryableIndexSegment tableSegment = null;\n+  IndexedTable table = null;\n \n   @Setup(Level.Trial)\n   public void setup()\n"}}, {"oid": "46ebf9c738f3f227db8341f9a106fb6dae170e57", "url": "https://github.com/apache/druid/commit/46ebf9c738f3f227db8341f9a106fb6dae170e57", "message": "teardown outside of measurement", "committedDate": "2020-09-14T16:47:52Z", "type": "commit"}]}