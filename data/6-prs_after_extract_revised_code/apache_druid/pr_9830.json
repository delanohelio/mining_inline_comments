{"pr_number": 9830, "pr_title": "Fail incorrectly constructed join queries", "pr_createdAt": "2020-05-06T07:24:39Z", "pr_url": "https://github.com/apache/druid/pull/9830", "timeline": [{"oid": "62b4de5b5d3dd8390b59720ccd798d12f4deb724", "url": "https://github.com/apache/druid/commit/62b4de5b5d3dd8390b59720ccd798d12f4deb724", "message": "Fail incorrectly constructed join queries", "committedDate": "2020-05-06T07:14:32Z", "type": "commit"}, {"oid": "cb8b2b265fd6e5fd0ee68e9f413d8c5e0b8f289e", "url": "https://github.com/apache/druid/commit/cb8b2b265fd6e5fd0ee68e9f413d8c5e0b8f289e", "message": "wip annotation for equals implementations", "committedDate": "2020-05-06T22:11:54Z", "type": "commit"}, {"oid": "150f785df162b61526eae2e1036bda61b66e49e8", "url": "https://github.com/apache/druid/commit/150f785df162b61526eae2e1036bda61b66e49e8", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug", "committedDate": "2020-05-08T16:19:52Z", "type": "commit"}, {"oid": "aa223780f067778a5fdf106adeab0c7e72d7059e", "url": "https://github.com/apache/druid/commit/aa223780f067778a5fdf106adeab0c7e72d7059e", "message": "Add equals tests", "committedDate": "2020-05-11T22:49:53Z", "type": "commit"}, {"oid": "d11d48742ed7cfcae08b3a300815b62dd4bab71e", "url": "https://github.com/apache/druid/commit/d11d48742ed7cfcae08b3a300815b62dd4bab71e", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug", "committedDate": "2020-05-11T23:05:17Z", "type": "commit"}, {"oid": "5a7697794301cd1c278cd294f4c6e6317f0ac450", "url": "https://github.com/apache/druid/commit/5a7697794301cd1c278cd294f4c6e6317f0ac450", "message": "fix tests", "committedDate": "2020-05-12T01:14:22Z", "type": "commit"}, {"oid": "077710eadad760b334586f93ee1fb929911af78e", "url": "https://github.com/apache/druid/commit/077710eadad760b334586f93ee1fb929911af78e", "message": "Actually fix the tests", "committedDate": "2020-05-12T15:47:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNjI4Nw==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424136287", "bodyText": "A reasonable default for Expr could be to use the stringified form for hashCode and equals:\n  /**\n   * Convert the {@link Expr} back into parseable string that when parsed with\n   * {@link Parser#parse(String, ExprMacroTable)} will produce an equivalent {@link Expr}.\n   */\n  String stringify();", "author": "jon-wei", "createdAt": "2020-05-13T02:21:21Z", "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -494,6 +496,18 @@ public String toString()\n   {\n     return NULL_LITERAL;\n   }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return getClass().hashCode();", "originalCommit": "077710eadad760b334586f93ee1fb929911af78e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NTIyNg==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424165226", "bodyText": "Removed this. Each implementation will be responsible for defining their equals and hashcode", "author": "suneet-s", "createdAt": "2020-05-13T04:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNjI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "chunk": "diff --git a/core/src/main/java/org/apache/druid/math/expr/Expr.java b/core/src/main/java/org/apache/druid/math/expr/Expr.java\nindex d8ddbb49ca..1cd7d6253f 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/Expr.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/Expr.java\n\n@@ -496,18 +496,6 @@ abstract class NullNumericConstantExpr extends ConstantExpr\n   {\n     return NULL_LITERAL;\n   }\n-\n-  @Override\n-  public int hashCode()\n-  {\n-    return getClass().hashCode();\n-  }\n-\n-  @Override\n-  public boolean equals(Object obj)\n-  {\n-    return obj != null && getClass().equals(obj.getClass());\n-  }\n }\n \n class LongExpr extends ConstantExpr\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzOTYyNA==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424139624", "bodyText": "This should compare value instead", "author": "jon-wei", "createdAt": "2020-05-13T02:34:27Z", "path": "processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java", "diffHunk": "@@ -147,4 +148,23 @@ private void initDoublePredicate()\n       }\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    SelectorPredicateFactory that = (SelectorPredicateFactory) o;\n+    return Objects.equals(initLock, that.initLock);", "originalCommit": "077710eadad760b334586f93ee1fb929911af78e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2MzczNA==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424163734", "bodyText": "Done", "author": "suneet-s", "createdAt": "2020-05-13T04:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzOTYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java b/processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java\nindex 803a1906f5..7262d9811c 100644\n--- a/processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java\n+++ b/processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java\n\n@@ -159,12 +159,12 @@ public class SelectorPredicateFactory implements DruidPredicateFactory\n       return false;\n     }\n     SelectorPredicateFactory that = (SelectorPredicateFactory) o;\n-    return Objects.equals(initLock, that.initLock);\n+    return Objects.equals(value, that.value);\n   }\n \n   @Override\n   public int hashCode()\n   {\n-    return Objects.hash(initLock);\n+    return Objects.hash(value);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NTQyNQ==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424145425", "bodyText": "Pattern doesn't implement equals(), you could use Pattern.toString() here and elsewhere", "author": "jon-wei", "createdAt": "2020-05-13T02:57:47Z", "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "diffHunk": "@@ -364,6 +328,79 @@ public SuffixMatch getSuffixMatch()\n       return suffixMatch;\n     }\n \n+    @VisibleForTesting\n+    static class PatternDruidPredicateFactory implements DruidPredicateFactory\n+    {\n+      private final ExtractionFn extractionFn;\n+      private final Pattern pattern;\n+\n+      PatternDruidPredicateFactory(ExtractionFn extractionFn, Pattern pattern)\n+      {\n+        this.extractionFn = extractionFn;\n+        this.pattern = pattern;\n+      }\n+\n+      @Override\n+      public Predicate<String> makeStringPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(input, pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidLongPredicate makeLongPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidFloatPredicate makeFloatPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidDoublePredicate makeDoublePredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public boolean equals(Object o)\n+      {\n+        if (this == o) {\n+          return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+          return false;\n+        }\n+        PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n+        return Objects.equals(extractionFn, that.extractionFn) &&\n+               Objects.equals(pattern, that.pattern);", "originalCommit": "077710eadad760b334586f93ee1fb929911af78e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2MzgxNA==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424163814", "bodyText": "good catch! Done", "author": "suneet-s", "createdAt": "2020-05-13T04:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NTQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTE4Mg==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424169182", "bodyText": "I've added an inspection profile failure for this. It was being used in one other class", "author": "suneet-s", "createdAt": "2020-05-13T04:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NTQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java b/processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java\nindex 62f6abc2e5..67e2ebf143 100644\n--- a/processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java\n+++ b/processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java\n\n@@ -391,7 +391,7 @@ public class LikeDimFilter implements DimFilter\n         }\n         PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n         return Objects.equals(extractionFn, that.extractionFn) &&\n-               Objects.equals(pattern, that.pattern);\n+               Objects.equals(pattern.toString(), that.pattern.toString());\n       }\n \n       @Override\n"}}, {"oid": "9e9e2ce7bc9b8a3e405574b79182029ef211cc2a", "url": "https://github.com/apache/druid/commit/9e9e2ce7bc9b8a3e405574b79182029ef211cc2a", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug", "committedDate": "2020-05-13T04:12:59Z", "type": "commit"}, {"oid": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "url": "https://github.com/apache/druid/commit/6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "message": "Address review comments", "committedDate": "2020-05-13T04:43:23Z", "type": "commit"}, {"oid": "4a5fbc8f4a9f5e0eb5492881508757121ae8266f", "url": "https://github.com/apache/druid/commit/4a5fbc8f4a9f5e0eb5492881508757121ae8266f", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug", "committedDate": "2020-05-13T16:19:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzIxNg==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424673216", "bodyText": "I think the hashCode should use the toString as well", "author": "jon-wei", "createdAt": "2020-05-13T19:16:27Z", "path": "processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java", "diffHunk": "@@ -100,7 +100,7 @@ public boolean equals(Object o)\n         return false;\n       }\n       PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n-      return Objects.equals(pattern, that.pattern);\n+      return Objects.equals(pattern.toString(), that.pattern.toString());", "originalCommit": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NDU5MA==", "url": "https://github.com/apache/druid/pull/9830#discussion_r424694590", "bodyText": "\ud83e\udd26", "author": "suneet-s", "createdAt": "2020-05-13T19:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "6dea2dcb9cb2a117254d163319868b1d6ea3836a", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java b/processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java\nindex f087b77ee2..ace719e1f7 100644\n--- a/processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java\n+++ b/processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java\n\n@@ -106,7 +106,7 @@ public class RegexFilter extends DimensionPredicateFilter\n     @Override\n     public int hashCode()\n     {\n-      return Objects.hash(pattern);\n+      return Objects.hash(pattern.toString());\n     }\n \n     @Override\n"}}, {"oid": "6dea2dcb9cb2a117254d163319868b1d6ea3836a", "url": "https://github.com/apache/druid/commit/6dea2dcb9cb2a117254d163319868b1d6ea3836a", "message": "prohibit Pattern.hashCode()", "committedDate": "2020-05-13T20:10:42Z", "type": "commit"}]}