{"pr_number": 10056, "pr_title": "Add DimFilter.toOptimizedFilter(), ensure that join filter pre-analysis operates on optimized filters", "pr_createdAt": "2020-06-19T04:36:25Z", "pr_url": "https://github.com/apache/druid/pull/10056", "timeline": [{"oid": "06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "url": "https://github.com/apache/druid/commit/06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "message": "Ensure that join filter pre-analysis operates on optimized filters, add DimFilter.toOptimizedFilter", "committedDate": "2020-07-01T19:32:20Z", "type": "commit"}, {"oid": "06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "url": "https://github.com/apache/druid/commit/06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "message": "Ensure that join filter pre-analysis operates on optimized filters, add DimFilter.toOptimizedFilter", "committedDate": "2020-07-01T19:32:20Z", "type": "forcePushed"}, {"oid": "83fd145e3fde446d088ed6c0b5ea87c4bd426c8e", "url": "https://github.com/apache/druid/commit/83fd145e3fde446d088ed6c0b5ea87c4bd426c8e", "message": "Remove aggressive equality check that was used for testing", "committedDate": "2020-07-01T19:38:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNjgwOA==", "url": "https://github.com/apache/druid/pull/10056#discussion_r448606808", "bodyText": "I think this is going to be called by different processing threads simultaneously, so it should be thread-safe. Perhaps use Suppliers.memoize.", "author": "gianm", "createdAt": "2020-07-01T20:45:19Z", "path": "processing/src/main/java/org/apache/druid/query/filter/AbstractOptimizableDimFilter.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+/**\n+ * Base class for DimFilters that support optimization.\n+ */\n+abstract class AbstractOptimizableDimFilter implements DimFilter\n+{\n+  private Filter cachedOptimizedFilter = null;\n+\n+  @JsonIgnore\n+  @Override\n+  public Filter toOptimizedFilter()", "originalCommit": "83fd145e3fde446d088ed6c0b5ea87c4bd426c8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMTQxNg==", "url": "https://github.com/apache/druid/pull/10056#discussion_r448611416", "bodyText": "Ah, I was originally thinking of just letting the processing threads for non-joins possibly do some redundant computation (for joins, the pre-analysis would call toOptimizedFilter before the processing threads run the query), but I can adjust it.", "author": "jon-wei", "createdAt": "2020-07-01T20:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxODQ5Nw==", "url": "https://github.com/apache/druid/pull/10056#discussion_r448618497", "bodyText": "I think it'd be good to adjust it; it shouldn't hurt and would save some work.", "author": "gianm", "createdAt": "2020-07-01T21:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8d32bbdad32346c9189dba05495985710dd5b334", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/filter/AbstractOptimizableDimFilter.java b/processing/src/main/java/org/apache/druid/query/filter/AbstractOptimizableDimFilter.java\nindex 1566fa38e6..24d32d323a 100644\n--- a/processing/src/main/java/org/apache/druid/query/filter/AbstractOptimizableDimFilter.java\n+++ b/processing/src/main/java/org/apache/druid/query/filter/AbstractOptimizableDimFilter.java\n\n@@ -20,21 +20,23 @@\n package org.apache.druid.query.filter;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n \n /**\n- * Base class for DimFilters that support optimization.\n+ * Base class for DimFilters that support optimization. This abstract class provides a default implementation of\n+ * toOptimizedFilter that relies on the existing optimize() and toFilter() methods. It uses a memoized supplier.\n  */\n abstract class AbstractOptimizableDimFilter implements DimFilter\n {\n-  private Filter cachedOptimizedFilter = null;\n+  private final Supplier<Filter> cachedOptimizedFilter = Suppliers.memoize(\n+      () -> optimize().toFilter()\n+  );\n \n   @JsonIgnore\n   @Override\n   public Filter toOptimizedFilter()\n   {\n-    if (cachedOptimizedFilter == null) {\n-      cachedOptimizedFilter = optimize().toFilter();\n-    }\n-    return cachedOptimizedFilter;\n+    return cachedOptimizedFilter.get();\n   }\n }\n"}}, {"oid": "8d32bbdad32346c9189dba05495985710dd5b334", "url": "https://github.com/apache/druid/commit/8d32bbdad32346c9189dba05495985710dd5b334", "message": "Use Suppliers.memoize", "committedDate": "2020-07-01T22:21:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxNTQzNg==", "url": "https://github.com/apache/druid/pull/10056#discussion_r448715436", "bodyText": "CI is flagging these 4 as unused imports", "author": "ccaominh", "createdAt": "2020-07-02T02:36:37Z", "path": "processing/src/main/java/org/apache/druid/query/filter/DimFilter.java", "diffHunk": "@@ -23,7 +23,11 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.common.collect.RangeSet;\n import org.apache.druid.java.util.common.Cacheable;\n+import org.apache.druid.java.util.common.granularity.Granularity;\n+import org.apache.druid.query.QueryMetrics;\n import org.apache.druid.query.extraction.ExtractionFn;\n+import org.apache.druid.segment.VirtualColumns;\n+import org.joda.time.Interval;", "originalCommit": "8d32bbdad32346c9189dba05495985710dd5b334", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b013ac4ca3e92fd3c061299fc48ed8e43e14e729", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/filter/DimFilter.java b/processing/src/main/java/org/apache/druid/query/filter/DimFilter.java\nindex d10ec7700f..60580881c3 100644\n--- a/processing/src/main/java/org/apache/druid/query/filter/DimFilter.java\n+++ b/processing/src/main/java/org/apache/druid/query/filter/DimFilter.java\n\n@@ -23,11 +23,7 @@ import com.fasterxml.jackson.annotation.JsonSubTypes;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.common.collect.RangeSet;\n import org.apache.druid.java.util.common.Cacheable;\n-import org.apache.druid.java.util.common.granularity.Granularity;\n-import org.apache.druid.query.QueryMetrics;\n import org.apache.druid.query.extraction.ExtractionFn;\n-import org.apache.druid.segment.VirtualColumns;\n-import org.joda.time.Interval;\n \n import javax.annotation.Nullable;\n import java.util.Set;\n"}}, {"oid": "b013ac4ca3e92fd3c061299fc48ed8e43e14e729", "url": "https://github.com/apache/druid/commit/b013ac4ca3e92fd3c061299fc48ed8e43e14e729", "message": "Checkstyle", "committedDate": "2020-07-02T02:53:40Z", "type": "commit"}]}