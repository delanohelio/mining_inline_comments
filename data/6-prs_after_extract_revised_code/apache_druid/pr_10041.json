{"pr_number": 10041, "pr_title": "global table only if joinable", "pr_createdAt": "2020-06-17T11:26:53Z", "pr_url": "https://github.com/apache/druid/pull/10041", "timeline": [{"oid": "72ccc08de10b096bf8e148e2a1fbb48ca48bf810", "url": "https://github.com/apache/druid/commit/72ccc08de10b096bf8e148e2a1fbb48ca48bf810", "message": "global table if only joinable", "committedDate": "2020-06-17T11:06:45Z", "type": "commit"}, {"oid": "01cb2df2999650c0a599d201e15023719fa01be9", "url": "https://github.com/apache/druid/commit/01cb2df2999650c0a599d201e15023719fa01be9", "message": "oops", "committedDate": "2020-06-17T11:53:48Z", "type": "commit"}, {"oid": "0f50b3ecfe89743cc23abf4bddbf981a0c2ff3af", "url": "https://github.com/apache/druid/commit/0f50b3ecfe89743cc23abf4bddbf981a0c2ff3af", "message": "fix style, add more tests", "committedDate": "2020-06-17T19:34:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyNDU3Nw==", "url": "https://github.com/apache/druid/pull/10041#discussion_r441824577", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      DataSource dataSource, JoinConditionAnalysis condition\n          \n          \n            \n                      DataSource dataSource,\n          \n          \n            \n                      JoinConditionAnalysis condition", "author": "jihoonson", "createdAt": "2020-06-17T20:47:06Z", "path": "sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java", "diffHunk": "@@ -222,10 +228,29 @@ public void setUp() throws Exception\n     serverView = new TestServerInventoryView(walker.getSegments(), realtimeSegments);\n     druidServers = serverView.getDruidServers();\n \n+    final JoinableFactory globalTableJoinable = new JoinableFactory()\n+    {\n+      @Override\n+      public boolean isDirectlyJoinable(DataSource dataSource)\n+      {\n+        return dataSource instanceof GlobalTableDataSource &&\n+               segmentDataSourceNames.contains(((GlobalTableDataSource) dataSource).getName());\n+      }\n+\n+      @Override\n+      public Optional<Joinable> build(\n+          DataSource dataSource, JoinConditionAnalysis condition", "originalCommit": "0f50b3ecfe89743cc23abf4bddbf981a0c2ff3af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ad4ba4c56d2fcfc956dd13989f6c471e85bbe0b", "chunk": "diff --git a/sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java b/sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java\nindex c8e6679af5..438b985b73 100644\n--- a/sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java\n+++ b/sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java\n\n@@ -239,7 +239,8 @@ public class DruidSchemaTest extends CalciteTestBase\n \n       @Override\n       public Optional<Joinable> build(\n-          DataSource dataSource, JoinConditionAnalysis condition\n+          DataSource dataSource,\n+          JoinConditionAnalysis condition\n       )\n       {\n         return Optional.empty();\n"}}, {"oid": "2ad4ba4c56d2fcfc956dd13989f6c471e85bbe0b", "url": "https://github.com/apache/druid/commit/2ad4ba4c56d2fcfc956dd13989f6c471e85bbe0b", "message": "Update sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java", "committedDate": "2020-06-17T20:47:18Z", "type": "commit"}, {"oid": "cce3fcef864bdef2da9c3e219fbd57e5f98639ab", "url": "https://github.com/apache/druid/commit/cce3fcef864bdef2da9c3e219fbd57e5f98639ab", "message": "better information schema columns, distinguish broadcast from joinable", "committedDate": "2020-06-18T06:30:28Z", "type": "commit"}, {"oid": "836c797b507ae40fad757f53e45239a155944224", "url": "https://github.com/apache/druid/commit/836c797b507ae40fad757f53e45239a155944224", "message": "Merge remote-tracking branch 'upstream/master' into global-table-should-be-joinable", "committedDate": "2020-06-18T06:44:17Z", "type": "commit"}, {"oid": "1f7876560565e320c022e809bdcc047c457f1a05", "url": "https://github.com/apache/druid/commit/1f7876560565e320c022e809bdcc047c457f1a05", "message": "fix javadoc", "committedDate": "2020-06-18T07:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDE2Mw==", "url": "https://github.com/apache/druid/pull/10041#discussion_r442534163", "bodyText": "super nit: even though query is not used in CachingClusteredClient.getQueryRunnerForSegments(), it could be better to use freeTradeQuery instead of query for future proof for when someone changes the logic of CachingClusteredClient.getQueryRunnerForSegments().", "author": "jihoonson", "createdAt": "2020-06-18T22:24:01Z", "path": "server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java", "diffHunk": "@@ -187,10 +198,15 @@ public ClientQuerySegmentWalker(\n   @Override\n   public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n   {\n-    // Inlining isn't done for segments-based queries.\n+    // Inlining isn't done for segments-based queries, but we still globalify the table datasources if possible\n+    final Query<T> freeTradeQuery = query.withDataSource(globalizeIfPossible(query.getDataSource()));\n \n     if (canRunQueryUsingClusterWalker(query)) {\n-      return decorateClusterRunner(query, clusterClient.getQueryRunnerForSegments(query, specs));\n+      return new QuerySwappingQueryRunner<>(\n+          decorateClusterRunner(freeTradeQuery, clusterClient.getQueryRunnerForSegments(query, specs)),", "originalCommit": "1f7876560565e320c022e809bdcc047c457f1a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzY5Nw==", "url": "https://github.com/apache/druid/pull/10041#discussion_r442563697", "bodyText": "oops, good catch, fixed \ud83d\udc4d", "author": "clintropolis", "createdAt": "2020-06-19T00:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "33c65a2339dacd49dfc88930877a06df3312ab2c", "chunk": "diff --git a/server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java b/server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java\nindex 5f284f720c..c7318a60f7 100644\n--- a/server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java\n+++ b/server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java\n\n@@ -203,7 +203,7 @@ public class ClientQuerySegmentWalker implements QuerySegmentWalker\n \n     if (canRunQueryUsingClusterWalker(query)) {\n       return new QuerySwappingQueryRunner<>(\n-          decorateClusterRunner(freeTradeQuery, clusterClient.getQueryRunnerForSegments(query, specs)),\n+          decorateClusterRunner(freeTradeQuery, clusterClient.getQueryRunnerForSegments(freeTradeQuery, specs)),\n           query,\n           freeTradeQuery\n       );\n"}}, {"oid": "33c65a2339dacd49dfc88930877a06df3312ab2c", "url": "https://github.com/apache/druid/commit/33c65a2339dacd49dfc88930877a06df3312ab2c", "message": "fix mistake", "committedDate": "2020-06-18T23:15:10Z", "type": "commit"}]}