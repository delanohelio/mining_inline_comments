{"pr_number": 9861, "pr_title": "Empty partitionDimension has less rollup compared to when explicitly specified", "pr_createdAt": "2020-05-13T00:03:38Z", "pr_url": "https://github.com/apache/druid/pull/9861", "timeline": [{"oid": "523d00e99e9a6a42acfd973d5f0166a4abefb66b", "url": "https://github.com/apache/druid/commit/523d00e99e9a6a42acfd973d5f0166a4abefb66b", "message": "Empty partitionDimension has less rollup compared to the case when it is explicitly specified", "committedDate": "2020-05-12T23:45:24Z", "type": "commit"}, {"oid": "0977ef169e4870d591ad6d8f4b901c997e18d2a2", "url": "https://github.com/apache/druid/commit/0977ef169e4870d591ad6d8f4b901c997e18d2a2", "message": "Adding a unit test for the empty partitionDimension scenario. Fixing another test which was failing", "committedDate": "2020-06-03T06:08:53Z", "type": "commit"}, {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58", "url": "https://github.com/apache/druid/commit/34588e6b078c50cf79e7fbd7d95d2521866e1d58", "message": "Fixing CI Build Inspection Issue", "committedDate": "2020-06-03T18:40:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzI4NQ==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435633285", "bodyText": "nit: please use Granularities.HOUR.", "author": "jihoonson", "createdAt": "2020-06-05T00:51:10Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));", "originalCommit": "34588e6b078c50cf79e7fbd7d95d2521866e1d58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDQ0OQ==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674449", "bodyText": "Fixed", "author": "mghosh4", "createdAt": "2020-06-05T03:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ee874891af60f794f70918457ec8985b5391cf6", "chunk": "diff --git a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\nindex 51e6591ff0..8668a937aa 100644\n--- a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n+++ b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n\n@@ -1788,36 +1783,6 @@ public class IndexTaskTest extends IngestionTestBase\n     task.isReady(createActionClient(task));\n   }\n \n-  @Test\n-  public void testShardSpecSelectionWithNullPartitionDimension()\n-  {\n-    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n-    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n-\n-    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n-    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n-\n-    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n-    String visitor_id = \"visitor_id\";\n-    String client_type = \"client_type\";\n-    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n-    InputRow row1 = new MapBasedInputRow(timestamp1,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n-    InputRow row2 = new MapBasedInputRow(timestamp2,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n-    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n-\n-    Assert.assertEquals(true, spec3 == spec4);\n-  }\n-\n   public static void checkTaskStatusErrorMsgForParseExceptionsExceeded(TaskStatus status)\n   {\n     // full stacktrace will be too long and make tests brittle (e.g. if line # changes), just match the main message\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzUyNQ==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435633525", "bodyText": "The Java convention is the camel case. Please rename these variables to visitorId and clientType.", "author": "jihoonson", "createdAt": "2020-06-05T00:52:09Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";", "originalCommit": "34588e6b078c50cf79e7fbd7d95d2521866e1d58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDQ3MA==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674470", "bodyText": "Fixed", "author": "mghosh4", "createdAt": "2020-06-05T03:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ee874891af60f794f70918457ec8985b5391cf6", "chunk": "diff --git a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\nindex 51e6591ff0..8668a937aa 100644\n--- a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n+++ b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n\n@@ -1788,36 +1783,6 @@ public class IndexTaskTest extends IngestionTestBase\n     task.isReady(createActionClient(task));\n   }\n \n-  @Test\n-  public void testShardSpecSelectionWithNullPartitionDimension()\n-  {\n-    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n-    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n-\n-    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n-    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n-\n-    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n-    String visitor_id = \"visitor_id\";\n-    String client_type = \"client_type\";\n-    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n-    InputRow row1 = new MapBasedInputRow(timestamp1,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n-    InputRow row2 = new MapBasedInputRow(timestamp2,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n-    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n-\n-    Assert.assertEquals(true, spec3 == spec4);\n-  }\n-\n   public static void checkTaskStatusErrorMsgForParseExceptionsExceeded(TaskStatus status)\n   {\n     // full stacktrace will be too long and make tests brittle (e.g. if line # changes), just match the main message\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzkzMw==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435633933", "bodyText": "Please use Assert.assertSame() instead.", "author": "jihoonson", "createdAt": "2020-06-05T00:53:52Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";\n+    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n+    InputRow row1 = new MapBasedInputRow(timestamp1,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n+    InputRow row2 = new MapBasedInputRow(timestamp2,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n+    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n+\n+    Assert.assertEquals(true, spec3 == spec4);", "originalCommit": "34588e6b078c50cf79e7fbd7d95d2521866e1d58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDQ5MA==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674490", "bodyText": "Fixed", "author": "mghosh4", "createdAt": "2020-06-05T03:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "8ee874891af60f794f70918457ec8985b5391cf6", "chunk": "diff --git a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\nindex 51e6591ff0..8668a937aa 100644\n--- a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n+++ b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n\n@@ -1788,36 +1783,6 @@ public class IndexTaskTest extends IngestionTestBase\n     task.isReady(createActionClient(task));\n   }\n \n-  @Test\n-  public void testShardSpecSelectionWithNullPartitionDimension()\n-  {\n-    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n-    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n-\n-    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n-    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n-\n-    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n-    String visitor_id = \"visitor_id\";\n-    String client_type = \"client_type\";\n-    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n-    InputRow row1 = new MapBasedInputRow(timestamp1,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n-    InputRow row2 = new MapBasedInputRow(timestamp2,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n-    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n-\n-    Assert.assertEquals(true, spec3 == spec4);\n-  }\n-\n   public static void checkTaskStatusErrorMsgForParseExceptionsExceeded(TaskStatus status)\n   {\n     // full stacktrace will be too long and make tests brittle (e.g. if line # changes), just match the main message\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDI2OQ==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435634269", "bodyText": "Could you please add a test that shardSpecs.getShardSpec() returns different shardSpecs for two rows when they have exactly same values but different timestamps?", "author": "jihoonson", "createdAt": "2020-06-05T00:55:20Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";\n+    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n+    InputRow row1 = new MapBasedInputRow(timestamp1,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n+    InputRow row2 = new MapBasedInputRow(timestamp2,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n+    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n+\n+    Assert.assertEquals(true, spec3 == spec4);\n+  }", "originalCommit": "34588e6b078c50cf79e7fbd7d95d2521866e1d58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2MjM2NQ==", "url": "https://github.com/apache/druid/pull/9861#discussion_r436062365", "bodyText": "Done", "author": "mghosh4", "createdAt": "2020-06-05T17:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ee874891af60f794f70918457ec8985b5391cf6", "chunk": "diff --git a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\nindex 51e6591ff0..8668a937aa 100644\n--- a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n+++ b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n\n@@ -1788,36 +1783,6 @@ public class IndexTaskTest extends IngestionTestBase\n     task.isReady(createActionClient(task));\n   }\n \n-  @Test\n-  public void testShardSpecSelectionWithNullPartitionDimension()\n-  {\n-    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n-    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n-\n-    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n-    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n-\n-    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n-    String visitor_id = \"visitor_id\";\n-    String client_type = \"client_type\";\n-    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n-    InputRow row1 = new MapBasedInputRow(timestamp1,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n-    InputRow row2 = new MapBasedInputRow(timestamp2,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n-    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n-\n-    Assert.assertEquals(true, spec3 == spec4);\n-  }\n-\n   public static void checkTaskStatusErrorMsgForParseExceptionsExceeded(TaskStatus status)\n   {\n     // full stacktrace will be too long and make tests brittle (e.g. if line # changes), just match the main message\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDc2Mg==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435634762", "bodyText": "Thank you for adding a unit test! This test doesn't seem testing the IndexTask but testing ShardSpecs. Would you please move the ShardSpecs out of IndexTask and add a new class ShardSpecsTest? Then we can move this test to ShardSpecsTest.", "author": "jihoonson", "createdAt": "2020-06-05T00:57:30Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()", "originalCommit": "34588e6b078c50cf79e7fbd7d95d2521866e1d58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDUxNg==", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674516", "bodyText": "Fixed", "author": "mghosh4", "createdAt": "2020-06-05T03:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ee874891af60f794f70918457ec8985b5391cf6", "chunk": "diff --git a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\nindex 51e6591ff0..8668a937aa 100644\n--- a/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n+++ b/indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java\n\n@@ -1788,36 +1783,6 @@ public class IndexTaskTest extends IngestionTestBase\n     task.isReady(createActionClient(task));\n   }\n \n-  @Test\n-  public void testShardSpecSelectionWithNullPartitionDimension()\n-  {\n-    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n-    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n-\n-    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n-    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n-\n-    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n-    String visitor_id = \"visitor_id\";\n-    String client_type = \"client_type\";\n-    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n-    InputRow row1 = new MapBasedInputRow(timestamp1,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n-    InputRow row2 = new MapBasedInputRow(timestamp2,\n-        Lists.newArrayList(visitor_id, client_type),\n-        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n-    );\n-\n-    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n-    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n-\n-    Assert.assertEquals(true, spec3 == spec4);\n-  }\n-\n   public static void checkTaskStatusErrorMsgForParseExceptionsExceeded(TaskStatus status)\n   {\n     // full stacktrace will be too long and make tests brittle (e.g. if line # changes), just match the main message\n"}}, {"oid": "8ee874891af60f794f70918457ec8985b5391cf6", "url": "https://github.com/apache/druid/commit/8ee874891af60f794f70918457ec8985b5391cf6", "message": "Addressing all review comments", "committedDate": "2020-06-05T03:44:45Z", "type": "commit"}, {"oid": "3e247761b2d9c871d1794edea4d9ed5ba34a6c37", "url": "https://github.com/apache/druid/commit/3e247761b2d9c871d1794edea4d9ed5ba34a6c37", "message": "Updating the javadocs for the hash method in HashBasedNumberedShardSpec", "committedDate": "2020-06-05T18:12:28Z", "type": "commit"}]}