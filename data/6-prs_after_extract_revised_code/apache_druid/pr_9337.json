{"pr_number": 9337, "pr_title": "Fix timestamp extract fn to match postgreSQL", "pr_createdAt": "2020-02-09T21:53:09Z", "pr_url": "https://github.com/apache/druid/pull/9337", "timeline": [{"oid": "22162616b58c539c0167d110558355852426435d", "url": "https://github.com/apache/druid/commit/22162616b58c539c0167d110558355852426435d", "message": "Fix timestamp extract fn to match postgres\n\nUpdate the timestamp extract function so that it matches the PostgreSQL docs.\nExamples from the PostgreSQL docs were added as tests for DECADE, CENTURY\nand MILLENIUM extraction.\n\nThere were bugs in CENTURY and MILLENIUM that were spotted because of intelliJ\ninspections - 'Integer division in floating point context'", "committedDate": "2020-02-09T19:50:49Z", "type": "commit"}, {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c", "url": "https://github.com/apache/druid/commit/b3694222e8bcd160d7b8652227b8de43af9e982c", "message": "Update CalciteQueryTest", "committedDate": "2020-02-09T22:38:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjkxMg==", "url": "https://github.com/apache/druid/pull/9337#discussion_r376822912", "bodyText": "I thought about making this an error in our inspection profile, but CachingCostBalancerStrategy does this, and I'm afraid to make a change in that class given the potential implications around the balancer strategy. I'm un-aware of a way to simulate what impact changing that division would have, so I decided to leave it as is.", "author": "suneet-s", "createdAt": "2020-02-09T22:45:25Z", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);\n           case CENTURY:\n-            return ExprEval.of(dateTime.centuryOfEra().get() + 1);\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 100));\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil(dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));", "originalCommit": "b3694222e8bcd160d7b8652227b8de43af9e982c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTQ3Nw==", "url": "https://github.com/apache/druid/pull/9337#discussion_r377945477", "bodyText": "Could it be suppressed in that one location?", "author": "gianm", "createdAt": "2020-02-11T22:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MjM0MQ==", "url": "https://github.com/apache/druid/pull/9337#discussion_r377972341", "bodyText": "Good suggestion - done.", "author": "suneet-s", "createdAt": "2020-02-12T00:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "9c199771bec706496083c53531fbd28dbc54f4a7", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java b/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\nindex cb9aba8177..af840dd817 100644\n--- a/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\n+++ b/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\n\n@@ -147,7 +147,7 @@ public class TimestampExtractExprMacro implements ExprMacroTable.ExprMacro\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 1000));\n           default:\n             throw new ISE(\"Unhandled unit[%s]\", unit);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzAwNA==", "url": "https://github.com/apache/druid/pull/9337#discussion_r376823004", "bodyText": "These values come from BaseCalciteQueryTest#TIMESERIES_CONTEXT_DEFAULT which is 2000-01-01T00:00:00Z", "author": "suneet-s", "createdAt": "2020-02-09T22:46:30Z", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -7730,7 +7730,7 @@ public void testFilterOnTimeExtractWithVariousTimeUnits() throws Exception\n           + \"AND EXTRACT(ISODOW FROM __time) = 6\\n\"\n           + \"AND EXTRACT(ISOYEAR FROM __time) = 2000\\n\"\n           + \"AND EXTRACT(DECADE FROM __time) = 200\\n\"\n-          + \"AND EXTRACT(CENTURY FROM __time) = 21\\n\"\n+          + \"AND EXTRACT(CENTURY FROM __time) = 20\\n\"\n           + \"AND EXTRACT(MILLENNIUM FROM __time) = 2\\n\",", "originalCommit": "b3694222e8bcd160d7b8652227b8de43af9e982c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzM2MA==", "url": "https://github.com/apache/druid/pull/9337#discussion_r377833360", "bodyText": "You don't need Math.round if the result is already Math.ceil since Math.ceil returns int", "author": "maytasm", "createdAt": "2020-02-11T18:57:52Z", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);\n           case CENTURY:\n-            return ExprEval.of(dateTime.centuryOfEra().get() + 1);\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 100));\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil(dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));", "originalCommit": "b3694222e8bcd160d7b8652227b8de43af9e982c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c199771bec706496083c53531fbd28dbc54f4a7", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java b/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\nindex cb9aba8177..af840dd817 100644\n--- a/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\n+++ b/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\n\n@@ -147,7 +147,7 @@ public class TimestampExtractExprMacro implements ExprMacroTable.ExprMacro\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 1000));\n           default:\n             throw new ISE(\"Unhandled unit[%s]\", unit);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ==", "url": "https://github.com/apache/druid/pull/9337#discussion_r377835431", "bodyText": "Not sure if you need to handle BC?\nCan you add tests?\ni.e.\n-- SELECT EXTRACT(CENTURY FROM DATE '0101-12-31 BC');\n-- SELECT EXTRACT(CENTURY FROM DATE '0100-12-31 BC');\n-- SELECT EXTRACT(MILLENNIUM FROM DATE '0001-12-31 BC');\n-- SELECT EXTRACT(DECADE FROM DATE '0002-12-31 BC');\n-- SELECT EXTRACT(DECADE FROM DATE '0011-01-01 BC');\n-- SELECT EXTRACT(DECADE FROM DATE '0012-12-31 BC');", "author": "maytasm", "createdAt": "2020-02-11T19:01:37Z", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);", "originalCommit": "b3694222e8bcd160d7b8652227b8de43af9e982c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzYwNA==", "url": "https://github.com/apache/druid/pull/9337#discussion_r377837604", "bodyText": "someone collected statistics for computers back in 101 BC \ud83d\ude02\nI'll add tests for correctness though \ud83d\udc4d", "author": "suneet-s", "createdAt": "2020-02-11T19:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzcyOA==", "url": "https://github.com/apache/druid/pull/9337#discussion_r377837728", "bodyText": "^ Please verify against Postgresql", "author": "maytasm", "createdAt": "2020-02-11T19:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MjQ3MQ==", "url": "https://github.com/apache/druid/pull/9337#discussion_r377862471", "bodyText": "I decided it might be better not to support BC.\nSince in ISO format, the date needs to be specified like -0100-12-31 to signify the year 0101-12-31 BC This would make the code complicated for a use case that is likely never to happen \ud83e\udd1e", "author": "suneet-s", "createdAt": "2020-02-11T19:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c199771bec706496083c53531fbd28dbc54f4a7", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java b/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\nindex cb9aba8177..af840dd817 100644\n--- a/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\n+++ b/processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java\n\n@@ -147,7 +147,7 @@ public class TimestampExtractExprMacro implements ExprMacroTable.ExprMacro\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 1000));\n           default:\n             throw new ISE(\"Unhandled unit[%s]\", unit);\n         }\n"}}, {"oid": "df9c6c005e920ee34bb2154d3c36d7eeee054456", "url": "https://github.com/apache/druid/commit/df9c6c005e920ee34bb2154d3c36d7eeee054456", "message": "Merge remote-tracking branch 'upstream/master' into timestamp_extract", "committedDate": "2020-02-11T19:26:35Z", "type": "commit"}, {"oid": "9c199771bec706496083c53531fbd28dbc54f4a7", "url": "https://github.com/apache/druid/commit/9c199771bec706496083c53531fbd28dbc54f4a7", "message": "remove useless round", "committedDate": "2020-02-11T19:49:39Z", "type": "commit"}, {"oid": "958cf9f40661c94373cf110a22010e37b452f75a", "url": "https://github.com/apache/druid/commit/958cf9f40661c94373cf110a22010e37b452f75a", "message": "Merge remote-tracking branch 'upstream/master' into timestamp_extract", "committedDate": "2020-02-11T23:55:30Z", "type": "commit"}, {"oid": "de128035f3a5c3319c08bf41f45f1b401eb65aba", "url": "https://github.com/apache/druid/commit/de128035f3a5c3319c08bf41f45f1b401eb65aba", "message": "mark integer division as an error", "committedDate": "2020-02-12T00:01:52Z", "type": "commit"}, {"oid": "6ce7186720616bda2ea9f08e2629aedbc85daee2", "url": "https://github.com/apache/druid/commit/6ce7186720616bda2ea9f08e2629aedbc85daee2", "message": "Merge remote-tracking branch 'upstream/master' into timestamp_extract", "committedDate": "2020-02-12T16:26:17Z", "type": "commit"}]}