{"pr_number": 9279, "pr_title": "Guicify druid sql module", "pr_createdAt": "2020-01-29T00:43:10Z", "pr_url": "https://github.com/apache/druid/pull/9279", "timeline": [{"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "url": "https://github.com/apache/druid/commit/1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "message": "Guicify druid sql module\n\nBreak up the SQLModule in to smaller modules and provide a binding that\nmodules can use to register schemas with druid sql.", "committedDate": "2020-01-29T00:41:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NDE0Mw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372164143", "bodyText": "This one is final but the one in SqlBenchmark isn't, any reason?\n(Fwiw I usually like labeling things final whenever possible but I don't insist on it, except for class fields)", "author": "gianm", "createdAt": "2020-01-29T02:41:55Z", "path": "benchmarks/src/main/java/org/apache/druid/benchmark/query/SqlVsNativeBenchmark.java", "diffHunk": "@@ -116,12 +115,10 @@ public void setup()\n     final PlannerConfig plannerConfig = new PlannerConfig();\n \n     this.walker = closer.register(new SpecificSegmentsQuerySegmentWalker(conglomerate).add(dataSegment, index));\n-    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n-    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n-\n+    final SchemaPlus rootSchema =", "originalCommit": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwODQ4Ng==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372208486", "bodyText": "I don't usually mark variables in a function as final, but I was trying to follow the pattern I saw in the class. That's why it's inconsistent :\\ I'll clean it up", "author": "suneet-s", "createdAt": "2020-01-29T06:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NDE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMTgzMQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372531831", "bodyText": "In that case, keeping to the style of the surrounding code is probably best. I withdraw my request for consistency across files. (Unless we can reach consensus on whether vars should be marked final whenever possible.)", "author": "gianm", "createdAt": "2020-01-29T17:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NDE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "837ced94b1fd0899127b5ad5afc70bafd8a5b108", "chunk": "diff --git a/benchmarks/src/main/java/org/apache/druid/benchmark/query/SqlVsNativeBenchmark.java b/benchmarks/src/main/java/org/apache/druid/benchmark/query/SqlVsNativeBenchmark.java\nindex 4776ff8e3f..deacbe5561 100644\n--- a/benchmarks/src/main/java/org/apache/druid/benchmark/query/SqlVsNativeBenchmark.java\n+++ b/benchmarks/src/main/java/org/apache/druid/benchmark/query/SqlVsNativeBenchmark.java\n\n@@ -124,7 +124,8 @@ public class SqlVsNativeBenchmark\n         CalciteTests.createExprMacroTable(),\n         plannerConfig,\n         AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n-        CalciteTests.getJsonMapper()\n+        CalciteTests.getJsonMapper(),\n+        CalciteTests.DRUID_SCHEMA_NAME\n     );\n     groupByQuery = GroupByQuery\n         .builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTE0OA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372165148", "bodyText": "Even though this is in the SQL module, I think it'd still be better to call it SqlAggregationModule. There's another AggregatorsModule and it would be confusing to see them side by side in an IDE or code search.", "author": "gianm", "createdAt": "2020-01-29T02:47:04Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/AggregationModule.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.aggregation;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.multibindings.Multibinder;\n+\n+/**\n+ * Module that provides SQL aggregations.\n+ * To add an aggregation use {@link org.apache.druid.sql.guice.SqlBindings#addAggregator(Binder, Class)}\n+ */\n+public class AggregationModule implements Module", "originalCommit": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwODYyOA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372208628", "bodyText": "\ud83d\udc4d", "author": "suneet-s", "createdAt": "2020-01-29T06:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/AggregationModule.java b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/SqlAggregationModule.java\nsimilarity index 96%\nrename from sql/src/main/java/org/apache/druid/sql/calcite/aggregation/AggregationModule.java\nrename to sql/src/main/java/org/apache/druid/sql/calcite/aggregation/SqlAggregationModule.java\nindex 0ca94fe5f8..9dc7cdf4de 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/AggregationModule.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/SqlAggregationModule.java\n\n@@ -27,7 +27,7 @@ import com.google.inject.multibindings.Multibinder;\n  * Module that provides SQL aggregations.\n  * To add an aggregation use {@link org.apache.druid.sql.guice.SqlBindings#addAggregator(Binder, Class)}\n  */\n-public class AggregationModule implements Module\n+public class SqlAggregationModule implements Module\n {\n   @Override\n   public void configure(Binder binder)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTMzMw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372165333", "bodyText": "IMO CalcitePlannerModule is fine / better. We don't use Calcite for anything other than Druid SQL so it's not ambiguous.", "author": "gianm", "createdAt": "2020-01-29T02:48:02Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidSqlCalcitePlannerModule.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.planner;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.JsonConfigProvider;\n+\n+/**\n+ * The module responsible for provide bindings for the Calcite Planner.\n+ */\n+public class DruidSqlCalcitePlannerModule implements Module", "originalCommit": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwODY4NQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372208685", "bodyText": "\ud83d\udc4d", "author": "suneet-s", "createdAt": "2020-01-29T06:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidSqlCalcitePlannerModule.java b/sql/src/main/java/org/apache/druid/sql/calcite/planner/CalcitePlannerModule.java\nsimilarity index 96%\nrename from sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidSqlCalcitePlannerModule.java\nrename to sql/src/main/java/org/apache/druid/sql/calcite/planner/CalcitePlannerModule.java\nindex b9ff65df71..7f6fd12b93 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidSqlCalcitePlannerModule.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/planner/CalcitePlannerModule.java\n\n@@ -28,7 +28,7 @@ import org.apache.druid.guice.JsonConfigProvider;\n /**\n  * The module responsible for provide bindings for the Calcite Planner.\n  */\n-public class DruidSqlCalcitePlannerModule implements Module\n+public class CalcitePlannerModule implements Module\n {\n   @Override\n   public void configure(Binder binder)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTg3MQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372165871", "bodyText": "I'll only mention this once to avoid clutter in the review, but IMO Javadoc lines are nicer looking when they are punctuated like sentences (end in periods). Even if they're not really sentences.", "author": "gianm", "createdAt": "2020-01-29T02:50:35Z", "path": "sql/src/main/java/org/apache/druid/sql/avatica/AvaticaModule.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import org.apache.druid.guice.JsonConfigProvider;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.server.initialization.jetty.JettyBindings;\n+import org.apache.druid.server.metrics.MetricsModule;\n+\n+/**\n+ * The module responsible for providing bindings to Avatica", "originalCommit": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "717e480f8da549ccfe3a049cf483095da56b2213", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/avatica/AvaticaModule.java b/sql/src/main/java/org/apache/druid/sql/avatica/AvaticaModule.java\nindex 77ef82c3fe..8e795cebf3 100644\n--- a/sql/src/main/java/org/apache/druid/sql/avatica/AvaticaModule.java\n+++ b/sql/src/main/java/org/apache/druid/sql/avatica/AvaticaModule.java\n\n@@ -27,7 +27,7 @@ import org.apache.druid.server.initialization.jetty.JettyBindings;\n import org.apache.druid.server.metrics.MetricsModule;\n \n /**\n- * The module responsible for providing bindings to Avatica\n+ * The module responsible for providing bindings to Avatica.\n  */\n public class AvaticaModule implements Module\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjQ2NQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372166465", "bodyText": "I'm wondering why you wanted to split these up? It seemed nice to me to have all the core SQL-related bindings in one file.", "author": "gianm", "createdAt": "2020-01-29T02:53:30Z", "path": "sql/src/main/java/org/apache/druid/sql/guice/SqlModule.java", "diffHunk": "@@ -63,25 +55,21 @@ public void configure(Binder binder)\n     if (isEnabled()) {\n       Calcites.setSystemProperties();\n \n-      JsonConfigProvider.bind(binder, \"druid.sql.planner\", PlannerConfig.class);\n-      JsonConfigProvider.bind(binder, \"druid.sql.avatica\", AvaticaServerConfig.class);\n-      LifecycleModule.register(binder, DruidSchema.class);\n       binder.bind(ViewManager.class).to(NoopViewManager.class).in(LazySingleton.class);\n \n-      // Add empty SqlAggregator binder.\n-      Multibinder.newSetBinder(binder, SqlAggregator.class);\n+      binder.install(new DruidCalciteSchemaModule());", "originalCommit": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTgxNg==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372535816", "bodyText": "I usually like smaller modules because it's easier to rationalize what needs to be installed in that module. Every package has a module that describes how implementations in it's package are provided to the rest of the code. The other advantage of this is you can keep all the implementations package private and only expose interfaces to other packages - which means there's less accidental coupling between packages.\nThis also makes testing each module easier (I realize I haven't written tests for them yet, but they're coming)", "author": "suneet-s", "createdAt": "2020-01-29T17:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNzcyMw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374407723", "bodyText": "The only reason I asked was because I was concerned that having things be too split up would make it hard for people to guess what functionality should be in which file (at least with something named SqlModule it's clear that all the SQL stuff goes in there).\nThe easier testability is nice though, so you convinced me it's worth it. Let's just make sure it's as clear as possible from the namings what stuff goes in what module (or at least from the javadocs).", "author": "gianm", "createdAt": "2020-02-03T23:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMDUwMA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374410500", "bodyText": "A pattern I've used in the past is 1 module per sub package. The source directory structure should already be broken up so that related classes are under the same package.", "author": "suneet-s", "createdAt": "2020-02-04T00:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/guice/SqlModule.java b/sql/src/main/java/org/apache/druid/sql/guice/SqlModule.java\nindex 9297d357cb..f68efdd7e6 100644\n--- a/sql/src/main/java/org/apache/druid/sql/guice/SqlModule.java\n+++ b/sql/src/main/java/org/apache/druid/sql/guice/SqlModule.java\n\n@@ -58,8 +58,8 @@ public class SqlModule implements Module\n       binder.bind(ViewManager.class).to(NoopViewManager.class).in(LazySingleton.class);\n \n       binder.install(new DruidCalciteSchemaModule());\n-      binder.install(new DruidSqlCalcitePlannerModule());\n-      binder.install(new AggregationModule());\n+      binder.install(new CalcitePlannerModule());\n+      binder.install(new SqlAggregationModule());\n \n       // QueryLookupOperatorConversion isn't in DruidOperatorTable since it needs a LookupExtractorFactoryContainerProvider injected.\n       SqlBindings.addOperatorConversion(binder, QueryLookupOperatorConversion.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjY3OA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372166678", "bodyText": "Maybe do addSchema to be consistent with the others.\nI recognize this isn't consistent with how DruidBindings works, but you can't win 'em all. (Well, I guess you could win them all, if you changed DruidBindings too.)", "author": "gianm", "createdAt": "2020-01-29T02:54:45Z", "path": "sql/src/main/java/org/apache/druid/sql/guice/SqlBindings.java", "diffHunk": "@@ -41,4 +45,12 @@ public static void addOperatorConversion(\n   {\n     Multibinder.newSetBinder(binder, SqlOperatorConversion.class).addBinding().to(clazz);\n   }\n+\n+  /**\n+   * Returns a multiBinder that can modules can use to bind {@link DruidCalciteSchema} to be used by the SqlModule\n+   */\n+  public static Multibinder<DruidCalciteSchema> calciteSchemaBinder(final Binder binder)", "originalCommit": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/guice/SqlBindings.java b/sql/src/main/java/org/apache/druid/sql/guice/SqlBindings.java\nindex 98b46f54e4..c8d86ab3fe 100644\n--- a/sql/src/main/java/org/apache/druid/sql/guice/SqlBindings.java\n+++ b/sql/src/main/java/org/apache/druid/sql/guice/SqlBindings.java\n\n@@ -49,8 +50,11 @@ public class SqlBindings\n   /**\n    * Returns a multiBinder that can modules can use to bind {@link DruidCalciteSchema} to be used by the SqlModule\n    */\n-  public static Multibinder<DruidCalciteSchema> calciteSchemaBinder(final Binder binder)\n+  public static void addSchema(\n+      final Binder binder,\n+      final Class<? extends DruidCalciteSchema> clazz\n+  )\n   {\n-    return Multibinder.newSetBinder(binder, DruidCalciteSchema.class);\n+    Multibinder.newSetBinder(binder, DruidCalciteSchema.class).addBinding().to(clazz).in(Scopes.SINGLETON);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NzUzNA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372167534", "bodyText": "Do you think it makes sense to make this a SchemaProvider and have it return a Schema instead of being one? It always seems weird to me to extend other libraries' interfaces and add methods to them.", "author": "gianm", "createdAt": "2020-01-29T02:59:13Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchema.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import org.apache.calcite.schema.Schema;\n+\n+/**\n+ * A calcite schema that has a name which it should be registered to.\n+ */\n+public interface DruidCalciteSchema extends Schema", "originalCommit": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMzI0Nw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r372533247", "bodyText": "Yeah I was being lazy and extended a libraries' interface. I've changed it to use composition instead since I need the name and the Schema .", "author": "suneet-s", "createdAt": "2020-01-29T17:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NzUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchema.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchema.java\nindex d0dd8ba7e3..894abebec2 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchema.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchema.java\n\n@@ -22,12 +22,17 @@ package org.apache.druid.sql.calcite.schema;\n import org.apache.calcite.schema.Schema;\n \n /**\n- * A calcite schema that has a name which it should be registered to.\n+ * A calcite schema and the name that it needs to be bound to so that it is available in Druid SQL.\n  */\n-public interface DruidCalciteSchema extends Schema\n+public interface DruidCalciteSchema\n {\n   /**\n    * @return The name that this schema should be registered to.\n    */\n   String getSchemaName();\n+\n+  /**\n+   * @return The Schema that Calcite should use.\n+   */\n+  Schema getSchema();\n }\n"}}, {"oid": "c6a2c7f06601dfd9caf2a69e37be80ff90a586ba", "url": "https://github.com/apache/druid/commit/c6a2c7f06601dfd9caf2a69e37be80ff90a586ba", "message": "fix some tests", "committedDate": "2020-01-29T18:35:25Z", "type": "commit"}, {"oid": "29c620e4659d027a4c0ab64f14de9a65c6ee42c3", "url": "https://github.com/apache/druid/commit/29c620e4659d027a4c0ab64f14de9a65c6ee42c3", "message": "Merge remote-tracking branch 'upstream/master' into sql", "committedDate": "2020-01-31T19:12:10Z", "type": "commit"}, {"oid": "afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "url": "https://github.com/apache/druid/commit/afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "message": "address code review", "committedDate": "2020-01-31T19:37:03Z", "type": "commit"}, {"oid": "837ced94b1fd0899127b5ad5afc70bafd8a5b108", "url": "https://github.com/apache/druid/commit/837ced94b1fd0899127b5ad5afc70bafd8a5b108", "message": "tests compile", "committedDate": "2020-01-31T21:07:38Z", "type": "commit"}, {"oid": "0e3095dbd6d4d5e60550b19a8a8661e5cfd106ad", "url": "https://github.com/apache/druid/commit/0e3095dbd6d4d5e60550b19a8a8661e5cfd106ad", "message": "Working tests", "committedDate": "2020-02-01T00:24:11Z", "type": "commit"}, {"oid": "717e480f8da549ccfe3a049cf483095da56b2213", "url": "https://github.com/apache/druid/commit/717e480f8da549ccfe3a049cf483095da56b2213", "message": "Add all the tests", "committedDate": "2020-02-01T06:46:18Z", "type": "commit"}, {"oid": "221a7cc534ddf13be8fbd32bca1c937890f5df5b", "url": "https://github.com/apache/druid/commit/221a7cc534ddf13be8fbd32bca1c937890f5df5b", "message": "Merge remote-tracking branch 'upstream/master' into sql", "committedDate": "2020-02-01T06:46:35Z", "type": "commit"}, {"oid": "b6ff378356462c7351257af53db3249e71c3f7e4", "url": "https://github.com/apache/druid/commit/b6ff378356462c7351257af53db3249e71c3f7e4", "message": "fix up licenses and dependencies", "committedDate": "2020-02-02T06:09:34Z", "type": "commit"}, {"oid": "f84007921ea7874a966e6142dd3c64257a572344", "url": "https://github.com/apache/druid/commit/f84007921ea7874a966e6142dd3c64257a572344", "message": "Merge remote-tracking branch 'upstream/master' into sql", "committedDate": "2020-02-02T19:39:48Z", "type": "commit"}, {"oid": "ecb691168db9b57b45bfedbf801db27e65c567c3", "url": "https://github.com/apache/druid/commit/ecb691168db9b57b45bfedbf801db27e65c567c3", "message": "add calcite dependency to druid-benchmarks", "committedDate": "2020-02-03T01:31:39Z", "type": "commit"}, {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "url": "https://github.com/apache/druid/commit/c80e41b77227c9e69f1ef8c568e76ced57a150c5", "message": "tests pass", "committedDate": "2020-02-03T03:58:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MDg3OA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374360878", "bodyText": "This is (AFAIK) only used by DruidOperatorTable, which is provided by CalcitePlannerModule. I don't think anyone would ever want just one or the other. Would it make sense to combine them?", "author": "gianm", "createdAt": "2020-02-03T21:50:07Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/SqlAggregationModule.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.aggregation;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.multibindings.Multibinder;\n+\n+/**\n+ * Module that provides SQL aggregations.\n+ * To add an aggregation use {@link org.apache.druid.sql.guice.SqlBindings#addAggregator(Binder, Class)}\n+ */\n+public class SqlAggregationModule implements Module\n+{\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    // Add empty SqlAggregator binder.\n+    Multibinder.newSetBinder(binder, SqlAggregator.class);", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTQ1Mg==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374419452", "bodyText": "I'd like to leave it in this package because of it's proximity to the SqlAggregator interface.", "author": "suneet-s", "createdAt": "2020-02-04T00:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MDg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMTAxNw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374821017", "bodyText": "Hmm, it's not what I would have done but I don't think it's a big deal either way. Please proceed with keeping it this way then.", "author": "gianm", "createdAt": "2020-02-04T17:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MDg3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MTQ5NA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374361494", "bodyText": "But which bindings?", "author": "gianm", "createdAt": "2020-02-03T21:51:27Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import com.google.inject.name.Names;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.LifecycleModule;\n+import org.apache.druid.sql.guice.SqlBindings;\n+\n+/**\n+ * The module responsible for providing bindings", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTg3MA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374419870", "bodyText": "updated", "author": "suneet-s", "createdAt": "2020-02-04T00:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MTQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\nindex 7056392ed0..bf79b49135 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\n\n@@ -31,11 +31,12 @@ import org.apache.druid.guice.LifecycleModule;\n import org.apache.druid.sql.guice.SqlBindings;\n \n /**\n- * The module responsible for providing bindings\n+ * The module responsible for providing bindings to Calcite schemas.\n  */\n public class DruidCalciteSchemaModule implements Module\n {\n   private static final String DRUID_SCHEMA_NAME = \"druid\";\n+  private static final String INFORMATION_SCHEMA_NAME = \"INFORMATION_SCHEMA\";\n   static final String INCOMPLETE_SCHEMA = \"INCOMPLETE_SCHEMA\";\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NDk3OA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374394978", "bodyText": "Extract to a constant?", "author": "gianm", "createdAt": "2020-02-03T23:13:23Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import com.google.inject.name.Names;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.LifecycleModule;\n+import org.apache.druid.sql.guice.SqlBindings;\n+\n+/**\n+ * The module responsible for providing bindings\n+ */\n+public class DruidCalciteSchemaModule implements Module\n+{\n+  private static final String DRUID_SCHEMA_NAME = \"druid\";\n+  static final String INCOMPLETE_SCHEMA = \"INCOMPLETE_SCHEMA\";\n+\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    binder.bind(String.class).annotatedWith(DruidSchemaName.class).toInstance(DRUID_SCHEMA_NAME);\n+\n+    // Should only be used by the information schema\n+    binder.bind(SchemaPlus.class)\n+          .annotatedWith(Names.named(INCOMPLETE_SCHEMA))\n+          .toProvider(RootSchemaProvider.class)\n+          .in(Scopes.SINGLETON);\n+\n+    // DruidSchema needs to listen to changes for incoming segments\n+    LifecycleModule.register(binder, DruidSchema.class);\n+    binder.bind(SystemSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(InformationSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(LookupSchema.class).in(Scopes.SINGLETON);\n+\n+    // Binder to inject different schema to Calcite\n+    SqlBindings.addSchema(binder, DruidSqlSchema.class);\n+    SqlBindings.addSchema(binder, SystemSqlSchema.class);\n+    SqlBindings.addSchema(binder, LookupSqlSchema.class);\n+  }\n+\n+  @Provides\n+  @Singleton\n+  private SchemaPlus getRootSchema(@Named(INCOMPLETE_SCHEMA) SchemaPlus rootSchema, InformationSchema informationSchema)\n+  {\n+    String name = \"INFORMATION_SCHEMA\";", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzMzU1MA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374433550", "bodyText": "Done", "author": "suneet-s", "createdAt": "2020-02-04T01:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NDk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\nindex 7056392ed0..bf79b49135 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\n\n@@ -31,11 +31,12 @@ import org.apache.druid.guice.LifecycleModule;\n import org.apache.druid.sql.guice.SqlBindings;\n \n /**\n- * The module responsible for providing bindings\n+ * The module responsible for providing bindings to Calcite schemas.\n  */\n public class DruidCalciteSchemaModule implements Module\n {\n   private static final String DRUID_SCHEMA_NAME = \"druid\";\n+  private static final String INFORMATION_SCHEMA_NAME = \"INFORMATION_SCHEMA\";\n   static final String INCOMPLETE_SCHEMA = \"INCOMPLETE_SCHEMA\";\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMDEzMg==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374400132", "bodyText": "This is a bit gross. The binding setup and method signatures suggest that the complete root schema is built using an incomplete root schema as input. But this method actually modifies the incomplete schema and they end up being the exact same object. And in fact, that grossness is required for the InformationSchema to work properly, because it needs to be able to see itself in the root schema!\nMaybe we could give the InformationSchema a root schema provider instead of the actual root schema? Would that work? It'd be cleaner, if so.", "author": "gianm", "createdAt": "2020-02-03T23:28:40Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import com.google.inject.name.Names;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.LifecycleModule;\n+import org.apache.druid.sql.guice.SqlBindings;\n+\n+/**\n+ * The module responsible for providing bindings\n+ */\n+public class DruidCalciteSchemaModule implements Module\n+{\n+  private static final String DRUID_SCHEMA_NAME = \"druid\";\n+  static final String INCOMPLETE_SCHEMA = \"INCOMPLETE_SCHEMA\";\n+\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    binder.bind(String.class).annotatedWith(DruidSchemaName.class).toInstance(DRUID_SCHEMA_NAME);\n+\n+    // Should only be used by the information schema\n+    binder.bind(SchemaPlus.class)\n+          .annotatedWith(Names.named(INCOMPLETE_SCHEMA))\n+          .toProvider(RootSchemaProvider.class)\n+          .in(Scopes.SINGLETON);\n+\n+    // DruidSchema needs to listen to changes for incoming segments\n+    LifecycleModule.register(binder, DruidSchema.class);\n+    binder.bind(SystemSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(InformationSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(LookupSchema.class).in(Scopes.SINGLETON);\n+\n+    // Binder to inject different schema to Calcite\n+    SqlBindings.addSchema(binder, DruidSqlSchema.class);\n+    SqlBindings.addSchema(binder, SystemSqlSchema.class);\n+    SqlBindings.addSchema(binder, LookupSqlSchema.class);\n+  }\n+\n+  @Provides\n+  @Singleton\n+  private SchemaPlus getRootSchema(@Named(INCOMPLETE_SCHEMA) SchemaPlus rootSchema, InformationSchema informationSchema)\n+  {\n+    String name = \"INFORMATION_SCHEMA\";\n+    rootSchema.add(name, informationSchema);", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzMzc4Ng==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374433786", "bodyText": "Agreed this is gross :( I tried for a while to get this set up correctly. Here's where I landed\nUnfortunately I'd still need to inject 2 SchemaPluses - a Provider to an \"incomplete\" one that is needed by InformationSchema, and a complete one that's used by the PlannerFactory. It's unclear to me if any other classes would ever need to use the \"complete\" schema. So even though this is gross, I think this will prevent someone from accidentally injecting the wrong schema in another class.\nThe grossness is also contained in this one method. I'll add more comments explaining this. Maybe someone else can make this better in a future patch. \ud83e\udd1e", "author": "suneet-s", "createdAt": "2020-02-04T01:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMDEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\nindex 7056392ed0..bf79b49135 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java\n\n@@ -31,11 +31,12 @@ import org.apache.druid.guice.LifecycleModule;\n import org.apache.druid.sql.guice.SqlBindings;\n \n /**\n- * The module responsible for providing bindings\n+ * The module responsible for providing bindings to Calcite schemas.\n  */\n public class DruidCalciteSchemaModule implements Module\n {\n   private static final String DRUID_SCHEMA_NAME = \"druid\";\n+  private static final String INFORMATION_SCHEMA_NAME = \"INFORMATION_SCHEMA\";\n   static final String INCOMPLETE_SCHEMA = \"INCOMPLETE_SCHEMA\";\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMDg3Nw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374400877", "bodyText": "\"schema\" (spelling). And \"Druid\" should be capitalized.", "author": "gianm", "createdAt": "2020-02-03T23:30:57Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSchemaName.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.BindingAnnotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * An annotation to get the name of the schenma to access druid tables in SQL.", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSchemaName.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSchemaName.java\nindex d6f069223e..3c0efebd88 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSchemaName.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSchemaName.java\n\n@@ -27,7 +27,7 @@ import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n /**\n- * An annotation to get the name of the schenma to access druid tables in SQL.\n+ * An annotation to get the name of the schema to access Druid tables in SQL.\n  */\n @Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})\n @Retention(RetentionPolicy.RUNTIME)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTE4NA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374401184", "bodyText": "\"Druid\", \"SQL\" (capitalization)", "author": "gianm", "createdAt": "2020-02-03T23:31:56Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.schema.Schema;\n+\n+/**\n+ * The schema for druid tables to be accessible via sql.", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/NamedDruidSchema.java\nsimilarity index 86%\nrename from sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java\nrename to sql/src/main/java/org/apache/druid/sql/calcite/schema/NamedDruidSchema.java\nindex a7d3cb1474..a48ccf23d6 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/NamedDruidSchema.java\n\n@@ -23,15 +23,15 @@ import com.google.inject.Inject;\n import org.apache.calcite.schema.Schema;\n \n /**\n- * The schema for druid tables to be accessible via sql.\n+ * The schema for Druid tables to be accessible via SQL.\n  */\n-class DruidSqlSchema implements DruidCalciteSchema\n+class NamedDruidSchema implements NamedSchema\n {\n   private final DruidSchema druidSchema;\n   private final String druidSchemaName;\n \n   @Inject\n-  DruidSqlSchema(DruidSchema druidSchema, @DruidSchemaName String druidSchemaName)\n+  NamedDruidSchema(DruidSchema druidSchema, @DruidSchemaName String druidSchemaName)\n   {\n     this.druidSchema = druidSchema;\n     this.druidSchemaName = druidSchemaName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTY4Nw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374401687", "bodyText": "We now have classes DruidSchema, DruidSqlSchema, and DruidCalciteSchema. Their relationships aren't very clear from the names. How about naming them DruidSchema, DruidSchemaProvider, and SchemaProvider respectively?", "author": "gianm", "createdAt": "2020-02-03T23:33:39Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.schema.Schema;\n+\n+/**\n+ * The schema for druid tables to be accessible via sql.\n+ */\n+class DruidSqlSchema implements DruidCalciteSchema", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MDc1MQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374440751", "bodyText": "I don't like Provider because that's a guice thing and I'd expect it to have a method that returns an object, but this interface returns 2 things and it doesn't implement Provider\nHow about\n\n<Druid>Schema which provides the implementation that Calcite needs to get tables\nCalciteSubSchema which is an interface containing a name and a Schema so that it can be registered to a Root Schema(SchemaPlus)\n<System>SubSchema the implementation of the CalciteSubSchema interface for appropriate <System>Schema", "author": "suneet-s", "createdAt": "2020-02-04T02:05:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNTU3Mg==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374815572", "bodyText": "So there'd be both a SystemSchema and SystemSubSchema (and the SystemSubSchema would be how you get a SystemSchema)?\nWho would have thought this would be the hard part.\nHow about DruidSchema, NamedDruidSchema, and NamedSchema?", "author": "gianm", "createdAt": "2020-02-04T17:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNjIxMA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374816210", "bodyText": "lol - alright I like that suggestion. Thanks!", "author": "suneet-s", "createdAt": "2020-02-04T17:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDcyNQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374850725", "bodyText": ":|", "author": "gianm", "createdAt": "2020-02-04T18:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/NamedDruidSchema.java\nsimilarity index 86%\nrename from sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java\nrename to sql/src/main/java/org/apache/druid/sql/calcite/schema/NamedDruidSchema.java\nindex a7d3cb1474..a48ccf23d6 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/NamedDruidSchema.java\n\n@@ -23,15 +23,15 @@ import com.google.inject.Inject;\n import org.apache.calcite.schema.Schema;\n \n /**\n- * The schema for druid tables to be accessible via sql.\n+ * The schema for Druid tables to be accessible via SQL.\n  */\n-class DruidSqlSchema implements DruidCalciteSchema\n+class NamedDruidSchema implements NamedSchema\n {\n   private final DruidSchema druidSchema;\n   private final String druidSchemaName;\n \n   @Inject\n-  DruidSqlSchema(DruidSchema druidSchema, @DruidSchemaName String druidSchemaName)\n+  NamedDruidSchema(DruidSchema druidSchema, @DruidSchemaName String druidSchemaName)\n   {\n     this.druidSchema = druidSchema;\n     this.druidSchemaName = druidSchemaName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMzEwMQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374403101", "bodyText": "Would be nice to have something here to check for duplicate schema names. I don't think the base Calcite class does.", "author": "gianm", "createdAt": "2020-02-03T23:38:20Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/RootSchemaProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import org.apache.calcite.jdbc.CalciteSchema;\n+import org.apache.calcite.schema.SchemaPlus;\n+\n+import java.util.Set;\n+\n+/**\n+ * Provides the RootSchema for calcite with\n+ * - metadata schema disabled because it's not needed\n+ * - caching disabled because druid's caching is better.\n+ *\n+ * All the provided schema are added to the rootSchema.\n+ */\n+public class RootSchemaProvider implements Provider<SchemaPlus>\n+{\n+  private final Set<DruidCalciteSchema> calciteSchemas;\n+\n+  @Inject\n+  RootSchemaProvider(Set<DruidCalciteSchema> calciteSchemas)\n+  {\n+    this.calciteSchemas = calciteSchemas;\n+  }\n+\n+  @Override\n+  public SchemaPlus get()\n+  {\n+    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n+    calciteSchemas.forEach(schema -> rootSchema.add(schema.getSchemaName(), schema.getSchema()));", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNjYxMA==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374426610", "bodyText": "Done.", "author": "suneet-s", "createdAt": "2020-02-04T01:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMzEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "chunk": "diff --git a/sql/src/main/java/org/apache/druid/sql/calcite/schema/RootSchemaProvider.java b/sql/src/main/java/org/apache/druid/sql/calcite/schema/RootSchemaProvider.java\nindex e136f7efe4..595e7ae522 100644\n--- a/sql/src/main/java/org/apache/druid/sql/calcite/schema/RootSchemaProvider.java\n+++ b/sql/src/main/java/org/apache/druid/sql/calcite/schema/RootSchemaProvider.java\n\n@@ -23,8 +23,12 @@ import com.google.inject.Inject;\n import com.google.inject.Provider;\n import org.apache.calcite.jdbc.CalciteSchema;\n import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.java.util.common.ISE;\n \n+import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * Provides the RootSchema for calcite with\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNDY1OQ==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374404659", "bodyText": "Is it really worth all this indirection and complexity to avoid having stuff refer to the static string \"druid\"?", "author": "gianm", "createdAt": "2020-02-03T23:43:23Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/view/DruidViewMacroFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.view;\n+\n+import org.apache.druid.server.security.Escalator;\n+import org.apache.druid.sql.calcite.planner.PlannerFactory;\n+\n+/**\n+ * A factory to create a {@link DruidViewMacro} that is used by Guice for Assisted injection.\n+ */\n+public interface DruidViewMacroFactory\n+{\n+  /**\n+   * Creates an instance of {@link DruidViewMacro}\n+   */\n+  DruidViewMacro create(PlannerFactory plannerFactory, Escalator escalator, String viewSql);", "originalCommit": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNDUyNw==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374424527", "bodyText": "If I was doing this again, I probably wouldn't have done it this way just to get rid of a static constant being used across a few packages in the sql sub-module.\nI got carried away with all the guice magic. But it's a bit of a pain to revert this change now.", "author": "suneet-s", "createdAt": "2020-02-04T00:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNDY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxOTYzNg==", "url": "https://github.com/apache/druid/pull/9279#discussion_r374819636", "bodyText": "Well, okay, I'm fine with keeping it this way. It seems a little convoluted but at least I learned something about Guice while reviewing it. Maybe consider adding some comments about what the purpose of all the indirection is, so future code-archaeologists can understand the intent behind it.", "author": "gianm", "createdAt": "2020-02-04T17:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNDY1OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "url": "https://github.com/apache/druid/commit/a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "message": "rename the schemas", "committedDate": "2020-02-04T17:37:35Z", "type": "commit"}, {"oid": "32103e3d2d27cb7347592601671f02375735a470", "url": "https://github.com/apache/druid/commit/32103e3d2d27cb7347592601671f02375735a470", "message": "Merge remote-tracking branch 'upstream/master' into sql", "committedDate": "2020-02-04T17:38:00Z", "type": "commit"}]}