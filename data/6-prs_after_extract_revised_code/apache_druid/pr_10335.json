{"pr_number": 10335, "pr_title": "Configurable Index Type", "pr_createdAt": "2020-08-31T08:02:37Z", "pr_url": "https://github.com/apache/druid/pull/10335", "timeline": [{"oid": "928f929996e5fa77cfa5c659e015d7490dfefdec", "url": "https://github.com/apache/druid/commit/928f929996e5fa77cfa5c659e015d7490dfefdec", "message": "Introduce a Configurable Index Type", "committedDate": "2020-10-04T14:34:13Z", "type": "commit"}, {"oid": "a9fbe77ffdb4af4190d06e4e30bcd0258bc759e6", "url": "https://github.com/apache/druid/commit/a9fbe77ffdb4af4190d06e4e30bcd0258bc759e6", "message": "Change to @UnstableApi", "committedDate": "2020-10-04T14:34:14Z", "type": "commit"}, {"oid": "e089d090097484989bcfb5c181b29ae722ec1c45", "url": "https://github.com/apache/druid/commit/e089d090097484989bcfb5c181b29ae722ec1c45", "message": "Add AppendableIndexSpecTest", "committedDate": "2020-10-04T14:34:14Z", "type": "commit"}, {"oid": "1e5d8ba46ff8cbc575bdfbf27c1ca7ed56298c58", "url": "https://github.com/apache/druid/commit/1e5d8ba46ff8cbc575bdfbf27c1ca7ed56298c58", "message": "Update doc", "committedDate": "2020-10-04T14:34:14Z", "type": "commit"}, {"oid": "dea7e23f65f53df8c3a211d23ced441f50675fc9", "url": "https://github.com/apache/druid/commit/dea7e23f65f53df8c3a211d23ced441f50675fc9", "message": "Add spelling exception", "committedDate": "2020-10-04T14:34:14Z", "type": "commit"}, {"oid": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "url": "https://github.com/apache/druid/commit/efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "message": "Add tests coverage", "committedDate": "2020-10-04T14:34:15Z", "type": "commit"}, {"oid": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "url": "https://github.com/apache/druid/commit/efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "message": "Add tests coverage", "committedDate": "2020-10-04T14:34:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNDg5NQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499504895", "bodyText": "How is this test related to configurable index type?\nPlease add documentation line explaining the test", "author": "Eshcar", "createdAt": "2020-10-05T10:41:53Z", "path": "extensions-contrib/materialized-view-maintenance/src/test/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorTest.java", "diffHunk": "@@ -317,6 +318,32 @@ public void testCheckSegmentsAndSubmitTasks() throws IOException\n \n   }\n \n+  @Test", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyOTU1Mg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501529552", "bodyText": "Added", "author": "liran-funaro", "createdAt": "2020-10-08T08:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNDg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a869d1711e51bee2e4b83296edf427aff7de01f", "chunk": "diff --git a/extensions-contrib/materialized-view-maintenance/src/test/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorTest.java b/extensions-contrib/materialized-view-maintenance/src/test/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorTest.java\nindex afffd9a91c..8dc6e53a4e 100644\n--- a/extensions-contrib/materialized-view-maintenance/src/test/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorTest.java\n+++ b/extensions-contrib/materialized-view-maintenance/src/test/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorTest.java\n\n@@ -318,6 +318,9 @@ public class MaterializedViewSupervisorTest\n \n   }\n \n+  /**\n+   * Verifies that creating HadoopIndexTask compleates without raising exception.\n+   */\n   @Test\n   public void testCreateTask()\n   {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNjQ0MA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499506440", "bodyText": "a way to avoid the null (in multiple places) is to add another ctor that takes additional param while supporting prev ctor", "author": "Eshcar", "createdAt": "2020-10-05T10:44:58Z", "path": "extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java", "diffHunk": "@@ -115,6 +115,7 @@ public void testSerdeWithNonDefaults() throws Exception\n   public void testConvert()\n   {\n     KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n+        null,", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTMwNQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501829305", "bodyText": "I think it is best to avoid a new constructor here.\nOtherwise, each new parameter will incur a new constructor.", "author": "liran-funaro", "createdAt": "2020-10-08T15:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNjQ0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNzEyMQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499507121", "bodyText": "likewise null parameter", "author": "Eshcar", "createdAt": "2020-10-05T10:46:16Z", "path": "extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTest.java", "diffHunk": "@@ -2739,6 +2739,7 @@ private KinesisIndexTask createTask(\n     boolean resetOffsetAutomatically = false;\n     int maxRowsInMemory = 1000;\n     final KinesisIndexTaskTuningConfig tuningConfig = new KinesisIndexTaskTuningConfig(\n+        null,", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTM3Nw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501829377", "bodyText": "See above.", "author": "liran-funaro", "createdAt": "2020-10-08T15:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNzEyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODE1OQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499508159", "bodyText": "add comment about this being the line that sets the (configurable) I2 type", "author": "Eshcar", "createdAt": "2020-10-05T10:48:25Z", "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java", "diffHunk": "@@ -140,6 +144,7 @@ public HadoopTuningConfig(\n     this.rowFlushBoundary = maxRowsInMemory == null ? maxRowsInMemoryCOMPAT == null\n                                                       ? DEFAULT_ROW_FLUSH_BOUNDARY\n                                                       : maxRowsInMemoryCOMPAT : maxRowsInMemory;\n+    this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDEwMA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501740100", "bodyText": "@liran-funaro Could you please address this?", "author": "a2l007", "createdAt": "2020-10-08T13:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxOTUzNQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501819535", "bodyText": "I'm unsure why this line needs to be documented. It is no different from any of the other tuning configurations in this constructor.\nAppendableIndexSpec is documented, so it is self-explanatory.", "author": "liran-funaro", "createdAt": "2020-10-08T15:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb671417c04b1c540d8814be72e50eb40d3438fc", "chunk": "diff --git a/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java b/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java\nindex 29a8b6edf9..7e0c6deabb 100644\n--- a/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java\n+++ b/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java\n\n@@ -145,8 +145,8 @@ public class HadoopTuningConfig implements TuningConfig\n                                                       ? DEFAULT_ROW_FLUSH_BOUNDARY\n                                                       : maxRowsInMemoryCOMPAT : maxRowsInMemory;\n     this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n-    // initializing this to 0, it will be lazily initialized to a value\n-    // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+    /** initializing this to 0, it will be lazily intialized to a value\n+     * @see #getMaxBytesInMemoryOrDefault() */\n     this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n     this.leaveIntermediate = leaveIntermediate;\n     this.cleanupOnFailure = cleanupOnFailure == null ? true : cleanupOnFailure;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwOTI3Ng==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499509276", "bodyText": "add comment: this is the line that makes I2 configurable", "author": "Eshcar", "createdAt": "2020-10-05T10:50:41Z", "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/IndexGeneratorJob.java", "diffHunk": "@@ -302,11 +301,11 @@ private static IncrementalIndex makeIncrementalIndex(\n         .withRollup(config.getSchema().getDataSchema().getGranularitySpec().isRollup())\n         .build();\n \n-    IncrementalIndex newIndex = new IncrementalIndex.Builder()\n+    IncrementalIndex newIndex = tuningConfig.getAppendableIndexSpec().builder()", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNTg3OA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501835878", "bodyText": "Done", "author": "liran-funaro", "createdAt": "2020-10-08T16:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwOTI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "829b86f9548952795c4f3808679adfacb3f5b97a", "chunk": "diff --git a/indexing-hadoop/src/main/java/org/apache/druid/indexer/IndexGeneratorJob.java b/indexing-hadoop/src/main/java/org/apache/druid/indexer/IndexGeneratorJob.java\nindex 9ce140ee2a..abc0b3bc96 100644\n--- a/indexing-hadoop/src/main/java/org/apache/druid/indexer/IndexGeneratorJob.java\n+++ b/indexing-hadoop/src/main/java/org/apache/druid/indexer/IndexGeneratorJob.java\n\n@@ -301,6 +301,7 @@ public class IndexGeneratorJob implements Jobby\n         .withRollup(config.getSchema().getDataSchema().getGranularitySpec().isRollup())\n         .build();\n \n+    // Build the incremental-index according to the spec that was chosen by the user\n     IncrementalIndex newIndex = tuningConfig.getAppendableIndexSpec().builder()\n         .setIndexSchema(indexSchema)\n         .setMaxRowCount(tuningConfig.getRowFlushBoundary())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwOTk5OQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499509999", "bodyText": "nice. Looks like a change in the right direction", "author": "Eshcar", "createdAt": "2020-10-05T10:52:09Z", "path": "extensions-core/kafka-indexing-service/src/main/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTuningConfig.java", "diffHunk": "@@ -193,7 +196,7 @@ public String toString()\n            \"maxRowsInMemory=\" + getMaxRowsInMemory() +\n            \", maxRowsPerSegment=\" + getMaxRowsPerSegment() +\n            \", maxTotalRows=\" + getMaxTotalRows() +\n-           \", maxBytesInMemory=\" + TuningConfigs.getMaxBytesInMemoryOrDefault(getMaxBytesInMemory()) +\n+           \", maxBytesInMemory=\" + getMaxBytesInMemoryOrDefault() +", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMTA2OA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499511068", "bodyText": "having this code duplicated is weird\nShouldn't all these XXXTuningConfig have some common parent with the shared code?", "author": "Eshcar", "createdAt": "2020-10-05T10:54:23Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java", "diffHunk": "@@ -93,6 +96,7 @@ public RealtimeAppenderatorTuningConfig(\n       @JsonProperty(\"maxSavedParseExceptions\") @Nullable Integer maxSavedParseExceptions\n   )\n   {\n+    this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMTIxNw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501831217", "bodyText": "I agree. But that will require a refactor to unify some of the TuningConfig implementations to one common (abstract?) implementation.\nThis can be done before or after this PR.", "author": "liran-funaro", "createdAt": "2020-10-08T15:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMTA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "fb671417c04b1c540d8814be72e50eb40d3438fc", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java\nindex 56c71fdb07..b4cdd22478 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java\n\n@@ -98,8 +98,8 @@ public class RealtimeAppenderatorTuningConfig implements TuningConfig, Appendera\n   {\n     this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     this.maxRowsInMemory = maxRowsInMemory == null ? DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n-    // initializing this to 0, it will be lazily intialized to a value\n-    // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+    /** initializing this to 0, it will be lazily intialized to a value\n+     * @see #getMaxBytesInMemoryOrDefault() */\n     this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n     this.partitionsSpec = new DynamicPartitionsSpec(maxRowsPerSegment, maxTotalRows);\n     this.intermediatePersistPeriod = intermediatePersistPeriod == null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMTU2Mg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499511562", "bodyText": "likewise duplicate code", "author": "Eshcar", "createdAt": "2020-10-05T10:55:26Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java", "diffHunk": "@@ -1262,6 +1267,7 @@ private IndexTuningConfig(\n         @Nullable Integer maxSavedParseExceptions\n     )\n     {\n+      this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMTQyNA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501831424", "bodyText": "See above.", "author": "liran-funaro", "createdAt": "2020-10-08T15:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMTU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fb671417c04b1c540d8814be72e50eb40d3438fc", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\nindex 39bb537d4b..bfb0da3a04 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\n\n@@ -1269,8 +1269,8 @@ public class IndexTask extends AbstractBatchIndexTask implements ChatHandler\n     {\n       this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n       this.maxRowsInMemory = maxRowsInMemory == null ? TuningConfig.DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n-      // initializing this to 0, it will be lazily initialized to a value\n-      // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+      /** initializing this to 0, it will be lazily intialized to a value\n+       * @see #getMaxBytesInMemoryOrDefault() */\n       this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n       this.partitionsSpec = partitionsSpec;\n       this.indexSpec = indexSpec == null ? DEFAULT_INDEX_SPEC : indexSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMjc1OA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499512758", "bodyText": "is this down-casting required?", "author": "Eshcar", "createdAt": "2020-10-05T10:57:44Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java", "diffHunk": "@@ -210,8 +211,8 @@ private InputSourceReader buildReader(\n         .withRollup(dataSchema.getGranularitySpec().isRollup())\n         .build();\n \n-    return new IncrementalIndex.Builder().setIndexSchema(schema)\n+    return (OnheapIncrementalIndex) new OnheapIncrementalIndex.Builder().setIndexSchema(schema)", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java\nindex 6cb1e59fd1..b0f4702090 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java\n\n@@ -211,8 +210,8 @@ public class InputSourceSampler\n         .withRollup(dataSchema.getGranularitySpec().isRollup())\n         .build();\n \n-    return (OnheapIncrementalIndex) new OnheapIncrementalIndex.Builder().setIndexSchema(schema)\n+    return new IncrementalIndex.Builder().setIndexSchema(schema)\n                                          .setMaxRowCount(samplerConfig.getNumRows())\n-                                         .build();\n+                                         .buildOnheap();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNDIxNw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499514217", "bodyText": "great. reducing duplication", "author": "Eshcar", "createdAt": "2020-10-05T11:00:30Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java", "diffHunk": "@@ -117,24 +120,24 @@ public String apply(DimensionSpec input)\n         .withMinTimestamp(granTimeStart.getMillis())\n         .build();\n \n+\n+    AppendableIndexBuilder indexBuilder;\n+\n     if (query.getContextValue(\"useOffheap\", false)) {\n-      index = new IncrementalIndex.Builder()\n-          .setIndexSchema(indexSchema)\n-          .setDeserializeComplexMetrics(false)\n-          .setConcurrentEventAdd(true)\n-          .setSortFacts(sortResults)\n-          .setMaxRowCount(querySpecificConfig.getMaxResults())\n-          .buildOffheap(bufferPool);\n+      indexBuilder = new OffheapIncrementalIndex.Builder()\n+          .setBufferPool(bufferPool);\n     } else {\n-      index = new IncrementalIndex.Builder()\n-          .setIndexSchema(indexSchema)\n-          .setDeserializeComplexMetrics(false)\n-          .setConcurrentEventAdd(true)\n-          .setSortFacts(sortResults)\n-          .setMaxRowCount(querySpecificConfig.getMaxResults())\n-          .buildOnheap();\n+      indexBuilder = new OnheapIncrementalIndex.Builder();\n     }\n \n+    index = indexBuilder", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56ed0b595ac7318204c3355b216474f553fbf1d3", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java b/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java\nindex 6e72cb495c..f0b2a9e1ed 100644\n--- a/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java\n+++ b/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java\n\n@@ -121,7 +121,7 @@ public class GroupByQueryHelper\n         .build();\n \n \n-    AppendableIndexBuilder indexBuilder;\n+    final AppendableIndexBuilder indexBuilder;\n \n     if (query.getContextValue(\"useOffheap\", false)) {\n       indexBuilder = new OffheapIncrementalIndex.Builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNzcxMA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499517710", "bodyText": "so this static class has now changed to an abstract class with different concrete builder classes - nice", "author": "Eshcar", "createdAt": "2020-10-05T11:07:43Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -319,129 +316,6 @@ protected IncrementalIndex(\n     }\n   }\n \n-  public static class Builder", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java b/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java\nindex ccf0ea65db..cc338b9854 100644\n--- a/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java\n+++ b/processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java\n\n@@ -316,6 +316,65 @@ public abstract class IncrementalIndex<AggregatorType> extends AbstractIndex imp\n     }\n   }\n \n+  /**\n+   * This class exists only as backward competability to reduce the number of modified lines.\n+   */\n+  public static class Builder extends OnheapIncrementalIndex.Builder\n+  {\n+    @Override\n+    public Builder setIndexSchema(final IncrementalIndexSchema incrementalIndexSchema)\n+    {\n+      return (Builder) super.setIndexSchema(incrementalIndexSchema);\n+    }\n+\n+    @Override\n+    public Builder setSimpleTestingIndexSchema(final AggregatorFactory... metrics)\n+    {\n+      return (Builder) super.setSimpleTestingIndexSchema(metrics);\n+    }\n+\n+    @Override\n+    public Builder setSimpleTestingIndexSchema(@Nullable Boolean rollup, final AggregatorFactory... metrics)\n+    {\n+      return (Builder) super.setSimpleTestingIndexSchema(rollup, metrics);\n+    }\n+\n+    @Override\n+    public Builder setDeserializeComplexMetrics(final boolean deserializeComplexMetrics)\n+    {\n+      return (Builder) super.setDeserializeComplexMetrics(deserializeComplexMetrics);\n+    }\n+\n+    @Override\n+    public Builder setConcurrentEventAdd(final boolean concurrentEventAdd)\n+    {\n+      return (Builder) super.setConcurrentEventAdd(concurrentEventAdd);\n+    }\n+\n+    @Override\n+    public Builder setSortFacts(final boolean sortFacts)\n+    {\n+      return (Builder) super.setSortFacts(sortFacts);\n+    }\n+\n+    @Override\n+    public Builder setMaxRowCount(final int maxRowCount)\n+    {\n+      return (Builder) super.setMaxRowCount(maxRowCount);\n+    }\n+\n+    @Override\n+    public Builder setMaxBytesInMemory(final long maxBytesInMemory)\n+    {\n+      return (Builder) super.setMaxBytesInMemory(maxBytesInMemory);\n+    }\n+\n+    public OnheapIncrementalIndex buildOnheap()\n+    {\n+      return (OnheapIncrementalIndex) build();\n+    }\n+  }\n+\n \n   public abstract FactsHolder getFacts();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxODQzOQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499518439", "bodyText": "nice - simpler", "author": "Eshcar", "createdAt": "2020-10-05T11:09:08Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java", "diffHunk": "@@ -129,15 +136,11 @@ public FactsHolder getFacts()\n           new OnheapIncrementalIndex.CachingColumnSelectorFactory(columnSelectorFactory, concurrentEventAdd)\n       );\n \n-      if (i == 0) {\n-        aggOffsetInBuffer[i] = 0;\n-      } else {\n-        aggOffsetInBuffer[i] = aggOffsetInBuffer[i - 1] + metrics[i - 1].getMaxIntermediateSizeWithNulls();\n-      }\n+      aggOffsetInBuffer[i] = aggsCurOffsetInBuffer;", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxOTY3OA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499519678", "bodyText": "why is this correct?", "author": "Eshcar", "createdAt": "2020-10-05T11:11:22Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java", "diffHunk": "@@ -129,15 +136,11 @@ public FactsHolder getFacts()\n           new OnheapIncrementalIndex.CachingColumnSelectorFactory(columnSelectorFactory, concurrentEventAdd)\n       );\n \n-      if (i == 0) {\n-        aggOffsetInBuffer[i] = 0;\n-      } else {\n-        aggOffsetInBuffer[i] = aggOffsetInBuffer[i - 1] + metrics[i - 1].getMaxIntermediateSizeWithNulls();\n-      }\n+      aggOffsetInBuffer[i] = aggsCurOffsetInBuffer;\n+      aggsCurOffsetInBuffer += agg.getMaxIntermediateSizeWithNulls();\n     }\n \n-    aggsTotalSize = aggOffsetInBuffer[metrics.length - 1] + metrics[metrics.length\n-                                                                    - 1].getMaxIntermediateSizeWithNulls();\n+    aggsTotalSize = aggsCurOffsetInBuffer;", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNjEzMQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r500316131", "bodyText": "After the last aggregator, the next offset in the buffer is the total size of the buffer.", "author": "liran-funaro", "createdAt": "2020-10-06T14:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxOTY3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMDM1MA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499520350", "bodyText": "this method should return IncrementalIndex\nIs this legal to change the signature ?", "author": "Eshcar", "createdAt": "2020-10-05T11:12:39Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java", "diffHunk": "@@ -346,4 +349,99 @@ public void close()\n     }\n     aggBuffers.clear();\n   }\n+\n+  public static class Builder extends AppendableIndexBuilder\n+  {\n+    @Nullable\n+    NonBlockingPool<ByteBuffer> bufferPool = null;\n+\n+    public Builder setBufferPool(final NonBlockingPool<ByteBuffer> bufferPool)\n+    {\n+      this.bufferPool = bufferPool;\n+      return this;\n+    }\n+\n+    @Override\n+    public void validate()\n+    {\n+      super.validate();\n+      if (bufferPool == null) {\n+        throw new IllegalArgumentException(\"bufferPool cannot be null\");\n+      }\n+    }\n+\n+    @Override\n+    protected OffheapIncrementalIndex buildInner()", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNzA5MQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r500317091", "bodyText": "It is legal for an implementation to increase the requirement, but not to lower it.\nAs long as it conforms with the interface's contract.", "author": "liran-funaro", "createdAt": "2020-10-06T14:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMDM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "948af29a050b2ef21410ba13bfc39d175d46242a", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java b/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\nindex 406005f846..b3cdabcd5e 100644\n--- a/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\n+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\n\n@@ -383,65 +379,4 @@ public class OffheapIncrementalIndex extends IncrementalIndex<BufferAggregator>\n       );\n     }\n   }\n-\n-  public static class Spec implements AppendableIndexSpec, Supplier<ByteBuffer>\n-  {\n-    public static final String TYPE = \"offheap\";\n-    static final int DEFAULT_BUFFER_SIZE = 1 << 23;\n-    static final int DEFAULT_CACHE_SIZE = 1 << 30;\n-\n-    final int bufferSize;\n-    final int cacheSize;\n-    final NonBlockingPool<ByteBuffer> bufferPool;\n-\n-    @JsonCreator\n-    public Spec(\n-        final @JsonProperty(\"bufferSize\") @Nullable Integer bufferSize,\n-        final @JsonProperty(\"cacheSize\") @Nullable Integer cacheSize\n-    )\n-    {\n-      this.bufferSize = bufferSize != null && bufferSize > 0 ? bufferSize : DEFAULT_BUFFER_SIZE;\n-      this.cacheSize = cacheSize != null && cacheSize > this.bufferSize ? cacheSize : DEFAULT_CACHE_SIZE;\n-      this.bufferPool = new StupidPool<>(\n-          \"Offheap incremental-index buffer pool\",\n-          this,\n-          0,\n-          this.cacheSize / this.bufferSize\n-      );\n-    }\n-\n-    @JsonProperty\n-    public int getBufferSize()\n-    {\n-      return bufferSize;\n-    }\n-\n-    @JsonProperty\n-    public int getCacheSize()\n-    {\n-      return cacheSize;\n-    }\n-\n-    @Override\n-    public ByteBuffer get()\n-    {\n-      return ByteBuffer.allocateDirect(bufferSize);\n-    }\n-\n-    @Override\n-    public AppendableIndexBuilder builder()\n-    {\n-      return new Builder().setBufferPool(bufferPool);\n-    }\n-\n-    @Override\n-    public long getDefaultMaxBytesInMemory()\n-    {\n-      // In the realtime node, the entire JVM's direct memory is utilized for ingestion and persist operations.\n-      // But maxBytesInMemory only refers to the active index size and not to the index being flushed to disk and the\n-      // persist buffer.\n-      // To account for that, we set default to 1/2 of the max jvm's direct memory.\n-      return JvmUtils.getRuntimeInfo().getDirectMemorySizeBytes() / 2;\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMTc4Mg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499521782", "bodyText": "likewise - diff signature than parent class", "author": "Eshcar", "createdAt": "2020-10-05T11:15:25Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/OnheapIncrementalIndex.java", "diffHunk": "@@ -434,4 +436,39 @@ public ColumnCapabilities getColumnCapabilities(String columnName)\n     }\n   }\n \n+  public static class Builder extends AppendableIndexBuilder\n+  {\n+    @Override\n+    protected OnheapIncrementalIndex buildInner()", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98788ec97fc49bf2ee8ab97a9348b6a2f9b2684c", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OnheapIncrementalIndex.java b/processing/src/main/java/org/apache/druid/segment/incremental/OnheapIncrementalIndex.java\nindex 8893079930..655c8326c8 100644\n--- a/processing/src/main/java/org/apache/druid/segment/incremental/OnheapIncrementalIndex.java\n+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OnheapIncrementalIndex.java\n\n@@ -470,5 +470,11 @@ public class OnheapIncrementalIndex extends IncrementalIndex<Aggregator>\n       // we halved default to 1/6(max jvm memory)\n       return JvmUtils.getRuntimeInfo().getMaxHeapSizeBytes() / 6;\n     }\n+\n+    @Override\n+    public boolean equals(Object that)\n+    {\n+      return that.getClass().equals(this.getClass());\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NzE5MA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r499697190", "bodyText": "Would it make sense to make this abstract instead of having a separate buildInner() method ? We could leave the validation at the implementation level.", "author": "a2l007", "createdAt": "2020-10-05T15:45:42Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.incremental;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.query.aggregation.AggregatorFactory;\n+\n+import javax.annotation.Nullable;\n+\n+public abstract class AppendableIndexBuilder\n+{\n+  @Nullable\n+  protected IncrementalIndexSchema incrementalIndexSchema = null;\n+  protected boolean deserializeComplexMetrics = true;\n+  protected boolean concurrentEventAdd = false;\n+  protected boolean sortFacts = true;\n+  protected int maxRowCount = 0;\n+  protected long maxBytesInMemory = 0;\n+\n+  protected final Logger log = new Logger(this.getClass().getName());\n+\n+  public AppendableIndexBuilder setIndexSchema(final IncrementalIndexSchema incrementalIndexSchema)\n+  {\n+    this.incrementalIndexSchema = incrementalIndexSchema;\n+    return this;\n+  }\n+\n+  /**\n+   * A helper method to set a simple index schema with only metrics and default values for the other parameters. Note\n+   * that this method is normally used for testing and benchmarking; it is unlikely that you would use it in\n+   * production settings.\n+   *\n+   * @param metrics variable array of {@link AggregatorFactory} metrics\n+   *\n+   * @return this\n+   */\n+  @VisibleForTesting\n+  public AppendableIndexBuilder setSimpleTestingIndexSchema(final AggregatorFactory... metrics)\n+  {\n+    return setSimpleTestingIndexSchema(null, metrics);\n+  }\n+\n+\n+  /**\n+   * A helper method to set a simple index schema with controllable metrics and rollup, and default values for the\n+   * other parameters. Note that this method is normally used for testing and benchmarking; it is unlikely that you\n+   * would use it in production settings.\n+   *\n+   * @param metrics variable array of {@link AggregatorFactory} metrics\n+   *\n+   * @return this\n+   */\n+  @VisibleForTesting\n+  public AppendableIndexBuilder setSimpleTestingIndexSchema(@Nullable Boolean rollup, final AggregatorFactory... metrics)\n+  {\n+    IncrementalIndexSchema.Builder builder = new IncrementalIndexSchema.Builder().withMetrics(metrics);\n+    this.incrementalIndexSchema = rollup != null ? builder.withRollup(rollup).build() : builder.build();\n+    return this;\n+  }\n+\n+  public AppendableIndexBuilder setDeserializeComplexMetrics(final boolean deserializeComplexMetrics)\n+  {\n+    this.deserializeComplexMetrics = deserializeComplexMetrics;\n+    return this;\n+  }\n+\n+  public AppendableIndexBuilder setConcurrentEventAdd(final boolean concurrentEventAdd)\n+  {\n+    this.concurrentEventAdd = concurrentEventAdd;\n+    return this;\n+  }\n+\n+  public AppendableIndexBuilder setSortFacts(final boolean sortFacts)\n+  {\n+    this.sortFacts = sortFacts;\n+    return this;\n+  }\n+\n+  public AppendableIndexBuilder setMaxRowCount(final int maxRowCount)\n+  {\n+    this.maxRowCount = maxRowCount;\n+    return this;\n+  }\n+\n+  public AppendableIndexBuilder setMaxBytesInMemory(final long maxBytesInMemory)\n+  {\n+    this.maxBytesInMemory = maxBytesInMemory;\n+    return this;\n+  }\n+\n+  public void validate()\n+  {\n+    if (maxRowCount <= 0) {\n+      throw new IllegalArgumentException(\"Invalid max row count: \" + maxRowCount);\n+    }\n+\n+    if (incrementalIndexSchema == null) {\n+      throw new IllegalArgumentException(\"incrementIndexSchema cannot be null\");\n+    }\n+  }\n+\n+  public final IncrementalIndex build()", "originalCommit": "efe35fd2a69b5c2ac7ae4381df4b4ad52380d6dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMjgzMQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r500312831", "bodyText": "You're right, it would be more elegant without this buildInner() method.\nBut I was trying to avoid code duplication: having to call validate() and log.info() in each build() implementation.\nIt is marked as final exactly to enforce this behavior.\nI could rename it to something else, instantiate() for example.\nWhat do you think?", "author": "liran-funaro", "createdAt": "2020-10-06T14:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzMDQzNQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501130435", "bodyText": "buildInner should be okay.\nIt might be better to switch the log level to DEBUG though.", "author": "a2l007", "createdAt": "2020-10-07T16:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNzkzNg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501517936", "bodyText": "Changed to DEBUG.", "author": "liran-funaro", "createdAt": "2020-10-08T07:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NzE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "56ed0b595ac7318204c3355b216474f553fbf1d3", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexBuilder.java b/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexBuilder.java\nindex 2cf6ccd2cc..220f0e3a65 100644\n--- a/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexBuilder.java\n+++ b/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexBuilder.java\n\n@@ -119,7 +119,7 @@ public abstract class AppendableIndexBuilder\n \n   public final IncrementalIndex build()\n   {\n-    log.info(\"Building appendable index.\");\n+    log.debug(\"Building appendable index.\");\n     validate();\n     return buildInner();\n   }\n"}}, {"oid": "452b196493dda7dd7c558bc67fa8db56e4b33395", "url": "https://github.com/apache/druid/commit/452b196493dda7dd7c558bc67fa8db56e4b33395", "message": "Revert some of the changes to reduce diff", "committedDate": "2020-10-06T14:09:27Z", "type": "commit"}, {"oid": "452b196493dda7dd7c558bc67fa8db56e4b33395", "url": "https://github.com/apache/druid/commit/452b196493dda7dd7c558bc67fa8db56e4b33395", "message": "Revert some of the changes to reduce diff", "committedDate": "2020-10-06T14:09:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NTgxMQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501055811", "bodyText": "Do we still need this method?", "author": "a2l007", "createdAt": "2020-10-07T14:24:54Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -319,126 +316,62 @@ protected IncrementalIndex(\n     }\n   }\n \n-  public static class Builder\n+  /**\n+   * This class exists only as backward competability to reduce the number of modified lines.\n+   */\n+  public static class Builder extends OnheapIncrementalIndex.Builder\n   {\n-    @Nullable\n-    private IncrementalIndexSchema incrementalIndexSchema;\n-    private boolean deserializeComplexMetrics;\n-    private boolean concurrentEventAdd;\n-    private boolean sortFacts;\n-    private int maxRowCount;\n-    private long maxBytesInMemory;\n-\n-    public Builder()\n-    {\n-      incrementalIndexSchema = null;\n-      deserializeComplexMetrics = true;\n-      concurrentEventAdd = false;\n-      sortFacts = true;\n-      maxRowCount = 0;\n-      maxBytesInMemory = 0;\n-    }\n-\n+    @Override\n     public Builder setIndexSchema(final IncrementalIndexSchema incrementalIndexSchema)\n     {\n-      this.incrementalIndexSchema = incrementalIndexSchema;\n-      return this;\n+      return (Builder) super.setIndexSchema(incrementalIndexSchema);\n     }\n \n-    /**\n-     * A helper method to set a simple index schema with only metrics and default values for the other parameters. Note\n-     * that this method is normally used for testing and benchmarking; it is unlikely that you would use it in\n-     * production settings.\n-     *\n-     * @param metrics variable array of {@link AggregatorFactory} metrics\n-     *\n-     * @return this\n-     */\n-    @VisibleForTesting\n+    @Override\n     public Builder setSimpleTestingIndexSchema(final AggregatorFactory... metrics)\n     {\n-      return setSimpleTestingIndexSchema(null, metrics);\n+      return (Builder) super.setSimpleTestingIndexSchema(metrics);\n     }\n \n-\n-    /**\n-     * A helper method to set a simple index schema with controllable metrics and rollup, and default values for the\n-     * other parameters. Note that this method is normally used for testing and benchmarking; it is unlikely that you\n-     * would use it in production settings.\n-     *\n-     * @param metrics variable array of {@link AggregatorFactory} metrics\n-     *\n-     * @return this\n-     */\n-    @VisibleForTesting\n+    @Override\n     public Builder setSimpleTestingIndexSchema(@Nullable Boolean rollup, final AggregatorFactory... metrics)\n     {\n-      IncrementalIndexSchema.Builder builder = new IncrementalIndexSchema.Builder().withMetrics(metrics);\n-      this.incrementalIndexSchema = rollup != null ? builder.withRollup(rollup).build() : builder.build();\n-      return this;\n+      return (Builder) super.setSimpleTestingIndexSchema(rollup, metrics);\n     }\n \n+    @Override\n     public Builder setDeserializeComplexMetrics(final boolean deserializeComplexMetrics)\n     {\n-      this.deserializeComplexMetrics = deserializeComplexMetrics;\n-      return this;\n+      return (Builder) super.setDeserializeComplexMetrics(deserializeComplexMetrics);\n     }\n \n+    @Override\n     public Builder setConcurrentEventAdd(final boolean concurrentEventAdd)\n     {\n-      this.concurrentEventAdd = concurrentEventAdd;\n-      return this;\n+      return (Builder) super.setConcurrentEventAdd(concurrentEventAdd);\n     }\n \n+    @Override\n     public Builder setSortFacts(final boolean sortFacts)\n     {\n-      this.sortFacts = sortFacts;\n-      return this;\n+      return (Builder) super.setSortFacts(sortFacts);\n     }\n \n+    @Override\n     public Builder setMaxRowCount(final int maxRowCount)\n     {\n-      this.maxRowCount = maxRowCount;\n-      return this;\n+      return (Builder) super.setMaxRowCount(maxRowCount);\n     }\n \n-    //maxBytesInMemory only applies to OnHeapIncrementalIndex\n+    @Override\n     public Builder setMaxBytesInMemory(final long maxBytesInMemory)\n     {\n-      this.maxBytesInMemory = maxBytesInMemory;\n-      return this;\n+      return (Builder) super.setMaxBytesInMemory(maxBytesInMemory);\n     }\n \n     public OnheapIncrementalIndex buildOnheap()", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMDI5NQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501210295", "bodyText": "I leave it on to avoid changing 100+ lines of code.\nThis can be removed later in a refactor PR.\nDo you think I should remove it in this PR?", "author": "liran-funaro", "createdAt": "2020-10-07T18:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NTMzOQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501755339", "bodyText": "Sounds reasonable. Please create a github issue for this so that we are tracking the incremental refactor effort.", "author": "a2l007", "createdAt": "2020-10-08T14:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0ODM0Mg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501848342", "bodyText": "Done. See #10494", "author": "liran-funaro", "createdAt": "2020-10-08T16:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NTgxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5OTIxNQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501099215", "bodyText": "Can this be final?", "author": "a2l007", "createdAt": "2020-10-07T15:19:59Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java", "diffHunk": "@@ -117,24 +120,24 @@ public String apply(DimensionSpec input)\n         .withMinTimestamp(granTimeStart.getMillis())\n         .build();\n \n+\n+    AppendableIndexBuilder indexBuilder;", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMjI4OA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501212288", "bodyText": "Yes.", "author": "liran-funaro", "createdAt": "2020-10-07T18:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5OTIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "56ed0b595ac7318204c3355b216474f553fbf1d3", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java b/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java\nindex 6e72cb495c..f0b2a9e1ed 100644\n--- a/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java\n+++ b/processing/src/main/java/org/apache/druid/query/groupby/GroupByQueryHelper.java\n\n@@ -121,7 +121,7 @@ public class GroupByQueryHelper\n         .build();\n \n \n-    AppendableIndexBuilder indexBuilder;\n+    final AppendableIndexBuilder indexBuilder;\n \n     if (query.getContextValue(\"useOffheap\", false)) {\n       indexBuilder = new OffheapIncrementalIndex.Builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzNTQxMA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501135410", "bodyText": "Could you please add a test for this module?", "author": "a2l007", "createdAt": "2020-10-07T16:08:18Z", "path": "processing/src/main/java/org/apache/druid/jackson/AppendableIndexModule.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.jackson;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.apache.druid.segment.incremental.AppendableIndexSpec;\n+import org.apache.druid.segment.incremental.OffheapIncrementalIndex;\n+import org.apache.druid.segment.incremental.OnheapIncrementalIndex;\n+\n+public class AppendableIndexModule extends SimpleModule", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMDUxMw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501600513", "bodyText": "This is tested as part of the separate TuningConfig tests:\n\nHadoopTuningConfigTest\nParallelIndexTuningConfigTest\nKafkaIndexTuningConfigTest\nKafkaSupervisorTuningConfigTest\nKinesisIndexTaskTuningConfigTest\nKinesisSupervisorTuningConfigTest\nRealtimeTuningConfigTest", "author": "liran-funaro", "createdAt": "2020-10-08T10:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzNTQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "948af29a050b2ef21410ba13bfc39d175d46242a", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/jackson/AppendableIndexModule.java b/processing/src/main/java/org/apache/druid/jackson/AppendableIndexModule.java\nindex 3cc95879e9..177c7a5f78 100644\n--- a/processing/src/main/java/org/apache/druid/jackson/AppendableIndexModule.java\n+++ b/processing/src/main/java/org/apache/druid/jackson/AppendableIndexModule.java\n\n@@ -23,7 +23,6 @@ import com.fasterxml.jackson.annotation.JsonSubTypes;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import org.apache.druid.segment.incremental.AppendableIndexSpec;\n-import org.apache.druid.segment.incremental.OffheapIncrementalIndex;\n import org.apache.druid.segment.incremental.OnheapIncrementalIndex;\n \n public class AppendableIndexModule extends SimpleModule\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDQzMw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501140433", "bodyText": "Please add javadocs.", "author": "a2l007", "createdAt": "2020-10-07T16:15:53Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexSpec.java", "diffHunk": "@@ -17,25 +17,16 @@\n  * under the License.\n  */\n \n-package org.apache.druid.segment.indexing;\n+package org.apache.druid.segment.incremental;\n \n-public class TuningConfigs\n+import org.apache.druid.guice.annotations.UnstableApi;\n+\n+@UnstableApi\n+public interface AppendableIndexSpec", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMjk5OA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501522998", "bodyText": "Added", "author": "liran-funaro", "createdAt": "2020-10-08T08:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "6e9542ec97abfe528269c315f3ad27725ef79bec", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexSpec.java b/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexSpec.java\nindex 6b5e135d0a..67cdabdf56 100644\n--- a/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexSpec.java\n+++ b/processing/src/main/java/org/apache/druid/segment/incremental/AppendableIndexSpec.java\n\n@@ -21,6 +21,9 @@ package org.apache.druid.segment.incremental;\n \n import org.apache.druid.guice.annotations.UnstableApi;\n \n+/**\n+ * AppendableIndexSpec describes the in-memory indexing method for data ingestion.\n+ */\n @UnstableApi\n public interface AppendableIndexSpec\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NDIyMg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501144222", "bodyText": "This comment is no longer valid. Please update accordingly.", "author": "a2l007", "createdAt": "2020-10-07T16:21:28Z", "path": "server/src/main/java/org/apache/druid/segment/indexing/RealtimeTuningConfig.java", "diffHunk": "@@ -132,6 +136,7 @@ public RealtimeTuningConfig(\n       @JsonProperty(\"dedupColumn\") @Nullable String dedupColumn\n   )\n   {\n+    this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     this.maxRowsInMemory = maxRowsInMemory == null ? DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n     // initializing this to 0, it will be lazily initialized to a value\n     // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNzcwMQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501517701", "bodyText": "Fixed", "author": "liran-funaro", "createdAt": "2020-10-08T07:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NDIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "fb671417c04b1c540d8814be72e50eb40d3438fc", "chunk": "diff --git a/server/src/main/java/org/apache/druid/segment/indexing/RealtimeTuningConfig.java b/server/src/main/java/org/apache/druid/segment/indexing/RealtimeTuningConfig.java\nindex 948d60fc06..b3d4cf4183 100644\n--- a/server/src/main/java/org/apache/druid/segment/indexing/RealtimeTuningConfig.java\n+++ b/server/src/main/java/org/apache/druid/segment/indexing/RealtimeTuningConfig.java\n\n@@ -138,8 +138,8 @@ public class RealtimeTuningConfig implements TuningConfig, AppenderatorConfig\n   {\n     this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     this.maxRowsInMemory = maxRowsInMemory == null ? DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n-    // initializing this to 0, it will be lazily initialized to a value\n-    // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+    /** initializing this to 0, it will be lazily intialized to a value\n+     * @see #getMaxBytesInMemoryOrDefault() */\n     this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n     this.intermediatePersistPeriod = intermediatePersistPeriod == null\n                                      ? DEFAULT_INTERMEDIATE_PERSIST_PERIOD\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NTEwOA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501145108", "bodyText": "Comment needs to be updated", "author": "a2l007", "createdAt": "2020-10-07T16:22:44Z", "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java", "diffHunk": "@@ -140,6 +144,7 @@ public HadoopTuningConfig(\n     this.rowFlushBoundary = maxRowsInMemory == null ? maxRowsInMemoryCOMPAT == null\n                                                       ? DEFAULT_ROW_FLUSH_BOUNDARY\n                                                       : maxRowsInMemoryCOMPAT : maxRowsInMemory;\n+    this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     // initializing this to 0, it will be lazily initialized to a value\n     // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb671417c04b1c540d8814be72e50eb40d3438fc", "chunk": "diff --git a/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java b/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java\nindex 29a8b6edf9..7e0c6deabb 100644\n--- a/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java\n+++ b/indexing-hadoop/src/main/java/org/apache/druid/indexer/HadoopTuningConfig.java\n\n@@ -145,8 +145,8 @@ public class HadoopTuningConfig implements TuningConfig\n                                                       ? DEFAULT_ROW_FLUSH_BOUNDARY\n                                                       : maxRowsInMemoryCOMPAT : maxRowsInMemory;\n     this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n-    // initializing this to 0, it will be lazily initialized to a value\n-    // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+    /** initializing this to 0, it will be lazily intialized to a value\n+     * @see #getMaxBytesInMemoryOrDefault() */\n     this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n     this.leaveIntermediate = leaveIntermediate;\n     this.cleanupOnFailure = cleanupOnFailure == null ? true : cleanupOnFailure;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NTkxOA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501145918", "bodyText": "Comment needs to be modified.", "author": "a2l007", "createdAt": "2020-10-07T16:23:56Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java", "diffHunk": "@@ -93,6 +96,7 @@ public RealtimeAppenderatorTuningConfig(\n       @JsonProperty(\"maxSavedParseExceptions\") @Nullable Integer maxSavedParseExceptions\n   )\n   {\n+    this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     this.maxRowsInMemory = maxRowsInMemory == null ? DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n     // initializing this to 0, it will be lazily intialized to a value\n     // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb671417c04b1c540d8814be72e50eb40d3438fc", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java\nindex 56c71fdb07..b4cdd22478 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/index/RealtimeAppenderatorTuningConfig.java\n\n@@ -98,8 +98,8 @@ public class RealtimeAppenderatorTuningConfig implements TuningConfig, Appendera\n   {\n     this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     this.maxRowsInMemory = maxRowsInMemory == null ? DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n-    // initializing this to 0, it will be lazily intialized to a value\n-    // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+    /** initializing this to 0, it will be lazily intialized to a value\n+     * @see #getMaxBytesInMemoryOrDefault() */\n     this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n     this.partitionsSpec = new DynamicPartitionsSpec(maxRowsPerSegment, maxTotalRows);\n     this.intermediatePersistPeriod = intermediatePersistPeriod == null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjE3OA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501146178", "bodyText": "Comment needs to be modified.", "author": "a2l007", "createdAt": "2020-10-07T16:24:16Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java", "diffHunk": "@@ -1262,6 +1267,7 @@ private IndexTuningConfig(\n         @Nullable Integer maxSavedParseExceptions\n     )\n     {\n+      this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n       this.maxRowsInMemory = maxRowsInMemory == null ? TuningConfig.DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n       // initializing this to 0, it will be lazily initialized to a value\n       // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNzYyNw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501517627", "bodyText": "Fixed", "author": "liran-funaro", "createdAt": "2020-10-08T07:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "fb671417c04b1c540d8814be72e50eb40d3438fc", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\nindex 39bb537d4b..bfb0da3a04 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\n\n@@ -1269,8 +1269,8 @@ public class IndexTask extends AbstractBatchIndexTask implements ChatHandler\n     {\n       this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n       this.maxRowsInMemory = maxRowsInMemory == null ? TuningConfig.DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n-      // initializing this to 0, it will be lazily initialized to a value\n-      // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+      /** initializing this to 0, it will be lazily intialized to a value\n+       * @see #getMaxBytesInMemoryOrDefault() */\n       this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n       this.partitionsSpec = partitionsSpec;\n       this.indexSpec = indexSpec == null ? DEFAULT_INDEX_SPEC : indexSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjYxMA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501146610", "bodyText": "nit: typo for incremental", "author": "a2l007", "createdAt": "2020-10-07T16:24:52Z", "path": "server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java", "diffHunk": "@@ -32,11 +35,43 @@\n public interface TuningConfig\n {\n   boolean DEFAULT_LOG_PARSE_EXCEPTIONS = false;\n+  AppendableIndexSpec DEFAULT_APPENDABLE_INDEX = new OnheapIncrementalIndex.Spec();\n   int DEFAULT_MAX_PARSE_EXCEPTIONS = Integer.MAX_VALUE;\n   int DEFAULT_MAX_SAVED_PARSE_EXCEPTIONS = 0;\n   int DEFAULT_MAX_ROWS_IN_MEMORY = 1_000_000;\n-  // We initially estimated this to be 1/3(max jvm memory), but bytesCurrentlyInMemory only\n-  // tracks active index and not the index being flushed to disk, to account for that\n-  // we halved default to 1/6(max jvm memory)\n-  long DEFAULT_MAX_BYTES_IN_MEMORY = JvmUtils.getRuntimeInfo().getMaxHeapSizeBytes() / 6;\n+\n+  /**\n+   * The inceremental index implementation to use", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxMzI2Mg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501213262", "bodyText": "Nice catch", "author": "liran-funaro", "createdAt": "2020-10-07T18:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNzUzNQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501517535", "bodyText": "Fixed", "author": "liran-funaro", "createdAt": "2020-10-08T07:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "56ed0b595ac7318204c3355b216474f553fbf1d3", "chunk": "diff --git a/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java b/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java\nindex 24423c48d7..e659c3973e 100644\n--- a/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java\n+++ b/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java\n\n@@ -41,7 +41,7 @@ public interface TuningConfig\n   int DEFAULT_MAX_ROWS_IN_MEMORY = 1_000_000;\n \n   /**\n-   * The inceremental index implementation to use\n+   * The incremental index implementation to use\n    */\n   AppendableIndexSpec getAppendableIndexSpec();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzM3OQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501163379", "bodyText": "Why we do we need to move these out of AppenderatorConfig?", "author": "a2l007", "createdAt": "2020-10-07T16:50:27Z", "path": "server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java", "diffHunk": "@@ -32,11 +35,43 @@\n public interface TuningConfig\n {\n   boolean DEFAULT_LOG_PARSE_EXCEPTIONS = false;\n+  AppendableIndexSpec DEFAULT_APPENDABLE_INDEX = new OnheapIncrementalIndex.Spec();\n   int DEFAULT_MAX_PARSE_EXCEPTIONS = Integer.MAX_VALUE;\n   int DEFAULT_MAX_SAVED_PARSE_EXCEPTIONS = 0;\n   int DEFAULT_MAX_ROWS_IN_MEMORY = 1_000_000;\n-  // We initially estimated this to be 1/3(max jvm memory), but bytesCurrentlyInMemory only\n-  // tracks active index and not the index being flushed to disk, to account for that\n-  // we halved default to 1/6(max jvm memory)\n-  long DEFAULT_MAX_BYTES_IN_MEMORY = JvmUtils.getRuntimeInfo().getMaxHeapSizeBytes() / 6;\n+\n+  /**\n+   * The inceremental index implementation to use\n+   */\n+  AppendableIndexSpec getAppendableIndexSpec();\n+\n+  /**\n+   * Maximum number of bytes (estimated) to store in memory before persisting to local storage\n+   */\n+  long getMaxBytesInMemory();\n+\n+  /**\n+   * Maximum number of bytes (estimated) to store in memory before persisting to local storage.\n+   * If getMaxBytesInMemory() returns 0, the appendable index default will be used.\n+   */\n+  default long getMaxBytesInMemoryOrDefault()\n+  {\n+    // In the main tuningConfig class constructor, we set the maxBytes to 0 if null to avoid setting\n+    // maxBytes to max jvm memory of the process that starts first. Instead we set the default based on\n+    // the actual task node's jvm memory.\n+    final long maxBytesInMemory = getMaxBytesInMemory();\n+    if (maxBytesInMemory > 0) {\n+      return maxBytesInMemory;\n+    } else if (maxBytesInMemory == 0) {\n+      return getAppendableIndexSpec().getDefaultMaxBytesInMemory();\n+    } else {\n+      return Long.MAX_VALUE;\n+    }\n+  }\n+\n+  PartitionsSpec getPartitionsSpec();\n+\n+  IndexSpec getIndexSpec();\n+\n+  IndexSpec getIndexSpecForIntermediatePersists();", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxNjA5MA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501216090", "bodyText": "We don't have to. I was wondering why they are in AppenderatorConfig in the first place.\nThe only reasoning for why AppenderatorConfig exists is because HadoopTuningConfig doesn't share all of the TuningConfig API with the rest of the \"appenderators\".\nSo I think it is best that as much of the common API as possible will be in TuningConfig.\nAnd these methods are indeed in common.", "author": "liran-funaro", "createdAt": "2020-10-07T18:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MjM2Ng==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501782366", "bodyText": "I was wondering why they are in AppenderatorConfig in the first place.\n\nI'm not sure. Maybe @jihoonson can help answer this.\n\nSo I think it is best that as much of the common API as possible will be in TuningConfig.\nAnd these methods are indeed in common.\n\nWe should look at incrementally refactoring HadoopTuningConfig.getRowFlushBoundary into getMaxRowsInMemory so that it could be moved into TuningConfig as well.", "author": "a2l007", "createdAt": "2020-10-08T14:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMjk5Mw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501822993", "bodyText": "We should look at incrementally refactoring HadoopTuningConfig.getRowFlushBoundary into getMaxRowsInMemory so that it could be moved into TuningConfig as well.\n\nI opened (earlier) #10478 for that. It is short.\nIf you prefer, I can apply your comments from this PR to #10478 and merge it before this one.\nIt address both HadoopTuningConfig.getRowFlushBoundary and the TuningConfig interface refactoring.\nEDIT: I already applied your comments there.", "author": "liran-funaro", "createdAt": "2020-10-08T15:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0Njg2Mg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r505546862", "bodyText": "Hi @jihoonson. Can you chime in to resolve this issue?", "author": "liran-funaro", "createdAt": "2020-10-15T13:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0MDc1NQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r505740755", "bodyText": "Oops, sorry. I missed the previous ping.\n\nI was wondering why they are in AppenderatorConfig in the first place.\n\nindexSpecForIntermediatePersists was added in #7919. I'm not aware of the exact reason, but it seems not bad to have it only in AppenderatorConfig because that parameter is coupled with how Appenderator spills intermediate segments. Hadoop task is sort of special. I think it was implemented before we added Appenderator (or at least before AppenderatorDriver), and we could implement Appenderator in a more structured way based on the lessons we learned from Hadoop task. So, it works similar to other tasks using Appenderator, but is not exactly same.\nRegarding the interface change, even though we currently have only the tasks which have the similar spilling mechanism, but it might not be true in the future. So, I would say it would be better to not modify the interface unless you have to.", "author": "jihoonson", "createdAt": "2020-10-15T18:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1MjI4MA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r505752280", "bodyText": "Thanks, @jihoonson. I will revert this API change.", "author": "liran-funaro", "createdAt": "2020-10-15T18:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "56ed0b595ac7318204c3355b216474f553fbf1d3", "chunk": "diff --git a/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java b/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java\nindex 24423c48d7..e659c3973e 100644\n--- a/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java\n+++ b/server/src/main/java/org/apache/druid/segment/indexing/TuningConfig.java\n\n@@ -41,7 +41,7 @@ public interface TuningConfig\n   int DEFAULT_MAX_ROWS_IN_MEMORY = 1_000_000;\n \n   /**\n-   * The inceremental index implementation to use\n+   * The incremental index implementation to use\n    */\n   AppendableIndexSpec getAppendableIndexSpec();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3MDEwMg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501170102", "bodyText": "Isn't validate() already checking this?", "author": "a2l007", "createdAt": "2020-10-07T17:00:45Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java", "diffHunk": "@@ -346,4 +349,99 @@ public void close()\n     }\n     aggBuffers.clear();\n   }\n+\n+  public static class Builder extends AppendableIndexBuilder\n+  {\n+    @Nullable\n+    NonBlockingPool<ByteBuffer> bufferPool = null;\n+\n+    public Builder setBufferPool(final NonBlockingPool<ByteBuffer> bufferPool)\n+    {\n+      this.bufferPool = bufferPool;\n+      return this;\n+    }\n+\n+    @Override\n+    public void validate()\n+    {\n+      super.validate();\n+      if (bufferPool == null) {\n+        throw new IllegalArgumentException(\"bufferPool cannot be null\");\n+      }\n+    }\n+\n+    @Override\n+    protected OffheapIncrementalIndex buildInner()\n+    {\n+      return new OffheapIncrementalIndex(\n+          Objects.requireNonNull(incrementalIndexSchema, \"incrementalIndexSchema is null\"),\n+          deserializeComplexMetrics,\n+          concurrentEventAdd,\n+          sortFacts,\n+          maxRowCount,\n+          Objects.requireNonNull(bufferPool, \"bufferPool is null\")", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIxODMwMQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501218301", "bodyText": "It does, but without this, Intellij warns about \"Argument might be null\".", "author": "liran-funaro", "createdAt": "2020-10-07T18:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3MDEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "948af29a050b2ef21410ba13bfc39d175d46242a", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java b/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\nindex 406005f846..b3cdabcd5e 100644\n--- a/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\n+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\n\n@@ -383,65 +379,4 @@ public class OffheapIncrementalIndex extends IncrementalIndex<BufferAggregator>\n       );\n     }\n   }\n-\n-  public static class Spec implements AppendableIndexSpec, Supplier<ByteBuffer>\n-  {\n-    public static final String TYPE = \"offheap\";\n-    static final int DEFAULT_BUFFER_SIZE = 1 << 23;\n-    static final int DEFAULT_CACHE_SIZE = 1 << 30;\n-\n-    final int bufferSize;\n-    final int cacheSize;\n-    final NonBlockingPool<ByteBuffer> bufferPool;\n-\n-    @JsonCreator\n-    public Spec(\n-        final @JsonProperty(\"bufferSize\") @Nullable Integer bufferSize,\n-        final @JsonProperty(\"cacheSize\") @Nullable Integer cacheSize\n-    )\n-    {\n-      this.bufferSize = bufferSize != null && bufferSize > 0 ? bufferSize : DEFAULT_BUFFER_SIZE;\n-      this.cacheSize = cacheSize != null && cacheSize > this.bufferSize ? cacheSize : DEFAULT_CACHE_SIZE;\n-      this.bufferPool = new StupidPool<>(\n-          \"Offheap incremental-index buffer pool\",\n-          this,\n-          0,\n-          this.cacheSize / this.bufferSize\n-      );\n-    }\n-\n-    @JsonProperty\n-    public int getBufferSize()\n-    {\n-      return bufferSize;\n-    }\n-\n-    @JsonProperty\n-    public int getCacheSize()\n-    {\n-      return cacheSize;\n-    }\n-\n-    @Override\n-    public ByteBuffer get()\n-    {\n-      return ByteBuffer.allocateDirect(bufferSize);\n-    }\n-\n-    @Override\n-    public AppendableIndexBuilder builder()\n-    {\n-      return new Builder().setBufferPool(bufferPool);\n-    }\n-\n-    @Override\n-    public long getDefaultMaxBytesInMemory()\n-    {\n-      // In the realtime node, the entire JVM's direct memory is utilized for ingestion and persist operations.\n-      // But maxBytesInMemory only refers to the active index size and not to the index being flushed to disk and the\n-      // persist buffer.\n-      // To account for that, we set default to 1/2 of the max jvm's direct memory.\n-      return JvmUtils.getRuntimeInfo().getDirectMemorySizeBytes() / 2;\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4MjQxOQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501182419", "bodyText": "The changes in this class apart from conforming to the AppendableIndexSpec interface might be out of scope of this PR and it might require its own additional tests. Would it be make sense to propose these changes in an incremental PR once the AppendableIndexSpec changes are merged?", "author": "a2l007", "createdAt": "2020-10-07T17:21:01Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java", "diffHunk": "@@ -346,4 +349,99 @@ public void close()\n     }\n     aggBuffers.clear();\n   }\n+\n+  public static class Builder extends AppendableIndexBuilder\n+  {\n+    @Nullable\n+    NonBlockingPool<ByteBuffer> bufferPool = null;\n+\n+    public Builder setBufferPool(final NonBlockingPool<ByteBuffer> bufferPool)\n+    {\n+      this.bufferPool = bufferPool;\n+      return this;\n+    }\n+\n+    @Override\n+    public void validate()\n+    {\n+      super.validate();\n+      if (bufferPool == null) {\n+        throw new IllegalArgumentException(\"bufferPool cannot be null\");\n+      }\n+    }\n+\n+    @Override\n+    protected OffheapIncrementalIndex buildInner()\n+    {\n+      return new OffheapIncrementalIndex(\n+          Objects.requireNonNull(incrementalIndexSchema, \"incrementalIndexSchema is null\"),\n+          deserializeComplexMetrics,\n+          concurrentEventAdd,\n+          sortFacts,\n+          maxRowCount,\n+          Objects.requireNonNull(bufferPool, \"bufferPool is null\")\n+      );\n+    }\n+  }\n+\n+  public static class Spec implements AppendableIndexSpec, Supplier<ByteBuffer>\n+  {\n+    public static final String TYPE = \"offheap\";\n+    static final int DEFAULT_BUFFER_SIZE = 1 << 23;\n+    static final int DEFAULT_CACHE_SIZE = 1 << 30;\n+\n+    final int bufferSize;\n+    final int cacheSize;\n+    final NonBlockingPool<ByteBuffer> bufferPool;\n+\n+    @JsonCreator\n+    public Spec(\n+        final @JsonProperty(\"bufferSize\") @Nullable Integer bufferSize,\n+        final @JsonProperty(\"cacheSize\") @Nullable Integer cacheSize\n+    )\n+    {\n+      this.bufferSize = bufferSize != null && bufferSize > 0 ? bufferSize : DEFAULT_BUFFER_SIZE;\n+      this.cacheSize = cacheSize != null && cacheSize > this.bufferSize ? cacheSize : DEFAULT_CACHE_SIZE;\n+      this.bufferPool = new StupidPool<>(\n+          \"Offheap incremental-index buffer pool\",\n+          this,\n+          0,\n+          this.cacheSize / this.bufferSize", "originalCommit": "452b196493dda7dd7c558bc67fa8db56e4b33395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMTAwMQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501221001", "bodyText": "Yes. That is possible. I will separate this part into a PR that will follow this one.", "author": "liran-funaro", "createdAt": "2020-10-07T18:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4MjQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNzI5Mw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r501517293", "bodyText": "Removed", "author": "liran-funaro", "createdAt": "2020-10-08T07:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4MjQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "948af29a050b2ef21410ba13bfc39d175d46242a", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java b/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\nindex 406005f846..b3cdabcd5e 100644\n--- a/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\n+++ b/processing/src/main/java/org/apache/druid/segment/incremental/OffheapIncrementalIndex.java\n\n@@ -383,65 +379,4 @@ public class OffheapIncrementalIndex extends IncrementalIndex<BufferAggregator>\n       );\n     }\n   }\n-\n-  public static class Spec implements AppendableIndexSpec, Supplier<ByteBuffer>\n-  {\n-    public static final String TYPE = \"offheap\";\n-    static final int DEFAULT_BUFFER_SIZE = 1 << 23;\n-    static final int DEFAULT_CACHE_SIZE = 1 << 30;\n-\n-    final int bufferSize;\n-    final int cacheSize;\n-    final NonBlockingPool<ByteBuffer> bufferPool;\n-\n-    @JsonCreator\n-    public Spec(\n-        final @JsonProperty(\"bufferSize\") @Nullable Integer bufferSize,\n-        final @JsonProperty(\"cacheSize\") @Nullable Integer cacheSize\n-    )\n-    {\n-      this.bufferSize = bufferSize != null && bufferSize > 0 ? bufferSize : DEFAULT_BUFFER_SIZE;\n-      this.cacheSize = cacheSize != null && cacheSize > this.bufferSize ? cacheSize : DEFAULT_CACHE_SIZE;\n-      this.bufferPool = new StupidPool<>(\n-          \"Offheap incremental-index buffer pool\",\n-          this,\n-          0,\n-          this.cacheSize / this.bufferSize\n-      );\n-    }\n-\n-    @JsonProperty\n-    public int getBufferSize()\n-    {\n-      return bufferSize;\n-    }\n-\n-    @JsonProperty\n-    public int getCacheSize()\n-    {\n-      return cacheSize;\n-    }\n-\n-    @Override\n-    public ByteBuffer get()\n-    {\n-      return ByteBuffer.allocateDirect(bufferSize);\n-    }\n-\n-    @Override\n-    public AppendableIndexBuilder builder()\n-    {\n-      return new Builder().setBufferPool(bufferPool);\n-    }\n-\n-    @Override\n-    public long getDefaultMaxBytesInMemory()\n-    {\n-      // In the realtime node, the entire JVM's direct memory is utilized for ingestion and persist operations.\n-      // But maxBytesInMemory only refers to the active index size and not to the index being flushed to disk and the\n-      // persist buffer.\n-      // To account for that, we set default to 1/2 of the max jvm's direct memory.\n-      return JvmUtils.getRuntimeInfo().getDirectMemorySizeBytes() / 2;\n-    }\n-  }\n }\n"}}, {"oid": "56ed0b595ac7318204c3355b216474f553fbf1d3", "url": "https://github.com/apache/druid/commit/56ed0b595ac7318204c3355b216474f553fbf1d3", "message": "Minor fixes", "committedDate": "2020-10-07T18:31:31Z", "type": "commit"}, {"oid": "fb671417c04b1c540d8814be72e50eb40d3438fc", "url": "https://github.com/apache/druid/commit/fb671417c04b1c540d8814be72e50eb40d3438fc", "message": "Update getMaxBytesInMemoryOrDefault() comment", "committedDate": "2020-10-07T18:34:00Z", "type": "commit"}, {"oid": "704a3317bf19e371f62c071f387fc4d325710d2e", "url": "https://github.com/apache/druid/commit/704a3317bf19e371f62c071f387fc4d325710d2e", "message": "Fix typo, remove redundant interface", "committedDate": "2020-10-08T07:39:02Z", "type": "commit"}, {"oid": "948af29a050b2ef21410ba13bfc39d175d46242a", "url": "https://github.com/apache/druid/commit/948af29a050b2ef21410ba13bfc39d175d46242a", "message": "Remove off-heap spec (postponed to a later PR)", "committedDate": "2020-10-08T07:51:35Z", "type": "commit"}, {"oid": "6e9542ec97abfe528269c315f3ad27725ef79bec", "url": "https://github.com/apache/druid/commit/6e9542ec97abfe528269c315f3ad27725ef79bec", "message": "Add javadocs to AppendableIndexSpec", "committedDate": "2020-10-08T08:02:18Z", "type": "commit"}, {"oid": "2a869d1711e51bee2e4b83296edf427aff7de01f", "url": "https://github.com/apache/druid/commit/2a869d1711e51bee2e4b83296edf427aff7de01f", "message": "Describe testCreateTask()", "committedDate": "2020-10-08T08:13:01Z", "type": "commit"}, {"oid": "98788ec97fc49bf2ee8ab97a9348b6a2f9b2684c", "url": "https://github.com/apache/druid/commit/98788ec97fc49bf2ee8ab97a9348b6a2f9b2684c", "message": "Add tests for AppendableIndexSpec within TuningConfig", "committedDate": "2020-10-08T09:59:31Z", "type": "commit"}, {"oid": "9762a81e9f78e94c9a6fc7ec586f7f7b12a5226c", "url": "https://github.com/apache/druid/commit/9762a81e9f78e94c9a6fc7ec586f7f7b12a5226c", "message": "Modify hashCode() to conform with equals()", "committedDate": "2020-10-08T11:20:18Z", "type": "commit"}, {"oid": "829b86f9548952795c4f3808679adfacb3f5b97a", "url": "https://github.com/apache/druid/commit/829b86f9548952795c4f3808679adfacb3f5b97a", "message": "Add comment where building incremental-index", "committedDate": "2020-10-08T16:01:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5MTY5NA==", "url": "https://github.com/apache/druid/pull/10335#discussion_r505591694", "bodyText": "Could you please write an EqualsVerifier test for this. That should take care of the travis failures.", "author": "a2l007", "createdAt": "2020-10-15T14:31:58Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskTuningConfig.java", "diffHunk": "@@ -281,7 +292,8 @@ public boolean equals(Object o)\n       return false;\n     }\n     SeekableStreamIndexTaskTuningConfig that = (SeekableStreamIndexTaskTuningConfig) o;\n-    return maxRowsInMemory == that.maxRowsInMemory &&\n+    return Objects.equals(appendableIndexSpec, that.appendableIndexSpec) &&\n+           maxRowsInMemory == that.maxRowsInMemory &&", "originalCommit": "829b86f9548952795c4f3808679adfacb3f5b97a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5NzI4Nw==", "url": "https://github.com/apache/druid/pull/10335#discussion_r505697287", "bodyText": "@a2l007 Thanks for the tip. I wasn't aware of EqualsVerifier.\nI added it and now it passes the tests but fails some integration tests that passed before.\nI suspect there is an issue with the integration tests because sometimes the master branch also fails in these.", "author": "liran-funaro", "createdAt": "2020-10-15T16:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5MTY5NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "afac4d882e6c0d3159163ff62e0333f01b491a52", "url": "https://github.com/apache/druid/commit/afac4d882e6c0d3159163ff62e0333f01b491a52", "message": "Add \"EqualsVerifier\" tests", "committedDate": "2020-10-15T15:05:51Z", "type": "commit"}, {"oid": "5c8c18f69ca287db043ceee8aed04309c1cdf6ce", "url": "https://github.com/apache/druid/commit/5c8c18f69ca287db043ceee8aed04309c1cdf6ce", "message": "Revert some of the API back to AppenderatorConfig", "committedDate": "2020-10-15T20:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTE2MQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r508821161", "bodyText": "nit: we don't use multi-line comments.", "author": "jihoonson", "createdAt": "2020-10-20T20:33:41Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java", "diffHunk": "@@ -1262,9 +1267,10 @@ private IndexTuningConfig(\n         @Nullable Integer maxSavedParseExceptions\n     )\n     {\n+      this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n       this.maxRowsInMemory = maxRowsInMemory == null ? TuningConfig.DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n-      // initializing this to 0, it will be lazily initialized to a value\n-      // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+      /** initializing this to 0, it will be lazily initialized to a value\n+       * @see #getMaxBytesInMemoryOrDefault() */", "originalCommit": "5c8c18f69ca287db043ceee8aed04309c1cdf6ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4Nzg5Mg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r509187892", "bodyText": "Fixed.", "author": "liran-funaro", "createdAt": "2020-10-21T11:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b04ae43b8bb83af05a54d72cfe39ef788f8e3d61", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\nindex 78be6537ca..f351a5db6c 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java\n\n@@ -1269,8 +1269,8 @@ public class IndexTask extends AbstractBatchIndexTask implements ChatHandler\n     {\n       this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n       this.maxRowsInMemory = maxRowsInMemory == null ? TuningConfig.DEFAULT_MAX_ROWS_IN_MEMORY : maxRowsInMemory;\n-      /** initializing this to 0, it will be lazily initialized to a value\n-       * @see #getMaxBytesInMemoryOrDefault() */\n+      // initializing this to 0, it will be lazily initialized to a value\n+      // @see #getMaxBytesInMemoryOrDefault()\n       this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n       this.partitionsSpec = partitionsSpec;\n       this.indexSpec = indexSpec == null ? DEFAULT_INDEX_SPEC : indexSpec;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTQzMg==", "url": "https://github.com/apache/druid/pull/10335#discussion_r508821432", "bodyText": "Same here.", "author": "jihoonson", "createdAt": "2020-10-20T20:34:12Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskTuningConfig.java", "diffHunk": "@@ -84,10 +87,11 @@ public SeekableStreamIndexTaskTuningConfig(\n     // Cannot be a static because default basePersistDirectory is unique per-instance\n     final RealtimeTuningConfig defaults = RealtimeTuningConfig.makeDefaultTuningConfig(basePersistDirectory);\n \n+    this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     this.maxRowsInMemory = maxRowsInMemory == null ? defaults.getMaxRowsInMemory() : maxRowsInMemory;\n     this.partitionsSpec = new DynamicPartitionsSpec(maxRowsPerSegment, maxTotalRows);\n-    // initializing this to 0, it will be lazily initialized to a value\n-    // @see server.src.main.java.org.apache.druid.segment.indexing.TuningConfigs#getMaxBytesInMemoryOrDefault(long)\n+    /** initializing this to 0, it will be lazily initialized to a value\n+     * @see #getMaxBytesInMemoryOrDefault() */", "originalCommit": "5c8c18f69ca287db043ceee8aed04309c1cdf6ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4Nzk0NQ==", "url": "https://github.com/apache/druid/pull/10335#discussion_r509187945", "bodyText": "Fixed.", "author": "liran-funaro", "createdAt": "2020-10-21T11:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "b04ae43b8bb83af05a54d72cfe39ef788f8e3d61", "chunk": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskTuningConfig.java b/indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskTuningConfig.java\nindex 9d8cf7df21..b56d8e5f2e 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskTuningConfig.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskTuningConfig.java\n\n@@ -90,8 +90,8 @@ public abstract class SeekableStreamIndexTaskTuningConfig implements Appenderato\n     this.appendableIndexSpec = appendableIndexSpec == null ? DEFAULT_APPENDABLE_INDEX : appendableIndexSpec;\n     this.maxRowsInMemory = maxRowsInMemory == null ? defaults.getMaxRowsInMemory() : maxRowsInMemory;\n     this.partitionsSpec = new DynamicPartitionsSpec(maxRowsPerSegment, maxTotalRows);\n-    /** initializing this to 0, it will be lazily initialized to a value\n-     * @see #getMaxBytesInMemoryOrDefault() */\n+    // initializing this to 0, it will be lazily initialized to a value\n+    // @see #getMaxBytesInMemoryOrDefault()\n     this.maxBytesInMemory = maxBytesInMemory == null ? 0 : maxBytesInMemory;\n     this.intermediatePersistPeriod = intermediatePersistPeriod == null\n                                      ? defaults.getIntermediatePersistPeriod()\n"}}, {"oid": "b04ae43b8bb83af05a54d72cfe39ef788f8e3d61", "url": "https://github.com/apache/druid/commit/b04ae43b8bb83af05a54d72cfe39ef788f8e3d61", "message": "Don't use multi-line comments", "committedDate": "2020-10-21T11:05:18Z", "type": "commit"}, {"oid": "7de9b493601541b8f1a2e76ddb5bdeb6d7cfb0e8", "url": "https://github.com/apache/druid/commit/7de9b493601541b8f1a2e76ddb5bdeb6d7cfb0e8", "message": "Remove knob documentation (deferred)", "committedDate": "2020-10-21T11:11:05Z", "type": "commit"}]}