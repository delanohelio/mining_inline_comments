{"pr_number": 9181, "pr_title": "Speed up String first/last aggregators when folding isn't needed.", "pr_createdAt": "2020-01-14T03:50:55Z", "pr_url": "https://github.com/apache/druid/pull/9181", "timeline": [{"oid": "ecc43107320489ea1267aed7b2dbd30f440104f9", "url": "https://github.com/apache/druid/commit/ecc43107320489ea1267aed7b2dbd30f440104f9", "message": "Speed up String first/last aggregators when folding isn't needed.\n\nExamines the value column, and disables fold checking via a needsFoldCheck\nflag if that column can't possibly contain SerializableLongStringPairs. This\nis helpful because it avoids calling getObject on the value selector when\nunnecessary; say, because the time selector didn't yield an earlier or later\nvalue.", "committedDate": "2020-01-14T03:50:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgxNDM2MQ==", "url": "https://github.com/apache/druid/pull/9181#discussion_r366814361", "bodyText": "Hmm, it looks to me like this method only returns true if a selector definitely is a SerializablePairLongString . Should this just be returning true if we made it here?\nAlternatively, should needsFoldCheck be rebranded as isFold and the aggregate methods of the first last heap and buffer aggs just be reading a SerializablePairLongString from the value selector directly instead of calling readPairFromSelectors?", "author": "clintropolis", "createdAt": "2020-01-15T10:58:05Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java", "diffHunk": "@@ -33,23 +36,63 @@\n {\n   private static final int NULL_VALUE = -1;\n \n+  /**\n+   * Shorten \"s\" to \"maxBytes\" chars. Fast and loose because these are *chars* not *bytes*. Use\n+   * {@link #chop(String, int)} for slower, but accurate chopping.\n+   */\n+  @Nullable\n+  public static String fastLooseChop(@Nullable final String s, final int maxBytes)\n+  {\n+    if (s == null || s.length() <= maxBytes) {\n+      return s;\n+    } else {\n+      return s.substring(0, maxBytes);\n+    }\n+  }\n+\n+  /**\n+   * Shorten \"s\" to what could fit in \"maxBytes\" bytes as UTF-8.\n+   */\n   @Nullable\n   public static String chop(@Nullable final String s, final int maxBytes)\n   {\n     if (s == null) {\n       return null;\n     } else {\n-      // Shorten firstValue to what could fit in maxBytes as UTF-8.\n       final byte[] bytes = new byte[maxBytes];\n       final int len = StringUtils.toUtf8WithLimit(s, ByteBuffer.wrap(bytes));\n       return new String(bytes, 0, len, StandardCharsets.UTF_8);\n     }\n   }\n \n+  /**\n+   * Returns whether a given value selector *might* contain SerializablePairLongString objects.\n+   */\n+  public static boolean selectorNeedsFoldCheck(\n+      final BaseObjectColumnValueSelector<?> valueSelector,\n+      @Nullable final ColumnCapabilities valueSelectorCapabilities\n+  )\n+  {\n+    if (valueSelectorCapabilities != null && valueSelectorCapabilities.getType() != ValueType.COMPLEX) {\n+      // Known, non-complex type.\n+      return false;\n+    }\n+\n+    if (valueSelector instanceof NilColumnValueSelector) {\n+      // Nil column, definitely no SerializablePairLongStrings.\n+      return false;\n+    }\n+\n+    // Check if the reported class could possibly be SerializablePairLongString.\n+    final Class<?> clazz = valueSelector.classOfObject();\n+    return clazz.isAssignableFrom(SerializablePairLongString.class)", "originalCommit": "ecc43107320489ea1267aed7b2dbd30f440104f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDU2OA==", "url": "https://github.com/apache/druid/pull/9181#discussion_r367234568", "bodyText": "Apologies, I was wrong, I think this line + comment just isn't super intuitive on first glance that it is a catch-all that any \u2018unknown\u2019 selector types will also be true (since clazz will be Object.class in that case). Maybe expanding on the comment would make it require less thought?", "author": "clintropolis", "createdAt": "2020-01-16T05:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgxNDM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NjQzNA==", "url": "https://github.com/apache/druid/pull/9181#discussion_r367656434", "bodyText": "I changed it to:\n    // Check if the selector class could possibly be a SerializablePairLongString (either a superclass or subclass).", "author": "gianm", "createdAt": "2020-01-16T21:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgxNDM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "92f2218cf771c70b1173264e96621850bead8ea8", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java b/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java\nindex 96a86ed7c0..fbab8d304b 100644\n--- a/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java\n+++ b/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java\n\n@@ -83,7 +83,7 @@ public class StringFirstLastUtils\n       return false;\n     }\n \n-    // Check if the reported class could possibly be SerializablePairLongString.\n+    // Check if the selector class could possibly be a SerializablePairLongString (either a superclass or subclass).\n     final Class<?> clazz = valueSelector.classOfObject();\n     return clazz.isAssignableFrom(SerializablePairLongString.class)\n            || SerializablePairLongString.class.isAssignableFrom(clazz);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNTM3NA==", "url": "https://github.com/apache/druid/pull/9181#discussion_r366825374", "bodyText": "nit: typo 'expectec'", "author": "clintropolis", "createdAt": "2020-01-15T11:25:16Z", "path": "processing/src/test/java/org/apache/druid/query/aggregation/last/StringLastBufferAggregatorTest.java", "diffHunk": "@@ -81,6 +82,43 @@ public void testBufferAggregate()\n \n   }\n \n+  @Test\n+  public void testBufferAggregateWithFoldCheck()\n+  {\n+    final long[] timestamps = {1526724600L, 1526724700L, 1526724800L, 1526725900L, 1526725000L};\n+    final String[] strings = {\"AAAA\", \"BBBB\", \"CCCC\", \"DDDD\", \"EEEE\"};\n+    Integer maxStringBytes = 1024;\n+\n+    TestLongColumnSelector longColumnSelector = new TestLongColumnSelector(timestamps);\n+    TestObjectColumnSelector<String> objectColumnSelector = new TestObjectColumnSelector<>(strings);\n+\n+    StringLastAggregatorFactory factory = new StringLastAggregatorFactory(\n+        \"billy\", \"billy\", maxStringBytes\n+    );\n+\n+    StringLastBufferAggregator agg = new StringLastBufferAggregator(\n+        longColumnSelector,\n+        objectColumnSelector,\n+        maxStringBytes,\n+        true\n+    );\n+\n+    ByteBuffer buf = ByteBuffer.allocate(factory.getMaxIntermediateSize());\n+    int position = 0;\n+\n+    agg.init(buf, position);\n+    //noinspection ForLoopReplaceableByForEach\n+    for (int i = 0; i < timestamps.length; i++) {\n+      aggregateBuffer(longColumnSelector, objectColumnSelector, agg, buf, position);\n+    }\n+\n+    SerializablePairLongString sp = ((SerializablePairLongString) agg.get(buf, position));\n+\n+\n+    Assert.assertEquals(\"expectec last string value\", \"DDDD\", sp.rhs);", "originalCommit": "ecc43107320489ea1267aed7b2dbd30f440104f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NjUzMg==", "url": "https://github.com/apache/druid/pull/9181#discussion_r367656532", "bodyText": "Updated.", "author": "gianm", "createdAt": "2020-01-16T21:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyNTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "92f2218cf771c70b1173264e96621850bead8ea8", "chunk": "diff --git a/processing/src/test/java/org/apache/druid/query/aggregation/last/StringLastBufferAggregatorTest.java b/processing/src/test/java/org/apache/druid/query/aggregation/last/StringLastBufferAggregatorTest.java\nindex e9fc91553d..6c350c4cff 100644\n--- a/processing/src/test/java/org/apache/druid/query/aggregation/last/StringLastBufferAggregatorTest.java\n+++ b/processing/src/test/java/org/apache/druid/query/aggregation/last/StringLastBufferAggregatorTest.java\n\n@@ -77,7 +77,7 @@ public class StringLastBufferAggregatorTest\n     SerializablePairLongString sp = ((SerializablePairLongString) agg.get(buf, position));\n \n \n-    Assert.assertEquals(\"expectec last string value\", \"DDDD\", sp.rhs);\n+    Assert.assertEquals(\"expected last string value\", \"DDDD\", sp.rhs);\n     Assert.assertEquals(\"last string timestamp is the biggest\", new Long(1526725900L), new Long(sp.lhs));\n \n   }\n"}}, {"oid": "92f2218cf771c70b1173264e96621850bead8ea8", "url": "https://github.com/apache/druid/commit/92f2218cf771c70b1173264e96621850bead8ea8", "message": "PR comments.", "committedDate": "2020-01-16T21:22:23Z", "type": "commit"}, {"oid": "c56d895caf30f0b3171ea5cc09615e551adeeae4", "url": "https://github.com/apache/druid/commit/c56d895caf30f0b3171ea5cc09615e551adeeae4", "message": "Merge branch 'master' into speedy-earliest-latest", "committedDate": "2020-01-16T22:47:00Z", "type": "commit"}, {"oid": "f0d0075fe516cb52f8f8a84f2a891c2463ff09f9", "url": "https://github.com/apache/druid/commit/f0d0075fe516cb52f8f8a84f2a891c2463ff09f9", "message": "Move fastLooseChop to StringUtils.", "committedDate": "2020-01-17T01:43:47Z", "type": "commit"}, {"oid": "de0697cb1834f77a2fafc57e5d56673a558c5e83", "url": "https://github.com/apache/druid/commit/de0697cb1834f77a2fafc57e5d56673a558c5e83", "message": "Merge branch 'master' into speedy-earliest-latest", "committedDate": "2020-01-17T01:44:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNjE2NQ==", "url": "https://github.com/apache/druid/pull/9181#discussion_r367736165", "bodyText": "\ud83d\ude42", "author": "clintropolis", "createdAt": "2020-01-17T01:51:03Z", "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -246,4 +246,32 @@ public void testRpad()\n     Assert.assertEquals(s5, null);\n   }\n \n+  @Test\n+  public void testChop()\n+  {\n+    Assert.assertEquals(\"foo\", StringUtils.chop(\"foo\", 5));\n+    Assert.assertEquals(\"fo\", StringUtils.chop(\"foo\", 2));\n+    Assert.assertEquals(\"\", StringUtils.chop(\"foo\", 0));\n+    Assert.assertEquals(\"smile \ud83d\ude42 for\", StringUtils.chop(\"smile \ud83d\ude42 for the camera\", 14));", "originalCommit": "de0697cb1834f77a2fafc57e5d56673a558c5e83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}