{"pr_number": 10088, "pr_title": "Add integration tests for all InputFormat", "pr_createdAt": "2020-06-27T01:59:50Z", "pr_url": "https://github.com/apache/druid/pull/10088", "timeline": [{"oid": "89354f986e73d2421d955bb1ae12fca6ef279d2c", "url": "https://github.com/apache/druid/commit/89354f986e73d2421d955bb1ae12fca6ef279d2c", "message": "Add integration tests for Avro OCF InputFormat", "committedDate": "2020-06-27T01:54:29Z", "type": "commit"}, {"oid": "a0b552006f91f38952ad480ae912b2c049d2568e", "url": "https://github.com/apache/druid/commit/a0b552006f91f38952ad480ae912b2c049d2568e", "message": "Add integration tests for Avro OCF InputFormat", "committedDate": "2020-06-27T01:57:28Z", "type": "commit"}, {"oid": "2b5d4d599ad46999dc2f917c722e28c96f48f96f", "url": "https://github.com/apache/druid/commit/2b5d4d599ad46999dc2f917c722e28c96f48f96f", "message": "add tests", "committedDate": "2020-06-27T08:05:38Z", "type": "commit"}, {"oid": "aaf60b92201029c31b229a385225069ff293eef9", "url": "https://github.com/apache/druid/commit/aaf60b92201029c31b229a385225069ff293eef9", "message": "fix bug", "committedDate": "2020-06-27T09:16:45Z", "type": "commit"}, {"oid": "4b5d37790bc0859c926c97ee1f5b9c1e08335a61", "url": "https://github.com/apache/druid/commit/4b5d37790bc0859c926c97ee1f5b9c1e08335a61", "message": "fix bug", "committedDate": "2020-06-27T09:19:52Z", "type": "commit"}, {"oid": "61ff5f2cfbfd13f625eab7c1a703eddaa4a09851", "url": "https://github.com/apache/druid/commit/61ff5f2cfbfd13f625eab7c1a703eddaa4a09851", "message": "fix failing tests", "committedDate": "2020-06-27T09:50:59Z", "type": "commit"}, {"oid": "cb12d6c5ec50d487865716757183ad05b71020a9", "url": "https://github.com/apache/druid/commit/cb12d6c5ec50d487865716757183ad05b71020a9", "message": "add comments", "committedDate": "2020-06-27T09:59:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDYxMQ==", "url": "https://github.com/apache/druid/pull/10088#discussion_r446524611", "bodyText": "Are these named around the wrong way? This one seems to be without whilst the one above seems to be supplying a schema.", "author": "josephglanville", "createdAt": "2020-06-27T13:01:39Z", "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.BATCH_INDEX)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception", "originalCommit": "cb12d6c5ec50d487865716757183ad05b71020a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2Njk4OQ==", "url": "https://github.com/apache/druid/pull/10088#discussion_r446566989", "bodyText": "Yea, you are right. Fixed.", "author": "maytasm", "createdAt": "2020-06-27T21:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868", "chunk": "diff --git a/integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java b/integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java\nindex 9cb8d09c10..f510fe1bd8 100644\n--- a/integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java\n+++ b/integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java\n\n@@ -30,12 +30,12 @@ import org.testng.annotations.Test;\n import java.util.List;\n import java.util.Map;\n \n-@Test(groups = TestNGGroup.BATCH_INDEX)\n+@Test(groups = TestNGGroup.INPUT_FORMAT)\n @Guice(moduleFactory = DruidTestModuleFactory.class)\n public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n {\n   @Test\n-  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception\n   {\n     List fieldList = ImmutableList.of(\n         ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n"}}, {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868", "url": "https://github.com/apache/druid/commit/cf2ccd1ffa9cceb63ad8862adbd71678f7958868", "message": "address comments", "committedDate": "2020-06-27T21:01:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyNzIzNg==", "url": "https://github.com/apache/druid/pull/10088#discussion_r446727236", "bodyText": "Since this method is going to look at every character of the string to check if it's a number, I wonder if it's better to just try to parse it to a double and then use it if it's not null, maybe\n...\n          final Double doubleValue;\n          if (objectString.isEmpty()) {\n            return DoublesSketchOperations.EMPTY_SKETCH;\n          } else if ((doubleValue = Doubles.tryParse(objectString)) != null) {\n            UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n            sketch.update(doubleValue);\n            return sketch;\n          }\n...", "author": "clintropolis", "createdAt": "2020-06-29T01:24:46Z", "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java", "diffHunk": "@@ -77,7 +78,7 @@ public Object extractValue(final InputRow inputRow, final String metricName)\n           // This corresponds to \"A\" in base64, so it is not a digit\n           if (objectString.isEmpty()) {\n             return DoublesSketchOperations.EMPTY_SKETCH;\n-          } else if (Character.isDigit(objectString.charAt(0))) {\n+          } else if (NumberUtils.isParsable(objectString)) {", "originalCommit": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwNzcxMA==", "url": "https://github.com/apache/druid/pull/10088#discussion_r447207710", "bodyText": "Sounds good to me.", "author": "maytasm", "createdAt": "2020-06-29T19:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyNzIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c1a80b03a6c19e64b0465c2179aceb3157abbceb", "chunk": "diff --git a/extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java b/extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java\nindex f669d4c7ff..d97b5f8c6d 100644\n--- a/extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java\n+++ b/extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java\n\n@@ -76,18 +75,13 @@ public class DoublesSketchComplexMetricSerde extends ComplexMetricSerde\n           // Autodetection of the input format: empty string, number, or base64 encoded sketch\n           // A serialized DoublesSketch, as currently implemented, always has 0 in the first 6 bits.\n           // This corresponds to \"A\" in base64, so it is not a digit\n+          final Double doubleValue;\n           if (objectString.isEmpty()) {\n             return DoublesSketchOperations.EMPTY_SKETCH;\n-          } else if (NumberUtils.isParsable(objectString)) {\n-            try {\n-              double doubleValue = Double.parseDouble(objectString);\n-              UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n-              sketch.update(doubleValue);\n-              return sketch;\n-            }\n-            catch (NumberFormatException e) {\n-              throw new IAE(\"Expected a string with a number, received value \" + objectString);\n-            }\n+          } else if ((doubleValue = Doubles.tryParse(objectString)) != null) {\n+            UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n+            sketch.update(doubleValue);\n+            return sketch;\n           }\n         } else if (object instanceof Number) { // this is for reindexing\n           UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczMTM3MA==", "url": "https://github.com/apache/druid/pull/10088#discussion_r446731370", "bodyText": "I wonder if these could all run in parallel in a single test?", "author": "clintropolis", "createdAt": "2020-06-29T01:46:55Z", "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.INPUT_FORMAT)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    doIndexTest(InputFormatDetails.AVRO);", "originalCommit": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwOTEzOA==", "url": "https://github.com/apache/druid/pull/10088#discussion_r447209138", "bodyText": "This should already be running in parallel (2 at a time). Let me double check.", "author": "maytasm", "createdAt": "2020-06-29T19:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczMTM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "c1a80b03a6c19e64b0465c2179aceb3157abbceb", "chunk": "diff --git a/integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java b/integration-tests/src/test/java/org/apache/druid/tests/indexer/ITLocalInputSourceAllInputFormatTest.java\nsimilarity index 98%\nrename from integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java\nrename to integration-tests/src/test/java/org/apache/druid/tests/indexer/ITLocalInputSourceAllInputFormatTest.java\nindex f510fe1bd8..6d2bcfdafc 100644\n--- a/integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java\n+++ b/integration-tests/src/test/java/org/apache/druid/tests/indexer/ITLocalInputSourceAllInputFormatTest.java\n\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.druid.tests.parallelized;\n+package org.apache.druid.tests.indexer;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n"}}, {"oid": "c1a80b03a6c19e64b0465c2179aceb3157abbceb", "url": "https://github.com/apache/druid/commit/c1a80b03a6c19e64b0465c2179aceb3157abbceb", "message": "address comments", "committedDate": "2020-06-29T21:09:08Z", "type": "commit"}, {"oid": "69e22a795df721e4f71e22e7386c3b8dff395931", "url": "https://github.com/apache/druid/commit/69e22a795df721e4f71e22e7386c3b8dff395931", "message": "address comments", "committedDate": "2020-06-29T21:14:51Z", "type": "commit"}, {"oid": "ca475d1e1ef4887a1915756cbe3859181e225029", "url": "https://github.com/apache/druid/commit/ca475d1e1ef4887a1915756cbe3859181e225029", "message": "fix test data", "committedDate": "2020-06-29T21:46:19Z", "type": "commit"}, {"oid": "a93ee2fcdecaab33122aacb5c93a36fb6fb5a091", "url": "https://github.com/apache/druid/commit/a93ee2fcdecaab33122aacb5c93a36fb6fb5a091", "message": "reduce resource needed for IT", "committedDate": "2020-06-30T19:39:41Z", "type": "commit"}, {"oid": "72b78702bb28f2fb647fe2f58ecff2a419851b6d", "url": "https://github.com/apache/druid/commit/72b78702bb28f2fb647fe2f58ecff2a419851b6d", "message": "remove bug fix", "committedDate": "2020-07-01T00:36:34Z", "type": "commit"}, {"oid": "3a1588c048e066e9a3e17c98402ded406bfecb37", "url": "https://github.com/apache/druid/commit/3a1588c048e066e9a3e17c98402ded406bfecb37", "message": "fix checkstyle", "committedDate": "2020-07-01T00:38:40Z", "type": "commit"}, {"oid": "bd0dda5a7f69af8d1d8cb05f28ad90df9fbabc73", "url": "https://github.com/apache/druid/commit/bd0dda5a7f69af8d1d8cb05f28ad90df9fbabc73", "message": "add bug fix", "committedDate": "2020-07-01T05:44:54Z", "type": "commit"}, {"oid": "a4a0b4711e67d3a76c3994a11be6137800cd0b52", "url": "https://github.com/apache/druid/commit/a4a0b4711e67d3a76c3994a11be6137800cd0b52", "message": "resolve conflict", "committedDate": "2020-07-02T05:39:25Z", "type": "commit"}]}