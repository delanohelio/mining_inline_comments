{"pr_number": 9179, "pr_title": "Run IntelliJ inspections on Travis", "pr_createdAt": "2020-01-13T22:52:28Z", "pr_url": "https://github.com/apache/druid/pull/9179", "timeline": [{"oid": "34911ffa20ffcb6d83a97947ca1f3b30420fc762", "url": "https://github.com/apache/druid/commit/34911ffa20ffcb6d83a97947ca1f3b30420fc762", "message": "Run IntelliJ inspections on Travis\n\nRunning IntelliJ inspections currently takes about 90 minutes, but they\ncan be run in about 30 minutes on Travis.", "committedDate": "2020-01-12T01:32:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjE4MQ==", "url": "https://github.com/apache/druid/pull/9179#discussion_r367282181", "bodyText": "Could you please create an issue in youtrack.jetbrains.com and link here?", "author": "leventov", "createdAt": "2020-01-16T08:19:38Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java", "diffHunk": "@@ -27,6 +27,7 @@\n {\n   int getGroupingKeySize();\n \n+  @SuppressWarnings(\"unused\")  // false positive unused inspection warning for \"keySize\"", "originalCommit": "34911ffa20ffcb6d83a97947ca1f3b30420fc762", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0ODE2Mg==", "url": "https://github.com/apache/druid/pull/9179#discussion_r368748162", "bodyText": "Added https://youtrack.jetbrains.com/issue/IDEA-231034", "author": "ccaominh", "createdAt": "2020-01-20T22:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "180cf52075b3f8a6f4f500e59eeb9d97e0c1c74e", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java b/processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java\nindex b5ccbd6221..75d4bec51e 100644\n--- a/processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java\n+++ b/processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java\n\n@@ -27,7 +27,8 @@ public interface GroupByVectorColumnSelector\n {\n   int getGroupingKeySize();\n \n-  @SuppressWarnings(\"unused\")  // false positive unused inspection warning for \"keySize\"\n+  // False positive unused inspection warning for \"keySize\": https://youtrack.jetbrains.com/issue/IDEA-231034\n+  @SuppressWarnings(\"unused\")\n   void writeKeys(int[] keySpace, int keySize, int keyOffset, int startRow, int endRow);\n \n   void writeKeyToResultRow(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjc1MA==", "url": "https://github.com/apache/druid/pull/9179#discussion_r367282750", "bodyText": "Why this change?\nThe policy regarding asserts, project-wide should be discussed in the dev mailing list, probably.", "author": "leventov", "createdAt": "2020-01-16T08:21:11Z", "path": "processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java", "diffHunk": "@@ -121,14 +122,14 @@ public boolean isNull()\n         @Override\n         public long getLong()\n         {\n-          assert NullHandling.replaceWithDefault() || !isNull();\n+          Preconditions.checkState(NullHandling.replaceWithDefault() || !isNull());", "originalCommit": "34911ffa20ffcb6d83a97947ca1f3b30420fc762", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NzEwNQ==", "url": "https://github.com/apache/druid/pull/9179#discussion_r367287105", "bodyText": "This change to column gets should definitely not be done imo, the current version with assert will not be evaluated at all at runtime unless asserts are enabled with jvm command line flags, and isNull is an expensive check if the bit is set in the bitmap, which will have already been done by anything using the selector.\nIn fact, I've been meaning to investigate if they should be removed entirely because they are still in the bytecode and could affect hotspot function inlining which takes function size into account, since these methods will be called from hot loops, but I haven't had the chance to investigate.\ne.g. using columnar doubles\nwith assert:\n  public double getDouble(int);\n    Code:\n       0: getstatic     #13                 // Field $assertionsDisabled:Z\n       3: ifne          33\n       6: invokestatic  #14                 // Method org/apache/druid/common/config/NullHandling.replaceWithDefault:()Z\n       9: ifne          33\n      12: aload_0\n      13: getfield      #2                  // Field val$nullValueBitmap:Lorg/apache/druid/collections/bitmap/ImmutableBitmap;\n      16: iload_1\n      17: invokeinterface #19,  2           // InterfaceMethod org/apache/druid/collections/bitmap/ImmutableBitmap.get:(I)Z\n      22: ifeq          33\n      25: new           #16                 // class java/lang/AssertionError\n      28: dup\n      29: invokespecial #17                 // Method java/lang/AssertionError.\"<init>\":()V\n      32: athrow\n      33: aload_0\n      34: getfield      #1                  // Field this$0:Lorg/apache/druid/segment/data/ColumnarDoubles;\n      37: iload_1\n      38: invokeinterface #18,  2           // InterfaceMethod org/apache/druid/segment/data/ColumnarDoubles.get:(I)D\n      43: dreturn\n\nno assert:\n  public double getDouble(int);\n    Code:\n       0: aload_0\n       1: getfield      #1                  // Field this$0:Lorg/apache/druid/segment/data/ColumnarDoubles;\n       4: iload_1\n       5: invokeinterface #13,  2           // InterfaceMethod org/apache/druid/segment/data/ColumnarDoubles.get:(I)D\n      10: dreturn", "author": "clintropolis", "createdAt": "2020-01-16T08:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0ODMwNA==", "url": "https://github.com/apache/druid/pull/9179#discussion_r368748304", "bodyText": "I've restored the assert statement and suppressed the inspection warning instead", "author": "ccaominh", "createdAt": "2020-01-20T22:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "180cf52075b3f8a6f4f500e59eeb9d97e0c1c74e", "chunk": "diff --git a/processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java b/processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java\nindex 1afb52c17e..0ffef58b2f 100644\n--- a/processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java\n+++ b/processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java\n\n@@ -122,14 +121,15 @@ public interface ColumnarLongs extends Closeable\n         @Override\n         public long getLong()\n         {\n-          Preconditions.checkState(NullHandling.replaceWithDefault() || !isNull());\n+          //noinspection AssertWithSideEffects (ignore null handling test initialization check side effect)\n+          assert NullHandling.replaceWithDefault() || !isNull();\n           return ColumnarLongs.this.get(offset.getOffset());\n         }\n \n         @Override\n         public double getDouble(int offset)\n         {\n-          Preconditions.checkState(NullHandling.replaceWithDefault() || !nullValueBitmap.get(offset));\n+          assert NullHandling.replaceWithDefault() || !nullValueBitmap.get(offset);\n           return ColumnarLongs.this.get(offset);\n         }\n \n"}}, {"oid": "180cf52075b3f8a6f4f500e59eeb9d97e0c1c74e", "url": "https://github.com/apache/druid/commit/180cf52075b3f8a6f4f500e59eeb9d97e0c1c74e", "message": "Restore assert statements", "committedDate": "2020-01-20T22:41:18Z", "type": "commit"}, {"oid": "bb80dbda3f7d889d580c8754552df42884cf703d", "url": "https://github.com/apache/druid/commit/bb80dbda3f7d889d580c8754552df42884cf703d", "message": "Merge remote-tracking branch 'upstream/master' into intellij-inspect", "committedDate": "2020-01-20T22:59:29Z", "type": "commit"}, {"oid": "bf0c7ae4f44a3feaca302b04d9c76d218fe45cc9", "url": "https://github.com/apache/druid/commit/bf0c7ae4f44a3feaca302b04d9c76d218fe45cc9", "message": "Merge remote-tracking branch 'upstream/master' into intellij-inspect", "committedDate": "2020-01-27T05:19:33Z", "type": "commit"}, {"oid": "9eb570904ea895d98467e6f5410b15770c167280", "url": "https://github.com/apache/druid/commit/9eb570904ea895d98467e6f5410b15770c167280", "message": "Merge remote-tracking branch 'upstream/master' into intellij-inspect", "committedDate": "2020-01-28T20:06:14Z", "type": "commit"}, {"oid": "81ff2904227f11e1d164bf518b9e73f4985dda8a", "url": "https://github.com/apache/druid/commit/81ff2904227f11e1d164bf518b9e73f4985dda8a", "message": "Merge remote-tracking branch 'upstream/master' into intellij-inspect", "committedDate": "2020-01-28T20:06:34Z", "type": "commit"}, {"oid": "27425a4745f493303d747e7df631d9aece40dcb3", "url": "https://github.com/apache/druid/commit/27425a4745f493303d747e7df631d9aece40dcb3", "message": "Merge remote-tracking branch 'upstream/master' into intellij-inspect", "committedDate": "2020-02-01T17:55:01Z", "type": "commit"}, {"oid": "ecdac86a5db92dcd5494974efa53ebeee8a5b9c8", "url": "https://github.com/apache/druid/commit/ecdac86a5db92dcd5494974efa53ebeee8a5b9c8", "message": "Merge remote-tracking branch 'upstream/master' into intellij-inspect", "committedDate": "2020-02-07T22:41:33Z", "type": "commit"}, {"oid": "fc8fc2970f2a4b6da7bcce5924493a3856b34e85", "url": "https://github.com/apache/druid/commit/fc8fc2970f2a4b6da7bcce5924493a3856b34e85", "message": "Merge remote-tracking branch 'upstream/master' into intellij-inspect", "committedDate": "2020-02-18T04:37:08Z", "type": "commit"}]}