{"pr_number": 2907, "pr_title": "Time Since Expression", "pr_createdAt": "2020-04-05T05:33:02Z", "pr_url": "https://github.com/SkriptLang/Skript/pull/2907", "timeline": [{"oid": "5042f2e9201abc0907f1798d6878b27fb32d637a", "url": "https://github.com/SkriptLang/Skript/commit/5042f2e9201abc0907f1798d6878b27fb32d637a", "message": "Add expressions and test", "committedDate": "2020-04-05T05:21:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTQ3NA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403659474", "bodyText": "No need since this is a SPE, just call register(...)", "author": "Wealthyturtle", "createdAt": "2020-04-05T07:04:38Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeath.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n+\n+\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n+\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n+\t\t);", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2MTY3Nw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403661677", "bodyText": "I am registering the patterns manually since they aren\u2019t possible with the patterns SPE registers - mainly the time of part", "author": "APickledWalrus", "createdAt": "2020-04-05T07:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\ndeleted file mode 100644\nindex 9e161563..00000000\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\n+++ /dev/null\n\n@@ -1,137 +0,0 @@\n-/**\n- *   This file is part of Skript.\n- *\n- *  Skript is free software: you can redistribute it and/or modify\n- *  it under the terms of the GNU General Public License as published by\n- *  the Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n- *\n- *  Skript is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License\n- *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- *\n- * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n- */\n-package ch.njol.skript.expressions;\n-\n-import org.bukkit.Statistic;\n-import org.bukkit.entity.Player;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import ch.njol.skript.Skript;\n-import ch.njol.skript.classes.Changer.ChangeMode;\n-import ch.njol.skript.doc.Description;\n-import ch.njol.skript.doc.Examples;\n-import ch.njol.skript.doc.Name;\n-import ch.njol.skript.doc.Since;\n-import ch.njol.skript.expressions.base.SimplePropertyExpression;\n-import ch.njol.skript.lang.Expression;\n-import ch.njol.skript.lang.ExpressionType;\n-import ch.njol.skript.lang.SkriptParser.ParseResult;\n-import ch.njol.skript.util.Date;\n-import ch.njol.skript.util.Timespan;\n-import ch.njol.util.Kleenean;\n-import ch.njol.util.coll.CollectionUtils;\n-\n-@Name(\"Last Death\")\n-@Description({\"The time of the last death of a player.\", \n-\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n-@Since(\"INSERT VERSION\")\n-public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n-\n-\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n-\n-\tstatic {\n-\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n-\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n-\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n-\t\t);\n-\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n-\t}\n-\n-\t@SuppressWarnings({\"null\", \"unchecked\"})\n-\t@Override\n-\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n-\t\tsetExpr((Expression<Player>) exprs[0]);\n-\t\treturn true;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Date convert(Player player) {\n-\t\tDate date = new Date();\n-\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n-\t\treturn date;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n-\t\t\treturn null;\n-\t\tif (mode == ChangeMode.SET)\n-\t\t\treturn CollectionUtils.array(Date.class);\n-\t\treturn CollectionUtils.array(Timespan.class);\n-\t}\n-\n-\t@SuppressWarnings(\"null\")\n-\t@Override\n-\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n-\t\tif (delta == null && mode != ChangeMode.RESET)\n-\t\t\treturn;\n-\t\tDate now = new Date();\n-\t\tfor (Player player : getExpr().getArray(e)) {\n-\t\t\tif (mode == ChangeMode.ADD) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.REMOVE) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.SET) {\n-\n-\t\t\t\t/*\n-\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n-\t\t\t\t * it needs to be set to the difference between now and the new date.\n-\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n-\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n-\t\t\t\t * \n-\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n-\t\t\t\t */\n-\t\t\t\tDate newDate = ((Date) delta[0]);\n-\t\t\t\tif (newDate.compareTo(now) < 1)\n-\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.RESET) {\n-\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, 0);\n-\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Class<? extends Date> getReturnType() {\n-\t\treturn Date.class;\n-\t}\n-\n-\t@Override\n-\tprotected String getPropertyName() {\n-\t\treturn \"last death\";\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTU4Mg==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403659582", "bodyText": "You could do\nreturn new Date().subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n\nFor a one-line solution", "author": "Wealthyturtle", "createdAt": "2020-04-05T07:05:55Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeath.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n+\n+\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n+\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n+\t\t);\n+\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n+\t}\n+\n+\t@SuppressWarnings({\"null\", \"unchecked\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tsetExpr((Expression<Player>) exprs[0]);\n+\t\treturn true;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Date convert(Player player) {\n+\t\tDate date = new Date();\n+\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n+\t\treturn date;", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2MTgxMA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403661810", "bodyText": "Not sure why I didn\u2019t do that haha", "author": "APickledWalrus", "createdAt": "2020-04-05T07:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0OTk5MA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403749990", "bodyText": "personally i prefer it as multiple lines, but a little differently:\nint ticksSinceDeath = player.getStatistic(Statistic.TIME_SINCE_DEATH);\nTimespan timeSinceDeath = Timespan.fromTicks_i(ticksSinceDeath);\nreturn new Date().subtract(timeSinceDeath);\n\nbecause then each line's purpose is clear", "author": "Pikachu920", "createdAt": "2020-04-05T20:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4MDc1Mw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403780753", "bodyText": "Just remembered why I did it this way\nThe subtract and add methods are actually void methods, so you can\u2019t return from them. It\u2019s really an issue with the date implementation that should be changed.", "author": "APickledWalrus", "createdAt": "2020-04-06T00:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMjY5Nw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r406732697", "bodyText": "The subtract and add methods are actually void methods, so you can\u2019t return from them. It\u2019s really an issue with the date implementation that should be changed.\n\nI just did a PR for that, hopefully it gets merged soon and that can help this out :)", "author": "ShaneBeee", "createdAt": "2020-04-10T12:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MDE4Nw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r409260187", "bodyText": "Shane's PR is now merged :)\nyou can do do return Date.now().subtract(urTimespan);", "author": "Pikachu920", "createdAt": "2020-04-16T03:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxOTYxOQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r410319619", "bodyText": "I will make changes shortly!", "author": "APickledWalrus", "createdAt": "2020-04-17T16:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\ndeleted file mode 100644\nindex 9e161563..00000000\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\n+++ /dev/null\n\n@@ -1,137 +0,0 @@\n-/**\n- *   This file is part of Skript.\n- *\n- *  Skript is free software: you can redistribute it and/or modify\n- *  it under the terms of the GNU General Public License as published by\n- *  the Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n- *\n- *  Skript is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License\n- *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- *\n- * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n- */\n-package ch.njol.skript.expressions;\n-\n-import org.bukkit.Statistic;\n-import org.bukkit.entity.Player;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import ch.njol.skript.Skript;\n-import ch.njol.skript.classes.Changer.ChangeMode;\n-import ch.njol.skript.doc.Description;\n-import ch.njol.skript.doc.Examples;\n-import ch.njol.skript.doc.Name;\n-import ch.njol.skript.doc.Since;\n-import ch.njol.skript.expressions.base.SimplePropertyExpression;\n-import ch.njol.skript.lang.Expression;\n-import ch.njol.skript.lang.ExpressionType;\n-import ch.njol.skript.lang.SkriptParser.ParseResult;\n-import ch.njol.skript.util.Date;\n-import ch.njol.skript.util.Timespan;\n-import ch.njol.util.Kleenean;\n-import ch.njol.util.coll.CollectionUtils;\n-\n-@Name(\"Last Death\")\n-@Description({\"The time of the last death of a player.\", \n-\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n-@Since(\"INSERT VERSION\")\n-public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n-\n-\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n-\n-\tstatic {\n-\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n-\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n-\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n-\t\t);\n-\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n-\t}\n-\n-\t@SuppressWarnings({\"null\", \"unchecked\"})\n-\t@Override\n-\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n-\t\tsetExpr((Expression<Player>) exprs[0]);\n-\t\treturn true;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Date convert(Player player) {\n-\t\tDate date = new Date();\n-\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n-\t\treturn date;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n-\t\t\treturn null;\n-\t\tif (mode == ChangeMode.SET)\n-\t\t\treturn CollectionUtils.array(Date.class);\n-\t\treturn CollectionUtils.array(Timespan.class);\n-\t}\n-\n-\t@SuppressWarnings(\"null\")\n-\t@Override\n-\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n-\t\tif (delta == null && mode != ChangeMode.RESET)\n-\t\t\treturn;\n-\t\tDate now = new Date();\n-\t\tfor (Player player : getExpr().getArray(e)) {\n-\t\t\tif (mode == ChangeMode.ADD) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.REMOVE) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.SET) {\n-\n-\t\t\t\t/*\n-\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n-\t\t\t\t * it needs to be set to the difference between now and the new date.\n-\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n-\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n-\t\t\t\t * \n-\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n-\t\t\t\t */\n-\t\t\t\tDate newDate = ((Date) delta[0]);\n-\t\t\t\tif (newDate.compareTo(now) < 1)\n-\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.RESET) {\n-\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, 0);\n-\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Class<? extends Date> getReturnType() {\n-\t\treturn Date.class;\n-\t}\n-\n-\t@Override\n-\tprotected String getPropertyName() {\n-\t\treturn \"last death\";\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTg0NQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403659845", "bodyText": "You may be able to use a lambda for this", "author": "Wealthyturtle", "createdAt": "2020-04-05T07:08:39Z", "path": "src/main/java/ch/njol/skript/expressions/ExprTimeSince.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.lang.util.SimpleExpression;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Time Since\")\n+@Description(\"The time that has passed since a date. This will return 0 seconds if the given date is in the future.\")\n+@Examples(\"send \\\"You died %time since last death of player% ago!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprTimeSince extends SimpleExpression<Timespan> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprTimeSince.class, Timespan.class, ExpressionType.SIMPLE, \"time since %dates%\");\n+\t}\n+\n+\t@SuppressWarnings(\"null\")\n+\tprivate Expression<Date> dates;\n+\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tdates = (Expression<Date>) exprs[0];\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tprotected Timespan[] get(Event e) {\n+\t\tList<Timespan> timespans = new ArrayList<>();\n+\t\tDate now = new Date();\n+\t\tfor (Date date : dates.getArray(e))\n+\t\t\tif (date.compareTo(now) > 0) {\n+\t\t\t\ttimespans.add(new Timespan());\n+\t\t\t} else {\n+\t\t\t\ttimespans.add(date.difference(now));\n+\t\t\t}\n+\t\treturn timespans.toArray(new Timespan[0]);", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjE1OA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403752158", "bodyText": "maybe, but if you make it an SPE instead it would require neither a lambda nor a loop", "author": "Pikachu920", "createdAt": "2020-04-05T20:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\nindex a30fba70..a7157653 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n\n@@ -33,6 +33,7 @@ import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.skript.lang.Expression;\n import ch.njol.skript.lang.ExpressionType;\n import ch.njol.skript.lang.SkriptParser.ParseResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTk5MA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403659990", "bodyText": "Would it be a problem if you convert from long -> int? Overflow issues potentially?", "author": "Wealthyturtle", "createdAt": "2020-04-05T07:10:17Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeath.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n+\n+\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n+\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n+\t\t);\n+\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n+\t}\n+\n+\t@SuppressWarnings({\"null\", \"unchecked\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tsetExpr((Expression<Player>) exprs[0]);\n+\t\treturn true;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Date convert(Player player) {\n+\t\tDate date = new Date();\n+\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n+\t\treturn date;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n+\t\t\treturn null;\n+\t\tif (mode == ChangeMode.SET)\n+\t\t\treturn CollectionUtils.array(Date.class);\n+\t\treturn CollectionUtils.array(Timespan.class);\n+\t}\n+\n+\t@SuppressWarnings(\"null\")\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null && mode != ChangeMode.RESET)\n+\t\t\treturn;\n+\t\tDate now = new Date();\n+\t\tfor (Player player : getExpr().getArray(e)) {\n+\t\t\tif (mode == ChangeMode.ADD) {\n+\n+\t\t\t\tDate deathTime = convert(player);\n+\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n+\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n+\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2MjA2OQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403662069", "bodyText": "Possibly - I\u2019ll mess around with it :)", "author": "APickledWalrus", "createdAt": "2020-04-05T07:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjczMQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403752731", "bodyText": "it could be but there's nothing he can really do with it, spigot only supports ints for these statistics so that's what we're stuck with. it won't overflow however maybe we can just not do anything if the long > Integer.MAX_VALUE", "author": "Pikachu920", "createdAt": "2020-04-05T20:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\ndeleted file mode 100644\nindex 9e161563..00000000\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\n+++ /dev/null\n\n@@ -1,137 +0,0 @@\n-/**\n- *   This file is part of Skript.\n- *\n- *  Skript is free software: you can redistribute it and/or modify\n- *  it under the terms of the GNU General Public License as published by\n- *  the Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n- *\n- *  Skript is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License\n- *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- *\n- * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n- */\n-package ch.njol.skript.expressions;\n-\n-import org.bukkit.Statistic;\n-import org.bukkit.entity.Player;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import ch.njol.skript.Skript;\n-import ch.njol.skript.classes.Changer.ChangeMode;\n-import ch.njol.skript.doc.Description;\n-import ch.njol.skript.doc.Examples;\n-import ch.njol.skript.doc.Name;\n-import ch.njol.skript.doc.Since;\n-import ch.njol.skript.expressions.base.SimplePropertyExpression;\n-import ch.njol.skript.lang.Expression;\n-import ch.njol.skript.lang.ExpressionType;\n-import ch.njol.skript.lang.SkriptParser.ParseResult;\n-import ch.njol.skript.util.Date;\n-import ch.njol.skript.util.Timespan;\n-import ch.njol.util.Kleenean;\n-import ch.njol.util.coll.CollectionUtils;\n-\n-@Name(\"Last Death\")\n-@Description({\"The time of the last death of a player.\", \n-\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n-@Since(\"INSERT VERSION\")\n-public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n-\n-\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n-\n-\tstatic {\n-\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n-\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n-\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n-\t\t);\n-\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n-\t}\n-\n-\t@SuppressWarnings({\"null\", \"unchecked\"})\n-\t@Override\n-\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n-\t\tsetExpr((Expression<Player>) exprs[0]);\n-\t\treturn true;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Date convert(Player player) {\n-\t\tDate date = new Date();\n-\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n-\t\treturn date;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n-\t\t\treturn null;\n-\t\tif (mode == ChangeMode.SET)\n-\t\t\treturn CollectionUtils.array(Date.class);\n-\t\treturn CollectionUtils.array(Timespan.class);\n-\t}\n-\n-\t@SuppressWarnings(\"null\")\n-\t@Override\n-\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n-\t\tif (delta == null && mode != ChangeMode.RESET)\n-\t\t\treturn;\n-\t\tDate now = new Date();\n-\t\tfor (Player player : getExpr().getArray(e)) {\n-\t\t\tif (mode == ChangeMode.ADD) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.REMOVE) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.SET) {\n-\n-\t\t\t\t/*\n-\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n-\t\t\t\t * it needs to be set to the difference between now and the new date.\n-\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n-\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n-\t\t\t\t * \n-\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n-\t\t\t\t */\n-\t\t\t\tDate newDate = ((Date) delta[0]);\n-\t\t\t\tif (newDate.compareTo(now) < 1)\n-\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.RESET) {\n-\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, 0);\n-\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Class<? extends Date> getReturnType() {\n-\t\treturn Date.class;\n-\t}\n-\n-\t@Override\n-\tprotected String getPropertyName() {\n-\t\treturn \"last death\";\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0ODQ3OA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403748478", "bodyText": "why the variable? i feel like is less clear than just using the enum where you need it", "author": "Pikachu920", "createdAt": "2020-04-05T19:49:18Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeath.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n+\n+\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\ndeleted file mode 100644\nindex 9e161563..00000000\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\n+++ /dev/null\n\n@@ -1,137 +0,0 @@\n-/**\n- *   This file is part of Skript.\n- *\n- *  Skript is free software: you can redistribute it and/or modify\n- *  it under the terms of the GNU General Public License as published by\n- *  the Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n- *\n- *  Skript is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License\n- *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- *\n- * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n- */\n-package ch.njol.skript.expressions;\n-\n-import org.bukkit.Statistic;\n-import org.bukkit.entity.Player;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import ch.njol.skript.Skript;\n-import ch.njol.skript.classes.Changer.ChangeMode;\n-import ch.njol.skript.doc.Description;\n-import ch.njol.skript.doc.Examples;\n-import ch.njol.skript.doc.Name;\n-import ch.njol.skript.doc.Since;\n-import ch.njol.skript.expressions.base.SimplePropertyExpression;\n-import ch.njol.skript.lang.Expression;\n-import ch.njol.skript.lang.ExpressionType;\n-import ch.njol.skript.lang.SkriptParser.ParseResult;\n-import ch.njol.skript.util.Date;\n-import ch.njol.skript.util.Timespan;\n-import ch.njol.util.Kleenean;\n-import ch.njol.util.coll.CollectionUtils;\n-\n-@Name(\"Last Death\")\n-@Description({\"The time of the last death of a player.\", \n-\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n-@Since(\"INSERT VERSION\")\n-public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n-\n-\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n-\n-\tstatic {\n-\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n-\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n-\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n-\t\t);\n-\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n-\t}\n-\n-\t@SuppressWarnings({\"null\", \"unchecked\"})\n-\t@Override\n-\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n-\t\tsetExpr((Expression<Player>) exprs[0]);\n-\t\treturn true;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Date convert(Player player) {\n-\t\tDate date = new Date();\n-\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n-\t\treturn date;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n-\t\t\treturn null;\n-\t\tif (mode == ChangeMode.SET)\n-\t\t\treturn CollectionUtils.array(Date.class);\n-\t\treturn CollectionUtils.array(Timespan.class);\n-\t}\n-\n-\t@SuppressWarnings(\"null\")\n-\t@Override\n-\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n-\t\tif (delta == null && mode != ChangeMode.RESET)\n-\t\t\treturn;\n-\t\tDate now = new Date();\n-\t\tfor (Player player : getExpr().getArray(e)) {\n-\t\t\tif (mode == ChangeMode.ADD) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.REMOVE) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.SET) {\n-\n-\t\t\t\t/*\n-\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n-\t\t\t\t * it needs to be set to the difference between now and the new date.\n-\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n-\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n-\t\t\t\t * \n-\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n-\t\t\t\t */\n-\t\t\t\tDate newDate = ((Date) delta[0]);\n-\t\t\t\tif (newDate.compareTo(now) < 1)\n-\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.RESET) {\n-\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, 0);\n-\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Class<? extends Date> getReturnType() {\n-\t\treturn Date.class;\n-\t}\n-\n-\t@Override\n-\tprotected String getPropertyName() {\n-\t\treturn \"last death\";\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0ODY1Mw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403748653", "bodyText": "i'm not sure if player's last death is a great pattern as it's not really clear what will be returned - it could be the cause of the death or the location of the last death too (imagine teleport player to player's last death or if player's last death was caused by fall damage:)", "author": "Pikachu920", "createdAt": "2020-04-05T19:51:18Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeath.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n+\n+\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n+\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\ndeleted file mode 100644\nindex 9e161563..00000000\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\n+++ /dev/null\n\n@@ -1,137 +0,0 @@\n-/**\n- *   This file is part of Skript.\n- *\n- *  Skript is free software: you can redistribute it and/or modify\n- *  it under the terms of the GNU General Public License as published by\n- *  the Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n- *\n- *  Skript is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License\n- *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- *\n- * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n- */\n-package ch.njol.skript.expressions;\n-\n-import org.bukkit.Statistic;\n-import org.bukkit.entity.Player;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import ch.njol.skript.Skript;\n-import ch.njol.skript.classes.Changer.ChangeMode;\n-import ch.njol.skript.doc.Description;\n-import ch.njol.skript.doc.Examples;\n-import ch.njol.skript.doc.Name;\n-import ch.njol.skript.doc.Since;\n-import ch.njol.skript.expressions.base.SimplePropertyExpression;\n-import ch.njol.skript.lang.Expression;\n-import ch.njol.skript.lang.ExpressionType;\n-import ch.njol.skript.lang.SkriptParser.ParseResult;\n-import ch.njol.skript.util.Date;\n-import ch.njol.skript.util.Timespan;\n-import ch.njol.util.Kleenean;\n-import ch.njol.util.coll.CollectionUtils;\n-\n-@Name(\"Last Death\")\n-@Description({\"The time of the last death of a player.\", \n-\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n-@Since(\"INSERT VERSION\")\n-public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n-\n-\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n-\n-\tstatic {\n-\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n-\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n-\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n-\t\t);\n-\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n-\t}\n-\n-\t@SuppressWarnings({\"null\", \"unchecked\"})\n-\t@Override\n-\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n-\t\tsetExpr((Expression<Player>) exprs[0]);\n-\t\treturn true;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Date convert(Player player) {\n-\t\tDate date = new Date();\n-\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n-\t\treturn date;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n-\t\t\treturn null;\n-\t\tif (mode == ChangeMode.SET)\n-\t\t\treturn CollectionUtils.array(Date.class);\n-\t\treturn CollectionUtils.array(Timespan.class);\n-\t}\n-\n-\t@SuppressWarnings(\"null\")\n-\t@Override\n-\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n-\t\tif (delta == null && mode != ChangeMode.RESET)\n-\t\t\treturn;\n-\t\tDate now = new Date();\n-\t\tfor (Player player : getExpr().getArray(e)) {\n-\t\t\tif (mode == ChangeMode.ADD) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.REMOVE) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.SET) {\n-\n-\t\t\t\t/*\n-\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n-\t\t\t\t * it needs to be set to the difference between now and the new date.\n-\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n-\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n-\t\t\t\t * \n-\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n-\t\t\t\t */\n-\t\t\t\tDate newDate = ((Date) delta[0]);\n-\t\t\t\tif (newDate.compareTo(now) < 1)\n-\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.RESET) {\n-\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, 0);\n-\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Class<? extends Date> getReturnType() {\n-\t\treturn Date.class;\n-\t}\n-\n-\t@Override\n-\tprotected String getPropertyName() {\n-\t\treturn \"last death\";\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDQ5OQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403750499", "bodyText": "i feel this algorithm isn't very clear - what does 0 represent? is that the milliseconds between the two dates? why does it have to be greater than 0? this is partially the fault of the Date implementation but the code would likely benefit from a comment or two here", "author": "Pikachu920", "createdAt": "2020-04-05T20:07:44Z", "path": "src/main/java/ch/njol/skript/expressions/ExprTimeSince.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.lang.util.SimpleExpression;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Time Since\")\n+@Description(\"The time that has passed since a date. This will return 0 seconds if the given date is in the future.\")\n+@Examples(\"send \\\"You died %time since last death of player% ago!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprTimeSince extends SimpleExpression<Timespan> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprTimeSince.class, Timespan.class, ExpressionType.SIMPLE, \"time since %dates%\");\n+\t}\n+\n+\t@SuppressWarnings(\"null\")\n+\tprivate Expression<Date> dates;\n+\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tdates = (Expression<Date>) exprs[0];\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tprotected Timespan[] get(Event e) {\n+\t\tList<Timespan> timespans = new ArrayList<>();\n+\t\tDate now = new Date();\n+\t\tfor (Date date : dates.getArray(e))\n+\t\t\tif (date.compareTo(now) > 0) {", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\nindex a30fba70..a7157653 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n\n@@ -33,6 +33,7 @@ import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.skript.lang.Expression;\n import ch.njol.skript.lang.ExpressionType;\n import ch.njol.skript.lang.SkriptParser.ParseResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDY5OQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403750699", "bodyText": "similar thing here - why the default constructor? what does that constructor do that's special in this case. also the fault of Timespan's not so great default constructor", "author": "Pikachu920", "createdAt": "2020-04-05T20:09:18Z", "path": "src/main/java/ch/njol/skript/expressions/ExprTimeSince.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.lang.util.SimpleExpression;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Time Since\")\n+@Description(\"The time that has passed since a date. This will return 0 seconds if the given date is in the future.\")\n+@Examples(\"send \\\"You died %time since last death of player% ago!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprTimeSince extends SimpleExpression<Timespan> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprTimeSince.class, Timespan.class, ExpressionType.SIMPLE, \"time since %dates%\");\n+\t}\n+\n+\t@SuppressWarnings(\"null\")\n+\tprivate Expression<Date> dates;\n+\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tdates = (Expression<Date>) exprs[0];\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tprotected Timespan[] get(Event e) {\n+\t\tList<Timespan> timespans = new ArrayList<>();\n+\t\tDate now = new Date();\n+\t\tfor (Date date : dates.getArray(e))\n+\t\t\tif (date.compareTo(now) > 0) {\n+\t\t\t\ttimespans.add(new Timespan());", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\nindex a30fba70..a7157653 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n\n@@ -33,6 +33,7 @@ import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.skript.lang.Expression;\n import ch.njol.skript.lang.ExpressionType;\n import ch.njol.skript.lang.SkriptParser.ParseResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTYxNg==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403751616", "bodyText": "this isn't a simple expression, it's actually a combined expression. see javadoc of expressiontype", "author": "Pikachu920", "createdAt": "2020-04-05T20:17:20Z", "path": "src/main/java/ch/njol/skript/expressions/ExprTimeSince.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.lang.util.SimpleExpression;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Time Since\")\n+@Description(\"The time that has passed since a date. This will return 0 seconds if the given date is in the future.\")\n+@Examples(\"send \\\"You died %time since last death of player% ago!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprTimeSince extends SimpleExpression<Timespan> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprTimeSince.class, Timespan.class, ExpressionType.SIMPLE, \"time since %dates%\");", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\nindex a30fba70..a7157653 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n\n@@ -33,6 +33,7 @@ import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.skript.lang.Expression;\n import ch.njol.skript.lang.ExpressionType;\n import ch.njol.skript.lang.SkriptParser.ParseResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjA1MQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403752051", "bodyText": "i know this way of doing things isn't specific to this PR but when did we stop using switch cases that explicitly look for the valid change modes? this method makes it harder to decipher what is supported not to mention it will cause trouble if we were to add new change modes.\n@bensku what do you think about this vs the older switch case style or, for only a couple change modes, simple condition style:\nif (mode == ChangeMode.SET) {\n    return CollectionUtils.Array(Something.class);\n}\n\nstyle", "author": "Pikachu920", "createdAt": "2020-04-05T20:21:11Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeath.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n+\n+\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n+\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n+\t\t);\n+\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n+\t}\n+\n+\t@SuppressWarnings({\"null\", \"unchecked\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tsetExpr((Expression<Player>) exprs[0]);\n+\t\treturn true;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Date convert(Player player) {\n+\t\tDate date = new Date();\n+\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n+\t\treturn date;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\ndeleted file mode 100644\nindex 9e161563..00000000\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\n+++ /dev/null\n\n@@ -1,137 +0,0 @@\n-/**\n- *   This file is part of Skript.\n- *\n- *  Skript is free software: you can redistribute it and/or modify\n- *  it under the terms of the GNU General Public License as published by\n- *  the Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n- *\n- *  Skript is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License\n- *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- *\n- * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n- */\n-package ch.njol.skript.expressions;\n-\n-import org.bukkit.Statistic;\n-import org.bukkit.entity.Player;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import ch.njol.skript.Skript;\n-import ch.njol.skript.classes.Changer.ChangeMode;\n-import ch.njol.skript.doc.Description;\n-import ch.njol.skript.doc.Examples;\n-import ch.njol.skript.doc.Name;\n-import ch.njol.skript.doc.Since;\n-import ch.njol.skript.expressions.base.SimplePropertyExpression;\n-import ch.njol.skript.lang.Expression;\n-import ch.njol.skript.lang.ExpressionType;\n-import ch.njol.skript.lang.SkriptParser.ParseResult;\n-import ch.njol.skript.util.Date;\n-import ch.njol.skript.util.Timespan;\n-import ch.njol.util.Kleenean;\n-import ch.njol.util.coll.CollectionUtils;\n-\n-@Name(\"Last Death\")\n-@Description({\"The time of the last death of a player.\", \n-\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n-@Since(\"INSERT VERSION\")\n-public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n-\n-\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n-\n-\tstatic {\n-\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n-\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n-\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n-\t\t);\n-\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n-\t}\n-\n-\t@SuppressWarnings({\"null\", \"unchecked\"})\n-\t@Override\n-\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n-\t\tsetExpr((Expression<Player>) exprs[0]);\n-\t\treturn true;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Date convert(Player player) {\n-\t\tDate date = new Date();\n-\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n-\t\treturn date;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n-\t\t\treturn null;\n-\t\tif (mode == ChangeMode.SET)\n-\t\t\treturn CollectionUtils.array(Date.class);\n-\t\treturn CollectionUtils.array(Timespan.class);\n-\t}\n-\n-\t@SuppressWarnings(\"null\")\n-\t@Override\n-\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n-\t\tif (delta == null && mode != ChangeMode.RESET)\n-\t\t\treturn;\n-\t\tDate now = new Date();\n-\t\tfor (Player player : getExpr().getArray(e)) {\n-\t\t\tif (mode == ChangeMode.ADD) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.REMOVE) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.SET) {\n-\n-\t\t\t\t/*\n-\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n-\t\t\t\t * it needs to be set to the difference between now and the new date.\n-\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n-\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n-\t\t\t\t * \n-\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n-\t\t\t\t */\n-\t\t\t\tDate newDate = ((Date) delta[0]);\n-\t\t\t\tif (newDate.compareTo(now) < 1)\n-\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.RESET) {\n-\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, 0);\n-\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Class<? extends Date> getReturnType() {\n-\t\treturn Date.class;\n-\t}\n-\n-\t@Override\n-\tprotected String getPropertyName() {\n-\t\treturn \"last death\";\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjIxMQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403752211", "bodyText": "it'd be better to use a SimplePropertyExpression here but still register it with the standard registration method", "author": "Pikachu920", "createdAt": "2020-04-05T20:22:29Z", "path": "src/main/java/ch/njol/skript/expressions/ExprTimeSince.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.lang.util.SimpleExpression;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Time Since\")\n+@Description(\"The time that has passed since a date. This will return 0 seconds if the given date is in the future.\")\n+@Examples(\"send \\\"You died %time since last death of player% ago!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprTimeSince extends SimpleExpression<Timespan> {", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\nindex a30fba70..a7157653 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n\n@@ -33,6 +33,7 @@ import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.skript.lang.Expression;\n import ch.njol.skript.lang.ExpressionType;\n import ch.njol.skript.lang.SkriptParser.ParseResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjM0Mw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403752343", "bodyText": "i'm not sure if having reset as an option here is a good idea - is it really clear from looking at the code that resetting it sets it to 0? personally I would think that reset changes it to their actual time since last death before any code mucks around with it.\nif I wanted to set it to 0, i'd be more likely to just write set the time of player's last death to 0", "author": "Pikachu920", "createdAt": "2020-04-05T20:23:41Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeath.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n+\n+\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n+\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n+\t\t);\n+\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n+\t}\n+\n+\t@SuppressWarnings({\"null\", \"unchecked\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tsetExpr((Expression<Player>) exprs[0]);\n+\t\treturn true;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Date convert(Player player) {\n+\t\tDate date = new Date();\n+\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n+\t\treturn date;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n+\t\t\treturn null;\n+\t\tif (mode == ChangeMode.SET)\n+\t\t\treturn CollectionUtils.array(Date.class);\n+\t\treturn CollectionUtils.array(Timespan.class);\n+\t}\n+\n+\t@SuppressWarnings(\"null\")\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tif (delta == null && mode != ChangeMode.RESET)\n+\t\t\treturn;\n+\t\tDate now = new Date();\n+\t\tfor (Player player : getExpr().getArray(e)) {\n+\t\t\tif (mode == ChangeMode.ADD) {\n+\n+\t\t\t\tDate deathTime = convert(player);\n+\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n+\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n+\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n+\n+\t\t\t} else if (mode == ChangeMode.REMOVE) {\n+\n+\t\t\t\tDate deathTime = convert(player);\n+\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n+\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n+\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n+\n+\t\t\t} else if (mode == ChangeMode.SET) {\n+\n+\t\t\t\t/*\n+\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n+\t\t\t\t * it needs to be set to the difference between now and the new date.\n+\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n+\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n+\t\t\t\t * \n+\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n+\t\t\t\t */\n+\t\t\t\tDate newDate = ((Date) delta[0]);\n+\t\t\t\tif (newDate.compareTo(now) < 1)\n+\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n+\n+\t\t\t} else if (mode == ChangeMode.RESET) {", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\ndeleted file mode 100644\nindex 9e161563..00000000\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeath.java\n+++ /dev/null\n\n@@ -1,137 +0,0 @@\n-/**\n- *   This file is part of Skript.\n- *\n- *  Skript is free software: you can redistribute it and/or modify\n- *  it under the terms of the GNU General Public License as published by\n- *  the Free Software Foundation, either version 3 of the License, or\n- *  (at your option) any later version.\n- *\n- *  Skript is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- *  GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License\n- *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n- *\n- *\n- * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n- */\n-package ch.njol.skript.expressions;\n-\n-import org.bukkit.Statistic;\n-import org.bukkit.entity.Player;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import ch.njol.skript.Skript;\n-import ch.njol.skript.classes.Changer.ChangeMode;\n-import ch.njol.skript.doc.Description;\n-import ch.njol.skript.doc.Examples;\n-import ch.njol.skript.doc.Name;\n-import ch.njol.skript.doc.Since;\n-import ch.njol.skript.expressions.base.SimplePropertyExpression;\n-import ch.njol.skript.lang.Expression;\n-import ch.njol.skript.lang.ExpressionType;\n-import ch.njol.skript.lang.SkriptParser.ParseResult;\n-import ch.njol.skript.util.Date;\n-import ch.njol.skript.util.Timespan;\n-import ch.njol.util.Kleenean;\n-import ch.njol.util.coll.CollectionUtils;\n-\n-@Name(\"Last Death\")\n-@Description({\"The time of the last death of a player.\", \n-\t\t\t\t\"A change to this value can't be negative, so it will be reset or remain unchanged.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n-@Since(\"INSERT VERSION\")\n-public class ExprLastDeath extends SimplePropertyExpression<Player, Date> {\n-\n-\tprivate final Statistic LAST_DEATH = Statistic.TIME_SINCE_DEATH;\n-\n-\tstatic {\n-\t\tSkript.registerExpression(ExprLastDeath.class, Date.class, ExpressionType.PROPERTY, \n-\t\t\t\t\"[the] [time of [the]] last death of %players%\",\n-\t\t\t\t\"[the] [time of [the]] %players%'[s] last death\"\n-\t\t);\n-\t\tregister(ExprLastDeath.class, Date.class, \"[the] last death\", \"players\");\n-\t}\n-\n-\t@SuppressWarnings({\"null\", \"unchecked\"})\n-\t@Override\n-\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n-\t\tsetExpr((Expression<Player>) exprs[0]);\n-\t\treturn true;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Date convert(Player player) {\n-\t\tDate date = new Date();\n-\t\tdate.subtract(Timespan.fromTicks_i(player.getStatistic(LAST_DEATH)));\n-\t\treturn date;\n-\t}\n-\n-\t@Nullable\n-\t@Override\n-\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\tif (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL)\n-\t\t\treturn null;\n-\t\tif (mode == ChangeMode.SET)\n-\t\t\treturn CollectionUtils.array(Date.class);\n-\t\treturn CollectionUtils.array(Timespan.class);\n-\t}\n-\n-\t@SuppressWarnings(\"null\")\n-\t@Override\n-\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n-\t\tif (delta == null && mode != ChangeMode.RESET)\n-\t\t\treturn;\n-\t\tDate now = new Date();\n-\t\tfor (Player player : getExpr().getArray(e)) {\n-\t\t\tif (mode == ChangeMode.ADD) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong add = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.add(Timespan.fromTicks_i(add));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.REMOVE) {\n-\n-\t\t\t\tDate deathTime = convert(player);\n-\t\t\t\tlong remove = ((Timespan) delta[0]).getTicks_i();\n-\t\t\t\tdeathTime.subtract(Timespan.fromTicks_i(remove));\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) deathTime.difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.SET) {\n-\n-\t\t\t\t/*\n-\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n-\t\t\t\t * it needs to be set to the difference between now and the new date.\n-\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n-\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n-\t\t\t\t * \n-\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n-\t\t\t\t */\n-\t\t\t\tDate newDate = ((Date) delta[0]);\n-\t\t\t\tif (newDate.compareTo(now) < 1)\n-\t\t\t\t\tplayer.setStatistic(LAST_DEATH, (int) ((Date) delta[0]).difference(now).getTicks_i());\n-\n-\t\t\t} else if (mode == ChangeMode.RESET) {\n-\n-\t\t\t\tplayer.setStatistic(LAST_DEATH, 0);\n-\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Class<? extends Date> getReturnType() {\n-\t\treturn Date.class;\n-\t}\n-\n-\t@Override\n-\tprotected String getPropertyName() {\n-\t\treturn \"last death\";\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MzEzNg==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403753136", "bodyText": "why will it return 0 seconds? shouldn't it be null?", "author": "Pikachu920", "createdAt": "2020-04-05T20:30:28Z", "path": "src/main/java/ch/njol/skript/expressions/ExprTimeSince.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.lang.util.SimpleExpression;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Time Since\")\n+@Description(\"The time that has passed since a date. This will return 0 seconds if the given date is in the future.\")", "originalCommit": "5042f2e9201abc0907f1798d6878b27fb32d637a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3MzYxOQ==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r403773619", "bodyText": "I went back and forth about this myself, but wasn\u2019t sure what would be better. Either are possible so I can change it", "author": "APickledWalrus", "createdAt": "2020-04-05T23:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MzEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\nindex a30fba70..a7157653 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n\n@@ -33,6 +33,7 @@ import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.skript.lang.Expression;\n import ch.njol.skript.lang.ExpressionType;\n import ch.njol.skript.lang.SkriptParser.ParseResult;\n"}}, {"oid": "94a3be406332b3ba87b9d4fc296be618203859d5", "url": "https://github.com/SkriptLang/Skript/commit/94a3be406332b3ba87b9d4fc296be618203859d5", "message": "Merge branch 'master' into APickledWalrus-time-exprs", "committedDate": "2020-04-17T16:03:25Z", "type": "commit"}, {"oid": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "url": "https://github.com/SkriptLang/Skript/commit/6ba7107a3db2e0979508cdf573b99dd3643c9712", "message": "Fixes & Changes", "committedDate": "2020-04-17T17:59:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5ODM4Mw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r410698383", "bodyText": "you've got to override toString too, the current return would be the time since of now\n\n  \n    \n      Skript/src/main/java/ch/njol/skript/expressions/base/SimplePropertyExpression.java\n    \n    \n         Line 60\n      in\n      6524d69\n    \n    \n    \n    \n\n        \n          \n           return \"the \" + getPropertyName() + \" of \" + getExpr().toString(e, debug);", "author": "Pikachu920", "createdAt": "2020-04-18T13:25:18Z", "path": "src/main/java/ch/njol/skript/expressions/ExprTimeSince.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.lang.util.SimpleExpression;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Time Since\")\n+@Description(\"The time that has passed since a date. If the given date is in the future, a value will not be returned.\")\n+@Examples(\"send \\\"You died %time since % ago!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprTimeSince extends SimplePropertyExpression<Date, Timespan> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprTimeSince.class, Timespan.class, ExpressionType.PROPERTY, \"time since %dates%\");\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic Timespan convert(Date date) {\n+\n+\t\tDate now = Date.now();\n+\n+\t\t/*\n+\t\t * This condition returns whether the date the player is using is\n+\t\t * before the current date, the same as the current date, or after the current date.\n+\t\t * A value less than 0 indicates that the new date is BEFORE the current date.\n+\t\t * A value of 0 indicates that the new date is the SAME as the current date.\n+\t\t * A value greater than 0 indicates that the new date is AFTER the current date.\n+\t\t */\n+\t\tif (date.compareTo(now) < 1)\n+\t\t\treturn date.difference(now);\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic Class<? extends Timespan> getReturnType() {\n+\t\treturn Timespan.class;\n+\t}\n+\n+\t@Override\n+\tprotected String getPropertyName() {", "originalCommit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e469b90bb3ebd213f5a67b93a01902aaa2d746d8", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\nindex a7157653..f1064936 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprTimeSince.java\n\n@@ -45,12 +45,12 @@ import ch.njol.util.coll.CollectionUtils;\n \n @Name(\"Time Since\")\n @Description(\"The time that has passed since a date. If the given date is in the future, a value will not be returned.\")\n-@Examples(\"send \\\"You died %time since % ago!\\\" to player\")\n+@Examples(\"send \\\"You died %time since the last death time of the player% ago!\\\" to player\")\n @Since(\"INSERT VERSION\")\n public class ExprTimeSince extends SimplePropertyExpression<Date, Timespan> {\n \n \tstatic {\n-\t\tSkript.registerExpression(ExprTimeSince.class, Timespan.class, ExpressionType.PROPERTY, \"time since %dates%\");\n+\t\tSkript.registerExpression(ExprTimeSince.class, Timespan.class, ExpressionType.PROPERTY, \"[the] time since %dates%\");\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5OTA5Mw==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r410699093", "bodyText": "you could also do int newTimeSinceDeath = Math.min(newTimespanInTicks, Integer.MAX_VALUE);", "author": "Pikachu920", "createdAt": "2020-04-18T13:31:55Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death Time\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"Any changes that would result in the death time being in the future are ignored.\",\n+\t\t\t\t\"This expression affects the 'TIME_SINCE_DEATH' statistic.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeathTime extends SimplePropertyExpression<Player, Date> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeathTime.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] time of [the] last death of %players%\",\n+\t\t\t\t\"[the] time of [the] %players%'[s] last death\",\n+\t\t\t\t\"%players%'[s] last death time\",\n+\t\t\t\t\"[the] last death time of %players%\"\n+\t\t);\n+\t}\n+\n+\t@SuppressWarnings({\"null\", \"unchecked\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tsetExpr((Expression<Player>) exprs[0]);\n+\t\treturn true;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Date convert(Player player) {\n+\t\tlong ticksSinceDeath = player.getStatistic(Statistic.TIME_SINCE_DEATH);\n+\t\tif (ticksSinceDeath < 0) \n+\t\t\treturn null;\n+\t\tTimespan timeSinceDeath = Timespan.fromTicks_i(ticksSinceDeath);\n+\t\treturn Date.now().minus(timeSinceDeath);\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\t// Use a date for setting (e.g. 'set last death time of player to 1 hour ago')\n+\t\tif (mode == ChangeMode.SET)\n+\t\t\treturn CollectionUtils.array(Date.class);\n+\t\t// Use a timespan for adding/remove (e.g 'add 10 seconds to the time of the player's last death')\n+\t\tif (mode == ChangeMode.ADD || mode == ChangeMode.REMOVE)\n+\t\t\treturn CollectionUtils.array(Timespan.class);\n+\t\treturn null;\n+\t}\n+\n+\t/*\n+\t * Date#compare(date)\n+\t * This method returns whether the passed date is\n+\t * before, the same as, or after the date it's being compared to.\n+\t * A value less than 0 indicates that the passed date is AFTER the date it's being compared to.\n+\t * A value of 0 indicates that the passed date is the SAME the date it's being compared to.\n+\t * A value greater than 0 indicates that passed date is BEFORE the date it's being compared to.\n+\t * \n+\t * We use this method because we don't want the new death date to be in the future\n+\t */\n+\t@SuppressWarnings(\"null\")\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\n+\t\tif (delta == null)\n+\t\t\treturn;\n+\n+\t\tDate now = Date.now();\n+\n+\t\tfor (Player player : getExpr().getArray(e)) {\n+\t\t\tif (mode == ChangeMode.ADD) {\n+\n+\t\t\t\t// Get the current death time of the player.\n+\t\t\t\tDate deathTime = convert(player);\n+\n+\t\t\t\tdeathTime.add((Timespan) delta[0]);\n+\n+\t\t\t\tif (deathTime.compareTo(now) < 1) {\n+\t\t\t\t\t// Get the timespan representing the new time since death (in ticks).\n+\t\t\t\t\tlong newTimespanInTicks= deathTime.difference(now).getTicks_i();\n+\n+\t\t\t\t\t/*\n+\t\t\t\t\t *  Convert to int.\n+\t\t\t\t\t *  If it is greater than the max value for an integer,\n+\t\t\t\t\t *  the user probably wants to set it to the max value, right?\n+\t\t\t\t\t */\n+\t\t\t\t\tint newTimeSinceDeath = newTimespanInTicks < Integer.MAX_VALUE ? (int) newTimespanInTicks : Integer.MAX_VALUE;\n+\n+\t\t\t\t\tplayer.setStatistic(Statistic.TIME_SINCE_DEATH, newTimeSinceDeath);\n+\t\t\t\t}\n+\n+\t\t\t} else if (mode == ChangeMode.REMOVE) {\n+\n+\t\t\t\t// Get the current death time of the player.\n+\t\t\t\tDate deathTime = convert(player);\n+\n+\t\t\t\tdeathTime.subtract((Timespan) delta[0]);\n+\t\t\t\t\n+\t\t\t\t// Get the timespan representing the new time since death (in ticks).\n+\t\t\t\tlong newTimespanInTicks= deathTime.difference(now).getTicks_i();\n+\n+\t\t\t\t/*\n+\t\t\t\t *  Convert to int.\n+\t\t\t\t *  If it is greater than the max value for an integer,\n+\t\t\t\t *  the user probably wants to set it to the max value, right?\n+\t\t\t\t */\n+\t\t\t\tint newTimeSinceDeath = newTimespanInTicks < Integer.MAX_VALUE ? (int) newTimespanInTicks : Integer.MAX_VALUE;\n+\n+\t\t\t\tplayer.setStatistic(Statistic.TIME_SINCE_DEATH, newTimeSinceDeath);\n+\n+\t\t\t} else if (mode == ChangeMode.SET) {\n+\n+\t\t\t\t/*\n+\t\t\t\t * Since the statistic is actually the time since the last death of the player,\n+\t\t\t\t * it needs to be set to the difference between now and the new date.\n+\t\t\t\t * For example, if we were setting the player's last death to 1 day ago,\n+\t\t\t\t * the statistic would need to be 24 hours, and that's what this would give us.\n+\t\t\t\t * \n+\t\t\t\t * If the new date is in the future, the statistic will remain unchanged.\n+\t\t\t\t */\n+\n+\t\t\t\tDate newDate = ((Date) delta[0]);\n+\n+\t\t\t\tif (newDate.compareTo(now) < 1) {\n+\t\t\t\t\tlong newTimespanInTicks = ((Date) delta[0]).difference(now).getTicks_i();\n+\t\t\t\t\tint newTimeSinceDeath = newTimespanInTicks < Integer.MAX_VALUE ? (int) newTimespanInTicks : Integer.MAX_VALUE;", "originalCommit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e469b90bb3ebd213f5a67b93a01902aaa2d746d8", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\nindex 35a39362..fb20007a 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\n\n@@ -43,7 +43,7 @@ import ch.njol.util.coll.CollectionUtils;\n @Description({\"The time of the last death of a player.\", \n \t\t\t\t\"Any changes that would result in the death time being in the future are ignored.\",\n \t\t\t\t\"This expression affects the 'TIME_SINCE_DEATH' statistic.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Examples(\"send \\\"Your last death was at %the last death time of the player%!\\\" to player\")\n @Since(\"INSERT VERSION\")\n public class ExprLastDeathTime extends SimplePropertyExpression<Player, Date> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5OTI2NA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r410699264", "bodyText": "you could also do int newTimeSinceDeath = Math.min(newTimespanInTicks, Integer.MAX_VALUE);", "author": "Pikachu920", "createdAt": "2020-04-18T13:33:38Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death Time\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"Any changes that would result in the death time being in the future are ignored.\",\n+\t\t\t\t\"This expression affects the 'TIME_SINCE_DEATH' statistic.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeathTime extends SimplePropertyExpression<Player, Date> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeathTime.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] time of [the] last death of %players%\",\n+\t\t\t\t\"[the] time of [the] %players%'[s] last death\",\n+\t\t\t\t\"%players%'[s] last death time\",\n+\t\t\t\t\"[the] last death time of %players%\"\n+\t\t);\n+\t}\n+\n+\t@SuppressWarnings({\"null\", \"unchecked\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tsetExpr((Expression<Player>) exprs[0]);\n+\t\treturn true;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Date convert(Player player) {\n+\t\tlong ticksSinceDeath = player.getStatistic(Statistic.TIME_SINCE_DEATH);\n+\t\tif (ticksSinceDeath < 0) \n+\t\t\treturn null;\n+\t\tTimespan timeSinceDeath = Timespan.fromTicks_i(ticksSinceDeath);\n+\t\treturn Date.now().minus(timeSinceDeath);\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\t// Use a date for setting (e.g. 'set last death time of player to 1 hour ago')\n+\t\tif (mode == ChangeMode.SET)\n+\t\t\treturn CollectionUtils.array(Date.class);\n+\t\t// Use a timespan for adding/remove (e.g 'add 10 seconds to the time of the player's last death')\n+\t\tif (mode == ChangeMode.ADD || mode == ChangeMode.REMOVE)\n+\t\t\treturn CollectionUtils.array(Timespan.class);\n+\t\treturn null;\n+\t}\n+\n+\t/*\n+\t * Date#compare(date)\n+\t * This method returns whether the passed date is\n+\t * before, the same as, or after the date it's being compared to.\n+\t * A value less than 0 indicates that the passed date is AFTER the date it's being compared to.\n+\t * A value of 0 indicates that the passed date is the SAME the date it's being compared to.\n+\t * A value greater than 0 indicates that passed date is BEFORE the date it's being compared to.\n+\t * \n+\t * We use this method because we don't want the new death date to be in the future\n+\t */\n+\t@SuppressWarnings(\"null\")\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\n+\t\tif (delta == null)\n+\t\t\treturn;\n+\n+\t\tDate now = Date.now();\n+\n+\t\tfor (Player player : getExpr().getArray(e)) {\n+\t\t\tif (mode == ChangeMode.ADD) {\n+\n+\t\t\t\t// Get the current death time of the player.\n+\t\t\t\tDate deathTime = convert(player);\n+\n+\t\t\t\tdeathTime.add((Timespan) delta[0]);\n+\n+\t\t\t\tif (deathTime.compareTo(now) < 1) {\n+\t\t\t\t\t// Get the timespan representing the new time since death (in ticks).\n+\t\t\t\t\tlong newTimespanInTicks= deathTime.difference(now).getTicks_i();\n+\n+\t\t\t\t\t/*\n+\t\t\t\t\t *  Convert to int.\n+\t\t\t\t\t *  If it is greater than the max value for an integer,\n+\t\t\t\t\t *  the user probably wants to set it to the max value, right?\n+\t\t\t\t\t */\n+\t\t\t\t\tint newTimeSinceDeath = newTimespanInTicks < Integer.MAX_VALUE ? (int) newTimespanInTicks : Integer.MAX_VALUE;\n+\n+\t\t\t\t\tplayer.setStatistic(Statistic.TIME_SINCE_DEATH, newTimeSinceDeath);\n+\t\t\t\t}\n+\n+\t\t\t} else if (mode == ChangeMode.REMOVE) {\n+\n+\t\t\t\t// Get the current death time of the player.\n+\t\t\t\tDate deathTime = convert(player);\n+\n+\t\t\t\tdeathTime.subtract((Timespan) delta[0]);\n+\t\t\t\t\n+\t\t\t\t// Get the timespan representing the new time since death (in ticks).\n+\t\t\t\tlong newTimespanInTicks= deathTime.difference(now).getTicks_i();\n+\n+\t\t\t\t/*\n+\t\t\t\t *  Convert to int.\n+\t\t\t\t *  If it is greater than the max value for an integer,\n+\t\t\t\t *  the user probably wants to set it to the max value, right?\n+\t\t\t\t */\n+\t\t\t\tint newTimeSinceDeath = newTimespanInTicks < Integer.MAX_VALUE ? (int) newTimespanInTicks : Integer.MAX_VALUE;", "originalCommit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e469b90bb3ebd213f5a67b93a01902aaa2d746d8", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\nindex 35a39362..fb20007a 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\n\n@@ -43,7 +43,7 @@ import ch.njol.util.coll.CollectionUtils;\n @Description({\"The time of the last death of a player.\", \n \t\t\t\t\"Any changes that would result in the death time being in the future are ignored.\",\n \t\t\t\t\"This expression affects the 'TIME_SINCE_DEATH' statistic.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Examples(\"send \\\"Your last death was at %the last death time of the player%!\\\" to player\")\n @Since(\"INSERT VERSION\")\n public class ExprLastDeathTime extends SimplePropertyExpression<Player, Date> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5OTU1OA==", "url": "https://github.com/SkriptLang/Skript/pull/2907#discussion_r410699558", "bodyText": "missing a space before =", "author": "Pikachu920", "createdAt": "2020-04-18T13:36:50Z", "path": "src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.Statistic;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.ExpressionType;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.skript.util.Date;\n+import ch.njol.skript.util.Timespan;\n+import ch.njol.util.Kleenean;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Last Death Time\")\n+@Description({\"The time of the last death of a player.\", \n+\t\t\t\t\"Any changes that would result in the death time being in the future are ignored.\",\n+\t\t\t\t\"This expression affects the 'TIME_SINCE_DEATH' statistic.\"})\n+@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Since(\"INSERT VERSION\")\n+public class ExprLastDeathTime extends SimplePropertyExpression<Player, Date> {\n+\n+\tstatic {\n+\t\tSkript.registerExpression(ExprLastDeathTime.class, Date.class, ExpressionType.PROPERTY, \n+\t\t\t\t\"[the] time of [the] last death of %players%\",\n+\t\t\t\t\"[the] time of [the] %players%'[s] last death\",\n+\t\t\t\t\"%players%'[s] last death time\",\n+\t\t\t\t\"[the] last death time of %players%\"\n+\t\t);\n+\t}\n+\n+\t@SuppressWarnings({\"null\", \"unchecked\"})\n+\t@Override\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tsetExpr((Expression<Player>) exprs[0]);\n+\t\treturn true;\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Date convert(Player player) {\n+\t\tlong ticksSinceDeath = player.getStatistic(Statistic.TIME_SINCE_DEATH);\n+\t\tif (ticksSinceDeath < 0) \n+\t\t\treturn null;\n+\t\tTimespan timeSinceDeath = Timespan.fromTicks_i(ticksSinceDeath);\n+\t\treturn Date.now().minus(timeSinceDeath);\n+\t}\n+\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\t// Use a date for setting (e.g. 'set last death time of player to 1 hour ago')\n+\t\tif (mode == ChangeMode.SET)\n+\t\t\treturn CollectionUtils.array(Date.class);\n+\t\t// Use a timespan for adding/remove (e.g 'add 10 seconds to the time of the player's last death')\n+\t\tif (mode == ChangeMode.ADD || mode == ChangeMode.REMOVE)\n+\t\t\treturn CollectionUtils.array(Timespan.class);\n+\t\treturn null;\n+\t}\n+\n+\t/*\n+\t * Date#compare(date)\n+\t * This method returns whether the passed date is\n+\t * before, the same as, or after the date it's being compared to.\n+\t * A value less than 0 indicates that the passed date is AFTER the date it's being compared to.\n+\t * A value of 0 indicates that the passed date is the SAME the date it's being compared to.\n+\t * A value greater than 0 indicates that passed date is BEFORE the date it's being compared to.\n+\t * \n+\t * We use this method because we don't want the new death date to be in the future\n+\t */\n+\t@SuppressWarnings(\"null\")\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\n+\t\tif (delta == null)\n+\t\t\treturn;\n+\n+\t\tDate now = Date.now();\n+\n+\t\tfor (Player player : getExpr().getArray(e)) {\n+\t\t\tif (mode == ChangeMode.ADD) {\n+\n+\t\t\t\t// Get the current death time of the player.\n+\t\t\t\tDate deathTime = convert(player);\n+\n+\t\t\t\tdeathTime.add((Timespan) delta[0]);\n+\n+\t\t\t\tif (deathTime.compareTo(now) < 1) {\n+\t\t\t\t\t// Get the timespan representing the new time since death (in ticks).\n+\t\t\t\t\tlong newTimespanInTicks= deathTime.difference(now).getTicks_i();", "originalCommit": "6ba7107a3db2e0979508cdf573b99dd3643c9712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e469b90bb3ebd213f5a67b93a01902aaa2d746d8", "chunk": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java b/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\nindex 35a39362..fb20007a 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprLastDeathTime.java\n\n@@ -43,7 +43,7 @@ import ch.njol.util.coll.CollectionUtils;\n @Description({\"The time of the last death of a player.\", \n \t\t\t\t\"Any changes that would result in the death time being in the future are ignored.\",\n \t\t\t\t\"This expression affects the 'TIME_SINCE_DEATH' statistic.\"})\n-@Examples(\"send \\\"Your last death was %last death of player%!\\\" to player\")\n+@Examples(\"send \\\"Your last death was at %the last death time of the player%!\\\" to player\")\n @Since(\"INSERT VERSION\")\n public class ExprLastDeathTime extends SimplePropertyExpression<Player, Date> {\n \n"}}, {"oid": "e469b90bb3ebd213f5a67b93a01902aaa2d746d8", "url": "https://github.com/SkriptLang/Skript/commit/e469b90bb3ebd213f5a67b93a01902aaa2d746d8", "message": "Make Requested Changes", "committedDate": "2020-04-27T12:28:11Z", "type": "commit"}, {"oid": "6fede1f1e574885e4c20f8ca3554512ed4b18f32", "url": "https://github.com/SkriptLang/Skript/commit/6fede1f1e574885e4c20f8ca3554512ed4b18f32", "message": "Merge branch 'master' into APickledWalrus-time-exprs", "committedDate": "2020-06-22T06:54:57Z", "type": "commit"}, {"oid": "3ec37e850f15e90116e7d4ce7157c616d83ef4fc", "url": "https://github.com/SkriptLang/Skript/commit/3ec37e850f15e90116e7d4ce7157c616d83ef4fc", "message": "Remove ExprLastDeathTime, clean up ExprTimeSince\n\nIt was decided that ExprLastDeathTime should just be handled in a to-be-made ExprStatistic", "committedDate": "2020-07-16T00:58:06Z", "type": "commit"}, {"oid": "f6345e08b47a2d871ac0a6b5e069e7fed1176552", "url": "https://github.com/SkriptLang/Skript/commit/f6345e08b47a2d871ac0a6b5e069e7fed1176552", "message": "Merge branch 'master' into APickledWalrus-time-exprs", "committedDate": "2020-07-16T01:00:19Z", "type": "commit"}]}