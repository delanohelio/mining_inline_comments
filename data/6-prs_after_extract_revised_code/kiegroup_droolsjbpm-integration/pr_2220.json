{"pr_number": 2220, "pr_title": "[JBPM-9178] Immutable SpringBoot Deployment / Adding controller conne\u2026", "pr_createdAt": "2020-09-02T10:29:49Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0OTk0Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483449946", "bodyText": "Red Hat header/copyright is missing", "author": "afalhambra", "createdAt": "2020-09-04T07:52:08Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/EmbeddedKieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.kie.server.springboot;", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI1ODMwMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484258301", "bodyText": "done", "author": "elguardian", "createdAt": "2020-09-07T08:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0OTk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/EmbeddedKieJar.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/EmbeddedKieJar.java\nindex 6ce4fadf5..efc5b712b 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/EmbeddedKieJar.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/EmbeddedKieJar.java\n\n@@ -1,7 +1,24 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.kie.server.springboot;\n \n import org.kie.server.api.model.ReleaseId;\n \n+\n public class EmbeddedKieJar {\n \n     private String groupId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NjU0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483466547", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployments\", havingValue=\"false\", matchIfMissing = true)", "author": "afalhambra", "createdAt": "2020-09-04T08:23:52Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MDAxOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484260018", "bodyText": "change to autoScanDeployments", "author": "elguardian", "createdAt": "2020-09-07T08:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NjU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NjczMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483466731", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployments\", havingValue = \"true\")", "author": "afalhambra", "createdAt": "2020-09-04T08:24:12Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MDExMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484260110", "bodyText": "chage to autoScanDeployments", "author": "elguardian", "createdAt": "2020-09-07T08:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NjczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4MTkzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483481932", "bodyText": "might be done in a functional way\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(resource.isPresent()) {\n          \n          \n            \n                                files.add(resource.get());\n          \n          \n            \n                            }\n          \n          \n            \n                            resource.ifPresent(files::add);", "author": "afalhambra", "createdAt": "2020-09-04T08:51:59Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjYzMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484312633", "bodyText": "this is not changed yet", "author": "afalhambra", "createdAt": "2020-09-07T09:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4MTkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NzkzNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483497934", "bodyText": "out must be closed", "author": "afalhambra", "createdAt": "2020-09-04T09:20:59Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return files;\n+    }\n+\n+    private Optional<KieContainerResource> scanPossibleDeployment(InputStream inputStream) {\n+        boolean isDeployable = false;\n+        KieContainerResource resource = null;\n+        ZipEntry entry = null;\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                if(\"META-INF/kmodule.xml\".contentEquals(entry.getName())) {\n+                    isDeployable = true;\n+                }\n+                if(entry.getName().startsWith(\"META-INF/maven\") && entry.getName().endsWith(\"pom.xml\")) {\n+                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                    byte[] buffer = new byte[1024];\n+\n+                    int read = 0;\n+                    while ((read = zipFile.read(buffer)) > 0) {\n+                        out.write(buffer, 0, read);\n+                    }", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MDYyNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484260626", "bodyText": "done", "author": "elguardian", "createdAt": "2020-09-07T08:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ5NzkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMDU5Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483500596", "bodyText": "If it is deployable=true, it never should empty? I mean Optional.ofNullable(resource) might be returned an optional empty element. If that's the case, shouldn't we raise an exception instead?", "author": "afalhambra", "createdAt": "2020-09-04T09:25:54Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }\n+                Optional<KieContainerResource> resource = scanPossibleDeployment(new ByteArrayInputStream(out.toByteArray()));\n+                if(resource.isPresent()) {\n+                    files.add(resource.get());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return files;\n+    }\n+\n+    private Optional<KieContainerResource> scanPossibleDeployment(InputStream inputStream) {\n+        boolean isDeployable = false;\n+        KieContainerResource resource = null;\n+        ZipEntry entry = null;\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                if(\"META-INF/kmodule.xml\".contentEquals(entry.getName())) {\n+                    isDeployable = true;\n+                }\n+                if(entry.getName().startsWith(\"META-INF/maven\") && entry.getName().endsWith(\"pom.xml\")) {\n+                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                    byte[] buffer = new byte[1024];\n+\n+                    int read = 0;\n+                    while ((read = zipFile.read(buffer)) > 0) {\n+                        out.write(buffer, 0, read);\n+                    }\n+\n+                    PomModel model = MinimalPomParser.parse(entry.getName(), new ByteArrayInputStream(out.toByteArray()));\n+                    AFReleaseId pomReleaseId = model.getReleaseId();\n+                    ReleaseId releaseId = new ReleaseId(pomReleaseId.getGroupId(), pomReleaseId.getArtifactId(), pomReleaseId.getVersion());\n+                    resource = new KieContainerResource(releaseId);\n+                    resource.setContainerId(releaseId.getArtifactId() + \"-\" + releaseId.getVersion());\n+                    resource.setStatus(KieContainerStatus.STARTED);\n+                    resource.setResolvedReleaseId(releaseId);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return isDeployable ? Optional.ofNullable(resource) : Optional.empty();", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMzIwOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484313209", "bodyText": "what about this?", "author": "afalhambra", "createdAt": "2020-09-07T09:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMDU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMyMDE5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484320195", "bodyText": "isDeployable does not guarantaed to have the pom so you don't know about the resource being found or not.", "author": "elguardian", "createdAt": "2020-09-07T09:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMDU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTUyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483501523", "bodyText": "out must be closed", "author": "afalhambra", "createdAt": "2020-09-04T09:27:43Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n+    public List<KieContainerResource> buildAutoScanDeployments(KieServerProperties kieServerProperties) throws IOException {\n+        ApplicationHome appHome = new ApplicationHome();\n+        final String folder = \"BOOT-INF/classes/KIE-INF/lib/\";\n+        File root = appHome.getSource();\n+        return discoverDeployments(folder, new FileInputStream(root));\n+    }\n+\n+    private List<KieContainerResource>  discoverDeployments(String folder, InputStream inputStream) {\n+        List<KieContainerResource> files = new ArrayList<>();\n+        try (ZipInputStream zipFile = new ZipInputStream(inputStream)) {\n+\n+            ZipEntry entry = null;\n+            while ((entry = zipFile.getNextEntry()) != null) {\n+                // we filter outside folder\n+                if(!entry.getName().startsWith(folder)) {\n+                    continue;\n+                }\n+\n+                int available = zipFile.available();\n+                if (available <= 0) {\n+                    continue;\n+                }\n+\n+                ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                byte[] buffer = new byte[1024];\n+\n+                int read = 0;\n+                while ((read = zipFile.read(buffer)) > 0) {\n+                    out.write(buffer, 0, read);\n+                }", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjgyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484312823", "bodyText": "not closed yet", "author": "afalhambra", "createdAt": "2020-09-07T09:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDQ2Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483504463", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class InmutableContainerStartupStrategy implements StartupStrategy {\n          \n          \n            \n            public class ImmutableContainerStartupStrategy implements StartupStrategy {", "author": "afalhambra", "createdAt": "2020-09-04T09:33:21Z", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -16,31 +16,65 @@\n \n package org.kie.server.services.impl;\n \n+import static java.util.stream.Collectors.toSet;\n+\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.kie.server.api.KieServerConstants;\n import org.kie.server.api.model.KieContainerResource;\n import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.KieServerController;\n import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieControllerNotConnectedException;\n+import org.kie.server.services.api.KieControllerNotDefinedException;\n import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.controller.ControllerConnectRunnable;\n import org.kie.server.services.impl.storage.KieServerState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class InmutableContainerStartupStrategy implements StartupStrategy {", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjExNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484312117", "bodyText": "this not resolved yet", "author": "afalhambra", "createdAt": "2020-09-07T09:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java b/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java\nindex 6a05fc84d..0e23cdb07 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java\n\n@@ -18,6 +18,7 @@ package org.kie.server.services.impl;\n \n import static java.util.stream.Collectors.toSet;\n \n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNTAyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483505023", "bodyText": "could also use below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.kieContainers = kieContainer.stream().collect(toSet());\n          \n          \n            \n                    this.kieContainers = new HashSet<>(kieContainer);", "author": "afalhambra", "createdAt": "2020-09-04T09:34:19Z", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java", "diffHunk": "@@ -16,31 +16,65 @@\n \n package org.kie.server.services.impl;\n \n+import static java.util.stream.Collectors.toSet;\n+\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.kie.server.api.KieServerConstants;\n import org.kie.server.api.model.KieContainerResource;\n import org.kie.server.api.model.KieServerInfo;\n+import org.kie.server.controller.api.KieServerController;\n import org.kie.server.controller.api.model.KieServerSetup;\n+import org.kie.server.services.api.KieControllerNotConnectedException;\n+import org.kie.server.services.api.KieControllerNotDefinedException;\n import org.kie.server.services.api.StartupStrategy;\n+import org.kie.server.services.impl.controller.ControllerConnectRunnable;\n import org.kie.server.services.impl.storage.KieServerState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class InmutableContainerStartupStrategy implements StartupStrategy {\n \n+    private static final Logger logger = LoggerFactory.getLogger(InmutableContainerStartupStrategy.class);\n+\n+    private Set<KieContainerResource> kieContainers;\n+\n+    public InmutableContainerStartupStrategy(List<KieContainerResource> kieContainer) {\n+        this.kieContainers = kieContainer.stream().collect(toSet());", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MTQ5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484261495", "bodyText": "done", "author": "elguardian", "createdAt": "2020-09-07T08:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNTAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java b/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java\nindex 6a05fc84d..0e23cdb07 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/InmutableContainerStartupStrategy.java\n\n@@ -18,6 +18,7 @@ package org.kie.server.services.impl;\n \n import static java.util.stream.Collectors.toSet;\n \n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMTc3NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483521775", "bodyText": "why this change?", "author": "afalhambra", "createdAt": "2020-09-04T10:07:43Z", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/storage/memory/InMemoryKieServerStateRepository.java", "diffHunk": "@@ -42,7 +42,6 @@ public KieServerState load(String serverId) {\n             KieServerState newState = new KieServerState();\n             newState.setConfiguration(new KieServerConfig());\n             newState.setContainers(new HashSet<>());\n-            newState.setControllers(new HashSet<>());", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MTk0OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484261948", "bodyText": "It modifies env variables so you cannot get the url controller from application properties.", "author": "elguardian", "createdAt": "2020-09-07T08:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMTc3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzU2OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483583569", "bodyText": "I would remove matchIfMissing. By default, if this property is not set it should autoScan deployments\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\")", "author": "afalhambra", "createdAt": "2020-09-04T12:27:14Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MjQzMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484262431", "bodyText": "I think it is more convenient but it seems consultants want to set the container name. that is not possible automatically.", "author": "elguardian", "createdAt": "2020-09-07T08:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzkyNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r483583924", "bodyText": "Same as before, by default, it should scan deployments automatically when this property is not set\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")\n          \n          \n            \n                @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\", matchIfMissing = true)", "author": "afalhambra", "createdAt": "2020-09-04T12:27:59Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java", "diffHunk": "@@ -128,6 +144,96 @@ public KieServerRegistry kieServerRegistry(KieServer server) {\n         return kieServer.getServerRegistry();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n+        return kieServerProperties.getDeployments().stream().map(k -> {\n+            KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n+            resource.setResolvedReleaseId(k.getReleaseId());\n+            resource.setContainerAlias(k.getAlias());\n+            resource.setReleaseId(k.getReleaseId());\n+            resource.setStatus(KieContainerStatus.STARTED);\n+            return resource;\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name=\"autoScanEmbeddedDeployments\")\n+    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue = \"true\")", "originalCommit": "d304d7b94fccd5b39a8e02a22411f588791288d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MjU1NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2220#discussion_r484262555", "bodyText": "same as above", "author": "elguardian", "createdAt": "2020-09-07T08:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "4d13074990bb63e52a6e142e28c85936f049ba72", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\nindex 077dc8306..60447a8dd 100644\n--- a/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n+++ b/kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration/src/main/java/org/kie/server/springboot/autoconfiguration/KieServerAutoConfiguration.java\n\n@@ -146,7 +146,7 @@ public class KieServerAutoConfiguration extends AbstractJaxrsClassesScanServer {\n \n     @Bean\n     @ConditionalOnMissingBean(name=\"embeddedDeployments\")\n-    @ConditionalOnProperty(name = \"kieserver.autosScanDeployements\", havingValue=\"false\", matchIfMissing = true)\n+    @ConditionalOnProperty(name = \"kieserver.autoScanDeployments\", havingValue=\"false\", matchIfMissing = true)\n     public List<KieContainerResource> buildDeployments(KieServerProperties kieServerProperties) {\n         return kieServerProperties.getDeployments().stream().map(k -> {\n             KieContainerResource resource = new KieContainerResource(k.getContainerId(), k.getReleaseId());\n"}}, {"oid": "4d13074990bb63e52a6e142e28c85936f049ba72", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4d13074990bb63e52a6e142e28c85936f049ba72", "message": "[JBPM-9178] Immutable Spring boot Image / autoscan deployments", "committedDate": "2020-09-07T08:08:44Z", "type": "forcePushed"}, {"oid": "e99a279d1d8f1fb5e67f63a5bf6de469b178658a", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e99a279d1d8f1fb5e67f63a5bf6de469b178658a", "message": "[JBPM-9178] Immutable Spring boot Image / autoscan deployments", "committedDate": "2020-09-07T09:50:03Z", "type": "forcePushed"}, {"oid": "223415ef3fa95e36dc8046c16b4367931cde09a5", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/223415ef3fa95e36dc8046c16b4367931cde09a5", "message": "[JBPM-9178] Immutable SpringBoot Deployment / Adding controller connection capabilities", "committedDate": "2020-09-07T09:59:54Z", "type": "commit"}, {"oid": "223415ef3fa95e36dc8046c16b4367931cde09a5", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/223415ef3fa95e36dc8046c16b4367931cde09a5", "message": "[JBPM-9178] Immutable SpringBoot Deployment / Adding controller connection capabilities", "committedDate": "2020-09-07T09:59:54Z", "type": "forcePushed"}]}