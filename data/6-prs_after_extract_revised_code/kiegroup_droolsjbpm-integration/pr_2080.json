{"pr_number": 2080, "pr_title": "[JBPM-9129] Start process without triggering a start node", "pr_createdAt": "2020-05-04T11:36:13Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080", "timeline": [{"oid": "0c2b02781ec214db19f8d3c66bab7b28a41e6a7a", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0c2b02781ec214db19f8d3c66bab7b28a41e6a7a", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-05T08:28:55Z", "type": "forcePushed"}, {"oid": "a7a0dabf30be38e1bbb5829315d4723d430d7e63", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/a7a0dabf30be38e1bbb5829315d4723d430d7e63", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-11T18:24:46Z", "type": "forcePushed"}, {"oid": "ad53c8ab7e0c8bc1cf4af16ea25035b5286f06fe", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ad53c8ab7e0c8bc1cf4af16ea25035b5286f06fe", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-17T13:36:22Z", "type": "forcePushed"}, {"oid": "adda50081692f245c8ae6a3cb12aaf32eae037ce", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/adda50081692f245c8ae6a3cb12aaf32eae037ce", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-19T07:03:22Z", "type": "forcePushed"}, {"oid": "02b03778769c5240608eb7b9b266dfd7ae950d67", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/02b03778769c5240608eb7b9b266dfd7ae950d67", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-19T08:18:45Z", "type": "forcePushed"}, {"oid": "d3c8dd5a247657112212859f04c3993fd5d37b8c", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/d3c8dd5a247657112212859f04c3993fd5d37b8c", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-19T12:55:38Z", "type": "forcePushed"}, {"oid": "f95467ce46d63713a57cf9e1901155d9b5cdc68c", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f95467ce46d63713a57cf9e1901155d9b5cdc68c", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-19T16:15:11Z", "type": "forcePushed"}, {"oid": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-21T09:54:03Z", "type": "forcePushed"}, {"oid": "64c41953b7b91b76ef84b6049092538d5b2347fc", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/64c41953b7b91b76ef84b6049092538d5b2347fc", "message": "[JBPM-9129] Start process without triggering a start node", "committedDate": "2020-05-24T13:25:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NzQ2OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429247469", "bodyText": "Please remove auto-generated TODO comment.", "author": "afalhambra", "createdAt": "2020-05-22T13:32:24Z", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -78,6 +78,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }\n+\n+            @Override\n+            public String getNodeUniqueId() {\n+                // TODO Auto-generated method stub", "originalCommit": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNTY1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430215656", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-26T07:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NzQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "chunk": "diff --git a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\nindex 88ae1ccfc..aef7f4ee6 100644\n--- a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n+++ b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n\n@@ -79,12 +79,6 @@ public class BPMN2SimulationDataProviderTest {\n                 return 2;\n             }\n \n-            @Override\n-            public String getUniqueId() {\n-                // TODO Auto-generated method stub\n-                return null;\n-            }\n-\n             @Override\n             public String getNodeUniqueId() {\n                 // TODO Auto-generated method stub\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0NzU0NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429247544", "bodyText": "Please remove auto-generated TODO comment.", "author": "afalhambra", "createdAt": "2020-05-22T13:32:30Z", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -136,6 +148,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }\n+\n+            @Override\n+            public String getNodeUniqueId() {\n+                // TODO Auto-generated method stub", "originalCommit": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "chunk": "diff --git a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\nindex 88ae1ccfc..aef7f4ee6 100644\n--- a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n+++ b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n\n@@ -149,12 +143,6 @@ public class BPMN2SimulationDataProviderTest {\n                 return 2;\n             }\n \n-            @Override\n-            public String getUniqueId() {\n-                // TODO Auto-generated method stub\n-                return null;\n-            }\n-\n             @Override\n             public String getNodeUniqueId() {\n                 // TODO Auto-generated method stub\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4NTkwMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429285900", "bodyText": "Please remove this. There is no such method defined in interface Node", "author": "afalhambra", "createdAt": "2020-05-22T14:37:52Z", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -78,6 +78,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }", "originalCommit": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "chunk": "diff --git a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\nindex 88ae1ccfc..aef7f4ee6 100644\n--- a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n+++ b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n\n@@ -79,12 +79,6 @@ public class BPMN2SimulationDataProviderTest {\n                 return 2;\n             }\n \n-            @Override\n-            public String getUniqueId() {\n-                // TODO Auto-generated method stub\n-                return null;\n-            }\n-\n             @Override\n             public String getNodeUniqueId() {\n                 // TODO Auto-generated method stub\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4Njk5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429286999", "bodyText": "Same here. No such method defined in interface Node", "author": "afalhambra", "createdAt": "2020-05-22T14:39:39Z", "path": "jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java", "diffHunk": "@@ -136,6 +148,18 @@ public Object getMetaData(String name) {\n             public long getId() {\n                 return 2;\n             }\n+\n+            @Override\n+            public String getUniqueId() {\n+                // TODO Auto-generated method stub\n+                return null;\n+            }", "originalCommit": "b1ce80ccf64cfc05700a3e13039b4d3a942bdc5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "chunk": "diff --git a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\nindex 88ae1ccfc..aef7f4ee6 100644\n--- a/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n+++ b/jbpm-simulation/src/test/java/org/jbpm/simulation/BPMN2SimulationDataProviderTest.java\n\n@@ -149,12 +143,6 @@ public class BPMN2SimulationDataProviderTest {\n                 return 2;\n             }\n \n-            @Override\n-            public String getUniqueId() {\n-                // TODO Auto-generated method stub\n-                return null;\n-            }\n-\n             @Override\n             public String getNodeUniqueId() {\n                 // TODO Auto-generated method stub\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTU5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429791593", "bodyText": "Why startProcessWithCorrelationKeyFromNodeIds method name? why not startProcessFromNodeIds method name for consistency and coherency across classes?", "author": "afalhambra", "createdAt": "2020-05-25T08:04:31Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "diffHunk": "@@ -196,6 +199,96 @@ public Response startProcess(@javax.ws.rs.core.Context HttpHeaders headers,\n         }\n     }\n \n+    @ApiOperation(value = \"Starts a new process instance from the specific nodes\",\n+            response=Long.class, code=201)\n+    @ApiResponses(value = {@ApiResponse(code = 201, response = Long.class, message = \"Process instance created\",\n+                                        examples = @Example(value = {@ExampleProperty(mediaType = JSON, value = LONG_RESPONSE_JSON),\n+                                                                     @ExampleProperty(mediaType = XML, value = LONG_RESPONSE_XML)})),\n+            @ApiResponse(code = 500, message = \"Unexpected error\"),\n+            @ApiResponse(code = 404, message = \"Process ID or Container Id not found\"),\n+            @ApiResponse(code = 403, message = \"User does not have permission to access this asset\")})\n+    @POST\n+    @Path(START_PROCESS_FROM_NODES_POST_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response startProcessFromNodeIds(@javax.ws.rs.core.Context HttpHeaders headers,\n+            @ApiParam(value = \"container id where the process definition resides\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId, \n+            @ApiParam(value = \"process instance id that new instance should be created from\", required = true, example = \"evaluation\") @PathParam(PROCESS_ID) String processId, \n+                                            @ApiParam(value = \"optional map of process variables\", required = false) @DefaultValue(\"\") String payload) {\n+\n+        Variant v = getVariant(headers);\n+        String type = getContentType(headers);\n+        Header conversationIdHeader = buildConversationIdHeader(containerId, context, headers);\n+        \n+        try {\n+            String response = processServiceBase.startProcessFromNodeIds(containerId, processId, payload, type);\n+\n+            logger.debug(\"Returning CREATED response with content '{}'\", response);\n+            return createResponse(response, v, Response.Status.CREATED, conversationIdHeader);\n+        } catch (DeploymentNotActiveException e) {\n+            return badRequest(\n+                    e.getMessage(), v);\n+        } catch (DeploymentNotFoundException e) {\n+            return notFound(\n+                    MessageFormat.format(CONTAINER_NOT_FOUND, containerId), v);\n+        } catch (ProcessDefinitionNotFoundException e) {\n+            return notFound(\n+                    MessageFormat.format(PROCESS_DEFINITION_NOT_FOUND, processId, containerId), v);\n+        } catch (SecurityException e) {\n+            return forbidden(errorMessage(e, e.getMessage()), v, conversationIdHeader);\n+        } catch (Exception e) {\n+            logger.error(\"Unexpected error during processing {}\", e.getMessage(), e);\n+            return internalServerError(\n+                    MessageFormat.format(CREATE_RESPONSE_ERROR, e.getMessage()), v);\n+        }\n+    }\n+\n+    @ApiOperation(value = \"Starts a new process instance from the specific nodes\",\n+                  response = Long.class, code = 201)\n+    @ApiResponses(value = {@ApiResponse(code = 201, response = Long.class, message = \"Process instance created\",\n+                                        examples = @Example(value = {@ExampleProperty(mediaType = JSON, value = LONG_RESPONSE_JSON),\n+                                                                     @ExampleProperty(mediaType = XML, value = LONG_RESPONSE_XML)})),\n+                           @ApiResponse(code = 500, message = \"Unexpected error\"),\n+                           @ApiResponse(code = 404, message = \"Process ID or Container Id not found\"),\n+                           @ApiResponse(code = 403, message = \"User does not have permission to access this asset\")})\n+    @POST\n+    @Path(START_PROCESS_FROM_NODES_WITH_CORRELATION_KEY_POST_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response startProcessWithCorrelationKeyFromNodeIds(@javax.ws.rs.core.Context HttpHeaders headers,", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMTg0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429831847", "bodyText": "Not really useful as it will print out memory address only - no toString method is implemented in NodeInstanceList class", "author": "afalhambra", "createdAt": "2020-05-25T09:24:37Z", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java", "diffHunk": "@@ -289,6 +290,18 @@ public NodeInstanceList getProcessInstanceHistory(long processInstanceId, Boolea\n         return nodeInstanceList;\n     }\n \n+    public NodeInstanceList getProcessInstanceFullHistoryByType(long processInstanceId, String entryType, Integer page, Integer pageSize) {\n+\n+        logger.debug(\"About to search for node instances with page {} and page size {}\", page, pageSize);\n+        Collection<NodeInstanceDesc> result = null;\n+\n+        result = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.valueOf(entryType), buildQueryContext(page, pageSize));\n+\n+        NodeInstanceList nodeInstanceList = convertToNodeInstanceList(result);\n+        logger.debug(\"Returning result of node instances search: {}\", nodeInstanceList);", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIyODQ2NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430228464", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-26T08:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMTg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "016e127b0b955125ca76c8a5e3c2f96c79cdcbd6", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java\nindex eaf36ca09..f855f5caf 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/RuntimeDataServiceBase.java\n\n@@ -296,10 +296,7 @@ public class RuntimeDataServiceBase {\n         Collection<NodeInstanceDesc> result = null;\n \n         result = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.valueOf(entryType), buildQueryContext(page, pageSize));\n-\n-        NodeInstanceList nodeInstanceList = convertToNodeInstanceList(result);\n-        logger.debug(\"Returning result of node instances search: {}\", nodeInstanceList);\n-        return nodeInstanceList;\n+        return convertToNodeInstanceList(result);\n     }\n \n     public VariableInstanceList getVariablesCurrentState(long processInstanceId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MDkxMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429840911", "bodyText": "Unnecessary unboxing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                        assertTrue(processInstanceId > 0);", "author": "afalhambra", "createdAt": "2020-05-25T09:43:06Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTA5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429841095", "bodyText": "Unnecessary unboxing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                        assertTrue(processInstanceId > 0);", "author": "afalhambra", "createdAt": "2020-05-25T09:43:30Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTQ5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429841493", "bodyText": "Can be replaced with method reference\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n          \n          \n            \n                        String[] nodeIds = list.stream().map(NodeInstance::getNodeId).toArray(String[]::new);", "author": "afalhambra", "createdAt": "2020-05-25T09:44:22Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjQzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430216432", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-26T07:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTc1Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429841757", "bodyText": "Can be replaced with method reference\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n          \n          \n            \n                        String[] nodeIds = list.stream().map(NodeInstance::getNodeId).toArray(String[]::new);", "author": "afalhambra", "createdAt": "2020-05-25T09:44:52Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjg0NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430216845", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-26T07:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MjExNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429842116", "bodyText": "Member field never used. Please remove.", "author": "afalhambra", "createdAt": "2020-05-25T09:45:35Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjU4Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430216586", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-26T07:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MjExNg=="}], "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MzU2Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429843566", "bodyText": "Redundant type declaration\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "author": "afalhambra", "createdAt": "2020-05-25T09:48:27Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzAyNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430217026", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-26T07:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MzU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0Mzg4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r429843880", "bodyText": "Redundant type declaration\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "author": "afalhambra", "createdAt": "2020-05-25T09:49:06Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5OTk2OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430199968", "bodyText": "Can you please add assertions making sure that the process is running and the nodes supplied above are active?", "author": "sutaakar", "createdAt": "2020-05-26T07:10:44Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzk0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430217947", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-26T07:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5OTk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMDgyOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430200829", "bodyText": "Please move the fail statement after process instance abortion, this way the process instance is not aborted when an exception is thrown.", "author": "sutaakar", "createdAt": "2020-05-26T07:12:31Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMTIxMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430201211", "bodyText": "Same as above.", "author": "sutaakar", "createdAt": "2020-05-26T07:13:14Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters, nodeIds);\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+            if (processInstanceId != null) {\n+                processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            }\n+        }\n+    }\n+\n+    @Test()\n+    public void testStartWithCorrelationKeyProcess() {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, parameters);\n+        try {\n+            assertNotNull(processInstanceId);\n+            assertTrue(processInstanceId.longValue() > 0);\n+\n+            // Process instance is running and is active.\n+            ProcessInstance processInstance = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertNotNull(processInstance);\n+            assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.getState().intValue());\n+\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+\n+            List<NodeInstance> list = this.processClient.findNodeInstancesByType(CONTAINER_ID_RESTART, processInstanceId, \"ABORTED\", 0, 10);\n+            String[] nodeIds = list.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+            CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+            CorrelationKey firstKey = correlationKeyFactory.newCorrelationKey(\"mysimlekey\");\n+            processInstanceId = null;\n+            processInstanceId = processClient.startProcessFromNodeIds(CONTAINER_ID_RESTART, PROCESS_ID_RESTART, firstKey, parameters, nodeIds);\n+\n+            ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+            assertThat(pi.getCorrelationKey(), is(\"mysimlekey\"));\n+            processClient.abortProcessInstance(CONTAINER_ID_RESTART, processInstanceId);\n+        } catch (Exception e) {\n+            fail(e.getMessage());", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMjIyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430202223", "bodyText": "May be better to rename the test method to something like testStartProcessFromNodeId to distinguish it from usual process start.", "author": "sutaakar", "createdAt": "2020-05-26T07:15:26Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.internal.KieInternalServices;\n+import org.kie.internal.process.CorrelationKey;\n+import org.kie.internal.process.CorrelationKeyFactory;\n+import org.kie.internal.runtime.conf.RuntimeStrategy;\n+import org.kie.server.api.KieServerConstants;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.instance.NodeInstance;\n+import org.kie.server.api.model.instance.ProcessInstance;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static final KieServerConfigItem PPI_RUNTIME_STRATEGY = new KieServerConfigItem(KieServerConstants.PCFG_RUNTIME_STRATEGY, RuntimeStrategy.PER_PROCESS_INSTANCE.name(), String.class.getName());\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n+            \"1.0.0.Final\");\n+\n+    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/restart-project\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID_RESTART, releaseId, PPI_RUNTIME_STRATEGY);\n+    }\n+\n+\n+    @Test()\n+    public void testStartProcess() {", "originalCommit": "64c41953b7b91b76ef84b6049092538d5b2347fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzI5Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430217292", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-26T07:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMjIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "02c5868299940325538a2df7ddfc880c98b14e96", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\nindex 5de1432e8..1aa494659 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/StartProcessServiceIntegrationTest.java\n\n@@ -47,8 +47,6 @@ public class StartProcessServiceIntegrationTest extends JbpmKieServerBaseIntegra\n     private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"restart-project\",\n             \"1.0.0.Final\");\n \n-    protected static final String SORT_BY_PROCESS_ID = \"ProcessId\";\n-\n     @BeforeClass\n     public static void buildAndDeployArtifacts() {\n \n"}}, {"oid": "02c5868299940325538a2df7ddfc880c98b14e96", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/02c5868299940325538a2df7ddfc880c98b14e96", "message": "[JBPM-9129] Start process without triggering a start node\n\nadding rest api to provide access to start process from arbitary nodes.", "committedDate": "2020-05-26T07:47:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MDQ1OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2080#discussion_r430940459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                          @ApiParam(value = \"entry type from the history\", required = false,\n          \n          \n            \n                                                                    example = \"123\") @QueryParam(PROCESS_INST_HISTORY_TYPE) String processInstHistoryType,\n          \n          \n            \n                       @ApiParam(value = \"entry type from the history\", required = false, example = \"START\") @QueryParam(PROCESS_INST_HISTORY_TYPE) String processInstHistoryType,", "author": "sutaakar", "createdAt": "2020-05-27T08:20:56Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "diffHunk": "@@ -824,13 +917,20 @@ public Response getProcessInstanceHistory(@Context HttpHeaders headers, @PathPar\n             @ApiParam(value = \"identifier of the process instance that history should be collected for\", required = true, example = \"123\") @PathParam(PROCESS_INST_ID) long processInstanceId,\n             @ApiParam(value = \"instructs if active nodes only should be collected, defaults to false\", required = false) @QueryParam(\"activeOnly\")Boolean active, \n             @ApiParam(value = \"instructs if completed nodes only should be collected, defaults to false\", required = false) @QueryParam(\"completedOnly\")Boolean completed,\n+                                              @ApiParam(value = \"entry type from the history\", required = false,\n+                                                        example = \"123\") @QueryParam(PROCESS_INST_HISTORY_TYPE) String processInstHistoryType,", "originalCommit": "02c5868299940325538a2df7ddfc880c98b14e96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "016e127b0b955125ca76c8a5e3c2f96c79cdcbd6", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/016e127b0b955125ca76c8a5e3c2f96c79cdcbd6", "message": "[JBPM-9129] Start process without triggering a start node\n\nadding rest api to provide access to start process from arbitary nodes.", "committedDate": "2020-05-27T08:54:30Z", "type": "commit"}, {"oid": "016e127b0b955125ca76c8a5e3c2f96c79cdcbd6", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/016e127b0b955125ca76c8a5e3c2f96c79cdcbd6", "message": "[JBPM-9129] Start process without triggering a start node\n\nadding rest api to provide access to start process from arbitary nodes.", "committedDate": "2020-05-27T08:54:30Z", "type": "forcePushed"}]}