{"pr_number": 2262, "pr_title": "[JBPM-9405] Provide API method to signal process instance with correlation key", "pr_createdAt": "2020-10-05T09:29:21Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262", "timeline": [{"oid": "54cbd1df710763fcb7f2315fa03d6d4dc6ac756c", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/54cbd1df710763fcb7f2315fa03d6d4dc6ac756c", "message": "[JBPM-9405] Provide API method to signal process instance with correlation key\n\nAdded/modify rest endpoints to be use to signal process by correlation key\nAdded client side functions to use rest endpoints", "committedDate": "2020-10-05T09:48:37Z", "type": "forcePushed"}, {"oid": "0b5254fdf4a846f88de4459045383882cf5d0b35", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0b5254fdf4a846f88de4459045383882cf5d0b35", "message": "[JBPM-9405] Provide API method to signal process instance with correlation key\n\nAdded/modify rest endpoints to be use to signal process by correlation key\nAdded client side functions to use rest endpoints", "committedDate": "2020-10-06T07:43:27Z", "type": "forcePushed"}, {"oid": "29d0dd92d2a8e020edac6af8012f8876ac7ed016", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/29d0dd92d2a8e020edac6af8012f8876ac7ed016", "message": "[JBPM-9405] Provide API method to signal process instance with correlation key\n\nAdded/modify rest endpoints to be use to signal process by correlation key\nAdded client side functions to use rest endpoints", "committedDate": "2020-10-13T09:47:13Z", "type": "forcePushed"}, {"oid": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/86fe179caa5fd1a5d284d463792b0aba1afaddc5", "message": "[JBPM-9405] Provide API method to signal process instance with correlation key\n\nAdded/modify rest endpoints to be use to signal process by correlation key\nAdded client side functions to use rest endpoints", "committedDate": "2020-10-13T09:53:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjMxOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510742319", "bodyText": "Should we not unmarshall eventPayload object based on the type parameter? otherwise these 2 parameters are not really used in the method.", "author": "afalhambra", "createdAt": "2020-10-23T09:04:46Z", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "diffHunk": "@@ -230,6 +231,29 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n \n     }\n \n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      String correlationKey,\n+                                                      String signalName,\n+                                                      String eventPayload,\n+                                                      String type) {\n+\n+        String[] correlationProperties = correlationKey.split(\":\");\n+        CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n+\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjk2Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513326966", "bodyText": "This is the parameter convention used by JMS protocol so it is not possible to remove it. It has to be this way. (it is used by reflection)", "author": "elguardian", "createdAt": "2020-10-28T10:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java\nindex abacbb77d..cf656d3fd 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java\n\n@@ -235,23 +235,30 @@ public class ProcessServiceBase {\n                                                       String correlationKey,\n                                                       String signalName,\n                                                       String eventPayload,\n-                                                      String type) {\n+                                                      String marshallingType) {\n \n         String[] correlationProperties = correlationKey.split(\":\");\n         CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n \n-        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n-        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);\n+        logger.debug(\"About to unmarshal event from payload: '{}'\", eventPayload);\n+        Object event = marshallerHelper.unmarshal(containerId, eventPayload, marshallingType, Object.class);\n+        \n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, event);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, event);\n     }\n \n     public void signalProcessInstancesByCorrelationKey(String containerId,\n                                                        List<String> correlationKeys,\n                                                        String signalName,\n                                                        String eventPayload,\n-                                                       String type) {\n+                                                       String marshallingType) {\n+        \n+        logger.debug(\"About to unmarshal event from payload: '{}'\", eventPayload);\n+        Object event = marshallerHelper.unmarshal(containerId, eventPayload, marshallingType, Object.class);\n+        \n         List<CorrelationKey> keys = correlationKeys.stream().map(e -> correlationKeyFactory.newCorrelationKey(Arrays.asList(e.split(\":\")))).collect(Collectors.toList());\n-        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, keys, containerId, null);\n-        processService.signalProcessInstancesByCorrelationKeys(keys, signalName, null);\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, keys, containerId, event);\n+        processService.signalProcessInstancesByCorrelationKeys(keys, signalName, event);\n     }\n     \n     public void signal(String containerId, String signalName, String marshallingType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjQ3Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510742473", "bodyText": "same as above", "author": "afalhambra", "createdAt": "2020-10-23T09:05:02Z", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java", "diffHunk": "@@ -230,6 +231,29 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n \n     }\n \n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      String correlationKey,\n+                                                      String signalName,\n+                                                      String eventPayload,\n+                                                      String type) {\n+\n+        String[] correlationProperties = correlationKey.split(\":\");\n+        CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n+\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);\n+    }\n+\n+    public void signalProcessInstancesByCorrelationKey(String containerId,\n+                                                       List<String> correlationKeys,\n+                                                       String signalName,\n+                                                       String eventPayload,\n+                                                       String type) {\n+        List<CorrelationKey> keys = correlationKeys.stream().map(e -> correlationKeyFactory.newCorrelationKey(Arrays.asList(e.split(\":\")))).collect(Collectors.toList());\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, keys, containerId, null);\n+        processService.signalProcessInstancesByCorrelationKeys(keys, signalName, null);", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNzIyMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513327220", "bodyText": "This is JMS client protocol (same as the other.", "author": "elguardian", "createdAt": "2020-10-28T10:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MjQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java\nindex abacbb77d..cf656d3fd 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ProcessServiceBase.java\n\n@@ -235,23 +235,30 @@ public class ProcessServiceBase {\n                                                       String correlationKey,\n                                                       String signalName,\n                                                       String eventPayload,\n-                                                      String type) {\n+                                                      String marshallingType) {\n \n         String[] correlationProperties = correlationKey.split(\":\");\n         CorrelationKey actualCorrelationKey = correlationKeyFactory.newCorrelationKey(Arrays.asList(correlationProperties));\n \n-        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, null);\n-        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, null);\n+        logger.debug(\"About to unmarshal event from payload: '{}'\", eventPayload);\n+        Object event = marshallerHelper.unmarshal(containerId, eventPayload, marshallingType, Object.class);\n+        \n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, correlationKey, containerId, event);\n+        processService.signalProcessInstanceByCorrelationKey(actualCorrelationKey, signalName, event);\n     }\n \n     public void signalProcessInstancesByCorrelationKey(String containerId,\n                                                        List<String> correlationKeys,\n                                                        String signalName,\n                                                        String eventPayload,\n-                                                       String type) {\n+                                                       String marshallingType) {\n+        \n+        logger.debug(\"About to unmarshal event from payload: '{}'\", eventPayload);\n+        Object event = marshallerHelper.unmarshal(containerId, eventPayload, marshallingType, Object.class);\n+        \n         List<CorrelationKey> keys = correlationKeys.stream().map(e -> correlationKeyFactory.newCorrelationKey(Arrays.asList(e.split(\":\")))).collect(Collectors.toList());\n-        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, keys, containerId, null);\n-        processService.signalProcessInstancesByCorrelationKeys(keys, signalName, null);\n+        logger.debug(\"Calling signal '{}' process instances with correlation key {} on container {} and event {}\", signalName, keys, containerId, event);\n+        processService.signalProcessInstancesByCorrelationKeys(keys, signalName, event);\n     }\n     \n     public void signal(String containerId, String signalName, String marshallingType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NDg5NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510744894", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @ApiParam(value = \"signal name to be send to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName, \n          \n          \n            \n                        @ApiParam(value = \"signal name to be sent to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName,", "author": "afalhambra", "createdAt": "2020-10-23T09:09:15Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java", "diffHunk": "@@ -430,7 +431,44 @@ public Response signalProcessInstance(@javax.ws.rs.core.Context HttpHeaders head\n         }\n     }\n \n-    @ApiOperation(value = \"Signals multiple process instances with a specified signal name.\", response = Void.class, code = 200)\n+    @ApiOperation(value=\"Signals a specified process instance by correlation key with a specified signal name and optional signal data.\",\n+            response=Void.class, code=200)\n+            @ApiResponses(value = { @ApiResponse(code = 500, message = \"Unexpected error\"),\n+            @ApiResponse(code = 404, message = \"Process instance or Container Id not found\"),\n+            @ApiResponse(code = 403, message = \"User does not have permission to access this asset\")})\n+    @POST\n+    @Path(SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response signalProcessInstanceByCorrelationKey(@javax.ws.rs.core.Context HttpHeaders headers, \n+            @ApiParam(value = \"container id that process instance belongs to\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId,\n+            @ApiParam(value = \"correlation key of the process instance to be signaled\", required = true, example = \"123\") @PathParam(CORRELATION_KEY) String correlationKey, \n+            @ApiParam(value = \"signal name to be send to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName, ", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjQ4Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513326482", "bodyText": "done", "author": "elguardian", "createdAt": "2020-10-28T10:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NDg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java\nindex 197bc97da..0f73f8182 100644\n--- a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java\n+++ b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/ProcessResource.java\n\n@@ -443,7 +443,7 @@ public class ProcessResource  {\n     public Response signalProcessInstanceByCorrelationKey(@javax.ws.rs.core.Context HttpHeaders headers, \n             @ApiParam(value = \"container id that process instance belongs to\", required = true, example = \"evaluation_1.0.0-SNAPSHOT\") @PathParam(CONTAINER_ID) String containerId,\n             @ApiParam(value = \"correlation key of the process instance to be signaled\", required = true, example = \"123\") @PathParam(CORRELATION_KEY) String correlationKey, \n-            @ApiParam(value = \"signal name to be send to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName, \n+            @ApiParam(value = \"signal name to be sent to process instance\", required = true, example = \"EventReceived\") @PathParam(SIGNAL_NAME) String signalName, \n             @ApiParam(value = \"optional event data - any type can be provided\", required = false, examples=@Example(value= {\n                     @ExampleProperty(mediaType=JSON, value=VAR_JSON),\n                     @ExampleProperty(mediaType=XML, value=VAR_XML)}))  String eventPayload) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NzEyOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510757129", "bodyText": "Method reference can be used here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());\n          \n          \n            \n                    List<String> keys = correlationKeys.stream().map(CorrelationKey::toExternalForm).collect(Collectors.toList());", "author": "afalhambra", "createdAt": "2020-10-23T09:29:23Z", "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "diffHunk": "@@ -592,6 +594,56 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n         }\n     }\n \n+    @Override\n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      CorrelationKey correlationKey,\n+                                                      String signalName,\n+                                                      Object event) {\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(CORRELATION_KEY, correlationKey.toExternalForm());\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI, valuesMap), event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstanceByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, correlationKey.toExternalForm(), signalName})));\n+            ServiceResponse<?> response = (ServiceResponse<?>) executeJmsCommand( script, DescriptorCommand.class.getName(), \"BPM\", containerId ).getResponses().get(0);\n+            throwExceptionOnFailure(response);\n+        }\n+    }\n+\n+    @Override\n+    public void signalProcessInstancesByCorrelationKeys(String containerId,\n+                                                        List<CorrelationKey> correlationKeys,\n+                                                        String signalName,\n+                                                        Object event) {\n+        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNDkyNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513324926", "bodyText": "done", "author": "elguardian", "createdAt": "2020-10-28T10:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NzEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java b/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java\nindex e81c5ecb9..5aa45eb0d 100644\n--- a/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java\n+++ b/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java\n\n@@ -622,7 +622,7 @@ public class ProcessServicesClientImpl extends AbstractKieServicesClientImpl imp\n                                                         List<CorrelationKey> correlationKeys,\n                                                         String signalName,\n                                                         Object event) {\n-        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());\n+        List<String> keys = correlationKeys.stream().map(CorrelationKey::toExternalForm).collect(Collectors.toList());\n         if( config.isRest() ) {\n             Map<String, Object> valuesMap = new HashMap<String, Object>();\n             valuesMap.put(CONTAINER_ID, containerId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTcyNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510759727", "bodyText": "This should signalProcessInstancesByCorrelationKeys instead (missing last s)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstancesByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, keys, signalName})));\n          \n          \n            \n                                (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstancesByCorrelationKeys\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, keys, signalName})));", "author": "afalhambra", "createdAt": "2020-10-23T09:33:52Z", "path": "kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java", "diffHunk": "@@ -592,6 +594,56 @@ public void signalProcessInstances(String containerId, List<Long> processInstanc\n         }\n     }\n \n+    @Override\n+    public void signalProcessInstanceByCorrelationKey(String containerId,\n+                                                      CorrelationKey correlationKey,\n+                                                      String signalName,\n+                                                      Object event) {\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(CORRELATION_KEY, correlationKey.toExternalForm());\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_BY_CORRELATION_KEY_POST_URI, valuesMap), event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstanceByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, correlationKey.toExternalForm(), signalName})));\n+            ServiceResponse<?> response = (ServiceResponse<?>) executeJmsCommand( script, DescriptorCommand.class.getName(), \"BPM\", containerId ).getResponses().get(0);\n+            throwExceptionOnFailure(response);\n+        }\n+    }\n+\n+    @Override\n+    public void signalProcessInstancesByCorrelationKeys(String containerId,\n+                                                        List<CorrelationKey> correlationKeys,\n+                                                        String signalName,\n+                                                        Object event) {\n+        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());\n+        if( config.isRest() ) {\n+            Map<String, Object> valuesMap = new HashMap<String, Object>();\n+            valuesMap.put(CONTAINER_ID, containerId);\n+            valuesMap.put(SIGNAL_NAME, signalName);\n+\n+\n+            String queryStr = buildQueryString(\"correlationKeys\", keys);\n+\n+\n+            Map<String, String> headers = new HashMap<String, String>();\n+            makeHttpPostRequestAndCreateCustomResponse(\n+                    build(loadBalancer.getUrl(), PROCESS_URI + \"/\" + SIGNAL_PROCESS_INSTANCES_PORT_URI, valuesMap) + queryStr\n+                    , event, String.class, headers);\n+        } else {\n+            CommandScript script = new CommandScript(singletonList(\n+                    (KieServerCommand) new DescriptorCommand( \"ProcessService\", \"signalProcessInstancesByCorrelationKey\", serialize(event), marshaller.getFormat().getType(), new Object[]{containerId, keys, signalName})));", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjEyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513326123", "bodyText": "This is correct. This has to do with the naming in the process service base.", "author": "elguardian", "createdAt": "2020-10-28T10:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java b/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java\nindex e81c5ecb9..5aa45eb0d 100644\n--- a/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java\n+++ b/kie-server-parent/kie-server-remote/kie-server-client/src/main/java/org/kie/server/client/impl/ProcessServicesClientImpl.java\n\n@@ -622,7 +622,7 @@ public class ProcessServicesClientImpl extends AbstractKieServicesClientImpl imp\n                                                         List<CorrelationKey> correlationKeys,\n                                                         String signalName,\n                                                         Object event) {\n-        List<String> keys = correlationKeys.stream().map(e -> e.toExternalForm()).collect(Collectors.toList());\n+        List<String> keys = correlationKeys.stream().map(CorrelationKey::toExternalForm).collect(Collectors.toList());\n         if( config.isRest() ) {\n             Map<String, Object> valuesMap = new HashMap<String, Object>();\n             valuesMap.put(CONTAINER_ID, containerId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MDg0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510760847", "bodyText": "Checked exception is not thrown within this method\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n          \n          \n            \n                public void testSignalProcessInstanceByCorrelationKey() {", "author": "afalhambra", "createdAt": "2020-10-23T09:35:51Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNzY1Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513327657", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-10-28T10:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MDg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\nindex 7c164ece0..e9f0b38a7 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n\n@@ -274,11 +277,11 @@ public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationT\n     }\n     \n     @Test\n-    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+    public void testSignalProcessInstanceByCorrelationKey() {\n         Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n \n         assertNotNull(processInstanceId);\n-        assertTrue(processInstanceId.longValue() > 0);\n+        assertTrue(processInstanceId > 0);\n         \n         ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n         CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MTE0OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510761148", "bodyText": "Unnecessary unboxing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                    assertTrue(processInstanceId > 0);", "author": "afalhambra", "createdAt": "2020-10-23T09:36:25Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNzg2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513327860", "bodyText": "done", "author": "elguardian", "createdAt": "2020-10-28T10:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MTE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\nindex 7c164ece0..e9f0b38a7 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n\n@@ -274,11 +277,11 @@ public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationT\n     }\n     \n     @Test\n-    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+    public void testSignalProcessInstanceByCorrelationKey() {\n         Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n \n         assertNotNull(processInstanceId);\n-        assertTrue(processInstanceId.longValue() > 0);\n+        assertTrue(processInstanceId > 0);\n         \n         ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n         CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MjcyMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510762720", "bodyText": "Checked exception not thrown within this method\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n          \n          \n            \n                public void testSignalProcessInstancesByCorrelationKeys() {", "author": "afalhambra", "createdAt": "2020-10-23T09:39:17Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzgyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513333823", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-10-28T10:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MjcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\nindex 7c164ece0..e9f0b38a7 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n\n@@ -274,11 +277,11 @@ public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationT\n     }\n     \n     @Test\n-    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+    public void testSignalProcessInstanceByCorrelationKey() {\n         Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n \n         assertNotNull(processInstanceId);\n-        assertTrue(processInstanceId.longValue() > 0);\n+        assertTrue(processInstanceId > 0);\n         \n         ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n         CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2Mjk4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510762980", "bodyText": "Unnecessary unboxing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(processInstanceId.longValue() > 0);\n          \n          \n            \n                    assertTrue(processInstanceId > 0);", "author": "afalhambra", "createdAt": "2020-10-23T09:39:43Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzk2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513333967", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-10-28T10:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2Mjk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\nindex 7c164ece0..e9f0b38a7 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n\n@@ -274,11 +277,11 @@ public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationT\n     }\n     \n     @Test\n-    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+    public void testSignalProcessInstanceByCorrelationKey() {\n         Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n \n         assertNotNull(processInstanceId);\n-        assertTrue(processInstanceId.longValue() > 0);\n+        assertTrue(processInstanceId > 0);\n         \n         ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n         CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MzA2OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510763069", "bodyText": "same as above", "author": "afalhambra", "createdAt": "2020-10-23T09:39:53Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        ProcessInstance pi1 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+\n+        Long processInstanceId2 = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+        assertNotNull(processInstanceId2);\n+        assertTrue(processInstanceId2.longValue() > 0);", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjYxMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513342611", "bodyText": "done", "author": "elguardian", "createdAt": "2020-10-28T10:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MzA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\nindex 7c164ece0..e9f0b38a7 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n\n@@ -274,11 +277,11 @@ public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationT\n     }\n     \n     @Test\n-    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+    public void testSignalProcessInstanceByCorrelationKey() {\n         Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n \n         assertNotNull(processInstanceId);\n-        assertTrue(processInstanceId.longValue() > 0);\n+        assertTrue(processInstanceId > 0);\n         \n         ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n         CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODc0NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510768745", "bodyText": "Shouldn't we verify the bpm process is completed after sending these signals? so by that we make sure the signals were successfully processed? Maybe we could verify both event objects are also received", "author": "afalhambra", "createdAt": "2020-10-23T09:50:06Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjM5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513342399", "bodyText": "assert that process is finished. only can happen when both signal were processed.", "author": "elguardian", "createdAt": "2020-10-28T10:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\nindex 7c164ece0..e9f0b38a7 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n\n@@ -274,11 +277,11 @@ public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationT\n     }\n     \n     @Test\n-    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+    public void testSignalProcessInstanceByCorrelationKey() {\n         Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n \n         assertNotNull(processInstanceId);\n-        assertTrue(processInstanceId.longValue() > 0);\n+        assertTrue(processInstanceId > 0);\n         \n         ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n         CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODgyMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r510768820", "bodyText": "Shouldn't we verify that both bpm processes are completed after sending these signals? so by that we make sure the signals were successfully processed? Maybe we could verify both event objects are also received", "author": "afalhambra", "createdAt": "2020-10-23T09:50:14Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java", "diffHunk": "@@ -273,6 +273,67 @@ public void testSignalProcessInstance() throws Exception {\n         }\n     }\n     \n+    @Test\n+    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        \n+        ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(pi.getCorrelationKey());\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal1\", person);\n+\n+            processClient.signalProcessInstanceByCorrelationKey(CONTAINER_ID, correlationKey, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testSignalProcessInstancesByCorrelationKeys() throws Exception {\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId.longValue() > 0);\n+        ProcessInstance pi1 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n+\n+        Long processInstanceId2 = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n+        assertNotNull(processInstanceId2);\n+        assertTrue(processInstanceId2.longValue() > 0);\n+        ProcessInstance pi2 = processClient.getProcessInstance(CONTAINER_ID, processInstanceId2);\n+        \n+\n+        CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n+        CorrelationKey correlationKey1 = correlationKeyFactory.newCorrelationKey(pi1.getCorrelationKey());\n+        CorrelationKey correlationKey2 = correlationKeyFactory.newCorrelationKey(pi2.getCorrelationKey());\n+\n+        List<CorrelationKey> correlationKeys = new ArrayList<>();\n+        correlationKeys.add(correlationKey1);\n+        correlationKeys.add(correlationKey2);\n+\n+        try {\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId);\n+            checkAvailableSignals(CONTAINER_ID, processInstanceId2);\n+\n+            Object person = createPersonInstance(USER_JOHN);\n+            processClient.signalProcessInstancesByCorrelationKeys(CONTAINER_ID, correlationKeys, \"Signal1\", person);\n+\n+            processClient.signalProcessInstancesByCorrelationKeys(CONTAINER_ID, correlationKeys, \"Signal2\", \"My custom string event\");\n+        } catch (Exception e) {\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n+            processClient.abortProcessInstance(CONTAINER_ID, processInstanceId2);\n+            fail(e.getMessage());\n+        }", "originalCommit": "86fe179caa5fd1a5d284d463792b0aba1afaddc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjQ3OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2262#discussion_r513342479", "bodyText": "assert that process is finished. only can happen when both signal were processed.", "author": "elguardian", "createdAt": "2020-10-28T10:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\nindex 7c164ece0..e9f0b38a7 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/ProcessServiceIntegrationTest.java\n\n@@ -274,11 +277,11 @@ public class ProcessServiceIntegrationTest extends JbpmKieServerBaseIntegrationT\n     }\n     \n     @Test\n-    public void testSignalProcessInstanceByCorrelationKey() throws Exception {\n+    public void testSignalProcessInstanceByCorrelationKey() {\n         Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_SIGNAL_PROCESS);\n \n         assertNotNull(processInstanceId);\n-        assertTrue(processInstanceId.longValue() > 0);\n+        assertTrue(processInstanceId > 0);\n         \n         ProcessInstance pi = processClient.getProcessInstance(CONTAINER_ID, processInstanceId);\n         CorrelationKeyFactory correlationKeyFactory = KieInternalServices.Factory.get().newCorrelationKeyFactory();\n"}}, {"oid": "c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c71c5ed5fbe32b1af13d40179a4e67621ac59ef0", "message": "[JBPM-9423] Duplicate container-info entries in kie-server-router.json file if we create containers with unique container-alias\n\ncorrecting marshalling and computation of the host, servers and containers in the router configuration", "committedDate": "2020-10-28T10:42:16Z", "type": "forcePushed"}, {"oid": "6c5f5e68fcdf5d6770c80a63767902444d67e28d", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6c5f5e68fcdf5d6770c80a63767902444d67e28d", "message": "[JBPM-9423] Duplicate container-info entries in kie-server-router.json file if we create containers with unique container-alias\n\ncorrecting marshalling and computation of the host, servers and containers in the router configuration", "committedDate": "2020-10-28T10:55:57Z", "type": "forcePushed"}, {"oid": "feb805ee0f1b01fc88653d794c91e7354e9d627f", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/feb805ee0f1b01fc88653d794c91e7354e9d627f", "message": "[JBPM-9405] Provide API method to signal process instance with correlation key", "committedDate": "2020-11-02T08:22:37Z", "type": "commit"}, {"oid": "feb805ee0f1b01fc88653d794c91e7354e9d627f", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/feb805ee0f1b01fc88653d794c91e7354e9d627f", "message": "[JBPM-9405] Provide API method to signal process instance with correlation key", "committedDate": "2020-11-02T08:22:37Z", "type": "forcePushed"}]}