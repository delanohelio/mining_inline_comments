{"pr_number": 2053, "pr_title": "[RHPAM-2552] Ability to Search for tasks by multiple task variables and / or process variables via the kie-server api.", "pr_createdAt": "2020-03-31T08:46:53Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053", "timeline": [{"oid": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-03-31T10:37:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MTY1MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403991651", "bodyText": "As per BAPL-1526 description (queryCaseTaks), I'm missing the following attributes/members:\n\nprocessDefinitionId\nprocessInstanceId", "author": "afalhambra", "createdAt": "2020-04-06T10:36:02Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String caseDefinitionId;\n+\n+    private String caseId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    private Map<String, Object> caseVariables;", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2ODg1NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r405668855", "bodyText": "processDefinitionId <- caseDefinitionID\nprocessInstanceId <- CaseId There", "author": "elguardian", "createdAt": "2020-04-08T16:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MTY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee53ecb141c28744b35c291c162195f8a84e6bb6", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\nindex 54f791b16..01dc59c03 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n\n@@ -21,30 +21,43 @@ import java.util.Map;\n \n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n \n @XmlAccessorType(XmlAccessType.FIELD)\n @XmlRootElement(name = \"case-task-with-vars\")\n public class CaseUserTaskWithVariables {\n \n+    @XmlElement(name = \"id\")\n     private Long id;\n \n+    @XmlElement(name = \"name\")\n     private String name;\n \n+    @XmlElement(name = \"actual-owner\")\n     private String actualOwner;\n \n+    @XmlElement(name = \"correlation-key\")\n     private String correlationKey;\n \n     private List<String> potentialOwners;\n \n+    @XmlElement(name = \"case-definition-id\")\n     private String caseDefinitionId;\n \n+    @XmlElement(name = \"process-instance-id\")\n+    private Long processInstanceId;\n+\n+    @XmlElement(name = \"case-id\")\n     private String caseId;\n \n+    @XmlElement(name = \"task-instance-input-variables\")\n     private Map<String, Object> inputVariables;\n \n+    @XmlElement(name = \"process-instance-variables\")\n     private Map<String, Object> processVariables;\n \n+    @XmlElement(name = \"case-instance-variables\")\n     private Map<String, Object> caseVariables;\n \n     public Long getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MjQ5NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403992494", "bodyText": "Shouldn't these members be annotated with the @xmlelement(name = \"..\") annotation like CaseInstanceCustomVars class?", "author": "afalhambra", "createdAt": "2020-04-06T10:37:37Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String caseDefinitionId;\n+\n+    private String caseId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    private Map<String, Object> caseVariables;", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee53ecb141c28744b35c291c162195f8a84e6bb6", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\nindex 54f791b16..01dc59c03 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n\n@@ -21,30 +21,43 @@ import java.util.Map;\n \n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n \n @XmlAccessorType(XmlAccessType.FIELD)\n @XmlRootElement(name = \"case-task-with-vars\")\n public class CaseUserTaskWithVariables {\n \n+    @XmlElement(name = \"id\")\n     private Long id;\n \n+    @XmlElement(name = \"name\")\n     private String name;\n \n+    @XmlElement(name = \"actual-owner\")\n     private String actualOwner;\n \n+    @XmlElement(name = \"correlation-key\")\n     private String correlationKey;\n \n     private List<String> potentialOwners;\n \n+    @XmlElement(name = \"case-definition-id\")\n     private String caseDefinitionId;\n \n+    @XmlElement(name = \"process-instance-id\")\n+    private Long processInstanceId;\n+\n+    @XmlElement(name = \"case-id\")\n     private String caseId;\n \n+    @XmlElement(name = \"task-instance-input-variables\")\n     private Map<String, Object> inputVariables;\n \n+    @XmlElement(name = \"process-instance-variables\")\n     private Map<String, Object> processVariables;\n \n+    @XmlElement(name = \"case-instance-variables\")\n     private Map<String, Object> caseVariables;\n \n     public Long getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MzQyNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403993425", "bodyText": "Are we not providing more detailed info than what it is expected as per BAPL-1526 (queryCases)? or am I missing something?", "author": "afalhambra", "createdAt": "2020-04-06T10:39:22Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.server.api.model.cases;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+import org.kie.server.api.model.instance.TaskSummaryList;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-instance-custom\")\n+public class CaseInstanceCustomVars {\n+\n+    @XmlElement(name = \"process-instance-id\")\n+    private Long id;\n+    @XmlElement(name = \"case-id\")\n+    private String caseId;\n+    @XmlElement(name = \"case-definition-id\")\n+    private String caseDefinitionId;\n+    @XmlElement(name = \"process-name\")\n+    private String processName;\n+    @XmlElement(name = \"process-version\")\n+    private String processVersion;\n+    @XmlElement(name = \"process-instance-state\")\n+    private Integer state;\n+    @XmlElement(name = \"container-id\")\n+    private String containerId;\n+    @XmlElement(name = \"initiator\")\n+    private String initiator;\n+    @XmlElement(name = \"start-date\")\n+    private Date date;\n+    @XmlElement(name = \"process-instance-desc\")\n+    private String processInstanceDescription;\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+    @XmlElement(name = \"parent-instance-id\")\n+    private Long parentId;\n+    @XmlElement(name = \"last-modification-date\")\n+    private Date lastModificationDate;\n+\n+    @XmlElement(name = \"active-user-tasks\")\n+    private TaskSummaryList activeUserTasks;\n+\n+    @XmlElement(name = \"process-instance-variables\")\n+    private Map<String, Object> processVariables;\n+\n+    @XmlElement(name = \"case-instance-variables\")\n+    private Map<String, Object> caseVariables;", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMTE0NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r406211144", "bodyText": "removed unused fields.", "author": "elguardian", "createdAt": "2020-04-09T13:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5MzQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\nindex 3d863834a..c90d60b8f 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\n\n@@ -195,5 +195,11 @@ public class CaseInstanceCustomVars {\n         this.lastModificationDate = lastModificationDate;\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"CaseInstanceCustomVars [id=\" + id + \", caseId=\" + caseId + \", caseDefinitionId=\" + caseDefinitionId + \", processName=\" + processName + \", processVersion=\" + processVersion + \", state=\" + state +\n+               \", containerId=\" + containerId + \", correlationKey=\" + correlationKey + \"]\";\n+    }\n+\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5NTY1MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403995651", "bodyText": "Shouldn't these members be annotated with the @xmlelement(name = \"..\") annotation like CaseInstanceCustomVars class?", "author": "afalhambra", "createdAt": "2020-04-06T10:43:53Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    List<String> potentialOwners;\n+\n+    String processDefinitionId;\n+\n+    Long processInstanceId;\n+\n+    Map<String,Object> inputVariables;\n+\n+    Map<String, Object> processVariables;", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\nindex 467a6faa9..37a634ea3 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n\n@@ -35,15 +35,15 @@ public class ProcessInstanceUserTaskWithVariables {\n \n     private String correlationKey;\n \n-    List<String> potentialOwners;\n+    private List<String> potentialOwners;\n \n-    String processDefinitionId;\n+    private String processDefinitionId;\n \n-    Long processInstanceId;\n+    private Long processInstanceId;\n \n-    Map<String,Object> inputVariables;\n+    private Map<String, Object> inputVariables;\n \n-    Map<String, Object> processVariables;\n+    private Map<String, Object> processVariables;\n \n     public Long getId() {\n         return id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5NjU2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403996567", "bodyText": "Shouldn't these members be declared as private accesor instead of default?", "author": "afalhambra", "createdAt": "2020-04-06T10:45:32Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    List<String> potentialOwners;\n+\n+    String processDefinitionId;\n+\n+    Long processInstanceId;\n+\n+    Map<String,Object> inputVariables;\n+\n+    Map<String, Object> processVariables;", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\nindex 467a6faa9..37a634ea3 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n\n@@ -35,15 +35,15 @@ public class ProcessInstanceUserTaskWithVariables {\n \n     private String correlationKey;\n \n-    List<String> potentialOwners;\n+    private List<String> potentialOwners;\n \n-    String processDefinitionId;\n+    private String processDefinitionId;\n \n-    Long processInstanceId;\n+    private Long processInstanceId;\n \n-    Map<String,Object> inputVariables;\n+    private Map<String, Object> inputVariables;\n \n-    Map<String, Object> processVariables;\n+    private Map<String, Object> processVariables;\n \n     public Long getId() {\n         return id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk5OTE3MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r403999170", "bodyText": "If this class is the equivalent for queryProcessTasks (as per BAPL-1526), I'm missing some attributes like:\n\ncaseDefinitionId (maybe this is not valid as this is a process and not a case?)\ncaseInstanceId (maybe this is not valid as this is a process and not a case?)\ntaskInputVariables - I guess this is matched with inputVariables member of this class? wouldn't make sense to rename it to taskInputVariable? wdyt?", "author": "afalhambra", "createdAt": "2020-04-06T10:50:31Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    List<String> potentialOwners;\n+\n+    String processDefinitionId;\n+\n+    Long processInstanceId;\n+\n+    Map<String,Object> inputVariables;\n+\n+    Map<String, Object> processVariables;", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\nindex 467a6faa9..37a634ea3 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n\n@@ -35,15 +35,15 @@ public class ProcessInstanceUserTaskWithVariables {\n \n     private String correlationKey;\n \n-    List<String> potentialOwners;\n+    private List<String> potentialOwners;\n \n-    String processDefinitionId;\n+    private String processDefinitionId;\n \n-    Long processInstanceId;\n+    private Long processInstanceId;\n \n-    Map<String,Object> inputVariables;\n+    private Map<String, Object> inputVariables;\n \n-    Map<String, Object> processVariables;\n+    private Map<String, Object> processVariables;\n \n     public Long getId() {\n         return id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMTg2NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404001864", "bodyText": "I'm missing a class for the queryProcess query as per BAPL-1526.\nSo far we have defined the following classes:\n\nCaseInstanceCustomVars class - for queryCases search.\nCaseUserTaskWithVariables class - for queryCaseTasks search.\nProcessInstanceUserTaskWithVariables class for queryProcessTasks search.\n\nWhat about a class for \"queryProcesses\" search?", "author": "afalhambra", "createdAt": "2020-04-06T10:55:21Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MTEyNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r405671126", "bodyText": "ProcessInstanceCustomVarsList and ProcessInstanceCustomVars", "author": "elguardian", "createdAt": "2020-04-08T16:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMTg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\nindex 467a6faa9..37a634ea3 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n\n@@ -35,15 +35,15 @@ public class ProcessInstanceUserTaskWithVariables {\n \n     private String correlationKey;\n \n-    List<String> potentialOwners;\n+    private List<String> potentialOwners;\n \n-    String processDefinitionId;\n+    private String processDefinitionId;\n \n-    Long processInstanceId;\n+    private Long processInstanceId;\n \n-    Map<String,Object> inputVariables;\n+    private Map<String, Object> inputVariables;\n \n-    Map<String, Object> processVariables;\n+    private Map<String, Object> processVariables;\n \n     public Long getId() {\n         return id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNTk2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404005960", "bodyText": "Just out of curiosity, why these are not supported?", "author": "afalhambra", "createdAt": "2020-04-06T11:03:19Z", "path": "kie-server-parent/kie-server-controller/kie-server-controller-websocket/src/main/java/org/kie/server/controller/websocket/client/WebSocketKieServerClient.java", "diffHunk": "@@ -354,6 +357,16 @@ public NodeInstance findNodeInstanceByWorkItemId(Long processInstanceId, Long wo\n                 public List<ProcessInstance> findProcessInstancesByProcessIdAndInitiator(String processId, String initiator, List<Integer> status, Integer page, Integer pageSize, String sort, boolean sortOrder) {\n                     return throwUnsupportedException();\n                 }\n+\n+                @Override\n+                public ProcessInstanceCustomVarsList queryProcessesByVariables(SearchQueryFilterSpec spec) {\n+                    return throwUnsupportedException();\n+                }\n+\n+                @Override\n+                public ProcessInstanceUserTaskWithVariablesList queryUserTaskByVariables(SearchQueryFilterSpec spec) {\n+                    return throwUnsupportedException();\n+                }", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-controller/kie-server-controller-websocket/src/main/java/org/kie/server/controller/websocket/client/WebSocketKieServerClient.java b/kie-server-parent/kie-server-controller/kie-server-controller-websocket/src/main/java/org/kie/server/controller/websocket/client/WebSocketKieServerClient.java\nindex 0e6ce4ee0..2c3687e80 100644\n--- a/kie-server-parent/kie-server-controller/kie-server-controller-websocket/src/main/java/org/kie/server/controller/websocket/client/WebSocketKieServerClient.java\n+++ b/kie-server-parent/kie-server-controller/kie-server-controller-websocket/src/main/java/org/kie/server/controller/websocket/client/WebSocketKieServerClient.java\n\n@@ -359,12 +359,12 @@ public class WebSocketKieServerClient implements KieServicesClient {\n                 }\n \n                 @Override\n-                public ProcessInstanceCustomVarsList queryProcessesByVariables(SearchQueryFilterSpec spec) {\n+                public List<ProcessInstanceCustomVars> queryProcessesByVariables(SearchQueryFilterSpec spec) {\n                     return throwUnsupportedException();\n                 }\n \n                 @Override\n-                public ProcessInstanceUserTaskWithVariablesList queryUserTaskByVariables(SearchQueryFilterSpec spec) {\n+                public List<ProcessInstanceUserTaskWithVariables> queryUserTaskByVariables(SearchQueryFilterSpec spec) {\n                     return throwUnsupportedException();\n                 }\n             };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxNTk5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404015993", "bodyText": "Doesn't make sense to implement toString method? - since I see some of these objects are logged when log level is set to debug (to avoid printing a useless message)", "author": "afalhambra", "createdAt": "2020-04-06T11:22:56Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariablesList.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+import org.kie.server.api.model.ItemList;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"user-task-variable-instance-list\")\n+public class ProcessInstanceUserTaskWithVariablesList implements ItemList<ProcessInstanceUserTaskWithVariables> {\n+\n+    @XmlElement(name = \"user-task-with-vars-instance\")\n+    private ProcessInstanceUserTaskWithVariables[] userTaskWithVariables;\n+\n+    public ProcessInstanceUserTaskWithVariablesList() {\n+    }\n+\n+    public ProcessInstanceUserTaskWithVariablesList(ProcessInstanceUserTaskWithVariables[] variableInstances) {\n+        this.userTaskWithVariables = variableInstances;\n+    }\n+\n+    public ProcessInstanceUserTaskWithVariablesList(List<ProcessInstanceUserTaskWithVariables> variableInstances) {\n+        this.userTaskWithVariables = variableInstances.toArray(new ProcessInstanceUserTaskWithVariables[variableInstances.size()]);\n+    }\n+\n+    public ProcessInstanceUserTaskWithVariables[] getUserTaskWithVariables() {\n+        return userTaskWithVariables;\n+    }\n+\n+    public void setUserTaskWithVariables(ProcessInstanceUserTaskWithVariables[] variableInstances) {\n+        this.userTaskWithVariables = variableInstances;\n+    }\n+\n+    @Override\n+    public List<ProcessInstanceUserTaskWithVariables> getItems() {\n+        if (userTaskWithVariables == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList(userTaskWithVariables);\n+    }\n+}", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzODM0OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411238349", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxNTk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariablesList.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariablesList.java\nindex 35e334d1b..3162af0a9 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariablesList.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariablesList.java\n\n@@ -60,4 +60,10 @@ public class ProcessInstanceUserTaskWithVariablesList implements ItemList<Proces\n         }\n         return Arrays.asList(userTaskWithVariables);\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"ProcessInstanceUserTaskWithVariablesList [userTaskWithVariables=\" + Arrays.toString(userTaskWithVariables) + \"]\";\n+    }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyODczMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404028732", "bodyText": "Shouldn't we call to something meaningful like convertToCaseInstanceCustomVarsList? convertToProcessInstanceCustomVarsList is not really what this method returns.", "author": "afalhambra", "createdAt": "2020-04-06T11:47:31Z", "path": "kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/CaseManagementRuntimeDataServiceBase.java", "diffHunk": "@@ -438,4 +446,26 @@ protected String safeProcessInstanceSort(String sort) {\n \n         return actualSort;\n     }\n+\n+    public CaseInstanceCustomVarsList queryCasesByVariables(String payload, String payloadType) {\n+        SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n+        if (payload != null) {\n+            filter = marshallerHelper.unmarshal(payload, payloadType, SearchQueryFilterSpec.class);\n+        }\n+        return ConvertUtils.convertToProcessInstanceCustomVarsList(advanceCaseRuntimeDataService.queryCaseByVariables(filter.getAttributesQueryParams(),", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/CaseManagementRuntimeDataServiceBase.java b/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/CaseManagementRuntimeDataServiceBase.java\nindex 577118406..c434e25a8 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/CaseManagementRuntimeDataServiceBase.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/CaseManagementRuntimeDataServiceBase.java\n\n@@ -452,9 +453,9 @@ public class CaseManagementRuntimeDataServiceBase {\n         if (payload != null) {\n             filter = marshallerHelper.unmarshal(payload, payloadType, SearchQueryFilterSpec.class);\n         }\n-        return ConvertUtils.convertToProcessInstanceCustomVarsList(advanceCaseRuntimeDataService.queryCaseByVariables(filter.getAttributesQueryParams(),\n-                                                                                                                      filter.getCaseVariablesQueryParams(),\n-                                                                                                                      filter.getQueryContext()));\n+        return ConvertUtils.convertToCaseInstanceCustomVarsList(advanceCaseRuntimeDataService.queryCaseByVariables(convertToServiceApiQueryParam(filter.getAttributesQueryParams()),\n+                                                                                                                   convertToServiceApiQueryParam(filter.getCaseVariablesQueryParams()),\n+                                                                                                                   filter.getQueryContext()));\n     }\n \n     public CaseUserTaskWithVariablesList queryUserTasksByVariables(String payload, String payloadType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyOTkyOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404029929", "bodyText": "Shouldn't this method be renamed to something meaningful like convertToCaseInstanceCustomVarsList? It doesn't return a ProcessInstanceCustomVarsList object.", "author": "afalhambra", "createdAt": "2020-04-06T11:49:42Z", "path": "kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java", "diffHunk": "@@ -455,4 +461,43 @@ public static  CaseMigrationReportInstance convertCaseMigrationReport(String cas\n         }\n         return reports;\n     }\n+\n+    public static CaseUserTaskWithVariablesList convertToCaseUserTaskWithVariablesList(List<UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables) {\n+        List<CaseUserTaskWithVariables> data = new ArrayList<>();\n+        for (UserTaskInstanceWithPotOwnerDesc desc : queryUserTasksByVariables) {\n+            CaseUserTaskWithVariables var = new CaseUserTaskWithVariables();\n+            var.setId(desc.getTaskId());\n+            var.setName(desc.getName());\n+            var.setCorrelationKey(desc.getCorrelationKey());\n+            var.setActualOwner(desc.getActualOwner());\n+            var.setCaseDefinitionId(desc.getProcessId());\n+            var.setPotentialOwners(desc.getPotentialOwners());\n+            var.setCaseId(desc.getCorrelationKey());\n+            var.setProcessVariables(desc.getProcessVariables());\n+            var.setInputVariables(desc.getInputdata());\n+            var.setCaseVariables(desc.getExtraData());\n+            data.add(var);\n+        }\n+\n+        CaseUserTaskWithVariablesList result = new CaseUserTaskWithVariablesList();\n+        result.setCaseUserTaskWithVariables(data.parallelStream().toArray(CaseUserTaskWithVariables[]::new));\n+        return result;\n+    }\n+\n+    public static CaseInstanceCustomVarsList convertToProcessInstanceCustomVarsList(List<ProcessInstanceWithVarsDesc> queryCaseByVariables) {", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNDkwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r406214908", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-09T13:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyOTkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java b/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java\nindex 9eb8d518d..41ef123e2 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java\n\n@@ -484,7 +485,7 @@ public class ConvertUtils {\n         return result;\n     }\n \n-    public static CaseInstanceCustomVarsList convertToProcessInstanceCustomVarsList(List<ProcessInstanceWithVarsDesc> queryCaseByVariables) {\n+    public static CaseInstanceCustomVarsList convertToCaseInstanceCustomVarsList(List<ProcessInstanceWithVarsDesc> queryCaseByVariables) {\n         List<CaseInstanceCustomVars> processInstances = new ArrayList<>();\n         for (ProcessInstanceWithVarsDesc proc : queryCaseByVariables) {\n             CaseInstanceCustomVars tmp = new CaseInstanceCustomVars();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzMzkzNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404033934", "bodyText": "can't we use parallelStrem()?", "author": "afalhambra", "createdAt": "2020-04-06T11:57:13Z", "path": "kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java", "diffHunk": "@@ -538,6 +540,41 @@ public static QueryDefinitionList convertToQueryDefinitionList(Collection<org.jb\n         return new QueryDefinitionList(instances);\n     }\n \n+    public static ProcessInstanceCustomVarsList convertToProcessInstanceCustomVarsList(List<ProcessInstanceWithVarsDesc> data) {\n+        List<ProcessInstanceCustomVars> processInstances = new ArrayList<>();\n+        for (ProcessInstanceWithVarsDesc proc : data) {\n+            ProcessInstanceCustomVars tmp = new ProcessInstanceCustomVars();\n+            tmp.setId(proc.getId());\n+            tmp.setVariables(proc.getVariables());\n+            tmp.setProcessId(proc.getProcessId());\n+            tmp.setCorrelationKey(proc.getCorrelationKey());\n+            processInstances.add(tmp);\n+        }\n+        ProcessInstanceCustomVarsList result = new ProcessInstanceCustomVarsList();\n+        result.setProcessInstances(processInstances.stream().toArray(ProcessInstanceCustomVars[]::new));", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNTk0Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r406215943", "bodyText": "it does not make sense to spawn new threads in new context. Also it will change the order.", "author": "elguardian", "createdAt": "2020-04-09T13:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzMzkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java\nindex e4550d613..6fbc8a861 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-jbpm/src/main/java/org/kie/server/services/jbpm/ConvertUtils.java\n\n@@ -575,6 +578,10 @@ public class ConvertUtils {\n         return result;\n     }\n \n+    public static List<org.jbpm.services.api.query.model.QueryParam> convertToServiceApiQueryParam(List<QueryParam> param) {\n+        return param.stream().map(e -> new org.jbpm.services.api.query.model.QueryParam(e.getColumn(), e.getOperator(), e.getValue())).collect(toList());\n+    }\n+\n     public static String nullEmpty(String value) {\n         if (value != null && value.isEmpty()) {\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzOTg0NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404039845", "bodyText": "I would add some search criteria in both queries, just to make sure queries are returning expected values, like attributes, task input variables, process variables, etc.\nI would also add some pagination.", "author": "afalhambra", "createdAt": "2020-04-06T12:07:57Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1834,38 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+        parameters.put(\"stringData\", \"waiting for signal\");\n+        parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK, parameters);\n+\n+        try {\n+\n+            List<TaskSummary> tasks = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10, \"Status\", false);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            SearchQueryFilterSpec spec = new SearchQueryFilterSpec();\n+            ProcessInstanceCustomVarsList listProcesses = queryClient.queryProcessesByVariables(spec);\n+            assertNotNull(listProcesses);\n+            ProcessInstanceUserTaskWithVariablesList listTasks = queryClient.queryUserTaskByVariables(spec);\n+            assertNotNull(listTasks);", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\nindex bc1990bc6..af3bc37e9 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n\n@@ -1857,9 +1857,9 @@ public class RuntimeDataServiceIntegrationTest extends JbpmKieServerBaseIntegrat\n             assertEquals(1, tasks.size());\n \n             SearchQueryFilterSpec spec = new SearchQueryFilterSpec();\n-            ProcessInstanceCustomVarsList listProcesses = queryClient.queryProcessesByVariables(spec);\n+            List<ProcessInstanceCustomVars> listProcesses = queryClient.queryProcessesByVariables(spec);\n             assertNotNull(listProcesses);\n-            ProcessInstanceUserTaskWithVariablesList listTasks = queryClient.queryUserTaskByVariables(spec);\n+            List<ProcessInstanceUserTaskWithVariables> listTasks = queryClient.queryUserTaskByVariables(spec);\n             assertNotNull(listTasks);\n         } finally {\n             processClient.abortProcessInstance(CONTAINER_ID, processInstanceId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzOTk4Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404039987", "bodyText": "I would add some search criteria in both queries, just to make sure queries are returning expected values, like attributes, task input variables, process variables, etc.\nI would also add some pagination.", "author": "afalhambra", "createdAt": "2020-04-06T12:08:15Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +730,39 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+        CaseInstanceCustomVarsList caseInstanceCustomVarsList = caseClient.queryCasesByVariables(new SearchQueryFilterSpec());\n+        assertNotNull(caseInstanceCustomVarsList);\n+        CaseUserTaskWithVariablesList caseUserTaskWithVariablesList = caseClient.queryUserTaskByVariables(new SearchQueryFilterSpec());\n+        assertNotNull(caseUserTaskWithVariablesList);", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NTM3MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r406245370", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-09T14:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzOTk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\nindex 3083945a7..241fc01ed 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n\n@@ -757,9 +757,9 @@ public class CaseServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest\n         Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n         Assertions.assertThat(additionalComment).isNotNull();\n         Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n-        CaseInstanceCustomVarsList caseInstanceCustomVarsList = caseClient.queryCasesByVariables(new SearchQueryFilterSpec());\n+        List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(new SearchQueryFilterSpec());\n         assertNotNull(caseInstanceCustomVarsList);\n-        CaseUserTaskWithVariablesList caseUserTaskWithVariablesList = caseClient.queryUserTaskByVariables(new SearchQueryFilterSpec());\n+        List<CaseUserTaskWithVariables> caseUserTaskWithVariablesList = caseClient.queryUserTaskByVariables(new SearchQueryFilterSpec());\n         assertNotNull(caseUserTaskWithVariablesList);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzOTUzMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r404139530", "bodyText": "Would it make sense to have a name like \"cases\" rather than \"processes\"? wdyt?", "author": "afalhambra", "createdAt": "2020-04-06T14:33:20Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java", "diffHunk": "@@ -362,4 +372,47 @@ public Response getCaseInstanceDataItems(@javax.ws.rs.core.Context HttpHeaders h\n                     return createCorrectVariant(response, headers, Response.Status.OK, customHeaders);\n                 });\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryProcessesByVariables(@Context HttpHeaders headers, String payload) {", "originalCommit": "4fc3a839307c6f7bea05b9f090c503e68cba8ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxOTExNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r406219115", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-09T13:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzOTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "ee53ecb141c28744b35c291c162195f8a84e6bb6", "chunk": "diff --git a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\nindex f30207a31..670533491 100644\n--- a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\n+++ b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\n\n@@ -377,13 +378,15 @@ public class CaseQueryResource extends AbstractCaseResource {\n     @Path(RestURI.VARIABLES_CASES_URI)\n     @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n     @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n-    public Response queryProcessesByVariables(@Context HttpHeaders headers, String payload) {\n+    public Response queryCaseByVariables(@Context HttpHeaders headers, String payload,\n+                                         @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                         @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n \n         Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n         Variant v = getVariant(headers);\n         try {\n             String type = getContentType(headers);\n-            CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type);\n+            CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n             logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);\n \n             return createCorrectVariant(processVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n"}}, {"oid": "ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ffd8b77afc76d74f0daad2b12a680a8fe98d2625", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-08T18:11:47Z", "type": "forcePushed"}, {"oid": "ee53ecb141c28744b35c291c162195f8a84e6bb6", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ee53ecb141c28744b35c291c162195f8a84e6bb6", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-09T14:31:36Z", "type": "forcePushed"}, {"oid": "65e2bd25962a92072ca10b818a5a531b15d5c983", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/65e2bd25962a92072ca10b818a5a531b15d5c983", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-09T14:46:18Z", "type": "forcePushed"}, {"oid": "61ca3330a99d5b6243ce15e5d39b1f67147b3f5d", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/61ca3330a99d5b6243ce15e5d39b1f67147b3f5d", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-09T15:41:21Z", "type": "forcePushed"}, {"oid": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-09T19:59:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MjcxNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408892716", "bodyText": "Should be \"Copyright 2020\"", "author": "afalhambra", "createdAt": "2020-04-15T14:37:17Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MzgxMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r410053810", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T07:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MjcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\nindex 84b25ae73..11601101f 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5Mjg4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408892885", "bodyText": "Should be \"Copyright 2020\"", "author": "afalhambra", "createdAt": "2020-04-15T14:37:30Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVarsList.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NDk1OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r410054959", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T07:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5Mjg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVarsList.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVarsList.java\nindex ce8341c0e..8a4a4a2a5 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVarsList.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVarsList.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDI4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408894280", "bodyText": "XmlElement annotation is missing for potentialOwners attribute\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<String> potentialOwners;\n          \n          \n            \n                @XmlElement(name = \"potential-owners\")\n          \n          \n            \n                private List<String> potentialOwners;", "author": "afalhambra", "createdAt": "2020-04-15T14:39:11Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    @XmlElement(name = \"id\")\n+    private Long id;\n+\n+    @XmlElement(name = \"name\")\n+    private String name;\n+\n+    @XmlElement(name = \"actual-owner\")\n+    private String actualOwner;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NTU4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r410055580", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T07:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\nindex 01dc59c03..a444a17ff 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n\n@@ -40,6 +40,7 @@ public class CaseUserTaskWithVariables {\n     @XmlElement(name = \"correlation-key\")\n     private String correlationKey;\n \n+    @XmlElement(name = \"potential-owners\")\n     private List<String> potentialOwners;\n \n     @XmlElement(name = \"case-definition-id\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMjMzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408912332", "bodyText": "Would be nice to have some builder pattern implemented, so it would be easier and more readable when creating an object of these, so it is a homogeneous behavior like ProcessInstanceCustomVars class - only a suggestion.", "author": "afalhambra", "createdAt": "2020-04-15T15:01:39Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.server.api.model.cases;\n+\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-instance-vars\")\n+public class CaseInstanceCustomVars {\n+\n+    @XmlElement(name = \"process-instance-id\")\n+    private Long processInstanceId;\n+\n+    @XmlElement(name = \"case-id\")\n+    private String caseId;\n+\n+    @XmlElement(name = \"case-definition-id\")\n+    private String caseDefinitionId;\n+\n+    @XmlElement(name = \"process-name\")\n+    private String processName;\n+\n+    @XmlElement(name = \"process-version\")\n+    private String processVersion;\n+\n+    @XmlElement(name = \"process-instance-state\")\n+    private Integer state;\n+\n+    @XmlElement(name = \"container-id\")\n+    private String containerId;\n+\n+    @XmlElement(name = \"initiator\")\n+    private String initiator;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+\n+    @XmlElement(name = \"process-instance-variables\")\n+    private Map<String, Object> processVariables;\n+\n+    @XmlElement(name = \"case-instance-variables\")\n+    private Map<String, Object> caseVariables;\n+\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long id) {\n+        this.processInstanceId = id;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getCaseDefinitionId() {\n+        return caseDefinitionId;\n+    }\n+\n+    public void setCaseDefinitionId(String caseDefinitionId) {\n+        this.caseDefinitionId = caseDefinitionId;\n+    }\n+    public String getProcessName() {\n+        return processName;\n+    }\n+\n+    public void setProcessName(String processName) {\n+        this.processName = processName;\n+    }\n+\n+    public String getProcessVersion() {\n+        return processVersion;\n+    }\n+\n+    public void setProcessVersion(String processVersion) {\n+        this.processVersion = processVersion;\n+    }\n+\n+    public Integer getState() {\n+        return state;\n+    }\n+\n+    public void setState(Integer state) {\n+        this.state = state;\n+    }\n+\n+    public String getContainerId() {\n+        return containerId;\n+    }\n+\n+    public void setContainerId(String containerId) {\n+        this.containerId = containerId;\n+    }\n+\n+    public String getInitiator() {\n+        return initiator;\n+    }\n+\n+    public void setInitiator(String initiator) {\n+        this.initiator = initiator;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+    public Map<String, Object> getCaseVariables() {\n+        return caseVariables;\n+    }\n+\n+    public void setCaseVariables(Map<String, Object> caseVariables) {\n+        this.caseVariables = caseVariables;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CaseInstanceCustomVars [id=\" + processInstanceId + \", caseId=\" + caseId + \", caseDefinitionId=\" + caseDefinitionId + \", processName=\" + processName + \", processVersion=\" + processVersion + \", state=\" +\n+               state +\n+               \", containerId=\" + containerId + \", correlationKey=\" + correlationKey + \"]\";\n+    }\n+\n+}\n+", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzNTM4MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411235381", "bodyText": "not needed.", "author": "elguardian", "createdAt": "2020-04-20T09:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMjMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\nindex 84b25ae73..11601101f 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseInstanceCustomVars.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMjc0NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408912744", "bodyText": "Would be nice to have some builder pattern implemented, so it would be easier and more readable when creating an object of these, so it is a homogeneous behavior like ProcessInstanceCustomVars class - only a suggestion.", "author": "afalhambra", "createdAt": "2020-04-15T15:02:12Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.cases;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"case-task-with-vars\")\n+public class CaseUserTaskWithVariables {\n+\n+    @XmlElement(name = \"id\")\n+    private Long id;\n+\n+    @XmlElement(name = \"name\")\n+    private String name;\n+\n+    @XmlElement(name = \"actual-owner\")\n+    private String actualOwner;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    @XmlElement(name = \"case-definition-id\")\n+    private String caseDefinitionId;\n+\n+    @XmlElement(name = \"process-instance-id\")\n+    private Long processInstanceId;\n+\n+    @XmlElement(name = \"case-id\")\n+    private String caseId;\n+\n+    @XmlElement(name = \"task-instance-input-variables\")\n+    private Map<String, Object> inputVariables;\n+\n+    @XmlElement(name = \"process-instance-variables\")\n+    private Map<String, Object> processVariables;\n+\n+    @XmlElement(name = \"case-instance-variables\")\n+    private Map<String, Object> caseVariables;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getActualOwner() {\n+        return actualOwner;\n+    }\n+\n+    public void setActualOwner(String actualOwner) {\n+        this.actualOwner = actualOwner;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public List<String> getPotentialOwners() {\n+        return potentialOwners;\n+    }\n+\n+    public void setPotentialOwners(List<String> potentialOwners) {\n+        this.potentialOwners = potentialOwners;\n+    }\n+\n+\n+    public String getCaseDefinitionId() {\n+        return caseDefinitionId;\n+    }\n+\n+    public void setCaseDefinitionId(String caseDefinitionId) {\n+        this.caseDefinitionId = caseDefinitionId;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public void setCaseVariables(Map<String, Object> caseVariables) {\n+        this.caseVariables = caseVariables;\n+    }\n+\n+    public Map<String, Object> getCaseVariables() {\n+        return caseVariables;\n+    }\n+\n+    public Map<String, Object> getInputVariables() {\n+        return inputVariables;\n+    }\n+\n+    public void setInputVariables(Map<String, Object> inputVariables) {\n+        this.inputVariables = inputVariables;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long processInstanceId) {\n+        this.processInstanceId = processInstanceId;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CaseUserTaskWithVariables [id=\" + id + \", name=\" + name + \", actualOwner=\" + actualOwner + \", correlationKey=\" + correlationKey + \", potentialOwners=\" + potentialOwners + \", caseDefinitionId=\" +\n+               caseDefinitionId + \", processInstanceId=\" + processInstanceId + \", caseId=\" + caseId + \", inputVariables=\" + inputVariables + \", processVariables=\" + processVariables + \", caseVariables=\" + caseVariables +\n+               \"]\";\n+    }\n+\n+}", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\nindex 01dc59c03..a444a17ff 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/cases/CaseUserTaskWithVariables.java\n\n@@ -40,6 +40,7 @@ public class CaseUserTaskWithVariables {\n     @XmlElement(name = \"correlation-key\")\n     private String correlationKey;\n \n+    @XmlElement(name = \"potential-owners\")\n     private List<String> potentialOwners;\n \n     @XmlElement(name = \"case-definition-id\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDU1OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408914558", "bodyText": "I'm missing XmlElement annotation for these attributes.", "author": "afalhambra", "createdAt": "2020-04-15T15:04:35Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String processDefinitionId;\n+\n+    private Long processInstanceId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzNzAyMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411237020", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\nindex 37a634ea3..c7a143d23 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n\n@@ -21,28 +21,38 @@ import java.util.Map;\n \n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n \n @XmlAccessorType(XmlAccessType.FIELD)\n-@XmlRootElement(name = \"task-with-vars\")\n+@XmlRootElement(name = \"process-instance-task-with-vars\")\n public class ProcessInstanceUserTaskWithVariables {\n \n+    @XmlElement(name = \"id\")\n     private Long id;\n \n+    @XmlElement(name = \"name\")\n     private String name;\n \n+    @XmlElement(name = \"actual-owner\")\n     private String actualOwner;\n \n+    @XmlElement(name = \"correlation-key\")\n     private String correlationKey;\n \n+    @XmlElement(name = \"potential-owners\")\n     private List<String> potentialOwners;\n \n+    @XmlElement(name = \"process-definition-id\")\n     private String processDefinitionId;\n \n+    @XmlElement(name = \"process-instance-id\")\n     private Long processInstanceId;\n \n+    @XmlElement(name = \"task-instance-input-variables\")\n     private Map<String, Object> inputVariables;\n \n+    @XmlElement(name = \"process-variables\")\n     private Map<String, Object> processVariables;\n \n     public Long getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDg2OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408914868", "bodyText": "Doesn't make sense to implement toString method? - since I see some of these objects are logged when log level is set to debug (to avoid printing a useless message)", "author": "afalhambra", "createdAt": "2020-04-15T15:04:58Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String processDefinitionId;\n+\n+    private Long processInstanceId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getActualOwner() {\n+        return actualOwner;\n+    }\n+\n+    public void setActualOwner(String actualOwner) {\n+        this.actualOwner = actualOwner;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public List<String> getPotentialOwners() {\n+        return potentialOwners;\n+    }\n+\n+    public void setPotentialOwners(List<String> potentialOwners) {\n+        this.potentialOwners = potentialOwners;\n+    }\n+\n+    public String getProcessDefinitionId() {\n+        return processDefinitionId;\n+    }\n+\n+    public void setProcessDefinitionId(String processDefinitionId) {\n+        this.processDefinitionId = processDefinitionId;\n+    }\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long processInstanceId) {\n+        this.processInstanceId = processInstanceId;\n+    }\n+\n+    public Map<String, Object> getInputVariables() {\n+        return inputVariables;\n+    }\n+\n+    public void setInputVariables(Map<String, Object> inputVariables) {\n+        this.inputVariables = inputVariables;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+}", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzNzg5Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411237892", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNDg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\nindex 37a634ea3..c7a143d23 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n\n@@ -21,28 +21,38 @@ import java.util.Map;\n \n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n \n @XmlAccessorType(XmlAccessType.FIELD)\n-@XmlRootElement(name = \"task-with-vars\")\n+@XmlRootElement(name = \"process-instance-task-with-vars\")\n public class ProcessInstanceUserTaskWithVariables {\n \n+    @XmlElement(name = \"id\")\n     private Long id;\n \n+    @XmlElement(name = \"name\")\n     private String name;\n \n+    @XmlElement(name = \"actual-owner\")\n     private String actualOwner;\n \n+    @XmlElement(name = \"correlation-key\")\n     private String correlationKey;\n \n+    @XmlElement(name = \"potential-owners\")\n     private List<String> potentialOwners;\n \n+    @XmlElement(name = \"process-definition-id\")\n     private String processDefinitionId;\n \n+    @XmlElement(name = \"process-instance-id\")\n     private Long processInstanceId;\n \n+    @XmlElement(name = \"task-instance-input-variables\")\n     private Map<String, Object> inputVariables;\n \n+    @XmlElement(name = \"process-variables\")\n     private Map<String, Object> processVariables;\n \n     public Long getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNTAxNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408915015", "bodyText": "Would be nice to have some builder pattern implemented, so it would be easier and more readable when creating an object of these, so it is a homogeneous behavior like ProcessInstanceCustomVars class - only a suggestion.", "author": "afalhambra", "createdAt": "2020-04-15T15:05:11Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.instance;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlRootElement(name = \"task-with-vars\")\n+public class ProcessInstanceUserTaskWithVariables {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String actualOwner;\n+\n+    private String correlationKey;\n+\n+    private List<String> potentialOwners;\n+\n+    private String processDefinitionId;\n+\n+    private Long processInstanceId;\n+\n+    private Map<String, Object> inputVariables;\n+\n+    private Map<String, Object> processVariables;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getActualOwner() {\n+        return actualOwner;\n+    }\n+\n+    public void setActualOwner(String actualOwner) {\n+        this.actualOwner = actualOwner;\n+    }\n+\n+    public String getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    public void setCorrelationKey(String correlationKey) {\n+        this.correlationKey = correlationKey;\n+    }\n+\n+    public List<String> getPotentialOwners() {\n+        return potentialOwners;\n+    }\n+\n+    public void setPotentialOwners(List<String> potentialOwners) {\n+        this.potentialOwners = potentialOwners;\n+    }\n+\n+    public String getProcessDefinitionId() {\n+        return processDefinitionId;\n+    }\n+\n+    public void setProcessDefinitionId(String processDefinitionId) {\n+        this.processDefinitionId = processDefinitionId;\n+    }\n+\n+    public Long getProcessInstanceId() {\n+        return processInstanceId;\n+    }\n+\n+    public void setProcessInstanceId(Long processInstanceId) {\n+        this.processInstanceId = processInstanceId;\n+    }\n+\n+    public Map<String, Object> getInputVariables() {\n+        return inputVariables;\n+    }\n+\n+    public void setInputVariables(Map<String, Object> inputVariables) {\n+        this.inputVariables = inputVariables;\n+    }\n+\n+    public Map<String, Object> getProcessVariables() {\n+        return processVariables;\n+    }\n+\n+    public void setProcessVariables(Map<String, Object> processVariables) {\n+        this.processVariables = processVariables;\n+    }\n+\n+}", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzODAyMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411238022", "bodyText": "not needed.", "author": "elguardian", "createdAt": "2020-04-20T09:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNTAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\nindex 37a634ea3..c7a143d23 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/instance/ProcessInstanceUserTaskWithVariables.java\n\n@@ -21,28 +21,38 @@ import java.util.Map;\n \n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n \n @XmlAccessorType(XmlAccessType.FIELD)\n-@XmlRootElement(name = \"task-with-vars\")\n+@XmlRootElement(name = \"process-instance-task-with-vars\")\n public class ProcessInstanceUserTaskWithVariables {\n \n+    @XmlElement(name = \"id\")\n     private Long id;\n \n+    @XmlElement(name = \"name\")\n     private String name;\n \n+    @XmlElement(name = \"actual-owner\")\n     private String actualOwner;\n \n+    @XmlElement(name = \"correlation-key\")\n     private String correlationKey;\n \n+    @XmlElement(name = \"potential-owners\")\n     private List<String> potentialOwners;\n \n+    @XmlElement(name = \"process-definition-id\")\n     private String processDefinitionId;\n \n+    @XmlElement(name = \"process-instance-id\")\n     private Long processInstanceId;\n \n+    @XmlElement(name = \"task-instance-input-variables\")\n     private Map<String, Object> inputVariables;\n \n+    @XmlElement(name = \"process-variables\")\n     private Map<String, Object> processVariables;\n \n     public Long getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDcxNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408924716", "bodyText": "Log message shouldn't be something like \"cases search\" instead of \"process\"?", "author": "afalhambra", "createdAt": "2020-04-15T15:17:58Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java", "diffHunk": "@@ -362,4 +373,52 @@ public Response getCaseInstanceDataItems(@javax.ws.rs.core.Context HttpHeaders h\n                     return createCorrectVariant(response, headers, Response.Status.OK, customHeaders);\n                 });\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryCaseByVariables(@Context HttpHeaders headers, String payload,\n+                                         @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                         @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzODkyNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411238926", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\nindex 670533491..933bfa280 100644\n--- a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\n+++ b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\n\n@@ -387,7 +387,7 @@ public class CaseQueryResource extends AbstractCaseResource {\n         try {\n             String type = getContentType(headers);\n             CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n-            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);\n+            logger.debug(\"Returning result of case instance search: {}\", processVariableSummaryList);\n \n             return createCorrectVariant(processVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNzYwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408927608", "bodyText": "Log message shouldn't be something like \"case tasks search\" instead of \"process search\"?", "author": "afalhambra", "createdAt": "2020-04-15T15:21:43Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java", "diffHunk": "@@ -362,4 +373,52 @@ public Response getCaseInstanceDataItems(@javax.ws.rs.core.Context HttpHeaders h\n                     return createCorrectVariant(response, headers, Response.Status.OK, customHeaders);\n                 });\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryCaseByVariables(@Context HttpHeaders headers, String payload,\n+                                         @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                         @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);\n+\n+            return createCorrectVariant(processVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n+\n+        } catch (Exception e) {\n+            logger.error(\"Unexpected error during processing {}\", e.getMessage(), e);\n+            return internalServerError(errorMessage(e), v, conversationIdHeader);\n+        }\n+\n+    }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_TASKS_CASES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryCaseUserTasksByVariables(@Context HttpHeaders headers,\n+                                                  String payload,\n+                                                  @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                                  @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            CaseUserTaskWithVariablesList taskVariableSummaryList = caseManagementRuntimeDataServiceBase.queryUserTasksByVariables(payload, type, new QueryContext((page * pageSize), pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", taskVariableSummaryList);", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzOTAxNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411239014", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNzYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\nindex 670533491..933bfa280 100644\n--- a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\n+++ b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java\n\n@@ -387,7 +387,7 @@ public class CaseQueryResource extends AbstractCaseResource {\n         try {\n             String type = getContentType(headers);\n             CaseInstanceCustomVarsList processVariableSummaryList = caseManagementRuntimeDataServiceBase.queryCasesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n-            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);\n+            logger.debug(\"Returning result of case instance search: {}\", processVariableSummaryList);\n \n             return createCorrectVariant(processVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyODgzNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408928836", "bodyText": "Shouldn't be log message more related to \"process tasks search\" rather than same log message as queryProcessesByVariables method? Just to differentiate from \"queryProcessesByVariables\" method.", "author": "afalhambra", "createdAt": "2020-04-15T15:23:19Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/RuntimeDataResource.java", "diffHunk": "@@ -762,4 +768,51 @@ public Response getTasksByVariables(@Context HttpHeaders headers,\n             return internalServerError(errorMessage(e), v, conversationIdHeader);\n         }\n     }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_PROCESSES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryProcessesByVariables(@Context HttpHeaders headers, String payload,\n+                                              @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                              @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            ProcessInstanceCustomVarsList processVariableSummaryList = runtimeDataServiceBase.queryProcessesByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", processVariableSummaryList);\n+\n+            return createCorrectVariant(processVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n+\n+        } catch (Exception e) {\n+            logger.error(\"Unexpected error during processing {}\", e.getMessage(), e);\n+            return internalServerError(errorMessage(e), v, conversationIdHeader);\n+        }\n+\n+    }\n+\n+    @POST\n+    @Path(RestURI.VARIABLES_TASKS_PROCESSES_URI)\n+    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public Response queryUserTasksByVariables(@Context HttpHeaders headers, String payload,\n+                                              @ApiParam(value = \"optional pagination - at which page to start, defaults to 0 (meaning first)\", required = false) @QueryParam(\"page\") @DefaultValue(\"0\") Integer page, \n+                                              @ApiParam(value = \"optional pagination - size of the result, defaults to 10\", required = false) @QueryParam(\"pageSize\") @DefaultValue(\"10\") Integer pageSize) {\n+\n+        Header conversationIdHeader = buildConversationIdHeader(\"\", context, headers);\n+        Variant v = getVariant(headers);\n+        try {\n+            String type = getContentType(headers);\n+            ProcessInstanceUserTaskWithVariablesList taskVariableSummaryList = runtimeDataServiceBase.queryUserTasksByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n+            logger.debug(\"Returning result of process instance search: {}\", taskVariableSummaryList);", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIzOTQ5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411239499", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyODgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/RuntimeDataResource.java b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/RuntimeDataResource.java\nindex 60d10dca8..33ce6580b 100644\n--- a/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/RuntimeDataResource.java\n+++ b/kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/RuntimeDataResource.java\n\n@@ -806,7 +806,7 @@ public class RuntimeDataResource {\n         try {\n             String type = getContentType(headers);\n             ProcessInstanceUserTaskWithVariablesList taskVariableSummaryList = runtimeDataServiceBase.queryUserTasksByVariables(payload, type, new QueryContext(page * pageSize, pageSize));\n-            logger.debug(\"Returning result of process instance search: {}\", taskVariableSummaryList);\n+            logger.debug(\"Returning result of process tasks search: {}\", taskVariableSummaryList);\n \n             return createCorrectVariant(taskVariableSummaryList, headers, Response.Status.OK, conversationIdHeader);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNjMyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r408936323", "bodyText": "Why are we using parallelStream here?", "author": "afalhambra", "createdAt": "2020-04-15T15:32:53Z", "path": "kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java", "diffHunk": "@@ -455,4 +462,54 @@ public static  CaseMigrationReportInstance convertCaseMigrationReport(String cas\n         }\n         return reports;\n     }\n+\n+    public static CaseUserTaskWithVariablesList convertToCaseUserTaskWithVariablesList(List<UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables) {\n+        List<CaseUserTaskWithVariables> data = new ArrayList<>();\n+        for (UserTaskInstanceWithPotOwnerDesc desc : queryUserTasksByVariables) {\n+            CaseUserTaskWithVariables var = new CaseUserTaskWithVariables();\n+            var.setId(desc.getTaskId());\n+            var.setName(desc.getName());\n+            var.setProcessInstanceId(desc.getProcessInstanceId());\n+            var.setCorrelationKey(desc.getCorrelationKey());\n+            var.setActualOwner(desc.getActualOwner());\n+            var.setCaseDefinitionId(desc.getProcessId());\n+            var.setPotentialOwners(desc.getPotentialOwners());\n+            var.setCaseId(desc.getCorrelationKey());\n+            var.setProcessVariables(desc.getProcessVariables());\n+            var.setInputVariables(desc.getInputdata());\n+            var.setCaseVariables(desc.getExtraData());\n+            data.add(var);\n+        }\n+\n+        CaseUserTaskWithVariablesList result = new CaseUserTaskWithVariablesList();\n+        result.setCaseUserTaskWithVariables(data.parallelStream().toArray(CaseUserTaskWithVariables[]::new));", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0MDI2MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411240261", "bodyText": "good catch. it is a mistake", "author": "elguardian", "createdAt": "2020-04-20T09:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNjMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java b/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java\nindex 663083766..4943b6c93 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-case-mgmt/src/main/java/org/kie/server/services/casemgmt/ConvertUtils.java\n\n@@ -482,7 +482,7 @@ public class ConvertUtils {\n         }\n \n         CaseUserTaskWithVariablesList result = new CaseUserTaskWithVariablesList();\n-        result.setCaseUserTaskWithVariables(data.parallelStream().toArray(CaseUserTaskWithVariables[]::new));\n+        result.setCaseUserTaskWithVariables(data.stream().toArray(CaseUserTaskWithVariables[]::new));\n         return result;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0MDgzOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409340839", "bodyText": "Would just be nice to add some search criteria rather an empty one.", "author": "afalhambra", "createdAt": "2020-04-16T07:31:51Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +736,54 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        Assume.assumeTrue(configuration.isRest());\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+\n+        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n+        SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n+        filter.setAttributesQueryParams(attrs);\n+        List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n+        assertNotNull(caseInstanceCustomVarsList);\n+        Assertions.assertThat(caseInstanceCustomVarsList).hasSize(2);\n+\n+        attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));\n+        filter = new SearchQueryFilterSpec();\n+        filter.setAttributesQueryParams(attrs);\n+        caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n+        assertNotNull(caseInstanceCustomVarsList);\n+        caseInstanceCustomVarsList.stream().forEach(e -> assertTrue(e.getCaseId().startsWith(CLAIM_CASE_ID_PREFIX)));\n+\n+        List<CaseUserTaskWithVariables> caseUserTaskWithVariablesList = caseClient.queryUserTaskByVariables(new SearchQueryFilterSpec(), 0, 2);", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0MDg4Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411240887", "bodyText": "well most of the heavy testing is in other class. so there is no point to check further here.", "author": "elguardian", "createdAt": "2020-04-20T09:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0MDgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\nindex 4d06ee504..23924cf09 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n\n@@ -765,14 +766,14 @@ public class CaseServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest\n         Assertions.assertThat(additionalComment).isNotNull();\n         Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n \n-        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n+        List<QueryParam> attrs = list(equalsTo(CASE_ATTR_CORRELATION_KEY, caseId));\n         SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n         filter.setAttributesQueryParams(attrs);\n         List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n         assertNotNull(caseInstanceCustomVarsList);\n         Assertions.assertThat(caseInstanceCustomVarsList).hasSize(2);\n \n-        attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));\n+        attrs = list(likeTo(CASE_ATTR_CORRELATION_KEY, false, CLAIM_CASE_ID_PREFIX + \"%\"));\n         filter = new SearchQueryFilterSpec();\n         filter.setAttributesQueryParams(attrs);\n         caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3Njg0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409376847", "bodyText": "No need to throw Exception - never thrown in this method.", "author": "afalhambra", "createdAt": "2020-04-16T08:30:45Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0MTQyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411241423", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3Njg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\nindex 2d1d820b8..3539419d0 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n\n@@ -1841,7 +1842,7 @@ public class RuntimeDataServiceIntegrationTest extends JbpmKieServerBaseIntegrat\n     @Test\n     public void testQueryProcessesByVariables() throws Exception {\n         Assume.assumeTrue(configuration.isRest());\n-        Map<String, Object> parameters = new HashMap<String, Object>();\n+        Map<String, Object> parameters = new HashMap<>();\n         parameters.put(\"stringData\", \"waiting for signal\");\n         parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NzI0Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409377246", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters = new HashMap<String, Object>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "author": "afalhambra", "createdAt": "2020-04-16T08:31:24Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Assume.assumeTrue(configuration.isRest());\n+        Map<String, Object> parameters = new HashMap<String, Object>();", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NTk1OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r410055958", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T07:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NzI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\nindex 2d1d820b8..3539419d0 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n\n@@ -1841,7 +1842,7 @@ public class RuntimeDataServiceIntegrationTest extends JbpmKieServerBaseIntegrat\n     @Test\n     public void testQueryProcessesByVariables() throws Exception {\n         Assume.assumeTrue(configuration.isRest());\n-        Map<String, Object> parameters = new HashMap<String, Object>();\n+        Map<String, Object> parameters = new HashMap<>();\n         parameters.put(\"stringData\", \"waiting for signal\");\n         parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NjU1OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409386558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        spec.setAttributesQueryParams(list(equalsTo(\"PROCESS_DEPLOYMENT_ID\", CONTAINER_ID)));\n          \n          \n            \n                        spec.setAttributesQueryParams(list(equalsTo(AdvanceRuntimeDataService.PROCESS_DEPLOYMENT_ID, CONTAINER_ID)));", "author": "afalhambra", "createdAt": "2020-04-16T08:46:01Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Assume.assumeTrue(configuration.isRest());\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+        parameters.put(\"stringData\", \"waiting for signal\");\n+        parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK, parameters);\n+\n+        try {\n+\n+            List<TaskSummary> tasks = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10, \"Status\", false);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            SearchQueryFilterSpec spec = new SearchQueryFilterSpec();\n+            spec.setAttributesQueryParams(list(equalsTo(\"PROCESS_DEPLOYMENT_ID\", CONTAINER_ID)));", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NjQ3Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r410056473", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T07:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NjU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\nindex 2d1d820b8..3539419d0 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n\n@@ -1841,7 +1842,7 @@ public class RuntimeDataServiceIntegrationTest extends JbpmKieServerBaseIntegrat\n     @Test\n     public void testQueryProcessesByVariables() throws Exception {\n         Assume.assumeTrue(configuration.isRest());\n-        Map<String, Object> parameters = new HashMap<String, Object>();\n+        Map<String, Object> parameters = new HashMap<>();\n         parameters.put(\"stringData\", \"waiting for signal\");\n         parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Njc1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409386756", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        spec.setAttributesQueryParams(list(in(\"PROCESS_DEFINITION_ID\", PROCESS_ID_USERTASK)));\n          \n          \n            \n                        spec.setAttributesQueryParams(list(in(AdvanceRuntimeDataService.PROCESS_DEFINITION_ID, PROCESS_ID_USERTASK)));", "author": "afalhambra", "createdAt": "2020-04-16T08:46:22Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1824,6 +1838,45 @@ public void testFindTaskEventsForNotExistingTask() {\n         }\n     }\n \n+    @Test\n+    public void testQueryProcessesByVariables() throws Exception {\n+        Assume.assumeTrue(configuration.isRest());\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n+        parameters.put(\"stringData\", \"waiting for signal\");\n+        parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n+\n+        Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_USERTASK, parameters);\n+\n+        try {\n+\n+            List<TaskSummary> tasks = taskClient.findTasksByStatusByProcessInstanceId(processInstanceId, null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            tasks = taskClient.findTasksAssignedAsPotentialOwner(USER_YODA, \"First%\", null, 0, 10, \"Status\", false);\n+            assertNotNull(tasks);\n+            assertEquals(1, tasks.size());\n+\n+            SearchQueryFilterSpec spec = new SearchQueryFilterSpec();\n+            spec.setAttributesQueryParams(list(equalsTo(\"PROCESS_DEPLOYMENT_ID\", CONTAINER_ID)));\n+            List<ProcessInstanceCustomVars> listProcesses = queryClient.queryProcessesByVariables(spec, 0, 2);\n+            assertNotNull(listProcesses);\n+            listProcesses.stream().forEach(e -> assertEquals(CONTAINER_ID, e.getContainerId()));\n+\n+            spec = new SearchQueryFilterSpec();\n+            spec.setAttributesQueryParams(list(in(\"PROCESS_DEFINITION_ID\", PROCESS_ID_USERTASK)));", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0MjA1OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r411242058", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-04-20T09:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Njc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\nindex 2d1d820b8..3539419d0 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java\n\n@@ -1841,7 +1842,7 @@ public class RuntimeDataServiceIntegrationTest extends JbpmKieServerBaseIntegrat\n     @Test\n     public void testQueryProcessesByVariables() throws Exception {\n         Assume.assumeTrue(configuration.isRest());\n-        Map<String, Object> parameters = new HashMap<String, Object>();\n+        Map<String, Object> parameters = new HashMap<>();\n         parameters.put(\"stringData\", \"waiting for signal\");\n         parameters.put(\"personData\", createPersonInstance(USER_JOHN));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NzYxNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409387616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n          \n          \n            \n                    List<QueryParam> attrs = list(equalsTo(AdvanceCaseRuntimeDataService.CASE_ATTR_CORRELATION_KEY, caseId));", "author": "afalhambra", "createdAt": "2020-04-16T08:47:46Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +736,54 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        Assume.assumeTrue(configuration.isRest());\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+\n+        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1Njg3Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r410056876", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T07:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NzYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\nindex 4d06ee504..23924cf09 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n\n@@ -765,14 +766,14 @@ public class CaseServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest\n         Assertions.assertThat(additionalComment).isNotNull();\n         Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n \n-        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n+        List<QueryParam> attrs = list(equalsTo(CASE_ATTR_CORRELATION_KEY, caseId));\n         SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n         filter.setAttributesQueryParams(attrs);\n         List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n         assertNotNull(caseInstanceCustomVarsList);\n         Assertions.assertThat(caseInstanceCustomVarsList).hasSize(2);\n \n-        attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));\n+        attrs = list(likeTo(CASE_ATTR_CORRELATION_KEY, false, CLAIM_CASE_ID_PREFIX + \"%\"));\n         filter = new SearchQueryFilterSpec();\n         filter.setAttributesQueryParams(attrs);\n         caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Nzg2Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r409387862", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));\n          \n          \n            \n                    attrs = list(likeTo(AdvanceCaseRuntimeDataService.CASE_ATTR_CORRELATION_KEY, false, CLAIM_CASE_ID_PREFIX + \"%\"));", "author": "afalhambra", "createdAt": "2020-04-16T08:48:08Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java", "diffHunk": "@@ -729,6 +736,54 @@ public void testAddAndRemoveMultipleDataFromCaseFile() {\n         Assertions.assertThat(caseData).containsOnly(entry(\"car\", \"fiat\"));\n     }\n \n+    @Test\n+    public void testQueryByVariable() {\n+        Assume.assumeTrue(configuration.isRest());\n+        String caseId = startCarInsuranceClaimCase(USER_YODA, USER_JOHN, USER_YODA);\n+\n+        Assertions.assertThat(caseId).isNotNull();\n+        Assertions.assertThat(caseId).startsWith(CLAIM_CASE_ID_PREFIX);\n+\n+        CaseInstance caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        assertCarInsuranceCaseInstance(caseInstance, caseId, USER_YODA);\n+\n+        caseClient.closeCaseInstance(CONTAINER_ID, caseId, \"work done at the moment\");\n+\n+        CaseInstance closed = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(closed.getCaseStatus()).isEqualTo(2);\n+        Assertions.assertThat(closed.getCompletionMessage()).isEqualTo(\"work done at the moment\");\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"additionalComment\", \"reopening the case\");\n+        caseClient.reopenCase(caseId, CONTAINER_ID, CLAIM_CASE_DEF_ID, data);\n+\n+        caseInstance = caseClient.getCaseInstance(CONTAINER_ID, caseId);\n+        Assertions.assertThat(caseInstance).isNotNull();\n+        Assertions.assertThat(caseInstance.getCaseId()).isEqualTo(caseId);\n+\n+        Object additionalComment = caseClient.getCaseInstanceData(CONTAINER_ID, caseId, \"additionalComment\");\n+        Assertions.assertThat(additionalComment).isNotNull();\n+        Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n+\n+        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n+        SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n+        filter.setAttributesQueryParams(attrs);\n+        List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n+        assertNotNull(caseInstanceCustomVarsList);\n+        Assertions.assertThat(caseInstanceCustomVarsList).hasSize(2);\n+\n+        attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));", "originalCommit": "735ed5f8e06f2a9945a06cb299d2ee238c3dbf99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1ODE3NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2053#discussion_r410058175", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T08:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Nzg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\nindex 4d06ee504..23924cf09 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseServiceIntegrationTest.java\n\n@@ -765,14 +766,14 @@ public class CaseServiceIntegrationTest extends JbpmKieServerBaseIntegrationTest\n         Assertions.assertThat(additionalComment).isNotNull();\n         Assertions.assertThat(additionalComment).isEqualTo(\"reopening the case\");\n \n-        List<QueryParam> attrs = list(equalsTo(\"PROCESS_CORRELATION_KEY\", caseId));\n+        List<QueryParam> attrs = list(equalsTo(CASE_ATTR_CORRELATION_KEY, caseId));\n         SearchQueryFilterSpec filter = new SearchQueryFilterSpec();\n         filter.setAttributesQueryParams(attrs);\n         List<CaseInstanceCustomVars> caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n         assertNotNull(caseInstanceCustomVarsList);\n         Assertions.assertThat(caseInstanceCustomVarsList).hasSize(2);\n \n-        attrs = list(likeTo(\"PROCESS_CORRELATION_KEY\", false, CLAIM_CASE_ID_PREFIX + \"%\"));\n+        attrs = list(likeTo(CASE_ATTR_CORRELATION_KEY, false, CLAIM_CASE_ID_PREFIX + \"%\"));\n         filter = new SearchQueryFilterSpec();\n         filter.setAttributesQueryParams(attrs);\n         caseInstanceCustomVarsList = caseClient.queryCasesByVariables(filter, 0, 2);\n"}}, {"oid": "1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1344fb99d1c4fec9f3b78391e7a7bce43dd0a367", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-17T08:04:23Z", "type": "forcePushed"}, {"oid": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-20T09:52:56Z", "type": "commit"}, {"oid": "6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6f89249ccb0ef39ec7135799cfd0ce4b485c543e", "message": "[RHPAM-2552] Search for tasks / process instances / cases by multiple constraints\n\nthin layer for kie server to use new api", "committedDate": "2020-04-20T09:52:56Z", "type": "forcePushed"}]}