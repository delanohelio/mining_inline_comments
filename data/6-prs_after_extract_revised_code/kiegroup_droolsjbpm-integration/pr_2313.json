{"pr_number": 2313, "pr_title": "[JBPM-9457] Springboot tests for Kafka Emitter", "pr_createdAt": "2020-11-13T15:52:31Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0MDY2MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525140661", "bodyText": "small typo (missing a n)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Map<String, OrganizationalEntity> roleAssigments() {\n          \n          \n            \n                protected Map<String, OrganizationalEntity> roleAssignments() {", "author": "afalhambra", "createdAt": "2020-11-17T13:10:10Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.counting;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.StreamSupport.stream;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.ByteArrayDeserializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.event.emitters.kafka.KafkaEventEmitter;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.springboot.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final int LARGE_SIZE = 50000;\n+    protected static final int TOO_LARGE_SIZE = 500000;\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0\";\n+    \n+    protected static final String PROCESSES_TOPIC = \"jbpm-processes-events\";\n+    protected static final String TASKS_TOPIC = \"jbpm-tasks-events\";\n+    protected static final String CASES_TOPIC = \"jbpm-cases-events\";\n+    protected static final String CUSTOM_PROCESSES_TOPIC = \"custom-processes\";\n+    \n+    protected static final String PROCESS_TYPE = \"process\";\n+    protected static final String CASE_TYPE = \"case\";\n+\n+    protected static final String EVALUATION_PROCESS_ID = \"evaluation\";\n+    protected static final String EVALUATION_DESC = \"Evaluation\";\n+    \n+    protected static final String JOHN = \"john\";\n+    protected static final String YODA = \"yoda\";\n+    \n+    protected static final String CONTACT = \"contact\";\n+    protected static final String OWNER = \"owner\";\n+\n+    protected static final String VAR_KEY = \"s\";\n+    protected static final String VAR_VALUE= \"first case started\";\n+    protected static final String CHINESE_INITIATOR = \"\u53d1\u8d77\u8005\";\n+    protected static final String LARGE_VAR = \"large_var\";\n+    protected static final String NULL_VAR = \"null_var\";\n+    protected static final String INITIATOR = \"initiator\";\n+    protected static final String CASE_VARIABLES = \"caseVariables\";\n+    protected static final String VARIABLES = \"variables\";\n+    protected static final String USER_TASK_CASE = \"UserTaskCase\";\n+    \n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup(boolean configure) {\n+        EntityManagerFactoryManager.get().clear();\n+        \n+        if (!configure) {\n+            return;\n+        }\n+        \n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\", bootstrapServers);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\", \"test_jbpm\");\n+        \n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        Properties props = new Properties();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(PROCESSES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(TASKS_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CASES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CUSTOM_PROCESSES_TOPIC, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH+artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected Map<String, Object> initParameters() {\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(INITIATOR, CHINESE_INITIATOR);\n+        parameters.put(NULL_VAR, null);\n+        return parameters;\n+    }\n+    \n+    protected ListAppender<ILoggingEvent> addLogAppender() {\n+        Logger logger = (Logger) LoggerFactory.getLogger(KafkaEventEmitter.class);\n+        ListAppender<ILoggingEvent> listAppender = new ListAppender<>();\n+        listAppender.start();\n+        logger.addAppender(listAppender);\n+        return listAppender;\n+    }\n+    \n+    protected Optional<ILoggingEvent> getLog(ListAppender<ILoggingEvent> listAppender) {\n+        Optional<ILoggingEvent> logEvent = listAppender.list.stream().filter(log -> log.getLevel() == Level.ERROR)\n+                .findAny();\n+        assertTrue(\"no trace printed when failed\", logEvent.isPresent());\n+        return logEvent;\n+    }\n+    \n+    protected CaseFile caseFile(int valueSize) {\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(VAR_KEY, VAR_VALUE);\n+        data.put(LARGE_VAR, RandomStringUtils.random(valueSize));\n+        return CaseFile.builder().data(data).build();\n+    }\n+    \n+    protected Map<String, OrganizationalEntity> roleAssigments() {", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMDMzNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530200335", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-11-25T08:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0MDY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java\nindex be5f62185..ea6e6b1d8 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java\n\n@@ -28,6 +28,7 @@ import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZE\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MDU5Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525240597", "bodyText": "You can also use below (tho not mandatory, just a suggestion)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(!variables.isEmpty());\n          \n          \n            \n                    assertFalse(variables.isEmpty());", "author": "afalhambra", "createdAt": "2020-11-17T15:22:40Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.counting;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.StreamSupport.stream;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.ByteArrayDeserializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.event.emitters.kafka.KafkaEventEmitter;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.springboot.utils.KieJarBuildHelper;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+public class KafkaFixture {\n+\n+    protected static final int LARGE_SIZE = 50000;\n+    protected static final int TOO_LARGE_SIZE = 500000;\n+    protected static final String GROUP_ID = \"org.kie.server.testing\";\n+    protected static final String VERSION = \"1.0.0\";\n+    \n+    protected static final String PROCESSES_TOPIC = \"jbpm-processes-events\";\n+    protected static final String TASKS_TOPIC = \"jbpm-tasks-events\";\n+    protected static final String CASES_TOPIC = \"jbpm-cases-events\";\n+    protected static final String CUSTOM_PROCESSES_TOPIC = \"custom-processes\";\n+    \n+    protected static final String PROCESS_TYPE = \"process\";\n+    protected static final String CASE_TYPE = \"case\";\n+\n+    protected static final String EVALUATION_PROCESS_ID = \"evaluation\";\n+    protected static final String EVALUATION_DESC = \"Evaluation\";\n+    \n+    protected static final String JOHN = \"john\";\n+    protected static final String YODA = \"yoda\";\n+    \n+    protected static final String CONTACT = \"contact\";\n+    protected static final String OWNER = \"owner\";\n+\n+    protected static final String VAR_KEY = \"s\";\n+    protected static final String VAR_VALUE= \"first case started\";\n+    protected static final String CHINESE_INITIATOR = \"\u53d1\u8d77\u8005\";\n+    protected static final String LARGE_VAR = \"large_var\";\n+    protected static final String NULL_VAR = \"null_var\";\n+    protected static final String INITIATOR = \"initiator\";\n+    protected static final String CASE_VARIABLES = \"caseVariables\";\n+    protected static final String VARIABLES = \"variables\";\n+    protected static final String USER_TASK_CASE = \"UserTaskCase\";\n+    \n+    protected static final String PATH = \"src/test/resources/kjars/\";\n+    \n+    protected static String bootstrapServers;\n+    \n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    public static void generalSetup(boolean configure) {\n+        EntityManagerFactoryManager.get().clear();\n+        \n+        if (!configure) {\n+            return;\n+        }\n+        \n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\", bootstrapServers);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\", \"test_jbpm\");\n+        \n+        createTopics();\n+    }\n+\n+    public static void createTopics() {\n+        Properties props = new Properties();\n+        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+\n+        try (AdminClient adminClient = AdminClient.create(props)) {\n+            adminClient.createTopics(Arrays.asList(new NewTopic(PROCESSES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(TASKS_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CASES_TOPIC, 1, (short) 1),\n+                                                   new NewTopic(CUSTOM_PROCESSES_TOPIC, 1, (short) 1)))\n+                       .all().get(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            fail(\"Exception when createTopics: \" + e.getMessage());\n+        }\n+    }\n+    \n+    public String setup(DeploymentService ds, String artifactId) {\n+        KieJarBuildHelper.createKieJar(PATH+artifactId);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, artifactId, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    protected void cleanup(DeploymentService ds) {\n+        if (ds!=null) {\n+            ds.undeploy(unit);\n+        }\n+    }\n+\n+    protected Map<String, Object> initParameters() {\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(INITIATOR, CHINESE_INITIATOR);\n+        parameters.put(NULL_VAR, null);\n+        return parameters;\n+    }\n+    \n+    protected ListAppender<ILoggingEvent> addLogAppender() {\n+        Logger logger = (Logger) LoggerFactory.getLogger(KafkaEventEmitter.class);\n+        ListAppender<ILoggingEvent> listAppender = new ListAppender<>();\n+        listAppender.start();\n+        logger.addAppender(listAppender);\n+        return listAppender;\n+    }\n+    \n+    protected Optional<ILoggingEvent> getLog(ListAppender<ILoggingEvent> listAppender) {\n+        Optional<ILoggingEvent> logEvent = listAppender.list.stream().filter(log -> log.getLevel() == Level.ERROR)\n+                .findAny();\n+        assertTrue(\"no trace printed when failed\", logEvent.isPresent());\n+        return logEvent;\n+    }\n+    \n+    protected CaseFile caseFile(int valueSize) {\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(VAR_KEY, VAR_VALUE);\n+        data.put(LARGE_VAR, RandomStringUtils.random(valueSize));\n+        return CaseFile.builder().data(data).build();\n+    }\n+    \n+    protected Map<String, OrganizationalEntity> roleAssigments() {\n+        Map<String, OrganizationalEntity> roleAssignments = new HashMap<>();\n+        roleAssignments.put(OWNER, new UserImpl(YODA));\n+        roleAssignments.put(CONTACT, new UserImpl(JOHN));\n+        return roleAssignments;\n+    }\n+    \n+    protected void consumeAndAssertRecords(String topic, String type, int state, int expectedProcesses) {\n+        ConsumerRecords<String, byte[]>  records = consumeMessages(topic);\n+        assertEquals(expectedProcesses, records.count());\n+        if (records.iterator().hasNext()) {\n+            assertRecord(records.iterator().next(), topic, type, state);\n+        }\n+    }\n+\n+    protected <T> ConsumerRecords<String, T> consumeMessages(String topic) {\n+        try (KafkaConsumer<String, T> consumer = createConsumer(topic)) {\n+            ConsumerRecords<String, T> records = consumer.poll(Duration.ofSeconds(10));\n+            consumer.commitSync();\n+            return records;\n+        }\n+    }\n+\n+    protected <T> KafkaConsumer<String, T> createConsumer(String topic) {\n+        KafkaConsumer<String, T> consumer = new KafkaConsumer<>(consumerProperties());\n+        consumer.subscribe(singletonList(topic));\n+        return consumer;\n+    }\n+\n+    protected Properties consumerProperties() {\n+        Properties props = new Properties();\n+        props.setProperty(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        props.setProperty(GROUP_ID_CONFIG, \"jbpm_group\");\n+        props.setProperty(KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n+        props.setProperty(VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class.getName());\n+        props.setProperty(AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        return props;\n+    }\n+\n+    protected void assertRecord(ConsumerRecord<String, byte[]> record, String topic, String type, int status) {\n+        String artifactId = (PROCESS_TYPE.equals(type))? EVALUATION_PROCESS_ID: USER_TASK_CASE;\n+        Map<String, Object> event = getJsonObject(record);\n+        \n+        assertNull(record.key());\n+        assertEquals(topic, record.topic());\n+        \n+        assertEquals(type, event.get(\"type\"));\n+        assertTrue(event.get(\"source\").toString().contains(\"/process/\"+artifactId));\n+        assertTrue(event.get(\"data\") instanceof Map);\n+        Map<String, Object> data = (Map<String, Object>) event.get(\"data\");\n+        assertTrue(data.get(\"compositeId\").toString().contains(\"SpringBoot_\"));\n+        assertEquals(\"org.kie.server.testing:\"+artifactId+\":1.0.0\", data.get(\"containerId\"));\n+        assertNotNull(data.get(\"id\"));\n+        assertEquals(-1, data.get(\"parentId\"));\n+        assertTrue(data.get(VARIABLES) instanceof Map);\n+        Map<String,Object> variables = (Map<String,Object>) data.get(VARIABLES);\n+        assertTrue(!variables.isEmpty());", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMDg4Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530200886", "bodyText": "good point, thanks!", "author": "gmunozfe", "createdAt": "2020-11-25T08:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MDU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java\nindex be5f62185..ea6e6b1d8 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaFixture.java\n\n@@ -28,6 +28,7 @@ import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZE\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjgwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525276808", "bodyText": "Not throwing any checked exception\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n          \n          \n            \n                public void testKafkaEmitterProcessStartAndAbort() {", "author": "afalhambra", "createdAt": "2020-11-17T15:58:39Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMzgzNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530203836", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-11-25T08:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\nindex ab75ed60d..d7ed239ab 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n\n@@ -105,7 +105,7 @@ public class KafkaEmitterHappyPathTest extends KafkaFixture {\n     }\n \n     @Test(timeout = 30000)\n-    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+    public void testKafkaEmitterProcessStartAndAbort() {\n         deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n         \n         Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3NTAwMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525875003", "bodyText": "redundant since null-check of primitive types long is never null. Maybe changing it to use wrapper class Long\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n          \n          \n            \n                    assertNotNull(processInstanceId);\n          \n          \n            \n                    Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n          \n          \n            \n                    assertNotNull(processInstanceId);", "author": "afalhambra", "createdAt": "2020-11-18T07:51:33Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNDI5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530204299", "bodyText": "good catch!", "author": "gmunozfe", "createdAt": "2020-11-25T08:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3NTAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\nindex ab75ed60d..d7ed239ab 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n\n@@ -105,7 +105,7 @@ public class KafkaEmitterHappyPathTest extends KafkaFixture {\n     }\n \n     @Test(timeout = 30000)\n-    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+    public void testKafkaEmitterProcessStartAndAbort() {\n         deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n         \n         Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTM4Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525881383", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));\n          \n          \n            \n                    tasks.forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));", "author": "afalhambra", "createdAt": "2020-11-18T08:04:10Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        \n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), JOHN, new HashMap<>());\n+        \n+        tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(2, tasks.size());\n+        \n+        tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNDc5Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530204797", "bodyText": "right, nice observation!", "author": "gmunozfe", "createdAt": "2020-11-25T08:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\nindex ab75ed60d..d7ed239ab 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n\n@@ -105,7 +105,7 @@ public class KafkaEmitterHappyPathTest extends KafkaFixture {\n     }\n \n     @Test(timeout = 30000)\n-    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+    public void testKafkaEmitterProcessStartAndAbort() {\n         deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n         \n         Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTg1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525881856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n          \n          \n            \n                public void testKafkaEmitterProcessStartAndWorkOnUserTasks() {", "author": "afalhambra", "createdAt": "2020-11-18T08:05:03Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNTIzNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530205237", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-11-25T08:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\nindex ab75ed60d..d7ed239ab 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n\n@@ -105,7 +105,7 @@ public class KafkaEmitterHappyPathTest extends KafkaFixture {\n     }\n \n     @Test(timeout = 30000)\n-    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+    public void testKafkaEmitterProcessStartAndAbort() {\n         deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n         \n         Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjAxMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525882010", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testKafkaEmitterCaseStartAndAbort() throws Exception {\n          \n          \n            \n                public void testKafkaEmitterCaseStartAndAbort() {", "author": "afalhambra", "createdAt": "2020-11-18T08:05:20Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        \n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), JOHN, new HashMap<>());\n+        \n+        tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(2, tasks.size());\n+        \n+        tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+        \n+        ConsumerRecords<String, byte[]>  records = consumeMessages(TASKS_TOPIC);\n+        assertEquals(11, records.count());\n+        Map<String, Long> taskRecordsByStatus = groupRecordsByField(records, \"status\");\n+        \n+        assertEquals(2, taskRecordsByStatus.get(Ready.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Reserved.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(InProgress.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Completed.name()).intValue());\n+        \n+        records = consumeMessages(PROCESSES_TOPIC);\n+        assertEquals(4, records.count());\n+        Map<String, Long> processRecordsByStatus =  groupRecordsByField(records, \"state\");\n+        \n+        assertEquals(3, processRecordsByStatus.get(\"1\").intValue()); //Active\n+        assertEquals(1, processRecordsByStatus.get(\"2\").intValue()); //Completed\n+        \n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterCaseStartAndAbort() throws Exception {", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNTU2NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530205565", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-11-25T08:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\nindex ab75ed60d..d7ed239ab 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n\n@@ -105,7 +105,7 @@ public class KafkaEmitterHappyPathTest extends KafkaFixture {\n     }\n \n     @Test(timeout = 30000)\n-    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+    public void testKafkaEmitterProcessStartAndAbort() {\n         deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n         \n         Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjEyNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525882127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmitterRecordTooLargeException() throws Exception {\n          \n          \n            \n                public void testEmitterRecordTooLargeException() {", "author": "afalhambra", "createdAt": "2020-11-18T08:05:33Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.task.model.Status.Completed;\n+import static org.kie.api.task.model.Status.InProgress;\n+import static org.kie.api.task.model.Status.Ready;\n+import static org.kie.api.task.model.Status.Reserved;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.common.errors.RecordTooLargeException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.casemgmt.api.model.instance.CaseFileInstance;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.query.QueryFilter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterHappyPathTest extends KafkaFixture {\n+    \n+    protected static KafkaContainer kafka = new KafkaContainer();\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    @Autowired\n+    protected UserTaskService userTaskService;\n+    \n+    @Autowired\n+    protected RuntimeDataService runtimeDataService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        kafka.start();\n+        bootstrapServers = kafka.getBootstrapServers();\n+        generalSetup(true);\n+    }\n+\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+    }\n+    \n+    @AfterClass\n+    public static void teardown() {\n+        kafka.stop();\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.boopstrap.servers\");\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.client.id\");\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n+\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ACTIVE, 1);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+                \n+        consumeAndAssertRecords(PROCESSES_TOPIC, PROCESS_TYPE, STATE_ABORTED, 1);\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterProcessStartAndWorkOnUserTasks() throws IOException {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"employee\", JOHN);\n+        parameters.put(\"reason\", \"autoevaluation\");\n+        long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, parameters);\n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+        \n+        List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(1, tasks.size());\n+        \n+        userTaskService.completeAutoProgress(tasks.get(0).getId(), JOHN, new HashMap<>());\n+        \n+        tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(JOHN, new QueryFilter());\n+        assertEquals(2, tasks.size());\n+        \n+        tasks.stream().forEach(t -> userTaskService.completeAutoProgress(t.getId(), JOHN, new HashMap<>()));\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+        \n+        ConsumerRecords<String, byte[]>  records = consumeMessages(TASKS_TOPIC);\n+        assertEquals(11, records.count());\n+        Map<String, Long> taskRecordsByStatus = groupRecordsByField(records, \"status\");\n+        \n+        assertEquals(2, taskRecordsByStatus.get(Ready.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Reserved.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(InProgress.name()).intValue());\n+        assertEquals(3, taskRecordsByStatus.get(Completed.name()).intValue());\n+        \n+        records = consumeMessages(PROCESSES_TOPIC);\n+        assertEquals(4, records.count());\n+        Map<String, Long> processRecordsByStatus =  groupRecordsByField(records, \"state\");\n+        \n+        assertEquals(3, processRecordsByStatus.get(\"1\").intValue()); //Active\n+        assertEquals(1, processRecordsByStatus.get(\"2\").intValue()); //Completed\n+        \n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testKafkaEmitterCaseStartAndAbort() throws Exception {\n+        deploymentId = setup(deploymentService, USER_TASK_CASE);\n+        \n+        CaseFileInstance caseFileInstance = caseService.newCaseFileInstance(deploymentId, \n+                                                                            USER_TASK_CASE, \n+                                                                            caseFile(LARGE_SIZE).getData(),\n+                                                                            roleAssigments());\n+        \n+        String caseId = caseService.startCase(deploymentId, USER_TASK_CASE, caseFileInstance);\n+        assertNotNull(caseId);\n+        \n+        consumeAndAssertRecords(CASES_TOPIC, CASE_TYPE, STATE_ACTIVE, 1);\n+        caseService.cancelCase(caseId);\n+        \n+        consumeAndAssertRecords(CASES_TOPIC, CASE_TYPE, STATE_ABORTED, 1);\n+        \n+        ConsumerRecords<String, byte[]>  records = consumeMessages(TASKS_TOPIC);\n+        assertEquals(2, records.count());\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testEmitterRecordTooLargeException() throws Exception {", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNTg0Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530205842", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-11-25T08:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\nindex ab75ed60d..d7ed239ab 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterHappyPathTest.java\n\n@@ -105,7 +105,7 @@ public class KafkaEmitterHappyPathTest extends KafkaFixture {\n     }\n \n     @Test(timeout = 30000)\n-    public void testKafkaEmitterProcessStartAndAbort() throws Exception {\n+    public void testKafkaEmitterProcessStartAndAbort() {\n         deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n         \n         Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, initParameters());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMjM5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525902399", "bodyText": "do we really want to keep them as public?", "author": "afalhambra", "createdAt": "2020-11-18T08:36:57Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaEmitterTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.BEFORE_CLASS)\n+public class ProxyAwareKafkaEmitterTest extends KafkaFixture{\n+\n+    protected static final int TOXY_PROXY_PORT = Integer.parseInt(System.getProperty(\"toxiproxy.port\"));\n+\n+    public static Network network = Network.newNetwork();\n+    \n+    public static ProxyAwareKafkaContainer kafka = (ProxyAwareKafkaContainer) new ProxyAwareKafkaContainer()\n+                                                     .withExposedPorts(TOXY_PROXY_PORT)\n+                                                     .withNetwork(network);\n+\n+    public static ToxiproxyContainer toxiproxy  = new ToxiproxyContainer().withNetwork(network);", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNDEyOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530224129", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-11-25T09:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaEmitterTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaEmitterTest.java\nindex 85604ec5e..9819fbbf8 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaEmitterTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaEmitterTest.java\n\n@@ -50,13 +50,13 @@ public class ProxyAwareKafkaEmitterTest extends KafkaFixture{\n \n     protected static final int TOXY_PROXY_PORT = Integer.parseInt(System.getProperty(\"toxiproxy.port\"));\n \n-    public static Network network = Network.newNetwork();\n+    protected static Network network = Network.newNetwork();\n     \n-    public static ProxyAwareKafkaContainer kafka = (ProxyAwareKafkaContainer) new ProxyAwareKafkaContainer()\n+    protected static ProxyAwareKafkaContainer kafka = (ProxyAwareKafkaContainer) new ProxyAwareKafkaContainer()\n                                                      .withExposedPorts(TOXY_PROXY_PORT)\n                                                      .withNetwork(network);\n \n-    public static ToxiproxyContainer toxiproxy  = new ToxiproxyContainer().withNetwork(network);\n+    protected static ToxiproxyContainer toxiproxy  = new ToxiproxyContainer().withNetwork(network);\n     \n     protected static ToxiproxyContainer.ContainerProxy kafkaProxy;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNTc1Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525905753", "bodyText": "I think it should be marked with the override annotation.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String getBootstrapServers() {\n          \n          \n            \n                @Override\n          \n          \n            \n                public String getBootstrapServers() {", "author": "afalhambra", "createdAt": "2020-11-18T08:42:30Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaContainer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import org.testcontainers.containers.KafkaContainer;\n+\n+public class ProxyAwareKafkaContainer extends KafkaContainer {\n+\n+    private String host;\n+    \n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+    \n+    public String getBootstrapServers() {", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNzc0NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530207744", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-11-25T09:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNTc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaContainer.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaContainer.java\nindex cc81ddd8c..0d3a62ab6 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaContainer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/ProxyAwareKafkaContainer.java\n\n@@ -26,6 +26,7 @@ public class ProxyAwareKafkaContainer extends KafkaContainer {\n         this.host = host;\n     }\n     \n+    @Override\n     public String getBootstrapServers() {\n         return String.format(\"PLAINTEXT://%s\", host);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxOTkwMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525919902", "bodyText": "not used in the test\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected CaseService caseService;", "author": "afalhambra", "createdAt": "2020-11-18T09:04:32Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.kafka.common.errors.TimeoutException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwODA1NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530208054", "bodyText": "removed", "author": "gmunozfe", "createdAt": "2020-11-25T09:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxOTkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\nindex cf8be88d5..4138623ae 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\n\n@@ -55,9 +55,6 @@ public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n     @Autowired\n     protected ProcessService processService;\n     \n-    @Autowired\n-    protected CaseService caseService;\n-    \n     protected String deploymentId;\n \n     @BeforeClass\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyMDY4Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525920686", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testEmitterNoKafkaBrokerTimeoutException() throws Exception {\n          \n          \n            \n                public void testEmitterNoKafkaBrokerTimeoutException() {", "author": "afalhambra", "createdAt": "2020-11-18T09:05:39Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.kafka.common.errors.TimeoutException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        generalSetup(false);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\", \"500\");\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\");\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testEmitterNoKafkaBrokerTimeoutException() throws Exception {", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwODMzNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530208334", "bodyText": "removed", "author": "gmunozfe", "createdAt": "2020-11-25T09:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyMDY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\nindex cf8be88d5..4138623ae 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\n\n@@ -55,9 +55,6 @@ public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n     @Autowired\n     protected ProcessService processService;\n     \n-    @Autowired\n-    protected CaseService caseService;\n-    \n     protected String deploymentId;\n \n     @BeforeClass\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzMDI4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r525930285", "bodyText": "wouldn't it be worth checking that KafkaEmitter is able to send messages to the topic once the timeout is removed (or increased)? - wdyt?", "author": "afalhambra", "createdAt": "2020-11-18T09:20:17Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Optional;\n+\n+import org.apache.kafka.common.errors.TimeoutException;\n+import org.jbpm.casemgmt.api.CaseService;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.read.ListAppender;\n+\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringBootTest(classes = {KieServerApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n+    \n+    @Autowired\n+    protected DeploymentService deploymentService;\n+\n+    @Autowired\n+    protected ProcessService processService;\n+    \n+    @Autowired\n+    protected CaseService caseService;\n+    \n+    protected String deploymentId;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        generalSetup(false);\n+        System.setProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\", \"500\");\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanup(deploymentService);\n+        System.clearProperty(\"org.kie.jbpm.event.emitters.kafka.max.block.ms\");\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testEmitterNoKafkaBrokerTimeoutException() throws Exception {\n+        deploymentId = setup(deploymentService, EVALUATION_PROCESS_ID);\n+        \n+        ListAppender<ILoggingEvent> listAppender = addLogAppender();\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, EVALUATION_PROCESS_ID, singletonMap(\"initiator\", YODA));\n+\n+        Optional<ILoggingEvent> logEvent = getLog(listAppender);\n+        assertEquals(TimeoutException.class.getCanonicalName(), logEvent.get().getThrowableProxy().getClassName());\n+        \n+        assertNotNull(processInstanceId);\n+        assertTrue(processInstanceId > 0);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+        \n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);", "originalCommit": "1f9e2e628663b6c68bdd111a6883bfd5fa40b50f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwOTQwMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r530209402", "bodyText": "Not in this test, as there's no testcontainer kafka broker", "author": "gmunozfe", "createdAt": "2020-11-25T09:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzMDI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3701c69738742a0f373d0842fed28c4b9b686001", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\nindex cf8be88d5..4138623ae 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/test/java/org/kie/server/springboot/samples/KafkaEmitterBrokerDownTest.java\n\n@@ -55,9 +55,6 @@ public class KafkaEmitterBrokerDownTest extends KafkaFixture {\n     @Autowired\n     protected ProcessService processService;\n     \n-    @Autowired\n-    protected CaseService caseService;\n-    \n     protected String deploymentId;\n \n     @BeforeClass\n"}}, {"oid": "3701c69738742a0f373d0842fed28c4b9b686001", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/3701c69738742a0f373d0842fed28c4b9b686001", "message": "[JBPM-9457] Springboot tests for Kafka Emitter", "committedDate": "2020-11-25T09:29:23Z", "type": "forcePushed"}, {"oid": "15fb87525ee6df2dd4197d3898a00655798a5548", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/15fb87525ee6df2dd4197d3898a00655798a5548", "message": "[JBPM-9457] Springboot tests for Kafka Emitter", "committedDate": "2020-12-02T09:02:16Z", "type": "forcePushed"}, {"oid": "670d74a380e5d606da25b370169f98649c2339ff", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/670d74a380e5d606da25b370169f98649c2339ff", "message": "[JBPM-9457] Springboot tests for Kafka Emitter", "committedDate": "2020-12-03T09:21:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NDc3Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r535864773", "bodyText": "is this good to show not recommended CSRF disabling? see sonar complaining about it", "author": "mareknovotny", "createdAt": "2020-12-04T06:24:18Z", "path": "kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/main/java/org/kie/server/springboot/samples/kafka/WebSecurityConfig.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.springboot.samples.kafka;\n+\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.crypto.factory.PasswordEncoderFactories;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+\n+@Configuration(\"kieServerSecurity\")\n+@EnableWebSecurity\n+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        http\n+        .csrf().disable()", "originalCommit": "670d74a380e5d606da25b370169f98649c2339ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMzc5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2313#discussion_r536313793", "bodyText": "@mareknovotny I think for this sample it doesn't matter (no production code and tests are not related to auth), I added the annotation //NOSONAR for skipping the analysis in just that line, do you agree?", "author": "gmunozfe", "createdAt": "2020-12-04T19:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NDc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fec7406fa15ce2f325805d98819e9983108a15aa", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/main/java/org/kie/server/springboot/samples/kafka/WebSecurityConfig.java b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/main/java/org/kie/server/springboot/samples/kafka/WebSecurityConfig.java\nindex c4bdb1a6e..749fe7301 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/main/java/org/kie/server/springboot/samples/kafka/WebSecurityConfig.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/kie-server-spring-boot-kafka-sample/src/main/java/org/kie/server/springboot/samples/kafka/WebSecurityConfig.java\n\n@@ -32,12 +32,7 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n \n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n-        http\n-        .csrf().disable()\n-        .authorizeRequests()\n-            .antMatchers(\"/rest/server*\").authenticated()\n-            .and()\n-        .httpBasic();\n+        http.authorizeRequests().anyRequest().permitAll();\n     }\n \n     @Autowired\n"}}, {"oid": "fec7406fa15ce2f325805d98819e9983108a15aa", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/fec7406fa15ce2f325805d98819e9983108a15aa", "message": "[JBPM-9457] Springboot tests for Kafka Emitter", "committedDate": "2020-12-04T07:22:59Z", "type": "forcePushed"}, {"oid": "bd0c13b99246dea02d0c2e6d544bd74581384dc1", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/bd0c13b99246dea02d0c2e6d544bd74581384dc1", "message": "[JBPM-9457] Springboot tests for Kafka Emitter", "committedDate": "2020-12-04T10:59:55Z", "type": "commit"}, {"oid": "bd0c13b99246dea02d0c2e6d544bd74581384dc1", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/bd0c13b99246dea02d0c2e6d544bd74581384dc1", "message": "[JBPM-9457] Springboot tests for Kafka Emitter", "committedDate": "2020-12-04T10:59:55Z", "type": "forcePushed"}]}