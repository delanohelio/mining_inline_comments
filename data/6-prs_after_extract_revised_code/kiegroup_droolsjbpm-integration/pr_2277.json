{"pr_number": 2277, "pr_title": "[DROOLS-5658] [DROOLS-4844] [DROOLS-5657] [DROOLS-2836] [DROOLS-5699] ", "pr_createdAt": "2020-10-12T14:33:02Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2277", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNzQxOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2277#discussion_r503407418", "bodyText": "you might want to \"move up\" similarly to here: \n  \n    \n      droolsjbpm-integration/kie-maven-plugin/src/main/java/org/kie/maven/plugin/AbstractDMNValidationAwareMojo.java\n    \n    \n        Lines 63 to 68\n      in\n      32f44c7\n    \n    \n    \n    \n\n        \n          \n           @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL,ANALYZE_DECISION_TABLE\") \n        \n\n        \n          \n           private String validateDMN; \n        \n\n        \n          \n            \n        \n\n        \n          \n           protected String getValidateDMN() { \n        \n\n        \n          \n               return validateDMN; \n        \n\n        \n          \n           }", "author": "tarilabs", "createdAt": "2020-10-12T16:30:06Z", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/GenerateANCMojo.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.DependencyResolutionRequiredException;\n+import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n+import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.ancompiler.CompiledNetworkSource;\n+import org.drools.ancompiler.ObjectTypeNodeCompiler;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.modelcompiler.CanonicalKieModule;\n+import org.kie.api.KieServices;\n+import org.kie.api.runtime.KieContainer;\n+\n+import static org.kie.maven.plugin.ExecModelMode.ancEnabled;\n+import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n+\n+@Mojo(name = \"generateANC\",\n+        requiresDependencyResolution = ResolutionScope.NONE,\n+        defaultPhase = LifecyclePhase.COMPILE)\n+public class GenerateANCMojo extends AbstractDMNValidationAwareMojo {\n+\n+    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n+    private MavenSession mavenSession;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n+    private File targetDirectory;\n+\n+    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n+    private File projectDir;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n+    private File testDir;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n+    private File outputDirectory;\n+\n+    @Parameter(property = \"generateModel\", defaultValue = \"YES_WITHDRL\")\n+    private String generateModel;", "originalCommit": "4f53b7e3b94f3f7fa8fc3320128ce079bb1c43b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95b12462c084b47abd6d6a11bd0d65042a598bac", "chunk": "diff --git a/kie-maven-plugin/src/main/java/org/kie/maven/plugin/GenerateANCMojo.java b/kie-maven-plugin/src/main/java/org/kie/maven/plugin/GenerateANCMojo.java\ndeleted file mode 100644\nindex c70455ec5..000000000\n--- a/kie-maven-plugin/src/main/java/org/kie/maven/plugin/GenerateANCMojo.java\n+++ /dev/null\n\n@@ -1,192 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.maven.plugin;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardOpenOption;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.maven.artifact.Artifact;\n-import org.apache.maven.artifact.DependencyResolutionRequiredException;\n-import org.apache.maven.artifact.resolver.filter.CumulativeScopeArtifactFilter;\n-import org.apache.maven.execution.MavenSession;\n-import org.apache.maven.plugin.MojoExecutionException;\n-import org.apache.maven.plugins.annotations.LifecyclePhase;\n-import org.apache.maven.plugins.annotations.Mojo;\n-import org.apache.maven.plugins.annotations.Parameter;\n-import org.apache.maven.plugins.annotations.ResolutionScope;\n-import org.apache.maven.project.MavenProject;\n-import org.drools.ancompiler.CompiledNetworkSource;\n-import org.drools.ancompiler.ObjectTypeNodeCompiler;\n-import org.drools.compiler.kproject.ReleaseIdImpl;\n-import org.drools.core.impl.InternalKnowledgeBase;\n-import org.drools.modelcompiler.CanonicalKieModule;\n-import org.kie.api.KieServices;\n-import org.kie.api.runtime.KieContainer;\n-\n-import static org.kie.maven.plugin.ExecModelMode.ancEnabled;\n-import static org.kie.maven.plugin.ExecModelMode.isModelCompilerInClassPath;\n-\n-@Mojo(name = \"generateANC\",\n-        requiresDependencyResolution = ResolutionScope.NONE,\n-        defaultPhase = LifecyclePhase.COMPILE)\n-public class GenerateANCMojo extends AbstractDMNValidationAwareMojo {\n-\n-    @Parameter(defaultValue = \"${session}\", required = true, readonly = true)\n-    private MavenSession mavenSession;\n-\n-    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n-    private File targetDirectory;\n-\n-    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n-    private File projectDir;\n-\n-    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n-    private File testDir;\n-\n-    @Parameter\n-    private Map<String, String> properties;\n-\n-    @Parameter(required = true, defaultValue = \"${project}\")\n-    private MavenProject project;\n-\n-    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n-    private File outputDirectory;\n-\n-    @Parameter(property = \"generateModel\", defaultValue = \"YES_WITHDRL\")\n-    private String generateModel;\n-\n-    private static final String ALPHA_NETWORK_COMPILER_PATH = \"/generated-sources/alpha-network-compiler/main/java\";\n-\n-    @Override\n-    public void execute() throws MojoExecutionException {\n-        // GenerateModelMojo is executed when BuildMojo isn't and vice-versa\n-        boolean ancParameterEnabled = ancEnabled(generateModel);\n-        boolean modelCompilerInClassPath = isModelCompilerInClassPath(project.getDependencies());\n-        if (ancParameterEnabled && modelCompilerInClassPath) {\n-            generateANC();\n-        } else if (ancParameterEnabled) { // !modelCompilerInClassPath\n-            getLog().warn(\"You're trying to build rule assets in a project from an executable rule model, but you did not provide the required dependency on the project classpath.\\n\" +\n-                                  \"To enable executable rule models for your project, add the `drools-model-compiler` dependency in the `pom.xml` file of your project.\\n\");\n-        }\n-    }\n-\n-    private void generateANC() throws MojoExecutionException {\n-        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n-        try {\n-            Set<URL> urls = new HashSet<>();\n-            for (String element : project.getCompileClasspathElements()) {\n-                urls.add(new File(element).toURI().toURL());\n-            }\n-\n-            project.setArtifactFilter(new CumulativeScopeArtifactFilter(Arrays.asList(\"compile\",\n-                                                                                      \"runtime\")));\n-            for (Artifact artifact : project.getArtifacts()) {\n-                File file = artifact.getFile();\n-                if (file != null) {\n-                    urls.add(file.toURI().toURL());\n-                }\n-            }\n-            urls.add(outputDirectory.toURI().toURL());\n-\n-            ClassLoader projectClassLoader = URLClassLoader.newInstance(urls.toArray(new URL[0]),\n-                                                                        getClass().getClassLoader());\n-\n-            Thread.currentThread().setContextClassLoader(projectClassLoader);\n-        } catch (DependencyResolutionRequiredException | MalformedURLException e) {\n-            throw new RuntimeException(e);\n-        }\n-\n-        try {\n-            setSystemProperties(properties);\n-\n-            KieServices ks = KieServices.Factory.get();\n-\n-            KieContainer kieContainer = ks.newKieContainer(new ReleaseIdImpl(project.getGroupId(),\n-                                                                             project.getArtifactId(),\n-                                                                             project.getVersion()));\n-\n-            for (String kbase : kieContainer.getKieBaseNames()) {\n-                InternalKnowledgeBase kieBase = (InternalKnowledgeBase) kieContainer.getKieBase(kbase);\n-\n-                List<CompiledNetworkSource> ancSourceFiles = ObjectTypeNodeCompiler.compiledNetworkSources(kieBase.getRete());\n-\n-                getLog().info(String.format(\"Found %d generated files in Knowledge Base %s\", ancSourceFiles.size(), kbase));\n-\n-                final String alphaNetworkCompilerPath = ALPHA_NETWORK_COMPILER_PATH;\n-                final String newCompileSourceRoot = targetDirectory.getPath() + alphaNetworkCompilerPath;\n-                project.addCompileSourceRoot(newCompileSourceRoot);\n-\n-                for (CompiledNetworkSource generatedFile : ancSourceFiles) {\n-                    final Path newFile = Paths.get(targetDirectory.getPath(),\n-                                                   alphaNetworkCompilerPath,\n-                                                   generatedFile.getSourceName());\n-\n-                    try {\n-                        Files.deleteIfExists(newFile);\n-                        Files.createDirectories(newFile.getParent());\n-                        byte[] bytes = generatedFile.getSource().getBytes(StandardCharsets.UTF_8);\n-                        Files.write(newFile,\n-                                    bytes,\n-                                    StandardOpenOption.CREATE,\n-                                    StandardOpenOption.TRUNCATE_EXISTING);\n-\n-                        getLog().info(\"Written Compiled Alpha Network: \" + newFile);\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n-                        throw new MojoExecutionException(\"Unable to write file\", e);\n-                    }\n-                }\n-            }\n-\n-            // generate the ANC file\n-            String ancFile = CanonicalKieModule.getANCFile(new ReleaseIdImpl(\n-                    project.getGroupId(),\n-                    project.getArtifactId(),\n-                    project.getVersion()\n-            ));\n-            final Path ancFilePath = Paths.get(targetDirectory.getPath(),\n-                                               \"classes\",\n-                                               ancFile);\n-\n-            try {\n-                Files.deleteIfExists(ancFilePath);\n-                Files.createDirectories(ancFilePath.getParent());\n-                Files.createFile(ancFilePath);\n-                getLog().info(\"Written ANC File: \" + ancFilePath.toAbsolutePath());\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-                throw new MojoExecutionException(\"Unable to write file: \", e);\n-            }\n-        } finally {\n-            Thread.currentThread().setContextClassLoader(contextClassLoader);\n-        }\n-\n-        getLog().info(\"Compiled Alpha Network successfully generated\");\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1NzUxNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2277#discussion_r503757517", "bodyText": "please 1 move up more. This class is called ...DMNValidationAware...\nKindly consider move this stuff up to AbstractKieMojo", "author": "tarilabs", "createdAt": "2020-10-13T08:19:38Z", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/AbstractDMNValidationAwareMojo.java", "diffHunk": "@@ -63,10 +65,21 @@\n     @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL,ANALYZE_DECISION_TABLE\")\n     private String validateDMN;\n \n+    @Parameter(property = \"generateModel\", defaultValue = \"YES_WITHDRL\") // DROOLS-5663 align kie-maven-plugin default value for generateModel configuration flag\n+    private String generateModel;\n+", "originalCommit": "6c8b5bf3e33c9174311569ab8153ef52892c669f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95b12462c084b47abd6d6a11bd0d65042a598bac", "chunk": "diff --git a/kie-maven-plugin/src/main/java/org/kie/maven/plugin/AbstractDMNValidationAwareMojo.java b/kie-maven-plugin/src/main/java/org/kie/maven/plugin/AbstractDMNValidationAwareMojo.java\nindex d70eef980..871df602c 100644\n--- a/kie-maven-plugin/src/main/java/org/kie/maven/plugin/AbstractDMNValidationAwareMojo.java\n+++ b/kie-maven-plugin/src/main/java/org/kie/maven/plugin/AbstractDMNValidationAwareMojo.java\n\n@@ -65,21 +63,10 @@ public abstract class AbstractDMNValidationAwareMojo extends AbstractKieMojo {\n     @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL,ANALYZE_DECISION_TABLE\")\n     private String validateDMN;\n \n-    @Parameter(property = \"generateModel\", defaultValue = \"YES_WITHDRL\") // DROOLS-5663 align kie-maven-plugin default value for generateModel configuration flag\n-    private String generateModel;\n-\n     protected String getValidateDMN() {\n         return validateDMN;\n     }\n \n-    public String getGenerateModelOption() {\n-        return generateModel;\n-    }\n-\n-    protected boolean isModelParameterEnabled() {\n-        return modelParameterEnabled(generateModel);\n-    }\n-\n     protected void logValidationMessages(List<DMNMessage> validation,\n                                          Function<DMNMessage, String> prefixer,\n                                          Function<DMNMessage, String> computeMessage) {\n"}}, {"oid": "95b12462c084b47abd6d6a11bd0d65042a598bac", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/95b12462c084b47abd6d6a11bd0d65042a598bac", "message": "First experiment with alpha newtwork compiler", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "af80dd43673a808e4289a230a6a3b862b3c1751c", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/af80dd43673a808e4289a230a6a3b862b3c1751c", "message": "Experiment with another callback to create the KieBase", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "547e5a4e439730ac3fc27b13529445266e2622ae", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/547e5a4e439730ac3fc27b13529445266e2622ae", "message": "Revert \"Experiment with another callback to create the KieBase\"\n\nThis reverts commit 2dcaa1df", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "17921d08d15dca88cf6a5ff50a3d087acccf5de3", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/17921d08d15dca88cf6a5ff50a3d087acccf5de3", "message": "Generation of compiled alpha network without compiling", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "0e9c155bab39d8bf4ae297b1b115aa2f0a1e6306", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0e9c155bab39d8bf4ae297b1b115aa2f0a1e6306", "message": "Also compiling", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "2bfcc8896a0896480df0efcacc4a88334e1b055e", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/2bfcc8896a0896480df0efcacc4a88334e1b055e", "message": "Fixed name change", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "0f33cd17f6d2a3640653579ca91c1e0389a502dc", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0f33cd17f6d2a3640653579ca91c1e0389a502dc", "message": "Refacotr GenerateANCMojo", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "a957bd142dbe044f49e8eb2f996cf359a18a0978", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/a957bd142dbe044f49e8eb2f996cf359a18a0978", "message": "First version of testing in kie-maven-plugin, test not running", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "124a3ba88fc6d380f29a7d2d93702fee70982830", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/124a3ba88fc6d380f29a7d2d93702fee70982830", "message": "Fix plugin testing", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "491d1ff9adcbe2e1a5bad95d15573b21799850c8", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/491d1ff9adcbe2e1a5bad95d15573b21799850c8", "message": "Reverted useless edits", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "13668c91cc13ed35a1e82c548a6dd06bb0c704a0", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/13668c91cc13ed35a1e82c548a6dd06bb0c704a0", "message": "Abstract generate model option to super class to avoid default duplication", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "2e24f54fb712c62d70d9720eba6f7af613413930", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/2e24f54fb712c62d70d9720eba6f7af613413930", "message": "PMMLModel after DMNModel", "committedDate": "2020-10-15T07:56:18Z", "type": "commit"}, {"oid": "2e24f54fb712c62d70d9720eba6f7af613413930", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/2e24f54fb712c62d70d9720eba6f7af613413930", "message": "PMMLModel after DMNModel", "committedDate": "2020-10-15T07:56:18Z", "type": "forcePushed"}]}