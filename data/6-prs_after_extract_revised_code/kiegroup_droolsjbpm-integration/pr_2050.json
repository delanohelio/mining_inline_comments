{"pr_number": 2050, "pr_title": "PLANNER-1773: [Tasks Assignment] Skills and affinities management", "pr_createdAt": "2020-03-21T13:48:57Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050", "timeline": [{"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c0af783e95daa531974d0903efbdf9c0102eaee3", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management", "committedDate": "2020-03-21T19:20:48Z", "type": "commit"}, {"oid": "c0af783e95daa531974d0903efbdf9c0102eaee3", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c0af783e95daa531974d0903efbdf9c0102eaee3", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management", "committedDate": "2020-03-21T19:20:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM5NzcwMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396397701", "bodyText": "A typo", "author": "rsynek", "createdAt": "2020-03-23T11:57:30Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractLabelValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Set;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@RunWith(Parameterized.class)\n+public abstract class AbstractLabelValueExtractorTest<T, E extends AbstractLabelValueExtractor<T>> {\n+\n+    public static final String CUSTOM_NAME = \"CUSTPM_NAME\";", "originalCommit": "c0af783e95daa531974d0903efbdf9c0102eaee3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractLabelValueExtractorTest.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractLabelValueExtractorTest.java\nindex d3d622c3e..861dffa13 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractLabelValueExtractorTest.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractLabelValueExtractorTest.java\n\n@@ -30,7 +30,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n @RunWith(Parameterized.class)\n public abstract class AbstractLabelValueExtractorTest<T, E extends AbstractLabelValueExtractor<T>> {\n \n-    public static final String CUSTOM_NAME = \"CUSTPM_NAME\";\n+    public static final String CUSTOM_NAME = \"CUSTOM_NAME\";\n     public static final String VALUE1 = \"VALUE1\";\n     public static final String VALUE2 = \"VALUE2\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwODgxOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396408818", "bodyText": "soft suggestion: this first check for nullity is unnecessary as it can be handled by the if-else statement on the next line.", "author": "rsynek", "createdAt": "2020-03-23T12:19:17Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class AbstractStringListValueAttributeMapValueExtractor<M extends Map<String, ?>, T> extends AbstractAttributeMapValueLabelValueExtractor<M, T> {\n+\n+    public static final String COMMA_SEPARATOR = \",\";\n+\n+    protected final String separator;\n+\n+    protected AbstractStringListValueAttributeMapValueExtractor(String attributeName, String separator, Class<T> type, String labelName, int priority) {\n+        super(attributeName, type, labelName, priority);\n+        this.separator = separator;\n+    }\n+\n+    @Override\n+    protected Set<Object> extractFromAttribute(Object attributeValue) {\n+        final String value = attributeValue != null ? attributeValue.toString() : null;", "originalCommit": "c0af783e95daa531974d0903efbdf9c0102eaee3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java\nindex cd0014c22..960a37af9 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java\n\n@@ -24,7 +24,8 @@ import java.util.stream.Stream;\n \n import org.apache.commons.lang3.StringUtils;\n \n-public abstract class AbstractStringListValueAttributeMapValueExtractor<M extends Map<String, ?>, T> extends AbstractAttributeMapValueLabelValueExtractor<M, T> {\n+public abstract class AbstractStringListValueAttributeMapValueExtractor<M extends Map<String, ?>, T>\n+        extends AbstractAttributeMapValueLabelValueExtractor<M, T> {\n \n     public static final String COMMA_SEPARATOR = \",\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMjkyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396412923", "bodyText": "Consider splitting the class declaration into more lines - it's way beyond the recommended 120 characters.", "author": "rsynek", "createdAt": "2020-03-23T12:26:50Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractAttributeMapValueLabelValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public abstract class AbstractAttributeMapValueLabelValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>> extends AbstractLabelValueExtractorTest<T, E> {", "originalCommit": "c0af783e95daa531974d0903efbdf9c0102eaee3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractAttributeMapValueLabelValueExtractorTest.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractAttributeMapValueLabelValueExtractorTest.java\nindex bf641eb92..eb4b1e0ff 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractAttributeMapValueLabelValueExtractorTest.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractAttributeMapValueLabelValueExtractorTest.java\n\n@@ -22,7 +22,8 @@ import org.junit.Test;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-public abstract class AbstractAttributeMapValueLabelValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>> extends AbstractLabelValueExtractorTest<T, E> {\n+public abstract class AbstractAttributeMapValueLabelValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>>\n+        extends AbstractLabelValueExtractorTest<T, E> {\n \n     protected abstract String getExpectedAttributeName();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzIyNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396413225", "bodyText": "Too long line", "author": "rsynek", "createdAt": "2020-03-23T12:27:25Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractorTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.kie.server.api.model.taskassigning.TaskData;\n+import org.kie.server.services.taskassigning.user.system.api.User;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public abstract class AbstractStringListValueAttributeMapValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>> extends AbstractAttributeMapValueLabelValueExtractorTest<M, T, E> {", "originalCommit": "c0af783e95daa531974d0903efbdf9c0102eaee3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractorTest.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractorTest.java\nindex 2391186f2..ba9f9187d 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractorTest.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractorTest.java\n\n@@ -28,7 +28,8 @@ import org.kie.server.services.taskassigning.user.system.api.User;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public abstract class AbstractStringListValueAttributeMapValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>> extends AbstractAttributeMapValueLabelValueExtractorTest<M, T, E> {\n+public abstract class AbstractStringListValueAttributeMapValueExtractorTest<M extends Map<String, ?>, T, E extends AbstractAttributeMapValueLabelValueExtractor<M, T>>\n+        extends AbstractAttributeMapValueLabelValueExtractorTest<M, T, E> {\n \n     protected static TaskData mockTaskData(String attributeName, String value) {\n         Map<String, Object> inputData = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMDI1Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396420253", "bodyText": "I wonder if this code can throw ConcurrentModificationException:\nIn the loop, another thread calls registerExtractors. As a result, some extractors may be removed.\nSafe approach could be e.g. making getLabelValueExtractors return a defensive copy of the original Set.", "author": "rsynek", "createdAt": "2020-03-23T12:40:21Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/LabelValueExtractorRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+\n+import org.kie.server.api.model.taskassigning.data.LabelValueExtractor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LabelValueExtractorRegistry {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LabelValueExtractorRegistry.class);\n+\n+    private static final LabelValueExtractorRegistry INSTANCE = new LabelValueExtractorRegistry();\n+\n+    private Map<Class<?>, Set<LabelValueExtractor<?>>> extractorsBySourceType = new HashMap<>();\n+\n+    private LabelValueExtractorRegistry() {\n+        registerExtractors(getClass().getClassLoader());\n+    }\n+\n+    public static LabelValueExtractorRegistry getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    public synchronized void registerExtractors(ClassLoader classLoader) {\n+        final ServiceLoader<LabelValueExtractor> availableExtractors = ServiceLoader.load(LabelValueExtractor.class, classLoader);\n+        for (LabelValueExtractor extractor : availableExtractors) {\n+            final Set<LabelValueExtractor<?>> typeExtractors = extractorsBySourceType.computeIfAbsent(extractor.getType(), key -> new HashSet<>());\n+            final LabelValueExtractor previousExtractor = typeExtractors.stream()\n+                    .filter(previous -> previous.getLabelName().equals(extractor.getLabelName()))\n+                    .findFirst().orElse(null);\n+            if (previousExtractor != null) {\n+                if (previousExtractor.getPriority() < extractor.getPriority()) {\n+                    LOGGER.info(\"LabelValueExtractor with [previousType: {}, previousLabelName:{}, previousPriority: {}], will be replaced with -> [type:{}, labelName:{}, priority: {}]\",\n+                                previousExtractor.getType(), previousExtractor.getLabelName(), previousExtractor.getPriority(),\n+                                extractor.getType(), extractor.getLabelName(), extractor.getPriority());\n+                    typeExtractors.remove(previousExtractor);\n+                    typeExtractors.add(extractor);\n+                }\n+            } else {\n+                typeExtractors.add(extractor);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Optional<Set<LabelValueExtractor<T>>> getLabelValueExtractors(Class<T> sourceType) {\n+        return (Optional<Set<LabelValueExtractor<T>>>) Optional.ofNullable((T) extractorsBySourceType.get(sourceType));\n+    }\n+\n+    public <T> void applyLabelValueExtractors(Class<T> sourceType, T source, BiConsumer<String, Set<Object>> extractedValuesConsumer) {\n+        final Optional<Set<LabelValueExtractor<T>>> extractorsSet = getLabelValueExtractors(sourceType);\n+        extractorsSet.ifPresent(extractors -> extractors.forEach(valueExtractor -> {", "originalCommit": "c0af783e95daa531974d0903efbdf9c0102eaee3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3Njc1Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r396476757", "bodyText": "Let's say that this could happen in very a \"theoretically\" worst case, but in practice will never happen. Since the extractors are \"configurable\" but will never change at run-time or processing time. Instead they are laded at the extension startup as part of all the \"planning related\" stuff and will never change again.\nI didn't add any additional sync mechanism for performance purposes given the statement above.", "author": "wmedvede", "createdAt": "2020-03-23T14:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMDI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwNDg0Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397004846", "bodyText": "If they are not supposed to be changed after startup, we can make the registerExtractors method private to enforce that and even remove the synchronized keyword from there.", "author": "rsynek", "createdAt": "2020-03-24T09:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMDI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwNzczMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397007731", "bodyText": "what I'm saying is that registrations can be made as part of the extension initialization. During this time the LabelValueExtractors will never be consumed. Finally only after the extension was initialized, and all potential registration was already produced, the extractors might start being used.\nI think current format is ok.", "author": "wmedvede", "createdAt": "2020-03-24T09:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMDI1Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/5cc71dd0d8a14e502785c77926604b23fd41c70d", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management\n    - Review sugesstions I", "committedDate": "2020-03-24T09:03:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTU3Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397039572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * declaring to which label the extracted Set must be associated to.\n          \n          \n            \n             * declaring to which label the extracted Set must be associated.", "author": "triceo", "createdAt": "2020-03-24T10:14:37Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/taskassigning/data/LabelValueExtractor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.api.model.taskassigning.data;\n+\n+import java.util.Set;\n+\n+/**\n+ * Defines the contract for being able to extract a Set of values from an Object instance of T at processing time and\n+ * declaring to which label the extracted Set must be associated to.", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/taskassigning/data/LabelValueExtractor.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/taskassigning/data/LabelValueExtractor.java\nindex 7a1e18ada..f19042b7b 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/taskassigning/data/LabelValueExtractor.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/model/taskassigning/data/LabelValueExtractor.java\n\n@@ -20,7 +20,7 @@ import java.util.Set;\n \n /**\n  * Defines the contract for being able to extract a Set of values from an Object instance of T at processing time and\n- * declaring to which label the extracted Set must be associated to.\n+ * declaring to which label the extracted Set must be associated.\n  */\n public interface LabelValueExtractor<T> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MDU5MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397040590", "bodyText": "Collections.emptyMap() will do the same thing, and will save a lot of memory in the process.", "author": "triceo", "createdAt": "2020-03-24T10:16:20Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java", "diffHunk": "@@ -57,7 +57,7 @@ private ModelConstants() {\n                                                             Collections.unmodifiableMap(new HashMap<>()),\n                                                             false,\n                                                             Collections.unmodifiableSet(new HashSet<>(Collections.singletonList(PLANNING_USER))),\n-                                                            Collections.unmodifiableSet(new HashSet<>()));\n+                                                            Collections.unmodifiableMap(new HashMap<>()));", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java\nindex ae252e1f2..25308b5fa 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java\n\n@@ -54,10 +53,10 @@ public class ModelConstants {\n                                                             \"dummy-container\",\n                                                             \"dummy-task\",\n                                                             10,\n-                                                            Collections.unmodifiableMap(new HashMap<>()),\n+                                                            Collections.emptyMap(),\n                                                             false,\n                                                             Collections.unmodifiableSet(new HashSet<>(Collections.singletonList(PLANNING_USER))),\n-                                                            Collections.unmodifiableMap(new HashMap<>()));\n+                                                            Collections.emptyMap());\n \n     /**\n      * This task was introduced for dealing with situations where all tasks are pinned and avoid falling into\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MDg4MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397040881", "bodyText": "Dtto. There's more occurences in this file, incl.Collections.emptySet().", "author": "triceo", "createdAt": "2020-03-24T10:16:49Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java", "diffHunk": "@@ -72,7 +72,7 @@ private ModelConstants() {\n                                                                         Collections.unmodifiableMap(new HashMap<>()),\n                                                                         false,\n                                                                         Collections.unmodifiableSet(new HashSet<>(Collections.singletonList(PLANNING_USER))),\n-                                                                        Collections.unmodifiableSet(new HashSet<>()));\n+                                                                        Collections.unmodifiableMap(new HashMap<>()));", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java\nindex ae252e1f2..25308b5fa 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/ModelConstants.java\n\n@@ -69,10 +68,10 @@ public class ModelConstants {\n                                                                         \"dummy-container\",\n                                                                         \"dummy-task-planner-241\",\n                                                                         10,\n-                                                                        Collections.unmodifiableMap(new HashMap<>()),\n+                                                                        Collections.emptyMap(),\n                                                                         false,\n                                                                         Collections.unmodifiableSet(new HashSet<>(Collections.singletonList(PLANNING_USER))),\n-                                                                        Collections.unmodifiableMap(new HashMap<>()));\n+                                                                        Collections.emptyMap());\n \n     public static final Predicate<Task> IS_NOT_DUMMY = task -> !DUMMY_TASK.getId().equals(task.getId()) && !DUMMY_TASK_PLANNER_241.getId().equals(task.getId());\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MjI1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397042256", "bodyText": "Personally, I would keep only setLabelValues(labelName, values). If you have to keep this method as well, consider at least defensively copying the Map.", "author": "triceo", "createdAt": "2020-03-24T10:19:11Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/User.java", "diffHunk": "@@ -53,12 +55,20 @@ public void setGroups(Set<Group> groups) {\n         this.groups = groups;\n     }\n \n-    public Set<TypedLabel> getTypedLabels() {\n-        return typedLabels;\n+    public Map<String, Set<Object>> getLabelValues() {\n+        return labelValues;\n     }\n \n-    public void setTypedLabels(Set<TypedLabel> typedLabels) {\n-        this.typedLabels = typedLabels;\n+    public void setLabelValues(Map<String, Set<Object>> labelValues) {\n+        this.labelValues = labelValues;\n+    }", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTkwOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397081909", "bodyText": "the setLabelValues(Map<String, Set> labelValues) was mainly defined in case this is something that Solution cloners, or any other internal OptaPlanner mechanims use. \u00bf?", "author": "wmedvede", "createdAt": "2020-03-24T11:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MjI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/User.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/User.java\nindex f2fdc0cec..17fa84df0 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/User.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/User.java\n\n@@ -59,10 +59,6 @@ public class User extends TaskOrUser implements OrganizationalEntity {\n         return labelValues;\n     }\n \n-    public void setLabelValues(Map<String, Set<Object>> labelValues) {\n-        this.labelValues = labelValues;\n-    }\n-\n     public Set<Object> getLabelValues(String labelName) {\n         return labelValues.get(labelName);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MzMzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397043332", "bodyText": "Consider renaming to countMatchingLabels, which makes it obvious at first glance, what this method does.", "author": "triceo", "createdAt": "2020-03-24T10:21:05Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java", "diffHunk": "@@ -53,6 +53,49 @@ public static boolean isPotentialOwner(Task task, User user) {\n                 .anyMatch(group -> acceptedGroupIds.contains(group.getEntityId()));\n     }\n \n+    /**\n+     * Calculates if a given user has all the label values that are declared for the task in the label with name labelName.\n+     * @param task a task instance for the evaluation.\n+     * @param user a user instance for the evaluation.\n+     * @param labelName name of the label for the calculation.\n+     * @return true if the user.getLabelValues(\"labelName\") set \"contains\" the task.getLabelValues(\"labelName\") set,\n+     * false in any other case.\n+     */\n+    public static boolean hasAllLabels(Task task, User user, String labelName) {\n+        final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n+        if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n+            return true;\n+        }\n+\n+        final Set<Object> userLabelValues = user.getLabelValues(labelName);\n+        return userLabelValues != null && userLabelValues.containsAll(taskLabelValues);\n+    }\n+\n+    /**\n+     * Calculates the number labels in the user label value set that are contained in the task label value set for the\n+     * label labelName.\n+     * @param task a task instance for the calculation.\n+     * @param user a task instance for the calculation.\n+     * @param labelName name of the label for the calculation.\n+     * @return the number of elements in the intersection between the task.getLabelValues(\"labelName\") and the\n+     * user.getLabelValues(\"labelName\") sets.\n+     */\n+    public static int matchingLabels(Task task, User user, String labelName) {", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java\nindex 677517499..9d2602f40 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java\n\n@@ -80,7 +80,7 @@ public class TaskHelper {\n      * @return the number of elements in the intersection between the task.getLabelValues(\"labelName\") and the\n      * user.getLabelValues(\"labelName\") sets.\n      */\n-    public static int matchingLabels(Task task, User user, String labelName) {\n+    public static int countMatchingLabels(Task task, User user, String labelName) {\n         final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n         if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n             return 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0Mzk4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397043980", "bodyText": "In my opinion, this would read better:\n`.stream().filter(taskLabelValues::contains).count()`", "author": "triceo", "createdAt": "2020-03-24T10:22:11Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java", "diffHunk": "@@ -53,6 +53,49 @@ public static boolean isPotentialOwner(Task task, User user) {\n                 .anyMatch(group -> acceptedGroupIds.contains(group.getEntityId()));\n     }\n \n+    /**\n+     * Calculates if a given user has all the label values that are declared for the task in the label with name labelName.\n+     * @param task a task instance for the evaluation.\n+     * @param user a user instance for the evaluation.\n+     * @param labelName name of the label for the calculation.\n+     * @return true if the user.getLabelValues(\"labelName\") set \"contains\" the task.getLabelValues(\"labelName\") set,\n+     * false in any other case.\n+     */\n+    public static boolean hasAllLabels(Task task, User user, String labelName) {\n+        final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n+        if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n+            return true;\n+        }\n+\n+        final Set<Object> userLabelValues = user.getLabelValues(labelName);\n+        return userLabelValues != null && userLabelValues.containsAll(taskLabelValues);\n+    }\n+\n+    /**\n+     * Calculates the number labels in the user label value set that are contained in the task label value set for the\n+     * label labelName.\n+     * @param task a task instance for the calculation.\n+     * @param user a task instance for the calculation.\n+     * @param labelName name of the label for the calculation.\n+     * @return the number of elements in the intersection between the task.getLabelValues(\"labelName\") and the\n+     * user.getLabelValues(\"labelName\") sets.\n+     */\n+    public static int matchingLabels(Task task, User user, String labelName) {\n+        final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n+        if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n+            return 0;\n+        }\n+        final Set<Object> userLabelValues = user.getLabelValues(labelName);\n+        if (userLabelValues == null) {\n+            return 0;\n+        }\n+        return userLabelValues.stream().mapToInt(labelValue -> taskLabelValues.contains(labelValue) ? 1 : 0).sum();", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java\nindex 677517499..9d2602f40 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-core/src/main/java/org/kie/server/services/taskassigning/core/model/solver/TaskHelper.java\n\n@@ -80,7 +80,7 @@ public class TaskHelper {\n      * @return the number of elements in the intersection between the task.getLabelValues(\"labelName\") and the\n      * user.getLabelValues(\"labelName\") sets.\n      */\n-    public static int matchingLabels(Task task, User user, String labelName) {\n+    public static int countMatchingLabels(Task task, User user, String labelName) {\n         final Set<Object> taskLabelValues = task.getLabelValues(labelName);\n         if (taskLabelValues == null || taskLabelValues.isEmpty()) {\n             return 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NjEyNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397046127", "bodyText": "Collections.emptySet(), unless you intend to modify the collection later.", "author": "triceo", "createdAt": "2020-03-24T10:25:44Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class AbstractStringListValueAttributeMapValueExtractor<M extends Map<String, ?>, T>\n+        extends AbstractAttributeMapValueLabelValueExtractor<M, T> {\n+\n+    public static final String COMMA_SEPARATOR = \",\";\n+\n+    protected final String separator;\n+\n+    protected AbstractStringListValueAttributeMapValueExtractor(String attributeName, String separator, Class<T> type, String labelName, int priority) {\n+        super(attributeName, type, labelName, priority);\n+        this.separator = separator;\n+    }\n+\n+    @Override\n+    protected Set<Object> extractFromAttribute(Object attributeValue) {\n+        if (attributeValue == null) {\n+            return new HashSet<>();", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java\nindex 960a37af9..be49ae2e7 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/main/java/org/kie/server/services/taskassigning/planning/data/AbstractStringListValueAttributeMapValueExtractor.java\n\n@@ -16,7 +16,7 @@\n \n package org.kie.server.services.taskassigning.planning.data;\n \n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0ODMzOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397048338", "bodyText": "Personally, I prefer not marking classes with numbers. Is there a functional difference between Extractor1 and Extractor2, that we could put in the class name?", "author": "triceo", "createdAt": "2020-03-24T10:29:15Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractor2.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.planning.data;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.kie.server.api.model.taskassigning.TaskData;\n+\n+/**\n+ * Example value extractor for the LabelValueExtractorRegistryTest.\n+ */\n+public class TestTaskDataLabelValueExtractor2 extends AbstractLabelValueExtractor<TaskData> {", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractor2.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractorOverride.java\nsimilarity index 81%\nrename from kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractor2.java\nrename to kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractorOverride.java\nindex bdf4c14c5..166a736fb 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractor2.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-planning/src/test/java/org/kie/server/services/taskassigning/planning/data/TestTaskDataLabelValueExtractorOverride.java\n\n@@ -25,13 +25,13 @@ import org.kie.server.api.model.taskassigning.TaskData;\n /**\n  * Example value extractor for the LabelValueExtractorRegistryTest.\n  */\n-public class TestTaskDataLabelValueExtractor2 extends AbstractLabelValueExtractor<TaskData> {\n+public class TestTaskDataLabelValueExtractorOverride extends AbstractLabelValueExtractor<TaskData> {\n \n     public static final String EXAMPLE_LABEL_VALUE2 = \"EXAMPLE_LABEL_VALUE2\";\n \n-    public TestTaskDataLabelValueExtractor2() {\n-        // give priority 2 to this extractor and override the TestTaskDataLabelValueExtractor1 by intention.\n-        super(TaskData.class, TestTaskDataLabelValueExtractor1.TEST_LABEL, 2);\n+    public TestTaskDataLabelValueExtractorOverride() {\n+        // give priority 2 to this extractor and override the TestTaskDataLabelValueExtractor by intention.\n+        super(TaskData.class, TestTaskDataLabelValueExtractor.TEST_LABEL, 2);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MDE4OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2050#discussion_r397050188", "bodyText": "Isn't this a normal property file? If so, you can read it using Properties class from the JDK.\nWhen you have the Properties, you can further parse them yourself - but the Properties class will do the underlying I/O and syntax checking for you.", "author": "triceo", "createdAt": "2020-03-24T10:32:18Z", "path": "kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-user-system/kie-server-services-task-assigning-user-system-simple/src/main/java/org/kie/server/services/taskassigning/user/system/simple/SimpleUserSystemServiceHelper.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.services.taskassigning.user.system.simple;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.kie.server.services.taskassigning.user.system.api.Group;\n+import org.kie.server.services.taskassigning.user.system.api.User;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+/**\n+ * Utility class for loading users definition from a file using the Wildfly roles.properties definition file format.\n+ * i.e.\n+ * user1=group1,group2\n+ * user1=group2,group3\n+ * <p>\n+ * and additionally facilitates the reading of user attributes like skills and affinities in a similar format.\n+ * e.g.\n+ * skills.properties:\n+ * user1=skill1,skill2\n+ * user2=skill3\n+ * <p>\n+ * e.g.\n+ * affinities.properties\n+ * user1=affinity1,affinity2\n+ * <p>\n+ * When configured, the users skills will be loaded in the SKILLS_ATTRIBUTE_NAME. Following the example above\n+ * user.getAttributes().get(SKILLS_ATTRIBUTE_NAME) will return the String \"skill1,skill2\");\n+ * <p>\n+ * When configured, the users affinities will be loaded in the AFFINITIES_ATTRIBUTE_NAME. Following the example above\n+ * user1.getAttributes().get(AFFINITIES_ATTRIBUTE_NAME) will return the String \"affinity1,affinity2\");\n+ * and\n+ * user2.getAttributes().get(AFFINITIES_ATTRIBUTE_NAME) will return null.\n+ */\n+public class SimpleUserSystemServiceHelper {\n+\n+    public static final String SKILLS_ATTRIBUTE_NAME = \"skills\";\n+    public static final String AFFINITIES_ATTRIBUTE_NAME = \"affinities\";\n+\n+    private SimpleUserSystemServiceHelper() {\n+    }\n+\n+    /**\n+     * Reads the users definitions from a file using the Wildfly roles.properties definition file format. See class comments.\n+     * Additionally loads the users skills and affinities if present.\n+     * @param users a path to the user + roles file in the WF format.\n+     * @param skills an optional path to the users skills file.\n+     * @param affinities an optional path to the users affinities file.\n+     * @return a UserGroupInfo instance with the Users and Groups loaded.\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static UserGroupInfo buildInfo(Path users, Path skills, Path affinities) throws IOException {\n+        try (InputStream usersIn = Files.newInputStream(users);\n+             InputStream skillsIn = skills != null ? Files.newInputStream(skills) : null;\n+             InputStream affinitiesIn = affinities != null ? Files.newInputStream(affinities) : null) {\n+            return buildInfo(usersIn, skillsIn, affinitiesIn);\n+        }\n+    }\n+\n+    /**\n+     * Reads the users definitions for a file in the Wildfly roles.properties definition file format. See class comments.\n+     * Additionally loads the users skills and affinities if present.\n+     * @param usersIn InputStream with the user + roles file in the WF format.\n+     * @param skillsIn InputStream with the users skills.\n+     * @param affinitiesIn InputStream with the users affinities.\n+     * @return a UserGroupInfo instance with the Users and Groups loaded.\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static UserGroupInfo buildInfo(InputStream usersIn, InputStream skillsIn, InputStream affinitiesIn) throws IOException {\n+\n+        final Map<String, User> usersMap = new HashMap<>();\n+        final Map<String, Group> groupMap = new HashMap<>();\n+        final List<ElementLine> lines = readLines(usersIn);\n+        final List<ElementLine> skillLines = skillsIn != null ? readLines(skillsIn) : Collections.emptyList();\n+        final List<ElementLine> affinityLines = affinitiesIn != null ? readLines(affinitiesIn) : Collections.emptyList();\n+\n+        for (ElementLine line : lines) {\n+            Set<Group> userGroups = new HashSet<>();\n+            User user = new UserImpl(line.elementId, userGroups, new HashMap<>());\n+            line.values.forEach(groupName -> {\n+                Group group = groupMap.computeIfAbsent(groupName, GroupImpl::new);\n+                userGroups.add(group);\n+            });\n+            usersMap.put(user.getId(), user);\n+        }\n+        populateAttribute(usersMap, SKILLS_ATTRIBUTE_NAME, skillLines);\n+        populateAttribute(usersMap, AFFINITIES_ATTRIBUTE_NAME, affinityLines);\n+        return new UserGroupInfo(new ArrayList<>(usersMap.values()), new ArrayList<>(groupMap.values()));\n+    }\n+\n+    public static class UserGroupInfo {\n+\n+        private List<User> users;\n+        private List<Group> groups;\n+\n+        UserGroupInfo(List<User> users, List<Group> groups) {\n+            this.users = users;\n+            this.groups = groups;\n+        }\n+\n+        public List<User> getUsers() {\n+            return users;\n+        }\n+\n+        public List<Group> getGroups() {\n+            return groups;\n+        }\n+    }\n+\n+    private static class ElementLine {\n+\n+        private String elementId;\n+        private List<String> values = new ArrayList<>();\n+\n+        public ElementLine(String elementId) {\n+            this.elementId = elementId;\n+        }\n+\n+        public String getElementId() {\n+            return elementId;\n+        }\n+\n+        public void addValue(String value) {\n+            values.add(value);\n+        }\n+\n+        public List<String> getValues() {\n+            return values;\n+        }\n+    }\n+\n+    private static void populateAttribute(Map<String, User> usersMap, String attributeName, List<ElementLine> attributeLines) {\n+        for (ElementLine attributeLine : attributeLines) {\n+            User user = usersMap.get(attributeLine.getElementId());\n+            if (user != null) {\n+                final String value = String.join(\",\", attributeLine.getValues());\n+                if (value.length() > 1) {\n+                    user.getAttributes().put(attributeName, value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static List<ElementLine> readLines(InputStream input) throws IOException {\n+        final List<String> rawLines = IOUtils.readLines(input, StandardCharsets.UTF_8).stream()\n+                .map(String::trim)\n+                .filter(StringUtils::isNotEmpty)\n+                .filter(line -> !line.startsWith(\"#\"))\n+                .collect(Collectors.toList());\n+        final List<ElementLine> lines = new ArrayList<>();\n+        for (String rawLine : rawLines) {\n+            final String[] rawLineSplit = rawLine.split(\"=\");\n+            ElementLine line = readLine(rawLineSplit);\n+            if (line != null) {\n+                lines.add(line);\n+            }\n+        }\n+        return lines;\n+    }", "originalCommit": "5cc71dd0d8a14e502785c77926604b23fd41c70d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-user-system/kie-server-services-task-assigning-user-system-simple/src/main/java/org/kie/server/services/taskassigning/user/system/simple/SimpleUserSystemServiceHelper.java b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-user-system/kie-server-services-task-assigning-user-system-simple/src/main/java/org/kie/server/services/taskassigning/user/system/simple/SimpleUserSystemServiceHelper.java\nindex 6877ccc15..ca5109220 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-user-system/kie-server-services-task-assigning-user-system-simple/src/main/java/org/kie/server/services/taskassigning/user/system/simple/SimpleUserSystemServiceHelper.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-task-assigning/kie-server-services-task-assigning-user-system/kie-server-services-task-assigning-user-system-simple/src/main/java/org/kie/server/services/taskassigning/user/system/simple/SimpleUserSystemServiceHelper.java\n\n@@ -18,6 +18,7 @@ package org.kie.server.services.taskassigning.user.system.simple;\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n"}}, {"oid": "4fd17cfc4dc50d75c6648be81699453b8c7da933", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4fd17cfc4dc50d75c6648be81699453b8c7da933", "message": "PLANNER-1773: [Tasks Assignment] Skills and affinities management\n    - Reviewer's suggestions II", "committedDate": "2020-03-24T16:40:36Z", "type": "commit"}]}