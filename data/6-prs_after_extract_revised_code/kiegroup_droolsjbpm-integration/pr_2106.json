{"pr_number": 2106, "pr_title": "[RHPAM-2911] Null fields should not be included in JSON response", "pr_createdAt": "2020-05-26T19:17:45Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106", "timeline": [{"oid": "d62de631cc7b9aabe79fe5da129fb4d56601dabd", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/d62de631cc7b9aabe79fe5da129fb4d56601dabd", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-05-26T20:04:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNTEzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r430905132", "bodyText": "reuse and set this in to the that class\n\n  \n    \n      droolsjbpm-integration/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/MarshallingFormat.java\n    \n    \n         Line 60\n      in\n      56c0abc\n    \n    \n    \n    \n\n        \n          \n           public static boolean isStrictType(String type) {", "author": "elguardian", "createdAt": "2020-05-27T07:17:09Z", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/marshal/MarshallerHelper.java", "diffHunk": "@@ -84,9 +83,23 @@ public String marshal(String marshallingFormat, Object entity) {\n         \tserverMarshallers.put(format, marshaller);\n         }\n \n-        return marshaller.marshall(entity, Collections.singletonMap(MARSHALLER_PARAMETER_STRICT, isStrictType(marshallingFormat)));\n+        return marshaller.marshall(entity, buildParameters(marshallingFormat));\n+    }\n+    \n+    \n+    private  Map<String,Object> buildParameters(String contentType)", "originalCommit": "d62de631cc7b9aabe79fe5da129fb4d56601dabd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8eb8e3c646b111f66fadc4cdc38d1a180cf613ba", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/marshal/MarshallerHelper.java b/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/marshal/MarshallerHelper.java\nindex c4de5b92a..b685e372f 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/marshal/MarshallerHelper.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-common/src/main/java/org/kie/server/services/impl/marshal/MarshallerHelper.java\n\n@@ -83,19 +79,7 @@ public class MarshallerHelper {\n         \tserverMarshallers.put(format, marshaller);\n         }\n \n-        return marshaller.marshall(entity, buildParameters(marshallingFormat));\n-    }\n-    \n-    \n-    private  Map<String,Object> buildParameters(String contentType)\n-    {\n-        int idx;\n-        return ((idx = contentType.indexOf(';')) < 0 || (idx + 1) == contentType.length()) \n-                ? Collections.emptyMap() \n-                : Arrays.stream(contentType.substring(idx + 1).split(\",\")).\n-                    filter(e -> e.split(\"=\").length > 1) // remove bad parameters\n-                    .map(e -> e.split(\"=\"))\n-                    .collect(Collectors.toMap(e -> e[0].trim(), e ->  e[1].trim()));\n+        return marshaller.marshall(entity, MarshallingFormat.buildParameters(marshallingFormat));\n     }\n     \n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNTM5Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r430905392", "bodyText": "do some extra calls to check the reset of the thead local variable is working.", "author": "elguardian", "createdAt": "2020-05-27T07:17:42Z", "path": "kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/marshal/MarshallerHelperTest.java", "diffHunk": "@@ -218,6 +217,25 @@ public void testJsonUnmarshallProcessInstanceQueryFilterSpec() {\n \t\tassertThat(expectedPiQfs, new ReflectionEquals(unmarshalledPiQfs));\n \t}\n \t\n+\t\n+\t@Test\n+    public void testJsonUnmarshallNull() throws JSONException {   \n+\t    KieServerRegistry kieServerRegistryMock = Mockito.mock(KieServerRegistry.class);\n+        Set<Class<?>> extraClasses = new HashSet<>();\n+        extraClasses.add(QueryFilterSpec.class);\n+        Mockito.when(kieServerRegistryMock.getExtraClasses()).thenReturn(extraClasses);\n+        JSONAssert.assertEquals(\"{\\\"order-by\\\" : null, \\\"order-asc\\\" : false, \\\"query-params\\\" : null, \\\"result-column-mapping\\\" : null}\", new MarshallerHelper(kieServerRegistryMock).marshal(\"application/json\", new QueryFilterSpecBuilder().get()), false);   ", "originalCommit": "d62de631cc7b9aabe79fe5da129fb4d56601dabd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8eb8e3c646b111f66fadc4cdc38d1a180cf613ba", "chunk": "diff --git a/kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/marshal/MarshallerHelperTest.java b/kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/marshal/MarshallerHelperTest.java\nindex 0c04b9ad3..9f01d4f7a 100644\n--- a/kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/marshal/MarshallerHelperTest.java\n+++ b/kie-server-parent/kie-server-services/kie-server-services-common/src/test/java/org/kie/server/services/impl/marshal/MarshallerHelperTest.java\n\n@@ -218,22 +219,18 @@ public class MarshallerHelperTest {\n \t}\n \t\n \t\n-\t@Test\n-    public void testJsonUnmarshallNull() throws JSONException {   \n-\t    KieServerRegistry kieServerRegistryMock = Mockito.mock(KieServerRegistry.class);\n-        Set<Class<?>> extraClasses = new HashSet<>();\n-        extraClasses.add(QueryFilterSpec.class);\n-        Mockito.when(kieServerRegistryMock.getExtraClasses()).thenReturn(extraClasses);\n-        JSONAssert.assertEquals(\"{\\\"order-by\\\" : null, \\\"order-asc\\\" : false, \\\"query-params\\\" : null, \\\"result-column-mapping\\\" : null}\", new MarshallerHelper(kieServerRegistryMock).marshal(\"application/json\", new QueryFilterSpecBuilder().get()), false);   \n-    }\n \t\n \t@Test\n     public void testJsonUnmarshallNotNull() throws JSONException {\n \t    KieServerRegistry kieServerRegistryMock = Mockito.mock(KieServerRegistry.class);\n \t    Set<Class<?>> extraClasses = new HashSet<>();\n-        extraClasses.add(QueryFilterSpec.class);\n+\t    // simulate server conditions\n+        extraClasses.add(Date.class);\n+        extraClasses.add(org.kie.server.api.model.type.JaxbByteArray.class);\n         Mockito.when(kieServerRegistryMock.getExtraClasses()).thenReturn(extraClasses);\n-        JSONAssert.assertEquals(\"{\\\"order-asc\\\" : false}\", new MarshallerHelper(kieServerRegistryMock).marshal(\"application/json ; fields = not_null \", new QueryFilterSpecBuilder().get()), true);   \n+        JSONAssert.assertEquals(\"{\\\"order-asc\\\" : false}\", new MarshallerHelper(kieServerRegistryMock).marshal(\"application/json ; fields = not_null \", new QueryFilterSpecBuilder().get()), true);\n+        // test reset\n+        JSONAssert.assertEquals(\"{\\\"order-by\\\" : null, \\\"order-asc\\\" : false, \\\"query-params\\\" : null, \\\"result-column-mapping\\\" : null, \\\"order-by-clause\\\" : null}\", new MarshallerHelper(kieServerRegistryMock).marshal(\"application/json\", new QueryFilterSpecBuilder().get()),true);\n     }\n \t\n \t@Test\n"}}, {"oid": "8eb8e3c646b111f66fadc4cdc38d1a180cf613ba", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/8eb8e3c646b111f66fadc4cdc38d1a180cf613ba", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-05-27T10:37:19Z", "type": "forcePushed"}, {"oid": "0890d3043d230528669b2d50d809cd741d9ac23f", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/0890d3043d230528669b2d50d809cd741d9ac23f", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-05-27T10:41:25Z", "type": "forcePushed"}, {"oid": "b471449d8e44940ad8fe802ae10e4420b3362b9b", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b471449d8e44940ad8fe802ae10e4420b3362b9b", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-05-27T11:55:08Z", "type": "forcePushed"}, {"oid": "aac5c12ba41ccc12532de3463cb379812cec8539", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/aac5c12ba41ccc12532de3463cb379812cec8539", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-05-29T07:34:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzMzMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432333331", "bodyText": "This will make this very slow at integration test level (veeeeeeeeery slow).  and you are testing the full logic of marshalling not really checking whether those fields are being retrieved or not.\nYou need to check directly against the kie-server and see the string response whether thoses fields are returned o not.", "author": "elguardian", "createdAt": "2020-05-29T08:27:30Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-common/src/main/java/org/kie/server/integrationtests/shared/basetests/RestJmsSharedBaseIntegrationTest.java", "diffHunk": "@@ -47,16 +50,14 @@\n     @Parameterized.Parameters(name = \"{index}: {0} {1}\")\n     public static Collection<Object[]> data() {\n         KieServicesConfiguration restConfiguration = createKieServicesRestConfiguration();\n-\n         Collection<Object[]> parameterData = new ArrayList<Object[]>(Arrays.asList(new Object[][]\n                         {\n                                 {MarshallingFormat.JAXB, restConfiguration},\n-                                {MarshallingFormat.JSON, restConfiguration},\n+                                {MarshallingFormat.JSON,  createKieServicesRestConfiguration(Collections.singletonMap(KieServerConstants.KIE_CONTENT_TYPE_HEADER, \"application/json; fields=not_null\"))},", "originalCommit": "aac5c12ba41ccc12532de3463cb379812cec8539", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MDEzOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432360138", "bodyText": "That nulls are not returned when not null are specified is already tested in Unit test. The purpose of modifiying integration test is to test that the entity is still created when null parameters are skipped.", "author": "fjtirado", "createdAt": "2020-05-29T09:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDQ5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432400495", "bodyText": "I think that we should keep the default settings in here.\nTesting of skipped null fields could be done in some specific integration test only, for example something like  https://github.com/kiegroup/droolsjbpm-integration/blob/master/kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/rest/ProcessServiceRestOnlyIntegrationTest.java", "author": "sutaakar", "createdAt": "2020-05-29T10:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4OTUwNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432589504", "bodyText": "Added new test class under specified directory. Thanks for the advice", "author": "fjtirado", "createdAt": "2020-05-29T16:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d4bac47af6ce530f1d383cdf82cac68830459ae", "chunk": "diff --git a/kie-server-parent/kie-server-tests/kie-server-integ-tests-common/src/main/java/org/kie/server/integrationtests/shared/basetests/RestJmsSharedBaseIntegrationTest.java b/kie-server-parent/kie-server-tests/kie-server-integ-tests-common/src/main/java/org/kie/server/integrationtests/shared/basetests/RestJmsSharedBaseIntegrationTest.java\nindex fff717194..495b097e3 100644\n--- a/kie-server-parent/kie-server-tests/kie-server-integ-tests-common/src/main/java/org/kie/server/integrationtests/shared/basetests/RestJmsSharedBaseIntegrationTest.java\n+++ b/kie-server-parent/kie-server-tests/kie-server-integ-tests-common/src/main/java/org/kie/server/integrationtests/shared/basetests/RestJmsSharedBaseIntegrationTest.java\n\n@@ -50,14 +47,16 @@ public abstract class RestJmsSharedBaseIntegrationTest extends KieServerBaseInte\n     @Parameterized.Parameters(name = \"{index}: {0} {1}\")\n     public static Collection<Object[]> data() {\n         KieServicesConfiguration restConfiguration = createKieServicesRestConfiguration();\n+\n         Collection<Object[]> parameterData = new ArrayList<Object[]>(Arrays.asList(new Object[][]\n                         {\n                                 {MarshallingFormat.JAXB, restConfiguration},\n-                                {MarshallingFormat.JSON,  createKieServicesRestConfiguration(Collections.singletonMap(KieServerConstants.KIE_CONTENT_TYPE_HEADER, \"application/json; fields=not_null\"))},\n+                                {MarshallingFormat.JSON, restConfiguration},\n                                 {MarshallingFormat.XSTREAM, restConfiguration}\n                         }\n         ));\n \n+\n         if (TestConfig.getRemotingUrl() != null && !TestConfig.skipJMS()) {\n             KieServicesConfiguration jmsConfiguration = createKieServicesJmsConfiguration();\n             parameterData.addAll(Arrays.asList(new Object[][]\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzc2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432333760", "bodyText": "@gmunozfe how was your trick to make the split(\",\") more robust ? split(\"\\s*,\\s*) ?", "author": "elguardian", "createdAt": "2020-05-29T08:28:18Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/MarshallingFormat.java", "diffHunk": "@@ -57,19 +58,24 @@ public static MarshallingFormat fromId(int id) {\n         }\n     }\n \n+    \n     public static boolean isStrictType(String type) {\n+        String strictParam  = (String)buildParameters(type).get(Marshaller.MARSHALLER_PARAMETER_STRICT);\n+        return strictParam != null && Boolean.parseBoolean(strictParam);\n+    }\n+    \n+    public static Map<String,Object> buildParameters(String contentType)\n+    {\n         int idx;\n-        if ((idx = type.indexOf(';')) < 0 || (idx + 1) == type.length()) {\n-            return false;\n-        }\n-        // we map parameter=1, pararmeter=2,.... into a map\n-        Map<String, String> parameters = Arrays.asList(type.substring(idx + 1).split(\",\"))\n-                                               .stream()\n-                                               .filter(e -> e.split(\"=\").length > 1) // remove bad parameters\n-                                               .map(e -> e.split(\"=\"))\n-                                               .collect(Collectors.toMap(e -> ((String[]) e)[0].trim(), e -> ((String[]) e)[1]));\n-        return Boolean.parseBoolean(parameters.get(Marshaller.MARSHALLER_PARAMETER_STRICT));\n+        return ((idx = contentType.indexOf(';')) < 0 || (idx + 1) == contentType.length()) \n+                ? Collections.emptyMap() \n+                : Arrays.stream(contentType.substring(idx + 1).split(\",\")).", "originalCommit": "aac5c12ba41ccc12532de3463cb379812cec8539", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MDU2OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432360568", "bodyText": ", and ;  are not a valid character in content type, this proposed changed will not make the code more robust, but unnecesary slower", "author": "fjtirado", "createdAt": "2020-05-29T09:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MDAzMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432370030", "bodyText": "trim().split(\"\\\\s*,\\\\s*\")\ntrim() method removes leading and trailing spaces in the input string, and the regex itself handles the extra spaces around delimiter.", "author": "gmunozfe", "createdAt": "2020-05-29T09:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzc2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzNDY1Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432334653", "bodyText": "this is nitpicking.... what about calling the parameter filter : none | not_null or something of the sort. wdyt ?", "author": "elguardian", "createdAt": "2020-05-29T08:29:59Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/json/JSONMarshaller.java", "diffHunk": "@@ -93,6 +94,8 @@\n     private static final Logger logger = LoggerFactory.getLogger(MarshallerFactory.class);\n \n     private static final boolean STRICT_ID_FORMAT = Boolean.parseBoolean(System.getProperty(KieServerConstants.KIE_SERVER_STRICT_ID_FORMAT, \"false\"));\n+    private static final String FIELDS = \"fields\";\n+    private static final String NOT_NULL = \"not_null\";", "originalCommit": "aac5c12ba41ccc12532de3463cb379812cec8539", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MTM3OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432361379", "bodyText": "you mean none being equivalent to returning everything?", "author": "fjtirado", "createdAt": "2020-05-29T09:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzNDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxODQyNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432418424", "bodyText": "NA", "author": "fjtirado", "createdAt": "2020-05-29T11:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzNDY1Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4d4bac47af6ce530f1d383cdf82cac68830459ae", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4d4bac47af6ce530f1d383cdf82cac68830459ae", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-05-29T16:08:52Z", "type": "forcePushed"}, {"oid": "c521f3afb7974fb84e0f975c647835d274ba4d79", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c521f3afb7974fb84e0f975c647835d274ba4d79", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-05-29T16:31:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5Mjc0Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r432992743", "bodyText": "This casting to boolean is failing when receiving a String parameter (true) due to changes for invoking buildParameters instead of isStrictType .\nFailing test is IdentifierJbpmRestIntegrationTest.testBasicJbpmRequest\nIf always receives a String, it should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            jsonContext.get().setWrap((boolean) parameters.get(MARSHALLER_PARAMETER_STRICT));\n          \n          \n            \n                            jsonContext.get().setWrap(Boolean.parseBoolean((string) parameters.get(MARSHALLER_PARAMETER_STRICT)));", "author": "gmunozfe", "createdAt": "2020-05-31T22:53:49Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/json/JSONMarshaller.java", "diffHunk": "@@ -306,6 +323,10 @@ public String marshall(Object input, Map<String, Object> parameters) {\n             if (parameters.containsKey(MARSHALLER_PARAMETER_STRICT)) {\n                 jsonContext.get().setWrap((boolean) parameters.get(MARSHALLER_PARAMETER_STRICT));", "originalCommit": "c521f3afb7974fb84e0f975c647835d274ba4d79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5NzE1MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2106#discussion_r433097150", "bodyText": "Done", "author": "fjtirado", "createdAt": "2020-06-01T08:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5Mjc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ad4f84b5d912e6b094d41d6766f7297b4cf3b56f", "chunk": "diff --git a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/json/JSONMarshaller.java b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/json/JSONMarshaller.java\nindex 99f58e184..f6bec29f8 100644\n--- a/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/json/JSONMarshaller.java\n+++ b/kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/marshalling/json/JSONMarshaller.java\n\n@@ -321,7 +321,7 @@ public class JSONMarshaller implements Marshaller {\n     public String marshall(Object input, Map<String, Object> parameters) {\n         try {\n             if (parameters.containsKey(MARSHALLER_PARAMETER_STRICT)) {\n-                jsonContext.get().setWrap((boolean) parameters.get(MARSHALLER_PARAMETER_STRICT));\n+                jsonContext.get().setWrap(Boolean.parseBoolean((String) parameters.get(MARSHALLER_PARAMETER_STRICT)));\n             }\n             if (NOT_NULL.equals(parameters.get(FIELDS)))\n             {\n"}}, {"oid": "ad4f84b5d912e6b094d41d6766f7297b4cf3b56f", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/ad4f84b5d912e6b094d41d6766f7297b4cf3b56f", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-06-01T07:55:27Z", "type": "forcePushed"}, {"oid": "f0b940ade91a122261be0fe6ba95013fd0057e8a", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f0b940ade91a122261be0fe6ba95013fd0057e8a", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-06-01T08:48:24Z", "type": "commit"}, {"oid": "f0b940ade91a122261be0fe6ba95013fd0057e8a", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f0b940ade91a122261be0fe6ba95013fd0057e8a", "message": "[RHPAM-2911] Null fields should not be included in JSON response\n\nNew fields \"parameter\" in content type. If value is non-null alternative\nobject mapper is used to prevent null serialization", "committedDate": "2020-06-01T08:48:24Z", "type": "forcePushed"}]}