{"pr_number": 2238, "pr_title": "[JBPM-9357] Add springboot Kafka WIH tests", "pr_createdAt": "2020-09-16T21:55:29Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238", "timeline": [{"oid": "df2ca613bb32c00c9c3dffc80185d67bfc779059", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/df2ca613bb32c00c9c3dffc80185d67bfc779059", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-16T23:00:11Z", "type": "forcePushed"}, {"oid": "f20ceb94d62d19b3527bb1129c488f3f933b7087", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f20ceb94d62d19b3527bb1129c488f3f933b7087", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-17T08:19:22Z", "type": "forcePushed"}, {"oid": "cab1552ebea9d2d22239aecfff7a59b8740406a3", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cab1552ebea9d2d22239aecfff7a59b8740406a3", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-17T12:24:19Z", "type": "forcePushed"}, {"oid": "522c6326832add929b752a140ec51011505af738", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/522c6326832add929b752a140ec51011505af738", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-17T16:52:08Z", "type": "forcePushed"}, {"oid": "81212e7c4d0c287377a29735ad108590e272f165", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/81212e7c4d0c287377a29735ad108590e272f165", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-17T22:09:02Z", "type": "forcePushed"}, {"oid": "3deaea0b103717ff9d1870e2902ec5944e81be5d", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/3deaea0b103717ff9d1870e2902ec5944e81be5d", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-18T08:48:48Z", "type": "forcePushed"}, {"oid": "6ced6ab8040214222c06db761f5d9f68041241bc", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6ced6ab8040214222c06db761f5d9f68041241bc", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-21T12:35:09Z", "type": "forcePushed"}, {"oid": "567c61814e7a735a593cc8858289f7a097b105dc", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/567c61814e7a735a593cc8858289f7a097b105dc", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-22T16:31:52Z", "type": "forcePushed"}, {"oid": "30367dd85defa6a5582e19253ad363be3e780a59", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/30367dd85defa6a5582e19253ad363be3e780a59", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-22T23:46:47Z", "type": "forcePushed"}, {"oid": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-23T00:07:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MjMxMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494862311", "bodyText": "Red Hat copyright header is missing", "author": "afalhambra", "createdAt": "2020-09-25T09:24:21Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaBaseTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.jbpm.springboot.samples;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NjEzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495946132", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MjMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaBaseTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaBaseTest.java\nindex 9b70c0a68..26ba7a7b6 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaBaseTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaBaseTest.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.jbpm.springboot.samples;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3OTQzNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494879436", "bodyText": "There is no Exception thrown in this method. Please remove from signature\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Map<String, Object> getProcessVariables() throws Exception {\n          \n          \n            \n                protected Map<String, Object> getProcessVariables() {", "author": "afalhambra", "createdAt": "2020-09-25T09:53:47Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.kie.internal.runtime.conf.RuntimeStrategy.SINGLETON;\n+\n+public class KafkaFixture {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaFixture.class);\n+    \n+    protected static final String ARTIFACT_ID = \"kafka-process\";\n+    protected static final String GROUP_ID = \"com.myspace\";\n+    protected static final String VERSION = \"1.0.0-SNAPSHOT\";\n+    \n+    protected static final String KAFKA_PROCESS_ID = \"kafka-process.kafka-process\";\n+    protected static final String KAFKA_FLOW_ID = \"kafka-process.kafka-flow\";\n+    protected static final String KAFKA_RESULT = \"kafka-result\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/kafka-process\";\n+    protected static final String TEMPLATE_FILE = \"src/test/resources/templates/kie-deployment-descriptor.template\";\n+    protected static final String DEPLOYMENT_DESCRIPTOR_FILE = PATH+\"/src/main/resources/META-INF/kie-deployment-descriptor.xml\";\n+    protected static final String STRATEGY_TEMPLATE = \"STRATEGY_TEMPLATE\";\n+    \n+    protected static final String TOPIC = \"mytopic\";\n+    protected static final String KEY = \"mykey\";\n+    protected static final String VALUE = \"myvalue\";\n+\n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    \n+    public void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+    }\n+\n+    public String setup(DeploymentService ds, String strategy) {\n+        Map<String, String> map = new HashMap<>();\n+        if (SINGLETON.name().equals(strategy)) {\n+            map.put(\"env['\"+BOOTSTRAP_SERVERS_CONFIG+\"']\", \"\\\"\"+System.getProperty(BOOTSTRAP_SERVERS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+CLIENT_ID_CONFIG+\"']\", \"\\\"\"+System.getProperty(CLIENT_ID_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+KEY_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(KEY_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+VALUE_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(VALUE_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+        }\n+        map.put(STRATEGY_TEMPLATE, strategy);\n+        \n+        KieJarBuildHelper.replaceInFile(TEMPLATE_FILE, DEPLOYMENT_DESCRIPTOR_FILE, map);\n+        KieJarBuildHelper.createKieJar(PATH);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    public void createTopic(KafkaContainer kafka) throws IOException, InterruptedException {\n+        //create the topic in the broker, though TestContainers have autocreation feature enabled\n+        kafka.execInContainer(\"/bin/sh\", \"-c\", \"/usr/bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic \"+TOPIC);\n+    }\n+    \n+    protected void cleanup(DeploymentService ds) {\n+        ds.undeploy(unit);\n+        try {\n+            Files.deleteIfExists(Paths.get(DEPLOYMENT_DESCRIPTOR_FILE));\n+        } catch (IOException e) {\n+            logger.warn(\"File {} could not be deleted \", DEPLOYMENT_DESCRIPTOR_FILE, e);\n+        }\n+    }\n+\n+    protected Map<String, Object> getProcessVariables() throws Exception {", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0Njg4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495946880", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3OTQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\nindex de626c23d..c5daaca75 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n\n@@ -32,6 +32,7 @@ import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3OTUzNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494879535", "bodyText": "same as above", "author": "afalhambra", "createdAt": "2020-09-25T09:53:57Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.kie.internal.runtime.conf.RuntimeStrategy.SINGLETON;\n+\n+public class KafkaFixture {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaFixture.class);\n+    \n+    protected static final String ARTIFACT_ID = \"kafka-process\";\n+    protected static final String GROUP_ID = \"com.myspace\";\n+    protected static final String VERSION = \"1.0.0-SNAPSHOT\";\n+    \n+    protected static final String KAFKA_PROCESS_ID = \"kafka-process.kafka-process\";\n+    protected static final String KAFKA_FLOW_ID = \"kafka-process.kafka-flow\";\n+    protected static final String KAFKA_RESULT = \"kafka-result\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/kafka-process\";\n+    protected static final String TEMPLATE_FILE = \"src/test/resources/templates/kie-deployment-descriptor.template\";\n+    protected static final String DEPLOYMENT_DESCRIPTOR_FILE = PATH+\"/src/main/resources/META-INF/kie-deployment-descriptor.xml\";\n+    protected static final String STRATEGY_TEMPLATE = \"STRATEGY_TEMPLATE\";\n+    \n+    protected static final String TOPIC = \"mytopic\";\n+    protected static final String KEY = \"mykey\";\n+    protected static final String VALUE = \"myvalue\";\n+\n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    \n+    public void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+    }\n+\n+    public String setup(DeploymentService ds, String strategy) {\n+        Map<String, String> map = new HashMap<>();\n+        if (SINGLETON.name().equals(strategy)) {\n+            map.put(\"env['\"+BOOTSTRAP_SERVERS_CONFIG+\"']\", \"\\\"\"+System.getProperty(BOOTSTRAP_SERVERS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+CLIENT_ID_CONFIG+\"']\", \"\\\"\"+System.getProperty(CLIENT_ID_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+KEY_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(KEY_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+VALUE_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(VALUE_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+        }\n+        map.put(STRATEGY_TEMPLATE, strategy);\n+        \n+        KieJarBuildHelper.replaceInFile(TEMPLATE_FILE, DEPLOYMENT_DESCRIPTOR_FILE, map);\n+        KieJarBuildHelper.createKieJar(PATH);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    public void createTopic(KafkaContainer kafka) throws IOException, InterruptedException {\n+        //create the topic in the broker, though TestContainers have autocreation feature enabled\n+        kafka.execInContainer(\"/bin/sh\", \"-c\", \"/usr/bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic \"+TOPIC);\n+    }\n+    \n+    protected void cleanup(DeploymentService ds) {\n+        ds.undeploy(unit);\n+        try {\n+            Files.deleteIfExists(Paths.get(DEPLOYMENT_DESCRIPTOR_FILE));\n+        } catch (IOException e) {\n+            logger.warn(\"File {} could not be deleted \", DEPLOYMENT_DESCRIPTOR_FILE, e);\n+        }\n+    }\n+\n+    protected Map<String, Object> getProcessVariables() throws Exception {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"kafka-topic\", TOPIC);\n+        map.put(\"kafka-key\", KEY);\n+        map.put(\"kafka-value\", VALUE);\n+        return map;\n+    }\n+    \n+    protected Map<String, Object> getFlowVariables() throws Exception {", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzIzNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495947234", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3OTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\nindex de626c23d..c5daaca75 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n\n@@ -32,6 +32,7 @@ import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3OTk5Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494879997", "bodyText": "maybe it's worth checking if ds != null just in case. Up to you", "author": "afalhambra", "createdAt": "2020-09-25T09:54:45Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.kie.internal.runtime.conf.RuntimeStrategy.SINGLETON;\n+\n+public class KafkaFixture {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaFixture.class);\n+    \n+    protected static final String ARTIFACT_ID = \"kafka-process\";\n+    protected static final String GROUP_ID = \"com.myspace\";\n+    protected static final String VERSION = \"1.0.0-SNAPSHOT\";\n+    \n+    protected static final String KAFKA_PROCESS_ID = \"kafka-process.kafka-process\";\n+    protected static final String KAFKA_FLOW_ID = \"kafka-process.kafka-flow\";\n+    protected static final String KAFKA_RESULT = \"kafka-result\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/kafka-process\";\n+    protected static final String TEMPLATE_FILE = \"src/test/resources/templates/kie-deployment-descriptor.template\";\n+    protected static final String DEPLOYMENT_DESCRIPTOR_FILE = PATH+\"/src/main/resources/META-INF/kie-deployment-descriptor.xml\";\n+    protected static final String STRATEGY_TEMPLATE = \"STRATEGY_TEMPLATE\";\n+    \n+    protected static final String TOPIC = \"mytopic\";\n+    protected static final String KEY = \"mykey\";\n+    protected static final String VALUE = \"myvalue\";\n+\n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    \n+    public void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+    }\n+\n+    public String setup(DeploymentService ds, String strategy) {\n+        Map<String, String> map = new HashMap<>();\n+        if (SINGLETON.name().equals(strategy)) {\n+            map.put(\"env['\"+BOOTSTRAP_SERVERS_CONFIG+\"']\", \"\\\"\"+System.getProperty(BOOTSTRAP_SERVERS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+CLIENT_ID_CONFIG+\"']\", \"\\\"\"+System.getProperty(CLIENT_ID_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+KEY_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(KEY_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+VALUE_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(VALUE_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+        }\n+        map.put(STRATEGY_TEMPLATE, strategy);\n+        \n+        KieJarBuildHelper.replaceInFile(TEMPLATE_FILE, DEPLOYMENT_DESCRIPTOR_FILE, map);\n+        KieJarBuildHelper.createKieJar(PATH);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    public void createTopic(KafkaContainer kafka) throws IOException, InterruptedException {\n+        //create the topic in the broker, though TestContainers have autocreation feature enabled\n+        kafka.execInContainer(\"/bin/sh\", \"-c\", \"/usr/bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic \"+TOPIC);\n+    }\n+    \n+    protected void cleanup(DeploymentService ds) {\n+        ds.undeploy(unit);", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0ODA5MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495948090", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3OTk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\nindex de626c23d..c5daaca75 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n\n@@ -32,6 +32,7 @@ import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NzMwNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494887307", "bodyText": "Nothing important, but maybe to follow same approach as per assertConsumerMessages method, maybe we can pass class name in the same way, but up to you.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConsumerRecords<String, Box>  records = consumeMessages(bootstrapServers, \"org.jbpm.springboot.samples.serialization.BoxDeserializer\");\n          \n          \n            \n                    ConsumerRecords<String, Box>  records = consumeMessages(bootstrapServers, BoxDeserializer.class.getName());", "author": "afalhambra", "createdAt": "2020-09-25T10:08:53Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.kie.internal.runtime.conf.RuntimeStrategy.SINGLETON;\n+\n+public class KafkaFixture {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaFixture.class);\n+    \n+    protected static final String ARTIFACT_ID = \"kafka-process\";\n+    protected static final String GROUP_ID = \"com.myspace\";\n+    protected static final String VERSION = \"1.0.0-SNAPSHOT\";\n+    \n+    protected static final String KAFKA_PROCESS_ID = \"kafka-process.kafka-process\";\n+    protected static final String KAFKA_FLOW_ID = \"kafka-process.kafka-flow\";\n+    protected static final String KAFKA_RESULT = \"kafka-result\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/kafka-process\";\n+    protected static final String TEMPLATE_FILE = \"src/test/resources/templates/kie-deployment-descriptor.template\";\n+    protected static final String DEPLOYMENT_DESCRIPTOR_FILE = PATH+\"/src/main/resources/META-INF/kie-deployment-descriptor.xml\";\n+    protected static final String STRATEGY_TEMPLATE = \"STRATEGY_TEMPLATE\";\n+    \n+    protected static final String TOPIC = \"mytopic\";\n+    protected static final String KEY = \"mykey\";\n+    protected static final String VALUE = \"myvalue\";\n+\n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    \n+    public void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+    }\n+\n+    public String setup(DeploymentService ds, String strategy) {\n+        Map<String, String> map = new HashMap<>();\n+        if (SINGLETON.name().equals(strategy)) {\n+            map.put(\"env['\"+BOOTSTRAP_SERVERS_CONFIG+\"']\", \"\\\"\"+System.getProperty(BOOTSTRAP_SERVERS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+CLIENT_ID_CONFIG+\"']\", \"\\\"\"+System.getProperty(CLIENT_ID_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+KEY_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(KEY_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+VALUE_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(VALUE_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+        }\n+        map.put(STRATEGY_TEMPLATE, strategy);\n+        \n+        KieJarBuildHelper.replaceInFile(TEMPLATE_FILE, DEPLOYMENT_DESCRIPTOR_FILE, map);\n+        KieJarBuildHelper.createKieJar(PATH);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    public void createTopic(KafkaContainer kafka) throws IOException, InterruptedException {\n+        //create the topic in the broker, though TestContainers have autocreation feature enabled\n+        kafka.execInContainer(\"/bin/sh\", \"-c\", \"/usr/bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic \"+TOPIC);\n+    }\n+    \n+    protected void cleanup(DeploymentService ds) {\n+        ds.undeploy(unit);\n+        try {\n+            Files.deleteIfExists(Paths.get(DEPLOYMENT_DESCRIPTOR_FILE));\n+        } catch (IOException e) {\n+            logger.warn(\"File {} could not be deleted \", DEPLOYMENT_DESCRIPTOR_FILE, e);\n+        }\n+    }\n+\n+    protected Map<String, Object> getProcessVariables() throws Exception {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"kafka-topic\", TOPIC);\n+        map.put(\"kafka-key\", KEY);\n+        map.put(\"kafka-value\", VALUE);\n+        return map;\n+    }\n+    \n+    protected Map<String, Object> getFlowVariables() throws Exception {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"kafka-topic\", TOPIC);\n+        map.put(\"triggername\", KEY);\n+        return map;\n+    }\n+\n+    protected void assertConsumerMessages(String bootstrapServers) {\n+        ConsumerRecords<String, String>  records = consumeMessages(bootstrapServers, StringDeserializer.class.getName());\n+        assertEquals(1, records.count());\n+        assertEquals(KEY, records.iterator().next().key());\n+        assertEquals(VALUE, records.iterator().next().value());\n+    }\n+    \n+    protected void assertConsumerMessagesBox(String bootstrapServers) {\n+        ConsumerRecords<String, Box>  records = consumeMessages(bootstrapServers, \"org.jbpm.springboot.samples.serialization.BoxDeserializer\");", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0ODkwNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495948904", "bodyText": "Done", "author": "gmunozfe", "createdAt": "2020-09-28T13:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NzMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\nindex de626c23d..c5daaca75 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n\n@@ -32,6 +32,7 @@ import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODA5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494888095", "bodyText": "these methods are only used here in this class, maybe we can declare them as private instead. You can skip this, nothing important", "author": "afalhambra", "createdAt": "2020-09-25T10:10:28Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.AUTO_OFFSET_RESET_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.GROUP_ID_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.consumer.ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.kie.internal.runtime.conf.RuntimeStrategy.SINGLETON;\n+\n+public class KafkaFixture {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaFixture.class);\n+    \n+    protected static final String ARTIFACT_ID = \"kafka-process\";\n+    protected static final String GROUP_ID = \"com.myspace\";\n+    protected static final String VERSION = \"1.0.0-SNAPSHOT\";\n+    \n+    protected static final String KAFKA_PROCESS_ID = \"kafka-process.kafka-process\";\n+    protected static final String KAFKA_FLOW_ID = \"kafka-process.kafka-flow\";\n+    protected static final String KAFKA_RESULT = \"kafka-result\";\n+\n+    protected static final String PATH = \"src/test/resources/kjars/kafka-process\";\n+    protected static final String TEMPLATE_FILE = \"src/test/resources/templates/kie-deployment-descriptor.template\";\n+    protected static final String DEPLOYMENT_DESCRIPTOR_FILE = PATH+\"/src/main/resources/META-INF/kie-deployment-descriptor.xml\";\n+    protected static final String STRATEGY_TEMPLATE = \"STRATEGY_TEMPLATE\";\n+    \n+    protected static final String TOPIC = \"mytopic\";\n+    protected static final String KEY = \"mykey\";\n+    protected static final String VALUE = \"myvalue\";\n+\n+    protected KModuleDeploymentUnit unit = null;\n+    \n+    \n+    public void generalSetup() {\n+        EntityManagerFactoryManager.get().clear();\n+    }\n+\n+    public String setup(DeploymentService ds, String strategy) {\n+        Map<String, String> map = new HashMap<>();\n+        if (SINGLETON.name().equals(strategy)) {\n+            map.put(\"env['\"+BOOTSTRAP_SERVERS_CONFIG+\"']\", \"\\\"\"+System.getProperty(BOOTSTRAP_SERVERS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+CLIENT_ID_CONFIG+\"']\", \"\\\"\"+System.getProperty(CLIENT_ID_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+KEY_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(KEY_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+            map.put(\"env['\"+VALUE_SERIALIZER_CLASS_CONFIG+\"']\", \"\\\"\"+System.getProperty(VALUE_SERIALIZER_CLASS_CONFIG)+\"\\\"\");\n+        }\n+        map.put(STRATEGY_TEMPLATE, strategy);\n+        \n+        KieJarBuildHelper.replaceInFile(TEMPLATE_FILE, DEPLOYMENT_DESCRIPTOR_FILE, map);\n+        KieJarBuildHelper.createKieJar(PATH);\n+        unit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+        ds.deploy(unit);\n+        return unit.getIdentifier();\n+    }\n+\n+    public void createTopic(KafkaContainer kafka) throws IOException, InterruptedException {\n+        //create the topic in the broker, though TestContainers have autocreation feature enabled\n+        kafka.execInContainer(\"/bin/sh\", \"-c\", \"/usr/bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic \"+TOPIC);\n+    }\n+    \n+    protected void cleanup(DeploymentService ds) {\n+        ds.undeploy(unit);\n+        try {\n+            Files.deleteIfExists(Paths.get(DEPLOYMENT_DESCRIPTOR_FILE));\n+        } catch (IOException e) {\n+            logger.warn(\"File {} could not be deleted \", DEPLOYMENT_DESCRIPTOR_FILE, e);\n+        }\n+    }\n+\n+    protected Map<String, Object> getProcessVariables() throws Exception {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"kafka-topic\", TOPIC);\n+        map.put(\"kafka-key\", KEY);\n+        map.put(\"kafka-value\", VALUE);\n+        return map;\n+    }\n+    \n+    protected Map<String, Object> getFlowVariables() throws Exception {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"kafka-topic\", TOPIC);\n+        map.put(\"triggername\", KEY);\n+        return map;\n+    }\n+\n+    protected void assertConsumerMessages(String bootstrapServers) {\n+        ConsumerRecords<String, String>  records = consumeMessages(bootstrapServers, StringDeserializer.class.getName());\n+        assertEquals(1, records.count());\n+        assertEquals(KEY, records.iterator().next().key());\n+        assertEquals(VALUE, records.iterator().next().value());\n+    }\n+    \n+    protected void assertConsumerMessagesBox(String bootstrapServers) {\n+        ConsumerRecords<String, Box>  records = consumeMessages(bootstrapServers, \"org.jbpm.springboot.samples.serialization.BoxDeserializer\");\n+        assertEquals(2, records.count());\n+        records.forEach(rec -> {\n+            if (KEY.equals(rec.key())) {\n+                assertEquals(new Box(new BigInteger(\"10000000\"), Arrays.asList(10,20,30), \"caja507\", true), \n+                        rec.value());\n+            } else if (\"second-key\".equals(rec.key())) {\n+                assertEquals(new Box(new BigInteger(\"999\"), Arrays.asList(40,50), \"dial999\", false), \n+                        rec.value());\n+            } else {\n+                fail(\"Should have received one of those keys\");\n+            }\n+        });\n+    }\n+\n+    protected <T> ConsumerRecords<String, T> consumeMessages(String bootstrapServers, String deserializer) {\n+        try (KafkaConsumer<String, T> consumer = createConsumer(bootstrapServers, deserializer)) {\n+            ConsumerRecords<String, T> records = consumer.poll(Duration.ofSeconds(10));\n+            consumer.commitSync();\n+            return records;\n+        }\n+    }\n+    \n+    protected <T> KafkaConsumer<String, T> createConsumer(String bootstrapServers, String deserializer) {\n+        KafkaConsumer<String, T> consumer = new KafkaConsumer<>(consumerProperties(bootstrapServers, deserializer));\n+        consumer.subscribe(singletonList(TOPIC));\n+        return consumer;\n+    }\n+\n+    protected Properties consumerProperties(String bootstrapServers, String deserializer) {\n+        Properties props = new Properties();\n+        props.setProperty(BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        props.setProperty(GROUP_ID_CONFIG, \"jbpm_group\");\n+        props.setProperty(KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n+        props.setProperty(VALUE_DESERIALIZER_CLASS_CONFIG, deserializer);\n+        props.setProperty(AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        return props;\n+    }", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTcwMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495949700", "bodyText": "let's keep it protected to allow future inheritance", "author": "gmunozfe", "createdAt": "2020-09-28T13:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\nindex de626c23d..c5daaca75 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaFixture.java\n\n@@ -32,6 +32,7 @@ import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n import org.jbpm.runtime.manager.impl.jpa.EntityManagerFactoryManager;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n import org.jbpm.springboot.samples.utils.KieJarBuildHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODU5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494888595", "bodyText": "I would remove this comment and maybe you can add import here instead of naming the whole package name in the variable definition section, but again, you can skip this.", "author": "afalhambra", "createdAt": "2020-09-25T10:11:27Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/entities/Box.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples.entities;\n+\n+/**\n+ * This class was automatically generated by the data modeler tool.\n+ */", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzM3Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495953377", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/entities/Box.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/entities/Box.java\nindex f4b0c91a1..23b0ef1bf 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/entities/Box.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/entities/Box.java\n\n@@ -16,57 +16,57 @@\n \n package org.jbpm.springboot.samples.entities;\n \n-/**\n- * This class was automatically generated by the data modeler tool.\n- */\n+import java.io.Serializable;\n+import java.math.BigInteger;\n+import java.util.List;\n \n-public class Box implements java.io.Serializable {\n+public class Box implements Serializable {\n \n     static final long serialVersionUID = 1L;\n \n-    private java.math.BigInteger id;\n-    private java.util.List<java.lang.Integer> numbers;\n-    private java.lang.String name;\n-    private java.lang.Boolean valid;\n+    private BigInteger id;\n+    private List<Integer> numbers;\n+    private String name;\n+    private Boolean valid;\n \n     public Box() {\n     }\n \n-    public java.math.BigInteger getId() {\n+    public BigInteger getId() {\n         return this.id;\n     }\n \n-    public void setId(java.math.BigInteger id) {\n+    public void setId(BigInteger id) {\n         this.id = id;\n     }\n \n-    public java.util.List<java.lang.Integer> getNumbers() {\n+    public List<Integer> getNumbers() {\n         return this.numbers;\n     }\n \n-    public void setNumbers(java.util.List<java.lang.Integer> numbers) {\n+    public void setNumbers(List<Integer> numbers) {\n         this.numbers = numbers;\n     }\n \n-    public java.lang.String getName() {\n+    public String getName() {\n         return this.name;\n     }\n \n-    public void setName(java.lang.String name) {\n+    public void setName(String name) {\n         this.name = name;\n     }\n \n-    public java.lang.Boolean getValid() {\n+    public Boolean getValid() {\n         return this.valid;\n     }\n \n-    public void setValid(java.lang.Boolean valid) {\n+    public void setValid(Boolean valid) {\n         this.valid = valid;\n     }\n \n-    public Box(java.math.BigInteger id,\n-            java.util.List<java.lang.Integer> numbers, java.lang.String name,\n-            java.lang.Boolean valid) {\n+    public Box(BigInteger id,\n+            List<Integer> numbers, String name,\n+            Boolean valid) {\n         this.id = id;\n         this.numbers = numbers;\n         this.name = name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4OTczMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494889731", "bodyText": "I would remove this and add something silly like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated method stub\n          \n          \n            \n                    // empty", "author": "afalhambra", "createdAt": "2020-09-25T10:13:41Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples.serialization;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.jbpm.springboot.samples.entities.Box;\n+\n+public class BoxDeserializer implements Deserializer<Box> {\n+\n+    @Override\n+    public Box deserialize(String arg0, byte[] devBytes) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Box Box = null;\n+        try {\n+            Box = mapper.readValue(devBytes, Box.class);\n+        } catch (Exception e) {\n+\n+            e.printStackTrace();\n+        }\n+        return Box;\n+    }\n+\n+    @Override\n+    public void close() {\n+        // TODO Auto-generated method stub\n+", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NDg2Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495954863", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4OTczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\nindex 9ea23186a..e9e5ec882 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\n\n@@ -20,8 +20,12 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Deserializer;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class BoxDeserializer implements Deserializer<Box> {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(BoxDeserializer.class);\n \n     @Override\n     public Box deserialize(String arg0, byte[] devBytes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4OTgxOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494889818", "bodyText": "same as above", "author": "afalhambra", "createdAt": "2020-09-25T10:13:52Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples.serialization;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.jbpm.springboot.samples.entities.Box;\n+\n+public class BoxDeserializer implements Deserializer<Box> {\n+\n+    @Override\n+    public Box deserialize(String arg0, byte[] devBytes) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Box Box = null;\n+        try {\n+            Box = mapper.readValue(devBytes, Box.class);\n+        } catch (Exception e) {\n+\n+            e.printStackTrace();\n+        }\n+        return Box;\n+    }\n+\n+    @Override\n+    public void close() {\n+        // TODO Auto-generated method stub\n+\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> arg0, boolean arg1) {\n+        // TODO Auto-generated method stub\n+", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NDk4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495954985", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4OTgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\nindex 9ea23186a..e9e5ec882 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\n\n@@ -20,8 +20,12 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Deserializer;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class BoxDeserializer implements Deserializer<Box> {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(BoxDeserializer.class);\n \n     @Override\n     public Box deserialize(String arg0, byte[] devBytes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDE5Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494890192", "bodyText": "maybe it's worth to add a logger here? wdyt?", "author": "afalhambra", "createdAt": "2020-09-25T10:14:37Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples.serialization;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.jbpm.springboot.samples.entities.Box;\n+\n+public class BoxDeserializer implements Deserializer<Box> {\n+\n+    @Override\n+    public Box deserialize(String arg0, byte[] devBytes) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Box Box = null;\n+        try {\n+            Box = mapper.readValue(devBytes, Box.class);\n+        } catch (Exception e) {\n+\n+            e.printStackTrace();", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NTE2Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495955163", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\nindex 9ea23186a..e9e5ec882 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/serialization/BoxDeserializer.java\n\n@@ -20,8 +20,12 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Deserializer;\n import org.jbpm.springboot.samples.entities.Box;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class BoxDeserializer implements Deserializer<Box> {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(BoxDeserializer.class);\n \n     @Override\n     public Box deserialize(String arg0, byte[] devBytes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDU3Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494890572", "bodyText": "Please remove", "author": "afalhambra", "createdAt": "2020-09-25T10:15:20Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/utils/KieJarBuildHelper.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples.utils;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.appformer.maven.integration.MavenRepository;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.Message;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+//import com.google.common.io.Files;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NTcxOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495955719", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/utils/KieJarBuildHelper.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/utils/KieJarBuildHelper.java\nindex 6311aae0d..621adc234 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/utils/KieJarBuildHelper.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/utils/KieJarBuildHelper.java\n\n@@ -37,7 +37,6 @@ import org.kie.scanner.KieMavenRepository;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-//import com.google.common.io.Files;\n import java.nio.file.Files;\n \n import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5NDEwMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494894100", "bodyText": "Not used, please remove", "author": "afalhambra", "createdAt": "2020-09-25T10:22:48Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.jbpm.springboot.samples.KafkaBaseTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NjI0MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495956241", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5NDEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\nindex 71998e69d..29547021a 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n\n@@ -20,7 +20,6 @@ import org.apache.kafka.common.serialization.StringSerializer;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.services.api.ProcessService;\n import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n-import org.jbpm.springboot.samples.KafkaBaseTest;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5NDI2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494894260", "bodyText": "Not need, class is in the same package. Please remove", "author": "afalhambra", "createdAt": "2020-09-25T10:23:07Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.jbpm.springboot.samples.KafkaBaseTest;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NzA3Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495957076", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5NDI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\nindex 71998e69d..29547021a 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n\n@@ -20,7 +20,6 @@ import org.apache.kafka.common.serialization.StringSerializer;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.services.api.ProcessService;\n import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n-import org.jbpm.springboot.samples.KafkaBaseTest;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxNDkzOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494914938", "bodyText": "cast not needed.", "author": "afalhambra", "createdAt": "2020-09-25T11:07:41Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.jbpm.springboot.samples.KafkaBaseTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.rules.SpringClassRule;\n+import org.springframework.test.context.junit4.rules.SpringMethodRule;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static org.apache.kafka.clients.producer.ProducerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_PROCESS_ID;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_RESULT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+@RunWith(Parameterized.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaSampleTest extends KafkaBaseTest {\n+    \n+    @ClassRule\n+    public static final SpringClassRule scr = new SpringClassRule();\n+ \n+    @Rule\n+    public final SpringMethodRule smr = new SpringMethodRule();\n+\n+    @Autowired\n+    private DeploymentService deploymentService;\n+    \n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    CountDownLatchEventListener countDownLatchEventListener;\n+    \n+    @Rule\n+    public KafkaContainer kafka = new KafkaContainer();\n+    \n+    protected static KafkaFixture kafkaFixture = new KafkaFixture();\n+    \n+    protected String deploymentId;\n+    \n+    @BeforeClass\n+    public static void generalSetup() {\n+        kafkaFixture.generalSetup();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException, InterruptedException {\n+        System.setProperty(BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n+        System.setProperty(CLIENT_ID_CONFIG, \"test_jbpm\");\n+        System.setProperty(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        System.setProperty(VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        \n+        kafkaFixture.createTopic(kafka);\n+        deploymentId = kafkaFixture.setup(deploymentService, strategy);\n+        \n+        countDownLatchEventListener.configure(KAFKA_PROCESS_ID, 1);\n+        countDownLatchEventListener.setVariable(KAFKA_RESULT);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        kafkaFixture.cleanup(deploymentService);\n+    }\n+\n+    @Test(timeout = 90000)\n+    public void testKafkaWIHSendMessage() throws Exception {\n+        \n+        Long processInstanceId = processService.startProcess(deploymentId, \n+                                                             KAFKA_PROCESS_ID, \n+                                                             kafkaFixture.getProcessVariables());\n+\n+        assertTrue(processInstanceId > 0);\n+        \n+        kafkaFixture.assertConsumerMessages(kafka.getBootstrapServers());\n+        \n+        //Countdown decrements the count of the latch before process ends\n+        countDownLatchEventListener.getCountDown().await();\n+        \n+        assertEquals(\"success\", (String)countDownLatchEventListener.getResult());", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NzYwMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495957603", "bodyText": "Done", "author": "gmunozfe", "createdAt": "2020-09-28T13:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxNDkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\nindex 71998e69d..29547021a 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n\n@@ -20,7 +20,6 @@ import org.apache.kafka.common.serialization.StringSerializer;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.services.api.ProcessService;\n import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n-import org.jbpm.springboot.samples.KafkaBaseTest;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyODAyOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494928028", "bodyText": "Red Hat copyright header is missing.", "author": "afalhambra", "createdAt": "2020-09-25T11:35:35Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.myspace.kafka_process;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1ODY0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495958647", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyODAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\nindex 478140a1b..51c986ece 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n\n@@ -1,60 +1,124 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n-/**\n- * This class was automatically generated by the data modeler tool.\n- */\n+import java.io.Serializable;\n+import java.math.BigInteger;\n+import java.util.List;\n \n-public class Box implements java.io.Serializable {\n+public class Box implements Serializable {\n \n     static final long serialVersionUID = 1L;\n \n-    private java.math.BigInteger id;\n-    private java.util.List<java.lang.Integer> numbers;\n-    private java.lang.String name;\n-    private java.lang.Boolean valid;\n+    private BigInteger id;\n+    private List<Integer> numbers;\n+    private String name;\n+    private Boolean valid;\n \n     public Box() {\n     }\n \n-    public java.math.BigInteger getId() {\n+    public BigInteger getId() {\n         return this.id;\n     }\n \n-    public void setId(java.math.BigInteger id) {\n+    public void setId(BigInteger id) {\n         this.id = id;\n     }\n \n-    public java.util.List<java.lang.Integer> getNumbers() {\n+    public List<Integer> getNumbers() {\n         return this.numbers;\n     }\n \n-    public void setNumbers(java.util.List<java.lang.Integer> numbers) {\n+    public void setNumbers(List<Integer> numbers) {\n         this.numbers = numbers;\n     }\n \n-    public java.lang.String getName() {\n+    public String getName() {\n         return this.name;\n     }\n \n-    public void setName(java.lang.String name) {\n+    public void setName(String name) {\n         this.name = name;\n     }\n \n-    public java.lang.Boolean getValid() {\n+    public Boolean getValid() {\n         return this.valid;\n     }\n \n-    public void setValid(java.lang.Boolean valid) {\n+    public void setValid(Boolean valid) {\n         this.valid = valid;\n     }\n \n-    public Box(java.math.BigInteger id,\n-            java.util.List<java.lang.Integer> numbers, java.lang.String name,\n-            java.lang.Boolean valid) {\n+    public Box(BigInteger id,\n+            List<Integer> numbers, String name,\n+            Boolean valid) {\n         this.id = id;\n         this.numbers = numbers;\n         this.name = name;\n         this.valid = valid;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        result = prime * result + ((numbers == null) ? 0 : numbers.hashCode());\n+        result = prime * result + ((valid == null) ? 0 : valid.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Box other = (Box) obj;\n+        if (id == null) {\n+            if (other.id != null)\n+                return false;\n+        } else if (!id.equals(other.id))\n+            return false;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        if (numbers == null) {\n+            if (other.numbers != null)\n+                return false;\n+        } else if (!numbers.equals(other.numbers))\n+            return false;\n+        if (valid == null) {\n+            if (other.valid != null)\n+                return false;\n+        } else if (!valid.equals(other.valid))\n+            return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Box [id=\" + id + \", numbers=\" + numbers + \", name=\" + name + \", valid=\" + valid + \"]\";\n+    }\n+\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyODE1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494928156", "bodyText": "I would remove this autogenerated comment", "author": "afalhambra", "createdAt": "2020-09-25T11:35:54Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.myspace.kafka_process;\n+\n+/**\n+ * This class was automatically generated by the data modeler tool.\n+ */", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MTExNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495961116", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyODE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\nindex 478140a1b..51c986ece 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n\n@@ -1,60 +1,124 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n-/**\n- * This class was automatically generated by the data modeler tool.\n- */\n+import java.io.Serializable;\n+import java.math.BigInteger;\n+import java.util.List;\n \n-public class Box implements java.io.Serializable {\n+public class Box implements Serializable {\n \n     static final long serialVersionUID = 1L;\n \n-    private java.math.BigInteger id;\n-    private java.util.List<java.lang.Integer> numbers;\n-    private java.lang.String name;\n-    private java.lang.Boolean valid;\n+    private BigInteger id;\n+    private List<Integer> numbers;\n+    private String name;\n+    private Boolean valid;\n \n     public Box() {\n     }\n \n-    public java.math.BigInteger getId() {\n+    public BigInteger getId() {\n         return this.id;\n     }\n \n-    public void setId(java.math.BigInteger id) {\n+    public void setId(BigInteger id) {\n         this.id = id;\n     }\n \n-    public java.util.List<java.lang.Integer> getNumbers() {\n+    public List<Integer> getNumbers() {\n         return this.numbers;\n     }\n \n-    public void setNumbers(java.util.List<java.lang.Integer> numbers) {\n+    public void setNumbers(List<Integer> numbers) {\n         this.numbers = numbers;\n     }\n \n-    public java.lang.String getName() {\n+    public String getName() {\n         return this.name;\n     }\n \n-    public void setName(java.lang.String name) {\n+    public void setName(String name) {\n         this.name = name;\n     }\n \n-    public java.lang.Boolean getValid() {\n+    public Boolean getValid() {\n         return this.valid;\n     }\n \n-    public void setValid(java.lang.Boolean valid) {\n+    public void setValid(Boolean valid) {\n         this.valid = valid;\n     }\n \n-    public Box(java.math.BigInteger id,\n-            java.util.List<java.lang.Integer> numbers, java.lang.String name,\n-            java.lang.Boolean valid) {\n+    public Box(BigInteger id,\n+            List<Integer> numbers, String name,\n+            Boolean valid) {\n         this.id = id;\n         this.numbers = numbers;\n         this.name = name;\n         this.valid = valid;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        result = prime * result + ((numbers == null) ? 0 : numbers.hashCode());\n+        result = prime * result + ((valid == null) ? 0 : valid.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Box other = (Box) obj;\n+        if (id == null) {\n+            if (other.id != null)\n+                return false;\n+        } else if (!id.equals(other.id))\n+            return false;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        if (numbers == null) {\n+            if (other.numbers != null)\n+                return false;\n+        } else if (!numbers.equals(other.numbers))\n+            return false;\n+        if (valid == null) {\n+            if (other.valid != null)\n+                return false;\n+        } else if (!valid.equals(other.valid))\n+            return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Box [id=\" + id + \", numbers=\" + numbers + \", name=\" + name + \", valid=\" + valid + \"]\";\n+    }\n+\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyODU0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494928547", "bodyText": "Maybe it's worth removing adding import statements instead of using the fully qualified name of the classes. but you can skip it, not an issue.", "author": "afalhambra", "createdAt": "2020-09-25T11:36:40Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.myspace.kafka_process;\n+\n+/**\n+ * This class was automatically generated by the data modeler tool.\n+ */\n+\n+public class Box implements java.io.Serializable {", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MTIzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495961232", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T13:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkyODU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\nindex 478140a1b..51c986ece 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n\n@@ -1,60 +1,124 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n-/**\n- * This class was automatically generated by the data modeler tool.\n- */\n+import java.io.Serializable;\n+import java.math.BigInteger;\n+import java.util.List;\n \n-public class Box implements java.io.Serializable {\n+public class Box implements Serializable {\n \n     static final long serialVersionUID = 1L;\n \n-    private java.math.BigInteger id;\n-    private java.util.List<java.lang.Integer> numbers;\n-    private java.lang.String name;\n-    private java.lang.Boolean valid;\n+    private BigInteger id;\n+    private List<Integer> numbers;\n+    private String name;\n+    private Boolean valid;\n \n     public Box() {\n     }\n \n-    public java.math.BigInteger getId() {\n+    public BigInteger getId() {\n         return this.id;\n     }\n \n-    public void setId(java.math.BigInteger id) {\n+    public void setId(BigInteger id) {\n         this.id = id;\n     }\n \n-    public java.util.List<java.lang.Integer> getNumbers() {\n+    public List<Integer> getNumbers() {\n         return this.numbers;\n     }\n \n-    public void setNumbers(java.util.List<java.lang.Integer> numbers) {\n+    public void setNumbers(List<Integer> numbers) {\n         this.numbers = numbers;\n     }\n \n-    public java.lang.String getName() {\n+    public String getName() {\n         return this.name;\n     }\n \n-    public void setName(java.lang.String name) {\n+    public void setName(String name) {\n         this.name = name;\n     }\n \n-    public java.lang.Boolean getValid() {\n+    public Boolean getValid() {\n         return this.valid;\n     }\n \n-    public void setValid(java.lang.Boolean valid) {\n+    public void setValid(Boolean valid) {\n         this.valid = valid;\n     }\n \n-    public Box(java.math.BigInteger id,\n-            java.util.List<java.lang.Integer> numbers, java.lang.String name,\n-            java.lang.Boolean valid) {\n+    public Box(BigInteger id,\n+            List<Integer> numbers, String name,\n+            Boolean valid) {\n         this.id = id;\n         this.numbers = numbers;\n         this.name = name;\n         this.valid = valid;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        result = prime * result + ((numbers == null) ? 0 : numbers.hashCode());\n+        result = prime * result + ((valid == null) ? 0 : valid.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Box other = (Box) obj;\n+        if (id == null) {\n+            if (other.id != null)\n+                return false;\n+        } else if (!id.equals(other.id))\n+            return false;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        if (numbers == null) {\n+            if (other.numbers != null)\n+                return false;\n+        } else if (!numbers.equals(other.numbers))\n+            return false;\n+        if (valid == null) {\n+            if (other.valid != null)\n+                return false;\n+        } else if (!valid.equals(other.valid))\n+            return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Box [id=\" + id + \", numbers=\" + numbers + \", name=\" + name + \", valid=\" + valid + \"]\";\n+    }\n+\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTE1NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494931154", "bodyText": "Maybe it's worth adding equals and hashCode method like in class \n  \n    \n      droolsjbpm-integration/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/entities/Box.java\n    \n    \n        Lines 76 to 117\n      in\n      4ceb3f7\n    \n    \n    \n    \n\n        \n          \n           @Override \n        \n\n        \n          \n           public int hashCode() { \n        \n\n        \n          \n               final int prime = 31; \n        \n\n        \n          \n               int result = 1; \n        \n\n        \n          \n               result = prime * result + ((id == null) ? 0 : id.hashCode()); \n        \n\n        \n          \n               result = prime * result + ((name == null) ? 0 : name.hashCode()); \n        \n\n        \n          \n               result = prime * result + ((numbers == null) ? 0 : numbers.hashCode()); \n        \n\n        \n          \n               result = prime * result + ((valid == null) ? 0 : valid.hashCode()); \n        \n\n        \n          \n               return result; \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           @Override \n        \n\n        \n          \n           public boolean equals(Object obj) { \n        \n\n        \n          \n               if (this == obj) \n        \n\n        \n          \n                   return true; \n        \n\n        \n          \n               if (obj == null) \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               if (getClass() != obj.getClass()) \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               Box other = (Box) obj; \n        \n\n        \n          \n               if (id == null) { \n        \n\n        \n          \n                   if (other.id != null) \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n               } else if (!id.equals(other.id)) \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               if (name == null) { \n        \n\n        \n          \n                   if (other.name != null) \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n               } else if (!name.equals(other.name)) \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               if (numbers == null) { \n        \n\n        \n          \n                   if (other.numbers != null) \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n               } else if (!numbers.equals(other.numbers)) \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               if (valid == null) { \n        \n\n        \n          \n                   if (other.valid != null) \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n               } else if (!valid.equals(other.valid)) \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               return true; \n        \n\n        \n          \n           }", "author": "afalhambra", "createdAt": "2020-09-25T11:42:28Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.myspace.kafka_process;\n+\n+/**\n+ * This class was automatically generated by the data modeler tool.\n+ */\n+\n+public class Box implements java.io.Serializable {\n+\n+    static final long serialVersionUID = 1L;\n+\n+    private java.math.BigInteger id;\n+    private java.util.List<java.lang.Integer> numbers;\n+    private java.lang.String name;\n+    private java.lang.Boolean valid;\n+\n+    public Box() {\n+    }\n+\n+    public java.math.BigInteger getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(java.math.BigInteger id) {\n+        this.id = id;\n+    }\n+\n+    public java.util.List<java.lang.Integer> getNumbers() {\n+        return this.numbers;\n+    }\n+\n+    public void setNumbers(java.util.List<java.lang.Integer> numbers) {\n+        this.numbers = numbers;\n+    }\n+\n+    public java.lang.String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(java.lang.String name) {\n+        this.name = name;\n+    }\n+\n+    public java.lang.Boolean getValid() {\n+        return this.valid;\n+    }\n+\n+    public void setValid(java.lang.Boolean valid) {\n+        this.valid = valid;\n+    }\n+\n+    public Box(java.math.BigInteger id,\n+            java.util.List<java.lang.Integer> numbers, java.lang.String name,\n+            java.lang.Boolean valid) {\n+        this.id = id;\n+        this.numbers = numbers;\n+        this.name = name;\n+        this.valid = valid;\n+    }\n+", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2Mzg1OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495963858", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\nindex 478140a1b..51c986ece 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/Box.java\n\n@@ -1,60 +1,124 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n-/**\n- * This class was automatically generated by the data modeler tool.\n- */\n+import java.io.Serializable;\n+import java.math.BigInteger;\n+import java.util.List;\n \n-public class Box implements java.io.Serializable {\n+public class Box implements Serializable {\n \n     static final long serialVersionUID = 1L;\n \n-    private java.math.BigInteger id;\n-    private java.util.List<java.lang.Integer> numbers;\n-    private java.lang.String name;\n-    private java.lang.Boolean valid;\n+    private BigInteger id;\n+    private List<Integer> numbers;\n+    private String name;\n+    private Boolean valid;\n \n     public Box() {\n     }\n \n-    public java.math.BigInteger getId() {\n+    public BigInteger getId() {\n         return this.id;\n     }\n \n-    public void setId(java.math.BigInteger id) {\n+    public void setId(BigInteger id) {\n         this.id = id;\n     }\n \n-    public java.util.List<java.lang.Integer> getNumbers() {\n+    public List<Integer> getNumbers() {\n         return this.numbers;\n     }\n \n-    public void setNumbers(java.util.List<java.lang.Integer> numbers) {\n+    public void setNumbers(List<Integer> numbers) {\n         this.numbers = numbers;\n     }\n \n-    public java.lang.String getName() {\n+    public String getName() {\n         return this.name;\n     }\n \n-    public void setName(java.lang.String name) {\n+    public void setName(String name) {\n         this.name = name;\n     }\n \n-    public java.lang.Boolean getValid() {\n+    public Boolean getValid() {\n         return this.valid;\n     }\n \n-    public void setValid(java.lang.Boolean valid) {\n+    public void setValid(Boolean valid) {\n         this.valid = valid;\n     }\n \n-    public Box(java.math.BigInteger id,\n-            java.util.List<java.lang.Integer> numbers, java.lang.String name,\n-            java.lang.Boolean valid) {\n+    public Box(BigInteger id,\n+            List<Integer> numbers, String name,\n+            Boolean valid) {\n         this.id = id;\n         this.numbers = numbers;\n         this.name = name;\n         this.valid = valid;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        result = prime * result + ((numbers == null) ? 0 : numbers.hashCode());\n+        result = prime * result + ((valid == null) ? 0 : valid.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Box other = (Box) obj;\n+        if (id == null) {\n+            if (other.id != null)\n+                return false;\n+        } else if (!id.equals(other.id))\n+            return false;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        if (numbers == null) {\n+            if (other.numbers != null)\n+                return false;\n+        } else if (!numbers.equals(other.numbers))\n+            return false;\n+        if (valid == null) {\n+            if (other.valid != null)\n+                return false;\n+        } else if (!valid.equals(other.valid))\n+            return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Box [id=\" + id + \", numbers=\" + numbers + \", name=\" + name + \", valid=\" + valid + \"]\";\n+    }\n+\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTc1Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494931752", "bodyText": "Red Hat copyright header is missing", "author": "afalhambra", "createdAt": "2020-09-25T11:43:43Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.myspace.kafka_process;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NDE4OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495964189", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\nindex 771b085ee..e355b9c60 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n\n@@ -1,8 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Serializer;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.math.BigInteger;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTg3OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494931879", "bodyText": "maybe it's worth using a logger here", "author": "afalhambra", "createdAt": "2020-09-25T11:43:58Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.myspace.kafka_process;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public class BoxSerializer implements Serializer<Box> {\n+\n+    @Override\n+    public byte[] serialize(String arg0, Box Box) {\n+        byte[] serializedBytes = null;\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+            serializedBytes = objectMapper.writeValueAsString(Box).getBytes();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NDI3MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495964271", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\nindex 771b085ee..e355b9c60 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n\n@@ -1,8 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Serializer;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.math.BigInteger;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjA2Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494932063", "bodyText": "I would remove this auto-generated comment and add some like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated method stub\n          \n          \n            \n                    // empty", "author": "afalhambra", "createdAt": "2020-09-25T11:44:23Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.myspace.kafka_process;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public class BoxSerializer implements Serializer<Box> {\n+\n+    @Override\n+    public byte[] serialize(String arg0, Box Box) {\n+        byte[] serializedBytes = null;\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+            serializedBytes = objectMapper.writeValueAsString(Box).getBytes();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return serializedBytes;\n+    }\n+\n+    @Override\n+    public void close() {\n+        // TODO Auto-generated method stub", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NDQ0NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495964445", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\nindex 771b085ee..e355b9c60 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n\n@@ -1,8 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Serializer;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.math.BigInteger;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjEyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494932123", "bodyText": "same as above", "author": "afalhambra", "createdAt": "2020-09-25T11:44:31Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.myspace.kafka_process;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public class BoxSerializer implements Serializer<Box> {\n+\n+    @Override\n+    public byte[] serialize(String arg0, Box Box) {\n+        byte[] serializedBytes = null;\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+            serializedBytes = objectMapper.writeValueAsString(Box).getBytes();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return serializedBytes;\n+    }\n+\n+    @Override\n+    public void close() {\n+        // TODO Auto-generated method stub\n+    }\n+\n+    @Override\n+    public void configure(Map<String, ?> arg0, boolean arg1) {\n+        // TODO Auto-generated method stub", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NzQyMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495967420", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\nindex 771b085ee..e355b9c60 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n\n@@ -1,8 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Serializer;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.math.BigInteger;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjQ4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494932480", "bodyText": "lowercase for param Box\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public byte[] serialize(String arg0, Box Box) {\n          \n          \n            \n                public byte[] serialize(String arg0, Box box) {", "author": "afalhambra", "createdAt": "2020-09-25T11:45:15Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.myspace.kafka_process;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public class BoxSerializer implements Serializer<Box> {\n+\n+    @Override\n+    public byte[] serialize(String arg0, Box Box) {", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NTI2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495965260", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\nindex 771b085ee..e355b9c60 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/resources/kjars/kafka-process/src/main/java/com/myspace/kafka_process/BoxSerializer.java\n\n@@ -1,8 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.myspace.kafka_process;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n import org.apache.kafka.common.serialization.Serializer;\n+import org.jbpm.springboot.samples.serialization.BoxDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.math.BigInteger;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNTE0MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494935141", "bodyText": "Not used, please remove", "author": "afalhambra", "createdAt": "2020-09-25T11:51:12Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.rules.SpringClassRule;\n+import org.springframework.test.context.junit4.rules.SpringMethodRule;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static org.apache.kafka.clients.producer.ProducerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_FLOW_ID;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_RESULT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\nindex 924c640d9..a0dd58d7f 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\n\n@@ -32,7 +32,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.junit4.rules.SpringClassRule;\n import org.springframework.test.context.junit4.rules.SpringMethodRule;\n import org.testcontainers.containers.KafkaContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNTIyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494935223", "bodyText": "not used, please remove", "author": "afalhambra", "createdAt": "2020-09-25T11:51:23Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NjE1MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495966150", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNTIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\nindex 924c640d9..a0dd58d7f 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\n\n@@ -32,7 +32,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.junit4.rules.SpringClassRule;\n import org.springframework.test.context.junit4.rules.SpringMethodRule;\n import org.testcontainers.containers.KafkaContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNjY5Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494936692", "bodyText": "I would set timeout to same value as per \n  \n    \n      droolsjbpm-integration/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\n    \n    \n         Line 104\n      in\n      4ceb3f7\n    \n    \n    \n    \n\n        \n          \n           @Test(timeout = 60000)", "author": "afalhambra", "createdAt": "2020-09-25T11:54:36Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.jbpm.springboot.samples.KafkaBaseTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.rules.SpringClassRule;\n+import org.springframework.test.context.junit4.rules.SpringMethodRule;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static org.apache.kafka.clients.producer.ProducerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_PROCESS_ID;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_RESULT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+@RunWith(Parameterized.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaSampleTest extends KafkaBaseTest {\n+    \n+    @ClassRule\n+    public static final SpringClassRule scr = new SpringClassRule();\n+ \n+    @Rule\n+    public final SpringMethodRule smr = new SpringMethodRule();\n+\n+    @Autowired\n+    private DeploymentService deploymentService;\n+    \n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    CountDownLatchEventListener countDownLatchEventListener;\n+    \n+    @Rule\n+    public KafkaContainer kafka = new KafkaContainer();\n+    \n+    protected static KafkaFixture kafkaFixture = new KafkaFixture();\n+    \n+    protected String deploymentId;\n+    \n+    @BeforeClass\n+    public static void generalSetup() {\n+        kafkaFixture.generalSetup();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException, InterruptedException {\n+        System.setProperty(BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n+        System.setProperty(CLIENT_ID_CONFIG, \"test_jbpm\");\n+        System.setProperty(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        System.setProperty(VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        \n+        kafkaFixture.createTopic(kafka);\n+        deploymentId = kafkaFixture.setup(deploymentService, strategy);\n+        \n+        countDownLatchEventListener.configure(KAFKA_PROCESS_ID, 1);\n+        countDownLatchEventListener.setVariable(KAFKA_RESULT);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        kafkaFixture.cleanup(deploymentService);\n+    }\n+\n+    @Test(timeout = 90000)", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NzIwNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495967207", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNjY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\nindex 71998e69d..29547021a 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n\n@@ -20,7 +20,6 @@ import org.apache.kafka.common.serialization.StringSerializer;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.services.api.ProcessService;\n import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n-import org.jbpm.springboot.samples.KafkaBaseTest;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzODUzMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494938530", "bodyText": "Since we have already a test class for testing serializing data, would it not make sense to rename this test to KafkaDeserializationTest as it does just the opposite here?", "author": "afalhambra", "createdAt": "2020-09-25T11:58:24Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2ODQxNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495968416", "bodyText": "Not really, this is a sunny scenario to test a sample of Kafka WIH in a process", "author": "gmunozfe", "createdAt": "2020-09-28T14:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzODUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\nindex 71998e69d..29547021a 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSampleTest.java\n\n@@ -20,7 +20,6 @@ import org.apache.kafka.common.serialization.StringSerializer;\n import org.jbpm.services.api.DeploymentService;\n import org.jbpm.services.api.ProcessService;\n import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n-import org.jbpm.springboot.samples.KafkaBaseTest;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzOTE5Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494939192", "bodyText": "why not using the same approach as line above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.setProperty(VALUE_SERIALIZER_CLASS_CONFIG, \"com.myspace.kafka_process.BoxSerializer\");\n          \n          \n            \n                    System.setProperty(VALUE_SERIALIZER_CLASS_CONFIG, BoxSerializer.class.getName());", "author": "afalhambra", "createdAt": "2020-09-25T11:59:46Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.rules.SpringClassRule;\n+import org.springframework.test.context.junit4.rules.SpringMethodRule;\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import static org.apache.kafka.clients.producer.ProducerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_FLOW_ID;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_RESULT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+@RunWith(Parameterized.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaSerializationTest extends KafkaBaseTest {\n+\n+    @ClassRule\n+    public static final SpringClassRule scr = new SpringClassRule();\n+ \n+    @Rule\n+    public final SpringMethodRule smr = new SpringMethodRule();\n+    \n+    @Autowired\n+    private DeploymentService deploymentService;\n+    \n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    CountDownLatchEventListener countDownLatchEventListener;\n+    \n+    @Rule\n+    public KafkaContainer kafka = new KafkaContainer();\n+    \n+    protected static KafkaFixture kafkaFixture = new KafkaFixture();\n+    \n+    protected String deploymentId;\n+    \n+    @BeforeClass\n+    public static void generalSetup() {\n+        kafkaFixture.generalSetup();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException, InterruptedException {\n+        System.setProperty(BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n+        System.setProperty(CLIENT_ID_CONFIG, \"test_jbpm\");\n+        System.setProperty(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        System.setProperty(VALUE_SERIALIZER_CLASS_CONFIG, \"com.myspace.kafka_process.BoxSerializer\");", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3MDMzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495970332", "bodyText": "Not possible, because it's not part of the classpath (belongs to the kjar), while the deserializer does belong to the test app.", "author": "gmunozfe", "createdAt": "2020-09-28T14:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzOTE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\nindex 924c640d9..a0dd58d7f 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaSerializationTest.java\n\n@@ -32,7 +32,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.junit4.rules.SpringClassRule;\n import org.springframework.test.context.junit4.rules.SpringMethodRule;\n import org.testcontainers.containers.KafkaContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MTcxMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494941712", "bodyText": "not needed, please remove", "author": "afalhambra", "createdAt": "2020-09-25T12:05:20Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3MTM1MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495971350", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MTcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\nindex e9175ed70..7b5da07a1 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n\n@@ -38,7 +38,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.junit4.rules.SpringClassRule;\n import org.springframework.test.context.junit4.rules.SpringMethodRule;\n import org.testcontainers.containers.KafkaContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NDk2OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494944968", "bodyText": "Not sure if we will have any potential issues when trying to use this port even if it's going through a container. We might get that the port is already in use in some of the jenkins jobs... but probably this port is not mapped to the actual jenkins machine?", "author": "afalhambra", "createdAt": "2020-09-25T12:12:05Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.rules.SpringClassRule;\n+import org.springframework.test.context.junit4.rules.SpringMethodRule;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import static org.apache.kafka.clients.producer.ProducerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_PROCESS_ID;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_RESULT;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaProxySampleTest extends KafkaBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaProxySampleTest.class);\n+    \n+    @ClassRule\n+    public static final SpringClassRule scr = new SpringClassRule();\n+ \n+    @Rule\n+    public final SpringMethodRule smr = new SpringMethodRule();\n+\n+    @Autowired\n+    private DeploymentService deploymentService;\n+    \n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    CountDownLatchEventListener countDownLatchEventListener;\n+    \n+    protected static KafkaFixture kafkaFixture = new KafkaFixture();\n+    \n+    protected String deploymentId;\n+    \n+    protected String proxyBootstrap;\n+\n+    protected ToxiproxyContainer.ContainerProxy kafkaProxy;\n+    \n+    @BeforeClass\n+    public static void generalSetup() {\n+        kafkaFixture.generalSetup();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException, InterruptedException {\n+        toxiproxy.start();\n+        kafkaProxy = toxiproxy.getProxy(kafka, 9093);", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5MDQ1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495790456", "bodyText": "we should not hardcoded testing port at all, please use a property to set it properly by the environment where it runs from maven.", "author": "mareknovotny", "createdAt": "2020-09-28T09:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NDk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1ODQxNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r496058417", "bodyText": "Parameterized as system property inside maven surefire plugin", "author": "gmunozfe", "createdAt": "2020-09-28T15:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NDk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\nindex e9175ed70..7b5da07a1 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n\n@@ -38,7 +38,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.junit4.rules.SpringClassRule;\n import org.springframework.test.context.junit4.rules.SpringMethodRule;\n import org.testcontainers.containers.KafkaContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NjMwNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494946306", "bodyText": "I would move this up close to the rest of the rules, so it's easier to follow when looking at the code", "author": "afalhambra", "createdAt": "2020-09-25T12:14:59Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.rules.SpringClassRule;\n+import org.springframework.test.context.junit4.rules.SpringMethodRule;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import static org.apache.kafka.clients.producer.ProducerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_PROCESS_ID;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_RESULT;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaProxySampleTest extends KafkaBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaProxySampleTest.class);\n+    \n+    @ClassRule\n+    public static final SpringClassRule scr = new SpringClassRule();\n+ \n+    @Rule\n+    public final SpringMethodRule smr = new SpringMethodRule();\n+\n+    @Autowired\n+    private DeploymentService deploymentService;\n+    \n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    CountDownLatchEventListener countDownLatchEventListener;\n+    \n+    protected static KafkaFixture kafkaFixture = new KafkaFixture();\n+    \n+    protected String deploymentId;\n+    \n+    protected String proxyBootstrap;\n+\n+    protected ToxiproxyContainer.ContainerProxy kafkaProxy;\n+    \n+    @BeforeClass\n+    public static void generalSetup() {\n+        kafkaFixture.generalSetup();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException, InterruptedException {\n+        toxiproxy.start();\n+        kafkaProxy = toxiproxy.getProxy(kafka, 9093);\n+        kafka.start();\n+        kafkaFixture.createTopic(kafka);\n+        proxyBootstrap = kafkaProxy.getContainerIpAddress()+\":\"+kafkaProxy.getProxyPort();\n+        \n+        System.setProperty(BOOTSTRAP_SERVERS_CONFIG, proxyBootstrap);\n+        System.setProperty(CLIENT_ID_CONFIG, \"test_jbpm\");\n+        System.setProperty(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        System.setProperty(VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        \n+        deploymentId = kafkaFixture.setup(deploymentService, strategy);\n+        \n+        countDownLatchEventListener.setVariable(KAFKA_RESULT);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        kafka.stop();\n+        toxiproxy.stop();\n+        kafkaFixture.cleanup(deploymentService);\n+    }\n+    \n+    @Rule\n+    public Network network = Network.newNetwork();\n+\n+    @Rule\n+    public KafkaContainer kafka = new KafkaContainer()\n+                                        .withExposedPorts(9093)\n+                                        .withNetwork(network);\n+    \n+    \n+    @Rule\n+    public ToxiproxyContainer toxiproxy  = new ToxiproxyContainer().withNetwork(network);", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NzYyNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r496057624", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T15:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NjMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\nindex e9175ed70..7b5da07a1 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n\n@@ -38,7 +38,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.junit4.rules.SpringClassRule;\n import org.springframework.test.context.junit4.rules.SpringMethodRule;\n import org.testcontainers.containers.KafkaContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0OTI5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r494949295", "bodyText": "cast not needed", "author": "afalhambra", "createdAt": "2020-09-25T12:20:50Z", "path": "kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.samples;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.jbpm.services.api.DeploymentService;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.springboot.samples.events.listeners.CountDownLatchEventListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.rules.SpringClassRule;\n+import org.springframework.test.context.junit4.rules.SpringMethodRule;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import static org.apache.kafka.clients.producer.ProducerConfig.BOOTSTRAP_SERVERS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.CLIENT_ID_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;\n+import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;\n+\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_PROCESS_ID;\n+import static org.jbpm.springboot.samples.KafkaFixture.KAFKA_RESULT;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+@SpringBootTest(classes = {JBPMApplication.class, TestAutoConfiguration.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@TestPropertySource(locations=\"classpath:application-test.properties\")\n+@DirtiesContext(classMode= DirtiesContext.ClassMode.AFTER_CLASS)\n+public class KafkaProxySampleTest extends KafkaBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KafkaProxySampleTest.class);\n+    \n+    @ClassRule\n+    public static final SpringClassRule scr = new SpringClassRule();\n+ \n+    @Rule\n+    public final SpringMethodRule smr = new SpringMethodRule();\n+\n+    @Autowired\n+    private DeploymentService deploymentService;\n+    \n+    @Autowired\n+    private ProcessService processService;\n+    \n+    @Autowired\n+    CountDownLatchEventListener countDownLatchEventListener;\n+    \n+    protected static KafkaFixture kafkaFixture = new KafkaFixture();\n+    \n+    protected String deploymentId;\n+    \n+    protected String proxyBootstrap;\n+\n+    protected ToxiproxyContainer.ContainerProxy kafkaProxy;\n+    \n+    @BeforeClass\n+    public static void generalSetup() {\n+        kafkaFixture.generalSetup();\n+    }\n+\n+    @Before\n+    public void setup() throws IOException, InterruptedException {\n+        toxiproxy.start();\n+        kafkaProxy = toxiproxy.getProxy(kafka, 9093);\n+        kafka.start();\n+        kafkaFixture.createTopic(kafka);\n+        proxyBootstrap = kafkaProxy.getContainerIpAddress()+\":\"+kafkaProxy.getProxyPort();\n+        \n+        System.setProperty(BOOTSTRAP_SERVERS_CONFIG, proxyBootstrap);\n+        System.setProperty(CLIENT_ID_CONFIG, \"test_jbpm\");\n+        System.setProperty(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        System.setProperty(VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        \n+        deploymentId = kafkaFixture.setup(deploymentService, strategy);\n+        \n+        countDownLatchEventListener.setVariable(KAFKA_RESULT);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        kafka.stop();\n+        toxiproxy.stop();\n+        kafkaFixture.cleanup(deploymentService);\n+    }\n+    \n+    @Rule\n+    public Network network = Network.newNetwork();\n+\n+    @Rule\n+    public KafkaContainer kafka = new KafkaContainer()\n+                                        .withExposedPorts(9093)\n+                                        .withNetwork(network);\n+    \n+    \n+    @Rule\n+    public ToxiproxyContainer toxiproxy  = new ToxiproxyContainer().withNetwork(network);\n+\n+    @Test(timeout = 240000)\n+    public void testKafkaWIHNoConnection() throws Exception {\n+\n+        countDownLatchEventListener.configureNode(KAFKA_PROCESS_ID, \"TaskErrorAfterKafkaMessageSent\", 2);\n+        \n+        kafkaProxy.setConnectionCut(true);\n+        \n+        //Kafka WIH will try during  publish config max.block.ms -60 seconds by default- to get connected to Kafka\n+        //TimeoutException: Topic mytopic not present in metadata after 60000 ms.\n+        Long processInstanceId = processService.startProcess(deploymentId,\n+                                                             KAFKA_PROCESS_ID,\n+                                                             kafkaFixture.getProcessVariables());\n+\n+        assertTrue(processInstanceId > 0);\n+\n+        //Countdown decrements the count of the latch twice: \n+        //TaskErrorAfterKafkaMessageSent node and before process ends\n+        countDownLatchEventListener.getCountDown().await();\n+\n+        assertEquals(\"failure\", (String)countDownLatchEventListener.getResult());", "originalCommit": "4ceb3f76381a7a3d9060f1bb9e1fa7d76841326f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3MjUxOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2238#discussion_r495972519", "bodyText": "done", "author": "gmunozfe", "createdAt": "2020-09-28T14:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0OTI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "38bca6530ffba2eebd12a6717913245d1fd394b0", "chunk": "diff --git a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\nindex e9175ed70..7b5da07a1 100644\n--- a/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n+++ b/kie-spring-boot/kie-spring-boot-samples/jbpm-spring-boot-sample-basic/src/test/java/org/jbpm/springboot/samples/KafkaProxySampleTest.java\n\n@@ -38,7 +38,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.junit4.rules.SpringClassRule;\n import org.springframework.test.context.junit4.rules.SpringMethodRule;\n import org.testcontainers.containers.KafkaContainer;\n"}}, {"oid": "38bca6530ffba2eebd12a6717913245d1fd394b0", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/38bca6530ffba2eebd12a6717913245d1fd394b0", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-28T15:52:08Z", "type": "forcePushed"}, {"oid": "c84a92d5f6fac17202ba5e927cafbe9b02a0c045", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c84a92d5f6fac17202ba5e927cafbe9b02a0c045", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-28T16:01:43Z", "type": "commit"}, {"oid": "c84a92d5f6fac17202ba5e927cafbe9b02a0c045", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c84a92d5f6fac17202ba5e927cafbe9b02a0c045", "message": "[JBPM-9357] Add springboot Kafka WIH tests", "committedDate": "2020-09-28T16:01:43Z", "type": "forcePushed"}]}