{"pr_number": 2920, "pr_title": "Optional expiration for sponsored members", "pr_createdAt": "2020-10-06T12:45:28Z", "pr_url": "https://github.com/CESNET/perun/pull/2920", "timeline": [{"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "url": "https://github.com/CESNET/perun/commit/86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "message": "Optional expiration for sponsored members\n\n- When a sponsored member lost his sponsorship, he automatically expired\n  in the VO.\n- Now it is possible to add a rule to the vo's membershipExpirationRules\n  attribute, which switches off the automatic expiration.\n- The rule is called doNotExpireSponsoredMembers and it can be set to\n  either true or false (false when not set).", "committedDate": "2020-10-08T20:29:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyNzA1OA==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502227058", "bodyText": "Are you sure this is the right place for these variables? Can't you use a module for attribute instead? By this, you are creating a duplicate of the key in the code.", "author": "stavamichal", "createdAt": "2020-10-09T07:02:12Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -112,6 +112,8 @@\n \tfinal static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n \n \tprivate static final String EXPIRATION = AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\";\n+\tprivate static final String EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":membershipExpirationRules\";\n+\tprivate static final String SPONSORED_MEMBERS_EXPIRATION_KEY = \"doNotExpireSponsoredMembers\";", "originalCommit": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NjE5Mw==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504456193", "bodyText": "I have used static variables from module urn_perun_vo_attribute_def_def_membershipExpirationRules.", "author": "balcirakpeter", "createdAt": "2020-10-14T07:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyNzA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\nindex c55a92b48..45f8d1918 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n\n@@ -107,13 +107,14 @@ import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import static cz.metacentrum.perun.core.impl.modules.attributes.urn_perun_vo_attribute_def_def_membershipExpirationRules.VO_EXPIRATION_RULES_ATTR;\n+import static cz.metacentrum.perun.core.impl.modules.attributes.urn_perun_vo_attribute_def_def_membershipExpirationRules.expireSponsoredMembers;\n+\n public class MembersManagerBlImpl implements MembersManagerBl {\n \n \tfinal static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n \n \tprivate static final String EXPIRATION = AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\";\n-\tprivate static final String EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":membershipExpirationRules\";\n-\tprivate static final String SPONSORED_MEMBERS_EXPIRATION_KEY = \"doNotExpireSponsoredMembers\";\n \n \tprivate final MembersManagerImplApi membersManagerImpl;\n \tprivate PerunBl perunBl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyODA0NQ==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502228045", "bodyText": "I don't think \"dateMatcher\" is the right name for this variable.", "author": "stavamichal", "createdAt": "2020-10-09T07:04:44Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -133,6 +135,14 @@ public void checkAttributeSyntax(PerunSessionImpl sess, T entity, Attribute attr\n \t\t\t\t\t\tparameter + \"': \" + attrValue.get(parameter));\n \t\t\t}\n \t\t}\n+\n+\t\tparameter = doNotExpireSponsoredMembers;\n+\t\tif(keys.contains(parameter)) {\n+\t\t\tMatcher dateMatcher = expireSponsoredMembersPattern.matcher(attrValue.get(parameter));", "originalCommit": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NjI0Mw==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504456243", "bodyText": "Fixed.", "author": "balcirakpeter", "createdAt": "2020-10-14T07:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyODA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java\nindex 7e9616524..bfa1e7f5b 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java\n\n@@ -136,10 +137,10 @@ public abstract class AbstractMembershipExpirationRulesModule<T extends PerunBea\n \t\t\t}\n \t\t}\n \n-\t\tparameter = doNotExpireSponsoredMembers;\n+\t\tparameter = expireSponsoredMembers;\n \t\tif(keys.contains(parameter)) {\n-\t\t\tMatcher dateMatcher = expireSponsoredMembersPattern.matcher(attrValue.get(parameter));\n-\t\t\tif(!dateMatcher.find())\n+\t\t\tMatcher expireSponsoredMemberMatcher = expireSponsoredMembersPattern.matcher(attrValue.get(parameter));\n+\t\t\tif(!expireSponsoredMemberMatcher.find())\n \t\t\t\tthrow new WrongAttributeValueException(attribute, \"There is not allowed value for parameter '\" +\n \t\t\t\t\tparameter + \"': \" + attrValue.get(parameter));\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTYxOA==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502229618", "bodyText": "Please add also test which checks this behavior without attribute set (or with the false in value set) if not exists yet.", "author": "stavamichal", "createdAt": "2020-10-09T07:08:38Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "diffHunk": "@@ -1714,6 +1717,32 @@ public void findOnlySponsoredMembers() throws Exception {\n \t\tassertTrue(members.size() == 0);\n \t}\n \n+\t@Test\n+\tpublic void removeLastSponsorWithoutExpiration() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"removeLastSponsorWithoutExpiration\");\n+\n+\t\t//Set up sponsor\n+\t\tMember sponsorMember = setUpSponsor(createdVo);\n+\t\tUser sponsorUser = perun.getUsersManagerBl().getUserByMember(sess, sponsorMember);\n+\t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n+\t\t//Set up expiration rule\n+\t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n+\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");\n+\t\tAttribute attribute = perun.getAttributesManagerBl().getAttribute(sess, createdVo, expirationRulesAttr);\n+\t\tattribute.setValue(rulesMap);\n+\t\tperun.getAttributesManagerBl().setAttribute(sess, createdVo, attribute);\n+\t\t//create sponsored member\n+\t\tMap<String, String> nameOfUser1 = new HashMap<>();\n+\t\tnameOfUser1.put(\"guestName\", \"Ing. Ji\u0159\u00ed Nov\u00e1k, CSc.\");\n+\t\tMember sponsoredMember = perun.getMembersManagerBl().createSponsoredMember(sess, createdVo, \"dummy\", nameOfUser1, \"secret\", sponsorUser, false);\n+\t\t//Remove sponsor\n+\t\tperun.getMembersManagerBl().removeSponsor(sess, sponsoredMember, sponsorUser);\n+\t\t//refresh from DB\n+\t\tsponsoredMember = perun.getMembersManagerBl().getMemberById(sess, sponsoredMember.getId());\n+\n+\t\tassertNotSame(\"Sponsored member without sponsor cannot expire when doNotExpireSponsoredMembers rule is set to true\", sponsoredMember.getStatus(), Status.EXPIRED);\n+\t}", "originalCommit": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1Njk2NQ==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504456965", "bodyText": "There is already a test, which checks the situation when the attribute is not set.", "author": "balcirakpeter", "createdAt": "2020-10-14T07:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "chunk": "diff --git a/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java b/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java\nindex 99089cfa9..a7b1c86d5 100644\n--- a/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java\n+++ b/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java\n\n@@ -1727,8 +1728,8 @@ public class MembersManagerEntryIntegrationTest extends AbstractPerunIntegration\n \t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n \t\t//Set up expiration rule\n \t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n-\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");\n-\t\tAttribute attribute = perun.getAttributesManagerBl().getAttribute(sess, createdVo, expirationRulesAttr);\n+\t\trulesMap.put(expireSponsoredMembers, \"false\");\n+\t\tAttribute attribute = perun.getAttributesManagerBl().getAttribute(sess, createdVo, VO_EXPIRATION_RULES_ATTR);\n \t\tattribute.setValue(rulesMap);\n \t\tperun.getAttributesManagerBl().setAttribute(sess, createdVo, attribute);\n \t\t//create sponsored member\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTg2Mg==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502229862", "bodyText": "Even there you probably can use the static variable from the module.", "author": "stavamichal", "createdAt": "2020-10-09T07:09:15Z", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "diffHunk": "@@ -1714,6 +1717,32 @@ public void findOnlySponsoredMembers() throws Exception {\n \t\tassertTrue(members.size() == 0);\n \t}\n \n+\t@Test\n+\tpublic void removeLastSponsorWithoutExpiration() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"removeLastSponsorWithoutExpiration\");\n+\n+\t\t//Set up sponsor\n+\t\tMember sponsorMember = setUpSponsor(createdVo);\n+\t\tUser sponsorUser = perun.getUsersManagerBl().getUserByMember(sess, sponsorMember);\n+\t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n+\t\t//Set up expiration rule\n+\t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n+\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");", "originalCommit": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzA2Nw==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457067", "bodyText": "Fixed.", "author": "balcirakpeter", "createdAt": "2020-10-14T07:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "chunk": "diff --git a/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java b/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java\nindex 99089cfa9..a7b1c86d5 100644\n--- a/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java\n+++ b/perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java\n\n@@ -1727,8 +1728,8 @@ public class MembersManagerEntryIntegrationTest extends AbstractPerunIntegration\n \t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n \t\t//Set up expiration rule\n \t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n-\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");\n-\t\tAttribute attribute = perun.getAttributesManagerBl().getAttribute(sess, createdVo, expirationRulesAttr);\n+\t\trulesMap.put(expireSponsoredMembers, \"false\");\n+\t\tAttribute attribute = perun.getAttributesManagerBl().getAttribute(sess, createdVo, VO_EXPIRATION_RULES_ATTR);\n \t\tattribute.setValue(rulesMap);\n \t\tperun.getAttributesManagerBl().setAttribute(sess, createdVo, attribute);\n \t\t//create sponsored member\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMTA4Nw==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502231087", "bodyText": "I would change this variable to \"shouldBeExpired = true\". It will be easier for reading.", "author": "stavamichal", "createdAt": "2020-10-09T07:12:06Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -2523,25 +2525,38 @@ private String createUserAccountInExternalSystem (PerunSession session, User use\n \t}\n \n \t/**\n-\t * Execute process which expires member and removes his sponsorship\n+\t * Execute process which expires member and removes his sponsorship.\n \t *\n \t * @param sess perun session\n \t * @param sponsoredMember who will be processed\n+\t * @param vo of sponsored member\n \t */\n-\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember) {\n+\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n-\t\t//Set member's expiration to today and set status to expired.\n+\t\t//Check whether the member should be expired according to vo's expiration rules.\n+\t\tboolean cannotBeExpired = false;", "originalCommit": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzE0OQ==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457149", "bodyText": "Done", "author": "balcirakpeter", "createdAt": "2020-10-14T07:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMTA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\nindex c55a92b48..45f8d1918 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n\n@@ -2534,16 +2535,16 @@ public class MembersManagerBlImpl implements MembersManagerBl {\n \tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n \t\t//Check whether the member should be expired according to vo's expiration rules.\n-\t\tboolean cannotBeExpired = false;\n+\t\tboolean shouldBeExpired = true;\n \t\ttry {\n-\t\t\tAttribute expirationRules = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, EXPIRATION_RULES_ATTR);\n+\t\t\tAttribute expirationRules = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, VO_EXPIRATION_RULES_ATTR);\n \t\t\tMap<String, String> rulesMap = expirationRules.valueAsMap();\n-\t\t\tif (rulesMap != null && rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY) != null)\n-\t\t\t\tcannotBeExpired = Boolean.parseBoolean(rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY));\n+\t\t\tif (rulesMap != null && rulesMap.get(expireSponsoredMembers) != null)\n+\t\t\t\tshouldBeExpired = Boolean.parseBoolean(rulesMap.get(expireSponsoredMembers));\n \t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(\"Cannot determine whether a previously sponsored member \" + sponsoredMember.getId() + \"should expire.\", e);\n+\t\t\t//When some error occurs we use default value, which means that the member should be expired.\n \t\t}\n-\t\tif (!cannotBeExpired) {\n+\t\tif (shouldBeExpired) {\n \t\t\t//Set member's expiration to today and set status to expired.\n \t\t\ttry {\n \t\t\t\tAttribute expiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, sponsoredMember, EXPIRATION);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502256509", "bodyText": "I would suggest changing the new value to a non-negated version. This makes it harder to understand when you have a false value.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";\n          \n          \n            \n            \tpublic static final String expireSponsoredMembers = \"expireSponsoredMembers\";", "author": "Vojtech-Sassmann", "createdAt": "2020-10-09T08:03:49Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -35,6 +36,7 @@\n \tpublic static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n \tpublic static final String autoExtensionLastLoginPeriod = \"autoExtensionLastLoginPeriod\";\n \tpublic static final String autoExtensionExtSources = \"autoExtensionExtSources\";\n+\tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";", "originalCommit": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1ODMxNw==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502258317", "bodyText": "It is also a possibility and I have no problem with it.", "author": "stavamichal", "createdAt": "2020-10-09T08:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1ODQ2Mg==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502258462", "bodyText": "Then the default is true.", "author": "stavamichal", "createdAt": "2020-10-09T08:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzM2MA==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457360", "bodyText": "OK, reworked.", "author": "balcirakpeter", "createdAt": "2020-10-14T07:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java\nindex 7e9616524..bfa1e7f5b 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java\n\n@@ -36,7 +37,7 @@ public abstract class AbstractMembershipExpirationRulesModule<T extends PerunBea\n \tpublic static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n \tpublic static final String autoExtensionLastLoginPeriod = \"autoExtensionLastLoginPeriod\";\n \tpublic static final String autoExtensionExtSources = \"autoExtensionExtSources\";\n-\tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";\n+\tpublic static final String expireSponsoredMembers = \"expireSponsoredMembers\";\n \n \tpublic void checkAttributeSyntax(PerunSessionImpl sess, T entity, Attribute attribute) throws WrongAttributeValueException {\n \t\tMap<String, String> attrValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2OTA4Nw==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502269087", "bodyText": "I would think about this exception. Maybe if there is a problem, we should log it as error and continue as default = expire members.", "author": "stavamichal", "createdAt": "2020-10-09T08:25:47Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -2523,25 +2525,38 @@ private String createUserAccountInExternalSystem (PerunSession session, User use\n \t}\n \n \t/**\n-\t * Execute process which expires member and removes his sponsorship\n+\t * Execute process which expires member and removes his sponsorship.\n \t *\n \t * @param sess perun session\n \t * @param sponsoredMember who will be processed\n+\t * @param vo of sponsored member\n \t */\n-\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember) {\n+\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n-\t\t//Set member's expiration to today and set status to expired.\n+\t\t//Check whether the member should be expired according to vo's expiration rules.\n+\t\tboolean cannotBeExpired = false;\n \t\ttry {\n-\t\t\tAttribute expiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, sponsoredMember, EXPIRATION);\n-\t\t\texpiration.setValue(BeansUtils.getDateFormatterWithoutTime().format(new Date()));\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess,sponsoredMember,expiration);\n-\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException| WrongAttributeValueException | WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(\"cannot set expiration date to today for sponsored member \"+sponsoredMember.getId(),e);\n-\t\t}\n-\t\ttry {\n-\t\t\texpireMember(sess, sponsoredMember);\n-\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(\"cannot expire member \"+sponsoredMember.getId(),ex);\n+\t\t\tAttribute expirationRules = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, EXPIRATION_RULES_ATTR);\n+\t\t\tMap<String, String> rulesMap = expirationRules.valueAsMap();\n+\t\t\tif (rulesMap != null && rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY) != null)\n+\t\t\t\tcannotBeExpired = Boolean.parseBoolean(rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY));\n+\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException e) {\n+\t\t\tthrow new InternalErrorException(\"Cannot determine whether a previously sponsored member \" + sponsoredMember.getId() + \"should expire.\", e);", "originalCommit": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzQ4Mw==", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457483", "bodyText": "Done.", "author": "balcirakpeter", "createdAt": "2020-10-14T07:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2OTA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\nindex c55a92b48..45f8d1918 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n\n@@ -2534,16 +2535,16 @@ public class MembersManagerBlImpl implements MembersManagerBl {\n \tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n \t\t//Check whether the member should be expired according to vo's expiration rules.\n-\t\tboolean cannotBeExpired = false;\n+\t\tboolean shouldBeExpired = true;\n \t\ttry {\n-\t\t\tAttribute expirationRules = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, EXPIRATION_RULES_ATTR);\n+\t\t\tAttribute expirationRules = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, VO_EXPIRATION_RULES_ATTR);\n \t\t\tMap<String, String> rulesMap = expirationRules.valueAsMap();\n-\t\t\tif (rulesMap != null && rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY) != null)\n-\t\t\t\tcannotBeExpired = Boolean.parseBoolean(rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY));\n+\t\t\tif (rulesMap != null && rulesMap.get(expireSponsoredMembers) != null)\n+\t\t\t\tshouldBeExpired = Boolean.parseBoolean(rulesMap.get(expireSponsoredMembers));\n \t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(\"Cannot determine whether a previously sponsored member \" + sponsoredMember.getId() + \"should expire.\", e);\n+\t\t\t//When some error occurs we use default value, which means that the member should be expired.\n \t\t}\n-\t\tif (!cannotBeExpired) {\n+\t\tif (shouldBeExpired) {\n \t\t\t//Set member's expiration to today and set status to expired.\n \t\t\ttry {\n \t\t\t\tAttribute expiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, sponsoredMember, EXPIRATION);\n"}}, {"oid": "1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "url": "https://github.com/CESNET/perun/commit/1d1b39fb53b77ba30f50d3d6a5e7c6685146cd0a", "message": "Optional expiration for sponsored members\n\n- When a sponsored member lost his sponsorship, he automatically expired\n  in the VO.\n- Now it is possible to add a rule to the vo's membershipExpirationRules\n  attribute, which switches off the automatic expiration.\n- The rule is called expireSponsoredMembers and it can be set to\n  either true or false (true when not set).", "committedDate": "2020-10-14T07:17:08Z", "type": "forcePushed"}, {"oid": "701f9b189fb3f6fda0790368aba4241b23322750", "url": "https://github.com/CESNET/perun/commit/701f9b189fb3f6fda0790368aba4241b23322750", "message": "Optional expiration for sponsored members\n\n- When a sponsored member lost his sponsorship, he automatically expired\n  in the VO.\n- Now it is possible to add a rule to the vo's membershipExpirationRules\n  attribute, which switches off the automatic expiration.\n- The rule is called expireSponsoredMembers and it can be set to\n  either true or false (true when not set).", "committedDate": "2020-10-14T07:27:33Z", "type": "commit"}, {"oid": "701f9b189fb3f6fda0790368aba4241b23322750", "url": "https://github.com/CESNET/perun/commit/701f9b189fb3f6fda0790368aba4241b23322750", "message": "Optional expiration for sponsored members\n\n- When a sponsored member lost his sponsorship, he automatically expired\n  in the VO.\n- Now it is possible to add a rule to the vo's membershipExpirationRules\n  attribute, which switches off the automatic expiration.\n- The rule is called expireSponsoredMembers and it can be set to\n  either true or false (true when not set).", "committedDate": "2020-10-14T07:27:33Z", "type": "forcePushed"}]}