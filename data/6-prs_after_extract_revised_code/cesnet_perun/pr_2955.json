{"pr_number": 2955, "pr_title": "New SPONSORSHIP role", "pr_createdAt": "2020-10-28T15:03:10Z", "pr_url": "https://github.com/CESNET/perun/pull/2955", "timeline": [{"oid": "04d58aeea31ecfe8aae63c8cf567597dda1560e7", "url": "https://github.com/CESNET/perun/commit/04d58aeea31ecfe8aae63c8cf567597dda1560e7", "message": "New SPONSORSHIP role\n\n* We needed to able in the policies to be able distinguish sponsorhips\nof the principal. Therefore, a new role SPONSORSHIP is added.\n* The new role SPONSORSHIP is not saved in DB, but is resolved\nfrom the members_sponsored table.\n* Now, in the refreshAuthz method, are also added records to principal\nroles for this role. For each sponship of the principal there is\ninformation about who is he sponsoring.", "committedDate": "2020-10-28T15:11:08Z", "type": "forcePushed"}, {"oid": "d893905c113380cc675b639a07b2918596b28779", "url": "https://github.com/CESNET/perun/commit/d893905c113380cc675b639a07b2918596b28779", "message": "New SPONSORSHIP role\n\n* We needed to able in the policies to be able distinguish sponsorhips\nof the principal. Therefore, a new role SPONSORSHIP is added.\n* The new role SPONSORSHIP is not saved in DB, but is resolved\nfrom the members_sponsored table.\n* Now, in the refreshAuthz method, are also added records to principal\nroles for this role. For each sponship of the principal there is\ninformation about who is he sponsoring.", "committedDate": "2020-10-28T15:11:51Z", "type": "forcePushed"}, {"oid": "9d4328ce5707c4b5247af18a44b3b44906f9bf9c", "url": "https://github.com/CESNET/perun/commit/9d4328ce5707c4b5247af18a44b3b44906f9bf9c", "message": "New SPONSORSHIP role\n\n* We needed to able in the policies to be able distinguish sponsorhips\nof the principal. Therefore, a new role SPONSORSHIP is added.\n* The new role SPONSORSHIP is not saved in DB, but is resolved\nfrom the members_sponsored table.\n* Now, in the refreshAuthz method, are also added records to principal\nroles for this role. For each sponship of the principal there is\ninformation about who is he sponsoring.", "committedDate": "2020-10-28T15:16:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NjA0MQ==", "url": "https://github.com/CESNET/perun/pull/2955#discussion_r513566041", "bodyText": "Please use method authorizedToManageRole. This one should be deprecated. Or even better and simpler would be to call the method setRole from AuthzResolver right away. It will throw PrivilegeException if the given principal cannot manage the role in the Vo.", "author": "balcirakpeter", "createdAt": "2020-10-28T16:01:53Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -2280,8 +2283,17 @@ public Member setSponsoredMember(PerunSession session, Vo vo, User userToBeSpons\n \t                                 String password, User sponsor, LocalDate validityTo, boolean asyncValidation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException {\n \t\t//check that sponsoring user has role SPONSOR for the VO\n \t\tif (!getPerunBl().getVosManagerBl().isUserInRoleForVo(session, sponsor, Role.SPONSOR, vo, true)) {\n-\t\t\tthrow new UserNotInRoleException(\"user \" + sponsor.getId() + \" is not in role SPONSOR for VO \" + vo.getId());\n+\t\t\tif (!AuthzResolver.isAuthorizedToManageRole(session, vo, Role.SPONSOR)) {", "originalCommit": "9d4328ce5707c4b5247af18a44b3b44906f9bf9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwMzY5MA==", "url": "https://github.com/CESNET/perun/pull/2955#discussion_r513603690", "bodyText": "I have changed it to the authorizedToManageRole method. I don't want to use the AuthzResolver.setRole, since it throws a large amount of unreasonable exception. Also, I don't what to call a higher level component from the bl layer.", "author": "Vojtech-Sassmann", "createdAt": "2020-10-28T16:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NjA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "56155fc164ddc4cb6c1320192bf8fc32f7d9b542", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\nindex aa079123c..2294365fc 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java\n\n@@ -2283,13 +2284,13 @@ public class MembersManagerBlImpl implements MembersManagerBl {\n \t                                 String password, User sponsor, LocalDate validityTo, boolean asyncValidation) throws AlreadyMemberException, ExtendMembershipException, UserNotInRoleException, WrongAttributeValueException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, InvalidLoginException, ExtSourceNotExistsException {\n \t\t//check that sponsoring user has role SPONSOR for the VO\n \t\tif (!getPerunBl().getVosManagerBl().isUserInRoleForVo(session, sponsor, Role.SPONSOR, vo, true)) {\n-\t\t\tif (!AuthzResolver.isAuthorizedToManageRole(session, vo, Role.SPONSOR)) {\n-\t\t\t\tthrow new UserNotInRoleException(\"user \" + sponsor.getId() + \" is not in role SPONSOR for VO \" + vo.getId());\n-\t\t\t}\n-\t\t\t// if the principal is Authorized to set the Sponsor role, set it\n \t\t\ttry {\n+\t\t\t\tif (!AuthzResolver.authorizedToManageRole(session, vo, Role.SPONSOR)) {\n+\t\t\t\t\tthrow new UserNotInRoleException(\"user \" + sponsor.getId() + \" is not in role SPONSOR for VO \" + vo.getId());\n+\t\t\t\t}\n+\t\t\t\t// if the principal is Authorized to set the Sponsor role, set it\n \t\t\t\tAuthzResolverBlImpl.setRole(session, sponsor, vo, Role.SPONSOR);\n-\t\t\t} catch (AlreadyAdminException | RoleCannotBeManagedException e) {\n+\t\t\t} catch (AlreadyAdminException | RoleCannotBeManagedException | RoleManagementRulesNotExistsException e) {\n \t\t\t\tthrow new InternalErrorException(e);\n \t\t\t}\n \t\t}\n"}}, {"oid": "56155fc164ddc4cb6c1320192bf8fc32f7d9b542", "url": "https://github.com/CESNET/perun/commit/56155fc164ddc4cb6c1320192bf8fc32f7d9b542", "message": "New SPONSORSHIP role\n\n* We needed to able in the policies to be able distinguish sponsorhips\nof the principal. Therefore, a new role SPONSORSHIP is added.\n* The new role SPONSORSHIP is not saved in DB, but is resolved\nfrom the members_sponsored table.\n* Now, in the refreshAuthz method, are also added records to principal\nroles for this role. For each sponship of the principal there is\ninformation about who is he sponsoring.", "committedDate": "2020-10-28T16:47:05Z", "type": "commit"}, {"oid": "56155fc164ddc4cb6c1320192bf8fc32f7d9b542", "url": "https://github.com/CESNET/perun/commit/56155fc164ddc4cb6c1320192bf8fc32f7d9b542", "message": "New SPONSORSHIP role\n\n* We needed to able in the policies to be able distinguish sponsorhips\nof the principal. Therefore, a new role SPONSORSHIP is added.\n* The new role SPONSORSHIP is not saved in DB, but is resolved\nfrom the members_sponsored table.\n* Now, in the refreshAuthz method, are also added records to principal\nroles for this role. For each sponship of the principal there is\ninformation about who is he sponsoring.", "committedDate": "2020-10-28T16:47:05Z", "type": "forcePushed"}]}