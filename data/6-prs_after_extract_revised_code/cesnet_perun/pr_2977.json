{"pr_number": 2977, "pr_title": "General getAdmins methods", "pr_createdAt": "2020-11-10T09:52:50Z", "pr_url": "https://github.com/CESNET/perun/pull/2977", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MDkyMg==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520540922", "bodyText": "You can't specify this in the method.", "author": "stavamichal", "createdAt": "2020-11-10T12:56:43Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.", "originalCommit": "2748c516f03c961fe9aa71c73782e48ee725a591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzEzNg==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207136", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-11-11T08:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MDkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\nindex 77e9003e9..5926d3cf1 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n\n@@ -552,12 +552,10 @@ public interface AuthzResolverImplApi {\n \t/**\n \t * Get all richUser administrators for complementary object and role with specified attributes.\n \t *\n-\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n \t * @param mappingOfValues from which will be the query created (keys are column names and values are their ids)\n \t * @param onlyDirectAdmins if we do not want to include also members of authorized groups.\n \t *\n-\t * @return list of richUser administrators for complementary object and role with specified attributes.\n+\t * @return list of user administrators for complementary object and role with specified attributes.\n \t */\n \tList<User> getAdmins(Map<String, Integer> mappingOfValues, boolean onlyDirectAdmins);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTY5Ng==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520601696", "bodyText": "This is probably not the right way how to process an exception in RPC.", "author": "stavamichal", "createdAt": "2020-11-10T14:25:35Z", "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -145,10 +161,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {\n+\t\t\t\te.printStackTrace();", "originalCommit": "2748c516f03c961fe9aa71c73782e48ee725a591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzE2OA==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207168", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-11-11T08:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "chunk": "diff --git a/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java b/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java\nindex 01240b972..e95d6f286 100644\n--- a/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java\n+++ b/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java\n\n@@ -168,9 +166,7 @@ public enum AuthzResolverMethod implements ManagerMethod {\n \t\t\ttry {\n \t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n \t\t\t\tbean.setId(complementaryObjectId);\n-\t\t\t} catch (InstantiationException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t} catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+\t\t\t} catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n \t\t\t\tthrow new InternalErrorException(e);\n \t\t\t} catch (ClassNotFoundException e) {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Object with name \" + complementaryObjectName + \" does not exist.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzc1OA==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520603758", "bodyText": "There is a missing javadoc.", "author": "stavamichal", "createdAt": "2020-11-10T14:28:20Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -141,25 +141,30 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t\twhile (roleNames.hasNext()) {\n \t\t\tString roleName = roleNames.next();\n \t\t\tJsonNode roleNode = rolesNodes.get(roleName);\n-\t\t\tList<Map<String, String>> privilegedRoles = new ArrayList<>();\n-\t\t\tJsonNode privilegedRolesNode = roleNode.get(\"privileged_roles\");\n+\t\t\tList<Map<String, String>> privilegedRolesToManage = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_manage\"));\n+\t\t\tList<Map<String, String>> privilegedRolesToRead = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_read\"));\n+\t\t\tMap<String, String> entitiesToManage = createMapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n+\t\t\tMap<String, String> objectsToAssign = createMapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n \n-\t\t\t//Field privileged_roles is saved as List of maps in the for loop\n-\t\t\tfor (JsonNode privilegedRoleNode : privilegedRolesNode) {\n-\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(privilegedRoleNode);\n-\t\t\t\tprivilegedRoles.add(innerRoleMap);\n-\t\t\t}\n+\t\t\trules.add(new RoleManagementRules(roleName, privilegedRolesToManage, privilegedRolesToRead, entitiesToManage, objectsToAssign));\n+\t\t}\n+\n+\t\treturn rules;\n+\t}\n \n-\t\t\tMap<String, String> entitiesToManage = createmapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n-\t\t\tMap<String, String> objectsToAssign = createmapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n+\tprivate List<Map<String, String>> createMapFromPrivilegedRoles(JsonNode privilegedRolesNode) {", "originalCommit": "2748c516f03c961fe9aa71c73782e48ee725a591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzIwOQ==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207209", "bodyText": "Added", "author": "balcirakpeter", "createdAt": "2020-11-11T08:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java\nindex 57c51e9fd..734401440 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java\n\n@@ -152,6 +152,13 @@ public class PerunRolesLoader {\n \t\treturn rules;\n \t}\n \n+\t/**\n+\t * Gathers privileged roles from a JsonNnode and put them into a list of maps.\n+\t * Role name is stored as a key and the object for the role is stored as a value.\n+\t *\n+\t * @param privilegedRolesNode is a JsonNode which contains role privileges\n+\t * @return a list of maps representing the role privileges\n+\t */\n \tprivate List<Map<String, String>> createMapFromPrivilegedRoles(JsonNode privilegedRolesNode) {\n \t\tList<Map<String, String>> privilegedRoles = new ArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MDcyNA==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520650724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n          \n          \n            \n            \t\t\t\tthrow new InternalErrorException(\"One of the given attributes doesn`t exist.\", ex);", "author": "Vojtech-Sassmann", "createdAt": "2020-11-10T15:27:45Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1195,6 +1229,70 @@ public static void makeUserPerunAdmin(PerunSession sess, User user) throws Alrea\n \t\treturn AuthzResolverImpl.getAllPolicies();\n \t}\n \n+\t/**\n+\t * Get all authorizedGroups for complementary object and role.\n+\t *\n+\t * @param complementaryObject for which we will get administrator groups\n+\t * @param role expected role to filter authorizedGroups by\n+\t *\n+\t * @return list of authorizedGroups for complementary object and role\n+\t */\n+\tpublic static List<Group> getAdminGroups(PerunBean complementaryObject, String role) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(groupObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\treturn authzResolverImpl.getAdminGroups(mappingOfValues);\n+\t}\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>onlyDirectAdmins</b> is <b>true</b>, return only direct users of the complementary object for role with specific attributes.\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param sess perun session\n+\t * @param complementaryObject for which we will get administrator\n+\t * @param specificAttributes list of specified attributes which are needed in object richUser\n+\t * @param role expected role to filter managers by\n+\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.\n+\t */\n+\tpublic static List<RichUser> getRichAdmins(PerunSession sess, PerunBean complementaryObject, List<String> specificAttributes, String role, boolean onlyDirectAdmins, boolean allUserAttributes) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(userObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\tList<User> admins = authzResolverImpl.getAdmins(mappingOfValues, onlyDirectAdmins);\n+\t\tList<RichUser> richAdminsWithAttributes;\n+\n+\t\tif(allUserAttributes) {\n+\t\t\ttry {\n+\t\t\t\trichAdminsWithAttributes = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(sess, admins);\n+\t\t\t} catch (UserNotExistsException e) {\n+\t\t\t\tthrow new InternalErrorException(e);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\tList<AttributeDefinition> attrDefinitions = getPerunBl().getAttributesManagerBl().getAttributesDefinition(sess, specificAttributes);\n+\t\t\t\tList<RichUser> richAdmins = perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, admins);\n+\t\t\t\trichAdminsWithAttributes = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(sess, richAdmins, attrDefinitions);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);", "originalCommit": "2748c516f03c961fe9aa71c73782e48ee725a591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzI0OA==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207248", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-11-11T08:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MDcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex 52fb85620..dff745f51 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -1286,7 +1286,7 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t\t\t\tList<RichUser> richAdmins = perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, admins);\n \t\t\t\trichAdminsWithAttributes = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(sess, richAdmins, attrDefinitions);\n \t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n+\t\t\t\tthrow new InternalErrorException(\"One of the given attributes doesn`t exist.\", ex);\n \t\t\t}\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzI0OA==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520657248", "bodyText": "I think you can use here the HashSet. This list is actually never used since you always convert it into a HashSet.", "author": "Vojtech-Sassmann", "createdAt": "2020-11-10T15:35:49Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -854,6 +860,39 @@ public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, S\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<User> getAdmins(Map<String, Integer> mappingOfValues, boolean onlyDirectAdmins) {\n+\t\tString query = prepareQueryToGetRichAdmins(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tList<User> admins = jdbc.query(query, USER_MAPPER);", "originalCommit": "2748c516f03c961fe9aa71c73782e48ee725a591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzMwOQ==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207309", "bodyText": "Changed", "author": "balcirakpeter", "createdAt": "2020-11-11T08:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\nindex c3da7363d..352445503 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\n\n@@ -865,7 +865,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\tString query = prepareQueryToGetRichAdmins(mappingOfValues);\n \n \t\ttry {\n-\t\t\tList<User> admins = jdbc.query(query, USER_MAPPER);\n+\t\t\tSet<User> admins = new HashSet<>(jdbc.query(query, USER_MAPPER));\n \n \t\t\tif (!onlyDirectAdmins) {\n \t\t\t\t// Admins through a group\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzkzOQ==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520657939", "bodyText": "Also, this method works only with users, not rich users.", "author": "Vojtech-Sassmann", "createdAt": "2020-11-10T15:36:44Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param mappingOfValues from which will be the query created (keys are column names and values are their ids)\n+\t * @param onlyDirectAdmins if we do not want to include also members of authorized groups.\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.", "originalCommit": "2748c516f03c961fe9aa71c73782e48ee725a591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzM4NQ==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207385", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-11-11T08:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\nindex 77e9003e9..5926d3cf1 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n\n@@ -552,12 +552,10 @@ public interface AuthzResolverImplApi {\n \t/**\n \t * Get all richUser administrators for complementary object and role with specified attributes.\n \t *\n-\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n \t * @param mappingOfValues from which will be the query created (keys are column names and values are their ids)\n \t * @param onlyDirectAdmins if we do not want to include also members of authorized groups.\n \t *\n-\t * @return list of richUser administrators for complementary object and role with specified attributes.\n+\t * @return list of user administrators for complementary object and role with specified attributes.\n \t */\n \tList<User> getAdmins(Map<String, Integer> mappingOfValues, boolean onlyDirectAdmins);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2MzMxOQ==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520663319", "bodyText": "This exception should probably be also wrapped and rethrown.", "author": "Vojtech-Sassmann", "createdAt": "2020-11-10T15:43:35Z", "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -117,10 +120,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {", "originalCommit": "2748c516f03c961fe9aa71c73782e48ee725a591", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzQxNQ==", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207415", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-11-11T08:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2MzMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "chunk": "diff --git a/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java b/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java\nindex 01240b972..e95d6f286 100644\n--- a/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java\n+++ b/perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java\n\n@@ -127,9 +127,7 @@ public enum AuthzResolverMethod implements ManagerMethod {\n \t\t\ttry {\n \t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n \t\t\t\tbean.setId(complementaryObjectId);\n-\t\t\t} catch (InstantiationException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t} catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+\t\t\t} catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n \t\t\t\tthrow new InternalErrorException(e);\n \t\t\t} catch (ClassNotFoundException e) {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Object with name \" + complementaryObjectName + \" does not exist.\");\n"}}, {"oid": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "url": "https://github.com/CESNET/perun/commit/ce0aea85a9feb0b02724adc53217bb06518fa2af", "message": "General getAdmins methods\n\n- Methods getAdminGroups and getRichAdmins in AuthzResolver were reworked so it is\n  possible to configure the acces rights.\n- Access rights are stored in perun-roles.yml under the\n  role_management_rules->privileged_roles_to_read.\n- Similar methods in other managers were not converted to this general\n  approach yet. It will be done in a small separate PR so this one is not\n  too complex.", "committedDate": "2020-11-11T08:53:16Z", "type": "commit"}, {"oid": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "url": "https://github.com/CESNET/perun/commit/ce0aea85a9feb0b02724adc53217bb06518fa2af", "message": "General getAdmins methods\n\n- Methods getAdminGroups and getRichAdmins in AuthzResolver were reworked so it is\n  possible to configure the acces rights.\n- Access rights are stored in perun-roles.yml under the\n  role_management_rules->privileged_roles_to_read.\n- Similar methods in other managers were not converted to this general\n  approach yet. It will be done in a small separate PR so this one is not\n  too complex.", "committedDate": "2020-11-11T08:53:16Z", "type": "forcePushed"}]}