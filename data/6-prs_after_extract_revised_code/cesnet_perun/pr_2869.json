{"pr_number": 2869, "pr_title": "Configurable role management", "pr_createdAt": "2020-08-24T11:04:44Z", "pr_url": "https://github.com/CESNET/perun/pull/2869", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzMTc0OQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r477231749", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthis.message = formatMessage(\"Role %s was set from group %s on object %s.\", role, group, object);\n          \n          \n            \n            \t\tthis.message = formatMessage(\"Role %s was unset from group %s on object %s.\", role, group, object);", "author": "Vojtech-Sassmann", "createdAt": "2020-08-26T11:33:50Z", "path": "perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForGroup.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package cz.metacentrum.perun.audit.events.AuthorizationEvents;\n+\n+import cz.metacentrum.perun.audit.events.AuditEvent;\n+import cz.metacentrum.perun.audit.events.EngineIgnoreEvent;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.PerunBean;\n+\n+public class RoleUnsetForGroup extends AuditEvent implements EngineIgnoreEvent {\n+\n+\tprivate PerunBean object;\n+\tprivate Group group;\n+\tprivate String role;\n+\tprivate String message;\n+\n+\t@SuppressWarnings(\"unused\") // used by jackson mapper\n+\tpublic RoleUnsetForGroup() {\n+\t}\n+\n+\tpublic RoleUnsetForGroup(PerunBean object, Group group, String role) {\n+\t\tthis.object = object;\n+\t\tthis.group = group;\n+\t\tthis.role = role;\n+\t\tthis.message = formatMessage(\"Role %s was set from group %s on object %s.\", role, group, object);", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyOTg1Ng==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478329856", "bodyText": "I would use \"for\" not from. I think \"set/unset for\" would work the same.", "author": "stavamichal", "createdAt": "2020-08-27T10:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzMTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDc0NQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487890745", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzMTc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForGroup.java b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForGroup.java\nindex 639c04e91..edc319d6a 100644\n--- a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForGroup.java\n+++ b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForGroup.java\n\n@@ -20,7 +20,7 @@ public class RoleUnsetForGroup extends AuditEvent implements EngineIgnoreEvent {\n \t\tthis.object = object;\n \t\tthis.group = group;\n \t\tthis.role = role;\n-\t\tthis.message = formatMessage(\"Role %s was set from group %s on object %s.\", role, group, object);\n+\t\tthis.message = formatMessage(\"Role %s was unset for group %s on object %s.\", role, group, object);\n \t}\n \n \tpublic PerunBean getObject() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2NDYxMw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r477264613", "bodyText": "With these new generic messages, some other changes must be made. Some components might be dependent on the old format. Unfortunately, I don't know every place where this is used.", "author": "Vojtech-Sassmann", "createdAt": "2020-08-26T12:34:32Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -991,81 +1022,35 @@ public static boolean hasRole(PerunPrincipal perunPrincipal, String role) {\n \t\treturn perunPrincipal.getRoles().hasRole(role);\n \t}\n \n-\t/**\n-\t * Set role for user and <b>all</b> complementary objects.\n-\t * <p>\n-\t * If some complementary object is wrong for the role, throw an exception.\n-\t * For role \"PERUNADMIN\" ignore complementary objects.\n-\t *\n-\t * @param sess                 perun session\n-\t * @param user                 the user for setting role\n-\t * @param role                 role of user in a session ( PERUNADMIN | VOADMIN | GROUPADMIN | SELF | FACILITYADMIN | VOOBSERVER | TOPGROUPCREATOR | SECURITYADMIN | RESOURCESELFSERVICE | RESOURCEADMIN )\n-\t * @param complementaryObjects objects for which role will be set\n-\t */\n-\tpublic static void setRole(PerunSession sess, User user, String role, List<PerunBean> complementaryObjects) throws AlreadyAdminException {\n-\t\tif (complementaryObjects == null || complementaryObjects.isEmpty()) {\n-\t\t\ttry {\n-\t\t\t\tmanageRole(sess, SET_ROLE, null, user, role, null);\n-\t\t\t\t//These exceptions should never happen\n-\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tfor (PerunBean compObject : complementaryObjects) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmanageRole(sess, SET_ROLE, null, user, role, compObject);\n-\t\t\t\t\t//These exceptions should never happen\n-\t\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n \n \t/**\n \t * Set role for user and <b>one</b> complementary object.\n \t * <p>\n \t * If complementary object is wrong for the role, throw an exception.\n-\t * For role \"PERUNADMIN\" ignore complementary object.\n \t *\n \t * @param sess                perun session\n \t * @param user                the user for setting role\n \t * @param role                role of user in a session ( PERUNADMIN | VOADMIN | GROUPADMIN | SELF | FACILITYADMIN | VOOBSERVER | TOPGROUPCREATOR | SECURITYADMIN | RESOURCESELFSERVICE | RESOURCEADMIN )\n \t * @param complementaryObject object for which role will be set\n \t */\n-\tpublic static void setRole(PerunSession sess, User user, PerunBean complementaryObject, String role) throws AlreadyAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.setRole(sess, user, role, complementaryObjects);\n-\t}\n+\tpublic static void setRole(PerunSession sess, User user, PerunBean complementaryObject, String role) throws AlreadyAdminException, RoleCannotBeManagedException {\n+\t\tif (!objectAndRoleManageableByEntity(user, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(\"Combination of Role: \"+ role +\", Object: \"+ complementaryObject +\" and Entity: \"+ user +\" cannot be managed.\");\n+\t\t}\n \n-\t/**\n-\t * Set role for auhtorizedGroup and <b>all</b> complementary objects.\n-\t * <p>\n-\t * If some complementary object is wrong for the role, throw an exception.\n-\t * For role \"PERUNADMIN\" ignore complementary objects.\n-\t *\n-\t * @param sess                 perun session\n-\t * @param authorizedGroup      the group for setting role\n-\t * @param role                 role of user in a session ( PERUNADMIN | VOADMIN | GROUPADMIN | SELF | FACILITYADMIN | VOOBSERVER | TOPGROUPCREATOR | RESOURCESELFSERVICE | RESOURCEADMIN )\n-\t * @param complementaryObjects objects for which role will be set\n-\t */\n-\tpublic static void setRole(PerunSession sess, Group authorizedGroup, String role, List<PerunBean> complementaryObjects) throws AlreadyAdminException {\n-\t\tif (complementaryObjects == null || complementaryObjects.isEmpty()) {\n-\t\t\ttry {\n-\t\t\t\tmanageRole(sess, SET_ROLE, authorizedGroup, null, role, null);\n-\t\t\t\t//These exceptions should never happen\n-\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tfor (PerunBean compObject : complementaryObjects) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmanageRole(sess, SET_ROLE, authorizedGroup, null, role, compObject);\n-\t\t\t\t\t//These exceptions should never happen\n-\t\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n+\t\tMap<String, Integer> mappingOfValues = createMappingOfValues(user, complementaryObject, role);\n+\n+\t\ttry {\n+\t\t\tauthzResolverImpl.setRole(sess, mappingOfValues);\n+\t\t} catch (RoleAlreadySetException e) {\n+\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in \" + complementaryObject, e);\n+\t\t}\n+\n+\t\tgetPerunBl().getAuditer().log(sess, new RoleSetForUser(complementaryObject, user, role));", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2NTczMA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r477265730", "bodyText": "One workaround would be to log the new message together with the old one (if there was any) for specific roles being set. I guess it depends on how many changes must be done because of this new role management.", "author": "Vojtech-Sassmann", "createdAt": "2020-08-26T12:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2NDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MDMzNw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r489360337", "bodyText": "We have searched for occurrences and it seems that only notifications use \"set\" event. So in order to use the new one this SQL command have to be executed.\nupdate pn_regex set regex = 'Role PERUNADMIN was set for.*' where regex = 'User:.*was promoted to PERUNADMIN.*';", "author": "balcirakpeter", "createdAt": "2020-09-16T11:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI2NDYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "1ea30a53909676a7ad89663f7c2e0b6a3ae5eb78", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex b47b0c731..ca3b4ace6 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -1041,7 +1042,7 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t\tMap<String, Integer> mappingOfValues = createMappingOfValues(user, complementaryObject, role);\n \n \t\ttry {\n-\t\t\tauthzResolverImpl.setRole(sess, mappingOfValues);\n+\t\t\tauthzResolverImpl.setRole(sess, mappingOfValues, role);\n \t\t} catch (RoleAlreadySetException e) {\n \t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in \" + complementaryObject, e);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyOTE2Mw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478329163", "bodyText": "It probably should correspond with the name, so the message would be:\nRole %s was set for group %s on object %s.", "author": "stavamichal", "createdAt": "2020-08-27T10:53:12Z", "path": "perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForGroup.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package cz.metacentrum.perun.audit.events.AuthorizationEvents;\n+\n+import cz.metacentrum.perun.audit.events.AuditEvent;\n+import cz.metacentrum.perun.audit.events.EngineIgnoreEvent;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.PerunBean;\n+\n+public class RoleSetForGroup extends AuditEvent implements EngineIgnoreEvent {\n+\n+\tprivate PerunBean object;\n+\tprivate Group group;\n+\tprivate String role;\n+\tprivate String message;\n+\n+\t@SuppressWarnings(\"unused\") // used by jackson mapper\n+\tpublic RoleSetForGroup() {\n+\t}\n+\n+\tpublic RoleSetForGroup(PerunBean object, Group group, String role) {\n+\t\tthis.object = object;\n+\t\tthis.group = group;\n+\t\tthis.role = role;\n+\t\tthis.message = formatMessage(\"Role %s was set to group %s on object %s.\", role, group, object);", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDgxNA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487890814", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyOTE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForGroup.java b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForGroup.java\nindex 784ab180f..2dc452f2d 100644\n--- a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForGroup.java\n+++ b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForGroup.java\n\n@@ -20,7 +20,7 @@ public class RoleSetForGroup extends AuditEvent implements EngineIgnoreEvent {\n \t\tthis.object = object;\n \t\tthis.group = group;\n \t\tthis.role = role;\n-\t\tthis.message = formatMessage(\"Role %s was set to group %s on object %s.\", role, group, object);\n+\t\tthis.message = formatMessage(\"Role %s was set for group %s on object %s.\", role, group, object);\n \t}\n \n \tpublic PerunBean getObject() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyOTM0NA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478329344", "bodyText": "The same like for group. \"set for user\"", "author": "stavamichal", "createdAt": "2020-08-27T10:53:33Z", "path": "perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForUser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package cz.metacentrum.perun.audit.events.AuthorizationEvents;\n+\n+import cz.metacentrum.perun.audit.events.AuditEvent;\n+import cz.metacentrum.perun.audit.events.EngineIgnoreEvent;\n+import cz.metacentrum.perun.core.api.PerunBean;\n+import cz.metacentrum.perun.core.api.User;\n+\n+public class RoleSetForUser extends AuditEvent implements EngineIgnoreEvent {\n+\n+\tprivate PerunBean object;\n+\tprivate User user;\n+\tprivate String role;\n+\tprivate String message;\n+\n+\t@SuppressWarnings(\"unused\") // used by jackson mapper\n+\tpublic RoleSetForUser() {\n+\t}\n+\n+\tpublic RoleSetForUser(PerunBean object, User user, String role) {\n+\t\tthis.object = object;\n+\t\tthis.user = user;\n+\t\tthis.role = role;\n+\t\tthis.message = formatMessage(\"Role %s was set to user %s on object %s.\", role, user, object);", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDg4Nw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487890887", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyOTM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForUser.java b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForUser.java\nindex f7e4e866d..72b4de0b8 100644\n--- a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForUser.java\n+++ b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleSetForUser.java\n\n@@ -20,7 +20,7 @@ public class RoleSetForUser extends AuditEvent implements EngineIgnoreEvent {\n \t\tthis.object = object;\n \t\tthis.user = user;\n \t\tthis.role = role;\n-\t\tthis.message = formatMessage(\"Role %s was set to user %s on object %s.\", role, user, object);\n+\t\tthis.message = formatMessage(\"Role %s was set for user %s on object %s.\", role, user, object);\n \t}\n \n \tpublic PerunBean getObject() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzMDAwMA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478330000", "bodyText": "Also \"unset for\".", "author": "stavamichal", "createdAt": "2020-08-27T10:54:57Z", "path": "perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForUser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package cz.metacentrum.perun.audit.events.AuthorizationEvents;\n+\n+import cz.metacentrum.perun.audit.events.AuditEvent;\n+import cz.metacentrum.perun.audit.events.EngineIgnoreEvent;\n+import cz.metacentrum.perun.core.api.PerunBean;\n+import cz.metacentrum.perun.core.api.User;\n+\n+public class RoleUnsetForUser extends AuditEvent implements EngineIgnoreEvent {\n+\n+\tprivate PerunBean object;\n+\tprivate User user;\n+\tprivate String role;\n+\tprivate String message;\n+\n+\t@SuppressWarnings(\"unused\") // used by jackson mapper\n+\tpublic RoleUnsetForUser() {\n+\t}\n+\n+\tpublic RoleUnsetForUser(PerunBean object, User user, String role) {\n+\t\tthis.object = object;\n+\t\tthis.user = user;\n+\t\tthis.role = role;\n+\t\tthis.message = formatMessage(\"Role %s was unset from user %s on object %s.\", role, user, object);", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTA0MQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487891041", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzMDAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForUser.java b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForUser.java\nindex f13b45100..f64d64c0d 100644\n--- a/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForUser.java\n+++ b/perun-base/src/main/java/cz/metacentrum/perun/audit/events/AuthorizationEvents/RoleUnsetForUser.java\n\n@@ -20,7 +20,7 @@ public class RoleUnsetForUser extends AuditEvent implements EngineIgnoreEvent {\n \t\tthis.object = object;\n \t\tthis.user = user;\n \t\tthis.role = role;\n-\t\tthis.message = formatMessage(\"Role %s was unset from user %s on object %s.\", role, user, object);\n+\t\tthis.message = formatMessage(\"Role %s was unset for user %s on object %s.\", role, user, object);\n \t}\n \n \tpublic PerunBean getObject() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzMjI2Mg==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478332262", "bodyText": "In all exceptions where you are saying \"something is wrong with Role\", shouldn't be the Role part of the constructor?", "author": "stavamichal", "createdAt": "2020-08-27T10:59:43Z", "path": "perun-base/src/main/java/cz/metacentrum/perun/core/api/exceptions/RoleAlreadySetException.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package cz.metacentrum.perun.core.api.exceptions;\n+\n+public class RoleAlreadySetException  extends PerunException {\n+\n+\tpublic RoleAlreadySetException(String message) {\n+\t\tsuper(message);", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NTU5OQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r489385599", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-16T12:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzMjI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1ea30a53909676a7ad89663f7c2e0b6a3ae5eb78", "chunk": "diff --git a/perun-base/src/main/java/cz/metacentrum/perun/core/api/exceptions/RoleAlreadySetException.java b/perun-base/src/main/java/cz/metacentrum/perun/core/api/exceptions/RoleAlreadySetException.java\nindex 7e26f0760..5f7260137 100644\n--- a/perun-base/src/main/java/cz/metacentrum/perun/core/api/exceptions/RoleAlreadySetException.java\n+++ b/perun-base/src/main/java/cz/metacentrum/perun/core/api/exceptions/RoleAlreadySetException.java\n\n@@ -1,8 +1,18 @@\n package cz.metacentrum.perun.core.api.exceptions;\n \n+/**\n+ * This exception is thrown when trying to set a role which is already set for given entities.\n+ */\n public class RoleAlreadySetException  extends PerunException {\n \n-\tpublic RoleAlreadySetException(String message) {\n+\tString role;\n+\n+\tpublic RoleAlreadySetException(String message, String role) {\n \t\tsuper(message);\n+\t\tthis.role = role;\n+\t}\n+\n+\tpublic String getRole() {\n+\t\treturn role;\n \t}\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NzQ5OQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478377499", "bodyText": "What about the role, which has more than one associated PerunBean? Especially if they don't need to be in a connection yet. For example fictive role VoFacilityCommunicator (Vo, Facility). Such role can exist even without any resources. It can be created before there was any connection between Vo and Facility.", "author": "stavamichal", "createdAt": "2020-08-27T12:23:12Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/api/AuthzResolver.java", "diffHunk": "@@ -590,6 +592,22 @@ public static boolean isAuthorizedToManageRole(PerunSession sess, PerunBean comp\n \t\treturn hasOneOfTheRolesForObject(sess, complementaryObject, Privileges.getRolesWhichCanManageRole(role));\n \t}\n \n+\t/**\n+\t * Check wheter the principal is authorized to manage the role on the object.\n+\t *\n+\t * @param sess principal's perun session\n+\t * @param complementaryObject bounded with the role\n+\t * @param role which will be managed\n+\t * @return\n+\t * @throws RoleManagementRulesNotExistsException when the role does not have the management rules.\n+\t */\n+\tpublic static boolean authorizedToManageRole(PerunSession sess, PerunBean complementaryObject, String role) throws RoleManagementRulesNotExistsException {", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NTQ1OQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r489375459", "bodyText": "We have discussed this and the result is that we do not want to support such roles. It could result in undesired authorization decisions and it would make the whole authorization even more complex.\nThe solution for this role would be to create VoCommunicator (Vo) and FacilityCommunicator (Facility). You can create AND rule for them if you need that.", "author": "balcirakpeter", "createdAt": "2020-09-16T11:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NzQ5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM4OTY3Mg==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478389672", "bodyText": "I would use brackets here.", "author": "stavamichal", "createdAt": "2020-08-27T12:44:20Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -133,6 +143,27 @@ public static boolean authorized(PerunSession sess, String policyDefinition, Lis\n \t\treturn resolveAuthorization(sess, policyRoles, mapOfBeans);\n \t}\n \n+\tpublic static boolean authorizedToManageRole(PerunSession sess, PerunBean object, String roleName) throws RoleManagementRulesNotExistsException {\n+\t\t// We need to load additional information about the principal\n+\t\tif (!sess.getPerunPrincipal().isAuthzInitialized()) {\n+\t\t\trefreshAuthz(sess);\n+\t\t}\n+\n+\t\t// If the user has no roles, deny access\n+\t\tif (sess.getPerunPrincipal().getRoles() == null) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tRoleManagementRules rules = AuthzResolverImpl.getRoleManagementRules(roleName);\n+\n+\t\tMap <String, Set<Integer>> mapOfBeans = new HashMap<>();\n+\t\tif (object != null)\n+\t\t\t//Fetch super objects like Vo for group etc.\n+\t\t\tmapOfBeans = fetchAllRelatedObjects(Collections.singletonList(object));", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTE1NA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487891154", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM4OTY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex b47b0c731..c62871fc9 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -157,9 +157,10 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t\tRoleManagementRules rules = AuthzResolverImpl.getRoleManagementRules(roleName);\n \n \t\tMap <String, Set<Integer>> mapOfBeans = new HashMap<>();\n-\t\tif (object != null)\n+\t\tif (object != null) {\n \t\t\t//Fetch super objects like Vo for group etc.\n \t\t\tmapOfBeans = fetchAllRelatedObjects(Collections.singletonList(object));\n+\t\t}\n \n \t\treturn resolveAuthorization(sess, rules.getPrivilegedRoles(), mapOfBeans);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5ODQ1OQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r478398459", "bodyText": "Too much empty lines here. (above and below the method)", "author": "stavamichal", "createdAt": "2020-08-27T12:57:59Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -515,4 +518,33 @@\n \t * Roles are loaded to the database and policies are loaded to the PerunPoliciesContainer.\n \t */\n \tvoid loadAuthorizationComponents();\n+\n+\n+\t/**\n+\t * Fetch the identification of the role from the table roles in the database;\n+\t *\n+\t * @return identification of the role\n+\t */\n+\tInteger getRoleId(String role);\n+\n+", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTIxNQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487891215", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5ODQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\nindex 1a577e350..61e1a7699 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n\n@@ -519,7 +519,6 @@ public interface AuthzResolverImplApi {\n \t */\n \tvoid loadAuthorizationComponents();\n \n-\n \t/**\n \t * Fetch the identification of the role from the table roles in the database;\n \t *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5NDA1NA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r481894054", "bodyText": "There is missing a good description of an error.", "author": "stavamichal", "createdAt": "2020-09-02T08:40:24Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1177,10 +1135,56 @@ public static void unsetRole(PerunSession sess, Group authorizedGroup, String ro\n \t * @param role                role of user in a session ( PERUNADMIN | VOADMIN | GROUPADMIN | SELF | FACILITYADMIN | VOOBSERVER | TOPGROUPCREATOR | RESOURCESELFSERVICE | RESOURCEADMIN )\n \t * @param complementaryObject object for which role will be unset\n \t */\n-\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, String role) throws GroupNotAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, authorizedGroup, role, complementaryObjects);\n+\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, String role) throws GroupNotAdminException, RoleCannotBeManagedException {\n+\t\tif (!objectAndRoleManageableByEntity(authorizedGroup, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(\"Combination of Role: \"+ role +\", Object: \"+ complementaryObject +\" and Entity: \"+ authorizedGroup +\" cannot be managed.\");\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingOfValues(authorizedGroup, complementaryObject, role);\n+\n+\t\ttry {\n+\t\t\tauthzResolverImpl.unsetRole(sess, mappingOfValues);\n+\t\t} catch (RoleNotSetException e) {\n+\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not \"+role+\" in \" + complementaryObject, e);\n+\t\t}\n+\n+\t\tgetPerunBl().getAuditer().log(sess, new RoleUnsetForGroup(complementaryObject, authorizedGroup, role));\n+\n+\t\tif (role.equals(Role.SPONSOR) && complementaryObject.getBeanName().equals(\"Vo\"))\n+\t\t\tgetPerunBl().getVosManagerBl().handleGroupLostVoRole(sess, authorizedGroup, (Vo) complementaryObject, Role.SPONSOR);\n+\n+\t\tif (authorizedGroup != null && sess.getPerunPrincipal() != null && sess.getPerunPrincipal().getUser() != null) {\n+\t\t\tList<Member> groupMembers = perunBl.getGroupsManagerBl().getGroupMembers(sess, authorizedGroup);\n+\t\t\tList<Member> userMembers = perunBl.getMembersManagerBl().getMembersByUser(sess, sess.getPerunPrincipal().getUser());\n+\t\t\tuserMembers.retainAll(groupMembers);\n+\t\t\tif (!userMembers.isEmpty()) AuthzResolverBlImpl.refreshAuthz(sess);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Add owner for a specific user.\n+\t *\n+\t * @param sess Principal's session\n+\t * @param user - owner\n+\t * @param complementaryObject specific user\n+\t * @throws AlreadyAdminException\n+\t */\n+\tpublic static void addSpecificUserOwner(PerunSession sess, User user, PerunBean complementaryObject) throws AlreadyAdminException {\n+\t\tif (user != null && complementaryObject != null) authzResolverImpl.addAdmin(sess, (User) complementaryObject, user);\n+\t\telse throw new InternalErrorException(\"Error\");", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTI4MQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487891281", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5NDA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex b47b0c731..c62871fc9 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -1171,7 +1172,7 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t */\n \tpublic static void addSpecificUserOwner(PerunSession sess, User user, PerunBean complementaryObject) throws AlreadyAdminException {\n \t\tif (user != null && complementaryObject != null) authzResolverImpl.addAdmin(sess, (User) complementaryObject, user);\n-\t\telse throw new InternalErrorException(\"Error\");\n+\t\telse throw new InternalErrorException(\"Specific user and its owner cannot be null while adding specific user owner.\");\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5NDEyOQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r481894129", "bodyText": "There is missing a good description of an error.", "author": "stavamichal", "createdAt": "2020-09-02T08:40:29Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1177,10 +1135,56 @@ public static void unsetRole(PerunSession sess, Group authorizedGroup, String ro\n \t * @param role                role of user in a session ( PERUNADMIN | VOADMIN | GROUPADMIN | SELF | FACILITYADMIN | VOOBSERVER | TOPGROUPCREATOR | RESOURCESELFSERVICE | RESOURCEADMIN )\n \t * @param complementaryObject object for which role will be unset\n \t */\n-\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, String role) throws GroupNotAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, authorizedGroup, role, complementaryObjects);\n+\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, String role) throws GroupNotAdminException, RoleCannotBeManagedException {\n+\t\tif (!objectAndRoleManageableByEntity(authorizedGroup, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(\"Combination of Role: \"+ role +\", Object: \"+ complementaryObject +\" and Entity: \"+ authorizedGroup +\" cannot be managed.\");\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingOfValues(authorizedGroup, complementaryObject, role);\n+\n+\t\ttry {\n+\t\t\tauthzResolverImpl.unsetRole(sess, mappingOfValues);\n+\t\t} catch (RoleNotSetException e) {\n+\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not \"+role+\" in \" + complementaryObject, e);\n+\t\t}\n+\n+\t\tgetPerunBl().getAuditer().log(sess, new RoleUnsetForGroup(complementaryObject, authorizedGroup, role));\n+\n+\t\tif (role.equals(Role.SPONSOR) && complementaryObject.getBeanName().equals(\"Vo\"))\n+\t\t\tgetPerunBl().getVosManagerBl().handleGroupLostVoRole(sess, authorizedGroup, (Vo) complementaryObject, Role.SPONSOR);\n+\n+\t\tif (authorizedGroup != null && sess.getPerunPrincipal() != null && sess.getPerunPrincipal().getUser() != null) {\n+\t\t\tList<Member> groupMembers = perunBl.getGroupsManagerBl().getGroupMembers(sess, authorizedGroup);\n+\t\t\tList<Member> userMembers = perunBl.getMembersManagerBl().getMembersByUser(sess, sess.getPerunPrincipal().getUser());\n+\t\t\tuserMembers.retainAll(groupMembers);\n+\t\t\tif (!userMembers.isEmpty()) AuthzResolverBlImpl.refreshAuthz(sess);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Add owner for a specific user.\n+\t *\n+\t * @param sess Principal's session\n+\t * @param user - owner\n+\t * @param complementaryObject specific user\n+\t * @throws AlreadyAdminException\n+\t */\n+\tpublic static void addSpecificUserOwner(PerunSession sess, User user, PerunBean complementaryObject) throws AlreadyAdminException {\n+\t\tif (user != null && complementaryObject != null) authzResolverImpl.addAdmin(sess, (User) complementaryObject, user);\n+\t\telse throw new InternalErrorException(\"Error\");\n+\t}\n+\n+\t/**\n+\t * Remove owner for a specific user.\n+\t *\n+\t * @param sess Principal's session\n+\t * @param user - owner\n+\t * @param complementaryObject specific user\n+\t * @throws UserNotAdminException\n+\t */\n+\tpublic static void removeSpecificUserOwner(PerunSession sess, User user, PerunBean complementaryObject) throws UserNotAdminException {\n+\t\tif (user != null && complementaryObject != null) authzResolverImpl.removeAdmin(sess, (User) complementaryObject, user);\n+\t\telse throw new InternalErrorException(\"Error\");", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTM1NA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487891354", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5NDEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex b47b0c731..c62871fc9 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -1171,7 +1172,7 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t */\n \tpublic static void addSpecificUserOwner(PerunSession sess, User user, PerunBean complementaryObject) throws AlreadyAdminException {\n \t\tif (user != null && complementaryObject != null) authzResolverImpl.addAdmin(sess, (User) complementaryObject, user);\n-\t\telse throw new InternalErrorException(\"Error\");\n+\t\telse throw new InternalErrorException(\"Specific user and its owner cannot be null while adding specific user owner.\");\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwNjQ4Mg==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r481906482", "bodyText": "It's not wrong, just a little dangerous approach for me. The method is giving someone right to set a role for someone else. For such an important (from the matter of security) task, I would change the logic to specific rules where you have rights, and everything else should be false. You have particular rules when you don't have rights, and everything else is true. So in the situation when we forget some possible scenarios, the result will be to give someone access to something he shouldn't have access to.", "author": "stavamichal", "createdAt": "2020-09-02T08:54:00Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -2201,4 +1945,89 @@ public static RelatedObjectsResolver getValue(String name) {\n \t\t\treturn function.apply(object);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Checks whether the given parameters satisfies the rules associated with the role.\n+\t *\n+\t * @param entityToManage to which will be the role set or unset\n+\t * @param complementaryObject which will be bounded with the role\n+\t * @param role which will be managed\n+\t * @return true if all given parameters imply with the associated rule, false otherwise.\n+\t */\n+\tprivate static boolean objectAndRoleManageableByEntity(PerunBean entityToManage, PerunBean complementaryObject, String role) {\n+\t\tRoleManagementRules rules;\n+\t\ttry {\n+\t\t\trules = AuthzResolverImpl.getRoleManagementRules(role);\n+\t\t} catch (RoleManagementRulesNotExistsException e) {\n+\t\t\tthrow new InternalErrorException(\"Management rules not exist for the role \" + role, e);\n+\t\t}\n+\n+\t\tSet<String> necessaryObjects = rules.getAssignedObjects().keySet();\n+\n+\t\tif (!rules.getEntitiesToManage().containsKey(entityToManage.getBeanName())) return false;\n+\t\tif (complementaryObject != null && necessaryObjects.isEmpty()) return false;\n+\t\tif (complementaryObject == null && !necessaryObjects.isEmpty()) return false;\n+\t\tif (complementaryObject == null) return true;\n+\t\tif (!necessaryObjects.contains(complementaryObject.getBeanName())) return false;\n+\n+\t\tif (necessaryObjects.size() > 1) {\n+\t\t\t//Fetch super objects like Vo for group etc.\n+\t\t\tMap<String, Set<Integer>> mapOfBeans = fetchAllRelatedObjects(Collections.singletonList(complementaryObject));\n+\t\t\tfor (String object : necessaryObjects) {\n+\t\t\t\tif (!mapOfBeans.containsKey(object) || mapOfBeans.get(object).isEmpty()) return false;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn true;", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTQ0MQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487891441", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwNjQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex b47b0c731..c62871fc9 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -1964,21 +1965,16 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \n \t\tSet<String> necessaryObjects = rules.getAssignedObjects().keySet();\n \n-\t\tif (!rules.getEntitiesToManage().containsKey(entityToManage.getBeanName())) return false;\n-\t\tif (complementaryObject != null && necessaryObjects.isEmpty()) return false;\n-\t\tif (complementaryObject == null && !necessaryObjects.isEmpty()) return false;\n-\t\tif (complementaryObject == null) return true;\n-\t\tif (!necessaryObjects.contains(complementaryObject.getBeanName())) return false;\n-\n-\t\tif (necessaryObjects.size() > 1) {\n-\t\t\t//Fetch super objects like Vo for group etc.\n-\t\t\tMap<String, Set<Integer>> mapOfBeans = fetchAllRelatedObjects(Collections.singletonList(complementaryObject));\n-\t\t\tfor (String object : necessaryObjects) {\n-\t\t\t\tif (!mapOfBeans.containsKey(object) || mapOfBeans.get(object).isEmpty()) return false;\n+\t\tif (rules.getEntitiesToManage().containsKey(entityToManage.getBeanName())) {\n+\t\t\tif (complementaryObject == null && necessaryObjects.isEmpty()) {\n+\t\t\t\treturn true;\n+\t\t\t} else if (complementaryObject != null && !necessaryObjects.isEmpty()) {\n+\t\t\t\t//Fetch super objects like Vo for group etc.\n+\t\t\t\tMap<String, Set<Integer>> mapOfBeans = fetchAllRelatedObjects(Collections.singletonList(complementaryObject));\n+\t\t\t\treturn mapOfBeans.keySet().containsAll(necessaryObjects);\n \t\t\t}\n \t\t}\n-\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwOTUzNQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r481909535", "bodyText": "Again you should use brackets here.", "author": "stavamichal", "createdAt": "2020-09-02T08:57:08Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -2201,4 +1945,89 @@ public static RelatedObjectsResolver getValue(String name) {\n \t\t\treturn function.apply(object);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Checks whether the given parameters satisfies the rules associated with the role.\n+\t *\n+\t * @param entityToManage to which will be the role set or unset\n+\t * @param complementaryObject which will be bounded with the role\n+\t * @param role which will be managed\n+\t * @return true if all given parameters imply with the associated rule, false otherwise.\n+\t */\n+\tprivate static boolean objectAndRoleManageableByEntity(PerunBean entityToManage, PerunBean complementaryObject, String role) {\n+\t\tRoleManagementRules rules;\n+\t\ttry {\n+\t\t\trules = AuthzResolverImpl.getRoleManagementRules(role);\n+\t\t} catch (RoleManagementRulesNotExistsException e) {\n+\t\t\tthrow new InternalErrorException(\"Management rules not exist for the role \" + role, e);\n+\t\t}\n+\n+\t\tSet<String> necessaryObjects = rules.getAssignedObjects().keySet();\n+\n+\t\tif (!rules.getEntitiesToManage().containsKey(entityToManage.getBeanName())) return false;\n+\t\tif (complementaryObject != null && necessaryObjects.isEmpty()) return false;\n+\t\tif (complementaryObject == null && !necessaryObjects.isEmpty()) return false;\n+\t\tif (complementaryObject == null) return true;\n+\t\tif (!necessaryObjects.contains(complementaryObject.getBeanName())) return false;\n+\n+\t\tif (necessaryObjects.size() > 1) {\n+\t\t\t//Fetch super objects like Vo for group etc.\n+\t\t\tMap<String, Set<Integer>> mapOfBeans = fetchAllRelatedObjects(Collections.singletonList(complementaryObject));\n+\t\t\tfor (String object : necessaryObjects) {\n+\t\t\t\tif (!mapOfBeans.containsKey(object) || mapOfBeans.get(object).isEmpty()) return false;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * Create a mapping of column names and ids which will be used for setting or unsetting of the role.\n+\t *\n+\t * @param entityToManage to which will be the role set or unset\n+\t * @param complementaryObject which will be bounded with the role\n+\t * @param role which will be managed\n+\t * @return final mapping of values\n+\t */\n+\tprivate static Map<String, Integer> createMappingOfValues(PerunBean entityToManage, PerunBean complementaryObject, String role) {\n+\t\tMap<String, Integer> mapping = new HashMap<>();\n+\n+\t\tRoleManagementRules rules;\n+\t\ttry {\n+\t\t\trules = AuthzResolverImpl.getRoleManagementRules(role);\n+\t\t} catch (RoleManagementRulesNotExistsException e) {\n+\t\t\tthrow new InternalErrorException(\"Management rules not exist for the role \" + role, e);\n+\t\t}\n+\n+\t\tInteger role_id = authzResolverImpl.getRoleId(role);\n+\t\tmapping.put(\"role_id\", role_id);\n+\t\tmapping.put(rules.getEntitiesToManage().get(entityToManage.getBeanName()), entityToManage.getId());\n+\n+\t\tMap <String, Set<Integer>> mapOfBeans = new HashMap<>();\n+\t\tif (complementaryObject != null)\n+\t\t\t//Fetch super objects like Vo for group etc.\n+\t\t\tmapOfBeans = fetchAllRelatedObjects(Collections.singletonList(complementaryObject));", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MTUxNQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r487891515", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-09-14T12:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwOTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "124fbee275ff0f06a9debaa34c91289668159a45", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex b47b0c731..c62871fc9 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -1964,21 +1965,16 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \n \t\tSet<String> necessaryObjects = rules.getAssignedObjects().keySet();\n \n-\t\tif (!rules.getEntitiesToManage().containsKey(entityToManage.getBeanName())) return false;\n-\t\tif (complementaryObject != null && necessaryObjects.isEmpty()) return false;\n-\t\tif (complementaryObject == null && !necessaryObjects.isEmpty()) return false;\n-\t\tif (complementaryObject == null) return true;\n-\t\tif (!necessaryObjects.contains(complementaryObject.getBeanName())) return false;\n-\n-\t\tif (necessaryObjects.size() > 1) {\n-\t\t\t//Fetch super objects like Vo for group etc.\n-\t\t\tMap<String, Set<Integer>> mapOfBeans = fetchAllRelatedObjects(Collections.singletonList(complementaryObject));\n-\t\t\tfor (String object : necessaryObjects) {\n-\t\t\t\tif (!mapOfBeans.containsKey(object) || mapOfBeans.get(object).isEmpty()) return false;\n+\t\tif (rules.getEntitiesToManage().containsKey(entityToManage.getBeanName())) {\n+\t\t\tif (complementaryObject == null && necessaryObjects.isEmpty()) {\n+\t\t\t\treturn true;\n+\t\t\t} else if (complementaryObject != null && !necessaryObjects.isEmpty()) {\n+\t\t\t\t//Fetch super objects like Vo for group etc.\n+\t\t\t\tMap<String, Set<Integer>> mapOfBeans = fetchAllRelatedObjects(Collections.singletonList(complementaryObject));\n+\t\t\t\treturn mapOfBeans.keySet().containsAll(necessaryObjects);\n \t\t\t}\n \t\t}\n-\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMzkzOQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r481913939", "bodyText": "Missing tests for these new impl methods.", "author": "stavamichal", "createdAt": "2020-09-02T09:02:01Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -785,7 +807,92 @@ public static PerunPolicy getPerunPolicy(String policyName) throws PolicyNotExis\n \t\treturn new ArrayList<>(perunPoliciesContainer.getAllPolicies());\n \t}\n \n+\t/**\n+\t * Get RoleManagementRules for the role name from the PerunPoliciesContainer\n+\t *\n+\t * @param roleName for which will be the rules fetched\n+\t * @return RoleManagementRules for the role name\n+\t * @throws PolicyNotExistsException of there are no rules for the role name\n+\t */\n \tpublic static RoleManagementRules getRoleManagementRules(String roleName) throws RoleManagementRulesNotExistsException {\n \t\treturn perunPoliciesContainer.getRoleManagementRules(roleName);\n \t}\n+\n+\t@Override\n+\tpublic Integer getRoleId(String role) {\n+\t\ttry {\n+\t\t\treturn jdbc.queryForInt(\"SELECT id FROM roles WHERE name=?\", role.toLowerCase());\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setRole(PerunSession sess, Map<String, Integer> mappingOfValues) throws RoleAlreadySetException {\n+\t\tString query = prepareQueryToSetRole(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tjdbc.update(query);\n+\t\t} catch (DataIntegrityViolationException e) {\n+\t\t\tthrow new RoleAlreadySetException(\"The role was already set.\");\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues) throws RoleNotSetException {\n+\t\tString query = prepareQueryToUnsetRole(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tif (0 == jdbc.update(query)) {\n+\t\t\t\tthrow new RoleNotSetException(\"The role already unset.\");\n+\t\t\t}\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}", "originalCommit": "6b23cdeaa7d9471ce7a6b8886dc1c7ec67de0313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0MDAzNg==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500040036", "bodyText": "Added", "author": "balcirakpeter", "createdAt": "2020-10-06T06:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMzkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ea30a53909676a7ad89663f7c2e0b6a3ae5eb78", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\nindex 41df96967..e09c61da0 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\n\n@@ -828,25 +828,25 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t}\n \n \t@Override\n-\tpublic void setRole(PerunSession sess, Map<String, Integer> mappingOfValues) throws RoleAlreadySetException {\n+\tpublic void setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException {\n \t\tString query = prepareQueryToSetRole(mappingOfValues);\n \n \t\ttry {\n \t\t\tjdbc.update(query);\n \t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new RoleAlreadySetException(\"The role was already set.\");\n+\t\t\tthrow new RoleAlreadySetException(\"The role: \"+ role +\" was already set.\", role);\n \t\t} catch (RuntimeException e) {\n \t\t\tthrow new InternalErrorException(e);\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues) throws RoleNotSetException {\n+\tpublic void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException {\n \t\tString query = prepareQueryToUnsetRole(mappingOfValues);\n \n \t\ttry {\n \t\t\tif (0 == jdbc.update(query)) {\n-\t\t\t\tthrow new RoleNotSetException(\"The role already unset.\");\n+\t\t\t\tthrow new RoleNotSetException(\"The role: \"+ role +\" was not set.\", role);\n \t\t\t}\n \t\t} catch (RuntimeException e) {\n \t\t\tthrow new InternalErrorException(e);\n"}}, {"oid": "124fbee275ff0f06a9debaa34c91289668159a45", "url": "https://github.com/CESNET/perun/commit/124fbee275ff0f06a9debaa34c91289668159a45", "message": "Configurable role management\n\n- Added support for configurable role management. All rules aare defined\n  in perun-roles.yml file.", "committedDate": "2020-09-14T12:56:28Z", "type": "forcePushed"}, {"oid": "1ea30a53909676a7ad89663f7c2e0b6a3ae5eb78", "url": "https://github.com/CESNET/perun/commit/1ea30a53909676a7ad89663f7c2e0b6a3ae5eb78", "message": "Configurable role management\n\n- Added support for configurable role management. All rules aare defined\n  in perun-roles.yml file.", "committedDate": "2020-09-15T13:52:59Z", "type": "forcePushed"}, {"oid": "f59246dacafcd7df33c8f4031479a1de873708fc", "url": "https://github.com/CESNET/perun/commit/f59246dacafcd7df33c8f4031479a1de873708fc", "message": "Configurable role management\n\n- Added support for configurable role management. All rules aare defined\n  in perun-roles.yml file.", "committedDate": "2020-09-16T12:07:48Z", "type": "forcePushed"}, {"oid": "456b75f98ccca9818ea5b518bcacb5673551bd47", "url": "https://github.com/CESNET/perun/commit/456b75f98ccca9818ea5b518bcacb5673551bd47", "message": "Configurable role management\n\n- Added support for configurable role management. All rules aare defined\n  in perun-roles.yml file.", "committedDate": "2020-10-06T06:44:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyNDk5MQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500124991", "bodyText": "Why did u remove this authorization?", "author": "Vojtech-Sassmann", "createdAt": "2020-10-06T09:12:48Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java", "diffHunk": "@@ -766,11 +747,6 @@ public void removeAdmin(PerunSession sess, Facility facility, Group group) throw\n \t\tUtils.checkPerunSession(perunSession);\n \t\tgetFacilitiesManagerBl().checkFacilityExists(perunSession, facility);\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.authorizedInternal(perunSession, \"getAdmins_Facility_boolean_policy\", facility)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getAdmins\");\n-\t\t}\n-", "originalCommit": "456b75f98ccca9818ea5b518bcacb5673551bd47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5OTM1Mw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500199353", "bodyText": "Brain lag, I'll fix it.", "author": "balcirakpeter", "createdAt": "2020-10-06T11:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyNDk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0NTEyNQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500245125", "bodyText": "Chill, I got u covered.", "author": "Vojtech-Sassmann", "createdAt": "2020-10-06T12:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyNDk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjY1Mw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r502932653", "bodyText": "FIxed", "author": "balcirakpeter", "createdAt": "2020-10-11T15:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyNDk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a485a9c855c38505d7928bad84252b9ef6de4cdf", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java\nindex 0940a7722..3e4a60eb7 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java\n\n@@ -747,6 +747,11 @@ public class FacilitiesManagerEntry implements FacilitiesManager {\n \t\tUtils.checkPerunSession(perunSession);\n \t\tgetFacilitiesManagerBl().checkFacilityExists(perunSession, facility);\n \n+\t\t// Authorization\n+\t\tif (!AuthzResolver.authorizedInternal(perunSession, \"getAdmins_Facility_boolean_policy\", facility)) {\n+\t\t\tthrow new PrivilegeException(perunSession, \"getAdmins\");\n+\t\t}\n+\n \t\treturn getFacilitiesManagerBl().getAdmins(perunSession, facility, onlyDirectAdmins);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5NTE0Mg==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500795142", "bodyText": "You have API Javadoc for both methods setRole and unsetRole. In the parameters of both methods you are using mappingOfValues but there is no explanation of what should be inside. I know that these methods are used for complex logic defined in BlImpl, but they can be still used separately from other block of code.", "author": "stavamichal", "createdAt": "2020-10-07T07:30:08Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -515,4 +518,33 @@\n \t * Roles are loaded to the database and policies are loaded to the PerunPoliciesContainer.\n \t */\n \tvoid loadAuthorizationComponents();\n+\n+\t/**\n+\t * Fetch the identification of the role from the table roles in the database;\n+\t *\n+\t * @return identification of the role\n+\t */\n+\tInteger getRoleId(String role);\n+\n+\t/**\n+\t * Set a role according the mapping of values\n+\t *\n+\t * @param sess\n+\t * @param mappingOfValues from which will be the query created\n+\t * @param role which will be set (just information for exception)\n+\t * @throws InternalErrorException\n+\t * @throws RoleAlreadySetException\n+\t */\n+\tvoid setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException;\n+\n+\t/**\n+\t * Unset a role according the mapping of values\n+\t *\n+\t * @param sess\n+\t * @param mappingOfValues from which will be the query created\n+\t * @param role which will be unset (just information for exception)\n+\t * @throws InternalErrorException\n+\t * @throws RoleNotSetException\n+\t */\n+\tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;", "originalCommit": "456b75f98ccca9818ea5b518bcacb5673551bd47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTk0NA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r502931944", "bodyText": "JavaDoc extended.", "author": "balcirakpeter", "createdAt": "2020-10-11T15:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5NTE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a485a9c855c38505d7928bad84252b9ef6de4cdf", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\nindex 770f744ec..d7f57a715 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java\n\n@@ -530,7 +530,7 @@ public interface AuthzResolverImplApi {\n \t * Set a role according the mapping of values\n \t *\n \t * @param sess\n-\t * @param mappingOfValues from which will be the query created\n+\t * @param mappingOfValues from which will be the query created (keys are column names and values are their ids)\n \t * @param role which will be set (just information for exception)\n \t * @throws InternalErrorException\n \t * @throws RoleAlreadySetException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMTYwNQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500821605", "bodyText": "Is there any reason to use a complementary object when you are always recasting it to the User object immediately?", "author": "stavamichal", "createdAt": "2020-10-07T08:14:38Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1178,10 +1137,56 @@ public static void unsetRole(PerunSession sess, Group authorizedGroup, String ro\n \t * @param role                role of user in a session ( PERUNADMIN | VOADMIN | GROUPADMIN | SELF | FACILITYADMIN | VOOBSERVER | TOPGROUPCREATOR | RESOURCESELFSERVICE | RESOURCEADMIN )\n \t * @param complementaryObject object for which role will be unset\n \t */\n-\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, String role) throws GroupNotAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, authorizedGroup, role, complementaryObjects);\n+\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, String role) throws GroupNotAdminException, RoleCannotBeManagedException {\n+\t\tif (!objectAndRoleManageableByEntity(authorizedGroup, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject, authorizedGroup);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingOfValues(authorizedGroup, complementaryObject, role);\n+\n+\t\ttry {\n+\t\t\tauthzResolverImpl.unsetRole(sess, mappingOfValues, role);\n+\t\t} catch (RoleNotSetException e) {\n+\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not \"+role+\" in \" + complementaryObject, e);\n+\t\t}\n+\n+\t\tgetPerunBl().getAuditer().log(sess, new RoleUnsetForGroup(complementaryObject, authorizedGroup, role));\n+\n+\t\tif (role.equals(Role.SPONSOR) && complementaryObject.getBeanName().equals(\"Vo\"))\n+\t\t\tgetPerunBl().getVosManagerBl().handleGroupLostVoRole(sess, authorizedGroup, (Vo) complementaryObject, Role.SPONSOR);\n+\n+\t\tif (authorizedGroup != null && sess.getPerunPrincipal() != null && sess.getPerunPrincipal().getUser() != null) {\n+\t\t\tList<Member> groupMembers = perunBl.getGroupsManagerBl().getGroupMembers(sess, authorizedGroup);\n+\t\t\tList<Member> userMembers = perunBl.getMembersManagerBl().getMembersByUser(sess, sess.getPerunPrincipal().getUser());\n+\t\t\tuserMembers.retainAll(groupMembers);\n+\t\t\tif (!userMembers.isEmpty()) AuthzResolverBlImpl.refreshAuthz(sess);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Add owner for a specific user.\n+\t *\n+\t * @param sess Principal's session\n+\t * @param user - owner\n+\t * @param complementaryObject specific user\n+\t * @throws AlreadyAdminException\n+\t */\n+\tpublic static void addSpecificUserOwner(PerunSession sess, User user, PerunBean complementaryObject) throws AlreadyAdminException {", "originalCommit": "456b75f98ccca9818ea5b518bcacb5673551bd47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMTc1Nw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500821757", "bodyText": "Same for removeSpecificUserOwner method.", "author": "stavamichal", "createdAt": "2020-10-07T08:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTk4OA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r502931988", "bodyText": "No, copy-paste mistake probably. Fixed.", "author": "balcirakpeter", "createdAt": "2020-10-11T15:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a485a9c855c38505d7928bad84252b9ef6de4cdf", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex 6b8e1e66c..bb42ccc2c 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -1167,12 +1174,12 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t * Add owner for a specific user.\n \t *\n \t * @param sess Principal's session\n-\t * @param user - owner\n-\t * @param complementaryObject specific user\n+\t * @param owner of the specific user\n+\t * @param specificUser for which will be the owner set\n \t * @throws AlreadyAdminException\n \t */\n-\tpublic static void addSpecificUserOwner(PerunSession sess, User user, PerunBean complementaryObject) throws AlreadyAdminException {\n-\t\tif (user != null && complementaryObject != null) authzResolverImpl.addAdmin(sess, (User) complementaryObject, user);\n+\tpublic static void addSpecificUserOwner(PerunSession sess, User specificUser, User owner) throws AlreadyAdminException {\n+\t\tif (owner != null && specificUser != null) authzResolverImpl.addAdmin(sess, specificUser, owner);\n \t\telse throw new InternalErrorException(\"Specific user and its owner cannot be null while adding specific user owner.\");\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMzk5MA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500823990", "bodyText": "I am a little worried about these two mapping values. You should at least escape them to prevent some sort of SQL injection even if it looks like you should have these variables under control because they are coming from configuration files.", "author": "stavamichal", "createdAt": "2020-10-07T08:18:28Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -785,7 +807,92 @@ public static PerunPolicy getPerunPolicy(String policyName) throws PolicyNotExis\n \t\treturn new ArrayList<>(perunPoliciesContainer.getAllPolicies());\n \t}\n \n+\t/**\n+\t * Get RoleManagementRules for the role name from the PerunPoliciesContainer\n+\t *\n+\t * @param roleName for which will be the rules fetched\n+\t * @return RoleManagementRules for the role name\n+\t * @throws PolicyNotExistsException of there are no rules for the role name\n+\t */\n \tpublic static RoleManagementRules getRoleManagementRules(String roleName) throws RoleManagementRulesNotExistsException {\n \t\treturn perunPoliciesContainer.getRoleManagementRules(roleName);\n \t}\n+\n+\t@Override\n+\tpublic Integer getRoleId(String role) {\n+\t\ttry {\n+\t\t\treturn jdbc.queryForInt(\"SELECT id FROM roles WHERE name=?\", role.toLowerCase());\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException {\n+\t\tString query = prepareQueryToSetRole(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tjdbc.update(query);\n+\t\t} catch (DataIntegrityViolationException e) {\n+\t\t\tthrow new RoleAlreadySetException(role);\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException {\n+\t\tString query = prepareQueryToUnsetRole(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tif (0 == jdbc.update(query)) {\n+\t\t\t\tthrow new RoleNotSetException(role);\n+\t\t\t}\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Create query to set role according to the mapping of values\n+\t *\n+\t * @param mappingOfValues from which will be the query created\n+\t * @return sql query\n+\t */\n+\tprivate String prepareQueryToSetRole(Map<String, Integer> mappingOfValues) {\n+\t\tString columnsFromMapping;\n+\t\tString valuesFromMapping;\n+\t\tList<String> columnNames = new ArrayList<>();\n+\t\tList<String> columnValues = new ArrayList<>();\n+\n+\t\tfor (String columnName: mappingOfValues.keySet()) {\n+\t\t\tcolumnNames.add(columnName);\n+\t\t\tcolumnValues.add(mappingOfValues.get(columnName).toString());\n+\t\t}\n+\n+\t\tcolumnsFromMapping = StringUtils.join(columnNames, \",\");\n+\t\tvaluesFromMapping = StringUtils.join(columnValues, \",\");\n+\n+\t\treturn \"insert into authz (\" + columnsFromMapping + \") values (\" + valuesFromMapping + \")\";", "originalCommit": "456b75f98ccca9818ea5b518bcacb5673551bd47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNDEyNQ==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500824125", "bodyText": "Same for method prepareQueryToUnsetRole.", "author": "stavamichal", "createdAt": "2020-10-07T08:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMzk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNzk0Mw==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500937943", "bodyText": "It is handled in the method createMappingOfValues. There is a pattern that allows using only letters, numbers, and underscores.", "author": "balcirakpeter", "createdAt": "2020-10-07T11:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMzk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUwMjI5Mg==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r501502292", "bodyText": "Yes, but the problem is if anyone will use this method separately. You should move this pattern right into this method.", "author": "stavamichal", "createdAt": "2020-10-08T07:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMzk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjAyNg==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r502932026", "bodyText": "I have moved the check to the Impl layer, where the query is created.", "author": "balcirakpeter", "createdAt": "2020-10-11T15:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMzk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "a485a9c855c38505d7928bad84252b9ef6de4cdf", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\nindex 35ac9527a..50e39a838 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java\n\n@@ -866,6 +867,15 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\tList<String> columnValues = new ArrayList<>();\n \n \t\tfor (String columnName: mappingOfValues.keySet()) {\n+\n+\t\t\tif (columnName == null || mappingOfValues.get(columnName) == null) {\n+\t\t\t\tthrow new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to unset a role.\");\n+\t\t\t}\n+\n+\t\t\tMatcher matcher = columnNamesPattern.matcher(columnName);\n+\t\t\tif (!matcher.matches()) {\n+\t\t\t\tthrow new InternalErrorException(\"Cannot create a query to set a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n+\t\t\t}\n \t\t\tcolumnNames.add(columnName);\n \t\t\tcolumnValues.add(mappingOfValues.get(columnName).toString());\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNzYxNA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r500827614", "bodyText": "Static method should always have javadoc.", "author": "stavamichal", "createdAt": "2020-10-07T08:24:04Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -134,6 +144,28 @@ public static boolean authorized(PerunSession sess, String policyDefinition, Lis\n \t\treturn resolveAuthorization(sess, policyRoles, mapOfBeans);\n \t}\n \n+\tpublic static boolean authorizedToManageRole(PerunSession sess, PerunBean object, String roleName) throws RoleManagementRulesNotExistsException {", "originalCommit": "456b75f98ccca9818ea5b518bcacb5673551bd47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjA0OA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r502932048", "bodyText": "Added", "author": "balcirakpeter", "createdAt": "2020-10-11T15:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNzYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "a485a9c855c38505d7928bad84252b9ef6de4cdf", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\nindex 6b8e1e66c..bb42ccc2c 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java\n\n@@ -144,6 +142,15 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t\treturn resolveAuthorization(sess, policyRoles, mapOfBeans);\n \t}\n \n+\t/**\n+\t * Check wheter the principal is authorized to manage the role on the object.\n+\t *\n+\t * @param sess principal's perun session\n+\t * @param object bounded with the role\n+\t * @param roleName which will be managed\n+\t * @return\n+\t * @throws RoleManagementRulesNotExistsException when the role does not have the management rules.\n+\t */\n \tpublic static boolean authorizedToManageRole(PerunSession sess, PerunBean object, String roleName) throws RoleManagementRulesNotExistsException {\n \t\t// We need to load additional information about the principal\n \t\tif (!sess.getPerunPrincipal().isAuthzInitialized()) {\n"}}, {"oid": "a485a9c855c38505d7928bad84252b9ef6de4cdf", "url": "https://github.com/CESNET/perun/commit/a485a9c855c38505d7928bad84252b9ef6de4cdf", "message": "Configurable role management\n\n- Added support for configurable role management. All rules aare defined\n  in perun-roles.yml file.", "committedDate": "2020-10-11T15:39:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMDI4NA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r503710284", "bodyText": "You are checking column name, but what about column value?", "author": "stavamichal", "createdAt": "2020-10-13T07:00:24Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -785,7 +808,110 @@ public static PerunPolicy getPerunPolicy(String policyName) throws PolicyNotExis\n \t\treturn new ArrayList<>(perunPoliciesContainer.getAllPolicies());\n \t}\n \n+\t/**\n+\t * Get RoleManagementRules for the role name from the PerunPoliciesContainer\n+\t *\n+\t * @param roleName for which will be the rules fetched\n+\t * @return RoleManagementRules for the role name\n+\t * @throws PolicyNotExistsException of there are no rules for the role name\n+\t */\n \tpublic static RoleManagementRules getRoleManagementRules(String roleName) throws RoleManagementRulesNotExistsException {\n \t\treturn perunPoliciesContainer.getRoleManagementRules(roleName);\n \t}\n+\n+\t@Override\n+\tpublic Integer getRoleId(String role) {\n+\t\ttry {\n+\t\t\treturn jdbc.queryForInt(\"SELECT id FROM roles WHERE name=?\", role.toLowerCase());\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException {\n+\t\tString query = prepareQueryToSetRole(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tjdbc.update(query);\n+\t\t} catch (DataIntegrityViolationException e) {\n+\t\t\tthrow new RoleAlreadySetException(role);\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException {\n+\t\tString query = prepareQueryToUnsetRole(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tif (0 == jdbc.update(query)) {\n+\t\t\t\tthrow new RoleNotSetException(role);\n+\t\t\t}\n+\t\t} catch (RuntimeException e) {\n+\t\t\tthrow new InternalErrorException(e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Create query to set role according to the mapping of values\n+\t *\n+\t * @param mappingOfValues from which will be the query created\n+\t * @return sql query\n+\t */\n+\tprivate String prepareQueryToSetRole(Map<String, Integer> mappingOfValues) {\n+\t\tString columnsFromMapping;\n+\t\tString valuesFromMapping;\n+\t\tList<String> columnNames = new ArrayList<>();\n+\t\tList<String> columnValues = new ArrayList<>();\n+\n+\t\tfor (String columnName: mappingOfValues.keySet()) {\n+\n+\t\t\tif (columnName == null || mappingOfValues.get(columnName) == null) {\n+\t\t\t\tthrow new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to unset a role.\");\n+\t\t\t}\n+\n+\t\t\tMatcher matcher = columnNamesPattern.matcher(columnName);\n+\t\t\tif (!matcher.matches()) {\n+\t\t\t\tthrow new InternalErrorException(\"Cannot create a query to set a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n+\t\t\t}\n+\t\t\tcolumnNames.add(columnName);\n+\t\t\tcolumnValues.add(mappingOfValues.get(columnName).toString());\n+\t\t}\n+\n+\t\tcolumnsFromMapping = StringUtils.join(columnNames, \",\");\n+\t\tvaluesFromMapping = StringUtils.join(columnValues, \",\");\n+\n+\t\treturn \"insert into authz (\" + columnsFromMapping + \") values (\" + valuesFromMapping + \")\";", "originalCommit": "a485a9c855c38505d7928bad84252b9ef6de4cdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMjI3OA==", "url": "https://github.com/CESNET/perun/pull/2869#discussion_r503712278", "bodyText": "My bad I see it now, it is an integer. So it is ok.", "author": "stavamichal", "createdAt": "2020-10-13T07:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMDI4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "062b9321cc8aae9c6199b44b658e0ee00961cf6f", "url": "https://github.com/CESNET/perun/commit/062b9321cc8aae9c6199b44b658e0ee00961cf6f", "message": "Configurable role management\n\n- Added support for configurable role management. All rules aare defined\n  in perun-roles.yml file.\n- db changes needed:\n  update pn_regex set regex = 'Role PERUNADMIN was set for.*' where regex = 'User:.*was promoted to PERUNADMIN.*';", "committedDate": "2020-10-13T08:00:18Z", "type": "commit"}, {"oid": "062b9321cc8aae9c6199b44b658e0ee00961cf6f", "url": "https://github.com/CESNET/perun/commit/062b9321cc8aae9c6199b44b658e0ee00961cf6f", "message": "Configurable role management\n\n- Added support for configurable role management. All rules aare defined\n  in perun-roles.yml file.\n- db changes needed:\n  update pn_regex set regex = 'Role PERUNADMIN was set for.*' where regex = 'User:.*was promoted to PERUNADMIN.*';", "committedDate": "2020-10-13T08:00:18Z", "type": "forcePushed"}]}