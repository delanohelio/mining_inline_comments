{"pr_number": 2624, "pr_title": "New authorization in MembersManagerEntry", "pr_createdAt": "2020-03-17T11:12:11Z", "pr_url": "https://github.com/CESNET/perun/pull/2624", "timeline": [{"oid": "3acdaadd960e2c4788caeb7d3d824fca2d8d6bd1", "url": "https://github.com/CESNET/perun/commit/3acdaadd960e2c4788caeb7d3d824fca2d8d6bd1", "message": "New authorization in MembersManagerEntry\n\n- In MembersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the MembersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.\n- removeSponsor is still using method isUserInRoleForVo,\n  because it provides authorization against a user not a session.", "committedDate": "2020-03-17T11:15:36Z", "type": "forcePushed"}, {"oid": "e4096640debc0b392a3c0ecfd110cd0681ff036f", "url": "https://github.com/CESNET/perun/commit/e4096640debc0b392a3c0ecfd110cd0681ff036f", "message": "New authorization in MembersManagerEntry\n\n- In MembersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the MembersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.\n- removeSponsor is still using method isUserInRoleForVo,\n  because it provides authorization against a user not a session.", "committedDate": "2020-03-17T14:12:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MjUxOA==", "url": "https://github.com/CESNET/perun/pull/2624#discussion_r394392518", "bodyText": "I would definitely split this to two situations.\n1] user in session is GroupAdmin of all defined groups\n2] at least one of defined group has this ExtSource set (we don't need to check them all before testing this situation)", "author": "stavamichal", "createdAt": "2020-03-18T14:34:11Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java", "diffHunk": "@@ -344,30 +367,21 @@ public Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String\n \t\t\t}\n \t\t}\n \n-\t\t// Authorization for vo admin and perun admin automatic\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)) {\n+\t\t// Authorization\n+\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", Arrays.asList(vo, extSource))) {\n \t\t\t//also group admin of all affected groups is ok\n \t\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\t\tboolean groupAdminOfAllGroups = true;\n-\t\t\t\tboolean authorizedToExtSource = false;\n-\t\t\t\tfor (Group group : groups) {\n-\t\t\t\t\t//User in session has to be GroupAdmin of all affected groups\n-\t\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\t\t\t\tgroupAdminOfAllGroups = false;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t\t//User in session has to have at least one right to work with the ExtSource\n-\t\t\t\t\tList<ExtSource> groupExtSources = getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group);\n-\t\t\t\t\tif (groupExtSources.contains(extSource)) authorizedToExtSource = true;\n-\t\t\t\t}\n-\n-\t\t\t\tif (!groupAdminOfAllGroups || !authorizedToExtSource) {\n-\t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource -- authorized to extSource=\" + authorizedToExtSource + \" and groupAdmin in all groups=\" + groupAdminOfAllGroups);\n+\t\t\t\tSet<ExtSource> groupExtSources = new HashSet<>();\n+\t\t\t\tgroups.forEach(group -> groupExtSources.addAll(getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group)));\n+\t\t\t\tif (!groupExtSources.contains(extSource) ||\n+\t\t\t\t\t!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", new ArrayList<>(groups))) {\n+\t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");", "originalCommit": "e4096640debc0b392a3c0ecfd110cd0681ff036f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MjY1OQ==", "url": "https://github.com/CESNET/perun/pull/2624#discussion_r459982659", "bodyText": "Done", "author": "balcirakpeter", "createdAt": "2020-07-24T10:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MjUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "86b5868fbb63b3c7fef824b0ffa2e17c512b4644", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java\nindex 26d216010..c31b678cd 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java\n\n@@ -371,10 +373,14 @@ public class MembersManagerEntry implements MembersManager {\n \t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", Arrays.asList(vo, extSource))) {\n \t\t\t//also group admin of all affected groups is ok\n \t\t\tif (groups != null && !groups.isEmpty()) {\n-\t\t\t\tSet<ExtSource> groupExtSources = new HashSet<>();\n-\t\t\t\tgroups.forEach(group -> groupExtSources.addAll(getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group)));\n-\t\t\t\tif (!groupExtSources.contains(extSource) ||\n-\t\t\t\t\t!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", new ArrayList<>(groups))) {\n+\t\t\t\tif (!AuthzResolver.authorizedInternal(sess, \"createMember_Vo_ExtSource_String_List<Group>_policy\", new ArrayList<>(groups))) {\n+\t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n+\t\t\t\t}\n+\t\t\t\t//ExtSource has to be assigned to at least one of the groups\n+\t\t\t\tboolean groupContainsExtSource = groups.stream()\n+\t\t\t\t\t.map(group -> getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group))\n+\t\t\t\t\t.anyMatch(extSources -> extSources.contains(extSource));\n+\t\t\t\tif (!groupContainsExtSource) {\n \t\t\t\t\tthrow new PrivilegeException(sess, \"createMember - from login and extSource\");\n \t\t\t\t}\n \t\t\t} else {\n"}}, {"oid": "86b5868fbb63b3c7fef824b0ffa2e17c512b4644", "url": "https://github.com/CESNET/perun/commit/86b5868fbb63b3c7fef824b0ffa2e17c512b4644", "message": "New authorization in MembersManagerEntry\n\n- In MembersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the MembersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.\n- removeSponsor is still using method isUserInRoleForVo,\n  because it provides authorization against a user not a session.", "committedDate": "2020-07-24T10:48:08Z", "type": "commit"}, {"oid": "86b5868fbb63b3c7fef824b0ffa2e17c512b4644", "url": "https://github.com/CESNET/perun/commit/86b5868fbb63b3c7fef824b0ffa2e17c512b4644", "message": "New authorization in MembersManagerEntry\n\n- In MembersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the MembersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.\n- removeSponsor is still using method isUserInRoleForVo,\n  because it provides authorization against a user not a session.", "committedDate": "2020-07-24T10:48:08Z", "type": "forcePushed"}]}