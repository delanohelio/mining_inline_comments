{"pr_number": 2609, "pr_title": "New authorization in UsersManagerEntry", "pr_createdAt": "2020-03-08T12:26:23Z", "pr_url": "https://github.com/CESNET/perun/pull/2609", "timeline": [{"oid": "7c50c86b95b51c7c7fa9f6f9da566b34be98ea73", "url": "https://github.com/CESNET/perun/commit/7c50c86b95b51c7c7fa9f6f9da566b34be98ea73", "message": "New authorization in UsersManagerEntry\n\n- In UsersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the UsersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.", "committedDate": "2020-03-10T08:10:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MDUzMg==", "url": "https://github.com/CESNET/perun/pull/2609#discussion_r393650532", "bodyText": "What about to use 2 methods authorizedInternal in 1 if clause with different objects? Like:\nif(!AuthzResolver.authorizedInternal(sess, \"removeSpecificUserOwner_User_User_policy\", Collections.singletonList(user)) && !AuthzResolver.authorizedInternal(sess, \"removeSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser))) { .. }", "author": "stavamichal", "createdAt": "2020-03-17T12:43:19Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java", "diffHunk": "@@ -189,8 +169,9 @@ public void removeSpecificUserOwner(PerunSession sess, User user, User specificU\n \t\tif (user.isServiceUser()) throw new NotSpecificUserExpectedException(user);\n \t\tif (user.isSponsoredUser() && specificUser.isSponsoredUser()) throw new NotSpecificUserExpectedException(specificUser);\n \t\tif (!specificUser.isSpecificUser()) throw new SpecificUserExpectedException(specificUser);\n-\t\tif(!AuthzResolver.isAuthorized(sess, Role.SELF, specificUser) &&\n-\t\t\t!AuthzResolver.isAuthorized(sess, Role.SPONSOR, specificUser)) {\n+\n+\t\t// Authorization can take only specificUser, because it would not work correctly with both User objects.\n+\t\tif(!AuthzResolver.authorizedInternal(sess, \"removeSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser))) {", "originalCommit": "7c50c86b95b51c7c7fa9f6f9da566b34be98ea73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg2NDcwNw==", "url": "https://github.com/CESNET/perun/pull/2609#discussion_r397864707", "bodyText": "Done, but the second call has to have its own policy.", "author": "balcirakpeter", "createdAt": "2020-03-25T13:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MDUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3e8e69187432ed73cead7a49fb5593b7331653e3", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\nindex 9ab9147cf..56977bd45 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\n\n@@ -170,8 +170,9 @@ public class UsersManagerEntry implements UsersManager {\n \t\tif (user.isSponsoredUser() && specificUser.isSponsoredUser()) throw new NotSpecificUserExpectedException(specificUser);\n \t\tif (!specificUser.isSpecificUser()) throw new SpecificUserExpectedException(specificUser);\n \n-\t\t// Authorization can take only specificUser, because it would not work correctly with both User objects.\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"removeSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser))) {\n+\t\t// Authorization\n+\t\tif(!AuthzResolver.authorizedInternal(sess, \"removeSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser)) &&\n+\t\t!AuthzResolver.authorizedInternal(sess, \"owner-removeSpecificUserOwner_User_User_policy\", Collections.singletonList(user))) {\n \t\t\tthrow new PrivilegeException(sess, \"removeSpecificUserOwner\");\n \t\t}\n \t\tgetUsersManagerBl().removeSpecificUserOwner(sess, user, specificUser);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MDc5NQ==", "url": "https://github.com/CESNET/perun/pull/2609#discussion_r393650795", "bodyText": "What about to use 2 methods authorizedInternal in 1 if clause with different objects? Like:\nif(!AuthzResolver.authorizedInternal(sess, \"addSpecificUserOwner_User_User_policy\", Collections.singletonList(user)) && !AuthzResolver.authorizedInternal(sess, \"addSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser))) { .. }", "author": "stavamichal", "createdAt": "2020-03-17T12:43:44Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java", "diffHunk": "@@ -204,8 +185,9 @@ public void addSpecificUserOwner(PerunSession sess, User user, User specificUser\n \t\tif (user.isServiceUser()) throw new NotSpecificUserExpectedException(user);\n \t\tif (user.isSponsoredUser() && specificUser.isSponsoredUser()) throw new NotSpecificUserExpectedException(specificUser);\n \t\tif (!specificUser.isSpecificUser()) throw new SpecificUserExpectedException(specificUser);\n-\t\tif(!AuthzResolver.isAuthorized(sess, Role.SELF, specificUser) &&\n-\t\t\t!AuthzResolver.isAuthorized(sess, Role.SPONSOR, specificUser)) {\n+\n+\t\t// Authorization can take only specificUser, because it would not work correctly with both User objects.\n+\t\tif(!AuthzResolver.authorizedInternal(sess, \"addSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser))) {", "originalCommit": "7c50c86b95b51c7c7fa9f6f9da566b34be98ea73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg2NDg3Mg==", "url": "https://github.com/CESNET/perun/pull/2609#discussion_r397864872", "bodyText": "Same as above.", "author": "balcirakpeter", "createdAt": "2020-03-25T13:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MDc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e8e69187432ed73cead7a49fb5593b7331653e3", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\nindex 9ab9147cf..56977bd45 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\n\n@@ -186,8 +187,9 @@ public class UsersManagerEntry implements UsersManager {\n \t\tif (user.isSponsoredUser() && specificUser.isSponsoredUser()) throw new NotSpecificUserExpectedException(specificUser);\n \t\tif (!specificUser.isSpecificUser()) throw new SpecificUserExpectedException(specificUser);\n \n-\t\t// Authorization can take only specificUser, because it would not work correctly with both User objects.\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"addSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser))) {\n+\t\t// Authorization\n+\t\tif(!AuthzResolver.authorizedInternal(sess, \"addSpecificUserOwner_User_User_policy\", Collections.singletonList(specificUser)) &&\n+\t\t\t!AuthzResolver.authorizedInternal(sess, \"owner-addSpecificUserOwner_User_User_policy\", Collections.singletonList(user))) {\n \t\t\tthrow new PrivilegeException(sess, \"addSpecificUserOwner\");\n \t\t}\n \t\tgetUsersManagerBl().addSpecificUserOwner(sess, user, specificUser);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NDg4Ng==", "url": "https://github.com/CESNET/perun/pull/2609#discussion_r393674886", "bodyText": "Same question like above.", "author": "stavamichal", "createdAt": "2020-03-17T13:23:38Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java", "diffHunk": "@@ -382,8 +350,8 @@ public User setSpecificUser(PerunSession sess, User specificUser, SpecificUserTy\n \t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, owner);\n \t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, specificUser);\n \n-\t\t// Authorization\n-\t\tif(!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) {\n+\t\t// Authorization can take only specificUser, because it would not work correctly with both User objects.\n+\t\tif(!AuthzResolver.authorizedInternal(sess, \"setSpecificUser_User_SpecificUserType_User_policy\", Collections.singletonList(specificUser))) {", "originalCommit": "7c50c86b95b51c7c7fa9f6f9da566b34be98ea73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg2NDkyNw==", "url": "https://github.com/CESNET/perun/pull/2609#discussion_r397864927", "bodyText": "Same as above", "author": "balcirakpeter", "createdAt": "2020-03-25T13:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NDg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3e8e69187432ed73cead7a49fb5593b7331653e3", "chunk": "diff --git a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\nindex 9ab9147cf..56977bd45 100644\n--- a/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\n+++ b/perun-core/src/main/java/cz/metacentrum/perun/core/entry/UsersManagerEntry.java\n\n@@ -350,8 +352,9 @@ public class UsersManagerEntry implements UsersManager {\n \t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, owner);\n \t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, specificUser);\n \n-\t\t// Authorization can take only specificUser, because it would not work correctly with both User objects.\n-\t\tif(!AuthzResolver.authorizedInternal(sess, \"setSpecificUser_User_SpecificUserType_User_policy\", Collections.singletonList(specificUser))) {\n+\t\t// Authorization\n+\t\tif(!AuthzResolver.authorizedInternal(sess, \"setSpecificUser_User_SpecificUserType_User_policy\", Collections.singletonList(specificUser)) &&\n+\t\t\t!AuthzResolver.authorizedInternal(sess, \"owner-setSpecificUser_User_SpecificUserType_User_policy\", Collections.singletonList(owner))) {\n \t\t\tthrow new PrivilegeException(sess, \"Only PerunAdmin should have rights to call this method.\");\n \t\t}\n \n"}}, {"oid": "3e8e69187432ed73cead7a49fb5593b7331653e3", "url": "https://github.com/CESNET/perun/commit/3e8e69187432ed73cead7a49fb5593b7331653e3", "message": "New authorization in UsersManagerEntry\n\n- In UsersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the UsersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.", "committedDate": "2020-03-25T13:43:38Z", "type": "forcePushed"}, {"oid": "f0c5c26a5fe3996282154306fa2f1ec162a614a4", "url": "https://github.com/CESNET/perun/commit/f0c5c26a5fe3996282154306fa2f1ec162a614a4", "message": "New authorization in UsersManagerEntry\n\n- In UsersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the UsersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.", "committedDate": "2020-07-09T11:52:58Z", "type": "commit"}, {"oid": "f0c5c26a5fe3996282154306fa2f1ec162a614a4", "url": "https://github.com/CESNET/perun/commit/f0c5c26a5fe3996282154306fa2f1ec162a614a4", "message": "New authorization in UsersManagerEntry\n\n- In UsersManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the UsersManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.", "committedDate": "2020-07-09T11:52:58Z", "type": "forcePushed"}]}