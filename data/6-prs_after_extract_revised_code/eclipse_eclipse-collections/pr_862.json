{"pr_number": 862, "pr_title": "Implement with(), without(), withAll(), withoutAll() as default methods", "pr_createdAt": "2020-04-13T21:09:40Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/862", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r407740831", "bodyText": "Why do these call super?", "author": "motlin", "createdAt": "2020-04-13T21:47:31Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/MutableBag.java", "diffHunk": "@@ -84,16 +84,32 @@\n     }\n \n     @Override\n-    MutableBag<T> with(T element);\n+    default MutableBag<T> with(T element)\n+    {\n+        MutableBagIterable.super.with(element);\n+        return this;\n+    }\n \n     @Override\n-    MutableBag<T> without(T element);\n+    default MutableBag<T> without(T element)\n+    {\n+        MutableBagIterable.super.without(element);\n+        return this;\n+    }\n \n     @Override\n-    MutableBag<T> withAll(Iterable<? extends T> elements);\n+    default MutableBag<T> withAll(Iterable<? extends T> elements)\n+    {\n+        MutableBagIterable.super.withAll(elements);\n+        return this;\n+    }\n \n     @Override\n-    MutableBag<T> withoutAll(Iterable<? extends T> elements);\n+    default MutableBag<T> withoutAll(Iterable<? extends T> elements)\n+    {\n+        MutableBagIterable.super.withoutAll(elements);\n+        return this;\n+    }", "originalCommit": "02a780353b0dad34cfea3a33d62c5a0b2a69fa1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1MjQ1Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r407752452", "bodyText": "I tried to follow the same pattern suggested by Donald here\n#822 (comment)", "author": "aboullaite", "createdAt": "2020-04-13T22:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MjYyMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r407782620", "bodyText": "With these you can call super and return this\n\nThis was your suggestion in the linked comment @aboullaite pointed to above @motlin", "author": "donraab", "createdAt": "2020-04-13T23:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDMwMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r407820300", "bodyText": "@motlin @nikhilnanivadekar please share your opinions on this question.  I presented two options, and a third was proposed which I agreed with and posted what the resulting solution would look like here:\n#822 (comment)", "author": "donraab", "createdAt": "2020-04-14T01:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExNzU5MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r408117590", "bodyText": "I find that every method which returns this delegates to another method and then returns this. They're pretty much always two lines. We can basically specify the implementation in Javadoc and have a consistent implementation everywhere. That's why I slightly prefer the implementation without super.\nI realize this doesn't matter much and both implementations are fine. It's a slight preference. I'll go with whatever you'd like here.", "author": "motlin", "createdAt": "2020-04-14T13:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2MzA2MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r408563060", "bodyText": "This is what the implementation will look like in MutableCollection:\ndefault MutableCollection<T> with(T element)\n{\n    this.add(element);\n    return this;\n}\n\nDuplicating the implementation looks like this:\n@Override\ndefault MutableList<T> with(T element)\n{\n    this.add(element);\n    return this;\n}\n\nOr calling the super default implementation:\n@Override\ndefault MutableList<T> with(T element)\n{\n    MutableCollection.super.with(element);\n    return this;\n}\n\nThe question I have is what is the benefit of pulling up the implementation to MutableCollection if we are not going to use the pulled up implementation? This could create an uncovered or difficult to cover code path. We could leave it abstract in MutableCollection and enforce it being overridden at leaf interfaces. Thoughts?", "author": "donraab", "createdAt": "2020-04-15T03:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2NjAzNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r408566035", "bodyText": "Good point. When I do work like this, I really do pull the methods up, using the IntelliJ refactoring. These methods aren't implemented in AbstractMutableCollection. If they were, I'd move them with the confidence that they are already covered. +1 these should be abstract on MutableCollection.", "author": "motlin", "createdAt": "2020-04-15T03:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNDQ5OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r409014498", "bodyText": "So If I'm not mistaken, this would look something like this in MutableCollection\n    abstract MutableCollection<T> withAll(Iterable<? extends T> elements);\n\nand in other classes\n    @Override\n    default MutableBagIterable<T> with(T element)\n    {\n        this.with(element);\n        return this;\n    }", "author": "aboullaite", "createdAt": "2020-04-15T17:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxOTMxMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r409019313", "bodyText": "@aboullaite Correct, minus the abstract as MutableCollection is an interface.", "author": "donraab", "createdAt": "2020-04-15T17:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "da7be0616bcb92e3c1393b0e318157f2cdf3038c", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/MutableBag.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/MutableBag.java\nindex 5cd3eebb..a43704e6 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/MutableBag.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/MutableBag.java\n\n@@ -86,28 +86,28 @@ public interface MutableBag<T>\n     @Override\n     default MutableBag<T> with(T element)\n     {\n-        MutableBagIterable.super.with(element);\n+        this.add(element);\n         return this;\n     }\n \n     @Override\n     default MutableBag<T> without(T element)\n     {\n-        MutableBagIterable.super.without(element);\n+        this.remove(element);\n         return this;\n     }\n \n     @Override\n     default MutableBag<T> withAll(Iterable<? extends T> elements)\n     {\n-        MutableBagIterable.super.withAll(elements);\n+        this.addAllIterable(elements);\n         return this;\n     }\n \n     @Override\n     default MutableBag<T> withoutAll(Iterable<? extends T> elements)\n     {\n-        MutableBagIterable.super.withoutAll(elements);\n+        this.removeAllIterable(elements);\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MTAxMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r407741013", "bodyText": "And these don't call super? I prefer these if I had to pick one, for consistency.", "author": "motlin", "createdAt": "2020-04-13T21:47:57Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java", "diffHunk": "@@ -138,7 +150,11 @@\n      *\n      * @see #removeAll(Collection)\n      */\n-    MutableCollection<T> withoutAll(Iterable<? extends T> elements);\n+    default MutableCollection<T> withoutAll(Iterable<? extends T> elements)\n+    {\n+        this.removeAllIterable(elements);\n+        return this;\n+    }", "originalCommit": "02a780353b0dad34cfea3a33d62c5a0b2a69fa1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da7be0616bcb92e3c1393b0e318157f2cdf3038c", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java\nindex fb00b23d..a0ed519e 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java\n\n@@ -150,11 +138,7 @@ public interface MutableCollection<T>\n      *\n      * @see #removeAll(Collection)\n      */\n-    default MutableCollection<T> withoutAll(Iterable<? extends T> elements)\n-    {\n-        this.removeAllIterable(elements);\n-        return this;\n-    }\n+    MutableCollection<T> withoutAll(Iterable<? extends T> elements);\n \n     /**\n      * Creates a new empty mutable version of the same collection type. For example, if this instance is a FastList,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MTY0NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r407741645", "bodyText": "Unfortunately, this is a breaking change. It's a good idea, it just has to wait for the next major version.", "author": "motlin", "createdAt": "2020-04-13T21:49:21Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/mutable/ArrayListAdapter.java", "diffHunk": "@@ -238,13 +238,6 @@ public void sort(Comparator<? super T> comparator)\n         return (ArrayListAdapter<T>) super.sortThis();\n     }\n \n-    @Override\n-    public ArrayListAdapter<T> with(T element)", "originalCommit": "02a780353b0dad34cfea3a33d62c5a0b2a69fa1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3ODk2MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r407778961", "bodyText": "This needs to be reverted for minor version.", "author": "nikhilnanivadekar", "createdAt": "2020-04-13T23:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MTY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "da7be0616bcb92e3c1393b0e318157f2cdf3038c", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/list/mutable/ArrayListAdapter.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/list/mutable/ArrayListAdapter.java\nindex 8e6d79e9..d4ee6346 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/list/mutable/ArrayListAdapter.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/list/mutable/ArrayListAdapter.java\n\n@@ -238,6 +238,13 @@ public final class ArrayListAdapter<T>\n         return (ArrayListAdapter<T>) super.sortThis();\n     }\n \n+    @Override\n+    public ArrayListAdapter<T> with(T element)\n+    {\n+        this.add(element);\n+        return this;\n+    }\n+\n     public ArrayListAdapter<T> with(T element1, T element2)\n     {\n         this.add(element1);\n"}}, {"oid": "da7be0616bcb92e3c1393b0e318157f2cdf3038c", "url": "https://github.com/eclipse/eclipse-collections/commit/da7be0616bcb92e3c1393b0e318157f2cdf3038c", "message": "Implement with(), without(), withAll(), withoutAll() as default methods", "committedDate": "2020-04-15T20:02:04Z", "type": "forcePushed"}, {"oid": "d377550ac4dd0bbea0d5a74f0aa62a49107d4935", "url": "https://github.com/eclipse/eclipse-collections/commit/d377550ac4dd0bbea0d5a74f0aa62a49107d4935", "message": "Implement with(), without(), withAll(), withoutAll() as default methods\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-04-15T20:05:13Z", "type": "forcePushed"}, {"oid": "f874b9c730d7aaf60863021768cef08bce791c79", "url": "https://github.com/eclipse/eclipse-collections/commit/f874b9c730d7aaf60863021768cef08bce791c79", "message": "Implement with(), without(), withAll(), withoutAll() as default methods\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-05-03T12:01:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODMxNw==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419138317", "bodyText": "@aboullaite I'd like to understand why was this javadoc removed. This indicates the behavior for a FixedSizedCollection is different than other MutableCollection instances. This is an awkward behavior here to be sure, but this is the unfortunate nature of something that is fixed in size.\nI assume maybe these needed to be removed because they are now implemented as default methods and cannot be overridden with abstract. If that is the case, then can these be overridden with new default methods instead? I'll look at the current implementations and see if I can propose something.", "author": "donraab", "createdAt": "2020-05-03T18:05:25Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/FixedSizeCollection.java", "diffHunk": "@@ -23,79 +23,6 @@\n public interface FixedSizeCollection<T>\n         extends MutableCollection<T>\n {\n-    /**", "originalCommit": "f874b9c730d7aaf60863021768cef08bce791c79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzOTU3Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419139576", "bodyText": "@aboullaite Now that I have taken a look, please push this JavaDoc down to the implementation classes so it is not lost. The behavior is definitely different out of necessity. I will try and clean this up a bit after we merge your PR.", "author": "donraab", "createdAt": "2020-05-03T18:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MTg1Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419141852", "bodyText": "I disagree that the Javadoc should be pushed down. It's on an interface where it probably belongs, and the fact that it's abstract is good. Subclasses must have an interesting implementation. I'd suggest just revert the change to FixedSized* interfaces.\nGood catch @donraab", "author": "motlin", "createdAt": "2020-05-03T18:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0OTQwMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419149403", "bodyText": "The only issue with this is that the implementations can't be left abstract because they are already defined as default methods in a parent interface. I'm fairly certain this won't compile. They could be overridden as default methods here to throw UnsupportedOperationException.", "author": "donraab", "createdAt": "2020-05-03T19:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4NTgzMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419185833", "bodyText": "Are we talking about in the interface (FixedSizeCollection) or in the concrete classes that implement it? It's ok to override a default interface method with an abstract interface method. And before we started FixedSizeCollection's methods were abstract, so I know the concrete classes implement these methods. I'm not understanding the problem here.", "author": "motlin", "createdAt": "2020-05-04T01:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4ODIxNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419188215", "bodyText": "In the interface.\n\nIt's ok to override a default interface method with an abstract interface method.\n\nMy bad. I thought I remembered having an issue here overriding a default method with an abstract method in an interface. Just did some googling and this seems to be ok. If this isn't required then the FixedSizeCollection changes can just be reverted.", "author": "donraab", "createdAt": "2020-05-04T01:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2OTIzNg==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420069236", "bodyText": "@donraab @motlin The compiler complains about having an abstract and a default method with matching signatures. The problem happens in FixedSizeSet and FixedSizeList since both MutableSet and FixedSizeCollection define  methods with(), without() ... and one is default and the other is abstract, the compiler requires the subinterface to explicitly declare which one it should inherit by overriding the methods again.\nShould I override the methods in sub-interfaces (FixedSizeSet, FixedSizeList) , or remove the the abstract methods from FixedSizeCollection and push down javadoc documentation to implementation classes?", "author": "aboullaite", "createdAt": "2020-05-05T12:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "c87f3d81cd0fd5817b67b2ddf0cf9b7877586235", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/FixedSizeCollection.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/FixedSizeCollection.java\nindex 51857271..99386a3f 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/FixedSizeCollection.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/FixedSizeCollection.java\n\n@@ -23,6 +23,79 @@ import org.eclipse.collections.api.block.procedure.Procedure;\n public interface FixedSizeCollection<T>\n         extends MutableCollection<T>\n {\n+    /**\n+     * This method allows fixed size collections the ability to add elements to their existing elements. A new instance\n+     * of {@link MutableCollection} is returned containing the elements of the original collection with the new element\n+     * {@link #add(Object) added}. Implementations will return a new FixedSizeCollection where possible. In order to\n+     * use this method properly with mutable and fixed size collections the following approach must be taken:\n+     *\n+     * <pre>\n+     * MutableCollection&lt;String&gt; list;\n+     * list = list.with(\"1\");\n+     * list = list.with(\"2\");\n+     * return list;\n+     * </pre>\n+     *\n+     * @see #add(Object)\n+     */\n+    @Override\n+    MutableCollection<T> with(T element);\n+\n+    /**\n+     * This method allows fixed size collections the ability to remove elements from their existing elements. A new\n+     * instance of {@link MutableCollection} is returned containing the elements of the original collection with the\n+     * element {@link #remove(Object) removed}. Implementations will return a new FixedSizeCollection where possible.\n+     * In order to use this method properly with mutable and fixed size collections the following approach must be\n+     * taken:\n+     *\n+     * <pre>\n+     * MutableCollection&lt;String&gt; list;\n+     * list = list.without(\"1\");\n+     * list = list.without(\"2\");\n+     * return list;\n+     * </pre>\n+     *\n+     * @see #remove(Object)\n+     */\n+    @Override\n+    MutableCollection<T> without(T element);\n+\n+    /**\n+     * This method allows fixed size collections the ability to add multiple elements to their existing elements. A new\n+     * instance of {@link MutableCollection} is returned containing the elements of the original collection with all of\n+     * the new elements {@link #addAll(Collection) added}. Implementations will return a new FixedSizeCollection where\n+     * possible. In order to use this method properly with mutable and fixed size collections the following approach\n+     * must be taken:\n+     *\n+     * <pre>\n+     * MutableCollection&lt;String&gt; list;\n+     * list = list.withAll(FastList.newListWith(\"1\", \"2\"));\n+     * return list;\n+     * </pre>\n+     *\n+     * @see #addAll(Collection)\n+     */\n+    @Override\n+    MutableCollection<T> withAll(Iterable<? extends T> elements);\n+\n+    /**\n+     * This method allows fixed size collections the ability to remove multiple elements from their existing elements.\n+     * A new instance of {@link MutableCollection} is returned containing the elements of the original collection with\n+     * the given elements {@link #removeAll(Collection) removed}. Implementations will return a new FixedSizeCollection\n+     * where possible. In order to use this method properly with mutable and fixed size collections the following\n+     * approach must be taken:\n+     *\n+     * <pre>\n+     * MutableCollection&lt;String&gt; list;\n+     * list = list.withoutAll(FastList.newListWith(\"1\", \"2\"));\n+     * return list;\n+     * </pre>\n+     *\n+     * @see #removeAll(Collection)\n+     */\n+    @Override\n+    MutableCollection<T> withoutAll(Iterable<? extends T> elements);\n+\n     /**\n      * @throws UnsupportedOperationException the {@code add} operation is not supported by this collection.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODg4OQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419138889", "bodyText": "I think these should be default methods in MultiReaderBag.", "author": "donraab", "createdAt": "2020-05-03T18:10:20Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/mutable/MultiReaderHashBag.java", "diffHunk": "@@ -481,34 +481,6 @@ public MutableShortBag collectShort(ShortFunction<? super T> shortFunction)\n         }\n     }\n \n-    @Override", "originalCommit": "f874b9c730d7aaf60863021768cef08bce791c79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MjE3Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419142172", "bodyText": "@donraab why? To change the return type to MultiReaderBag? If so, that would be a good change, but one that has to happen in a major version. I think the minor version change looks good as-is, pulling these up to the MutableBag interface.", "author": "motlin", "createdAt": "2020-05-03T18:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4NzU0Nw==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419187547", "bodyText": "Fair enough. I like the idea of returning MultiReaderBag though so access to the multi-reader specific API is retained.", "author": "donraab", "createdAt": "2020-05-04T01:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MjUxNg==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419192516", "bodyText": "I started this change just now in #879\nOnce this PR lands, I can add the new methods too.", "author": "motlin", "createdAt": "2020-05-04T02:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODg4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODk0NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419138944", "bodyText": "I think these should be default methods in MultiReaderList.", "author": "donraab", "createdAt": "2020-05-03T18:10:49Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/list/mutable/MultiReaderFastList.java", "diffHunk": "@@ -624,34 +624,6 @@ public int lastIndexOf(Object o)\n         }\n     }\n \n-    @Override", "originalCommit": "f874b9c730d7aaf60863021768cef08bce791c79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MjIxMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419142212", "bodyText": "Same comment. Presumably MultiReaderSet too?", "author": "motlin", "createdAt": "2020-05-03T18:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4NzQyNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r419187424", "bodyText": "Yes", "author": "donraab", "createdAt": "2020-05-04T01:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzODk0NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c87f3d81cd0fd5817b67b2ddf0cf9b7877586235", "url": "https://github.com/eclipse/eclipse-collections/commit/c87f3d81cd0fd5817b67b2ddf0cf9b7877586235", "message": "Close #822: Implement with(), without(), withAll(), withoutAll() as default methods\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-05-05T16:12:17Z", "type": "forcePushed"}, {"oid": "451b8454aca7b8df37b1ec2c4d6bb31285e652b4", "url": "https://github.com/eclipse/eclipse-collections/commit/451b8454aca7b8df37b1ec2c4d6bb31285e652b4", "message": "Close #822: Implement with(), without(), withAll(), withoutAll() as default methods\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-05-05T16:18:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwODk5MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420308990", "bodyText": "I'm wondering, can without and withoutAll return FixedSize*?", "author": "motlin", "createdAt": "2020-05-05T18:11:20Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/set/FixedSizeSet.java", "diffHunk": "@@ -19,6 +19,18 @@\n public interface FixedSizeSet<T>\n         extends MutableSet<T>, FixedSizeCollection<T>\n {\n+    @Override\n+    MutableSet<T> with(T element);\n+\n+    @Override\n+    MutableSet<T> without(T element);\n+\n+    @Override\n+    MutableSet<T> withAll(Iterable<? extends T> elements);\n+\n+    @Override\n+    MutableSet<T> withoutAll(Iterable<? extends T> elements);", "originalCommit": "451b8454aca7b8df37b1ec2c4d6bb31285e652b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjEzMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420336130", "bodyText": "Nope, same as the others. for example AbstractMemoryEfficientMutableList that implements FixedSizeList return MutableList\n    @Override\n    public MutableList<T> withoutAll(Iterable<? extends T> elements)\n    {\n        if (Iterate.isEmpty(elements))\n        {\n            return this;\n        }\n        return Lists.fixedSize.ofAll(this.toList().withoutAll(elements));\n    }", "author": "aboullaite", "createdAt": "2020-05-05T18:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwODk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1MzQ0Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420453443", "bodyText": "???\nThis compiles fine for me...\n@Override\npublic FixedSizeList<T> withoutAll(Iterable<? extends T> elements)\n{\n    if (Iterate.isEmpty(elements))\n    {\n        return this;\n    }\n    return Lists.fixedSize.ofAll(this.toList().withoutAll(elements));\n}", "author": "motlin", "createdAt": "2020-05-05T22:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwODk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1MzYwMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420453601", "bodyText": "Anyway, this change can't be made in a minor version, so I think we're ready to land this change as-is.", "author": "motlin", "createdAt": "2020-05-05T22:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwODk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2ODA3NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420468074", "bodyText": "Yes, in that cyaee, the same changes needs to be made in every class that implements FixedSize*! Is this something of interest? I can introduce all the discussions captured here in another PR", "author": "aboullaite", "createdAt": "2020-05-05T23:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwODk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MTU2MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420471560", "bodyText": "@aboullaite Don't make those changes yet.  Leave them as is for now.  We can fix this during a major release.", "author": "donraab", "createdAt": "2020-05-05T23:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwODk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MTg2OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/862#discussion_r420471868", "bodyText": "@aboullaite Yes you can do this in a separate PR, but it will have to wait for a major release.", "author": "donraab", "createdAt": "2020-05-05T23:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwODk5MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1adf6f485475969aeceb8cc4815f404f7831f646", "url": "https://github.com/eclipse/eclipse-collections/commit/1adf6f485475969aeceb8cc4815f404f7831f646", "message": "Close #822: Implement with(), without(), withAll(), withoutAll() as default methods\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-05-12T13:14:15Z", "type": "commit"}, {"oid": "1adf6f485475969aeceb8cc4815f404f7831f646", "url": "https://github.com/eclipse/eclipse-collections/commit/1adf6f485475969aeceb8cc4815f404f7831f646", "message": "Close #822: Implement with(), without(), withAll(), withoutAll() as default methods\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-05-12T13:14:15Z", "type": "forcePushed"}]}