{"pr_number": 1028, "pr_title": "Add new methods withMapIterable to Mutable Maps and newWithMap, newWithMapIterable to Immutable Maps. Closes #875", "pr_createdAt": "2020-11-03T04:57:02Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/1028", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwMzUyOQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516703529", "bodyText": "This is a breaking change albeit a correct change. But I would want it to be a part of a separate commit to show it on the Release notes.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:24:24Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/FixedSizeMap.java", "diffHunk": "@@ -70,7 +70,12 @@\n     @Override\n     default FixedSizeMap<K, V> withMap(Map<? extends K, ? extends V> map)\n     {\n-        this.putAll(map);\n-        return this;", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxNTQxMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r519815410", "bodyText": "I would expect a test case also to be fixed or updated, what did I miss? If there are no test cases failing due to this change, we need to add a test \ud83d\ude04", "author": "nikhilnanivadekar", "createdAt": "2020-11-09T13:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwMzUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc9b52470c65dfaf7f67c245e8dbd311999038c2", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/FixedSizeMap.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/FixedSizeMap.java\nindex c68453d1..682b604f 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/FixedSizeMap.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/FixedSizeMap.java\n\n@@ -72,10 +72,4 @@ public interface FixedSizeMap<K, V>\n     {\n         throw new UnsupportedOperationException(\"Cannot call withMap() on \" + this.getClass().getSimpleName());\n     }\n-\n-    @Override\n-    default FixedSizeMap<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n-    {\n-        throw new UnsupportedOperationException(\"Cannot call withMapIterable() on \" + this.getClass().getSimpleName());\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNDA1OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516704058", "bodyText": "please revert. This is an unrelated change.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:25:02Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java", "diffHunk": "@@ -145,7 +153,9 @@\n      * @since 9.2\n      */\n     @Override\n-    default <P, R> ImmutableBag<R> flatCollectWith(Function2<? super V, ? super P, ? extends Iterable<R>> function, P parameter)\n+    default <P, R> ImmutableBag<R> flatCollectWith(", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java\nindex ff6a1894..a0c8747a 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java\n\n@@ -153,9 +153,7 @@ public interface ImmutableMap<K, V>\n      * @since 9.2\n      */\n     @Override\n-    default <P, R> ImmutableBag<R> flatCollectWith(\n-            Function2<? super V, ? super P, ? extends Iterable<R>> function,\n-            P parameter)\n+    default <P, R> ImmutableBag<R> flatCollectWith(Function2<? super V, ? super P, ? extends Iterable<R>> function, P parameter)\n     {\n         return this.flatCollect(each -> function.apply(each, parameter));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNDE3MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516704170", "bodyText": "please revert. This is an unrelated change.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:25:10Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java", "diffHunk": "@@ -216,7 +226,11 @@\n     {\n         MutableMap<K1, V2> map = Maps.mutable.empty();\n         this.forEachKeyValue((key, value) -> {\n-            map.updateValueWith(keyFunction.valueOf(key), zeroValueFactory, nonMutatingAggregator, valueFunction.valueOf(value));", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java\nindex ff6a1894..a0c8747a 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableMap.java\n\n@@ -226,11 +224,7 @@ public interface ImmutableMap<K, V>\n     {\n         MutableMap<K1, V2> map = Maps.mutable.empty();\n         this.forEachKeyValue((key, value) -> {\n-            map.updateValueWith(\n-                    keyFunction.valueOf(key),\n-                    zeroValueFactory,\n-                    nonMutatingAggregator,\n-                    valueFunction.valueOf(value));\n+            map.updateValueWith(keyFunction.valueOf(key), zeroValueFactory, nonMutatingAggregator, valueFunction.valueOf(value));\n         });\n         return map.toImmutable();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNDkxNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516704915", "bodyText": "please revert. This is an unrelated change.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:26:08Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java", "diffHunk": "@@ -35,7 +36,8 @@\n import org.eclipse.collections.impl.set.mutable.SynchronizedMutableSet;\n import org.eclipse.collections.impl.utility.LazyIterate;\n \n-public class SynchronizedBiMap<K, V> extends AbstractSynchronizedMapIterable<K, V> implements MutableBiMap<K, V>, Serializable\n+public class SynchronizedBiMap<K, V> extends AbstractSynchronizedMapIterable<K, V>\n+        implements MutableBiMap<K, V>, Serializable", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\nindex e05db90e..f54e5b91 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\n\n@@ -36,8 +36,7 @@ import org.eclipse.collections.impl.map.mutable.SynchronizedBiMapSerializationPr\n import org.eclipse.collections.impl.set.mutable.SynchronizedMutableSet;\n import org.eclipse.collections.impl.utility.LazyIterate;\n \n-public class SynchronizedBiMap<K, V> extends AbstractSynchronizedMapIterable<K, V>\n-        implements MutableBiMap<K, V>, Serializable\n+public class SynchronizedBiMap<K, V> extends AbstractSynchronizedMapIterable<K, V> implements MutableBiMap<K, V>, Serializable\n {\n     private static final long serialVersionUID = 1L;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNDk4NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516704984", "bodyText": "please revert. This is an unrelated change.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:26:14Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java", "diffHunk": "@@ -85,7 +87,8 @@ public V forcePut(K key, V value)\n     @Override\n     public MutableBiMap<K, V> asUnmodifiable()\n     {\n-        throw new UnsupportedOperationException(this.getClass().getSimpleName() + \".asUnmodifiable() not implemented yet\");\n+        throw new UnsupportedOperationException(this.getClass().getSimpleName()", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\nindex e05db90e..f54e5b91 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\n\n@@ -87,8 +86,7 @@ public class SynchronizedBiMap<K, V> extends AbstractSynchronizedMapIterable<K,\n     @Override\n     public MutableBiMap<K, V> asUnmodifiable()\n     {\n-        throw new UnsupportedOperationException(this.getClass().getSimpleName()\n-                + \".asUnmodifiable() not implemented yet\");\n+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + \".asUnmodifiable() not implemented yet\");\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNTk1NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516705954", "bodyText": "Effective Java principles state that interface should be on the left hand side. Also, this should ideally be replaced by Maps.mutable.with().", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:27:29Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java", "diffHunk": "@@ -171,6 +172,22 @@ public void clear()\n         return map.toImmutable();\n     }\n \n+    @Override\n+    public ImmutableMap<K, V> newWithMap(Map<? extends K, ? extends V> map)\n+    {\n+        UnifiedMap<K, V> unifiedMap = UnifiedMap.newMap(this);", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54d86857043b0de7becb5cfe5e7809a92367c482", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java\nindex 1540bd02..4bd0f7fd 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java\n\n@@ -175,17 +175,17 @@ public abstract class AbstractImmutableMap<K, V>\n     @Override\n     public ImmutableMap<K, V> newWithMap(Map<? extends K, ? extends V> map)\n     {\n-        UnifiedMap<K, V> unifiedMap = UnifiedMap.newMap(this);\n-        unifiedMap.putAll(map);\n-        return unifiedMap.toImmutable();\n+        MutableMap<K, V> mutableMap = Maps.mutable.ofMapIterable(this);\n+        mutableMap.putAll(map);\n+        return mutableMap.toImmutable();\n     }\n \n     @Override\n     public ImmutableMap<K, V> newWithMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n     {\n-        UnifiedMap<K, V> unifiedMap = UnifiedMap.newMap(this);\n-        mapIterable.forEachKeyValue(unifiedMap::put);\n-        return unifiedMap.toImmutable();\n+        MutableMap<K, V> mutableMap = Maps.mutable.ofMapIterable(this);\n+        mapIterable.forEachKeyValue(mutableMap::put);\n+        return mutableMap.toImmutable();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzI3MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516707271", "bodyText": "same comment as above", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:29:13Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java", "diffHunk": "@@ -171,6 +172,22 @@ public void clear()\n         return map.toImmutable();\n     }\n \n+    @Override\n+    public ImmutableMap<K, V> newWithMap(Map<? extends K, ? extends V> map)\n+    {\n+        UnifiedMap<K, V> unifiedMap = UnifiedMap.newMap(this);\n+        unifiedMap.putAll(map);\n+        return unifiedMap.toImmutable();\n+    }\n+\n+    @Override\n+    public ImmutableMap<K, V> newWithMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n+    {\n+        UnifiedMap<K, V> unifiedMap = UnifiedMap.newMap(this);", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54d86857043b0de7becb5cfe5e7809a92367c482", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java\nindex 1540bd02..4bd0f7fd 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/immutable/AbstractImmutableMap.java\n\n@@ -175,17 +175,17 @@ public abstract class AbstractImmutableMap<K, V>\n     @Override\n     public ImmutableMap<K, V> newWithMap(Map<? extends K, ? extends V> map)\n     {\n-        UnifiedMap<K, V> unifiedMap = UnifiedMap.newMap(this);\n-        unifiedMap.putAll(map);\n-        return unifiedMap.toImmutable();\n+        MutableMap<K, V> mutableMap = Maps.mutable.ofMapIterable(this);\n+        mutableMap.putAll(map);\n+        return mutableMap.toImmutable();\n     }\n \n     @Override\n     public ImmutableMap<K, V> newWithMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n     {\n-        UnifiedMap<K, V> unifiedMap = UnifiedMap.newMap(this);\n-        mapIterable.forEachKeyValue(unifiedMap::put);\n-        return unifiedMap.toImmutable();\n+        MutableMap<K, V> mutableMap = Maps.mutable.ofMapIterable(this);\n+        mapIterable.forEachKeyValue(mutableMap::put);\n+        return mutableMap.toImmutable();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzg3OQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516707879", "bodyText": "please revert. This is an unrelated change.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:29:58Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -73,7 +80,15 @@\n     }\n \n     @Override\n-    protected <K, V> MutableBiMap<K, V> newMapWithKeysValues(K key1, V value1, K key2, V value2, K key3, V value3, K key4, V value4)\n+    protected <K, V> MutableBiMap<K, V> newMapWithKeysValues(", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\nindex b60ff460..51a47374 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n\n@@ -80,15 +80,7 @@ public class UnmodifiableBiMapTest extends AbstractMutableBiMapTestCase\n     }\n \n     @Override\n-    protected <K, V> MutableBiMap<K, V> newMapWithKeysValues(\n-            K key1,\n-            V value1,\n-            K key2,\n-            V value2,\n-            K key3,\n-            V value3,\n-            K key4,\n-            V value4)\n+    protected <K, V> MutableBiMap<K, V> newMapWithKeysValues(K key1, V value1, K key2, V value2, K key3, V value3, K key4, V value4)\n     {\n         return HashBiMap.newWithKeysValues(key1, value1, key2, value2, key3, value3, key4, value4).asUnmodifiable();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODA0Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516708046", "bodyText": "please revert. This is an unrelated change.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:30:11Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -165,28 +180,36 @@ public void withKeyValue()\n     @Test\n     public void withMap()\n     {\n-        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\nindex b60ff460..51a47374 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n\n@@ -180,36 +172,28 @@ public class UnmodifiableBiMapTest extends AbstractMutableBiMapTestCase\n     @Test\n     public void withMap()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n     }\n \n     @Override\n     @Test\n     public void withMapEmpty()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));\n     }\n \n     @Override\n     @Test\n     public void withMapTargetEmpty()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n     }\n \n     @Override\n     @Test\n     public void withMapEmptyAndTargetEmpty()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.getEmptyMap().withMap(Maps.mutable.empty()));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(Maps.mutable.empty()));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODEyOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r516708128", "bodyText": "please revert. This is an unrelated change.", "author": "nikhilnanivadekar", "createdAt": "2020-11-03T14:30:16Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -165,28 +180,36 @@ public void withKeyValue()\n     @Test\n     public void withMap()\n     {\n-        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n+        Verify.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n     }\n \n     @Override\n     @Test\n     public void withMapEmpty()\n     {\n-        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));", "originalCommit": "e12d560e98264657769c06c282c8ac0f1b467741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\nindex b60ff460..51a47374 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n\n@@ -180,36 +172,28 @@ public class UnmodifiableBiMapTest extends AbstractMutableBiMapTestCase\n     @Test\n     public void withMap()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n     }\n \n     @Override\n     @Test\n     public void withMapEmpty()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));\n     }\n \n     @Override\n     @Test\n     public void withMapTargetEmpty()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf('a'))));\n     }\n \n     @Override\n     @Test\n     public void withMapEmptyAndTargetEmpty()\n     {\n-        Verify.assertThrows(\n-                UnsupportedOperationException.class,\n-                () -> this.getEmptyMap().withMap(Maps.mutable.empty()));\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(Maps.mutable.empty()));\n     }\n \n     @Override\n"}}, {"oid": "32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "url": "https://github.com/eclipse/eclipse-collections/commit/32af7748c8c3cc21b5f4aeb30fb4014de43603ae", "message": "FixedSizeMap to throw UnsupportedOperationException on calling withMap method\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-04T06:33:53Z", "type": "forcePushed"}, {"oid": "a1e5a1b2dcbaaf437dd1276ddfcedbd61fcb78db", "url": "https://github.com/eclipse/eclipse-collections/commit/a1e5a1b2dcbaaf437dd1276ddfcedbd61fcb78db", "message": "FixedSizeMap to throw UnsupportedOperationException on calling withMap method\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-04T08:20:18Z", "type": "forcePushed"}, {"oid": "54d86857043b0de7becb5cfe5e7809a92367c482", "url": "https://github.com/eclipse/eclipse-collections/commit/54d86857043b0de7becb5cfe5e7809a92367c482", "message": "Added two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-06T17:09:15Z", "type": "forcePushed"}, {"oid": "00410102ce67ef0a3025d0ba586eb02b0e01b7d2", "url": "https://github.com/eclipse/eclipse-collections/commit/00410102ce67ef0a3025d0ba586eb02b0e01b7d2", "message": "Added two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-08T01:29:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MTA1Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r519871052", "bodyText": "Shouldn't this be in AbstractSynchronizedMapIterable ?", "author": "nikhilnanivadekar", "createdAt": "2020-11-09T14:51:31Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java", "diffHunk": "@@ -302,6 +303,16 @@ public V forcePut(K key, V value)\n         }\n     }\n \n+    @Override\n+    public MutableBiMap<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)", "originalCommit": "1f28644ab38b4a1fd97d0fe05faa42ff41476919", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU3ODg1Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r525578853", "bodyText": "Thanks for your comments.\nAre you expecting this method to be like this below?\npublic MutableBiMap<K, V> withMapIterable(AbstractSynchronizedMapIterable <? extends K, ? extends V> mapIterable)\nI used MapIterable instead of AbstractSynchronizedMapIterable as it is overriding default method from MutableMap. Did I miss something here? Please correct me if I am wrong.", "author": "nsardana-bny", "createdAt": "2020-11-17T22:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3ODYyMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r526978623", "bodyText": "Sorry, let me try to rephrase it. If you check where withMap() method is implemented, this method should also be implemented in the same class. I would have expected this method to be added in the abstract class. But there might be something I might be missing, so please take a look.", "author": "nikhilnanivadekar", "createdAt": "2020-11-19T15:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyODQ1Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528428452", "bodyText": "Thanks for reviewing!\nSynchronizedSortedMap, SynchronizedMutableMap and SynchronizedBiMap, all have custom implementations of withMap() method, so I decided to add withMapIterable() to each of these three classes. Also, AbstractSynchronizedMapIterable, the parent class, is inheriting withMap() method from MutableMapIterable but not overriding in the abstract class itself. In MutableMapIterable, we do have withMap() implemented so I added withMapIterable() to the class. Hope it makes sense. Thanks again!", "author": "nsardana-bny", "createdAt": "2020-11-23T00:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MjEwMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528962102", "bodyText": "The actual reason why you cannot move this implementation to the abstract class is because of the covariant return type. So, you have to add it in the implementation itself.", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T20:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MTA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fc9b52470c65dfaf7f67c245e8dbd311999038c2", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\nindex f54e5b91..4d4e33e6 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java\n\n@@ -303,16 +302,6 @@ public class SynchronizedBiMap<K, V> extends AbstractSynchronizedMapIterable<K,\n         }\n     }\n \n-    @Override\n-    public MutableBiMap<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n-    {\n-        synchronized (this.lock)\n-        {\n-            mapIterable.forEachKeyValue(this.getDelegate()::put);\n-        }\n-        return this;\n-    }\n-\n     @Override\n     public MutableBiMap<K, V> withAllKeyValues(Iterable<? extends Pair<? extends K, ? extends V>> keyValues)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MTcxMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r519871711", "bodyText": "Same comment as SynchronizedBiMap", "author": "nikhilnanivadekar", "createdAt": "2020-11-09T14:52:23Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/SynchronizedMutableMap.java", "diffHunk": "@@ -124,6 +125,16 @@ public SynchronizedMutableMap(MutableMap<K, V> newMap, Object newLock)\n         }\n     }\n \n+    @Override\n+    public MutableMap<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)", "originalCommit": "1f28644ab38b4a1fd97d0fe05faa42ff41476919", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9b52470c65dfaf7f67c245e8dbd311999038c2", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/SynchronizedMutableMap.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/SynchronizedMutableMap.java\nindex d991df07..a8a98cad 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/SynchronizedMutableMap.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/SynchronizedMutableMap.java\n\n@@ -125,16 +124,6 @@ public class SynchronizedMutableMap<K, V>\n         }\n     }\n \n-    @Override\n-    public MutableMap<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n-    {\n-        synchronized (this.lock)\n-        {\n-            mapIterable.forEachKeyValue(this.getDelegate()::put);\n-        }\n-        return this;\n-    }\n-\n     @Override\n     public MutableMap<K, V> withAllKeyValueArguments(Pair<? extends K, ? extends V>... keyValuePairs)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3Mjg2Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r519872862", "bodyText": "Same comment as SynchronizedBiMap", "author": "nikhilnanivadekar", "createdAt": "2020-11-09T14:53:54Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/sorted/mutable/SynchronizedSortedMap.java", "diffHunk": "@@ -133,6 +134,16 @@ public SynchronizedSortedMap(MutableSortedMap<K, V> newMap, Object lock)\n         }\n     }\n \n+    @Override\n+    public MutableSortedMap<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)", "originalCommit": "1f28644ab38b4a1fd97d0fe05faa42ff41476919", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9b52470c65dfaf7f67c245e8dbd311999038c2", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/sorted/mutable/SynchronizedSortedMap.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/sorted/mutable/SynchronizedSortedMap.java\nindex c7840958..0255371e 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/sorted/mutable/SynchronizedSortedMap.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/map/sorted/mutable/SynchronizedSortedMap.java\n\n@@ -134,16 +133,6 @@ public class SynchronizedSortedMap<K, V>\n         }\n     }\n \n-    @Override\n-    public MutableSortedMap<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n-    {\n-        synchronized (this.lock)\n-        {\n-            mapIterable.forEachKeyValue(this.getDelegate()::put);\n-        }\n-        return this;\n-    }\n-\n     /**\n      * @deprecated in 6.0 Use {@link #withAllKeyValueArguments(Pair[])} instead. Inlineable.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NDIwMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r519874200", "bodyText": "Please reorder this to move it around the other tests of method.", "author": "nikhilnanivadekar", "createdAt": "2020-11-09T14:55:24Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -60,6 +60,13 @@\n         return UnmodifiableBiMap.of(Maps.mutable.of(key, value));\n     }\n \n+    @Test", "originalCommit": "1f28644ab38b4a1fd97d0fe05faa42ff41476919", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9b52470c65dfaf7f67c245e8dbd311999038c2", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\nindex 7f349413..9cf92d84 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java\n\n@@ -60,13 +60,6 @@ public class UnmodifiableBiMapTest extends AbstractMutableBiMapTestCase\n         return UnmodifiableBiMap.of(Maps.mutable.of(key, value));\n     }\n \n-    @Test\n-    @Override\n-    public void withMapIterableNull()\n-    {\n-        Assert.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMapIterable(null));\n-    }\n-\n     @Override\n     protected <K, V> MutableBiMap<K, V> newMapWithKeysValues(K key1, V value1, K key2, V value2)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NTU3NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r519875575", "bodyText": "Reorder the tests please to bunch all of them together.", "author": "nikhilnanivadekar", "createdAt": "2020-11-09T14:57:14Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -574,6 +575,17 @@ public void withMap()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n     }\n \n+    @Test", "originalCommit": "1f28644ab38b4a1fd97d0fe05faa42ff41476919", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc9b52470c65dfaf7f67c245e8dbd311999038c2", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\nindex b0b022b0..0b1a3205 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\n\n@@ -575,17 +574,6 @@ public abstract class MutableMapIterableTestCase extends MapIterableTestCase\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n     }\n \n-    @Test\n-    public void withMapIterable()\n-    {\n-        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n-        MutableMap<String, Integer> simpleMap = Maps.mutable.with(\"B\", 22, \"C\", 3);\n-        map.putAll(simpleMap);\n-        MutableMapIterable<String, Integer> mapWith = map.withMapIterable(simpleMap);\n-        Assert.assertSame(map, mapWith);\n-        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n-    }\n-\n     @Test\n     public void withMapEmpty()\n     {\n"}}, {"oid": "fc9b52470c65dfaf7f67c245e8dbd311999038c2", "url": "https://github.com/eclipse/eclipse-collections/commit/fc9b52470c65dfaf7f67c245e8dbd311999038c2", "message": "FixedSizeMap to throw UnsupportedOperationException on calling withMap method\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-22T20:21:54Z", "type": "commit"}, {"oid": "43d8d3675c924ebdda9eff79fd1a3fd71b8bbfd5", "url": "https://github.com/eclipse/eclipse-collections/commit/43d8d3675c924ebdda9eff79fd1a3fd71b8bbfd5", "message": "Add two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-22T20:41:07Z", "type": "forcePushed"}, {"oid": "dcdf2db233efcf422069fb10331ff4baa54df7c6", "url": "https://github.com/eclipse/eclipse-collections/commit/dcdf2db233efcf422069fb10331ff4baa54df7c6", "message": "Add two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-22T22:41:05Z", "type": "forcePushed"}, {"oid": "a5b7b94098992dc95edf81b5c71d34cd4de670be", "url": "https://github.com/eclipse/eclipse-collections/commit/a5b7b94098992dc95edf81b5c71d34cd4de670be", "message": "Add two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: Neha Sardana <neha.sardana@bnymellon.com>", "committedDate": "2020-11-23T17:03:32Z", "type": "forcePushed"}, {"oid": "abfccd304e6844aab2d45f00dcd3c8f75e2f1658", "url": "https://github.com/eclipse/eclipse-collections/commit/abfccd304e6844aab2d45f00dcd3c8f75e2f1658", "message": "Add two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: nsardana-bny <neha.sardana@bnymellon.com>", "committedDate": "2020-11-23T18:34:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NTAxMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528955013", "bodyText": "@donraab the return type here is a void should we return a MutableMapIterable instead of void, i.e. return a this?\nThe way I look at it is that, if we return a MutableMapIterable it never hurts, but if we return a void, reassigning in user code is impossible.\nI prefer returning this. Thoughts?\nAny case, we will take this in as void and fix it in a next PR.", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T19:47:12Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -172,6 +172,11 @@ default V getOrDefault(Object key, V defaultValue)\n         return this;\n     }\n \n+    default void putAllMapIterable(MapIterable<? extends K, ? extends V> mapIterable)", "originalCommit": "d63d0036537f9024b2a1c88309a17b590aa4736c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MDE0NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528960145", "bodyText": "Revisiting my point from earlier, I think let us have putAllMapIterable return a void because we are adding withMapIterable which is returns this.", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T19:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3Mjc1NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528972754", "bodyText": "I think putAllMapIterable should be symmetric with putAll. What does putAll return? Just looked, as I suspected, returns void.", "author": "donraab", "createdAt": "2020-11-23T20:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MzQ4Nw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528973487", "bodyText": "void", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T20:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NTAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d219774a762b92dcdca71ad0142ce201edcf122c", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java\nindex 01eae437..62fc4906 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java\n\n@@ -172,6 +172,12 @@ public interface MutableMapIterable<K, V> extends MapIterable<K, V>, Map<K, V>\n         return this;\n     }\n \n+    default MutableMapIterable<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n+    {\n+        this.putAllMapIterable(mapIterable);\n+        return this;\n+    }\n+\n     default void putAllMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n     {\n         mapIterable.forEachKeyValue(this::put);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NzEzMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528957130", "bodyText": "Can be replaced with Maps.mutable.with() instead of UnifiedMap", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T19:50:59Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -608,6 +608,45 @@ public void withMapNull()\n         Assert.assertThrows(NullPointerException.class, () -> this.newMap().withMap(null));\n     }\n \n+    @Test\n+    public void putAllMapIterable()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        MutableMapIterable<String, Integer> simpleMap = Maps.mutable.with(\"B\", 22, \"C\", 3);\n+        map.putAllMapIterable(simpleMap);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), map);", "originalCommit": "d63d0036537f9024b2a1c88309a17b590aa4736c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4MTI0MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r529081240", "bodyText": "Updated to use Maps.mutable.with() instead of UnifiedMap methods. Updated the same for putallmapiterable test cases too.", "author": "nsardana-bny", "createdAt": "2020-11-24T00:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NzEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "5b50f8cbc6b4ca7b2ea110d8cd89e5aea8ecca94", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\nindex e7bfcdf5..6bc34cfb 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\n\n@@ -614,7 +614,7 @@ public abstract class MutableMapIterableTestCase extends MapIterableTestCase\n         MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n         MutableMapIterable<String, Integer> simpleMap = Maps.mutable.with(\"B\", 22, \"C\", 3);\n         map.putAllMapIterable(simpleMap);\n-        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), map);\n+        Verify.assertMapsEqual(Maps.mutable.with(\"A\", 1, \"B\", 22, \"C\", 3), map);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1OTYyNg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528959626", "bodyText": "I dont think you need default method here because all the implementing interfaces should have a default method. It is easy to check by removing this method, or you can check the coverage and this method will be uncovered in this interface. If it is uncovered you can delete it.\nThat said, it is good to have default methods to help users with custom implementations, so I would say, you can add a test to cover this method. It can be done separately as a different PR.", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T19:55:37Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -172,6 +172,12 @@ default V getOrDefault(Object key, V defaultValue)\n         return this;\n     }\n \n+    default MutableMapIterable<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)", "originalCommit": "25a7a9f505cc2aa903c43d3081e0504f435c03ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4MTY2OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r529081668", "bodyText": "Thanks @nikhilnanivadekar for reviewing. If you don't mind, can I do this on another PR? Thanks again for your comments!", "author": "nsardana-bny", "createdAt": "2020-11-24T00:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1OTYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2Mzc0Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r529163746", "bodyText": "Sure!", "author": "nikhilnanivadekar", "createdAt": "2020-11-24T02:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1OTYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "5b50f8cbc6b4ca7b2ea110d8cd89e5aea8ecca94", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java\nindex 62fc4906..01eae437 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java\n\n@@ -172,12 +172,6 @@ public interface MutableMapIterable<K, V> extends MapIterable<K, V>, Map<K, V>\n         return this;\n     }\n \n-    default MutableMapIterable<K, V> withMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n-    {\n-        this.putAllMapIterable(mapIterable);\n-        return this;\n-    }\n-\n     default void putAllMapIterable(MapIterable<? extends K, ? extends V> mapIterable)\n     {\n         mapIterable.forEachKeyValue(this::put);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2Mjg4Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528962882", "bodyText": "Same comment as the previous commit, change to Maps.mutable.with()", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T20:01:34Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -608,6 +608,50 @@ public void withMapNull()\n         Assert.assertThrows(NullPointerException.class, () -> this.newMap().withMap(null));\n     }\n \n+    @Test\n+    public void withMapIterable()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        MutableMapIterable<String, Integer> simpleMap = Maps.mutable.with(\"B\", 22, \"C\", 3);\n+        map.putAll(simpleMap);\n+        MutableMapIterable<String, Integer> mapWith = map.withMapIterable(simpleMap);\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);", "originalCommit": "25a7a9f505cc2aa903c43d3081e0504f435c03ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4MTAzNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r529081034", "bodyText": "Updated to use Maps.mutable.with() instead of UnifiedMap methods. Updated the same for putallmapiterable test cases too.", "author": "nsardana-bny", "createdAt": "2020-11-24T00:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2Mjg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5b50f8cbc6b4ca7b2ea110d8cd89e5aea8ecca94", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\nindex 58842804..6bc34cfb 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java\n\n@@ -608,57 +608,13 @@ public abstract class MutableMapIterableTestCase extends MapIterableTestCase\n         Assert.assertThrows(NullPointerException.class, () -> this.newMap().withMap(null));\n     }\n \n-    @Test\n-    public void withMapIterable()\n-    {\n-        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n-        MutableMapIterable<String, Integer> simpleMap = Maps.mutable.with(\"B\", 22, \"C\", 3);\n-        map.putAll(simpleMap);\n-        MutableMapIterable<String, Integer> mapWith = map.withMapIterable(simpleMap);\n-        Assert.assertSame(map, mapWith);\n-        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n-    }\n-\n-    @Test\n-    public void withMapIterableEmpty()\n-    {\n-        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n-        MutableMapIterable<String, Integer> mapWith = map.withMapIterable(Maps.mutable.empty());\n-        Assert.assertSame(map, mapWith);\n-        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 2), mapWith);\n-    }\n-\n-    @Test\n-    public void withMapIterableTargetEmpty()\n-    {\n-        MutableMapIterable<String, Integer> map = this.newMap();\n-        MutableMapIterable<String, Integer> mapWith = map.withMapIterable(Maps.mutable.with(\"A\", 1, \"B\", 2));\n-        Assert.assertSame(map, mapWith);\n-        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 2), mapWith);\n-    }\n-\n-    @Test\n-    public void withMapIterableEmptyAndTargetEmpty()\n-    {\n-        MutableMapIterable<String, Integer> map = this.newMap();\n-        MutableMapIterable<String, Integer> mapWith = map.withMapIterable(Maps.mutable.empty());\n-        Assert.assertSame(map, mapWith);\n-        Verify.assertMapsEqual(UnifiedMap.newMap(), mapWith);\n-    }\n-\n-    @Test\n-    public void withMapIterableNull()\n-    {\n-        Assert.assertThrows(NullPointerException.class, () -> this.newMap().withMapIterable(null));\n-    }\n-\n     @Test\n     public void putAllMapIterable()\n     {\n         MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n         MutableMapIterable<String, Integer> simpleMap = Maps.mutable.with(\"B\", 22, \"C\", 3);\n         map.putAllMapIterable(simpleMap);\n-        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), map);\n+        Verify.assertMapsEqual(Maps.mutable.with(\"A\", 1, \"B\", 22, \"C\", 3), map);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NzcyNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r528967724", "bodyText": "I think we need better assertions here. It should be possible to assert with a MutableMap no?", "author": "nikhilnanivadekar", "createdAt": "2020-11-23T20:11:08Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/immutable/ImmutableMapIterableTestCase.java", "diffHunk": "@@ -383,6 +383,81 @@ public void newWithKeyValue()\n         Verify.assertSize(immutable.size() + 1, immutable2);\n     }\n \n+    @Test\n+    public void newWithMap1()\n+    {\n+        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n+        ImmutableMapIterable<Integer, String> immutable2 =\n+                immutable.newWithMap(UnifiedMap.newMapWith(\n+                        Tuples.pair(\n+                                Integer.MAX_VALUE,\n+                                Integer.toString(Integer.MAX_VALUE)),\n+                        Tuples.pair(\n+                                Integer.MIN_VALUE,\n+                                Integer.toString(Integer.MIN_VALUE))));\n+        Verify.assertSize(immutable.size() + 2, immutable2);\n+    }\n+\n+    @Test\n+    public void withMapNull()\n+    {\n+        Assert.assertThrows(NullPointerException.class, () -> this.classUnderTest().newWithMap(null));\n+    }\n+\n+    @Test\n+    public void newWithMapTargetEmpty()\n+    {\n+        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n+        ImmutableMapIterable<Integer, String> immutable2 = immutable.newWithMap(UnifiedMap.newMap());\n+        Assert.assertNotSame(immutable, immutable2);\n+        Verify.assertMapsEqual(immutable2.castToMap(), immutable.castToMap());\n+    }\n+\n+    @Test\n+    public void newWithMapEmptyAndTargetEmpty()\n+    {\n+        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n+        ImmutableMapIterable<Integer, String> immutable2 = immutable.newWithMap(Maps.mutable.empty());\n+        Assert.assertNotSame(immutable, immutable2);\n+        Verify.assertMapsEqual(immutable2.castToMap(), immutable.castToMap());\n+    }\n+\n+    @Test\n+    public void newWithMapIterable()\n+    {\n+        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n+        ImmutableMapIterable<Integer, String> immutable2 =\n+                immutable.newWithMapIterable(Maps.immutable.of(\n+                        Integer.MAX_VALUE,\n+                        Integer.toString(Integer.MAX_VALUE),\n+                        Integer.MIN_VALUE,\n+                        Integer.toString(Integer.MIN_VALUE)));\n+        Verify.assertSize(immutable.size() + 2, immutable2);", "originalCommit": "abfccd304e6844aab2d45f00dcd3c8f75e2f1658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4MDYzNw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r529080637", "bodyText": "Updated the code to handle assert with a MutableMap using Verify.assertMapsEqual() method.", "author": "nsardana-bny", "createdAt": "2020-11-24T00:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NzcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "5b50f8cbc6b4ca7b2ea110d8cd89e5aea8ecca94", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/map/immutable/ImmutableMapIterableTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/map/immutable/ImmutableMapIterableTestCase.java\nindex 9a45f929..18a4258e 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/map/immutable/ImmutableMapIterableTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/map/immutable/ImmutableMapIterableTestCase.java\n\n@@ -383,81 +383,6 @@ public abstract class ImmutableMapIterableTestCase\n         Verify.assertSize(immutable.size() + 1, immutable2);\n     }\n \n-    @Test\n-    public void newWithMap1()\n-    {\n-        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n-        ImmutableMapIterable<Integer, String> immutable2 =\n-                immutable.newWithMap(UnifiedMap.newMapWith(\n-                        Tuples.pair(\n-                                Integer.MAX_VALUE,\n-                                Integer.toString(Integer.MAX_VALUE)),\n-                        Tuples.pair(\n-                                Integer.MIN_VALUE,\n-                                Integer.toString(Integer.MIN_VALUE))));\n-        Verify.assertSize(immutable.size() + 2, immutable2);\n-    }\n-\n-    @Test\n-    public void withMapNull()\n-    {\n-        Assert.assertThrows(NullPointerException.class, () -> this.classUnderTest().newWithMap(null));\n-    }\n-\n-    @Test\n-    public void newWithMapTargetEmpty()\n-    {\n-        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n-        ImmutableMapIterable<Integer, String> immutable2 = immutable.newWithMap(UnifiedMap.newMap());\n-        Assert.assertNotSame(immutable, immutable2);\n-        Verify.assertMapsEqual(immutable2.castToMap(), immutable.castToMap());\n-    }\n-\n-    @Test\n-    public void newWithMapEmptyAndTargetEmpty()\n-    {\n-        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n-        ImmutableMapIterable<Integer, String> immutable2 = immutable.newWithMap(Maps.mutable.empty());\n-        Assert.assertNotSame(immutable, immutable2);\n-        Verify.assertMapsEqual(immutable2.castToMap(), immutable.castToMap());\n-    }\n-\n-    @Test\n-    public void newWithMapIterable()\n-    {\n-        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n-        ImmutableMapIterable<Integer, String> immutable2 =\n-                immutable.newWithMapIterable(Maps.immutable.of(\n-                        Integer.MAX_VALUE,\n-                        Integer.toString(Integer.MAX_VALUE),\n-                        Integer.MIN_VALUE,\n-                        Integer.toString(Integer.MIN_VALUE)));\n-        Verify.assertSize(immutable.size() + 2, immutable2);\n-    }\n-\n-    @Test\n-    public void newWithMapIterableTargetEmpty()\n-    {\n-        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n-        ImmutableMapIterable<Integer, String> immutable2 =\n-                immutable.newWithMapIterable(Maps.immutable.empty());\n-        Verify.assertSize(immutable.size(), immutable2);\n-    }\n-\n-    @Test\n-    public void withMapIterableEmptyAndTargetEmpty()\n-    {\n-        ImmutableMapIterable<Integer, String> immutable = this.classUnderTest();\n-        ImmutableMapIterable<Integer, String> immutable2 = immutable.newWithMapIterable(Maps.immutable.empty());\n-        Verify.assertSize(immutable.size(), immutable2);\n-    }\n-\n-    @Test\n-    public void withMapIterableNull()\n-    {\n-        Assert.assertThrows(NullPointerException.class, () -> this.classUnderTest().newWithMapIterable(null));\n-    }\n-\n     @Test\n     public void newWithAllKeyValuePairs()\n     {\n"}}, {"oid": "5b50f8cbc6b4ca7b2ea110d8cd89e5aea8ecca94", "url": "https://github.com/eclipse/eclipse-collections/commit/5b50f8cbc6b4ca7b2ea110d8cd89e5aea8ecca94", "message": "Add putAllMapIterable method to Mutable Maps.\n\nSigned-off-by: Neha Sardana <neha.sardana@bnymellon.com>", "committedDate": "2020-11-23T23:40:58Z", "type": "commit"}, {"oid": "d219774a762b92dcdca71ad0142ce201edcf122c", "url": "https://github.com/eclipse/eclipse-collections/commit/d219774a762b92dcdca71ad0142ce201edcf122c", "message": "Add withMapIterable to MutableMap. Partially closes #875\n\nSigned-off-by: Neha Sardana <neha.sardana@bnymellon.com>", "committedDate": "2020-11-23T23:40:59Z", "type": "commit"}, {"oid": "0a46f458c09610557233eb684354fab698645587", "url": "https://github.com/eclipse/eclipse-collections/commit/0a46f458c09610557233eb684354fab698645587", "message": "Add two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: Neha Sardana <neha.sardana@bnymellon.com>", "committedDate": "2020-11-23T23:41:51Z", "type": "commit"}, {"oid": "0a46f458c09610557233eb684354fab698645587", "url": "https://github.com/eclipse/eclipse-collections/commit/0a46f458c09610557233eb684354fab698645587", "message": "Add two methods newWithMap and newWithMapIterable to ImmutableMap. Closes #875\n\nSigned-off-by: Neha Sardana <neha.sardana@bnymellon.com>", "committedDate": "2020-11-23T23:41:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MTg4OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r559871888", "bodyText": "This is a strange inconsistency we have. withKeyValue on a fixed-size map is capable of replacing a value at a key without growing the map, but put() always throws.", "author": "motlin", "createdAt": "2021-01-19T02:10:53Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/FixedSizeMap.java", "diffHunk": "@@ -70,7 +70,18 @@\n     @Override\n     default FixedSizeMap<K, V> withMap(Map<? extends K, ? extends V> map)\n     {\n-        this.putAll(map);\n-        return this;", "originalCommit": "0a46f458c09610557233eb684354fab698645587", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MzMxOQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r559873319", "bodyText": "put() has to return a V (old value), so it's not possible to have a proper implementation on FixedSizedMap. On the other hand, anything that returns a map is entirely implementable. I don't see why we wouldn't implement these...", "author": "mohrezaei", "createdAt": "2021-01-19T02:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MTg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY0OTMwMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r560649302", "bodyText": "I'm not sure I understand this point. Just to focus on put(), I'm wondering why the implementation in SingletonMap isn't something like:\n    @Override\n    public V put(K key, V value)\n    {\n        if (Objects.equals(key, this.key1))\n        {\n            V result = this.value1;\n            this.value1 = value;\n            return result;\n        }\n        throw new UnsupportedOperationException(\"Cannot call put() on \" + this.getClass().getSimpleName());\n    }\nThe actual implementation in the superclass is:\n    @Override\n    public V put(K key, V value)\n    {\n        throw new UnsupportedOperationException(\"Cannot call put() on \" + this.getClass().getSimpleName());\n    }", "author": "motlin", "createdAt": "2021-01-20T03:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MTg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY1NDI0MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r560654240", "bodyText": "I don't see an issue with changing put to allow mutation of the value for the same key. (My point was that put can't work for the general case, i.e., an arbitrary key). The other methods work just fine for arbitrary parameters, so throwing is particularly strange there.\nFor some reason, I thought the small maps were immutable, probably remembering really ancient code? On the mutable side, mutations can be allowed as long as the map size doesn't change.", "author": "mohrezaei", "createdAt": "2021-01-20T03:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MTg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMjU1NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r561012555", "bodyText": "Tagging @nsardana-bny @nikhilnanivadekar @donraab for attention.", "author": "motlin", "createdAt": "2021-01-20T14:42:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MTg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE2OTg0Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r561169842", "bodyText": "These classes are ancient and not consistent with their mutable or immutable counterparts. The small maps are immutable. The small lists are not, are more like arrays in that they can be set and thereby sorted, but not grown. I took a look at FixedSizeList and FixedSizeSet to see how their withAll methods are implemented. I think we should make the withMapIterable method consistent and return a new Map, except maybe in the case where the map passed in is empty. I'm not keen on the empty handling below, but might be kind of hard to change this behavior if it is depended on anywhere.\nFixedSizeSet:\npublic MutableSet<T> withAll(Iterable<? extends T> elements)\n{\n    if (Iterate.isEmpty(elements))\n    {\n        return this;\n    }\n    return Sets.fixedSize.ofAll(this.toList().withAll(elements));\n}\n\nFixedSizeList:\npublic MutableList<T> withAll(Iterable<? extends T> elements)\n{\n    if (Iterate.isEmpty(elements))\n    {\n        return this;\n    }\n    return Lists.fixedSize.ofAll(this.toList().withAll(elements));\n}\n\nWe should also change the result type for both of these methods (and the other with method) to be FixedSizeList or FixedSizeSet.\nThoughts?", "author": "donraab", "createdAt": "2021-01-20T18:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MTg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE3MDQyMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1028#discussion_r562170421", "bodyText": "The small maps are immutable.\n\nThat's what I vaguely remembered, but I then checked the implementation. Not only does SingletonMap extend mutable super classes, but already has a method that mutates its value:\n    @Override\n    public MutableMap<K, V> withKeyValue(K addKey, V addValue)\n    {\n        // Map behavior specifies that if you put in a duplicate key, you replace the value\n        if (Objects.equals(this.key1, addKey))\n        {\n            this.value1 = addValue;\n            return this;\n        }\n        return new DoubletonMap<>(this.key1, this.value1, addKey, addValue);\n    }\n(I just realized @motlin pointed out the same thing above).\nGiven that these are in the mutable side and are already mutable, I would suggest we should make them as consistent with the rest of the mutable implementations as possible.\nThe mutable map with methods mutate the instance, so I have no issue with withAll empty checks.", "author": "mohrezaei", "createdAt": "2021-01-21T20:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MTg4OA=="}], "type": "inlineReview", "revised_code": null}]}