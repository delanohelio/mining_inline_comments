{"pr_number": 996, "pr_title": "Implement Bag.anySatisfyWithOccurrences(), Bag.allSatisfyWithOccurren\u2026", "pr_createdAt": "2020-09-04T19:13:01Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/996", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0Mzc3Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483843772", "bodyText": "This should be 11.0.", "author": "donraab", "createdAt": "2020-09-04T21:05:45Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java", "diffHunk": "@@ -107,6 +108,37 @@\n      */\n     void forEachWithOccurrences(ObjectIntProcedure<? super T> procedure);\n \n+    /**\n+     * Returns true if the predicate evaluates to true for any element of the Bag.\n+     * Returns false if the Bag is empty or if no element returns true for the predicate.\n+     *\n+     * @since 10.5", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\nindex 2f141b86..c5db1eea 100644\n--- a/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\n+++ b/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/Bag.java\n\n@@ -112,7 +112,7 @@ public interface Bag<T>\n      * Returns true if the predicate evaluates to true for any element of the Bag.\n      * Returns false if the Bag is empty or if no element returns true for the predicate.\n      *\n-     * @since 10.5\n+     * @since 11.0\n      */\n     boolean anySatisfyWithOccurrences(ObjectIntPredicate<? super T> predicate);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMDE4Nw==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483910187", "bodyText": "This should return true.", "author": "donraab", "createdAt": "2020-09-05T04:42:32Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/sorted/immutable/ImmutableEmptySortedBag.java", "diffHunk": "@@ -117,6 +118,30 @@ public void forEachWithOccurrences(ObjectIntProcedure<? super T> procedure)\n     {\n     }\n \n+    @Override\n+    public boolean anySatisfyWithOccurrences(ObjectIntPredicate<? super T> predicate)\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean allSatisfyWithOccurrences(ObjectIntPredicate<? super T> predicate)\n+    {\n+        return false;", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/sorted/immutable/ImmutableEmptySortedBag.java b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/sorted/immutable/ImmutableEmptySortedBag.java\nindex 2be6c01a..0f5f5924 100644\n--- a/eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/sorted/immutable/ImmutableEmptySortedBag.java\n+++ b/eclipse-collections/src/main/java/org/eclipse/collections/impl/bag/sorted/immutable/ImmutableEmptySortedBag.java\n\n@@ -127,7 +127,7 @@ class ImmutableEmptySortedBag<T>\n     @Override\n     public boolean allSatisfyWithOccurrences(ObjectIntPredicate<? super T> predicate)\n     {\n-        return false;\n+        return true;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQyMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911420", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:00:09Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\nindex 25760bf3..5b665421 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n\n@@ -122,7 +122,7 @@ public abstract class ImmutableBagTestCase extends AbstractRichIterableTestCase\n     }\n \n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQzMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911432", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:00:17Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"20\")));\n+    }\n+\n+    @Test\n+    public void testAllSatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\nindex 25760bf3..5b665421 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n\n@@ -122,7 +122,7 @@ public abstract class ImmutableBagTestCase extends AbstractRichIterableTestCase\n     }\n \n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQ0MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911441", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:00:31Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"20\")));\n+    }\n+\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> Integer.parseInt(object) > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(\"1\") && value == 1));\n+    }\n+\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\nindex 25760bf3..5b665421 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n\n@@ -122,7 +122,7 @@ public abstract class ImmutableBagTestCase extends AbstractRichIterableTestCase\n     }\n \n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTQ1OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911458", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:00:39Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java", "diffHunk": "@@ -121,6 +121,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(immutable, mutable.with(\"5\").without(\"1\"));\n     }\n \n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\") && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"20\")));\n+    }\n+\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> Integer.parseInt(object) > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(\"1\") && value == 1));\n+    }\n+\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> Integer.parseInt(object) > 100));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(\"1\") && value == 1));\n+    }\n+\n+    @Test\n+    public void testDetectWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\nindex 25760bf3..5b665421 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableBagTestCase.java\n\n@@ -122,7 +122,7 @@ public abstract class ImmutableBagTestCase extends AbstractRichIterableTestCase\n     }\n \n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(\"2\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTY1Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911653", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:03:31Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\nindex 65a171d7..00073127 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n\n@@ -83,7 +83,7 @@ public class ImmutableEmptyBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTgzNw==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911837", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:06:18Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\nindex 65a171d7..00073127 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n\n@@ -83,7 +83,7 @@ public class ImmutableEmptyBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTg1OQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911859", "bodyText": "These tests should assertTrue for empty.", "author": "donraab", "createdAt": "2020-09-05T05:06:41Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> true));", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\nindex 65a171d7..00073127 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n\n@@ -83,7 +83,7 @@ public class ImmutableEmptyBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMTg3Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483911876", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:06:53Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\nindex 65a171d7..00073127 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n\n@@ -83,7 +83,7 @@ public class ImmutableEmptyBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjE5NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912195", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:11:18Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java", "diffHunk": "@@ -81,6 +81,42 @@ public void testFactory()\n         Verify.assertInstanceOf(ImmutableEmptyBag.class, Bags.immutable.of());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> true));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> false));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testDetectWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\nindex 65a171d7..00073127 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableEmptyBagTest.java\n\n@@ -83,7 +83,7 @@ public class ImmutableEmptyBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjIxNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912214", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:11:37Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\nindex 92cd5bae..c610d621 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n\n@@ -96,7 +96,7 @@ public class ImmutableSingletonBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjIyOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912228", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:11:45Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\nindex 92cd5bae..c610d621 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n\n@@ -96,7 +96,7 @@ public class ImmutableSingletonBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjI0Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912242", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:11:59Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\nindex 92cd5bae..c610d621 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n\n@@ -96,7 +96,7 @@ public class ImmutableSingletonBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMjI2Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r483912263", "bodyText": "Please drop the test prefix in the name.", "author": "donraab", "createdAt": "2020-09-05T05:12:07Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java", "diffHunk": "@@ -94,6 +94,52 @@ public void equalsAndHashCode()\n         Verify.assertEqualsAndHashCode(UnifiedMap.newWithKeysValues(1, 1), immutable.toMapOfItemToCount());\n     }\n \n+    @Override\n+    @Test\n+    public void testAnySatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testAllSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 10));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testNoneSatisfyWithOccurrences()\n+    {\n+        ImmutableBag<String> bag = this.newBag();\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(VAL) && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL)));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(NOT_VAL) && value == 1));\n+    }\n+\n+    @Override\n+    @Test\n+    public void testDetectWithOccurrences()", "originalCommit": "257ba70f8e5fbbc86fe224bfaa008e248651a9bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\nindex 92cd5bae..c610d621 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/immutable/ImmutableSingletonBagTest.java\n\n@@ -96,7 +96,7 @@ public class ImmutableSingletonBagTest extends ImmutableBagTestCase\n \n     @Override\n     @Test\n-    public void testAnySatisfyWithOccurrences()\n+    public void anySatisfyWithOccurrences()\n     {\n         ImmutableBag<String> bag = this.newBag();\n         Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(VAL)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0OTc5Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485249793", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:28:32Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\nindex fa250b75..11402901 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n\n@@ -126,10 +126,10 @@ public abstract class AbstractImmutableSortedBagTestCase extends AbstractImmutab\n     public void anySatisfyWithOccurrences()\n     {\n         ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(20)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA2Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250066", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:29:30Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object > 0));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\nindex fa250b75..11402901 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n\n@@ -126,10 +126,10 @@ public abstract class AbstractImmutableSortedBagTestCase extends AbstractImmutab\n     public void anySatisfyWithOccurrences()\n     {\n         ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(20)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA5MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250091", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:29:36Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object > 100));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\nindex fa250b75..11402901 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n\n@@ -126,10 +126,10 @@ public abstract class AbstractImmutableSortedBagTestCase extends AbstractImmutab\n     public void anySatisfyWithOccurrences()\n     {\n         ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(20)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDE0NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250145", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:29:45Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java", "diffHunk": "@@ -122,6 +122,41 @@ public void equalsAndHashCode()\n         Assert.assertNotEquals(bag1, bag2);\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object > 0));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object > 100));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+    }\n+\n+    @Test\n+    public void detectWithOccurrences()\n+    {\n+        ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n+        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object == 1 && value == 1));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\nindex fa250b75..11402901 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/sorted/immutable/AbstractImmutableSortedBagTestCase.java\n\n@@ -126,10 +126,10 @@ public abstract class AbstractImmutableSortedBagTestCase extends AbstractImmutab\n     public void anySatisfyWithOccurrences()\n     {\n         ImmutableSortedBag<Integer> bag = this.newWith(1, 2, 2);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 1));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 6));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 20));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1)));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 6));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(20)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDMwOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250308", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:30:13Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\nindex 7ebbc518..2d9b66c4 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n\n@@ -486,51 +486,51 @@ public abstract class MutableBagTestCase extends AbstractCollectionTestCase\n     public void anySatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3)));\n \n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1) && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(10)));\n     }\n \n     @Test\n     public void noneSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(30)));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(2)));\n     }\n \n     @Test\n     public void allSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3);\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 4 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(4) && value == 3));\n         bag = this.newWith(3, 3, 3, 1);\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 || object == 1));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 300 || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(300) || object == 1));\n     }\n \n     @Test\n     public void detectWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3));\n-        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 1 && value == 10));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 10 && value == 5));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 100));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 10));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(10) && value == 5));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(100)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDM0OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250348", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:30:20Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\nindex 7ebbc518..2d9b66c4 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n\n@@ -486,51 +486,51 @@ public abstract class MutableBagTestCase extends AbstractCollectionTestCase\n     public void anySatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3)));\n \n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1) && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(10)));\n     }\n \n     @Test\n     public void noneSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(30)));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(2)));\n     }\n \n     @Test\n     public void allSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3);\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 4 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(4) && value == 3));\n         bag = this.newWith(3, 3, 3, 1);\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 || object == 1));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 300 || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(300) || object == 1));\n     }\n \n     @Test\n     public void detectWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3));\n-        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 1 && value == 10));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 10 && value == 5));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 100));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 10));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(10) && value == 5));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(100)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDM3OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250378", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:30:27Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\nindex 7ebbc518..2d9b66c4 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n\n@@ -486,51 +486,51 @@ public abstract class MutableBagTestCase extends AbstractCollectionTestCase\n     public void anySatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3)));\n \n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1) && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(10)));\n     }\n \n     @Test\n     public void noneSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(30)));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(2)));\n     }\n \n     @Test\n     public void allSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3);\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 4 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(4) && value == 3));\n         bag = this.newWith(3, 3, 3, 1);\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 || object == 1));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 300 || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(300) || object == 1));\n     }\n \n     @Test\n     public void detectWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3));\n-        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 1 && value == 10));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 10 && value == 5));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 100));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 10));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(10) && value == 5));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(100)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDQxMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/996#discussion_r485250411", "bodyText": "The object tests should use .equals() not ==.", "author": "donraab", "createdAt": "2020-09-08T23:30:35Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java", "diffHunk": "@@ -482,6 +482,57 @@ public void topOccurrences()\n         Verify.assertThrows(IllegalArgumentException.class, () -> this.newWith().topOccurrences(-1));\n     }\n \n+    @Test\n+    public void anySatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+    }\n+\n+    @Test\n+    public void noneSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+    }\n+\n+    @Test\n+    public void allSatisfyWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3);\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 4 && value == 3));\n+        bag = this.newWith(3, 3, 3, 1);\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 300 || object == 1));\n+    }\n+\n+    @Test\n+    public void detectWithOccurrences()\n+    {\n+        Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3 && value == 3));", "originalCommit": "773875f17ef60c2f42e2d4fb4242a4729d6da59a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "chunk": "diff --git a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\nindex 7ebbc518..2d9b66c4 100644\n--- a/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n+++ b/unit-tests/src/test/java/org/eclipse/collections/impl/bag/mutable/MutableBagTestCase.java\n\n@@ -486,51 +486,51 @@ public abstract class MutableBagTestCase extends AbstractCollectionTestCase\n     public void anySatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 2));\n-        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 2));\n+        Assert.assertTrue(bag.anySatisfyWithOccurrences((object, value) -> object.equals(3)));\n \n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 2 && value == 5));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 1 && value == 7));\n-        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object == 10));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(2) && value == 5));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(1) && value == 7));\n+        Assert.assertFalse(bag.anySatisfyWithOccurrences((object, value) -> object.equals(10)));\n     }\n \n     @Test\n     public void noneSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 1));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 30));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 0));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object == 2));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 1));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(30)));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 0));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertFalse(bag.noneSatisfyWithOccurrences((object, value) -> object.equals(2)));\n     }\n \n     @Test\n     public void allSatisfyWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3);\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 4 && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(4) && value == 3));\n         bag = this.newWith(3, 3, 3, 1);\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 1 && value == 3));\n-        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object == 3 || object == 1));\n-        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object == 300 || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(1) && value == 3));\n+        Assert.assertTrue(bag.allSatisfyWithOccurrences((object, value) -> object.equals(3) || object == 1));\n+        Assert.assertFalse(bag.allSatisfyWithOccurrences((object, value) -> object.equals(300) || object == 1));\n     }\n \n     @Test\n     public void detectWithOccurrences()\n     {\n         Bag<Integer> bag = this.newWith(3, 3, 3, 2, 2, 1);\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3 && value == 3));\n-        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object == 3));\n-        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object == 1 && value == 1));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 1 && value == 10));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 10 && value == 5));\n-        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object == 100));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3) && value == 3));\n+        Assert.assertEquals((Integer) 3, bag.detectWithOccurrences((object, value) -> object.equals(3)));\n+        Assert.assertEquals((Integer) 1, bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 1));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(1) && value == 10));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(10) && value == 5));\n+        Assert.assertNull(bag.detectWithOccurrences((object, value) -> object.equals(100)));\n     }\n \n     @Test\n"}}, {"oid": "7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "url": "https://github.com/eclipse/eclipse-collections/commit/7768260b64b0accf7ae3ef2e8f1d5dc07ef5f275", "message": "Implement Bag.anySatisfyWithOccurrences(), Bag.allSatisfyWithOccurrences(), Bag.noneSatisfyWithOccurrences(), Bag.detectWithOccurrences(). Closes #406.\n\nSigned-off-by: Alxander Goldberg <alexander.goldberg@bnymellon.com>", "committedDate": "2020-09-10T02:12:58Z", "type": "commit"}]}