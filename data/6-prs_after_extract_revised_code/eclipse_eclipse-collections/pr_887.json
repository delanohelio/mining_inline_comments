{"pr_number": 887, "pr_title": "(Partially) Closes #351: Javadocs for map APIs", "pr_createdAt": "2020-05-18T15:32:34Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/887", "timeline": [{"oid": "c430379b0e987383fb0c8bf20686992ff7127597", "url": "https://github.com/eclipse/eclipse-collections/commit/c430379b0e987383fb0c8bf20686992ff7127597", "message": "Create a simple utility to aid in Javadoc creation\n\nThis will copy back any Javadocs present in a generated class back to the corresponding template. This is so that you can open a generated class in your IDE and benefit from auto complete and auto formatting while writing the Javadoc, and then copy it back to the .stg template file which will apply to all other specializations. Invoke it with pairs of arguments: the generated class name followed by the template path (relative to the template root). it assumes the API folder is a sibling to the working directory.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:03:59Z", "type": "commit"}, {"oid": "8189c2c1967c5f0de902645829d3dd3259e32e23", "url": "https://github.com/eclipse/eclipse-collections/commit/8189c2c1967c5f0de902645829d3dd3259e32e23", "message": "Add @Override annotations for tap() (and one toString()) implementations.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:04:00Z", "type": "forcePushed"}, {"oid": "9fbc08073400fd802035423b0518d97dcc9acdf3", "url": "https://github.com/eclipse/eclipse-collections/commit/9fbc08073400fd802035423b0518d97dcc9acdf3", "message": "Javadocs for primitiveValuesMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:17:39Z", "type": "commit"}, {"oid": "cc0195d592b5e91de54d0a77df59af26c9a3ac03", "url": "https://github.com/eclipse/eclipse-collections/commit/cc0195d592b5e91de54d0a77df59af26c9a3ac03", "message": "Javadocs for primitivePrimitiveMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:18:03Z", "type": "commit"}, {"oid": "d9565fa61dbfc9c981fbfc83bdd7cde35b9ea124", "url": "https://github.com/eclipse/eclipse-collections/commit/d9565fa61dbfc9c981fbfc83bdd7cde35b9ea124", "message": "Javadocs for mutablePrimitivePrimitiveMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:18:12Z", "type": "commit"}, {"oid": "24431369ae160745b0a2434fc0dc490ddbea47d4", "url": "https://github.com/eclipse/eclipse-collections/commit/24431369ae160745b0a2434fc0dc490ddbea47d4", "message": "Javadocs for primitiveObjectMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:18:20Z", "type": "commit"}, {"oid": "12d2da156cfadb0b41c4e7f42c3bd3c60ec28507", "url": "https://github.com/eclipse/eclipse-collections/commit/12d2da156cfadb0b41c4e7f42c3bd3c60ec28507", "message": "Javadocs for objectPrimitiveMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:18:25Z", "type": "commit"}, {"oid": "e5323af05825b695d91166b974daa7c689d94a46", "url": "https://github.com/eclipse/eclipse-collections/commit/e5323af05825b695d91166b974daa7c689d94a46", "message": "Javadocs for mutableObjectPrimitiveMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:18:36Z", "type": "commit"}, {"oid": "cf07f0be55b98858972ab64b7bb5b2a5066e2874", "url": "https://github.com/eclipse/eclipse-collections/commit/cf07f0be55b98858972ab64b7bb5b2a5066e2874", "message": "Add @Override annotations for tap() (and one toString()) implementations.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:18:44Z", "type": "forcePushed"}, {"oid": "3c5b014df777e8c46ee4571b00b2e45cfaef34a7", "url": "https://github.com/eclipse/eclipse-collections/commit/3c5b014df777e8c46ee4571b00b2e45cfaef34a7", "message": "Javadocs for immutableObjectPrimitiveMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:18Z", "type": "commit"}, {"oid": "bce6520f2cf06503466f95a1ddcff8c4118d42e1", "url": "https://github.com/eclipse/eclipse-collections/commit/bce6520f2cf06503466f95a1ddcff8c4118d42e1", "message": "Javadocs for immutablePrimitiveObjectMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:25Z", "type": "commit"}, {"oid": "5be50f66c85182cc16679bf75a4afbe0d5ec4e4f", "url": "https://github.com/eclipse/eclipse-collections/commit/5be50f66c85182cc16679bf75a4afbe0d5ec4e4f", "message": "Javadocs for immutablePrimitivePrimitiveMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:25Z", "type": "commit"}, {"oid": "7cee562ffa67a9c48b561f0c8236903346656dd6", "url": "https://github.com/eclipse/eclipse-collections/commit/7cee562ffa67a9c48b561f0c8236903346656dd6", "message": "Javadocs for mutablePrimitiveObjectMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:25Z", "type": "commit"}, {"oid": "dfe5eac2b124f288de1b05e817cd535de95d89b1", "url": "https://github.com/eclipse/eclipse-collections/commit/dfe5eac2b124f288de1b05e817cd535de95d89b1", "message": "Javadocs for mutablePrimitiveValuesMaps.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:25Z", "type": "commit"}, {"oid": "10e80cccca78210078cdd97bd4584ee2036c0adf", "url": "https://github.com/eclipse/eclipse-collections/commit/10e80cccca78210078cdd97bd4584ee2036c0adf", "message": "Update Checkstyle DTD to point to correct location.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:25Z", "type": "commit"}, {"oid": "3c678013e5f5c16878733f4d18afc095a2ab8da0", "url": "https://github.com/eclipse/eclipse-collections/commit/3c678013e5f5c16878733f4d18afc095a2ab8da0", "message": "Proposed checkstyle change: remove \\r check\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:26Z", "type": "commit"}, {"oid": "80b5f01ee1fe63ef0bd325b22dbc52429e80cca3", "url": "https://github.com/eclipse/eclipse-collections/commit/80b5f01ee1fe63ef0bd325b22dbc52429e80cca3", "message": "Add @Override annotations for tap() (and one toString()) implementations.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:36Z", "type": "commit"}, {"oid": "80b5f01ee1fe63ef0bd325b22dbc52429e80cca3", "url": "https://github.com/eclipse/eclipse-collections/commit/80b5f01ee1fe63ef0bd325b22dbc52429e80cca3", "message": "Add @Override annotations for tap() (and one toString()) implementations.\n\nSigned-off-by: John Dimeo <dimeo@elderresearch.com>", "committedDate": "2020-06-01T16:32:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMjE0Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r436322143", "bodyText": "This utility is awesome! May be if it is possible, can you contribute another utility which will move code to the template? It will be super useful to be able to write code in one of the primitive files and reverse engineer it to a template. It need not be fully polished and working, but should provide a starting point. Thoughts?", "author": "nikhilnanivadekar", "createdAt": "2020-06-07T03:57:59Z", "path": "eclipse-collections-code-generator/src/test/java/org/eclipse/collections/codegenerator/tools/JavadocUtil.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Goldman Sachs and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * and Eclipse Distribution License v. 1.0 which accompany this distribution.\n+ * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html\n+ * and the Eclipse Distribution License is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ */\n+\n+package org.eclipse.collections.codegenerator.tools;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Deque;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.collections.codegenerator.EclipseCollectionsCodeGenerator;\n+import org.eclipse.collections.codegenerator.model.Primitive;\n+\n+/**\n+ * <p>This class copies the Javadocs from a generated class back to the template.\n+ * This is helpful for writing the Javadocs on a \"real\" class to benefit from IDE\n+ * support (auto complete of parameter names, for example) that you don't get\n+ * when directly editing the template.</p>\n+ *\n+ * <p>This class is in the test classpath to keep it out of public API, but it is\n+ * not a test.</p>\n+ *\n+ * <p>This assumes it is running in the same folder as the code generator and the\n+ * API folder with the templates is a sibling folder. You can specify any number\n+ * of pairs of arguments, for example:\n+ * <blockquote><code>\n+ * org.eclipse.collections.api.map.primitive.IntValuesMap\n+ * api/map/primitiveValuesMap\n+ * org.eclipse.collections.api.map.primitive.CharIntMap\n+ * api/map/primitivePrimitiveMap\n+ * </code></blockquote>\n+ * </p>\n+ *\n+ * @author <a href=\"dimeo@elderresearch.com\">John Dimeo</a>\n+ * @since May 8, 2020\n+ */\n+public class JavadocUtil\n+{\n+    private static final Path TEMPLATE_ROOT = Paths.get(\"src\", \"main\", \"resources\");\n+    private static final Path API_ROOT = Paths.get(\"..\", \"eclipse-collections-api\");\n+\n+    private String generatedClass;\n+    private String template;\n+\n+    public JavadocUtil generatedClass(String gc)\n+    {\n+        this.generatedClass = gc;\n+        return this;\n+    }\n+\n+    public JavadocUtil template(String t)\n+    {\n+        this.template = t;\n+        return this;\n+    }\n+\n+    public void process() throws IOException\n+    {\n+        generatedClass = generatedClass.replace('.', File.separatorChar);\n+        if (!generatedClass.endsWith(\".java\"))\n+        {\n+            generatedClass += \".java\";\n+        }\n+        if (!template.endsWith(\".stg\"))\n+        {\n+            template  += \".stg\";\n+        }\n+\n+        Path src = API_ROOT.resolve(EclipseCollectionsCodeGenerator.GENERATED_SOURCES_LOCATION.replace('/', File.separatorChar) + generatedClass);\n+        Path dest = TEMPLATE_ROOT.resolve(template.replace('/', File.separatorChar));\n+\n+        if (!Files.isRegularFile(src) || !Files.isRegularFile(dest))\n+        {\n+            throw new IllegalArgumentException(\"Specified files are not readable\");\n+        }\n+\n+        List<String> srcLines = Files.readAllLines(src);\n+        List<String> destLines = Files.readAllLines(dest);\n+        Deque<String> javadocLines = new LinkedList<>();\n+\n+        boolean inJavadoc = false;\n+        boolean matchNextLine = false;\n+        for (String srcLine : srcLines)\n+        {\n+            String srcLineNorm = normalizeGeneratedClassLine(srcLine);\n+            String srcLineTrimmed = srcLineNorm.trim();\n+            if (srcLineTrimmed.isEmpty())\n+            {\n+                continue;\n+            }\n+\n+            // Annotations belong with the javadoc\n+            if (srcLineTrimmed.startsWith(\"@\"))\n+            {\n+                javadocLines.add(srcLineNorm);\n+                continue;\n+            }\n+\n+            if (matchNextLine)\n+            {\n+                findLineReplacingJavadoc(destLines, srcLineTrimmed, javadocLines);\n+                matchNextLine = false;\n+                continue;\n+            }\n+\n+            if (srcLineTrimmed.startsWith(\"/**\"))\n+            {\n+                inJavadoc = true;\n+                javadocLines.clear();\n+            }\n+            if (inJavadoc)\n+            {\n+                javadocLines.add(srcLineNorm);\n+                if (srcLineTrimmed.startsWith(\"*/\") || srcLineTrimmed.endsWith(\"*/\"))\n+                {\n+                    inJavadoc = false;\n+                    matchNextLine = true;\n+                }\n+            }\n+        }\n+\n+        Files.write(dest, destLines);\n+\n+        System.out.println(\"Copied Javadocs from \" + generatedClass + \" back to \" + template);\n+    }\n+\n+    private static void findLineReplacingJavadoc(List<String> lines, String matchLine, Deque<String> javadoc)\n+    {\n+        ListIterator<String> iter = lines.listIterator();\n+        while (iter.hasNext())\n+        {\n+            String line = normalizeTemplateLine(iter.next().trim());\n+            // Definitions aren't candidates for matches\n+            if (line.isEmpty() || line.contains(\"::=\"))\n+            {\n+                continue;\n+            }\n+\n+            if (line.equals(matchLine))\n+            {\n+                // Remove existing javadoc\n+                iter.previous();\n+                while (iter.hasPrevious()\n+                    && (line = iter.previous().trim()).startsWith(\"@\")\n+                    || line.startsWith(\"*/\")\n+                    || line.startsWith(\"*\")\n+                    || line.startsWith(\"/**\"))\n+                {\n+                    iter.remove();\n+                }\n+                iter.next();\n+                javadoc.forEach(iter::add);\n+                return;\n+            }\n+        }\n+        System.err.println(\"Could not match line \" + matchLine);\n+        return;\n+    }\n+\n+    // Remove all types and type placeholders so lines will exactly match\n+    private static String normalizeTemplateLine(String s)\n+    {\n+        s = s.replace(\"<type1>\", \"<type>\").replace(\"<type2>\", \"<type>\");\n+        s = s.replace(\"<name1>\", \"<name>\").replace(\"<name2>\", \"<name>\");\n+        // boolean is a common return value for is...() methods - normalize\n+        // it to match normalized lines from the generated class. Also remove \\\n+        return s.replace(\"boolean\", \"<type>\").replaceAll(Pattern.quote(\"\\\\\"), \"\");\n+    }\n+\n+    // TODO: Multiple types/names not properly supported\n+    private static String normalizeGeneratedClassLine(String s)\n+    {\n+        for (Primitive p : Primitive.values())\n+        {\n+            s = s.replace(p.type, \"<type>\").replace(p.getName(), \"<name>\");\n+        }\n+        // ... but \"interface\" gets erroneously replaced\n+        return s.replace(\"<type>erface\", \"interface\");\n+    }\n+\n+    public static void main(String... args) throws IOException\n+    {\n+        if (args.length < 2 || args.length % 2 > 0)\n+        {\n+            throw new IllegalArgumentException(\"You must specify pairs of file paths: a generated class followed by its template\");\n+        }\n+\n+        for (int i = 0; i < args.length; i += 2)\n+        {\n+            new JavadocUtil().generatedClass(args[i]).template(args[i + 1]).process();\n+        }\n+    }\n+}", "originalCommit": "80b5f01ee1fe63ef0bd325b22dbc52429e80cca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI2NjIyNw==", "url": "https://github.com/eclipse/eclipse-collections/pull/887#discussion_r571266227", "bodyText": "@nikhilnanivadekar I haven't forgotten about this request, but regretfully I'm not sure when I'll have the time to tackle it!", "author": "jdimeo", "createdAt": "2021-02-05T21:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMjE0Mw=="}], "type": "inlineReview", "revised_code": null}]}