{"pr_number": 3084, "pr_title": "Otp2 div filter updates", "pr_createdAt": "2020-05-26T09:34:20Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084", "timeline": [{"oid": "83e67ab9ed4158c6a9de4516f5c5c221df39cce7", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/83e67ab9ed4158c6a9de4516f5c5c221df39cce7", "message": "Clean code - A few spelling errors in the documentation is fixed.", "committedDate": "2020-05-20T11:18:31Z", "type": "commit"}, {"oid": "18fd69f61faafd50271172d04c559e677193e518", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/18fd69f61faafd50271172d04c559e677193e518", "message": "Add \"Transit, No Airplane\" to the list of available modes to choose from in the OTP Client. Only Norwegian translation is added.", "committedDate": "2020-05-20T11:24:32Z", "type": "commit"}, {"oid": "836477f1d34418ff7c606d27fc40210f9d151c0c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/836477f1d34418ff7c606d27fc40210f9d151c0c", "message": "Add utility method to calculate distance between to locations to GeometryUtils.", "committedDate": "2020-05-20T12:42:20Z", "type": "commit"}, {"oid": "2730851ffb662cde56c43616aefa086b1f69f1e2", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2730851ffb662cde56c43616aefa086b1f69f1e2", "message": "Clean code - Minor refactorings and toString() improvements.", "committedDate": "2020-05-24T23:33:52Z", "type": "commit"}, {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8cc83a8a28a2d864b481ad3b0ad16dae45bdb338", "message": "Remove all transit itineraries with cost higher than the best street-only itinerary.\nThis replaces the existing LongTransitWalkingFilter, witch solved a narrower set of\nuse-cases.", "committedDate": "2020-05-25T00:01:39Z", "type": "commit"}, {"oid": "6e90947460f413b91812520f37952e064886729a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6e90947460f413b91812520f37952e064886729a", "message": "Itinerary sort order\n- Arrive by: STREET_ONLY, departure-time(latest-first), generalized-cost, num-of-transfers, arrival-time.\n- Depart after: STREET_ONLY, arrival-time, generalized-cost, num-of-transfers, departure-time.\n- Prepare OtpDefaultSortOrder to be configurable by making it more reusable.", "committedDate": "2020-05-25T00:01:52Z", "type": "commit"}, {"oid": "ac227bb1802b4ac1314e429091d748e24b9862fb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ac227bb1802b4ac1314e429091d748e24b9862fb", "message": "Clean code - Add Itinerary.toStr(..) method and a new TestItineraryBuilder to simplify unit-testing\nand improve readability.", "committedDate": "2020-05-25T00:01:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwMzgyNw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430303827", "bodyText": "Doc:\nhttps://upload.wikimedia.org/wikipedia/commons/3/3e/WGS84_mean_Earth_radius.svg\nHannes Junnila12:07\nhttps://www.cambridge.org/core/journals/journal-of-navigation/article/sphere-to-spheroid-comparisons/E757B940C8C622A064276AC33CDC15C0\nhttps://www.cambridge.org/core/journals/journal-of-navigation/article/sphere-to-spheroid-comparisons/E757B940C8C622A064276AC33CDC15C0/core-reader", "author": "t2gran", "createdAt": "2020-05-26T10:12:06Z", "path": "src/main/java/org/opentripplanner/common/geometry/GeometryUtils.java", "diffHunk": "@@ -153,6 +156,23 @@ else if (r > 1.0)\n         return r;\n     }\n \n+\n+    /**\n+    */\n+    public static double calculateDistance(Coordinate from, Coordinate to) {\n+        try {\n+            // the following code is based on JTS.orthodromicDistance( start, end, crs )\n+            GeodeticCalculator gc = new GeodeticCalculator(WGS84_XY);\n+            gc.setStartingPosition(JTS.toDirectPosition(from, WGS84_XY));\n+            gc.setDestinationPosition(JTS.toDirectPosition(to, WGS84_XY));\n+\n+            return gc.getOrthodromicDistance();\n+        }\n+        catch (TransformException e) {\n+            throw new IllegalStateException(e.getMessage(), e);\n+        }\n+    }\n+", "originalCommit": "836477f1d34418ff7c606d27fc40210f9d151c0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c63529c9684c9a90cb34dd85bfec7ecca1156f5", "chunk": "diff --git a/src/main/java/org/opentripplanner/common/geometry/GeometryUtils.java b/src/main/java/org/opentripplanner/common/geometry/GeometryUtils.java\nindex f825b73de..516996ab4 100644\n--- a/src/main/java/org/opentripplanner/common/geometry/GeometryUtils.java\n+++ b/src/main/java/org/opentripplanner/common/geometry/GeometryUtils.java\n\n@@ -156,23 +153,6 @@ public class GeometryUtils {\n         return r;\n     }\n \n-\n-    /**\n-    */\n-    public static double calculateDistance(Coordinate from, Coordinate to) {\n-        try {\n-            // the following code is based on JTS.orthodromicDistance( start, end, crs )\n-            GeodeticCalculator gc = new GeodeticCalculator(WGS84_XY);\n-            gc.setStartingPosition(JTS.toDirectPosition(from, WGS84_XY));\n-            gc.setDestinationPosition(JTS.toDirectPosition(to, WGS84_XY));\n-\n-            return gc.getOrthodromicDistance();\n-        }\n-        catch (TransformException e) {\n-            throw new IllegalStateException(e.getMessage(), e);\n-        }\n-    }\n-\n     private static Coordinate[] convertPath(List<LngLatAlt> path) {\n         Coordinate[] coords = new Coordinate[path.size()];\n         int i = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyNjYwNA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430326604", "bodyText": "Check the mode LegSwitch, is it street or transit, none or both?", "author": "t2gran", "createdAt": "2020-05-26T10:55:59Z", "path": "src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java", "diffHunk": "@@ -39,6 +41,9 @@ else if(leg.isOnStreetNonTransit()) {\n             if(!leg.isWalkingLeg()) {\n                 walkOnly = false;\n             }\n+            if(leg.isTransitLeg()) {\n+              this.streetOnly = false;\n+            }", "originalCommit": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMzU2MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r431503560", "bodyText": "LEG_SWITCH is new explicit ignored, witch is correct if the LEG_SWITCH is ever reintroduced.", "author": "t2gran", "createdAt": "2020-05-27T23:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyNjYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "dfb3305021d66cb1da9ed98497376c524b0333f6", "chunk": "diff --git a/src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java b/src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java\nindex 52d2aec2d..b5515c01b 100644\n--- a/src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java\n+++ b/src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java\n\n@@ -38,11 +45,11 @@ class ItinerariesCalculateLegTotals {\n                 nonTransitTimeSeconds += dt;\n                 nonTransitDistanceMeters += leg.distanceMeters;\n             }\n-            if(!leg.isWalkingLeg()) {\n+            if (!leg.isWalkingLeg()) {\n                 walkOnly = false;\n             }\n-            if(leg.isTransitLeg()) {\n-              this.streetOnly = false;\n+            if (!leg.isOnStreetNonTransit()) {\n+                this.streetOnly = false;\n             }\n         }\n         this.waitingTimeSeconds = totalDurationSeconds\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyOTI4Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430329286", "bodyText": "Maybe use \"true\" as default value.", "author": "t2gran", "createdAt": "2020-05-26T11:01:16Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "diffHunk": "@@ -28,6 +28,7 @@\n     private int maxLimit = 20;\n     private int groupByTransferCost = 10 * 60;\n     private Instant latestDepartureTimeLimit = null;\n+    private boolean removeTransitWithHigherCostThenWalkOnly = false;", "originalCommit": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMzc2OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r431503768", "bodyText": "Changed so it is enabled by default.", "author": "t2gran", "createdAt": "2020-05-27T23:42:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyOTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java\nindex 06da1c7c3..f09bceaae 100644\n--- a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java\n+++ b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java\n\n@@ -28,7 +28,7 @@ public class ItineraryFilterChainBuilder {\n     private int maxLimit = 20;\n     private int groupByTransferCost = 10 * 60;\n     private Instant latestDepartureTimeLimit = null;\n-    private boolean removeTransitWithHigherCostThenWalkOnly = false;\n+    private boolean removeTransitWithHigherCostThenWalkOnly = true;\n     private boolean debug;\n     private Consumer<Itinerary> maxLimitReachedSubscriber;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyOTk1Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430329952", "bodyText": "Reanme to \"StreetOnly\" and update the JavaDoc", "author": "t2gran", "createdAt": "2020-05-26T11:02:33Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "diffHunk": "@@ -94,6 +95,21 @@ public void setGroupByTransferCost(int cost) {\n     public void setMaxLimitReachedSubscriber(Consumer<Itinerary> maxLimitReachedSubscriber) {\n         this.maxLimitReachedSubscriber = maxLimitReachedSubscriber;\n     }\n+    /**\n+     * The direct street search(walking) is not pruning the transit search, so in some cases we get\n+     * \"silly\" transit itineraries that is marginally better on travel-duration compared with a\n+     * walking-all-the-way itinerary. Calling this method will enable the filter witch remove all\n+     * itineraries with a generalized-cost that is higher than the best on-street-all-the-way\n+     * itinerary.\n+     * <p>\n+     * The default is NOT to include this filter.\n+     * <p>\n+     * This filter only have an effect, if an on-street-all-the-way(WALK, BICYCLE, CAR) itinerary\n+     * exist.\n+     */\n+    public void removeTransitWithHigherCostThenWalkOnly() {\n+        this.removeTransitWithHigherCostThenWalkOnly = true;\n+    }", "originalCommit": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java\nindex 06da1c7c3..f09bceaae 100644\n--- a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java\n+++ b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java\n\n@@ -96,19 +96,21 @@ public class ItineraryFilterChainBuilder {\n         this.maxLimitReachedSubscriber = maxLimitReachedSubscriber;\n     }\n     /**\n-     * The direct street search(walking) is not pruning the transit search, so in some cases we get\n-     * \"silly\" transit itineraries that is marginally better on travel-duration compared with a\n-     * walking-all-the-way itinerary. Calling this method will enable the filter witch remove all\n-     * itineraries with a generalized-cost that is higher than the best on-street-all-the-way\n-     * itinerary.\n+     * The direct street search(walk, bicycle, car) is not pruning the transit search, so in some\n+     * cases we get \"silly\" transit itineraries that is marginally better on travel-duration\n+     * compared with a on-street-all-the-way itinerary. Use this method to turn this filter\n+     * on/off.\n      * <p>\n-     * The default is NOT to include this filter.\n+     * The filter remove all itineraries with a generalized-cost that is higher than the best\n+     * on-street-all-the-way itinerary.\n+     * <p>\n+     * This filter is enabled by default.\n      * <p>\n      * This filter only have an effect, if an on-street-all-the-way(WALK, BICYCLE, CAR) itinerary\n      * exist.\n      */\n-    public void removeTransitWithHigherCostThenWalkOnly() {\n-        this.removeTransitWithHigherCostThenWalkOnly = true;\n+    public void removeTransitWithHigherCostThanBestOnStreetOnly(boolean value) {\n+        this.removeTransitWithHigherCostThenWalkOnly = value;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjA1OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430332058", "bodyText": "Still walk in the javadoc.", "author": "t2gran", "createdAt": "2020-05-26T11:06:39Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.opentripplanner.routing.algorithm.filterchain.filters;\n+\n+import org.opentripplanner.model.plan.Itinerary;\n+import org.opentripplanner.routing.algorithm.filterchain.ItineraryFilter;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Filter itineraries based on duration, compared with a walk-all-the-way itinerary(if it exist).\n+ * If an itinerary is not faster than the walk-all-the-way minus a given slack, then the transit\n+ * itinerary is removed.\n+ *\n+ */\n+public class RemoveTransitIfStreetOnlyIsBetterFilter implements ItineraryFilter {", "originalCommit": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java\nindex a19744d06..7714e7d93 100644\n--- a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java\n+++ b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java\n\n@@ -9,10 +9,9 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n /**\n- * Filter itineraries based on duration, compared with a walk-all-the-way itinerary(if it exist).\n- * If an itinerary is not faster than the walk-all-the-way minus a given slack, then the transit\n- * itinerary is removed.\n- *\n+ * Filter itineraries based on generalizedCost, compared with a on-street-all-the-way itinerary(if\n+ * it exist). If an itinerary is slower than the best all-the-way-on-street itinerary, then the\n+ * transit itinerary is removed.\n  */\n public class RemoveTransitIfStreetOnlyIsBetterFilter implements ItineraryFilter {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjI0Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430332247", "bodyText": "indentation", "author": "t2gran", "createdAt": "2020-05-26T11:07:01Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.opentripplanner.routing.algorithm.filterchain.filters;\n+\n+import org.opentripplanner.model.plan.Itinerary;\n+import org.opentripplanner.routing.algorithm.filterchain.ItineraryFilter;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Filter itineraries based on duration, compared with a walk-all-the-way itinerary(if it exist).\n+ * If an itinerary is not faster than the walk-all-the-way minus a given slack, then the transit\n+ * itinerary is removed.\n+ *\n+ */\n+public class RemoveTransitIfStreetOnlyIsBetterFilter implements ItineraryFilter {\n+\n+    @Override\n+    public String name() {\n+        return \"transit-vs-street-filter\";\n+    }\n+\n+    @Override\n+    public List<Itinerary> filter(List<Itinerary> itineraries) {\n+        // Find the best walk-all-the-way option\n+        Optional<Itinerary> bestStreetOp = itineraries\n+                .stream()\n+            .filter(Itinerary::isOnStreetAllTheWay)\n+            .min(Comparator.comparingInt(l -> l.generalizedCost));", "originalCommit": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java\nindex a19744d06..7714e7d93 100644\n--- a/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java\n+++ b/src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java\n\n@@ -9,10 +9,9 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n /**\n- * Filter itineraries based on duration, compared with a walk-all-the-way itinerary(if it exist).\n- * If an itinerary is not faster than the walk-all-the-way minus a given slack, then the transit\n- * itinerary is removed.\n- *\n+ * Filter itineraries based on generalizedCost, compared with a on-street-all-the-way itinerary(if\n+ * it exist). If an itinerary is slower than the best all-the-way-on-street itinerary, then the\n+ * transit itinerary is removed.\n  */\n public class RemoveTransitIfStreetOnlyIsBetterFilter implements ItineraryFilter {\n \n"}}, {"oid": "7dc8d30c74c45c3e5cea26539b2fc0c77af16701", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7dc8d30c74c45c3e5cea26539b2fc0c77af16701", "message": "Add back the translators context comment removed in 18fd69f6.", "committedDate": "2020-05-27T22:53:58Z", "type": "commit"}, {"oid": "6c63529c9684c9a90cb34dd85bfec7ecca1156f5", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6c63529c9684c9a90cb34dd85bfec7ecca1156f5", "message": "Revert \"Add utility method to calculate distance between to locations to GeometryUtils.\nThis functionality exist in the SphericalDistanceLibrary\". This reverts part of commit\n836477f1.", "committedDate": "2020-05-27T22:59:20Z", "type": "commit"}, {"oid": "dfb3305021d66cb1da9ed98497376c524b0333f6", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/dfb3305021d66cb1da9ed98497376c524b0333f6", "message": "Exclude LEG_SWITCH from aggregation of itinerary flag and totals.", "committedDate": "2020-05-27T23:12:47Z", "type": "commit"}, {"oid": "482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "message": "Enable RemoveTransitIfStreetOnlyIsBetterFilter by default.", "committedDate": "2020-05-27T23:31:31Z", "type": "commit"}, {"oid": "482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/482b39f3e09887e2f76fbcfffd9d743e4e1948e2", "message": "Enable RemoveTransitIfStreetOnlyIsBetterFilter by default.", "committedDate": "2020-05-27T23:31:31Z", "type": "forcePushed"}, {"oid": "632f27bd1a8edba9f06bce59ffe7eb9e62f8bb46", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/632f27bd1a8edba9f06bce59ffe7eb9e62f8bb46", "message": "Clean Code - Remove duplicate test itinerary factory - FilterChainTestData.\nMigrate all test using the FilterChainTestData to use TestItineraryBuilder instead.", "committedDate": "2020-05-28T01:00:44Z", "type": "commit"}, {"oid": "cd291c7d15d5cf21a785354e984494f3f5ce3256", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/cd291c7d15d5cf21a785354e984494f3f5ce3256", "message": "Clean code/bugfix in DebugFilterWrapper\n - The DebugFilterWrapper was not working properly; Deleted itineraries was not added to the list\n   of deleted itineraries, with the result that the next filter-in-chain would also \"see\" the deleted\n   itinerary. This could then influence the result of the reminding filters.\n - Clean code: Some code cleanup like making methods `final` to prevent overriding, forcing all filters\n   to override the `removeItineraries()` method. Also, sort on `cost` then `number-of-transfers` in the\n   SortOnGeneralizedCost filter. Simplify the GroupByFilter and merging group-ids.", "committedDate": "2020-05-28T13:40:58Z", "type": "commit"}, {"oid": "26a066a2a44e43b4b8d0d84b6f9ac90d88cad4fb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/26a066a2a44e43b4b8d0d84b6f9ac90d88cad4fb", "message": "SameTripsHigherCostFilter - Remove short(<10% of distance) first/last legs and then group  the itineraries by the main trips. Then remove all, but one leg based on generalized-cost  for each group. This filter removes some of the variation cased by the timetable-view.", "committedDate": "2020-05-28T13:46:52Z", "type": "commit"}, {"oid": "380ce4b3f204420dd9958fd42b82bcfcaf8c6d95", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/380ce4b3f204420dd9958fd42b82bcfcaf8c6d95", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_div_filter_updates", "committedDate": "2020-05-28T14:10:34Z", "type": "commit"}, {"oid": "4702a24fa7ee71852a646a374ae20c87a2dca05d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4702a24fa7ee71852a646a374ae20c87a2dca05d", "message": "Merge branch 'dev-2.x' into otp2_div_filter_updates", "committedDate": "2020-06-02T09:48:01Z", "type": "commit"}]}