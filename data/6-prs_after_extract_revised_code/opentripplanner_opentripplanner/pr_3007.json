{"pr_number": 3007, "pr_title": "Move SimpleTransfers from being edges to graph field", "pr_createdAt": "2020-03-18T10:04:59Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007", "timeline": [{"oid": "0e3d031b22946322f8b47aef06bd90609fa67fe3", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0e3d031b22946322f8b47aef06bd90609fa67fe3", "message": "Move SimpleTransfers from being edges to graph field", "committedDate": "2020-03-18T10:20:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTMyNw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395515327", "bodyText": "What does this fix? It seems to be a separate change not related to this pull request.", "author": "gmellemstrand", "createdAt": "2020-03-20T09:19:32Z", "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "diffHunk": "@@ -112,6 +113,8 @@ public static Kryo makeKryo() {\n         // We might actually want to manually register a serializer for every class, to be safe.\n         kryo.setRegistrationRequired(false);\n         kryo.setReferences(true);\n+        // We serialize in two steps, graph and edges. Reference tracking must not be reset in between.", "originalCommit": "93825cd27f9372019bd348f477a5740f3212533b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTM3MQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395601371", "bodyText": "Yes, this is not needed. The Serailizer for HashMultimap however is needed for the childStops in Station to be correctly serailized. Otherwise it fails with the following error when starting up.\n13:09:15.015 ERROR (OTPMain.java:43) An uncaught error occurred inside OTP: Error during Java deserialization.\nSerialization trace:\ntransfersByStop (org.opentripplanner.routing.graph.Graph)\ngraph (org.opentripplanner.routing.graph.SerializedGraphObject)\ncom.esotericsoftware.kryo.KryoException: Error during Java deserialization.\nSerialization trace:\ntransfersByStop (org.opentripplanner.routing.graph.Graph)\ngraph (org.opentripplanner.routing.graph.SerializedGraphObject)\n\tat com.esotericsoftware.kryo.serializers.JavaSerializer.read(JavaSerializer.java:68) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:813) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.routing.graph.Graph.load(Graph.java:711) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.routing.graph.Graph.load(Graph.java:702) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.standalone.OTPMain.startOTPServer(OTPMain.java:100) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.standalone.OTPMain.main(OTPMain.java:36) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\nCaused by: java.lang.NullPointerException: null\n\tat org.opentripplanner.model.TransitEntity.hashCode(TransitEntity.java:43) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat java.base/java.util.HashMap.hash(HashMap.java:339) ~[na:na]\n\tat java.base/java.util.HashMap.put(HashMap.java:612) ~[na:na]\n\tat java.base/java.util.HashSet.readObject(HashSet.java:342) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567) ~[na:na]\n\tat java.base/java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1160) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2271) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2410) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2304) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2410) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2304) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:464) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:422) ~[na:na]\n\tat com.google.common.collect.Serialization.populateMultimap(Serialization.java:173) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.google.common.collect.HashMultimap.readObject(HashMultimap.java:136) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567) ~[na:na]\n\tat java.base/java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1160) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2271) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:464) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:422) ~[na:na]\n\tat com.esotericsoftware.kryo.serializers.JavaSerializer.read(JavaSerializer.java:66) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\t... 11 common frames omitted", "author": "hannesj", "createdAt": "2020-03-20T12:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0890c0325b006ae7e22e902bee9c7dd9f7295", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java b/src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java\nindex ce5a763c9..9c51a863f 100644\n--- a/src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java\n+++ b/src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java\n\n@@ -113,8 +112,6 @@ public class SerializedGraphObject implements Serializable {\n         // We might actually want to manually register a serializer for every class, to be safe.\n         kryo.setRegistrationRequired(false);\n         kryo.setReferences(true);\n-        // We serialize in two steps, graph and edges. Reference tracking must not be reset in between.\n-        kryo.setAutoReset(false);\n         kryo.addDefaultSerializer(TPrimitiveHash.class, ExternalizableSerializer.class);\n         kryo.register(TIntArrayList.class, new TIntArrayListSerializer());\n         kryo.register(TIntIntHashMap.class, new TIntIntHashMapSerializer());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395515609", "bodyText": "Now that this is not an edge anymore, it is probably more correct to place it in the model package.", "author": "gmellemstrand", "createdAt": "2020-03-20T09:20:09Z", "path": "src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java", "diffHunk": "@@ -1,96 +1,44 @@\n package org.opentripplanner.routing.edgetype;", "originalCommit": "93825cd27f9372019bd348f477a5740f3212533b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyMDg5OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395520898", "bodyText": "Maybe we could rename it too, but I'm not sure what would it should be called.", "author": "gmellemstrand", "createdAt": "2020-03-20T09:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxMDIyMQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395610221", "bodyText": "Moved, the question is if we should try to merge or move functionality to or from org.opentripplanner.routing.algorithm.raptor.transit.Transfer and/or org.opentripplanner.routing.algorithm.raptor.transit.request.TransferWithDuration. The only additional thing in the first is the RAPTOR stop index, which is not stable(?), and the latter one has the duration, which is not accurate, and can be wildly off, eg. if the transfer uses an elevator edge (relates to #2955).", "author": "hannesj", "createdAt": "2020-03-20T12:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxNTcwNw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395615707", "bodyText": "The Raptor stop index should be stable, and we could just have the Raptor stop index as a field on the Stop. This should probably be done as part of another pull request, when we clean up the TransitLayer classes and merge them with the OTP model classes where possible.", "author": "gmellemstrand", "createdAt": "2020-03-20T12:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c2b319a08e18aa82ac6ff5e1765dda83d3cb7c9", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java b/src/main/java/org/opentripplanner/model/SimpleTransfer.java\nsimilarity index 93%\nrename from src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java\nrename to src/main/java/org/opentripplanner/model/SimpleTransfer.java\nindex af8e494d2..c9432466f 100644\n--- a/src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java\n+++ b/src/main/java/org/opentripplanner/model/SimpleTransfer.java\n\n@@ -1,6 +1,5 @@\n-package org.opentripplanner.routing.edgetype;\n+package org.opentripplanner.model;\n \n-import org.opentripplanner.model.Stop;\n import org.opentripplanner.routing.graph.Edge;\n \n import java.io.Serializable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNjk5NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395516995", "bodyText": "Not really related to this pull request, as the functionality was the same before. I'm just wondering about the rationale behind this logic. A stop that already has at least one outgoing simpleTransfer (created by pathways) should not have a simpleTransfer generated?", "author": "gmellemstrand", "createdAt": "2020-03-20T09:22:52Z", "path": "src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java", "diffHunk": "@@ -82,23 +81,22 @@ public void buildGraph(\n \n             LOG.debug(\"Linking stop '{}' {}\", ts0.getStop(), ts0);\n ", "originalCommit": "93825cd27f9372019bd348f477a5740f3212533b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzM2OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395603369", "bodyText": "Looks like this comes from a time prior to the refactoring to use RATOR, as only the SimpleTransfers are used for transferring. The NearbyStopFinder will traverse pathways when looking for potential transfers, so they should be ok. Removed the check.", "author": "hannesj", "createdAt": "2020-03-20T12:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNjk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0890c0325b006ae7e22e902bee9c7dd9f7295", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java b/src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java\nindex 83de0581d..7dbc4634f 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java\n\n@@ -81,18 +81,11 @@ public class DirectTransferGenerator implements GraphBuilderModule {\n \n             LOG.debug(\"Linking stop '{}' {}\", ts0.getStop(), ts0);\n \n-            /* Determine the set of stops that are already reachable via other transfers */\n-            Set<Stop> connectedStops = new HashSet<>();\n-            for (SimpleTransfer transfer : graph.transfersByStop.get(ts0.getStop())) {\n-                Stop to = transfer.to;\n-                connectedStops.add(to);\n-            }\n-\n             /* Make transfers to each nearby stop that is the closest stop on some trip pattern. */\n             int n = 0;\n             for (NearbyStopFinder.StopAtDistance sd : nearbyStopFinder.findNearbyStopsConsideringPatterns(ts0)) {\n                 /* Skip the origin stop, loop transfers are not needed. */\n-                if (sd.tstop == ts0 || connectedStops.contains(sd.tstop.getStop())) continue;\n+                if (sd.tstop == ts0) continue;\n                 graph.transfersByStop.put(\n                     ts0.getStop(),\n                     new SimpleTransfer(ts0.getStop(), sd.tstop.getStop(), sd.distance, sd.edges)\n"}}, {"oid": "e8f0890c0325b006ae7e22e902bee9c7dd9f7295", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e8f0890c0325b006ae7e22e902bee9c7dd9f7295", "message": "Move SimpleTransfers from being edges to graph field", "committedDate": "2020-03-20T12:30:54Z", "type": "commit"}, {"oid": "017ee1328ee3aa8da4a7a25feeb044d05d6560da", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/017ee1328ee3aa8da4a7a25feeb044d05d6560da", "message": "Make graph serializable\n\nUnable to deserialize childStops HashSet in Station without this", "committedDate": "2020-03-20T12:31:01Z", "type": "commit"}, {"oid": "9c2b319a08e18aa82ac6ff5e1765dda83d3cb7c9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9c2b319a08e18aa82ac6ff5e1765dda83d3cb7c9", "message": "Move SimpleTransfer to org.opentripplanner.model", "committedDate": "2020-03-20T12:34:56Z", "type": "commit"}, {"oid": "9c2b319a08e18aa82ac6ff5e1765dda83d3cb7c9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9c2b319a08e18aa82ac6ff5e1765dda83d3cb7c9", "message": "Move SimpleTransfer to org.opentripplanner.model", "committedDate": "2020-03-20T12:34:56Z", "type": "forcePushed"}]}