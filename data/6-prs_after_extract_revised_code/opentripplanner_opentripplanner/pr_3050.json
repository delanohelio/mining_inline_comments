{"pr_number": 3050, "pr_title": "Allow multiple time-constrained accesses and egresses for each stop", "pr_createdAt": "2020-04-27T12:48:52Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3050", "timeline": [{"oid": "ec8b0ac284e8e6412354fe22210475f9aca7422f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ec8b0ac284e8e6412354fe22210475f9aca7422f", "message": "Use earliestDepartureTime for egress legs", "committedDate": "2020-04-28T07:51:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2ODg5Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3050#discussion_r416468897", "bodyText": "Use calculator", "author": "hannesj", "createdAt": "2020-04-28T09:30:37Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/McRangeRaptorWorkerState.java", "diffHunk": "@@ -76,11 +76,17 @@ private void setupIteration() {\n \n     @Override\n     public void setInitialTimeForIteration(RaptorTransfer accessLeg, int iterationDepartureTime) {\n+        // Earliest possible departure time from the origin using this Access.\n+        int departureTime = accessLeg.earliestDepartureTime(iterationDepartureTime);", "originalCommit": "b7ac4fa1572b7885c18fc428abbd71ba7ae0fbcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "435bd1898df1028ce936fd3cfd470e5af02fd9dc", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/McRangeRaptorWorkerState.java b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/McRangeRaptorWorkerState.java\nindex 226900692..8bac6900d 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/McRangeRaptorWorkerState.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/McRangeRaptorWorkerState.java\n\n@@ -75,13 +75,7 @@ final public class McRangeRaptorWorkerState<T extends RaptorTripSchedule> implem\n     }\n \n     @Override\n-    public void setInitialTimeForIteration(RaptorTransfer accessLeg, int iterationDepartureTime) {\n-        // Earliest possible departure time from the origin using this Access.\n-        int departureTime = accessLeg.earliestDepartureTime(iterationDepartureTime);\n-\n-        // This access is not available after the iteration departure time\n-        if (departureTime == -1) return;\n-\n+    public void setInitialTimeForIteration(RaptorTransfer accessLeg, int departureTime) {\n         addStopArrival(\n                 new AccessStopArrival<>(\n                         accessLeg,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDYzNQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3050#discussion_r416480635", "bodyText": "Pass costCalculator as an constructor argument", "author": "hannesj", "createdAt": "2020-04-28T09:49:07Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java", "diffHunk": "@@ -49,10 +49,19 @@ public DestinationArrivalPaths(\n     }\n \n     public void add(ArrivalView<T> egressStopArrival, RaptorTransfer egressLeg, int additionalCost) {\n+        int departureTime = calculator.departureTime(egressLeg, egressStopArrival.arrivalTime());\n \n-        int arrivalTime = calculator.plusDuration(egressStopArrival.arrivalTime(), egressLeg.durationInSeconds());\n+        if (departureTime == -1) { return; }\n \n-        DestinationArrival<T> destArrival = new DestinationArrival<>(egressLeg, egressStopArrival, arrivalTime, additionalCost);\n+        int arrivalTime = calculator.plusDuration(departureTime, egressLeg.durationInSeconds());\n+\n+        DestinationArrival<T> destArrival = new DestinationArrival<>(\n+            egressLeg,\n+            egressStopArrival,\n+            departureTime,\n+            arrivalTime,\n+            additionalCost // TODO Add wait cost here", "originalCommit": "ec8b0ac284e8e6412354fe22210475f9aca7422f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "435bd1898df1028ce936fd3cfd470e5af02fd9dc", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java\nindex ce62fd2f6..444687d19 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java\n\n@@ -29,41 +30,46 @@ import java.util.Collection;\n  */\n public class DestinationArrivalPaths<T extends RaptorTripSchedule> {\n     private final ParetoSet<Path<T>> paths;\n-    private final TransitCalculator calculator;\n+    private final TransitCalculator transitCalculator;\n+    private final CostCalculator costCalculator;\n     private final PathMapper<T> pathMapper;\n     private final DebugHandler<ArrivalView<T>> debugHandler;\n     private boolean reachedCurrentRound = false;\n \n     public DestinationArrivalPaths(\n             ParetoComparator<Path<T>> paretoComparator,\n-            TransitCalculator calculator,\n+            TransitCalculator transitCalculator,\n+            CostCalculator costCalculator,\n             PathMapper<T> pathMapper,\n             DebugHandlerFactory<T> debugHandlerFactory,\n             WorkerLifeCycle lifeCycle\n     ) {\n+        this.costCalculator = costCalculator;\n         this.paths = new ParetoSet<>(paretoComparator, debugHandlerFactory.paretoSetDebugPathListener());\n         this.debugHandler = debugHandlerFactory.debugStopArrival();\n-        this.calculator = calculator;\n+        this.transitCalculator = transitCalculator;\n         this.pathMapper = pathMapper;\n         lifeCycle.onPrepareForNextRound(round -> clearReachedCurrentRoundFlag());\n     }\n \n     public void add(ArrivalView<T> egressStopArrival, RaptorTransfer egressLeg, int additionalCost) {\n-        int departureTime = calculator.departureTime(egressLeg, egressStopArrival.arrivalTime());\n+        int departureTime = transitCalculator.departureTime(egressLeg, egressStopArrival.arrivalTime());\n \n         if (departureTime == -1) { return; }\n \n-        int arrivalTime = calculator.plusDuration(departureTime, egressLeg.durationInSeconds());\n+        int arrivalTime = transitCalculator.plusDuration(departureTime, egressLeg.durationInSeconds());\n+\n+        int waitTimeInSeconds = Math.abs(departureTime - egressStopArrival.arrivalTime());\n \n         DestinationArrival<T> destArrival = new DestinationArrival<>(\n             egressLeg,\n             egressStopArrival,\n-            departureTime,\n+            departureTime, // TODO: What about NoWaitTransitWorker\n             arrivalTime,\n-            additionalCost // TODO Add wait cost here\n+            additionalCost + costCalculator.waitCost(waitTimeInSeconds)\n         );\n \n-        if (calculator.exceedsTimeLimit(arrivalTime)) {\n+        if (transitCalculator.exceedsTimeLimit(arrivalTime)) {\n             debugRejectByTimeLimitOptimization(destArrival);\n         } else {\n             Path<T> path = pathMapper.mapToPath(destArrival);\n"}}, {"oid": "435bd1898df1028ce936fd3cfd470e5af02fd9dc", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/435bd1898df1028ce936fd3cfd470e5af02fd9dc", "message": "Add wait cost at egress", "committedDate": "2020-04-29T08:05:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NDUyNA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3050#discussion_r417654524", "bodyText": "Maybe requestedDepatureTime is a better name for the parameter. Also apply to arrivalTimein next function.", "author": "t2gran", "createdAt": "2020-04-29T22:40:51Z", "path": "src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java", "diffHunk": "@@ -19,6 +19,23 @@\n      */\n     int stop();\n \n+    /**\n+     * Returns the earliest possible departure time for the leg. Used Eg. in flex routing and TNC\n+     * when the access leg can't start immediately, but have to wait for a vehicle arriving. Also\n+     * DRT systems or bike shares can have operation time limitations.\n+     *\n+     * Returns -1 if transfer is not possible after the departureTime\n+     */\n+    int earliestDepartureTime(int departureTime);", "originalCommit": "435bd1898df1028ce936fd3cfd470e5af02fd9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ac092505454f7763adcb8f2a3fe27b32f5cee7", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java b/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java\nindex ab826a049..2a4b79abe 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java\n\n@@ -19,23 +19,6 @@ public interface RaptorTransfer {\n      */\n     int stop();\n \n-    /**\n-     * Returns the earliest possible departure time for the leg. Used Eg. in flex routing and TNC\n-     * when the access leg can't start immediately, but have to wait for a vehicle arriving. Also\n-     * DRT systems or bike shares can have operation time limitations.\n-     *\n-     * Returns -1 if transfer is not possible after the departureTime\n-     */\n-    int earliestDepartureTime(int departureTime);\n-\n-    /**\n-     * Returns the latest possible arrival time for the leg. Used in DRT systems or bike shares\n-     * where they can have operation time limitations.\n-     *\n-     * Returns -1 if transfer is not possible before the departure time\n-     */\n-    int latestArrivalTime(int arrivalTime);\n-\n     /**\n      * The time duration to walk or travel the leg in seconds. This is not the entire duration from the journey origin,\n      * but just:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NTA5MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3050#discussion_r417655090", "bodyText": "before the departure time\n\nshould be \"before the arrival-time\" ?", "author": "t2gran", "createdAt": "2020-04-29T22:42:22Z", "path": "src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java", "diffHunk": "@@ -19,6 +19,23 @@\n      */\n     int stop();\n \n+    /**\n+     * Returns the earliest possible departure time for the leg. Used Eg. in flex routing and TNC\n+     * when the access leg can't start immediately, but have to wait for a vehicle arriving. Also\n+     * DRT systems or bike shares can have operation time limitations.\n+     *\n+     * Returns -1 if transfer is not possible after the departureTime\n+     */\n+    int earliestDepartureTime(int departureTime);\n+\n+    /**\n+     * Returns the latest possible arrival time for the leg. Used in DRT systems or bike shares\n+     * where they can have operation time limitations.\n+     *\n+     * Returns -1 if transfer is not possible before the departure time", "originalCommit": "435bd1898df1028ce936fd3cfd470e5af02fd9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ac092505454f7763adcb8f2a3fe27b32f5cee7", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java b/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java\nindex ab826a049..2a4b79abe 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/api/transit/RaptorTransfer.java\n\n@@ -19,23 +19,6 @@ public interface RaptorTransfer {\n      */\n     int stop();\n \n-    /**\n-     * Returns the earliest possible departure time for the leg. Used Eg. in flex routing and TNC\n-     * when the access leg can't start immediately, but have to wait for a vehicle arriving. Also\n-     * DRT systems or bike shares can have operation time limitations.\n-     *\n-     * Returns -1 if transfer is not possible after the departureTime\n-     */\n-    int earliestDepartureTime(int departureTime);\n-\n-    /**\n-     * Returns the latest possible arrival time for the leg. Used in DRT systems or bike shares\n-     * where they can have operation time limitations.\n-     *\n-     * Returns -1 if transfer is not possible before the departure time\n-     */\n-    int latestArrivalTime(int arrivalTime);\n-\n     /**\n      * The time duration to walk or travel the leg in seconds. This is not the entire duration from the journey origin,\n      * but just:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwNTQ4Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3050#discussion_r417805486", "bodyText": "This should be added to the Access/Egress-PathLeg sub-interfaces not to this. Use the as methods to switch type.", "author": "t2gran", "createdAt": "2020-04-30T07:21:08Z", "path": "src/main/java/org/opentripplanner/transit/raptor/api/path/PathLeg.java", "diffHunk": "@@ -30,6 +31,11 @@\n      */\n     int toTime();\n \n+    /**\n+     * The access or egress connecting this leg to the start or end location of the search.\n+     */\n+    RaptorTransfer accessEgress();\n+", "originalCommit": "435bd1898df1028ce936fd3cfd470e5af02fd9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ac092505454f7763adcb8f2a3fe27b32f5cee7", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/api/path/PathLeg.java b/src/main/java/org/opentripplanner/transit/raptor/api/path/PathLeg.java\nindex 02d517c2f..e40fa5983 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/api/path/PathLeg.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/api/path/PathLeg.java\n\n@@ -31,11 +30,6 @@ public interface PathLeg<T extends RaptorTripSchedule> {\n      */\n     int toTime();\n \n-    /**\n-     * The access or egress connecting this leg to the start or end location of the search.\n-     */\n-    RaptorTransfer accessEgress();\n-\n     /**\n      * Number of seconds to travel this leg. This does not include wait time.\n      */\n"}}, {"oid": "57ac092505454f7763adcb8f2a3fe27b32f5cee7", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/57ac092505454f7763adcb8f2a3fe27b32f5cee7", "message": "Keep internal reference for access and egress legs\n\nThis allows us to map the correct accessa nd egress leg to the itinerary, when a stop has multiple possible accesses or egresses.", "committedDate": "2020-04-30T10:43:47Z", "type": "commit"}, {"oid": "a00272cee45e3644e26c3e24fbffe4fe528bc245", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a00272cee45e3644e26c3e24fbffe4fe528bc245", "message": "Use multiple egresses", "committedDate": "2020-04-30T10:43:56Z", "type": "commit"}, {"oid": "eb569a176be45f517a2fd6b1e88ea4f65f4e0e50", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/eb569a176be45f517a2fd6b1e88ea4f65f4e0e50", "message": "Add earliestDepartureTime and latestArrivalTime", "committedDate": "2020-04-30T10:43:56Z", "type": "commit"}, {"oid": "ae87d0c118ec32e55703b8df0ef61c8e447024ec", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ae87d0c118ec32e55703b8df0ef61c8e447024ec", "message": "Use earliestDepartureTime for access legs", "committedDate": "2020-04-30T10:43:56Z", "type": "commit"}, {"oid": "2cbbe27662a630efbb16df36a5ebda97830a3f49", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2cbbe27662a630efbb16df36a5ebda97830a3f49", "message": "Use earliestDepartureTime for egress legs", "committedDate": "2020-04-30T10:43:56Z", "type": "commit"}, {"oid": "8271d6be690aa5ea05afc9943c2d14a1a6e563f5", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8271d6be690aa5ea05afc9943c2d14a1a6e563f5", "message": "Extract setInitialTimeForIteration into RoutingStrategy\n\nIn order to separate the behaviour for NO_WAIT serches, which should not include time shifted acces or egress states.\nAlso rename TransitRoutingStrategy into RoutingStrategy, as the implementation now also covers how the access should be linked to the trasit part of the search.", "committedDate": "2020-04-30T10:43:56Z", "type": "commit"}, {"oid": "bc886a2c29093136714208a06f99df7d3ef1b3ed", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/bc886a2c29093136714208a06f99df7d3ef1b3ed", "message": "Store access in AccessStopArrivalState", "committedDate": "2020-05-04T08:24:06Z", "type": "commit"}, {"oid": "bc886a2c29093136714208a06f99df7d3ef1b3ed", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/bc886a2c29093136714208a06f99df7d3ef1b3ed", "message": "Store access in AccessStopArrivalState", "committedDate": "2020-05-04T08:24:06Z", "type": "forcePushed"}]}