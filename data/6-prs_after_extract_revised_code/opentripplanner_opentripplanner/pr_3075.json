{"pr_number": 3075, "pr_title": "Optimize multi-criteria Range Raptor to skip none optimal pattern boardings", "pr_createdAt": "2020-05-12T06:54:36Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075", "timeline": [{"oid": "f86ef4ab369201b61b6c657067430c3638393e9b", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f86ef4ab369201b61b6c657067430c3638393e9b", "message": "Optimize the Multi-criteria Range Raptor pattern traversal using a pareto-set for all boardings when traversing the pattern. This allow us to trow away some of the boardings, so we do not have to test each of the remaining stops in the pattern for optimal stop arrivals. The effect will vary depending on the transit data, but when measured on the Norwegian graph from November 2019 with the PARETO_CHECK_AGAINST_DESTINATION enabled the improvement was roughly 20%.", "committedDate": "2020-05-12T06:37:58Z", "type": "commit"}, {"oid": "fda36a8c495be861c5ed7e1ae31edf2f0b7469a4", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fda36a8c495be861c5ed7e1ae31edf2f0b7469a4", "message": "Clean code - In RaptorTripSchedule/Pattern move 'debugInfo' from trip to pattern and include 'mode' in debugInfo, delete modeInfo(). This make the debug logging and SpeedTest report in a more consistent way, and clean up the code a bit.", "committedDate": "2020-05-12T06:37:58Z", "type": "commit"}, {"oid": "94a2b55ee5db4f832979ee2328c07b2d042cbba1", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/94a2b55ee5db4f832979ee2328c07b2d042cbba1", "message": "Clean code - Apply time-shift of access-legs to the ArrivalView, this way the time-shift can be done in a limited places (once for McRR and once for StdRR).\n - Move leg specific data in ArrivalView to separate leg types. Reduce clutter and make the model closer to real life domain; Hence easier to understand.\n - Small clean-up inserting a space in the ToStringBuilder to improve readability.", "committedDate": "2020-05-12T06:37:58Z", "type": "commit"}, {"oid": "e652f9fb7fed014839697baff028cf9432b2e755", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e652f9fb7fed014839697baff028cf9432b2e755", "message": "Clean code - Remove the departure-time from stop arrivals. The field is not used by the algorithm and causes a source of error en confusion, since it is tempting to use in calculating other fields.\n - Fix SpeedTest Table report after refactor, reuse TableFormatter(renamed from OutputTable).", "committedDate": "2020-05-12T06:50:08Z", "type": "commit"}, {"oid": "03772fcd600fa467ff56a1b04aa89010182e1292", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/03772fcd600fa467ff56a1b04aa89010182e1292", "message": "Make the McRR handle diffrent cost increments for different trips (same pattern) and add documentation on the implementation.", "committedDate": "2020-05-18T16:07:09Z", "type": "commit"}, {"oid": "3b32b7d45ec1d595198e7c71ddfbd97a37d93928", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3b32b7d45ec1d595198e7c71ddfbd97a37d93928", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_optimize_mc_raptor_patterns", "committedDate": "2020-05-18T16:07:28Z", "type": "commit"}, {"oid": "3b32b7d45ec1d595198e7c71ddfbd97a37d93928", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3b32b7d45ec1d595198e7c71ddfbd97a37d93928", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_optimize_mc_raptor_patterns", "committedDate": "2020-05-18T16:07:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDA2NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427150065", "bodyText": "stop-arrival (labels)", "author": "t2gran", "createdAt": "2020-05-19T09:10:49Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java", "diffHunk": "@@ -10,6 +10,34 @@\n  * while possessing the stops in the pattern. This class keep the needed state for these\n  * boardings to avoid recalculating each value more than once and to be able put then in a\n  * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n+ * <p>\n+ * A boarding represent one path from the {@code origin} to a trip is boarded(onboard of a vehicle).\n+ * It represent the STATE of riding a trip, having boarded at a given stop, but not yet alighted.\n+ * <p>\n+ * We do not do this the same way as described in the original Raptor paper. The original McRaptor\n+ * algorithm keep a bag of stop-arrivals while traversing the pattern. We keep a \"bag\"", "originalCommit": "03772fcd600fa467ff56a1b04aa89010182e1292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMTU0Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r431131547", "bodyText": "I have updated the documentation as best I could. I do not think \"Labels\" is the correct word here, so I did not use it. Alternative for StopArrival could be StopReached, and for Boarding could be PatternBoarded or TripBoarded.", "author": "t2gran", "createdAt": "2020-05-27T13:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c31d7dd0750e88b1beaecd80806c1133623f7ee1", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java\nindex 1447bafd4..c0186ebc7 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java\n\n@@ -6,16 +6,22 @@ import org.opentripplanner.transit.raptor.util.paretoset.ParetoComparator;\n \n \n /**\n- * The multi-criteria Range Raptor need to keep all pareto-optimal boardings for each pattern\n- * while possessing the stops in the pattern. This class keep the needed state for these\n- * boardings to avoid recalculating each value more than once and to be able put then in a\n- * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n+ * This class represent the STATE for one possible path up until the point where a given trip is\n+ * boarded(onboard of a vehicle). It represent the STATE of riding a trip, having boarded at a\n+ * given stop, but not yet alighted.\n+ * <p>\n+ * Instances of this class only exist in the context of a given pattern for a given round. Hence\n+ * when comparing instances we may assume that they have the same number-of-transfers and the same\n+ * Pattern. We take advantage of this by excluding all \"constant\" criteria from the on-board-pattern\n+ * comparator used by the pareto-set of pattern boardings.\n  * <p>\n- * A boarding represent one path from the {@code origin} to a trip is boarded(onboard of a vehicle).\n- * It represent the STATE of riding a trip, having boarded at a given stop, but not yet alighted.\n+ * This implementation of the multi-criteria Range Raptor keep all pareto-optimal _boardings_ for\n+ * each pattern while possessing each stops down the line. This class keep the needed state for\n+ * these boardings to avoid recalculating each value more than once and to be able put then in a\n+ * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n  * <p>\n  * We do not do this the same way as described in the original Raptor paper. The original McRaptor\n- * algorithm keep a bag of stop-arrivals while traversing the pattern. We keep a \"bag\"\n+ * algorithm keep a bag of stop-arrivals  while traversing the pattern. We keep a \"bag\"\n  * ({@link McTransitWorker#patternBoardings}) of {@link Boarding}s for the given pattern. The main\n  * differences are:\n  * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3OTc5MQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427179791", "bodyText": "Just a pure refactoring - inlined method.", "author": "t2gran", "createdAt": "2020-05-19T09:58:59Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/RangeRaptorWorker.java", "diffHunk": "@@ -202,24 +202,15 @@ private void findAllTransitForRound() {\n             // Prepare for transit\n             transitWorker.prepareForTransitWith(pattern, tripSearch);\n \n-            // perform transit\n-            performTransitForRoundAndEachStopInPattern(pattern);\n+            // perform transit - iterate over given pattern and calculate transit for each stop.\n+            IntIterator it = calculator.patternStopIterator(pattern.numberOfStopsInPattern());\n+            while (it.hasNext()) {\n+                transitWorker.routeTransitAtStop(it.next());\n+            }\n         }", "originalCommit": "f86ef4ab369201b61b6c657067430c3638393e9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4MzYzMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427183630", "bodyText": "OnBoard Riding Vehicle State RouteBag Label", "author": "t2gran", "createdAt": "2020-05-19T10:05:26Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.opentripplanner.transit.raptor.rangeraptor.multicriteria;\n+\n+import org.opentripplanner.transit.raptor.api.transit.RaptorTripSchedule;\n+import org.opentripplanner.transit.raptor.rangeraptor.multicriteria.arrivals.AbstractStopArrival;\n+import org.opentripplanner.transit.raptor.util.paretoset.ParetoComparator;\n+\n+\n+/**\n+ * The multi-criteria Range Raptor need to keep all pareto-optimal boardings for each pattern\n+ * while possessing the stops in the pattern. This class keep the needed state for these\n+ * boardings to avoid recalculating each value more than once and to be able put then in a\n+ * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n+ *\n+ * @param <T> The TripSchedule type defined by the user of the raptor API.\n+ */\n+final class Boarding<T extends RaptorTripSchedule> {", "originalCommit": "f86ef4ab369201b61b6c657067430c3638393e9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c31d7dd0750e88b1beaecd80806c1133623f7ee1", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java\nindex b3c63803d..c0186ebc7 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java\n\n@@ -6,10 +6,47 @@ import org.opentripplanner.transit.raptor.util.paretoset.ParetoComparator;\n \n \n /**\n- * The multi-criteria Range Raptor need to keep all pareto-optimal boardings for each pattern\n- * while possessing the stops in the pattern. This class keep the needed state for these\n- * boardings to avoid recalculating each value more than once and to be able put then in a\n+ * This class represent the STATE for one possible path up until the point where a given trip is\n+ * boarded(onboard of a vehicle). It represent the STATE of riding a trip, having boarded at a\n+ * given stop, but not yet alighted.\n+ * <p>\n+ * Instances of this class only exist in the context of a given pattern for a given round. Hence\n+ * when comparing instances we may assume that they have the same number-of-transfers and the same\n+ * Pattern. We take advantage of this by excluding all \"constant\" criteria from the on-board-pattern\n+ * comparator used by the pareto-set of pattern boardings.\n+ * <p>\n+ * This implementation of the multi-criteria Range Raptor keep all pareto-optimal _boardings_ for\n+ * each pattern while possessing each stops down the line. This class keep the needed state for\n+ * these boardings to avoid recalculating each value more than once and to be able put then in a\n  * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n+ * <p>\n+ * We do not do this the same way as described in the original Raptor paper. The original McRaptor\n+ * algorithm keep a bag of stop-arrivals  while traversing the pattern. We keep a \"bag\"\n+ * ({@link McTransitWorker#patternBoardings}) of {@link Boarding}s for the given pattern. The main\n+ * differences are:\n+ * <ul>\n+ *  <li>\n+ *    Alight-/arrival specific cost is not included when comparing {@link Boarding}s. This is\n+ *    ok, since we add this before adding a path to the stop-arrivals at a given stop. This\n+ *    assumes that the cost of alighting/arrival is the same for all paths arriving by the same\n+ *    trip. This allow us to eliminate paths, without doing the actual stop-arrival cost\n+ *    calculation.\n+ *  </li>\n+ *  <li>\n+ *    We do NOT allow a boarding of one trip to exclude the boarding of another trip in the\n+ *    pareto-set. Two {@link Boarding}s are both optimal, if they have boarded the same pattern, in\n+ *    the same round, but on different trips/vehicles. This have no measurable impact on\n+ *    performance, compared with allowing an earlier trip dominating a later one. But, it allows\n+ *    for a trip to be optimal at some stops, and another trip to be optimal at other stops. This\n+ *    may happen if the generalized-cost is not <em>increasing</em> with the same amount for\n+ *    each trip between each stop.\n+ *  </li>\n+ *  <li>\n+ *    We do not have to update all elements in the \"pattern-bag\" for every stop visited. The\n+ *    {@code relative-cost} is calculated once - when adding the path to the \"pattern-bag\"\n+ *    of {@link Boarding}s.\n+ *  </li>\n+ * </ul>\n  *\n  * @param <T> The TripSchedule type defined by the user of the raptor API.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4NjU5NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427186594", "bodyText": "riding cost", "author": "t2gran", "createdAt": "2020-05-19T10:10:02Z", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java", "diffHunk": "@@ -40,6 +40,24 @@ public DefaultCostCalculator(\n         lifeCycle.onPrepareForNextRound(this::initWaitFactor);\n     }\n \n+    @Override\n+    public int relativePatternBoardCost(", "originalCommit": "f86ef4ab369201b61b6c657067430c3638393e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMjU2NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r431132565", "bodyText": "I renamed this to onTripRidingCost and updated the documentation.", "author": "t2gran", "createdAt": "2020-05-27T13:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4NjU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "c31d7dd0750e88b1beaecd80806c1133623f7ee1", "chunk": "diff --git a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java\nindex 544e3cbd6..a4e285d31 100644\n--- a/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java\n+++ b/src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java\n\n@@ -41,7 +41,7 @@ public class DefaultCostCalculator implements CostCalculator {\n     }\n \n     @Override\n-    public int relativePatternBoardCost(\n+    public int onTripRelativeCost(\n         int prevStopArrivalCost,\n         int boardWaitTime,\n         int relativeTransitTime,\n"}}, {"oid": "c31d7dd0750e88b1beaecd80806c1133623f7ee1", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c31d7dd0750e88b1beaecd80806c1133623f7ee1", "message": "Improve the documentation.", "committedDate": "2020-05-27T13:08:28Z", "type": "commit"}, {"oid": "f104fcd8354f7bc9f0bf2b502d9be97415a1ee0e", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f104fcd8354f7bc9f0bf2b502d9be97415a1ee0e", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_optimize_mc_raptor_patterns", "committedDate": "2020-05-27T13:09:04Z", "type": "commit"}, {"oid": "35b3af7bddc42089b5eb456e9fcfcfea9e0e8d60", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/35b3af7bddc42089b5eb456e9fcfcfea9e0e8d60", "message": "Rename the `onTripRelativeCost` method to `onTripRidingCost`.", "committedDate": "2020-05-27T13:26:37Z", "type": "commit"}, {"oid": "a56ae2ae4331211997c32255842c0125f4929bdc", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a56ae2ae4331211997c32255842c0125f4929bdc", "message": "docs: adjusting wording and details", "committedDate": "2020-05-28T07:45:33Z", "type": "commit"}, {"oid": "07115caf343979dc30ec48672fa318f29b51930d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/07115caf343979dc30ec48672fa318f29b51930d", "message": "Rename Boarding to PatternRide and update variable names and JavaDoc.", "committedDate": "2020-05-29T13:07:21Z", "type": "commit"}, {"oid": "e6dfbafd856d244eee755f3b9cef70dbc6a0fabb", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e6dfbafd856d244eee755f3b9cef70dbc6a0fabb", "message": "Merge branch 'dev-2.x' into otp2_optimize_mc_raptor_patterns", "committedDate": "2020-06-02T08:54:24Z", "type": "commit"}]}