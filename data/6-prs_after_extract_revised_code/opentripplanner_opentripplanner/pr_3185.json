{"pr_number": 3185, "pr_title": "Otp2 netex flex import", "pr_createdAt": "2020-09-16T12:22:47Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185", "timeline": [{"oid": "f0211ac39215fda1d9b4a2187aba17782c04851e", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f0211ac39215fda1d9b4a2187aba17782c04851e", "message": "Ignore passingTimes without arrival/departure time", "committedDate": "2020-09-29T13:16:02Z", "type": "forcePushed"}, {"oid": "ff1c6fce46ce543729357b86cf8f4c297ee9726d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ff1c6fce46ce543729357b86cf8f4c297ee9726d", "message": "Add FlexStopLocationMapper", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "99c83c6ccca9165c33f8536121e46c694931ffd0", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/99c83c6ccca9165c33f8536121e46c694931ffd0", "message": "Added FlexibleStopPlace to netex parser", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "21419d3588ff23ccc3e1148e67372c37b3efc4cc", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/21419d3588ff23ccc3e1148e67372c37b3efc4cc", "message": "Map FlexibleLines", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "7b6b66030d156cee510342c05390e79ce52ec320", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7b6b66030d156cee510342c05390e79ce52ec320", "message": "Map Flexible StopTimes", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "1a116f37ea11a805505ed900107920a1e3481a08", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1a116f37ea11a805505ed900107920a1e3481a08", "message": "Temporary mapping of UnscheduledTrip from NeTEx to GTFS format", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "01ca20dd8f0660ce2c1d28c1a7a898a24c6e326d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/01ca20dd8f0660ce2c1d28c1a7a898a24c6e326d", "message": "Swap lat/lon in geometry", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "0f3f9aaaf33fbcb6c29efc3aadd4e22e8f9cc39d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0f3f9aaaf33fbcb6c29efc3aadd4e22e8f9cc39d", "message": "Ignore passingTimes without arrival/departure time", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "a89b65e6c8743b9ed1a5b7a3e4de76ed72e3a383", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a89b65e6c8743b9ed1a5b7a3e4de76ed72e3a383", "message": "Adjust for renamed methods", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "0ef2addc02abdf67249ddd84db35f44f6169ceba", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0ef2addc02abdf67249ddd84db35f44f6169ceba", "message": "Formatting", "committedDate": "2020-10-16T08:53:26Z", "type": "commit"}, {"oid": "0ef2addc02abdf67249ddd84db35f44f6169ceba", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0ef2addc02abdf67249ddd84db35f44f6169ceba", "message": "Formatting", "committedDate": "2020-10-16T08:53:26Z", "type": "forcePushed"}, {"oid": "510b2caf15e4e25a690f4e9795f189512a1fee47", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/510b2caf15e4e25a690f4e9795f189512a1fee47", "message": "Merge branch 'dev-2.x' into otp2_netex_flex_import", "committedDate": "2020-10-21T10:38:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5MTMyMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509291322", "bodyText": "I looked at the side-effect, it is very simple to remove it, just returning the result an add it here. I will provide a commit that do that.", "author": "t2gran", "createdAt": "2020-10-21T13:39:29Z", "path": "src/main/java/org/opentripplanner/netex/NetexModule.java", "diffHunk": "@@ -86,6 +88,11 @@ public void buildGraph(\n \n                 calendarServiceData.add(transitBuilder.buildCalendarServiceData());\n \n+                // NB! The calls below have side effects - the builder state is updated!", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af1d434b5aac4532b5347851f2a40980581e8153", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/NetexModule.java b/src/main/java/org/opentripplanner/netex/NetexModule.java\nindex 2a2f59148..5ce5d0031 100644\n--- a/src/main/java/org/opentripplanner/netex/NetexModule.java\n+++ b/src/main/java/org/opentripplanner/netex/NetexModule.java\n\n@@ -88,15 +88,13 @@ public class NetexModule implements GraphBuilderModule {\n \n                 calendarServiceData.add(transitBuilder.buildCalendarServiceData());\n \n-                // NB! The calls below have side effects - the builder state is updated!\n                 if (OTPFeature.FlexRouting.isOn()) {\n-                    FlexTripsMapper.createFlexTrips(transitBuilder);\n+                    transitBuilder.getFlexTripsById().addAll(FlexTripsMapper.createFlexTrips(transitBuilder));\n                 }\n \n                 OtpTransitService otpService = transitBuilder.build();\n \n \n-\n                 // TODO OTP2 - Move this into the AddTransitModelEntitiesToGraph\n                 //           - and make sure thay also work with GTFS feeds - GTFS do no\n                 //           - have operators and notice assignments.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5NDg2Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509294866", "bodyText": "Revert changing this file - this import is wrong.", "author": "t2gran", "createdAt": "2020-10-21T13:43:53Z", "path": "src/main/java/org/opentripplanner/netex/loader/NetexBundle.java", "diffHunk": "@@ -13,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.swing.text.html.parser.Entity;", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/NetexBundle.java b/src/main/java/org/opentripplanner/netex/loader/NetexBundle.java\nindex 828b1b1f8..e995c7130 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/NetexBundle.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/NetexBundle.java\n\n@@ -17,7 +13,6 @@ import org.rutebanken.netex.model.PublicationDeliveryStructure;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.swing.text.html.parser.Entity;\n import javax.xml.bind.JAXBException;\n import java.io.Closeable;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyMjkyNQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509322925", "bodyText": "Suggestion: if (OTPFeature.FlexRouting.isOn() && frame.getFlexibleStopPlaces() != null) {\nThis should allow us to move this code into production, with Flex in the data and use the OTPFeature to toggle FLEX on off, even if there is problems in the import mapping.", "author": "t2gran", "createdAt": "2020-10-21T14:13:04Z", "path": "src/main/java/org/opentripplanner/netex/loader/parser/SiteFrameParser.java", "diffHunk": "@@ -37,6 +40,10 @@ public void parse(Site_VersionFrameStructure frame) {\n         if (frame.getGroupsOfStopPlaces() != null) {\n             parseGroupsOfStopPlaces(frame.getGroupsOfStopPlaces().getGroupOfStopPlaces());\n         }\n+        if (frame.getFlexibleStopPlaces() != null) {", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/parser/SiteFrameParser.java b/src/main/java/org/opentripplanner/netex/loader/parser/SiteFrameParser.java\nindex 43c89c468..705b68e40 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/parser/SiteFrameParser.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/parser/SiteFrameParser.java\n\n@@ -40,7 +41,7 @@ class SiteFrameParser extends NetexParser<Site_VersionFrameStructure> {\n         if (frame.getGroupsOfStopPlaces() != null) {\n             parseGroupsOfStopPlaces(frame.getGroupsOfStopPlaces().getGroupOfStopPlaces());\n         }\n-        if (frame.getFlexibleStopPlaces() != null) {\n+        if (OTPFeature.FlexRouting.isOn() && frame.getFlexibleStopPlaces() != null) {\n             parseFlexibleStopPlaces(frame.getFlexibleStopPlaces().getFlexibleStopPlace());\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNTkwMw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509325903", "bodyText": "else if (stopAssignment.getValue() instanceof FlexibleStopAssignment) {\n  if(OTPFeature.FlexRouting.isOn()) {", "author": "t2gran", "createdAt": "2020-10-21T14:16:22Z", "path": "src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java", "diffHunk": "@@ -143,6 +159,24 @@ private void parseStopAssignments(StopAssignmentsInFrame_RelStructure stopAssign\n                     LOG.warn(\"Quay {} not found in stop place file.\", quayRef);\n                 }\n             }\n+            else if (stopAssignment.getValue() instanceof FlexibleStopAssignment) {", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java b/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java\nindex f40412d15..d291f550d 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java\n\n@@ -160,21 +161,26 @@ class ServiceFrameParser extends NetexParser<Service_VersionFrameStructure> {\n                 }\n             }\n             else if (stopAssignment.getValue() instanceof FlexibleStopAssignment) {\n-                FlexibleStopAssignment assignment = (FlexibleStopAssignment) stopAssignment\n-                    .getValue();\n-                String flexibleStopPlaceRef = assignment.getFlexibleStopPlaceRef().getRef();\n-\n-                // TODO OTP2 - This check belongs to the mapping or as a separate validation\n-                //           - step. The problem is that we do not want to relay on the\n-                //           - the order in witch elements are loaded.\n-                FlexibleStopPlace flexibleStopPlace =\n-                    flexibleStopPlaceById.lookup(flexibleStopPlaceRef);\n-\n-                if (flexibleStopPlace != null) {\n-                    String stopPointRef = assignment.getScheduledStopPointRef().getValue().getRef();\n-                    flexibleStopPlaceByStopPointRef.put(stopPointRef, flexibleStopPlace.getId());\n-                } else {\n-                    LOG.warn(\"FlexibleStopPlace {} not found in stop place file.\", flexibleStopPlaceRef);\n+                if(OTPFeature.FlexRouting.isOn()) {\n+                    FlexibleStopAssignment assignment = (FlexibleStopAssignment) stopAssignment.getValue();\n+                    String flexibleStopPlaceRef = assignment.getFlexibleStopPlaceRef().getRef();\n+\n+                    // TODO OTP2 - This check belongs to the mapping or as a separate validation\n+                    //           - step. The problem is that we do not want to relay on the\n+                    //           - the order in witch elements are loaded.\n+                    FlexibleStopPlace flexibleStopPlace = flexibleStopPlaceById.lookup(\n+                        flexibleStopPlaceRef);\n+\n+                    if (flexibleStopPlace != null) {\n+                        String stopPointRef = assignment.getScheduledStopPointRef().getValue().getRef();\n+                        flexibleStopPlaceByStopPointRef.put(stopPointRef, flexibleStopPlace.getId());\n+                    }\n+                    else {\n+                        LOG.warn(\n+                            \"FlexibleStopPlace {} not found in stop place file.\",\n+                            flexibleStopPlaceRef\n+                        );\n+                    }\n                 }\n             }\n             else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNzE5Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509327196", "bodyText": "if(OTPFeature.FlexRouting.isOn()) {\n  this.flexibleLines.add((FlexibleLine) element.getValue());\n}", "author": "t2gran", "createdAt": "2020-10-21T14:17:54Z", "path": "src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java", "diffHunk": "@@ -193,6 +227,8 @@ private void parseLines(LinesInFrame_RelStructure lines) {\n         for (JAXBElement element : lines.getLine_()) {\n             if (element.getValue() instanceof Line) {\n                 this.lines.add((Line) element.getValue());\n+            } else if (element.getValue() instanceof FlexibleLine) {\n+                this.flexibleLines.add((FlexibleLine) element.getValue());", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java b/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java\nindex f40412d15..d291f550d 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/parser/ServiceFrameParser.java\n\n@@ -228,7 +234,9 @@ class ServiceFrameParser extends NetexParser<Service_VersionFrameStructure> {\n             if (element.getValue() instanceof Line) {\n                 this.lines.add((Line) element.getValue());\n             } else if (element.getValue() instanceof FlexibleLine) {\n-                this.flexibleLines.add((FlexibleLine) element.getValue());\n+                if(OTPFeature.FlexRouting.isOn()) {\n+                    this.flexibleLines.add((FlexibleLine) element.getValue());\n+                }\n             }\n             else {\n                 warnOnMissingMapping(LOG, element.getValue());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NzU0OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509347549", "bodyText": "This should be a WARNING not halt the build process.", "author": "t2gran", "createdAt": "2020-10-21T14:41:27Z", "path": "src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.opentripplanner.netex.loader.mapping;\n+\n+import net.opengis.gml._3.AbstractRingPropertyType;\n+import net.opengis.gml._3.LinearRingType;\n+import net.opengis.gml._3.PolygonType;\n+import org.locationtech.jts.geom.Coordinate;\n+import org.locationtech.jts.geom.CoordinateSequence;\n+import org.locationtech.jts.geom.Geometry;\n+import org.locationtech.jts.geom.LinearRing;\n+import org.locationtech.jts.geom.Polygon;\n+import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n+import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.model.FlexStopLocation;\n+import org.rutebanken.netex.model.FlexibleArea;\n+import org.rutebanken.netex.model.FlexibleStopPlace;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class FlexStopLocationMapper {\n+\n+  private final FeedScopedIdFactory idFactory;\n+\n+  public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n+    this.idFactory = idFactory;\n+  }\n+\n+  /**\n+   * Maps NeTEx FlexibleStopPlace to FlexStopLocation. This currently does not support\n+   * FlexLocationGroup, as an equivalent is not defined in the NeTEx Nordic profile.\n+   */\n+  public FlexStopLocation map(FlexibleStopPlace flexibleStopPlace) {\n+    FlexStopLocation result = new FlexStopLocation(idFactory.createId(flexibleStopPlace.getId()));\n+    result.setName(flexibleStopPlace.getName().getValue());\n+\n+    Object flexibleAreaOrFlexibleAreaRefOrHailAndRideArea = flexibleStopPlace\n+        .getAreas()\n+        .getFlexibleAreaOrFlexibleAreaRefOrHailAndRideArea()\n+        .get(0); // Only one area allowed in NeTEx Nordic profile.\n+\n+    if (flexibleAreaOrFlexibleAreaRefOrHailAndRideArea instanceof FlexibleArea) {\n+      result.setGeometry(mapGeometry((\n+          (FlexibleArea) flexibleAreaOrFlexibleAreaRefOrHailAndRideArea\n+      ).getPolygon()));\n+    }\n+    else {\n+      throw new IllegalArgumentException(\"Hail and ride areas are not currently supported.\");", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\nindex f69f6126a..4bf17085d 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n\n@@ -1,26 +1,18 @@\n package org.opentripplanner.netex.loader.mapping;\n \n-import net.opengis.gml._3.AbstractRingPropertyType;\n-import net.opengis.gml._3.LinearRingType;\n-import net.opengis.gml._3.PolygonType;\n-import org.locationtech.jts.geom.Coordinate;\n-import org.locationtech.jts.geom.CoordinateSequence;\n-import org.locationtech.jts.geom.Geometry;\n-import org.locationtech.jts.geom.LinearRing;\n-import org.locationtech.jts.geom.Polygon;\n-import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n-import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.common.geometry.OpenGisMapper;\n import org.opentripplanner.model.FlexStopLocation;\n import org.rutebanken.netex.model.FlexibleArea;\n import org.rutebanken.netex.model.FlexibleStopPlace;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class FlexStopLocationMapper {\n \n   private final FeedScopedIdFactory idFactory;\n \n+  private static final Logger LOG = LoggerFactory.getLogger(FlexStopLocationMapper.class);\n+\n   public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n     this.idFactory = idFactory;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1NzA0NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509357044", "bodyText": "This is not readable. There is 3 problems: 1) Do NOT use long variable names for short lived local variables. 2) The line breaks should be breaking the outer-most scope, what is the expression before .getPolygon(). 3) C-style comment TRAILING code is not allowed, it should be put on a separate line BEFORE the expression.  This is much more readable:\n    // Only one area allowed in NeTEx Nordic profile, get the first one\n    Object area = flexibleStopPlace\n        .getAreas()\n        .getFlexibleAreaOrFlexibleAreaRefOrHailAndRideArea()\n        .get(0); \n\n    if (area instanceof FlexibleArea) {\n      var flexibleArea = (FlexibleArea) area;\n      result.setGeometry(mapGeometry(flexibleArea.getPolygon()));\n    }", "author": "t2gran", "createdAt": "2020-10-21T14:52:35Z", "path": "src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.opentripplanner.netex.loader.mapping;\n+\n+import net.opengis.gml._3.AbstractRingPropertyType;\n+import net.opengis.gml._3.LinearRingType;\n+import net.opengis.gml._3.PolygonType;\n+import org.locationtech.jts.geom.Coordinate;\n+import org.locationtech.jts.geom.CoordinateSequence;\n+import org.locationtech.jts.geom.Geometry;\n+import org.locationtech.jts.geom.LinearRing;\n+import org.locationtech.jts.geom.Polygon;\n+import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n+import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.model.FlexStopLocation;\n+import org.rutebanken.netex.model.FlexibleArea;\n+import org.rutebanken.netex.model.FlexibleStopPlace;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class FlexStopLocationMapper {\n+\n+  private final FeedScopedIdFactory idFactory;\n+\n+  public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n+    this.idFactory = idFactory;\n+  }\n+\n+  /**\n+   * Maps NeTEx FlexibleStopPlace to FlexStopLocation. This currently does not support\n+   * FlexLocationGroup, as an equivalent is not defined in the NeTEx Nordic profile.\n+   */\n+  public FlexStopLocation map(FlexibleStopPlace flexibleStopPlace) {\n+    FlexStopLocation result = new FlexStopLocation(idFactory.createId(flexibleStopPlace.getId()));\n+    result.setName(flexibleStopPlace.getName().getValue());\n+\n+    Object flexibleAreaOrFlexibleAreaRefOrHailAndRideArea = flexibleStopPlace\n+        .getAreas()\n+        .getFlexibleAreaOrFlexibleAreaRefOrHailAndRideArea()\n+        .get(0); // Only one area allowed in NeTEx Nordic profile.\n+\n+    if (flexibleAreaOrFlexibleAreaRefOrHailAndRideArea instanceof FlexibleArea) {\n+      result.setGeometry(mapGeometry((\n+          (FlexibleArea) flexibleAreaOrFlexibleAreaRefOrHailAndRideArea\n+      ).getPolygon()));\n+    }", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\nindex f69f6126a..4bf17085d 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n\n@@ -1,26 +1,18 @@\n package org.opentripplanner.netex.loader.mapping;\n \n-import net.opengis.gml._3.AbstractRingPropertyType;\n-import net.opengis.gml._3.LinearRingType;\n-import net.opengis.gml._3.PolygonType;\n-import org.locationtech.jts.geom.Coordinate;\n-import org.locationtech.jts.geom.CoordinateSequence;\n-import org.locationtech.jts.geom.Geometry;\n-import org.locationtech.jts.geom.LinearRing;\n-import org.locationtech.jts.geom.Polygon;\n-import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n-import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.common.geometry.OpenGisMapper;\n import org.opentripplanner.model.FlexStopLocation;\n import org.rutebanken.netex.model.FlexibleArea;\n import org.rutebanken.netex.model.FlexibleStopPlace;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class FlexStopLocationMapper {\n \n   private final FeedScopedIdFactory idFactory;\n \n+  private static final Logger LOG = LoggerFactory.getLogger(FlexStopLocationMapper.class);\n+\n   public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n     this.idFactory = idFactory;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NjMwNQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509386305", "bodyText": "Move these mapping functions into a separat mapper, for example to OpenGisMapper. These are not part of Netex flex, but OpenGis. They are subject to reuse.", "author": "t2gran", "createdAt": "2020-10-21T15:28:41Z", "path": "src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.opentripplanner.netex.loader.mapping;\n+\n+import net.opengis.gml._3.AbstractRingPropertyType;\n+import net.opengis.gml._3.LinearRingType;\n+import net.opengis.gml._3.PolygonType;\n+import org.locationtech.jts.geom.Coordinate;\n+import org.locationtech.jts.geom.CoordinateSequence;\n+import org.locationtech.jts.geom.Geometry;\n+import org.locationtech.jts.geom.LinearRing;\n+import org.locationtech.jts.geom.Polygon;\n+import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n+import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.model.FlexStopLocation;\n+import org.rutebanken.netex.model.FlexibleArea;\n+import org.rutebanken.netex.model.FlexibleStopPlace;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class FlexStopLocationMapper {\n+\n+  private final FeedScopedIdFactory idFactory;\n+\n+  public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n+    this.idFactory = idFactory;\n+  }\n+\n+  /**\n+   * Maps NeTEx FlexibleStopPlace to FlexStopLocation. This currently does not support\n+   * FlexLocationGroup, as an equivalent is not defined in the NeTEx Nordic profile.\n+   */\n+  public FlexStopLocation map(FlexibleStopPlace flexibleStopPlace) {\n+    FlexStopLocation result = new FlexStopLocation(idFactory.createId(flexibleStopPlace.getId()));\n+    result.setName(flexibleStopPlace.getName().getValue());\n+\n+    Object flexibleAreaOrFlexibleAreaRefOrHailAndRideArea = flexibleStopPlace\n+        .getAreas()\n+        .getFlexibleAreaOrFlexibleAreaRefOrHailAndRideArea()\n+        .get(0); // Only one area allowed in NeTEx Nordic profile.\n+\n+    if (flexibleAreaOrFlexibleAreaRefOrHailAndRideArea instanceof FlexibleArea) {\n+      result.setGeometry(mapGeometry((\n+          (FlexibleArea) flexibleAreaOrFlexibleAreaRefOrHailAndRideArea\n+      ).getPolygon()));\n+    }\n+    else {\n+      throw new IllegalArgumentException(\"Hail and ride areas are not currently supported.\");\n+    }\n+    return result;\n+  }\n+\n+  private Geometry mapGeometry(PolygonType polygonType) {\n+    return new Polygon(\n+        new LinearRing(mapCoordinateSequence(polygonType.getExterior()),\n+            GeometryUtils.getGeometryFactory()\n+        ),\n+        polygonType\n+            .getInterior()\n+            .stream()\n+            .map(c -> new LinearRing(mapCoordinateSequence(c), GeometryUtils.getGeometryFactory()))\n+            .toArray(LinearRing[]::new),\n+        GeometryUtils.getGeometryFactory()\n+    );\n+  }\n+\n+  private CoordinateSequence mapCoordinateSequence(\n+      AbstractRingPropertyType abstractRingPropertyType\n+  ) {\n+    List<Double> posList = ((LinearRingType) abstractRingPropertyType.getAbstractRing().getValue())\n+        .getPosList()\n+        .getValue();\n+\n+    // Convert a single list of alternating lat/lon values into coordinates\n+    ArrayList<Coordinate> coordinates = new ArrayList<>();\n+    for (int i = 0; i < posList.size(); i += 2) {\n+      coordinates.add(new Coordinate(posList.get(i + 1), posList.get(i)));\n+    }\n+\n+    return new CoordinateArrayListSequence(coordinates);\n+  }\n+}", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\nindex f69f6126a..4bf17085d 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n\n@@ -1,26 +1,18 @@\n package org.opentripplanner.netex.loader.mapping;\n \n-import net.opengis.gml._3.AbstractRingPropertyType;\n-import net.opengis.gml._3.LinearRingType;\n-import net.opengis.gml._3.PolygonType;\n-import org.locationtech.jts.geom.Coordinate;\n-import org.locationtech.jts.geom.CoordinateSequence;\n-import org.locationtech.jts.geom.Geometry;\n-import org.locationtech.jts.geom.LinearRing;\n-import org.locationtech.jts.geom.Polygon;\n-import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n-import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.common.geometry.OpenGisMapper;\n import org.opentripplanner.model.FlexStopLocation;\n import org.rutebanken.netex.model.FlexibleArea;\n import org.rutebanken.netex.model.FlexibleStopPlace;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class FlexStopLocationMapper {\n \n   private final FeedScopedIdFactory idFactory;\n \n+  private static final Logger LOG = LoggerFactory.getLogger(FlexStopLocationMapper.class);\n+\n   public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n     this.idFactory = idFactory;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5OTA2NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509399064", "bodyText": "Class member fields passed to a class member function. No need to pass these on.", "author": "t2gran", "createdAt": "2020-10-21T15:45:14Z", "path": "src/main/java/org/opentripplanner/netex/loader/mapping/StopTimesMapper.java", "diffHunk": "@@ -76,7 +87,13 @@ MappedStopTimes mapToStopTimes(\n             String pointInJourneyPattern = currentPassingTime.getPointInJourneyPatternRef().getValue().getRef();\n \n             StopPointInJourneyPattern stopPoint = findStopPoint(pointInJourneyPattern, journeyPattern);\n-            Stop stop = lookupStop(stopPoint, quayIdByStopPointRef, stopsById);\n+            StopLocation stop = lookUpStopLocation(\n+                stopPoint,\n+                quayIdByStopPointRef,\n+                flexibleStopPlaceIdByStopPointRef,\n+                stopsById,\n+                flexibleStopLocationsById", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/mapping/StopTimesMapper.java b/src/main/java/org/opentripplanner/netex/loader/mapping/StopTimesMapper.java\nindex 41016c4c4..c1bab7d7a 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/mapping/StopTimesMapper.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/mapping/StopTimesMapper.java\n\n@@ -87,13 +87,7 @@ class StopTimesMapper {\n             String pointInJourneyPattern = currentPassingTime.getPointInJourneyPatternRef().getValue().getRef();\n \n             StopPointInJourneyPattern stopPoint = findStopPoint(pointInJourneyPattern, journeyPattern);\n-            StopLocation stop = lookUpStopLocation(\n-                stopPoint,\n-                quayIdByStopPointRef,\n-                flexibleStopPlaceIdByStopPointRef,\n-                stopsById,\n-                flexibleStopLocationsById\n-            );\n+            StopLocation stop = lookUpStopLocation(stopPoint);\n             if (stop == null) {\n                 LOG.warn(\"Stop with id {} not found for StopPoint {} in JourneyPattern {}. \"\n                         + \"Trip {} will not be mapped.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1NzA5NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r509957094", "bodyText": "Wouldn't it be safe to always construct a multipolygon?", "author": "hannesj", "createdAt": "2020-10-22T08:00:34Z", "path": "src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.opentripplanner.netex.loader.mapping;\n+\n+import net.opengis.gml._3.AbstractRingPropertyType;\n+import net.opengis.gml._3.LinearRingType;\n+import net.opengis.gml._3.PolygonType;\n+import org.locationtech.jts.geom.Coordinate;\n+import org.locationtech.jts.geom.CoordinateSequence;\n+import org.locationtech.jts.geom.Geometry;\n+import org.locationtech.jts.geom.LinearRing;\n+import org.locationtech.jts.geom.Polygon;\n+import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n+import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.model.FlexStopLocation;\n+import org.rutebanken.netex.model.FlexibleArea;\n+import org.rutebanken.netex.model.FlexibleStopPlace;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class FlexStopLocationMapper {\n+\n+  private final FeedScopedIdFactory idFactory;\n+\n+  public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n+    this.idFactory = idFactory;\n+  }\n+\n+  /**\n+   * Maps NeTEx FlexibleStopPlace to FlexStopLocation. This currently does not support\n+   * FlexLocationGroup, as an equivalent is not defined in the NeTEx Nordic profile.\n+   */\n+  public FlexStopLocation map(FlexibleStopPlace flexibleStopPlace) {\n+    FlexStopLocation result = new FlexStopLocation(idFactory.createId(flexibleStopPlace.getId()));\n+    result.setName(flexibleStopPlace.getName().getValue());\n+\n+    Object flexibleAreaOrFlexibleAreaRefOrHailAndRideArea = flexibleStopPlace\n+        .getAreas()\n+        .getFlexibleAreaOrFlexibleAreaRefOrHailAndRideArea()\n+        .get(0); // Only one area allowed in NeTEx Nordic profile.", "originalCommit": "510b2caf15e4e25a690f4e9795f189512a1fee47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNzA4Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3185#discussion_r510017087", "bodyText": "We could construct a multipolygon here, but it would only contain one polygon, as we are mapping from OpenGIS polygon in the NeTEx XML.", "author": "gmellemstrand", "createdAt": "2020-10-22T09:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1NzA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "9f49d066fbe70397c307285df083f8ee34a09806", "chunk": "diff --git a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\nindex f69f6126a..4bf17085d 100644\n--- a/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n+++ b/src/main/java/org/opentripplanner/netex/loader/mapping/FlexStopLocationMapper.java\n\n@@ -1,26 +1,18 @@\n package org.opentripplanner.netex.loader.mapping;\n \n-import net.opengis.gml._3.AbstractRingPropertyType;\n-import net.opengis.gml._3.LinearRingType;\n-import net.opengis.gml._3.PolygonType;\n-import org.locationtech.jts.geom.Coordinate;\n-import org.locationtech.jts.geom.CoordinateSequence;\n-import org.locationtech.jts.geom.Geometry;\n-import org.locationtech.jts.geom.LinearRing;\n-import org.locationtech.jts.geom.Polygon;\n-import org.opentripplanner.api.resource.CoordinateArrayListSequence;\n-import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.common.geometry.OpenGisMapper;\n import org.opentripplanner.model.FlexStopLocation;\n import org.rutebanken.netex.model.FlexibleArea;\n import org.rutebanken.netex.model.FlexibleStopPlace;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class FlexStopLocationMapper {\n \n   private final FeedScopedIdFactory idFactory;\n \n+  private static final Logger LOG = LoggerFactory.getLogger(FlexStopLocationMapper.class);\n+\n   public FlexStopLocationMapper(FeedScopedIdFactory idFactory) {\n     this.idFactory = idFactory;\n   }\n"}}, {"oid": "9f49d066fbe70397c307285df083f8ee34a09806", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9f49d066fbe70397c307285df083f8ee34a09806", "message": "Changes based on comments", "committedDate": "2020-10-22T09:48:19Z", "type": "commit"}, {"oid": "d3382d673e4c862a1f47accb60c79b5896838865", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d3382d673e4c862a1f47accb60c79b5896838865", "message": "Merge branch 'dev-2.x' into otp2_netex_flex_import", "committedDate": "2020-10-22T09:48:38Z", "type": "commit"}, {"oid": "28b1150c7052eecfe86bae1c6f6fffe9b9caf864", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/28b1150c7052eecfe86bae1c6f6fffe9b9caf864", "message": "Filter lines by flex", "committedDate": "2020-10-25T14:06:34Z", "type": "commit"}, {"oid": "28b1150c7052eecfe86bae1c6f6fffe9b9caf864", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/28b1150c7052eecfe86bae1c6f6fffe9b9caf864", "message": "Filter lines by flex", "committedDate": "2020-10-25T14:06:34Z", "type": "forcePushed"}, {"oid": "53ac7a80a7a9924f05c417f2e72ec699173b5092", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/53ac7a80a7a9924f05c417f2e72ec699173b5092", "message": "Moved OpenGisMapper to netex package", "committedDate": "2020-10-26T11:53:19Z", "type": "commit"}, {"oid": "af1d434b5aac4532b5347851f2a40980581e8153", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/af1d434b5aac4532b5347851f2a40980581e8153", "message": "Clean code: Remove side-effect from FlexTripsMapper, saving flex trips to the builder during mapping.", "committedDate": "2020-10-26T12:03:51Z", "type": "commit"}, {"oid": "9d0a33984dd661a278a6108fa405974a36b91197", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9d0a33984dd661a278a6108fa405974a36b91197", "message": "Keep lambda in FlexTripMapper to get correct logger", "committedDate": "2020-10-26T12:11:49Z", "type": "commit"}]}