{"pr_number": 2996, "pr_title": "OTP2: include result paging metadata on results containing no itineraries", "pr_createdAt": "2020-03-04T22:58:07Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996", "timeline": [{"oid": "fc8c5b583829b39ba95e82c269b79db5fdce81ec", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fc8c5b583829b39ba95e82c269b79db5fdce81ec", "message": "Fix error handling in Transmodel API when from/to place is TOO_CLOSE. This failed hard in the previous version.", "committedDate": "2020-03-04T13:41:26Z", "type": "commit"}, {"oid": "2382beb48e7ee0d06a7404e1a4736c0601c71499", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2382beb48e7ee0d06a7404e1a4736c0601c71499", "message": "Fix error handling in when from/to place is missing in the egress/access search.", "committedDate": "2020-03-04T19:43:17Z", "type": "commit"}, {"oid": "9ccbb682eaa8f3d5b9dc93bf6be0db24c719b6ec", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9ccbb682eaa8f3d5b9dc93bf6be0db24c719b6ec", "message": "Add progress tracking on the stop linking.", "committedDate": "2020-03-04T22:49:55Z", "type": "commit"}, {"oid": "fb5667f9c544f9ee0af1f44affeaaa0492ac8b8d", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fb5667f9c544f9ee0af1f44affeaaa0492ac8b8d", "message": "Add error message to response when no itineraries are found.", "committedDate": "2020-03-04T22:50:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NTYyOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388165629", "bodyText": "These are not in use", "author": "t2gran", "createdAt": "2020-03-05T09:19:21Z", "path": "src/main/java/org/opentripplanner/api/common/Message.java", "diffHunk": "@@ -19,8 +19,16 @@\n     NO_TRANSIT_TIMES(406),\n     REQUEST_TIMEOUT(408),\n     BOGUS_PARAMETER(413),\n-    GEOCODE_FROM_NOT_FOUND(440),\n-    GEOCODE_TO_NOT_FOUND(450),\n+    /**\n+     * The request 'from' location is not found. This can also mean that there is no street close\n+     * to the given coordinates, no stops nearby. Change the from field and try again.\n+     */\n+    FROM_NOT_FOUND(440),\n+    /**\n+     * The request 'to' location is not found. This can also mean that there is no street close to\n+     * the given coordinates, no stops nearby. Change the from field and try again.\n+     */\n+    TO_NOT_FOUND(450),", "originalCommit": "2382beb48e7ee0d06a7404e1a4736c0601c71499", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35a44f8fbe36c3c0cbafc1404f6f089aed8346df", "chunk": "diff --git a/src/main/java/org/opentripplanner/api/common/Message.java b/src/main/java/org/opentripplanner/api/common/Message.java\nindex f237e2fec..b026b2e7d 100644\n--- a/src/main/java/org/opentripplanner/api/common/Message.java\n+++ b/src/main/java/org/opentripplanner/api/common/Message.java\n\n@@ -19,16 +19,8 @@ public enum Message {\n     NO_TRANSIT_TIMES(406),\n     REQUEST_TIMEOUT(408),\n     BOGUS_PARAMETER(413),\n-    /**\n-     * The request 'from' location is not found. This can also mean that there is no street close\n-     * to the given coordinates, no stops nearby. Change the from field and try again.\n-     */\n-    FROM_NOT_FOUND(440),\n-    /**\n-     * The request 'to' location is not found. This can also mean that there is no street close to\n-     * the given coordinates, no stops nearby. Change the from field and try again.\n-     */\n-    TO_NOT_FOUND(450),\n+    GEOCODE_FROM_NOT_FOUND(440),\n+    GEOCODE_TO_NOT_FOUND(450),\n     GEOCODE_FROM_TO_NOT_FOUND(460),\n     TOO_CLOSE(409),\n     LOCATION_NOT_ACCESSIBLE(470),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MDUwNw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388170507", "bodyText": "Go back to the T.", "author": "t2gran", "createdAt": "2020-03-05T09:28:02Z", "path": "src/main/java/org/opentripplanner/model/base/ToStringBuilder.java", "diffHunk": "@@ -92,27 +122,32 @@ public ToStringBuilder addDuration(String name, Integer durationSeconds) {\n \n     @Override\n     public String toString() {\n-        if(!unsetFields.isEmpty()) { addIt(\"NOT_SET\", unsetFields.toString()); }\n-        sb.append(\"}\");\n+        if(includeMetadata) {\n+            if(!unsetFields.isEmpty()) { addIt(\"NOT_SET\", unsetFields.toString()); }\n+            sb.append(\"}\");\n+        }\n         return sb.toString();\n     }\n \n-    private <T> ToStringBuilder addIfNotNull(String name, T value) {\n+    private <S> ToStringBuilder addIfNotNull(String name, S value) {", "originalCommit": "2382beb48e7ee0d06a7404e1a4736c0601c71499", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eac3796e6a6838d0a220583114a22b2772d6b2a6", "chunk": "diff --git a/src/main/java/org/opentripplanner/model/base/ToStringBuilder.java b/src/main/java/org/opentripplanner/model/base/ToStringBuilder.java\nindex eb2a6463d..6eb88b8f2 100644\n--- a/src/main/java/org/opentripplanner/model/base/ToStringBuilder.java\n+++ b/src/main/java/org/opentripplanner/model/base/ToStringBuilder.java\n\n@@ -111,49 +125,59 @@ public class ToStringBuilder {\n     public ToStringBuilder addCalTime(String name, Calendar time) {\n         return addIfNotNull(name, time, t -> formatTime(t.getTime()));\n     }\n+\n+    /**\n+     * Add time in seconds since midnight. Format:  HH:mm:ss. Ignore default values.\n+     */\n+    public ToStringBuilder addSecondsPastMidnight(String name, int timeSecondsPastMidnight, int defaultValue) {\n+        return addIfNotDefault(name, timeSecondsPastMidnight, defaultValue, TimeUtils::timeToStrLong);\n+    }\n+\n     /**\n      * Add a duration to the string in format like '3h4m35s'. Each component (hours, minutes, and or\n      * seconds) is only added if they are not zero {@code 0}. This is the same format as the\n-     * {@link Duration#toString()}, but without the prefix.\n+     * {@link Duration#toString()}, but without the 'PT' prefix. {@code null} value is ignored.\n      */\n     public ToStringBuilder addDuration(String name, Integer durationSeconds) {\n-        return addIfNotNull(name, durationSeconds, TimeUtils::durationToStr);\n+        return addIfNotDefault(name, durationSeconds, null, TimeUtils::durationToStr);\n     }\n \n     @Override\n     public String toString() {\n-        if(includeMetadata) {\n-            if(!unsetFields.isEmpty()) { addIt(\"NOT_SET\", unsetFields.toString()); }\n-            sb.append(\"}\");\n-        }\n-        return sb.toString();\n+        if(!unsetFields.isEmpty()) { addIt(\"NOT_SET\", unsetFields.toString()); }\n+\n+        return sb.append(\"}\").toString();\n+    }\n+\n+\n+    /** private methods */\n+\n+    private <T> ToStringBuilder addIfNotNull(String name, T value) {\n+        return addIfNotDefault(name, value, null);\n+    }\n+\n+    private <T> ToStringBuilder addIfNotNull(String name, T value, Function<T, String> vToString) {\n+        return addIfNotDefault(name, value, null, vToString);\n     }\n \n-    private <S> ToStringBuilder addIfNotNull(String name, S value) {\n-        if(value == null) { return unset(name); }\n-        return addIt(name, value.toString());\n+    private <T> ToStringBuilder addIfNotDefault(String name, T value, T defaultValue) {\n+        return addIfNotDefault(name, value, defaultValue, Object::toString);\n     }\n \n-    private <S> ToStringBuilder addIfNotNull(String name, S value, Function<S, String> vToString) {\n-        if(value == null) { return unset(name); }\n-        return addIt(name, vToString.apply(value));\n+    private <T> ToStringBuilder addIfNotDefault(String name, T value, T defaultValue, Function<T, String> mapToString) {\n+        if(value == defaultValue) { return unset(name); }\n+        if(defaultValue != null && defaultValue.equals(value)) { return unset(name); }\n+        if(value == null) { return addIt(name, \"null\"); }\n+        return addIt(name, mapToString.apply(value));\n     }\n \n     private ToStringBuilder addIt(String name, @NotNull String value) {\n-        try {\n-            if (first) { first = false; }\n-            else { sb.append(includeMetadata ? FIELD_SEPARATOR_OBJ : FIELD_SEPARATOR_VO); }\n+        if (first) { first = false; }\n+        else { sb.append(FIELD_SEPARATOR); }\n \n-            if(includeMetadata) {\n-                sb.append(name).append(\":\");\n-            }\n-            sb.append(value);\n-            return this;\n-        }\n-        catch (RuntimeException e) {\n-            e.printStackTrace();\n-            throw e;\n-        }\n+        sb.append(name).append(\":\");\n+        sb.append(value);\n+        return this;\n     }\n \n     private ToStringBuilder unset(String name) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzM0OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388173349", "bodyText": "Rename exception", "author": "t2gran", "createdAt": "2020-03-05T09:33:01Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -299,4 +301,21 @@ private double calculateDistanceMaxLimit() {\n \n         return limit;\n     }\n+\n+    private void verifyEgressAccess(\n+            RoutingRequest request,\n+            Map<?,?> access,\n+            Map<?,?> egress\n+    ) {\n+        boolean accessExist = !access.isEmpty();\n+        boolean egressExist = !egress.isEmpty();\n+\n+        if(accessExist && egressExist) { return; }\n+\n+        List<String> missingPlaces = new ArrayList<>();\n+        if(!accessExist) { missingPlaces.add(request.from.toString()); }\n+        if(!egressExist) { missingPlaces.add(request.to.toString()); }\n+\n+        throw new VertexNotFoundException(missingPlaces);", "originalCommit": "2382beb48e7ee0d06a7404e1a4736c0601c71499", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35a44f8fbe36c3c0cbafc1404f6f089aed8346df", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java b/src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java\nindex c105a68bc..8032a62ce 100644\n--- a/src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java\n+++ b/src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java\n\n@@ -303,7 +303,6 @@ public class RoutingWorker {\n     }\n \n     private void verifyEgressAccess(\n-            RoutingRequest request,\n             Map<?,?> access,\n             Map<?,?> egress\n     ) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NjA0Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388176046", "bodyText": "Remove methods with default values", "author": "t2gran", "createdAt": "2020-03-05T09:37:49Z", "path": "src/test/java/org/opentripplanner/model/base/ValueObjectToStringBuilderTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.opentripplanner.model.base;\n+\n+import org.junit.Test;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ValueObjectToStringBuilderTest {\n+    private enum  AEnum { A }\n+    private static class Foo {\n+        int a;\n+        String b;\n+\n+        public Foo(int a, String b) {\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return ValueObjectToStringBuilder.of()\n+                    .addNum(a, 0)\n+                    .addStr(b)\n+                    .toString();\n+        }\n+    }\n+\n+    private ValueObjectToStringBuilder subject() { return ValueObjectToStringBuilder.of(); }\n+\n+    @Test\n+    public void addNum() {\n+        assertEquals(\"3.0\", subject().addNum(3.0000000d).toString());\n+        assertEquals(\"3.0\", subject().addNum(3.0000000f).toString());\n+        assertEquals(\"3\", subject().addNum(3).toString());\n+        assertEquals(\"3\", subject().addNum(3L).toString());\n+    }\n+\n+    @Test\n+    public void testAddNumWithDefaults() {\n+        assertEquals(\n+                \"3.0\",\n+                subject()\n+                        .addNum(4d, 4d)\n+                        .addNum(3d, 2d)\n+                        .addNum(-1d, -1d)\n+                        .toString()\n+        );", "originalCommit": "2382beb48e7ee0d06a7404e1a4736c0601c71499", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eac3796e6a6838d0a220583114a22b2772d6b2a6", "chunk": "diff --git a/src/test/java/org/opentripplanner/model/base/ValueObjectToStringBuilderTest.java b/src/test/java/org/opentripplanner/model/base/ValueObjectToStringBuilderTest.java\nindex 2838d879b..81d73ab4f 100644\n--- a/src/test/java/org/opentripplanner/model/base/ValueObjectToStringBuilderTest.java\n+++ b/src/test/java/org/opentripplanner/model/base/ValueObjectToStringBuilderTest.java\n\n@@ -2,12 +2,6 @@ package org.opentripplanner.model.base;\n \n import org.junit.Test;\n \n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.Calendar;\n-import java.util.GregorianCalendar;\n-\n import static org.junit.Assert.assertEquals;\n \n public class ValueObjectToStringBuilderTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTc0Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388159743", "bodyText": "I would rename this to something like quietPeriodMilliseconds, because it doesn't ensure an update every M milliseconds, it silences updates for that long.", "author": "abyrd", "createdAt": "2020-03-05T09:08:42Z", "path": "src/main/java/org/opentripplanner/util/ProgressTracker.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.opentripplanner.util;\n+\n+import java.util.function.BiConsumer;\n+\n+\n+/**\n+ * The progress tracker notify the caller based on 'time' and a 'counter'.\n+ * <p>\n+ * The 'counter' is used to notify the caller for each percent(1%) it the total number of\n+ * steps is more than 100. If the number steps is less than 100 the caller is notified every time.\n+ * <p>\n+ * To avoid the caller from being notified to often, the tracker also uses a 'timer'. The\n+ * 'timer' prevent notification unless a minimum amount of time is passed since last time the\n+ * caller was notified.\n+ * <p>\n+ * Both the 'counter' and the 'timer' constraint must pass for the caller to be notified.\n+ */\n+public class ProgressTracker {\n+    private final int dStep;\n+    private final int size;\n+    private final long notifyEveryMillisecond;", "originalCommit": "9ccbb682eaa8f3d5b9dc93bf6be0db24c719b6ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35a44f8fbe36c3c0cbafc1404f6f089aed8346df", "chunk": "diff --git a/src/main/java/org/opentripplanner/util/ProgressTracker.java b/src/main/java/org/opentripplanner/util/ProgressTracker.java\nindex 695708790..6e54252ff 100644\n--- a/src/main/java/org/opentripplanner/util/ProgressTracker.java\n+++ b/src/main/java/org/opentripplanner/util/ProgressTracker.java\n\n@@ -18,15 +18,20 @@ import java.util.function.BiConsumer;\n public class ProgressTracker {\n     private final int dStep;\n     private final int size;\n-    private final long notifyEveryMillisecond;\n+    private final long quietPeriodMilliseconds;\n \n     private int i = 0;\n     private long lastProgressNotification;\n \n-    public ProgressTracker(int size, long notifyEveryMillisecond) {\n+    public static ProgressTracker totalSize(int size) {\n+        return new ProgressTracker(size, 2000);\n+    }\n+\n+    /** Package local to allow unit testing. */\n+    ProgressTracker(int size, long quietPeriodMilliseconds) {\n         this.size = size;\n         this.dStep = Math.max(size / 100, 1);\n-        this.notifyEveryMillisecond = notifyEveryMillisecond;\n+        this.quietPeriodMilliseconds = quietPeriodMilliseconds;\n         this.lastProgressNotification = System.currentTimeMillis();\n     }\n \n"}}, {"oid": "eac3796e6a6838d0a220583114a22b2772d6b2a6", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/eac3796e6a6838d0a220583114a22b2772d6b2a6", "message": "Code cleanup ToStringBuilder's.", "committedDate": "2020-03-05T15:41:37Z", "type": "commit"}, {"oid": "35a44f8fbe36c3c0cbafc1404f6f089aed8346df", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/35a44f8fbe36c3c0cbafc1404f6f089aed8346df", "message": "Review code cleanup:\n - fixed \"missingPlaces\" in routing response (to/from missing).\n - Revert change to Messages - this is a greater refactoring.\n - Cleanup ProgressTracker, static factory and field naming.", "committedDate": "2020-03-05T15:55:39Z", "type": "commit"}, {"oid": "d4d81b06cbb4c1d533bfe99da2e3c2500c3fe070", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d4d81b06cbb4c1d533bfe99da2e3c2500c3fe070", "message": "Merge branch 'dev-2.x' into otp2_route_metadata_on_empty_result", "committedDate": "2020-03-05T15:56:15Z", "type": "commit"}, {"oid": "044598213fdfba1329cc002f2612f753befe44c7", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/044598213fdfba1329cc002f2612f753befe44c7", "message": "Made ProgressTracker thread-safe and used in several places.\n - Track progress for Link Transit(stop, parking, area) linking to street network.\n - Track progress for Generate TripPattern geometries.\n - Track progress for Build street graph.\n - Track progress for Create transfer edges.\n - Track progress for Parse OSM (Relations, Ways, Nodes).\n - Close input stream when reading OSM files.\n - ProgressTracker, make it THREAD-SAFE.\n - ProgressTracker, add support for tracking input streams.", "committedDate": "2020-03-09T18:51:29Z", "type": "commit"}, {"oid": "f58abe6e298d9f55c6b3679133654120db134901", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f58abe6e298d9f55c6b3679133654120db134901", "message": "Merge branch 'otp2_route_metadata_on_empty_result' of https://github.com/entur/OpenTripPlanner into otp2_route_metadata_on_empty_result", "committedDate": "2020-03-09T18:52:02Z", "type": "commit"}]}