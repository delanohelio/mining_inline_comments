{"pr_number": 2994, "pr_title": "Update pathways support to official GTFS specification", "pr_createdAt": "2020-03-03T08:13:39Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994", "timeline": [{"oid": "d0f9642ba0bd334b104fb5edbc43117dae084202", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d0f9642ba0bd334b104fb5edbc43117dae084202", "message": "Add separate TransitEntranceLink", "committedDate": "2020-03-18T12:15:24Z", "type": "forcePushed"}, {"oid": "b81b97d9d834d56dab656f8e39f61ffd0c102332", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b81b97d9d834d56dab656f8e39f61ffd0c102332", "message": "Add separate TransitEntranceLink", "committedDate": "2020-03-18T14:35:33Z", "type": "forcePushed"}, {"oid": "39789ba2ff4d4ef56815c43b1a18cbb238b35e32", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/39789ba2ff4d4ef56815c43b1a18cbb238b35e32", "message": "Add tests and assertions for location types", "committedDate": "2020-03-27T12:06:32Z", "type": "forcePushed"}, {"oid": "35d36d05751a8c2bb011b6cfe4cd061aed503aae", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/35d36d05751a8c2bb011b6cfe4cd061aed503aae", "message": "Move check for street linkable stops to correct place", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "18748d886c338fd658e5f82e75e820bd04e1346a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/18748d886c338fd658e5f82e75e820bd04e1346a", "message": "Remove isEntrance from TransitStopVertex", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "bef621adac47ece0d8bc045aec35198da418ae78", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/bef621adac47ece0d8bc045aec35198da418ae78", "message": "Update OBA and fix compilation errors", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "0ca6442856c7ba36e6cbe30b29e4b11497a93161", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0ca6442856c7ba36e6cbe30b29e4b11497a93161", "message": "Add PathwayNode and Entrance to graph", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "2d44b75e3b1301850be4cb06d74268ed90936699", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2d44b75e3b1301850be4cb06d74268ed90936699", "message": "Create elevators from pathways", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "67c76879d600f6a46cf5f5afc423f999d4ba1fa6", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/67c76879d600f6a46cf5f5afc423f999d4ba1fa6", "message": "Add separate TransitEntranceLink", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "0777c7303f1bc91d0518454cf1113505441fb4a8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0777c7303f1bc91d0518454cf1113505441fb4a8", "message": "Add boarding areas", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/948d62e6460959ac8f6f015c288e5a11f7df79ec", "message": "Add tests and assertions for location types", "committedDate": "2020-04-02T11:55:45Z", "type": "commit"}, {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/948d62e6460959ac8f6f015c288e5a11f7df79ec", "message": "Add tests and assertions for location types", "committedDate": "2020-04-02T11:55:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NDg0NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404644844", "bodyText": "Add method to internal Pathway class to avoid use of numeric constants.", "author": "abyrd", "createdAt": "2020-04-07T08:52:09Z", "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -124,29 +142,209 @@ private void addGroupsOfStationsToGraph(Graph graph) {\n         }\n     }\n \n+    private void addEntrancesToGraph(Graph graph) {\n+        for (Entrance entrance : transitService.getAllEntrances()) {\n+            TransitEntranceVertex entranceVertex = new TransitEntranceVertex(graph, entrance);\n+            stopNodes.put(entrance, entranceVertex);\n+        }\n+    }\n+\n+    private void addPathwayNodesToGraph(Graph graph) {\n+        for (PathwayNode node : transitService.getAllPathwayNodes()) {\n+            TransitPathwayNodeVertex nodeVertex = new TransitPathwayNodeVertex(graph, node);\n+            stopNodes.put(node, nodeVertex);\n+        }\n+    }\n+\n+    private void addBoardingAreasToGraph(Graph graph) {\n+        for (BoardingArea boardingArea : transitService.getAllBoardingAreas()) {\n+            TransitBoardingAreaVertex boardingAreaVertex = new TransitBoardingAreaVertex(graph, boardingArea);\n+            stopNodes.put(boardingArea, boardingAreaVertex);\n+            if (boardingArea.getParentStop() != null) {\n+                new PathwayEdge(\n+                    boardingAreaVertex,\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingArea.getName()\n+                );\n+\n+                new PathwayEdge(\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingAreaVertex,\n+                    boardingArea.getName()\n+                );\n+            }\n+        }\n+    }\n+\n     private void createPathwayEdgesAndAddThemToGraph(Graph graph) {\n         for (Pathway pathway : transitService.getAllPathways()) {\n             Vertex fromVertex = stopNodes.get(pathway.getFromStop());\n             Vertex toVertex = stopNodes.get(pathway.getToStop());\n \n-            if(fromVertex != null && toVertex != null) {\n-                if (pathway.isWheelchairTraversalTimeSet()) {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime(), pathway.getWheelchairTraversalTime());\n-                } else {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime());\n+            if (fromVertex != null && toVertex != null) {\n+                // Elevator\n+                if (pathway.getPathwayMode() == 5) {\n+                    createElevatorEdgesAndAddThemToGraph(graph, pathway, fromVertex, toVertex);\n+                }\n+                else {\n+                    new PathwayEdge(\n+                        fromVertex,\n+                        toVertex,\n+                        pathway.getName(),\n+                        pathway.getTraversalTime(),\n+                        pathway.getLength(),\n+                        pathway.getStairCount(),\n+                        pathway.getSlope(),\n+                        pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4", "originalCommit": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e2b9b6725c30d047cb16e9270e381da67391415", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\nindex 968b3388a..f5bb9cebd 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n\n@@ -195,7 +194,7 @@ public class AddTransitModelEntitiesToGraph {\n                         pathway.getLength(),\n                         pathway.getStairCount(),\n                         pathway.getSlope(),\n-                        pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                        pathway.isPathwayModeWheelchairAccessible()\n                     );\n                     if (pathway.isBidirectional()) {\n                         new PathwayEdge(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Njk0MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404646940", "bodyText": "We have decided to leave the repetitive code instead of creating an interface. Change comment to explain we didn't make an interface because this is the only place it causes repetition.", "author": "abyrd", "createdAt": "2020-04-07T08:55:13Z", "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -124,29 +142,209 @@ private void addGroupsOfStationsToGraph(Graph graph) {\n         }\n     }\n \n+    private void addEntrancesToGraph(Graph graph) {\n+        for (Entrance entrance : transitService.getAllEntrances()) {\n+            TransitEntranceVertex entranceVertex = new TransitEntranceVertex(graph, entrance);\n+            stopNodes.put(entrance, entranceVertex);\n+        }\n+    }\n+\n+    private void addPathwayNodesToGraph(Graph graph) {\n+        for (PathwayNode node : transitService.getAllPathwayNodes()) {\n+            TransitPathwayNodeVertex nodeVertex = new TransitPathwayNodeVertex(graph, node);\n+            stopNodes.put(node, nodeVertex);\n+        }\n+    }\n+\n+    private void addBoardingAreasToGraph(Graph graph) {\n+        for (BoardingArea boardingArea : transitService.getAllBoardingAreas()) {\n+            TransitBoardingAreaVertex boardingAreaVertex = new TransitBoardingAreaVertex(graph, boardingArea);\n+            stopNodes.put(boardingArea, boardingAreaVertex);\n+            if (boardingArea.getParentStop() != null) {\n+                new PathwayEdge(\n+                    boardingAreaVertex,\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingArea.getName()\n+                );\n+\n+                new PathwayEdge(\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingAreaVertex,\n+                    boardingArea.getName()\n+                );\n+            }\n+        }\n+    }\n+\n     private void createPathwayEdgesAndAddThemToGraph(Graph graph) {\n         for (Pathway pathway : transitService.getAllPathways()) {\n             Vertex fromVertex = stopNodes.get(pathway.getFromStop());\n             Vertex toVertex = stopNodes.get(pathway.getToStop());\n \n-            if(fromVertex != null && toVertex != null) {\n-                if (pathway.isWheelchairTraversalTimeSet()) {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime(), pathway.getWheelchairTraversalTime());\n-                } else {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime());\n+            if (fromVertex != null && toVertex != null) {\n+                // Elevator\n+                if (pathway.getPathwayMode() == 5) {\n+                    createElevatorEdgesAndAddThemToGraph(graph, pathway, fromVertex, toVertex);\n+                }\n+                else {\n+                    new PathwayEdge(\n+                        fromVertex,\n+                        toVertex,\n+                        pathway.getName(),\n+                        pathway.getTraversalTime(),\n+                        pathway.getLength(),\n+                        pathway.getStairCount(),\n+                        pathway.getSlope(),\n+                        pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                    );\n+                    if (pathway.isBidirectional()) {\n+                        new PathwayEdge(\n+                            toVertex,\n+                            fromVertex,\n+                            pathway.getReversedName(),\n+                            pathway.getTraversalTime(),\n+                            pathway.getLength(),\n+                            -1 * pathway.getStairCount(),\n+                            -1 * pathway.getSlope(),\n+                            pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                        );\n+                    }\n                 }\n             }\n             else {\n-                if(fromVertex == null) {\n-                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway.getFromStop().getId());\n+                if (fromVertex == null) {\n+                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway\n+                        .getFromStop()\n+                        .getId());\n                 }\n-                if(toVertex == null) {\n-                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway.getToStop().getId());\n+                if (toVertex == null) {\n+                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway\n+                        .getToStop()\n+                        .getId());\n                 }\n             }\n         }\n     }\n \n+    private void createElevatorEdgesAndAddThemToGraph(\n+        Graph graph,\n+        Pathway pathway,\n+        Vertex fromVertex,\n+        Vertex toVertex\n+    ) {\n+        String fromVertexLevelName = fromVertex.getName();\n+        Double fromVertexLevelIndex = null;\n+\n+        // TODO: Shuld these be refactored behind an interface", "originalCommit": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0ODk1OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404648959", "bodyText": "Alternatively: add methods to fetch level information to the existing superclass, returning null. Override this method only on classes with level information.", "author": "abyrd", "createdAt": "2020-04-07T08:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Njk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4e2b9b6725c30d047cb16e9270e381da67391415", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\nindex 968b3388a..f5bb9cebd 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n\n@@ -195,7 +194,7 @@ public class AddTransitModelEntitiesToGraph {\n                         pathway.getLength(),\n                         pathway.getStairCount(),\n                         pathway.getSlope(),\n-                        pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                        pathway.isPathwayModeWheelchairAccessible()\n                     );\n                     if (pathway.isBidirectional()) {\n                         new PathwayEdge(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzE0OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404653149", "bodyText": "Rename method to \"hasPathways\", which is probably clearer and avoids negation.", "author": "abyrd", "createdAt": "2020-04-07T09:04:54Z", "path": "src/main/java/org/opentripplanner/graph_builder/module/TransitToTaggedStopsModule.java", "diffHunk": "@@ -74,9 +74,8 @@ public void buildGraph(\n                 }\n             }\n             if(alreadyLinked) continue;\n-            // only connect transit stops that (a) are entrances, or (b) have no associated\n-            // entrances\n-            if (ts.isEntrance() || !ts.hasEntrances()) {\n+            // only connect transit stops that are not part of a pathway network\n+            if (!ts.isStreetLinkable()) {", "originalCommit": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da3658166b4868601d9681e94e80ac5b0c6916ab", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/module/TransitToTaggedStopsModule.java b/src/main/java/org/opentripplanner/graph_builder/module/TransitToTaggedStopsModule.java\nindex 33f8b7c96..b2fa80a12 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/module/TransitToTaggedStopsModule.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/module/TransitToTaggedStopsModule.java\n\n@@ -75,7 +75,7 @@ public class TransitToTaggedStopsModule implements GraphBuilderModule {\n             }\n             if(alreadyLinked) continue;\n             // only connect transit stops that are not part of a pathway network\n-            if (!ts.isStreetLinkable()) {\n+            if (ts.hasPathways()) {\n                 boolean wheelchairAccessible = ts.hasWheelchairEntrance();\n                 if (!connectVertexToStop(ts, wheelchairAccessible)) {\n                     LOG.debug(\"Could not connect \" + ts.getStop().getCode() + \" at \" + ts.getCoordinate().toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NzgwOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404657809", "bodyText": "Try to eliminate numeric constants.", "author": "abyrd", "createdAt": "2020-04-07T09:12:37Z", "path": "src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java", "diffHunk": "@@ -51,8 +59,36 @@ void link(Collection<org.onebusaway.gtfs.model.Stop> gtfsStops) {\n                     continue;\n                 }\n \n-                otpStop.setParentStation(otpStation);\n-                otpStation.addChildStop(otpStop);\n+                if (otpStop instanceof Stop) {\n+                    Stop stop = ((Stop) otpStop);\n+                    stop.setParentStation(otpStation);\n+                    otpStation.addChildStop(stop);\n+                    if (stop.getCoordinate() == null) {\n+                        stop.setCoordinate(new WgsCoordinate(otpStation.getLat(), otpStation.getLon()));\n+                    }\n+                } else if (otpStop instanceof PathwayNode) {\n+                    PathwayNode node = (PathwayNode) otpStop;\n+                    if (node.getCoordinate() == null) {\n+                        node.setCoordinate(new WgsCoordinate(otpStation.getLat(), otpStation.getLon()));\n+                    }\n+                }\n+            } else if (gtfsStop.getLocationType() == 4 && gtfsStop.getParentStation() != null) {", "originalCommit": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37b04810ec8d46074e7568d5ff1383e1f485c8ea", "chunk": "diff --git a/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java b/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java\nindex 2785b671a..9076d5f0b 100644\n--- a/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java\n+++ b/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java\n\n@@ -72,7 +73,8 @@ class LinkStopsAndParentStationsTogether {\n                         node.setCoordinate(new WgsCoordinate(otpStation.getLat(), otpStation.getLon()));\n                     }\n                 }\n-            } else if (gtfsStop.getLocationType() == 4 && gtfsStop.getParentStation() != null) {\n+            } else if (gtfsStop.getLocationType() == org.onebusaway.gtfs.model.Stop.LOCATION_TYPE_BOARDING_AREA\n+                    && gtfsStop.getParentStation() != null) {\n                 BoardingArea otpBoardingArea = getOtpBoardingArea(gtfsStop);\n                 FeedScopedId otpStopId = mapAgencyAndId(gtfsStop.getId());\n                 Stop otpStop = otpStops.get(otpStopId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MjcwNQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404662705", "bodyText": "Add Javadoc explaining that this sets the parent station field, adds child stops to stations, and inherits coordinates as needed from parent stations. Change the name to be a noun instead of a verb (since it's a class). Seeing that this also implies a common interface, it may be a good idea to create this interface with a name like StationElement (rather than emphasizing that it is \"StopLike\"). This interface would have level information and parent station information.", "author": "abyrd", "createdAt": "2020-04-07T09:20:13Z", "path": "src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java", "diffHunk": "@@ -27,18 +28,25 @@\n     LinkStopsAndParentStationsTogether(", "originalCommit": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37b04810ec8d46074e7568d5ff1383e1f485c8ea", "chunk": "diff --git a/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java b/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java\nindex 2785b671a..9076d5f0b 100644\n--- a/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java\n+++ b/src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java\n\n@@ -43,7 +43,8 @@ class LinkStopsAndParentStationsTogether {\n \n     void link(Collection<org.onebusaway.gtfs.model.Stop> gtfsStops) {\n         for (org.onebusaway.gtfs.model.Stop gtfsStop : gtfsStops) {\n-            if (gtfsStop.getLocationType() != 1 && gtfsStop.getLocationType() != 4\n+            if (gtfsStop.getLocationType() != org.onebusaway.gtfs.model.Stop.LOCATION_TYPE_STATION\n+                    && gtfsStop.getLocationType() != org.onebusaway.gtfs.model.Stop.LOCATION_TYPE_BOARDING_AREA\n                     && gtfsStop.getParentStation() != null) {\n \n                 TransitEntity<FeedScopedId> otpStop = getOtpStop(gtfsStop);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MDQ1Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404640452", "bodyText": "Use // instead of /* */ for comment inside code.", "author": "t2gran", "createdAt": "2020-04-07T08:45:18Z", "path": "src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java", "diffHunk": "@@ -182,10 +186,13 @@ public void link () {\n         LOG.info(progress.startMessage());\n \n         for (T v : vertices) {\n-            // TODO OTP2 - Can a vertex already be linked?\n+            /* Do not link vertices, which are already linked by TransitToTaggedStopsModule */", "originalCommit": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNTA4Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404715083", "bodyText": "In general we try to avoid using the old C-style block comment, most IDEs have short-cuts for commenting out blocks of code with //.", "author": "t2gran", "createdAt": "2020-04-07T10:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MDQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "da3658166b4868601d9681e94e80ac5b0c6916ab", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java b/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java\nindex 8c5e39c9d..b988aa1e6 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java\n\n@@ -186,12 +186,14 @@ public class SimpleStreetSplitter {\n         LOG.info(progress.startMessage());\n \n         for (T v : vertices) {\n-            /* Do not link vertices, which are already linked by TransitToTaggedStopsModule */\n+            // Do not link vertices, which are already linked by TransitToTaggedStopsModule\n             boolean alreadyLinked = v.getOutgoing().stream().anyMatch(e -> e instanceof StreetTransitLink);\n             if (alreadyLinked) { continue; }\n \n-            /* Do not link stops connected by pathways */\n-            if (v instanceof TransitStopVertex && !((TransitStopVertex) v).isStreetLinkable()) continue;\n+            //Do not link stops connected by pathways\n+            if (v instanceof TransitStopVertex && ((TransitStopVertex) v).hasPathways()) {\n+                continue;\n+            };\n \n             if (!link(v)) {\n                 issueStore.add(unlinkedIssueMapper.apply(v));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTI0OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404641248", "bodyText": "Always use { } around the body of a if statement. It is ok to keep it on one line.", "author": "t2gran", "createdAt": "2020-04-07T08:46:33Z", "path": "src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java", "diffHunk": "@@ -182,10 +186,13 @@ public void link () {\n         LOG.info(progress.startMessage());\n \n         for (T v : vertices) {\n-            // TODO OTP2 - Can a vertex already be linked?\n+            /* Do not link vertices, which are already linked by TransitToTaggedStopsModule */\n             boolean alreadyLinked = v.getOutgoing().stream().anyMatch(e -> e instanceof StreetTransitLink);\n             if (alreadyLinked) { continue; }\n \n+            /* Do not link stops connected by pathways */\n+            if (v instanceof TransitStopVertex && !((TransitStopVertex) v).isStreetLinkable()) continue;\n+", "originalCommit": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da3658166b4868601d9681e94e80ac5b0c6916ab", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java b/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java\nindex 8c5e39c9d..b988aa1e6 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java\n\n@@ -186,12 +186,14 @@ public class SimpleStreetSplitter {\n         LOG.info(progress.startMessage());\n \n         for (T v : vertices) {\n-            /* Do not link vertices, which are already linked by TransitToTaggedStopsModule */\n+            // Do not link vertices, which are already linked by TransitToTaggedStopsModule\n             boolean alreadyLinked = v.getOutgoing().stream().anyMatch(e -> e instanceof StreetTransitLink);\n             if (alreadyLinked) { continue; }\n \n-            /* Do not link stops connected by pathways */\n-            if (v instanceof TransitStopVertex && !((TransitStopVertex) v).isStreetLinkable()) continue;\n+            //Do not link stops connected by pathways\n+            if (v instanceof TransitStopVertex && ((TransitStopVertex) v).hasPathways()) {\n+                continue;\n+            };\n \n             if (!link(v)) {\n                 issueStore.add(unlinkedIssueMapper.apply(v));\n"}}, {"oid": "4e2b9b6725c30d047cb16e9270e381da67391415", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4e2b9b6725c30d047cb16e9270e381da67391415", "message": "fix pathway method", "committedDate": "2020-04-09T06:29:13Z", "type": "commit"}, {"oid": "da3658166b4868601d9681e94e80ac5b0c6916ab", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/da3658166b4868601d9681e94e80ac5b0c6916ab", "message": "Rename isStreetLinkable to hasPathways", "committedDate": "2020-04-09T06:34:18Z", "type": "commit"}, {"oid": "37b04810ec8d46074e7568d5ff1383e1f485c8ea", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/37b04810ec8d46074e7568d5ff1383e1f485c8ea", "message": "Use Location type constants", "committedDate": "2020-04-09T06:36:35Z", "type": "commit"}, {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d894d6331a27ed7e78e8ec1232ec359d27ea1517", "message": "Add StationElement and refactor Elevator creation to use it", "committedDate": "2020-04-09T07:43:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMDg2OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406030869", "bodyText": "Add comment about the interface", "author": "hannesj", "createdAt": "2020-04-09T08:11:38Z", "path": "src/main/java/org/opentripplanner/model/StationElement.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.opentripplanner.model;\n+", "originalCommit": "d894d6331a27ed7e78e8ec1232ec359d27ea1517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4df95bc6356e823094e657f6f072c4daeddc69", "chunk": "diff --git a/src/main/java/org/opentripplanner/model/StationElement.java b/src/main/java/org/opentripplanner/model/StationElement.java\nindex 53352d777..c65e79309 100644\n--- a/src/main/java/org/opentripplanner/model/StationElement.java\n+++ b/src/main/java/org/opentripplanner/model/StationElement.java\n\n@@ -1,10 +1,120 @@\n package org.opentripplanner.model;\n \n-public interface StationElement {\n+/**\n+ * Acts as the supertype for all entities, except stations, created from the GTFS stops table.\n+ * Most of the fileds are shared between the types, and eg. in pathways the namespace any of them\n+ * can be used as from and to.\n+ * */\n+public abstract class StationElement extends TransitEntity<FeedScopedId>  {\n \n-  /** Get the level name for the station element */\n-  abstract String getLevelName();\n+  protected FeedScopedId id;\n \n-  /** Get the relative level inside the station. Used eg. for calculating elevator hops */\n-  abstract double getLevelIndex();\n+  /**\n+   * Name of the station element if provided.\n+   */\n+  private String name;\n+\n+  /**\n+   * Public facing stop code (short text or number).\n+   */\n+  private String code;\n+\n+  /**\n+   * Additional information about the station element (if needed).\n+   */\n+  private String description;\n+\n+  /** Center point/location for the station element. */\n+  protected WgsCoordinate coordinate;\n+\n+  private WheelChairBoarding wheelchairBoarding;\n+\n+  /** Level name for elevator descriptions */\n+  private String levelName;\n+\n+  /** Level index for hop counts in elevators */\n+  private double levelIndex;\n+\n+  /** Parent station for the station element*/\n+  private Station parentStation;\n+\n+  @Override public FeedScopedId getId() {\n+      return id;\n+  }\n+\n+  @Override public void setId(FeedScopedId id) {\n+      this.id = id;\n+  }\n+\n+  public String getName() {\n+      return name;\n+  }\n+\n+  public void setName(String name) {\n+      this.name = name;\n+  }\n+\n+  public String getCode() {\n+      return code;\n+  }\n+\n+  public void setCode(String code) {\n+      this.code = code;\n+  }\n+\n+  public String getDescription() {\n+      return description;\n+  }\n+\n+  public void setDescription(String description) {\n+      this.description = description;\n+  }\n+\n+  public WgsCoordinate getCoordinate() {\n+    return coordinate != null ? coordinate : parentStation.getCoordinate();\n+  }\n+\n+  public void setCoordinate(WgsCoordinate coordinate) {\n+    this.coordinate = coordinate;\n+  }\n+\n+  public double getLat() {\n+    return getCoordinate().latitude();\n+  }\n+\n+  public double getLon() {\n+    return getCoordinate().longitude();\n+  }\n+\n+  public WheelChairBoarding getWheelchairBoarding() {\n+      return wheelchairBoarding;\n+  }\n+\n+  public void setWheelchairBoarding(WheelChairBoarding wheelchairBoarding) {\n+      this.wheelchairBoarding = wheelchairBoarding;\n+  }\n+\n+  public String getLevelName() {\n+      return levelName;\n+  }\n+\n+  public void setLevelName(String levelName) {\n+      this.levelName = levelName;\n+  }\n+\n+  public double getLevelIndex() {\n+      return levelIndex;\n+  }\n+\n+  public void setLevelIndex(double levelIndex) {\n+    this.levelIndex = levelIndex;\n+  }\n+\n+  public Station getParentStation() {\n+    return parentStation;\n+  }\n+\n+  public void setParentStation(Station parentStation) {\n+    this.parentStation = parentStation;\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MTM0NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406041344", "bodyText": "Use coordinate from parent stop", "author": "hannesj", "createdAt": "2020-04-09T08:29:16Z", "path": "src/main/java/org/opentripplanner/model/Stop.java", "diffHunk": "@@ -66,11 +76,15 @@ public void setName(String name) {\n     }\n \n     public double getLat() {\n-        return coordinate.latitude();\n+        return coordinate == null ? 0 : coordinate.latitude();", "originalCommit": "d894d6331a27ed7e78e8ec1232ec359d27ea1517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4df95bc6356e823094e657f6f072c4daeddc69", "chunk": "diff --git a/src/main/java/org/opentripplanner/model/Stop.java b/src/main/java/org/opentripplanner/model/Stop.java\nindex 64bc9c688..6770d39bb 100644\n--- a/src/main/java/org/opentripplanner/model/Stop.java\n+++ b/src/main/java/org/opentripplanner/model/Stop.java\n\n@@ -59,54 +31,6 @@ public final class Stop extends TransitEntity<FeedScopedId> implements StationEl\n         this.id = id;\n     }\n \n-    @Override public FeedScopedId getId() {\n-        return id;\n-    }\n-\n-    @Override public void setId(FeedScopedId id) {\n-        this.id = id;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public double getLat() {\n-        return coordinate == null ? 0 : coordinate.latitude();\n-    }\n-\n-    public double getLon() {\n-        return coordinate == null ? 0 : coordinate.longitude();\n-    }\n-\n-    public WgsCoordinate getCoordinate() {\n-        return coordinate;\n-    }\n-\n-    public void setCoordinate(WgsCoordinate coordinate) {\n-        this.coordinate = coordinate;\n-    }\n-\n-    public String getCode() {\n-        return code;\n-    }\n-\n-    public void setCode(String code) {\n-        this.code = code;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n     public String getZone() {\n         return zone;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NTYxOA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406045618", "bodyText": "Change to StationElement", "author": "hannesj", "createdAt": "2020-04-09T08:36:32Z", "path": "src/main/java/org/opentripplanner/model/Pathway.java", "diffHunk": "@@ -5,19 +5,27 @@\n \n     private static final long serialVersionUID = -2404871423254094109L;\n \n-    private static final int MISSING_VALUE = -999;\n-\n     private FeedScopedId id;\n \n-    private int pathwayType;\n+    private int pathwayMode;\n+\n+    private TransitEntity<FeedScopedId> fromStop;", "originalCommit": "d894d6331a27ed7e78e8ec1232ec359d27ea1517", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4df95bc6356e823094e657f6f072c4daeddc69", "chunk": "diff --git a/src/main/java/org/opentripplanner/model/Pathway.java b/src/main/java/org/opentripplanner/model/Pathway.java\nindex 6455225c1..3536d5cff 100644\n--- a/src/main/java/org/opentripplanner/model/Pathway.java\n+++ b/src/main/java/org/opentripplanner/model/Pathway.java\n\n@@ -9,9 +9,9 @@ public final class Pathway extends TransitEntity<FeedScopedId> {\n \n     private int pathwayMode;\n \n-    private TransitEntity<FeedScopedId> fromStop;\n+    private StationElement fromStop;\n \n-    private TransitEntity<FeedScopedId> toStop;\n+    private StationElement toStop;\n \n     private String name;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTY1NA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406049654", "bodyText": "Do not inline this", "author": "hannesj", "createdAt": "2020-04-09T08:43:28Z", "path": "src/main/java/org/opentripplanner/routing/edgetype/StreetTransitLink.java", "diffHunk": "@@ -110,8 +110,10 @@ public State traverse(State s0) {\n                 return null;\n             }\n         }\n-        s1.incrementTimeInSeconds(stopVertex.getStreetToStopTime() + STL_TRAVERSE_COST);\n-        s1.incrementWeight(STL_TRAVERSE_COST + stopVertex.getStreetToStopTime());\n+\n+        var streetToStopTime = 0;", "originalCommit": "d894d6331a27ed7e78e8ec1232ec359d27ea1517", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MDcwMw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406050703", "bodyText": "Check if connected via pathways instead", "author": "hannesj", "createdAt": "2020-04-09T08:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "99e3a52763028ace753c3306131d6fed64b98433", "chunk": "diff --git a/src/main/java/org/opentripplanner/routing/edgetype/StreetTransitLink.java b/src/main/java/org/opentripplanner/routing/edgetype/StreetTransitLink.java\nindex 89237646c..370a4f2bb 100644\n--- a/src/main/java/org/opentripplanner/routing/edgetype/StreetTransitLink.java\n+++ b/src/main/java/org/opentripplanner/routing/edgetype/StreetTransitLink.java\n\n@@ -111,7 +111,7 @@ public class StreetTransitLink extends Edge {\n             }\n         }\n \n-        var streetToStopTime = 0;\n+        int streetToStopTime = stopVertex.hasPathways() ? 0 : stopVertex.getStreetToStopTime();\n         s1.incrementTimeInSeconds(streetToStopTime + STL_TRAVERSE_COST);\n         s1.incrementWeight(STL_TRAVERSE_COST + streetToStopTime);\n         s1.setBackMode(TraverseMode.LEG_SWITCH);\n"}}, {"oid": "bb4df95bc6356e823094e657f6f072c4daeddc69", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/bb4df95bc6356e823094e657f6f072c4daeddc69", "message": "Extract common fields to StationElement", "committedDate": "2020-04-09T13:05:47Z", "type": "commit"}, {"oid": "a057914f4a9b89aab29228edeb059fc23b559c8e", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a057914f4a9b89aab29228edeb059fc23b559c8e", "message": "Refactor StopToParentStationLinker", "committedDate": "2020-04-09T13:13:04Z", "type": "commit"}, {"oid": "99e3a52763028ace753c3306131d6fed64b98433", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/99e3a52763028ace753c3306131d6fed64b98433", "message": "Use getStreetToStopTime if stop is not linked via pathways", "committedDate": "2020-04-09T13:13:21Z", "type": "commit"}, {"oid": "99e3a52763028ace753c3306131d6fed64b98433", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/99e3a52763028ace753c3306131d6fed64b98433", "message": "Use getStreetToStopTime if stop is not linked via pathways", "committedDate": "2020-04-09T13:13:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0Njk3MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r407946970", "bodyText": "Move JavaDoc to getter.", "author": "t2gran", "createdAt": "2020-04-14T08:11:33Z", "path": "src/main/java/org/opentripplanner/model/StationElement.java", "diffHunk": "@@ -1,10 +1,120 @@\n package org.opentripplanner.model;\n \n-public interface StationElement {\n+/**\n+ * Acts as the supertype for all entities, except stations, created from the GTFS stops table.\n+ * Most of the fileds are shared between the types, and eg. in pathways the namespace any of them\n+ * can be used as from and to.\n+ * */\n+public abstract class StationElement extends TransitEntity<FeedScopedId>  {\n \n-  /** Get the level name for the station element */\n-  abstract String getLevelName();\n+  protected FeedScopedId id;\n \n-  /** Get the relative level inside the station. Used eg. for calculating elevator hops */\n-  abstract double getLevelIndex();\n+  /**\n+   * Name of the station element if provided.\n+   */", "originalCommit": "bb4df95bc6356e823094e657f6f072c4daeddc69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7588d044251a68df8a44dfa8885908241078d73f", "chunk": "diff --git a/src/main/java/org/opentripplanner/model/StationElement.java b/src/main/java/org/opentripplanner/model/StationElement.java\nindex c65e79309..21741da6d 100644\n--- a/src/main/java/org/opentripplanner/model/StationElement.java\n+++ b/src/main/java/org/opentripplanner/model/StationElement.java\n\n@@ -9,33 +9,20 @@ public abstract class StationElement extends TransitEntity<FeedScopedId>  {\n \n   protected FeedScopedId id;\n \n-  /**\n-   * Name of the station element if provided.\n-   */\n   private String name;\n \n-  /**\n-   * Public facing stop code (short text or number).\n-   */\n   private String code;\n \n-  /**\n-   * Additional information about the station element (if needed).\n-   */\n   private String description;\n \n-  /** Center point/location for the station element. */\n   protected WgsCoordinate coordinate;\n \n   private WheelChairBoarding wheelchairBoarding;\n \n-  /** Level name for elevator descriptions */\n   private String levelName;\n \n-  /** Level index for hop counts in elevators */\n   private double levelIndex;\n \n-  /** Parent station for the station element*/\n   private Station parentStation;\n \n   @Override public FeedScopedId getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzODQwMQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r408038401", "bodyText": "This is not just for GTFS, it also apply to the Netex import, so the original comment is probably better.", "author": "t2gran", "createdAt": "2020-04-14T10:39:20Z", "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -33,8 +48,8 @@\n \n     private final OtpTransitService transitService;\n \n-    // Map of stops and their vertices in the graph\n-    private Map<Stop, TransitStopVertex> stopNodes = new HashMap<>();\n+    // Map of all gtfs stops and their vertices in the graph\n+    private Map<TransitEntity<FeedScopedId>, Vertex> stopNodes = new HashMap<>();", "originalCommit": "99e3a52763028ace753c3306131d6fed64b98433", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7588d044251a68df8a44dfa8885908241078d73f", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\nindex 4e77d9c62..1bbf5e486 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n\n@@ -48,8 +48,8 @@ public class AddTransitModelEntitiesToGraph {\n \n     private final OtpTransitService transitService;\n \n-    // Map of all gtfs stops and their vertices in the graph\n     private Map<TransitEntity<FeedScopedId>, Vertex> stopNodes = new HashMap<>();\n+    // Map of all station elements and their vertices in the graph\n \n     private final int subwayAccessTime;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0MTEwMQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r408041101", "bodyText": "Not specific to GTFS, it is not implemented in the NeTEx import yet, but hopefully if we add that this code will be reused without any modifications.", "author": "t2gran", "createdAt": "2020-04-14T10:44:13Z", "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -124,29 +142,183 @@ private void addGroupsOfStationsToGraph(Graph graph) {\n         }\n     }\n \n+    private void addEntrancesToGraph(Graph graph) {\n+        for (Entrance entrance : transitService.getAllEntrances()) {\n+            TransitEntranceVertex entranceVertex = new TransitEntranceVertex(graph, entrance);\n+            stopNodes.put(entrance, entranceVertex);\n+        }\n+    }\n+\n+    private void addPathwayNodesToGraph(Graph graph) {\n+        for (PathwayNode node : transitService.getAllPathwayNodes()) {\n+            TransitPathwayNodeVertex nodeVertex = new TransitPathwayNodeVertex(graph, node);\n+            stopNodes.put(node, nodeVertex);\n+        }\n+    }\n+\n+    private void addBoardingAreasToGraph(Graph graph) {\n+        for (BoardingArea boardingArea : transitService.getAllBoardingAreas()) {\n+            TransitBoardingAreaVertex boardingAreaVertex = new TransitBoardingAreaVertex(graph, boardingArea);\n+            stopNodes.put(boardingArea, boardingAreaVertex);\n+            if (boardingArea.getParentStop() != null) {\n+                new PathwayEdge(\n+                    boardingAreaVertex,\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingArea.getName()\n+                );\n+\n+                new PathwayEdge(\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingAreaVertex,\n+                    boardingArea.getName()\n+                );\n+            }\n+        }\n+    }\n+\n     private void createPathwayEdgesAndAddThemToGraph(Graph graph) {\n         for (Pathway pathway : transitService.getAllPathways()) {\n             Vertex fromVertex = stopNodes.get(pathway.getFromStop());\n             Vertex toVertex = stopNodes.get(pathway.getToStop());\n \n-            if(fromVertex != null && toVertex != null) {\n-                if (pathway.isWheelchairTraversalTimeSet()) {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime(), pathway.getWheelchairTraversalTime());\n-                } else {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime());\n+            if (fromVertex != null && toVertex != null) {\n+                // Elevator\n+                if (pathway.getPathwayMode() == 5) {\n+                    createElevatorEdgesAndAddThemToGraph(graph, pathway, fromVertex, toVertex);\n+                }\n+                else {\n+                    new PathwayEdge(\n+                        fromVertex,\n+                        toVertex,\n+                        pathway.getName(),\n+                        pathway.getTraversalTime(),\n+                        pathway.getLength(),\n+                        pathway.getStairCount(),\n+                        pathway.getSlope(),\n+                        pathway.isPathwayModeWheelchairAccessible()\n+                    );\n+                    if (pathway.isBidirectional()) {\n+                        new PathwayEdge(\n+                            toVertex,\n+                            fromVertex,\n+                            pathway.getReversedName(),\n+                            pathway.getTraversalTime(),\n+                            pathway.getLength(),\n+                            -1 * pathway.getStairCount(),\n+                            -1 * pathway.getSlope(),\n+                            pathway.isPathwayModeWheelchairAccessible()\n+                        );\n+                    }\n                 }\n             }\n             else {\n-                if(fromVertex == null) {\n-                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway.getFromStop().getId());\n+                if (fromVertex == null) {\n+                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway\n+                        .getFromStop()\n+                        .getId());\n                 }\n-                if(toVertex == null) {\n-                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway.getToStop().getId());\n+                if (toVertex == null) {\n+                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway\n+                        .getToStop()\n+                        .getId());\n                 }\n             }\n         }\n     }\n \n+    /**\n+     * Create elevator edges from GTFS pathways. As GTFS elevators are not vertices, but edges in\n+     * the GTFS pathway model, we have to model each possible movement as an onboard-offboard pair,\n+     * instead of having only one set of vertices per level and edges between them.\n+     */", "originalCommit": "99e3a52763028ace753c3306131d6fed64b98433", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7588d044251a68df8a44dfa8885908241078d73f", "chunk": "diff --git a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\nindex 4e77d9c62..1bbf5e486 100644\n--- a/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n+++ b/src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java\n\n@@ -227,8 +226,8 @@ public class AddTransitModelEntitiesToGraph {\n     }\n \n     /**\n-     * Create elevator edges from GTFS pathways. As GTFS elevators are not vertices, but edges in\n-     * the GTFS pathway model, we have to model each possible movement as an onboard-offboard pair,\n+     * Create elevator edges from pathways. As pathway based elevators are not vertices, but edges\n+     * in the pathway model, we have to model each possible movement as an onboard-offboard pair,\n      * instead of having only one set of vertices per level and edges between them.\n      */\n     private void createElevatorEdgesAndAddThemToGraph(\n"}}, {"oid": "7588d044251a68df8a44dfa8885908241078d73f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7588d044251a68df8a44dfa8885908241078d73f", "message": "Update javadoc", "committedDate": "2020-04-15T09:25:28Z", "type": "commit"}, {"oid": "d4ff39fd59adf7e82efc1fc3fe51a6cbe1d90e07", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d4ff39fd59adf7e82efc1fc3fe51a6cbe1d90e07", "message": "Rename stop to stationElement", "committedDate": "2020-04-15T09:26:03Z", "type": "commit"}, {"oid": "5c8d738f24bfcc49ad93f1e8825f54eeb69152fe", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5c8d738f24bfcc49ad93f1e8825f54eeb69152fe", "message": "Make tests expect NPE when coordinate is unset", "committedDate": "2020-04-15T09:35:52Z", "type": "commit"}, {"oid": "e43485ad53d7598087ed3db41d76a80a59da0aa8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e43485ad53d7598087ed3db41d76a80a59da0aa8", "message": "Fix usage of pathway check in TransitToTaggedStopsModule", "committedDate": "2020-04-15T11:09:00Z", "type": "commit"}, {"oid": "c71117f391249de999076f8ad9a8f36bc6a064ab", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c71117f391249de999076f8ad9a8f36bc6a064ab", "message": "Merge remote-tracking branch 'origin/dev-2.x' into pathways", "committedDate": "2020-04-15T11:10:52Z", "type": "commit"}, {"oid": "97ef254e876446da0fac6bc4c30c8d3207433090", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/97ef254e876446da0fac6bc4c30c8d3207433090", "message": "Guard againist null\n\nFound a case in paris data when neither pathway nor pathway node has a name.", "committedDate": "2020-04-15T11:41:06Z", "type": "commit"}]}