{"pr_number": 18219, "pr_title": "#18182 missing remove attribute when encapsulating method", "pr_createdAt": "2020-03-31T17:34:32Z", "pr_url": "https://github.com/dotCMS/core/pull/18219", "timeline": [{"oid": "094003cd5b40320c93136470a00d2d9f93bc78fb", "url": "https://github.com/dotCMS/core/commit/094003cd5b40320c93136470a00d2d9f93bc78fb", "message": "#18182 missing remove attribute when encapsulating method", "committedDate": "2020-03-31T17:31:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5Nzk2NA==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401097964", "bodyText": "should this change have a postman test or at least a unit/integration test?", "author": "freddyucv", "createdAt": "2020-03-31T17:43:56Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "diffHunk": "@@ -403,7 +403,7 @@ private void updateLoginAsSessionInfo(final HttpServletRequest request, final Ho\n \t\tfinal String userToImpersonate = (UtilMethods.isSet(loginAsUserId) ? loginAsUserId : principalUserId);", "originalCommit": "094003cd5b40320c93136470a00d2d9f93bc78fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczOTA5MQ==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401739091", "bodyText": "done", "author": "erickgonzalez", "createdAt": "2020-04-01T16:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5Nzk2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNjI1OQ==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401126259", "bodyText": "Move this code to the revertLoginAsSessionInfo method in order to encapsulate the session revert process", "author": "jcastro-dotcms", "createdAt": "2020-03-31T18:30:38Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "diffHunk": "@@ -498,6 +498,7 @@ public final Response logoutAs(@Context final HttpServletRequest httpServletRequ\n \t\t\tfinal Map<String, Object> sessionData = this.helper.doLogoutAs(principalUserId, currentLoginAsUser, serverName);\n \t\t\trevertLoginAsSessionInfo(httpServletRequest, Host.class.cast(sessionData.get(com.dotmarketing.util.WebKeys\n \t\t\t\t\t.CURRENT_HOST)), principalUserId);\n+\t\t\thttpServletRequest.getSession().removeAttribute(WebKeys.PRINCIPAL_USER_ID);", "originalCommit": "094003cd5b40320c93136470a00d2d9f93bc78fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MzI3Mw==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401183273", "bodyText": "done", "author": "erickgonzalez", "createdAt": "2020-03-31T20:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNjI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5ad7929b1b5d191772b869a46ed49940a62a8ca", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java b/dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java\nindex c0ca9c8df9..8064e60e92 100644\n--- a/dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java\n+++ b/dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java\n\n@@ -498,7 +499,6 @@ public class UserResource implements Serializable {\n \t\t\tfinal Map<String, Object> sessionData = this.helper.doLogoutAs(principalUserId, currentLoginAsUser, serverName);\n \t\t\trevertLoginAsSessionInfo(httpServletRequest, Host.class.cast(sessionData.get(com.dotmarketing.util.WebKeys\n \t\t\t\t\t.CURRENT_HOST)), principalUserId);\n-\t\t\thttpServletRequest.getSession().removeAttribute(WebKeys.PRINCIPAL_USER_ID);\n \t\t\tresponse = Response.ok(new ResponseEntityView(map(\"logoutAs\", true))).build();\n \t\t} catch (final DotSecurityException | DotDataException e) {\n \t\t\tSecurityLogger.logInfo(UserResource.class, String.format(\"ERROR: An error occurred when attempting to log \" +\n"}}, {"oid": "e5ad7929b1b5d191772b869a46ed49940a62a8ca", "url": "https://github.com/dotCMS/core/commit/e5ad7929b1b5d191772b869a46ed49940a62a8ca", "message": "#18182 move remove attribute to revertLogin method", "committedDate": "2020-03-31T20:08:39Z", "type": "commit"}, {"oid": "74fb732755b08c3486a7813c6230347ed1d19a16", "url": "https://github.com/dotCMS/core/commit/74fb732755b08c3486a7813c6230347ed1d19a16", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18182", "committedDate": "2020-04-01T16:13:58Z", "type": "commit"}, {"oid": "4b1135f9cc2f343bc388e68f623e38215715cc5a", "url": "https://github.com/dotCMS/core/commit/4b1135f9cc2f343bc388e68f623e38215715cc5a", "message": "#18182 IT for loginAs and logoutAs", "committedDate": "2020-04-01T16:15:27Z", "type": "commit"}, {"oid": "880440f434e495b9b62cb2875fb711f8b0b96c85", "url": "https://github.com/dotCMS/core/commit/880440f434e495b9b62cb2875fb711f8b0b96c85", "message": "#18182 fix tests", "committedDate": "2020-04-02T20:47:27Z", "type": "commit"}, {"oid": "203348ad05b8c4b9428e1b2c97765ff9bc302de0", "url": "https://github.com/dotCMS/core/commit/203348ad05b8c4b9428e1b2c97765ff9bc302de0", "message": "empty space", "committedDate": "2020-04-02T22:11:05Z", "type": "commit"}, {"oid": "d2e300ca9a5b9c1f5f35e05cf3d1516c912ecef3", "url": "https://github.com/dotCMS/core/commit/d2e300ca9a5b9c1f5f35e05cf3d1516c912ecef3", "message": "logs", "committedDate": "2020-04-03T16:50:34Z", "type": "commit"}, {"oid": "3be36fec458167f0589481f749183d8a8c1aece9", "url": "https://github.com/dotCMS/core/commit/3be36fec458167f0589481f749183d8a8c1aece9", "message": "logs", "committedDate": "2020-04-03T18:04:58Z", "type": "commit"}, {"oid": "5ad2debc91ace384c276d5270aaf2469e758507c", "url": "https://github.com/dotCMS/core/commit/5ad2debc91ace384c276d5270aaf2469e758507c", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18182", "committedDate": "2020-04-06T17:12:47Z", "type": "commit"}, {"oid": "85507440c45aaac6a970a25ba9198ab59187f92d", "url": "https://github.com/dotCMS/core/commit/85507440c45aaac6a970a25ba9198ab59187f92d", "message": "logs and add variables to session", "committedDate": "2020-04-06T17:13:43Z", "type": "commit"}, {"oid": "ff271f03407565ea808c255731b9f18f0f5977bd", "url": "https://github.com/dotCMS/core/commit/ff271f03407565ea808c255731b9f18f0f5977bd", "message": "logs", "committedDate": "2020-04-06T18:16:26Z", "type": "commit"}, {"oid": "d2c49be144a12d159ae4fa2701e78bc5309f1531", "url": "https://github.com/dotCMS/core/commit/d2c49be144a12d159ae4fa2701e78bc5309f1531", "message": "check permissions over host", "committedDate": "2020-04-06T19:56:39Z", "type": "commit"}, {"oid": "4f6cca599c37b2c3b5807a80b2b07eeea8c7d68f", "url": "https://github.com/dotCMS/core/commit/4f6cca599c37b2c3b5807a80b2b07eeea8c7d68f", "message": "create host", "committedDate": "2020-04-06T21:08:54Z", "type": "commit"}, {"oid": "615a097ce01ca6dd6d4a36f221f7cda09205d37a", "url": "https://github.com/dotCMS/core/commit/615a097ce01ca6dd6d4a36f221f7cda09205d37a", "message": "change order tests", "committedDate": "2020-04-06T22:01:27Z", "type": "commit"}, {"oid": "a6c969841233724d36d17b267bbb18e1d888bfcd", "url": "https://github.com/dotCMS/core/commit/a6c969841233724d36d17b267bbb18e1d888bfcd", "message": "revert logs", "committedDate": "2020-04-06T23:25:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU0MQ==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449541", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-06T23:31:46Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class UserResourceIntegrationTest {\n+\n+    static HttpServletResponse response;\n+    static HttpServletRequest request;\n+    static UserResource resource;\n+    static User user;\n+    static Host host;\n+    static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "a6c969841233724d36d17b267bbb18e1d888bfcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU1MA==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449550", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-04-06T23:31:47Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class UserResourceIntegrationTest {\n+\n+    static HttpServletResponse response;\n+    static HttpServletRequest request;\n+    static UserResource resource;\n+    static User user;\n+    static Host host;\n+    static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        resource = new UserResource();\n+        adminUser = TestUserUtils.getAdminUser();\n+        host = new SiteDataGen().nextPersisted();\n+        user = TestUserUtils.getChrisPublisherUser(host);\n+        response = new MockHttpResponse();\n+\n+        //Check if role has any layout, if is empty add one\n+        if(APILocator.getLayoutAPI().loadLayoutsForUser(user).isEmpty()) {\n+            APILocator.getRoleAPI()\n+                    .addLayoutToRole(APILocator.getLayoutAPI().findAllLayouts().get(0),\n+                            APILocator.getRoleAPI().getUserRole(user));\n+        }\n+        //Add permissions to the host\n+        final Permission readPermissionsPermission = new Permission( host.getPermissionId(),\n+                APILocator.getRoleAPI().getUserRole(user).getId(), PermissionAPI.PERMISSION_READ, true );\n+        APILocator.getPermissionAPI().save(readPermissionsPermission,host,adminUser,false);\n+\n+    }\n+\n+    private static HttpServletRequest mockRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CURRENT_HOST,host);\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID,host);\n+\n+        return request;\n+    }\n+\n+    private void loginAs() throws Exception {\n+        final LoginAsForm loginAsForm = new LoginAsForm.Builder().userId(user.getUserId()).build();\n+        request = mockRequest();\n+        final Response resourceResponse = resource.loginAs(request,response,loginAsForm);\n+        assertNotNull(resourceResponse);\n+        assertEquals(Status.OK.getStatusCode(),resourceResponse.getStatus());\n+        assertEquals(user.getUserId(),request.getSession().getAttribute(WebKeys.USER_ID));\n+        assertNull(request.getSession().getAttribute(WebKeys.USER));\n+        assertEquals(adminUser.getUserId(),request.getSession().getAttribute(WebKeys.PRINCIPAL_USER_ID));\n+    }\n+\n+    @Test\n+    public void test_loginAs_success() throws Exception{", "originalCommit": "a6c969841233724d36d17b267bbb18e1d888bfcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU1Nw==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449557", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "author": "dev-dotcms", "createdAt": "2020-04-06T23:31:48Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;", "originalCommit": "a6c969841233724d36d17b267bbb18e1d888bfcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU2NQ==", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449565", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-06T23:31:49Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class UserResourceIntegrationTest {\n+\n+    static HttpServletResponse response;\n+    static HttpServletRequest request;\n+    static UserResource resource;\n+    static User user;\n+    static Host host;\n+    static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        resource = new UserResource();\n+        adminUser = TestUserUtils.getAdminUser();\n+        host = new SiteDataGen().nextPersisted();\n+        user = TestUserUtils.getChrisPublisherUser(host);\n+        response = new MockHttpResponse();\n+\n+        //Check if role has any layout, if is empty add one\n+        if(APILocator.getLayoutAPI().loadLayoutsForUser(user).isEmpty()) {\n+            APILocator.getRoleAPI()\n+                    .addLayoutToRole(APILocator.getLayoutAPI().findAllLayouts().get(0),\n+                            APILocator.getRoleAPI().getUserRole(user));\n+        }\n+        //Add permissions to the host\n+        final Permission readPermissionsPermission = new Permission( host.getPermissionId(),\n+                APILocator.getRoleAPI().getUserRole(user).getId(), PermissionAPI.PERMISSION_READ, true );\n+        APILocator.getPermissionAPI().save(readPermissionsPermission,host,adminUser,false);\n+\n+    }\n+\n+    private static HttpServletRequest mockRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CURRENT_HOST,host);\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID,host);\n+\n+        return request;\n+    }\n+\n+    private void loginAs() throws Exception {", "originalCommit": "a6c969841233724d36d17b267bbb18e1d888bfcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}