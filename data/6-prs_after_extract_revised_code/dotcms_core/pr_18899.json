{"pr_number": 18899, "pr_title": "Issue 18887 set es custom mappings when a field is created", "pr_createdAt": "2020-07-16T22:28:35Z", "pr_url": "https://github.com/dotCMS/core/pull/18899", "timeline": [{"oid": "ca07e40582433e18baacd97cb2fabe2389090b51", "url": "https://github.com/dotCMS/core/commit/ca07e40582433e18baacd97cb2fabe2389090b51", "message": "#18887 Setting ES mapping when new fields are saved", "committedDate": "2020-07-16T22:21:59Z", "type": "commit"}, {"oid": "6f2dd69fe252c9e0681a936796d6bbfa5a681b7c", "url": "https://github.com/dotCMS/core/commit/6f2dd69fe252c9e0681a936796d6bbfa5a681b7c", "message": "#18887 New ITs", "committedDate": "2020-07-16T22:22:17Z", "type": "commit"}, {"oid": "865e245e37cdcd1dd585097cfb5eb20cd09ac02e", "url": "https://github.com/dotCMS/core/commit/865e245e37cdcd1dd585097cfb5eb20cd09ac02e", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-18887-set-es-custom-mappings-when-a-field-is-created", "committedDate": "2020-07-17T15:19:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5ODEwOA==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r456498108", "bodyText": "param field could be marked final too.", "author": "fabrizzio-dotCMS", "createdAt": "2020-07-17T15:00:38Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java", "diffHunk": "@@ -92,6 +95,30 @@ public void addCustomMapping(final String indexName) {\n         addMappingForRemainingFields(indexName, mappedFields);\n     }\n \n+    /**\n+     * Sets an ES mapping for a {@link Field} (it does not include field variables) on a specified index.\n+     * This method is used when a new field is created\n+     * @param indexName - Index where mapping will be applied\n+     * @param field\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     * @throws IOException\n+     * @throws JSONException\n+     */\n+    @CloseDBIfOpened\n+    public void addCustomMapping(final String indexName, Field field)\n+            throws DotSecurityException, DotDataException, IOException, JSONException {", "originalCommit": "6f2dd69fe252c9e0681a936796d6bbfa5a681b7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3ae57cf2b864d61bf8c9177de6c040a920266e1", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java b/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java\nindex d0e083ef34..42d38058bc 100644\n--- a/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java\n+++ b/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java\n\n@@ -106,7 +108,7 @@ public class ESMappingUtilHelper {\n      * @throws JSONException\n      */\n     @CloseDBIfOpened\n-    public void addCustomMapping(final String indexName, Field field)\n+    public void addCustomMapping(final String indexName, final Field field)\n             throws DotSecurityException, DotDataException, IOException, JSONException {\n         final ContentType contentType = contentTypeAPI.find(field.contentTypeId());\n         if (field instanceof RelationshipField){\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODAwMA==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r456508000", "bodyText": "codacy already recommended using StringBuilder here and I like that but I think is more maintainable doing something like :\nmappingForField =  String.format(\"{\\n\"type\":\"%s\"\\n}\",fieldType);\nand pass fieldType. That way we can have that string format declared just once.\nand the fieldType can be returned out of function so the function I imagine could use a static map and look like this:\nImmutableMap.of(\nDataTypes.BOOL,DataTypes.BOOL.toString().toLowercase(),   //Could do something like this \nDataTypes.FLOAT, \"float\",   //or simply\nDataTypes.INTEGER, \"integer\"\n) ;\n\nI've seen that Using maps like this to eliminate nested ifs. Is called the anti-if pattern.", "author": "fabrizzio-dotCMS", "createdAt": "2020-07-17T15:17:02Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java", "diffHunk": "@@ -298,6 +301,61 @@ private void addMappingForFieldIfNeeded(final String indexName,\n         }\n     }\n \n+    /**\n+     * Given a {@link Field}, obtains the ES mapping according to the {@link Field} type\n+     * @param field\n+     * @param fieldVariableName\n+     * @return\n+     */\n+    private String getMappingForField(final Field field, final String fieldVariableName) {\n+        String mappingForField = null;\n+        if (field instanceof DateField || field instanceof DateTimeField\n+                || field instanceof TimeField) {\n+            mappingForField = \"{\\n\\\"type\\\":\\\"date\\\",\\n\";\n+            mappingForField += \"\\\"format\\\": \\\"yyyy-MM-dd't'HH:mm:ss||MMM d, yyyy h:mm:ss a||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\\\"\\n}\";\n+        } else if (field instanceof TextField || field instanceof TextAreaField\n+                || field instanceof WysiwygField || field instanceof RadioField\n+                || field instanceof SelectField) {\n+            if (field.dataType() == DataTypes.BOOL) {\n+                mappingForField = \"{\\n\\\"type\\\":\\\"boolean\\\"\\n}\";\n+            } else if (field.dataType() == DataTypes.FLOAT) {\n+                mappingForField = \"{\\n\\\"type\\\":\\\"float\\\"\\n}\";\n+            } else if (field.dataType() == DataTypes.INTEGER) {\n+                mappingForField = \"{\\n\\\"type\\\":\\\"integer\\\"\\n}\";\n+            } else if (!matchesExclusions(fieldVariableName)){\n+                mappingForField = \"{\\n\\\"type\\\":\\\"text\\\"\\n}\";\n+            }\n+        }\n+        return mappingForField;\n+    }\n+", "originalCommit": "6f2dd69fe252c9e0681a936796d6bbfa5a681b7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzNDI3Ng==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r462434276", "bodyText": "Good suggestion. Done!", "author": "nollymar", "createdAt": "2020-07-29T16:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "56e36448a616e0994515dd831b3da5b77ddb79fe", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java b/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java\nindex d0e083ef34..5441dd5d8b 100644\n--- a/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java\n+++ b/dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java\n\n@@ -323,7 +323,11 @@ public class ESMappingUtilHelper {\n             } else if (field.dataType() == DataTypes.INTEGER) {\n                 mappingForField = \"{\\n\\\"type\\\":\\\"integer\\\"\\n}\";\n             } else if (!matchesExclusions(fieldVariableName)){\n-                mappingForField = \"{\\n\\\"type\\\":\\\"text\\\"\\n}\";\n+                mappingForField = \"{\\n\\\"\"\n+                        + \"type\\\":\\\"text\\\",\"\n+                        + \"analyzer\\\":\\\"my_analyzer\\\",\"\n+                        + \"store\\\":\\\"false\\\"\"\n+                        + \"\\n}\";\n             }\n         }\n         return mappingForField;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNTUwNg==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r456515506", "bodyText": "maybe we can test other data types and their expected mapping", "author": "dsilvam", "createdAt": "2020-07-17T15:29:45Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1357,6 +1362,129 @@ public void test_SaveField_GivenGraphQLCompatibleVariable_ShouldSave(\n         }\n     }\n \n+    /**\n+     * <b>Method to test:</b> {@link FieldAPIImpl#save(Field, User)}\n+     * <p>\n+     * <b>Given scenario:</b> A new {@link Field} is saved and marked as `indexed=false`\n+     * <p>\n+     * <b>Expected result:</b> The field should be saved without ES mapping\n+     */\n+    @Test\n+    public void test_SaveNewNoIndexedField_ShouldNotAddESMapping()\n+            throws DotSecurityException, DotDataException, IOException {\n+        final long time = System.currentTimeMillis();\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field = FieldBuilder.builder(DateField.class)\n+                    .name(\"field\" + time)\n+                    .variable(\"field\" + time)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .build();\n+            field = fieldAPI.save(field, user);\n+\n+            final IndiciesInfo indiciesInfo = APILocator.getIndiciesAPI().loadIndicies();\n+            final ESMappingAPIImpl mappingAPI = new ESMappingAPIImpl();\n+\n+            //verify mapping on working index\n+            Map<String, Object> mapping = mappingAPI\n+                    .getFieldMappingAsMap(indiciesInfo.getWorking(),\n+                            (type.variable() + StringPool.PERIOD + field.variable()));\n+            assertFalse(UtilMethods.isSet(mapping));\n+\n+            //verify mapping on live index\n+            mapping = mappingAPI\n+                    .getFieldMappingAsMap(indiciesInfo.getLive(),\n+                            (type.variable() + StringPool.PERIOD + field.variable()));\n+            assertFalse(UtilMethods.isSet(mapping));\n+        }finally{\n+            ContentTypeDataGen.remove(type);\n+        }\n+    }\n+\n+    /**\n+     * <b>Method to test:</b> {@link FieldAPIImpl#save(Field, User)}\n+     * <p>\n+     * <b>Given scenario:</b> A new {@link DateField} is saved and marked as `indexed=true`\n+     * <p>\n+     * <b>Expected result:</b> The field should be saved and mapped in ES with `type=date`", "originalCommit": "865e245e37cdcd1dd585097cfb5eb20cd09ac02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NDk1NQ==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r461974955", "bodyText": "those cases have been already tested", "author": "nollymar", "createdAt": "2020-07-29T00:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxNTUwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "56e36448a616e0994515dd831b3da5b77ddb79fe", "url": "https://github.com/dotCMS/core/commit/56e36448a616e0994515dd831b3da5b77ddb79fe", "message": "#18887 Adding missing analyzer on text fields", "committedDate": "2020-07-17T18:50:57Z", "type": "commit"}, {"oid": "2c200f8db72ac26f9fc6ee1227fe34e1ff6f94fa", "url": "https://github.com/dotCMS/core/commit/2c200f8db72ac26f9fc6ee1227fe34e1ff6f94fa", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-18887-set-es-custom-mappings-when-a-field-is-created", "committedDate": "2020-07-28T15:58:23Z", "type": "commit"}, {"oid": "35043618a6b8a53e650d4aa0308e8b4936b422ca", "url": "https://github.com/dotCMS/core/commit/35043618a6b8a53e650d4aa0308e8b4936b422ca", "message": "#18887 Adding missing quotation mark", "committedDate": "2020-07-28T16:06:58Z", "type": "commit"}, {"oid": "c0dffc92b2936d35c7892fa4252bba8df7394273", "url": "https://github.com/dotCMS/core/commit/c0dffc92b2936d35c7892fa4252bba8df7394273", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-18887-set-es-custom-mappings-when-a-field-is-created", "committedDate": "2020-07-28T17:51:57Z", "type": "commit"}, {"oid": "c3ae57cf2b864d61bf8c9177de6c040a920266e1", "url": "https://github.com/dotCMS/core/commit/c3ae57cf2b864d61bf8c9177de6c040a920266e1", "message": "#18887 Applying code review suggestions", "committedDate": "2020-07-29T16:35:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MDEyNQ==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r462440125", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-07-29T16:45:28Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1390,6 +1395,129 @@ public void test_SaveField_GivenGraphQLCompatibleVariable_ShouldSave(\n         }\n     }\n \n+    /**\n+     * <b>Method to test:</b> {@link FieldAPIImpl#save(Field, User)}\n+     * <p>\n+     * <b>Given scenario:</b> A new {@link Field} is saved and marked as `indexed=false`\n+     * <p>\n+     * <b>Expected result:</b> The field should be saved without ES mapping\n+     */\n+    @Test\n+    public void test_SaveNewNoIndexedField_ShouldNotAddESMapping()\n+            throws DotSecurityException, DotDataException, IOException {\n+        final long time = System.currentTimeMillis();\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field = FieldBuilder.builder(DateField.class)\n+                    .name(\"field\" + time)\n+                    .variable(\"field\" + time)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .build();\n+            field = fieldAPI.save(field, user);\n+\n+            final IndiciesInfo indiciesInfo = APILocator.getIndiciesAPI().loadIndicies();\n+            final ESMappingAPIImpl mappingAPI = new ESMappingAPIImpl();\n+\n+            //verify mapping on working index\n+            Map<String, Object> mapping = mappingAPI\n+                    .getFieldMappingAsMap(indiciesInfo.getWorking(),\n+                            (type.variable() + StringPool.PERIOD + field.variable()));", "originalCommit": "c3ae57cf2b864d61bf8c9177de6c040a920266e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MDEzOA==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r462440138", "bodyText": "Codacy found an issue: The String literal \"type\" appears 8 times in this file; the first occurrence is on line 1,434", "author": "dev-dotcms", "createdAt": "2020-07-29T16:45:29Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1390,6 +1395,129 @@ public void test_SaveField_GivenGraphQLCompatibleVariable_ShouldSave(\n         }\n     }\n \n+    /**\n+     * <b>Method to test:</b> {@link FieldAPIImpl#save(Field, User)}\n+     * <p>\n+     * <b>Given scenario:</b> A new {@link Field} is saved and marked as `indexed=false`\n+     * <p>\n+     * <b>Expected result:</b> The field should be saved without ES mapping\n+     */\n+    @Test\n+    public void test_SaveNewNoIndexedField_ShouldNotAddESMapping()\n+            throws DotSecurityException, DotDataException, IOException {\n+        final long time = System.currentTimeMillis();\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field = FieldBuilder.builder(DateField.class)\n+                    .name(\"field\" + time)\n+                    .variable(\"field\" + time)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .build();\n+            field = fieldAPI.save(field, user);\n+\n+            final IndiciesInfo indiciesInfo = APILocator.getIndiciesAPI().loadIndicies();\n+            final ESMappingAPIImpl mappingAPI = new ESMappingAPIImpl();\n+\n+            //verify mapping on working index\n+            Map<String, Object> mapping = mappingAPI\n+                    .getFieldMappingAsMap(indiciesInfo.getWorking(),\n+                            (type.variable() + StringPool.PERIOD + field.variable()));\n+            assertFalse(UtilMethods.isSet(mapping));\n+\n+            //verify mapping on live index\n+            mapping = mappingAPI\n+                    .getFieldMappingAsMap(indiciesInfo.getLive(),\n+                            (type.variable() + StringPool.PERIOD + field.variable()));\n+            assertFalse(UtilMethods.isSet(mapping));\n+        }finally{\n+            ContentTypeDataGen.remove(type);\n+        }\n+    }\n+\n+    /**\n+     * <b>Method to test:</b> {@link FieldAPIImpl#save(Field, User)}\n+     * <p>\n+     * <b>Given scenario:</b> A new {@link DateField} is saved and marked as `indexed=true`\n+     * <p>\n+     * <b>Expected result:</b> The field should be saved and mapped in ES with `type=date`\n+     */\n+    @Test\n+    public void test_SaveNewIndexedField_ShouldAddESMapping()\n+            throws DotSecurityException, DotDataException, IOException {\n+        final long time = System.currentTimeMillis();\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field = FieldBuilder.builder(DateField.class)\n+                    .name(\"field\" + time)\n+                    .variable(\"field\" + time)\n+                    .contentTypeId(type.id())\n+                    .indexed(true)\n+                    .build();\n+            field = fieldAPI.save(field, user);\n+\n+            final IndiciesInfo indiciesInfo = APILocator.getIndiciesAPI().loadIndicies();\n+            final ESMappingAPIImpl mappingAPI = new ESMappingAPIImpl();\n+\n+            //verify mapping on working index\n+            Map<String, String> mapping = (Map<String, String>) mappingAPI\n+                    .getFieldMappingAsMap(indiciesInfo.getWorking(),\n+                            (type.variable() + StringPool.PERIOD + field.variable())\n+                                    .toLowerCase()).get(field.variable());\n+            assertTrue(UtilMethods.isSet(mapping.get(\"type\")));", "originalCommit": "c3ae57cf2b864d61bf8c9177de6c040a920266e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MDE0OA==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r462440148", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.io.IOException'", "author": "dev-dotcms", "createdAt": "2020-07-29T16:45:30Z", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPIImpl.java", "diffHunk": "@@ -77,6 +79,7 @@\n import com.liferay.portal.language.LanguageUtil;\n import com.liferay.portal.model.User;\n \n+import java.io.IOException;", "originalCommit": "c3ae57cf2b864d61bf8c9177de6c040a920266e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MDE1NA==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r462440154", "bodyText": "Codacy found an issue: Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings", "author": "dev-dotcms", "createdAt": "2020-07-29T16:45:31Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java", "diffHunk": "@@ -299,6 +303,63 @@ private void addMappingForFieldIfNeeded(final String indexName,\n         }\n     }\n \n+    /**\n+     * Given a {@link Field}, obtains the ES mapping according to the {@link Field} type\n+     * @param field\n+     * @param fieldVariableName\n+     * @return\n+     */\n+    private String getMappingForField(final Field field, final String fieldVariableName) {\n+        final Map<DataTypes, String> dataTypesMap = ImmutableMap\n+                .of(DataTypes.BOOL, \"boolean\", DataTypes.FLOAT, \"float\", DataTypes.INTEGER,\n+                        \"integer\");\n+        String mappingForField = null;\n+        if (field instanceof DateField || field instanceof DateTimeField\n+                || field instanceof TimeField) {\n+            mappingForField = \"{\\n\\\"type\\\":\\\"date\\\",\\n\";\n+            mappingForField += \"\\\"format\\\": \\\"yyyy-MM-dd't'HH:mm:ss||MMM d, yyyy h:mm:ss a||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\\\"\\n}\";", "originalCommit": "c3ae57cf2b864d61bf8c9177de6c040a920266e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNjcxMg==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r462716712", "bodyText": "I wonder if we should not use something such as\nJSONObjectBuilder()\n    .add(\"type\",\"keyword\")\n   .add(\"ignore_above\",8191).build()", "author": "jdotcms", "createdAt": "2020-07-30T03:44:20Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESMappingUtilHelper.java", "diffHunk": "@@ -132,6 +155,25 @@ private void addCustomMappingForRelationships(final String indexName,\n         }\n     }\n \n+    /**\n+     * Creates a json mapping for a relationship and saves it into the specified index\n+     * @param indexName - Index where the mapping will be saved (Full index name including cluster id)\n+     * @param relationshipName - Relationship to be indexed\n+     * @throws JSONException\n+     * @throws IOException\n+     */\n+    private void putRelationshipMapping(final String indexName, final String relationshipName)\n+            throws JSONException, IOException {\n+        final JSONObject properties = new JSONObject();\n+        properties.put(\"properties\", new JSONObject()\n+                .put(relationshipName,\n+                        new JSONObject(\"{\\n\"", "originalCommit": "c3ae57cf2b864d61bf8c9177de6c040a920266e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNzE1MQ==", "url": "https://github.com/dotCMS/core/pull/18899#discussion_r462717151", "bodyText": "It seems the JSONObject has already methods to do it. Not need to create any builder", "author": "jdotcms", "createdAt": "2020-07-30T03:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNjcxMg=="}], "type": "inlineReview", "revised_code": null}]}