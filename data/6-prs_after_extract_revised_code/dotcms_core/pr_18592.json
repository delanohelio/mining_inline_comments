{"pr_number": 18592, "pr_title": "Issue 18591", "pr_createdAt": "2020-06-03T19:01:32Z", "pr_url": "https://github.com/dotCMS/core/pull/18592", "timeline": [{"oid": "970428d72018f41af63e687f33e67764164decc6", "url": "https://github.com/dotCMS/core/commit/970428d72018f41af63e687f33e67764164decc6", "message": "#18591 fixes esclation thread", "committedDate": "2020-06-03T18:58:03Z", "type": "commit"}, {"oid": "cf448811b615ad02af840feb146297700b8486dc", "url": "https://github.com/dotCMS/core/commit/cf448811b615ad02af840feb146297700b8486dc", "message": "#18591 moves transaction closer", "committedDate": "2020-06-03T18:59:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTQ5Mg==", "url": "https://github.com/dotCMS/core/pull/18592#discussion_r434795492", "bodyText": "I would enclosed the body into a method and wrap into the transaction", "author": "jdotcms", "createdAt": "2020-06-03T19:14:46Z", "path": "dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java", "diffHunk": "@@ -36,11 +35,11 @@ public void run(final JobExecutionContext jobContext) throws JobExecutionExcepti\n \n             try {\n \n-                startTransaction();\n+\n                 final List<WorkflowTask> tasks = workflowAPI.findExpiredTasks();\n \n                 for (final WorkflowTask task : tasks) {\n-\n+                    startTransaction();", "originalCommit": "cf448811b615ad02af840feb146297700b8486dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b246df50f8be99c0d4d9d98b42a7646df0dfcacd", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java b/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java\nindex 3e83c57703..8ef6c977f8 100644\n--- a/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java\n+++ b/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java\n\n@@ -25,69 +27,63 @@ import com.liferay.util.StringPool;\n \n public class EscalationThread extends DotStatefulJob {\n \n-    public void run(final JobExecutionContext jobContext) throws JobExecutionException {\n-\n-        final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n-        final String wfActionAssign   = Config.getStringProperty(\"ESCALATION_DEFAULT_ASSIGN\", StringPool.BLANK);\n-        final String wfActionComments = Config.getStringProperty(\"ESCALATION_DEFAULT_COMMENT\", \"Task time out\");\n \n-        if (LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level) {\n \n-            try {\n+    final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n+    final String wfActionAssign = Config.getStringProperty(\"ESCALATION_DEFAULT_ASSIGN\", StringPool.BLANK);\n+    final String wfActionComments = Config.getStringProperty(\"ESCALATION_DEFAULT_COMMENT\", \"Task time out\");\n \n+    @CloseDB\n+    public void run(final JobExecutionContext jobContext) throws JobExecutionException {\n \n+        if (LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level) {\n+            try {\n                 final List<WorkflowTask> tasks = workflowAPI.findExpiredTasks();\n \n                 for (final WorkflowTask task : tasks) {\n-                    startTransaction();\n-                    final String stepId         = task.getStatus();\n-                    final WorkflowStep step     = workflowAPI.findStep(stepId);\n-                    final String actionId       = step.getEscalationAction();\n-                    final WorkflowAction action = workflowAPI.findAction(actionId, APILocator.getUserAPI().getSystemUser());\n-\n-                    Logger.info(this, \"Task '\" + task.getTitle() + \"' \" +\n-                            \"on contentlet id '\" + task.getWebasset() + \"' \" +\n-                            \"timeout on step '\" + step.getName() + \"' \" +\n-                            \"excecuting escalation action '\" + action.getName() + \"'\");\n-\n-                    // find contentlet for the given language\n-                    final Contentlet contentletByDefaultLanguage =\n-                            APILocator.getContentletAPI().findContentletByIdentifier(task.getWebasset(), false,\n-                                task.getLanguageId(),\n-                                APILocator.getUserAPI().getSystemUser(), false);\n-\n-                    //No need to escalate if the contentlet already is in the Action Escalated.\n-                    if(UtilMethods.isSet(actionId) && !actionId.equals\n-                            (contentletByDefaultLanguage.getActionId())) {\n-\n-                        final String inode          = contentletByDefaultLanguage.getInode();\n-                        final Contentlet contentlet = APILocator.getContentletAPI().find\n-                                (inode, APILocator.getUserAPI().getSystemUser(), false);\n-                        \n-                        \n-                        \n-                        APILocator.getWorkflowAPI().fireContentWorkflow(contentlet,\n-                                new ContentletDependencies.Builder()\n-                                        .respectAnonymousPermissions(false)\n-                                        .modUser(APILocator.getUserAPI().getSystemUser())\n-                                        .workflowActionId(action.getId())\n-                                        .workflowActionComments(wfActionComments)\n-                                        .workflowAssignKey(wfActionAssign).build());\n-                    }\n-                    commitTransaction();\n+                    esclateTask(task);\n                 }\n-\n-\n             } catch (Exception ex) {\n                 Logger.warn(this, ex.getMessage(), ex);\n+            } \n+        }\n+    }\n+\n+    @WrapInTransaction\n+    private void esclateTask(final WorkflowTask task) throws DotDataException, DotSecurityException {\n+\n \n-                try {\n-                    rollbackTransaction();\n-                } catch (DotHibernateException e) {}\n-            } finally {\n+        final String stepId = task.getStatus();\n+        final WorkflowStep step = workflowAPI.findStep(stepId);\n+        final String actionId = step.getEscalationAction();\n+        final WorkflowAction action = workflowAPI.findAction(actionId, APILocator.getUserAPI().getSystemUser());\n \n-                closeSessionSilently();\n-            }\n+        Logger.info(this,\n+                        \"Task '\" + task.getTitle() + \"' \" + \"on contentlet id '\" + task.getWebasset() + \"' \" + \"timeout on step '\"\n+                                        + step.getName() + \"' \" + \"excecuting escalation action '\" + action.getName() + \"'\");\n+\n+        // find contentlet for the given language\n+        final Contentlet contentletByDefaultLanguage = APILocator.getContentletAPI().findContentletByIdentifier(\n+                        task.getWebasset(), false, task.getLanguageId(), APILocator.getUserAPI().getSystemUser(), false);\n+\n+        // No need to escalate if the contentlet already is in the Action Escalated.\n+        if (UtilMethods.isSet(actionId) && !actionId.equals(contentletByDefaultLanguage.getActionId())) {\n+\n+            final String inode = contentletByDefaultLanguage.getInode();\n+            final Contentlet contentlet =\n+                            APILocator.getContentletAPI().find(inode, APILocator.getUserAPI().getSystemUser(), false);\n+\n+\n+\n+            APILocator.getWorkflowAPI().fireContentWorkflow(contentlet,\n+                            new ContentletDependencies.Builder().respectAnonymousPermissions(false)\n+                                            .modUser(APILocator.getUserAPI().getSystemUser()).workflowActionId(action.getId())\n+                                            .workflowActionComments(wfActionComments).workflowAssignKey(wfActionAssign).build());\n         }\n-    } // run.\n-} // E:O:F:EscalationThread.\n+\n+\n+    }\n+\n+\n+\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTY0NA==", "url": "https://github.com/dotCMS/core/pull/18592#discussion_r434795644", "bodyText": "cool", "author": "jdotcms", "createdAt": "2020-06-03T19:15:03Z", "path": "dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java", "diffHunk": "@@ -51,10 +50,10 @@ public void run(final JobExecutionContext jobContext) throws JobExecutionExcepti\n                             \"timeout on step '\" + step.getName() + \"' \" +\n                             \"excecuting escalation action '\" + action.getName() + \"'\");\n \n-                    // find contentlet for default language\n+                    // find contentlet for the given language\n                     final Contentlet contentletByDefaultLanguage =\n                             APILocator.getContentletAPI().findContentletByIdentifier(task.getWebasset(), false,\n-                                APILocator.getLanguageAPI().getDefaultLanguage().getId(),\n+                                task.getLanguageId(),", "originalCommit": "cf448811b615ad02af840feb146297700b8486dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMTA2Mg==", "url": "https://github.com/dotCMS/core/pull/18592#discussion_r435401062", "bodyText": "yeah, we missed this when we moved to multi-lingual workflow for content.", "author": "wezell", "createdAt": "2020-06-04T16:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "b246df50f8be99c0d4d9d98b42a7646df0dfcacd", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java b/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java\nindex 3e83c57703..8ef6c977f8 100644\n--- a/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java\n+++ b/dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java\n\n@@ -25,69 +27,63 @@ import com.liferay.util.StringPool;\n \n public class EscalationThread extends DotStatefulJob {\n \n-    public void run(final JobExecutionContext jobContext) throws JobExecutionException {\n-\n-        final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n-        final String wfActionAssign   = Config.getStringProperty(\"ESCALATION_DEFAULT_ASSIGN\", StringPool.BLANK);\n-        final String wfActionComments = Config.getStringProperty(\"ESCALATION_DEFAULT_COMMENT\", \"Task time out\");\n \n-        if (LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level) {\n \n-            try {\n+    final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n+    final String wfActionAssign = Config.getStringProperty(\"ESCALATION_DEFAULT_ASSIGN\", StringPool.BLANK);\n+    final String wfActionComments = Config.getStringProperty(\"ESCALATION_DEFAULT_COMMENT\", \"Task time out\");\n \n+    @CloseDB\n+    public void run(final JobExecutionContext jobContext) throws JobExecutionException {\n \n+        if (LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level) {\n+            try {\n                 final List<WorkflowTask> tasks = workflowAPI.findExpiredTasks();\n \n                 for (final WorkflowTask task : tasks) {\n-                    startTransaction();\n-                    final String stepId         = task.getStatus();\n-                    final WorkflowStep step     = workflowAPI.findStep(stepId);\n-                    final String actionId       = step.getEscalationAction();\n-                    final WorkflowAction action = workflowAPI.findAction(actionId, APILocator.getUserAPI().getSystemUser());\n-\n-                    Logger.info(this, \"Task '\" + task.getTitle() + \"' \" +\n-                            \"on contentlet id '\" + task.getWebasset() + \"' \" +\n-                            \"timeout on step '\" + step.getName() + \"' \" +\n-                            \"excecuting escalation action '\" + action.getName() + \"'\");\n-\n-                    // find contentlet for the given language\n-                    final Contentlet contentletByDefaultLanguage =\n-                            APILocator.getContentletAPI().findContentletByIdentifier(task.getWebasset(), false,\n-                                task.getLanguageId(),\n-                                APILocator.getUserAPI().getSystemUser(), false);\n-\n-                    //No need to escalate if the contentlet already is in the Action Escalated.\n-                    if(UtilMethods.isSet(actionId) && !actionId.equals\n-                            (contentletByDefaultLanguage.getActionId())) {\n-\n-                        final String inode          = contentletByDefaultLanguage.getInode();\n-                        final Contentlet contentlet = APILocator.getContentletAPI().find\n-                                (inode, APILocator.getUserAPI().getSystemUser(), false);\n-                        \n-                        \n-                        \n-                        APILocator.getWorkflowAPI().fireContentWorkflow(contentlet,\n-                                new ContentletDependencies.Builder()\n-                                        .respectAnonymousPermissions(false)\n-                                        .modUser(APILocator.getUserAPI().getSystemUser())\n-                                        .workflowActionId(action.getId())\n-                                        .workflowActionComments(wfActionComments)\n-                                        .workflowAssignKey(wfActionAssign).build());\n-                    }\n-                    commitTransaction();\n+                    esclateTask(task);\n                 }\n-\n-\n             } catch (Exception ex) {\n                 Logger.warn(this, ex.getMessage(), ex);\n+            } \n+        }\n+    }\n+\n+    @WrapInTransaction\n+    private void esclateTask(final WorkflowTask task) throws DotDataException, DotSecurityException {\n+\n \n-                try {\n-                    rollbackTransaction();\n-                } catch (DotHibernateException e) {}\n-            } finally {\n+        final String stepId = task.getStatus();\n+        final WorkflowStep step = workflowAPI.findStep(stepId);\n+        final String actionId = step.getEscalationAction();\n+        final WorkflowAction action = workflowAPI.findAction(actionId, APILocator.getUserAPI().getSystemUser());\n \n-                closeSessionSilently();\n-            }\n+        Logger.info(this,\n+                        \"Task '\" + task.getTitle() + \"' \" + \"on contentlet id '\" + task.getWebasset() + \"' \" + \"timeout on step '\"\n+                                        + step.getName() + \"' \" + \"excecuting escalation action '\" + action.getName() + \"'\");\n+\n+        // find contentlet for the given language\n+        final Contentlet contentletByDefaultLanguage = APILocator.getContentletAPI().findContentletByIdentifier(\n+                        task.getWebasset(), false, task.getLanguageId(), APILocator.getUserAPI().getSystemUser(), false);\n+\n+        // No need to escalate if the contentlet already is in the Action Escalated.\n+        if (UtilMethods.isSet(actionId) && !actionId.equals(contentletByDefaultLanguage.getActionId())) {\n+\n+            final String inode = contentletByDefaultLanguage.getInode();\n+            final Contentlet contentlet =\n+                            APILocator.getContentletAPI().find(inode, APILocator.getUserAPI().getSystemUser(), false);\n+\n+\n+\n+            APILocator.getWorkflowAPI().fireContentWorkflow(contentlet,\n+                            new ContentletDependencies.Builder().respectAnonymousPermissions(false)\n+                                            .modUser(APILocator.getUserAPI().getSystemUser()).workflowActionId(action.getId())\n+                                            .workflowActionComments(wfActionComments).workflowAssignKey(wfActionAssign).build());\n         }\n-    } // run.\n-} // E:O:F:EscalationThread.\n+\n+\n+    }\n+\n+\n+\n+}\n"}}, {"oid": "b246df50f8be99c0d4d9d98b42a7646df0dfcacd", "url": "https://github.com/dotCMS/core/commit/b246df50f8be99c0d4d9d98b42a7646df0dfcacd", "message": "#18591 taking sanchez's advice", "committedDate": "2020-06-04T16:41:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMjQ3NQ==", "url": "https://github.com/dotCMS/core/pull/18592#discussion_r435402475", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.db.HibernateUtil.rollbackTransaction'", "author": "dev-dotcms", "createdAt": "2020-06-04T16:47:48Z", "path": "dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java", "diffHunk": "@@ -1,12 +1,18 @@\n package com.dotcms.workflow;\n \n+import static com.dotmarketing.db.HibernateUtil.closeSessionSilently;\n+import static com.dotmarketing.db.HibernateUtil.rollbackTransaction;", "originalCommit": "b246df50f8be99c0d4d9d98b42a7646df0dfcacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMjQ4OQ==", "url": "https://github.com/dotCMS/core/pull/18592#discussion_r435402489", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.db.HibernateUtil.closeSessionSilently'", "author": "dev-dotcms", "createdAt": "2020-06-04T16:47:49Z", "path": "dotCMS/src/main/java/com/dotcms/workflow/EscalationThread.java", "diffHunk": "@@ -1,12 +1,18 @@\n package com.dotcms.workflow;\n \n+import static com.dotmarketing.db.HibernateUtil.closeSessionSilently;", "originalCommit": "b246df50f8be99c0d4d9d98b42a7646df0dfcacd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}