{"pr_number": 18011, "pr_title": "Issue 18010 redirect to login", "pr_createdAt": "2020-02-19T02:19:52Z", "pr_url": "https://github.com/dotCMS/core/pull/18011", "timeline": [{"oid": "9c42c84895501407cc2c1ef80871411e7d69f64f", "url": "https://github.com/dotCMS/core/commit/9c42c84895501407cc2c1ef80871411e7d69f64f", "message": "fix", "committedDate": "2020-02-13T22:46:09Z", "type": "commit"}, {"oid": "8bd14a20b61ef7f908cd2d05690df804bb43a93e", "url": "https://github.com/dotCMS/core/commit/8bd14a20b61ef7f908cd2d05690df804bb43a93e", "message": "Merge remote-tracking branch 'origin/issue-17872-double-click-in-content-redirects-to-home'", "committedDate": "2020-02-18T20:16:16Z", "type": "commit"}, {"oid": "bb74e534d84fc5a3bc7c4a29c15842e1bdf1cff3", "url": "https://github.com/dotCMS/core/commit/bb74e534d84fc5a3bc7c4a29c15842e1bdf1cff3", "message": "#18010 forces redirect", "committedDate": "2020-02-19T01:44:13Z", "type": "commit"}, {"oid": "962b4a154a797ee6a46031492f87a63aeb73a8f2", "url": "https://github.com/dotCMS/core/commit/962b4a154a797ee6a46031492f87a63aeb73a8f2", "message": "#18010 checks user before redirecting to portal", "committedDate": "2020-02-19T01:50:45Z", "type": "commit"}, {"oid": "9bdb0a77314d58cfe85856ef2895e8b232471478", "url": "https://github.com/dotCMS/core/commit/9bdb0a77314d58cfe85856ef2895e8b232471478", "message": "#18010 checks user before redirecting to portal", "committedDate": "2020-02-19T01:51:00Z", "type": "commit"}, {"oid": "06e893467ac9d6ffbd6e8fb4f0861a99da280c65", "url": "https://github.com/dotCMS/core/commit/06e893467ac9d6ffbd6e8fb4f0861a99da280c65", "message": "18010 removing outside commit", "committedDate": "2020-02-19T02:19:34Z", "type": "commit"}, {"oid": "3b2de86779745d86fe67dca6767a7df8f0c7046d", "url": "https://github.com/dotCMS/core/commit/3b2de86779745d86fe67dca6767a7df8f0c7046d", "message": "#18010 testing against front end user", "committedDate": "2020-02-19T02:43:06Z", "type": "commit"}, {"oid": "da7042733a60679842eef136d95056832898f6c2", "url": "https://github.com/dotCMS/core/commit/da7042733a60679842eef136d95056832898f6c2", "message": "#18010 removing try", "committedDate": "2020-02-19T02:52:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMxOQ==", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053319", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "author": "dev-dotcms", "createdAt": "2020-02-19T02:59:14Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;", "originalCommit": "da7042733a60679842eef136d95056832898f6c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMyMw==", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053323", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-19T02:59:16Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);\n+        \n+        // if you are hitting the servlet without running through the other filters\n         if (uri == null) {\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"VelocityServlet called without running through the CMS Filter\");\n             Logger.error(this.getClass(),\n                     \"You cannot call the VelocityServlet without passing the requested url via a  requestAttribute called  \"\n                             + Constants.CMS_FILTER_URI_OVERRIDE);\n             return;\n         }\n-\n-        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n-\n-        if (APILocator.getLoginServiceAPI().isLoggedIn(request) && !comeFromSomeWhere){\n+        \n+        // if you are a backend user, redirect you to the page edit screen\n+        if (PortalUtil.getUser(request)!=null && PortalUtil.getUser(request).hasConsoleAccess() && !comeFromSomeWhere){\n             goToEditPage(uri,request, response);\n-        } else {\n-\n-            if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level) ||\n-                    (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level) ||\n-                    (!LicenseUtil.isASAllowed())) {\n-                Logger.error(this, \"Enterprise License is required\");\n+            return;\n+        } \n+        \n+        // if you are not running ee\n+        if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level)\n+                        || (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level)\n+                        || (!LicenseUtil.isASAllowed())) {", "originalCommit": "da7042733a60679842eef136d95056832898f6c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMyOQ==", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053329", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "author": "dev-dotcms", "createdAt": "2020-02-19T02:59:17Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);", "originalCommit": "da7042733a60679842eef136d95056832898f6c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMzMQ==", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053331", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-19T02:59:18Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);\n+        \n+        // if you are hitting the servlet without running through the other filters\n         if (uri == null) {\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"VelocityServlet called without running through the CMS Filter\");\n             Logger.error(this.getClass(),\n                     \"You cannot call the VelocityServlet without passing the requested url via a  requestAttribute called  \"\n                             + Constants.CMS_FILTER_URI_OVERRIDE);\n             return;\n         }\n-\n-        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n-\n-        if (APILocator.getLoginServiceAPI().isLoggedIn(request) && !comeFromSomeWhere){\n+        \n+        // if you are a backend user, redirect you to the page edit screen\n+        if (PortalUtil.getUser(request)!=null && PortalUtil.getUser(request).hasConsoleAccess() && !comeFromSomeWhere){\n             goToEditPage(uri,request, response);\n-        } else {\n-\n-            if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level) ||\n-                    (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level) ||\n-                    (!LicenseUtil.isASAllowed())) {\n-                Logger.error(this, \"Enterprise License is required\");\n+            return;\n+        } \n+        \n+        // if you are not running ee\n+        if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level)\n+                        || (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level)", "originalCommit": "da7042733a60679842eef136d95056832898f6c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMzNA==", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053334", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "author": "dev-dotcms", "createdAt": "2020-02-19T02:59:19Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);", "originalCommit": "da7042733a60679842eef136d95056832898f6c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMzNg==", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053336", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-19T02:59:20Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);\n+        \n+        // if you are hitting the servlet without running through the other filters\n         if (uri == null) {\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"VelocityServlet called without running through the CMS Filter\");\n             Logger.error(this.getClass(),\n                     \"You cannot call the VelocityServlet without passing the requested url via a  requestAttribute called  \"\n                             + Constants.CMS_FILTER_URI_OVERRIDE);\n             return;\n         }\n-\n-        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n-\n-        if (APILocator.getLoginServiceAPI().isLoggedIn(request) && !comeFromSomeWhere){\n+        \n+        // if you are a backend user, redirect you to the page edit screen\n+        if (PortalUtil.getUser(request)!=null && PortalUtil.getUser(request).hasConsoleAccess() && !comeFromSomeWhere){\n             goToEditPage(uri,request, response);\n-        } else {\n-\n-            if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level) ||\n-                    (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level) ||\n-                    (!LicenseUtil.isASAllowed())) {\n-                Logger.error(this, \"Enterprise License is required\");\n+            return;\n+        } \n+        \n+        // if you are not running ee\n+        if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level)", "originalCommit": "da7042733a60679842eef136d95056832898f6c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}