{"pr_number": 17832, "pr_title": "#17612 Fixing performance problems", "pr_createdAt": "2020-01-13T19:12:41Z", "pr_url": "https://github.com/dotCMS/core/pull/17832", "timeline": [{"oid": "276f5ada305ba090d4dfbb723023eedc9c574da3", "url": "https://github.com/dotCMS/core/commit/276f5ada305ba090d4dfbb723023eedc9c574da3", "message": "#17612 Fixing performance problems", "committedDate": "2020-01-13T19:02:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3ODA5OQ==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r365978099", "bodyText": "this exception really are not thrown", "author": "freddyucv", "createdAt": "2020-01-13T19:13:17Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java", "diffHunk": "@@ -52,49 +57,97 @@ public Host getHost(HttpServletRequest request)  {\n \r\n     @CloseDBIfOpened\r\n     public Host getCurrentHost(final HttpServletRequest request)\r\n-            throws DotDataException, DotSecurityException, PortalException, SystemException {\r\n+            throws DotDataException, DotSecurityException {\r", "originalCommit": "276f5ada305ba090d4dfbb723023eedc9c574da3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b8ad8a73b7414fe5581a359aa3e86d72c6d76ee", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java\nindex 94bdbe8be7..ab043c0837 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java\n\n@@ -96,17 +93,19 @@ public class HostWebAPIImpl extends HostAPIImpl implements HostWebAPI {\n         }\n     }\n \n-    private void checkHostPermission(User user, boolean respectAnonPerms, Host host) throws DotDataException, DotSecurityException {\n+    private void checkHostPermission(final User user, boolean respectAnonPerms, final Host host)\n+            throws DotDataException, DotSecurityException {\n+\n         if(!APILocator.getPermissionAPI().doesUserHavePermission(host, PermissionAPI.PERMISSION_READ, user, respectAnonPerms)){\n-            String u = (user != null) ? user.getUserId() : null;\n+            final String userId = (user != null) ? user.getUserId() : null;\n \n-            String message = \"User \" + u + \" does not have permission to host:\" + host.getHostname();\n+            final String message = \"User \" + userId + \" does not have permission to host:\" + host.getHostname();\n             Logger.error(HostAPIImpl.class, message);\n             throw new DotSecurityException(message);\n         }\n     }\n \n-    private Optional<Host> getCurrentHostFromSession(final HttpServletRequest request, User user, boolean respectAnonPerms)\n+    private Optional<Host> getCurrentHostFromSession(final HttpServletRequest request, final User user, final boolean respectAnonPerms)\n             throws DotSecurityException, DotDataException {\n \n         final HttpSession session = request.getSession(false);\n"}}, {"oid": "3b8ad8a73b7414fe5581a359aa3e86d72c6d76ee", "url": "https://github.com/dotCMS/core/commit/3b8ad8a73b7414fe5581a359aa3e86d72c6d76ee", "message": "refactoring", "committedDate": "2020-01-13T21:11:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzODY5NQ==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366038695", "bodyText": "Use the constant HOST_ID_PARAMETER_NAME", "author": "dsilvam", "createdAt": "2020-01-13T21:30:36Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,721 @@\n+package com.dotmarketing.business.web;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n+\n+    public static final String HOST_ID_PARAMETER_NAME = \"host_id\";\n+\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user\n+     * Should: host_id parameter be take over any other source\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is not a backend user\n+     * Should: Host parameter should by taken\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHostNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Host anotherHost = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session, anotherHost);\n+        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());", "originalCommit": "3b8ad8a73b7414fe5581a359aa3e86d72c6d76ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "657cd32214e5c5f183d3c0bf7820e3a2f830eaae", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java b/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java\nindex 937d536529..ba4af2d045 100644\n--- a/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java\n\n@@ -71,7 +71,7 @@ public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n         final HttpSession session = mock(HttpSession.class);\n \n         setAllParametersAndAttributes(request, session, anotherHost);\n-        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n \n         final User user = createUser(host);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0MDczOQ==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366040739", "bodyText": "Use the constant HOST_ID_PARAMETER_NAME", "author": "dsilvam", "createdAt": "2020-01-13T21:35:13Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,721 @@\n+package com.dotmarketing.business.web;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n+\n+    public static final String HOST_ID_PARAMETER_NAME = \"host_id\";\n+\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user\n+     * Should: host_id parameter be take over any other source\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is not a backend user\n+     * Should: Host parameter should by taken\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHostNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Host anotherHost = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session, anotherHost);\n+        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(anotherHost.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user but don't have permission\n+     * Should: throw a {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostIdAndTheUserDontHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());", "originalCommit": "3b8ad8a73b7414fe5581a359aa3e86d72c6d76ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "657cd32214e5c5f183d3c0bf7820e3a2f830eaae", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java b/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java\nindex 937d536529..ba4af2d045 100644\n--- a/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java\n\n@@ -71,7 +71,7 @@ public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n         final HttpSession session = mock(HttpSession.class);\n \n         setAllParametersAndAttributes(request, session, anotherHost);\n-        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n \n         final User user = createUser(host);\n \n"}}, {"oid": "657cd32214e5c5f183d3c0bf7820e3a2f830eaae", "url": "https://github.com/dotCMS/core/commit/657cd32214e5c5f183d3c0bf7820e3a2f830eaae", "message": "refactoring", "committedDate": "2020-01-13T21:37:09Z", "type": "commit"}, {"oid": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "url": "https://github.com/dotCMS/core/commit/a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "message": "Merge remote-tracking branch 'origin/master' into 17612-User-must-have-View-permission-on-default-Site-to-edit-on-other-Sites-v5.x", "committedDate": "2020-01-14T17:29:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Nzg2NA==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477864", "bodyText": "Issue found: Assigning an Object to null is a code smell.  Consider refactoring.", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:29Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java", "diffHunk": "@@ -52,49 +54,99 @@ public Host getHost(HttpServletRequest request)  {\n \r\n     @CloseDBIfOpened\r\n     public Host getCurrentHost(final HttpServletRequest request)\r\n-            throws DotDataException, DotSecurityException, PortalException, SystemException {\r\n+            throws DotDataException, DotSecurityException {\r\n \r\n-        final PageMode mode = PageMode.get(request);\r\n-\r\n-        return this.getCurrentHost(request, mode);\r\n+        return this.getCurrentHost(request, null);\r\n     }\r\n \r\n     @Override\r\n     @CloseDBIfOpened\r\n-    public Host getCurrentHost(final HttpServletRequest request, final PageMode mode)\r\n-            throws DotDataException, DotSecurityException, PortalException, SystemException {\r\n+    public Host getCurrentHost(final HttpServletRequest request, final User userParam)\r\n+            throws DotDataException, DotSecurityException {\r\n \r\n-        Host host = null;\r\n-        final HttpSession session   = request.getSession(false);\r\n         final UserWebAPI userWebAPI = WebAPILocator.getUserWebAPI();\r\n-        final User systemUser       = userWebAPI.getSystemUser();\r\n-        final boolean respectFrontendRoles = !userWebAPI.isLoggedToBackend(request);\r\n-        final String pageHostId = request.getParameter(\"host_id\");\r\n+        final User user       = userParam != null ? userParam : userWebAPI.getSystemUser();\r\n+        final boolean respectAnonPerms = user == null || !user.isBackendUser();\r\n \r\n-        if (pageHostId != null && mode.isAdmin) {\r\n-            host = find(pageHostId, systemUser, respectFrontendRoles);\r\n-        } else {\r\n-            if (session != null && mode.isAdmin && session.getAttribute(WebKeys.CURRENT_HOST) != null) {\r\n-                host = (Host) session.getAttribute(WebKeys.CURRENT_HOST);\r\n-            } else if (request.getAttribute(WebKeys.CURRENT_HOST) != null) {\r\n-                host = (Host) request.getAttribute(WebKeys.CURRENT_HOST);\r\n-            } else {\r\n-\r\n-                final String serverName = request.getServerName();\r\n-                host = resolveHostName(serverName, systemUser, respectFrontendRoles);\r\n-            }\r\n+        Optional<Host> optionalHost = this.getCurrentHostFromRequest(request, user, respectAnonPerms);\r\n+\r\n+        if (!optionalHost.isPresent() && user.isBackendUser()){\r\n+            optionalHost = this.getCurrentHostFromSession(request, user, respectAnonPerms);\r\n         }\r\n \r\n+        final Host host = optionalHost.isPresent() ? optionalHost.get() : resolveHostName(request.getServerName(),\r\n+                user, respectAnonPerms);\r\n+\r\n+        checkHostPermission(user, respectAnonPerms, host);\r\n+        storeCurrentHost(request, user, host);\r\n+\r\n+        return host;\r\n+    }\r\n+\r\n+    private void storeCurrentHost(final HttpServletRequest request, final User user, final Host host) {\r\n+        final HttpSession session = request.getSession(false);\r\n+\r\n         request.setAttribute(WebKeys.CURRENT_HOST, host);\r\n-        if (session != null && mode.isAdmin) {\r\n \r\n+        if (session != null && user.isBackendUser()) {\r\n             session.setAttribute(WebKeys.CURRENT_HOST, host);\r\n         }\r\n+    }\r\n \r\n-        return host;\r\n+    private void checkHostPermission(final User user, boolean respectAnonPerms, final Host host)\r\n+            throws DotDataException, DotSecurityException {\r\n+\r\n+        if(!APILocator.getPermissionAPI().doesUserHavePermission(host, PermissionAPI.PERMISSION_READ, user, respectAnonPerms)){\r\n+            final String userId = (user != null) ? user.getUserId() : null;\r\n+\r\n+            final String message = \"User \" + userId + \" does not have permission to host:\" + host.getHostname();\r\n+            Logger.error(HostAPIImpl.class, message);\r\n+            throw new DotSecurityException(message);\r\n+        }\r\n     }\r\n \r\n-\t@Override\r\n+    private Optional<Host> getCurrentHostFromSession(final HttpServletRequest request, final User user, final boolean respectAnonPerms)\r\n+            throws DotSecurityException, DotDataException {\r\n+\r\n+        final HttpSession session = request.getSession(false);\r\n+\r\n+        if (session == null){\r\n+            return Optional.empty();\r\n+        }\r\n+\r\n+        Host host = null;\r\n+        if (session.getAttribute(WebKeys.CURRENT_HOST) != null) {\r\n+            final Host hostFromSession = (Host) session.getAttribute(WebKeys.CURRENT_HOST);\r\n+            final Object hostId = session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID);\r\n+            host = hostFromSession.getIdentifier().equals(hostId) ? hostFromSession : null;\r", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Nzg4MQ==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477881", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:30Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,721 @@\n+package com.dotmarketing.business.web;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n+\n+    public static final String HOST_ID_PARAMETER_NAME = \"host_id\";\n+\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user\n+     * Should: host_id parameter be take over any other source\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is not a backend user\n+     * Should: Host parameter should by taken\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHostNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Host anotherHost = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session, anotherHost);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(anotherHost.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user but don't have permission\n+     * Should: throw a {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostIdAndTheUserDontHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is a backend user\n+     * Should: Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostNameParameterRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is not a backend user\n+     * Should: Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostNameParameterRequestAsCurrentHostNotBackEndUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is a backend user but not have permission\n+     * Should: throw {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostNameParameterAndUserNotHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is not a backend user\n+     * Should: return the host\n+     */\n+    @Test\n+    public void useHostNameParameterAndNotBackendUserNotHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is not a backend user\n+     * Should: Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostAttributeRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is  a backend user and not have permission\n+     * Should: throw {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostAttributeRequestNotPermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createBackendUser();\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is  not a backend user\n+     * Should: return the host\n+     */\n+    @Test\n+    public void useHostAttributeRequestNotPermissionAndNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createUser();\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session Host parameter is set and the user is a backend user\n+     * Should: session Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostAttributeSessionAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session Host parameter is set and the user is a backend user and not have permission\n+     * Should: throw {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostAttributeSessionNotPermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session Host parameter is set and the user is a not backend user\n+     * Should: should return default host\n+     */\n+    @Test\n+    public void useHostAttributeSessionNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final Host defaultHost = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), true);\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = createUser(role, defaultHost);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        this.addPermission(role, defaultHost);\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(defaultHost.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter is set and the user is a backend user\n+     * Should: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter should be taken\n+     */\n+    @Test\n+    public void useHostIdAttributeSessionAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter is set and the user is not backend user\n+     * Should: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter should not be taken and return the default host\n+     */\n+    @Test\n+    public void useHostIdAttributeSessionAsCurrentHostNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = createUser(role, host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host defaultHost = hostWebAPI.findDefaultHost(APILocator.systemUser(), true);\n+\n+        this.addPermission(role, defaultHost);\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(defaultHost.getIdentifier(),  currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter is set and the user is a backend user and not have permission\n+     * Should: throw a {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostIdAttributeSessionNotPermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Nzg5OQ==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477899", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:31Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,721 @@\n+package com.dotmarketing.business.web;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n+\n+    public static final String HOST_ID_PARAMETER_NAME = \"host_id\";\n+\n+    @BeforeClass\n+    public static void prepare () throws Exception {", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzkxMQ==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477911", "bodyText": "Issue found: Avoid empty catch blocks", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:32Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,721 @@\n+package com.dotmarketing.business.web;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n+\n+    public static final String HOST_ID_PARAMETER_NAME = \"host_id\";\n+\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user\n+     * Should: host_id parameter be take over any other source\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is not a backend user\n+     * Should: Host parameter should by taken\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHostNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Host anotherHost = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session, anotherHost);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(anotherHost.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user but don't have permission\n+     * Should: throw a {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostIdAndTheUserDontHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is a backend user\n+     * Should: Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostNameParameterRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is not a backend user\n+     * Should: Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostNameParameterRequestAsCurrentHostNotBackEndUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is a backend user but not have permission\n+     * Should: throw {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostNameParameterAndUserNotHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is not a backend user\n+     * Should: return the host\n+     */\n+    @Test\n+    public void useHostNameParameterAndNotBackendUserNotHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(host.getName());\n+\n+        final User user = createUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is not a backend user\n+     * Should: Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostAttributeRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is  a backend user and not have permission\n+     * Should: throw {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostAttributeRequestNotPermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createBackendUser();\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request Host parameter is set and the user is  not a backend user\n+     * Should: return the host\n+     */\n+    @Test\n+    public void useHostAttributeRequestNotPermissionAndNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createUser();\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session Host parameter is set and the user is a backend user\n+     * Should: session Host parameter should be taken\n+     */\n+    @Test\n+    public void useHostAttributeSessionAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session Host parameter is set and the user is a backend user and not have permission\n+     * Should: throw {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostAttributeSessionNotPermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session Host parameter is set and the user is a not backend user\n+     * Should: should return default host\n+     */\n+    @Test\n+    public void useHostAttributeSessionNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(host);\n+\n+        final Host defaultHost = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), true);\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = createUser(role, defaultHost);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        this.addPermission(role, defaultHost);\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(defaultHost.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter is set and the user is a backend user\n+     * Should: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter should be taken\n+     */\n+    @Test\n+    public void useHostIdAttributeSessionAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter is set and the user is not backend user\n+     * Should: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter should not be taken and return the default host\n+     */\n+    @Test\n+    public void useHostIdAttributeSessionAsCurrentHostNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = createUser(role, host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host defaultHost = hostWebAPI.findDefaultHost(APILocator.systemUser(), true);\n+\n+        this.addPermission(role, defaultHost);\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(defaultHost.getIdentifier(),  currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: session {@link WebKeys#CMS_SELECTED_HOST_ID} parameter is set and the user is a backend user and not have permission\n+     * Should: throw a {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostIdAttributeSessionNotPermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(null);\n+        when(request.getParameter(Host.HOST_VELOCITY_VAR_NAME)).thenReturn(null);\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(null);\n+        when(session.getAttribute(WebKeys.CMS_SELECTED_HOST_ID)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");\n+        } catch (DotSecurityException e) {\n+\n+        }\n+\n+        verify(request, never()).setAttribute(anyString(), anyObject());\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: the current host is not set in any scope\n+     * Should: take the {@link HttpServletRequest#getServerName()}\n+     */\n+    @Test\n+    public void useRequestServerNameAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getServerName()).thenReturn(host.getName());\n+\n+        final User user = createUser(host);\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: the current host is not set in any scope and the {@link HttpServletRequest#getServerName()} is not a host\n+     * Should: take the default host\n+     */\n+    @Test\n+    public void whenRequestServerNameNosExistsAsDefaultHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getServerName()).thenReturn(\"not_exists_host\");\n+\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = createUser(role, host);\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host defaultHost = hostWebAPI.findDefaultHost(APILocator.systemUser(), true);\n+\n+        this.addPermission(role, defaultHost);\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(defaultHost.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: There is not session\n+     * Should: not throw a NullPointerException and return default host\n+     */\n+    @Test\n+    public void whenNoSessionShouldNotThrowNullPointerException() throws DotDataException, DotSecurityException {\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getSession(false)).thenReturn(null);\n+\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = createBackendUser(role);\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+        final Host defaultHost = hostWebAPI.findDefaultHost(APILocator.systemUser(), true);\n+        this.addPermission(role, defaultHost);\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(defaultHost.getIdentifier(), currentHost.getIdentifier());\n+\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: the current host is not set in any scope and the {@link HttpServletRequest#getServerName()} is not a host\n+     *       but the back end user not have permission over the default host\n+     * Should: throw a {@link DotSecurityException}\n+     */\n+    @Test\n+    public void whenDontHavePermissionInDefaultHost() throws DotDataException, DotSecurityException {\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getServerName()).thenReturn(\"not_exists_host\");\n+\n+        final User user = createBackendUser();\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+        }catch(DotSecurityException e) {", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzkyMA==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477920", "bodyText": "Issue found: Parameter 'respectAnonPerms' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:34Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java", "diffHunk": "@@ -52,49 +54,99 @@ public Host getHost(HttpServletRequest request)  {\n \r\n     @CloseDBIfOpened\r\n     public Host getCurrentHost(final HttpServletRequest request)\r\n-            throws DotDataException, DotSecurityException, PortalException, SystemException {\r\n+            throws DotDataException, DotSecurityException {\r\n \r\n-        final PageMode mode = PageMode.get(request);\r\n-\r\n-        return this.getCurrentHost(request, mode);\r\n+        return this.getCurrentHost(request, null);\r\n     }\r\n \r\n     @Override\r\n     @CloseDBIfOpened\r\n-    public Host getCurrentHost(final HttpServletRequest request, final PageMode mode)\r\n-            throws DotDataException, DotSecurityException, PortalException, SystemException {\r\n+    public Host getCurrentHost(final HttpServletRequest request, final User userParam)\r\n+            throws DotDataException, DotSecurityException {\r\n \r\n-        Host host = null;\r\n-        final HttpSession session   = request.getSession(false);\r\n         final UserWebAPI userWebAPI = WebAPILocator.getUserWebAPI();\r\n-        final User systemUser       = userWebAPI.getSystemUser();\r\n-        final boolean respectFrontendRoles = !userWebAPI.isLoggedToBackend(request);\r\n-        final String pageHostId = request.getParameter(\"host_id\");\r\n+        final User user       = userParam != null ? userParam : userWebAPI.getSystemUser();\r\n+        final boolean respectAnonPerms = user == null || !user.isBackendUser();\r\n \r\n-        if (pageHostId != null && mode.isAdmin) {\r\n-            host = find(pageHostId, systemUser, respectFrontendRoles);\r\n-        } else {\r\n-            if (session != null && mode.isAdmin && session.getAttribute(WebKeys.CURRENT_HOST) != null) {\r\n-                host = (Host) session.getAttribute(WebKeys.CURRENT_HOST);\r\n-            } else if (request.getAttribute(WebKeys.CURRENT_HOST) != null) {\r\n-                host = (Host) request.getAttribute(WebKeys.CURRENT_HOST);\r\n-            } else {\r\n-\r\n-                final String serverName = request.getServerName();\r\n-                host = resolveHostName(serverName, systemUser, respectFrontendRoles);\r\n-            }\r\n+        Optional<Host> optionalHost = this.getCurrentHostFromRequest(request, user, respectAnonPerms);\r\n+\r\n+        if (!optionalHost.isPresent() && user.isBackendUser()){\r\n+            optionalHost = this.getCurrentHostFromSession(request, user, respectAnonPerms);\r\n         }\r\n \r\n+        final Host host = optionalHost.isPresent() ? optionalHost.get() : resolveHostName(request.getServerName(),\r\n+                user, respectAnonPerms);\r\n+\r\n+        checkHostPermission(user, respectAnonPerms, host);\r\n+        storeCurrentHost(request, user, host);\r\n+\r\n+        return host;\r\n+    }\r\n+\r\n+    private void storeCurrentHost(final HttpServletRequest request, final User user, final Host host) {\r\n+        final HttpSession session = request.getSession(false);\r\n+\r\n         request.setAttribute(WebKeys.CURRENT_HOST, host);\r\n-        if (session != null && mode.isAdmin) {\r\n \r\n+        if (session != null && user.isBackendUser()) {\r\n             session.setAttribute(WebKeys.CURRENT_HOST, host);\r\n         }\r\n+    }\r\n \r\n-        return host;\r\n+    private void checkHostPermission(final User user, boolean respectAnonPerms, final Host host)\r", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzkzMg==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477932", "bodyText": "Issue found: Unnecessary modifier 'public' on method 'getCurrentHost': the method is declared in an interface type", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:35Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPI.java", "diffHunk": "@@ -28,7 +31,28 @@\n \t\r\n \tpublic Host getCurrentHost(HttpServletRequest req) throws DotDataException, DotSecurityException, PortalException, SystemException;\r\n \r\n-\tpublic Host getCurrentHost(final HttpServletRequest request, final PageMode mode) throws DotDataException, DotSecurityException, PortalException, SystemException;\r\n+\t/**\r\n+\t * Return the current Host taking the host id or name from any of the follow source:\r\n+\t *\r\n+\t * - Current host id set by 'host_id' {@link HttpServletRequest} parameter, just in case the log in user is a backend user.\r\n+\t * - Current host name set by 'Host' {@link HttpServletRequest} parameter\r\n+\t * - Current {@link Host} object set by {@link WebKeys#CURRENT_HOST} {@link HttpServletRequest} attribute.\r\n+\t * - Current {@link Host} object set by {@link WebKeys#CURRENT_HOST} {@link HttpSession} attribute,\r\n+\t * - Current host id set by {@link WebKeys#CMS_SELECTED_HOST_ID} {@link HttpSession} attribute,\r\n+\t * \t just in case the log in user is a backend user..\r\n+\t *   just in case the log in user is a backend user..\r\n+\t * - Current host name get by {@link HttpServletRequest#getServerName()}\r\n+\t * - Default Host\r\n+\t *\r\n+\t * @param request current {@link HttpServletRequest}\r\n+\t * @param user User current login user\r\n+\t * @return\r\n+\t * @throws DotDataException\r\n+\t * @throws DotSecurityException\r\n+\t * @throws PortalException\r\n+\t * @throws SystemException\r\n+\t */\r\n+\tpublic Host getCurrentHost(final HttpServletRequest request, final User user) throws DotDataException, DotSecurityException;\r", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Nzk0MA==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477940", "bodyText": "Issue found: The String literal \"should throw a DotSecurityException\" appears 5 times in this file; the first occurrence is on line 105", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:36Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,721 @@\n+package com.dotmarketing.business.web;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+public class HostWebAPIImplIntegrationTest extends IntegrationTestBase {\n+\n+    public static final String HOST_ID_PARAMETER_NAME = \"host_id\";\n+\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user\n+     * Should: host_id parameter be take over any other source\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHost() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(host.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is not a backend user\n+     * Should: Host parameter should by taken\n+     */\n+    @Test\n+    public void useHostIDRequestAsCurrentHostNotBackendUser() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Host anotherHost = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session, anotherHost);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createUser(host);\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        final Host currentHost = hostWebAPI.getCurrentHost(request, user);\n+\n+        assertEquals(anotherHost.getIdentifier(), currentHost.getIdentifier());\n+        verify(request).setAttribute(WebKeys.CURRENT_HOST, currentHost);\n+        verify(session, never()).setAttribute(anyString(), anyObject());\n+    }\n+\n+    /**\n+     * Method to test: {@link HostWebAPIImpl#getCurrentHost(HttpServletRequest, User)} (HttpServletRequest)}\n+     * When: request host_id parameter is set and the user is a backend user but don't have permission\n+     * Should: throw a {@link DotSecurityException}\n+     */\n+    @Test\n+    public void useHostIdAndTheUserDontHavePermission() throws DotDataException, DotSecurityException {\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        setAllParametersAndAttributes(request, session);\n+        when(request.getParameter(HOST_ID_PARAMETER_NAME)).thenReturn(host.getIdentifier());\n+\n+        final User user = createBackendUser();\n+\n+        final HostWebAPIImpl hostWebAPI = new HostWebAPIImpl();\n+\n+        try {\n+            hostWebAPI.getCurrentHost(request, user);\n+            throw new RuntimeException(\"should throw a DotSecurityException\");", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Nzk1MA==", "url": "https://github.com/dotCMS/core/pull/17832#discussion_r366477950", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Mockito'", "author": "dev-dotcms", "createdAt": "2020-01-14T17:38:37Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/HostWebAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,721 @@\n+package com.dotmarketing.business.web;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.mockito.Mockito.*;", "originalCommit": "a39df434e02f4bfb7bfa935e14d9f639b303e0ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}