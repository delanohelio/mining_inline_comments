{"pr_number": 18162, "pr_title": "#18147 now when adding a fields, the data type is added. Unit test al\u2026", "pr_createdAt": "2020-03-20T05:51:26Z", "pr_url": "https://github.com/dotCMS/core/pull/18162", "timeline": [{"oid": "c7591036775f6234c14df1c5ae93135c736bd9e1", "url": "https://github.com/dotCMS/core/commit/c7591036775f6234c14df1c5ae93135c736bd9e1", "message": "#18147 now when adding a fields, the data type is added. Unit test also added. and a fix for the Contentlet structureInode refactor field", "committedDate": "2020-03-20T05:50:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NzM3Mw==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395647373", "bodyText": "Maybe type.value.equalsIgnoreCase vs. just lowercasing ?", "author": "wezell", "createdAt": "2020-03-20T13:48:18Z", "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/DataTypes.java", "diffHunk": "@@ -32,7 +32,7 @@ public static DataTypes getDataType (String value) {\n \t\tvalue = value.replaceAll(\"[0-9]\", \"\");\n \t\tDataTypes[] types = DataTypes.values();\n \t\tfor (DataTypes type : types) {\n-\t\t\tif (type.value.equals(value))\n+\t\t\tif (type.value.equals(value.toLowerCase()))", "originalCommit": "c7591036775f6234c14df1c5ae93135c736bd9e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67b76e364a4db2d07c1435d7a2a21fff8169f6b1", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/contenttype/model/field/DataTypes.java b/dotCMS/src/main/java/com/dotcms/contenttype/model/field/DataTypes.java\nindex 75e18dedf9..a20c64acd6 100644\n--- a/dotCMS/src/main/java/com/dotcms/contenttype/model/field/DataTypes.java\n+++ b/dotCMS/src/main/java/com/dotcms/contenttype/model/field/DataTypes.java\n\n@@ -32,7 +32,7 @@ public enum DataTypes {\n \t\tvalue = value.replaceAll(\"[0-9]\", \"\");\n \t\tDataTypes[] types = DataTypes.values();\n \t\tfor (DataTypes type : types) {\n-\t\t\tif (type.value.equals(value.toLowerCase()))\n+\t\t\tif (type.value.equalsIgnoreCase(value))\n \t\t\t\treturn type;\n \t\t}\n \t\treturn SYSTEM;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODAyMw==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395648023", "bodyText": "Why include these changes?  I would rather have it called contentTypeId in our pojo", "author": "wezell", "createdAt": "2020-03-20T13:49:13Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/business/Contentlet.java", "diffHunk": "@@ -46,7 +46,7 @@\n \r\n     private FieldAPI fAPI = APILocator.getFieldAPI();\r\n \r\n-    private String contentTypeId;\r\n+    private String structureInode;\r", "originalCommit": "c7591036775f6234c14df1c5ae93135c736bd9e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNjA4MQ==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395736081", "bodyText": "in a previous commit the structureInode was rename to contentTypeId, them we realized it is breaking the starter (importer), so doing the fix", "author": "jdotcms", "createdAt": "2020-03-20T16:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODAyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "67b76e364a4db2d07c1435d7a2a21fff8169f6b1", "url": "https://github.com/dotCMS/core/commit/67b76e364a4db2d07c1435d7a2a21fff8169f6b1", "message": "#18147 codacy feedback", "committedDate": "2020-03-20T16:25:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1NjE5OA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395756198", "bodyText": "If this is not going to be used anymore, remove the code completely.", "author": "jcastro-dotcms", "createdAt": "2020-03-20T16:34:32Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v3/contenttype/MoveFieldsForm.java", "diffHunk": "@@ -47,7 +47,7 @@ private void fixFields(final List<Map<String, Object>> fields, final String cont\n \n             fieldMap.put(\"sortOrder\", i);\n             fieldMap.put(\"contentTypeId\", contentTypeId);\n-            fieldMap.remove(\"dataType\");\n+            //fieldMap.remove(\"dataType\");", "originalCommit": "67b76e364a4db2d07c1435d7a2a21fff8169f6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c055ab55864ec7be258f660155b9f997545feed9", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rest/api/v3/contenttype/MoveFieldsForm.java b/dotCMS/src/main/java/com/dotcms/rest/api/v3/contenttype/MoveFieldsForm.java\nindex 5994679426..56136cb8d7 100644\n--- a/dotCMS/src/main/java/com/dotcms/rest/api/v3/contenttype/MoveFieldsForm.java\n+++ b/dotCMS/src/main/java/com/dotcms/rest/api/v3/contenttype/MoveFieldsForm.java\n\n@@ -47,7 +47,6 @@ public class MoveFieldsForm {\n \n             fieldMap.put(\"sortOrder\", i);\n             fieldMap.put(\"contentTypeId\", contentTypeId);\n-            //fieldMap.remove(\"dataType\");\n \n             final boolean isLayoutField = ImmutableRowField.class.getName().equals(fieldMap.get(\"clazz\")) ||\n                     ImmutableColumnField.class.getName().equals(fieldMap.get(\"clazz\"));\n"}}, {"oid": "c055ab55864ec7be258f660155b9f997545feed9", "url": "https://github.com/dotCMS/core/commit/c055ab55864ec7be258f660155b9f997545feed9", "message": "#18147 codacy feedback2", "committedDate": "2020-03-20T16:56:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDAzMg==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395770032", "bodyText": "A few things here:\n\nSince we are testing the MoveFieldsForm this test should live in a new test class class MoveFieldFormsTest\nTest method naming convention usually includes the method we are testing. In this case getRows. Suggested method name: testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes\nJavadoc should also say that we are testing that the proper datatypes are kept after de-serialization", "author": "dsilvam", "createdAt": "2020-03-20T16:57:55Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java", "diffHunk": "@@ -458,6 +459,137 @@ public void shouldMoveFields () throws DotSecurityException, DotDataException {\n         checkAllFieldsIds(listExpected, contentTypeFromDB.fields());\n     }\n \n+\n+    /**\n+     * When try to move fields in a Content Type with a right layout\n+     * Should update the field with the new sortOrder\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testSerializerMoveFields () throws DotSecurityException, DotDataException {", "originalCommit": "67b76e364a4db2d07c1435d7a2a21fff8169f6b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NDUxOQ==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395774519", "bodyText": "Not sure if should live in a diff class.\nOk the rest of the points", "author": "jdotcms", "createdAt": "2020-03-20T17:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "f010f3a763c84b4a2c0ec5475c94e4ffc0c1965c", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java b/dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java\nindex d919c5f730..9db8e5ceea 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java\n\n@@ -461,14 +461,14 @@ public class FieldResourceTest {\n \n \n     /**\n-     * When try to move fields in a Content Type with a right layout\n-     * Should update the field with the new sortOrder\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n      *\n      * @throws DotSecurityException\n      * @throws DotDataException\n      */\n     @Test\n-    public void testSerializerMoveFields () throws DotSecurityException, DotDataException {\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n \n         final ContentType type = createContentType();\n         final List<Map<String, Object>> fieldList = createTestFields (type.id());\n"}}, {"oid": "f010f3a763c84b4a2c0ec5475c94e4ffc0c1965c", "url": "https://github.com/dotCMS/core/commit/f010f3a763c84b4a2c0ec5475c94e4ffc0c1965c", "message": "#18147 codacy 3", "committedDate": "2020-03-20T17:16:03Z", "type": "commit"}, {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "url": "https://github.com/dotCMS/core/commit/5dde7da0e8becf1065643ce4350e51a3dd29a956", "message": "#18147 refactor for the integration test", "committedDate": "2020-03-20T17:55:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM0NA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806344", "bodyText": "Issue found: The String literal \"unique\" appears 5 times in this file; the first occurrence is on line 99", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:47Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM1MA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806350", "bodyText": "Issue found: Avoid instantiating Long objects.Call Long.valueOf() instead", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:48Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,\n+                \"variable\", \"fields0\");\n+\n+        final Map<String, Object> columnField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Column\",\n+                \"fieldTypeLabel\", \"Column\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM2MA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806360", "bodyText": "Issue found: The String literal \"clazz\" appears 5 times in this file; the first occurrence is on line 81", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:49Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM2Nw==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806367", "bodyText": "Issue found: The String literal \"name\" appears 5 times in this file; the first occurrence is on line 94", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:50Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM4Mg==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806382", "bodyText": "Issue found: The String literal \"required\" appears 5 times in this file; the first occurrence is on line 96", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:51Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM5Nw==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806397", "bodyText": "Issue found: Avoid instantiating Long objects.Call Long.valueOf() instead", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:52Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,\n+                \"variable\", \"fields0\");\n+\n+        final Map<String, Object> columnField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Column\",\n+                \"fieldTypeLabel\", \"Column\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQwOA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806408", "bodyText": "Issue found: Avoid instantiating Integer objects. Call Integer.valueOf() instead.", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:54Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,\n+                \"variable\", \"fields0\");\n+\n+        final Map<String, Object> columnField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Column\",\n+                \"fieldTypeLabel\", \"Column\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-1\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQyMA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806420", "bodyText": "Issue found: The String literal \"listed\" appears 5 times in this file; the first occurrence is on line 92", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:55Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQzNA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806434", "bodyText": "Issue found: The String literal \"indexed\" appears 5 times in this file; the first occurrence is on line 91", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:56Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQ0NA==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806444", "bodyText": "Issue found: The String literal \"searchable\" appears 5 times in this file; the first occurrence is on line 97", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:57Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQ1Nw==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806457", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.util.CollectionsUtils'", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:58Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java", "diffHunk": "@@ -14,6 +14,7 @@\n import javax.ws.rs.core.Response;\n \n import com.dotcms.rest.exception.NotFoundException;\n+import com.dotcms.util.CollectionsUtils;", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQ2NQ==", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806465", "bodyText": "Issue found: The String literal \"dataType\" appears 5 times in this file; the first occurrence is on line 83", "author": "dev-dotcms", "createdAt": "2020-03-20T18:02:59Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",", "originalCommit": "5dde7da0e8becf1065643ce4350e51a3dd29a956", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}