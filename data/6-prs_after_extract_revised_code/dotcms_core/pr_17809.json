{"pr_number": 17809, "pr_title": "Created new Filter to intercept and normalizate URIs", "pr_createdAt": "2020-01-10T14:07:47Z", "pr_url": "https://github.com/dotCMS/core/pull/17809", "timeline": [{"oid": "d34f3bb411cbb533fff3a4097e6f73808dd49ca6", "url": "https://github.com/dotCMS/core/commit/d34f3bb411cbb533fff3a4097e6f73808dd49ca6", "message": "Created new Filter to intercept and normalizate URIs", "committedDate": "2020-01-10T05:39:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2MTM3Mg==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365261372", "bodyText": "Is the third param really needed? Seems like should be enough with comparing equality between the first two  (originalURI,  expectedNormalizedURI)", "author": "dsilvam", "createdAt": "2020-01-10T14:33:46Z", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        String originalURI = \"/test/../folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/important/../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"/folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * valid URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_valid_URI() throws IOException, ServletException {\n+\n+        String originalURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+\n+        originalURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+\n+        originalURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"../folder/folder1/file.dat\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+    }\n+\n+    private void compare(final String originalURI, final String expectedNormalizedURI,\n+            boolean equals)\n+            throws IOException, ServletException {", "originalCommit": "d34f3bb411cbb533fff3a4097e6f73808dd49ca6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "chunk": "diff --git a/dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java b/dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java\nindex 8748ed0c93..20cff2754e 100644\n--- a/dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java\n+++ b/dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java\n\n@@ -1,7 +1,6 @@\n package com.dotcms.filters;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.mockito.Mockito.any;\n import static org.mockito.Mockito.doNothing;\n"}}, {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "url": "https://github.com/dotCMS/core/commit/1011011bec5224a85ccbf0ae4ff9b43cd7371978", "message": "Applied feedback #17796", "committedDate": "2020-01-10T15:30:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzMxNg==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293316", "bodyText": "Issue found: Parameter 'servletResponse' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:44Z", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzMyOA==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293328", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:45Z", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM0MA==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293340", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:47Z", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        String originalURI = \"/test/../folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/important/../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"/folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * valid URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_valid_URI() throws IOException, ServletException {", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM0Ng==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293346", "bodyText": "Issue found: Local variable 'request' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:48Z", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        String originalURI = \"/test/../folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/important/../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"/folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * valid URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_valid_URI() throws IOException, ServletException {\n+\n+        String originalURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, originalURI);\n+\n+        originalURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, originalURI);\n+\n+        originalURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, originalURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"../folder/folder1/file.dat\";\n+        compare(originalURI, originalURI);\n+    }\n+\n+    private void compare(final String originalURI, final String expectedNormalizedURI)\n+            throws IOException, ServletException {\n+\n+        HttpServletRequest request = mock(HttpServletRequest.class);", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM1NQ==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293355", "bodyText": "Issue found: Document empty method body", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:49Z", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n+            FilterChain filterChain) throws IOException, ServletException {\n+\n+        HttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(\n+                (HttpServletRequest) servletRequest) {\n+\n+            @Override\n+            public String getRequestURI() {\n+\n+                /* Normalization is the process of removing unnecessary \".\" and \"..\" segments from the path component of a hierarchical URI.\n+                 1. Each \".\" segment is simply removed.\n+                 2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n+                 3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n+                 */\n+                return URI.create(super.getRequestURI()).normalize().toString();\n+            }\n+\n+        };\n+\n+        filterChain.doFilter(requestWrapper, servletResponse);\n+    }\n+\n+    @Override\n+    public void destroy() {", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM2OA==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293368", "bodyText": "Issue found: Document empty method body", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:50Z", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM4Ng==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293386", "bodyText": "Issue found: Parameter 'filterConfig' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:51Z", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzQwMw==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293403", "bodyText": "Issue found: Parameter 'filterChain' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:52Z", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n+            FilterChain filterChain) throws IOException, ServletException {", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzQxMg==", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293412", "bodyText": "Issue found: Local variable 'requestWrapper' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-10T15:37:53Z", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n+            FilterChain filterChain) throws IOException, ServletException {\n+\n+        HttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(", "originalCommit": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}