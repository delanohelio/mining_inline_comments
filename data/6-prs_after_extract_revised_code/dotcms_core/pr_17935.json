{"pr_number": 17935, "pr_title": "#17515 Avoid clash between field vars and graphql content fields", "pr_createdAt": "2020-01-31T22:37:18Z", "pr_url": "https://github.com/dotCMS/core/pull/17935", "timeline": [{"oid": "d5f9f7d963db3c526db9c40411e2ef15d3fb3636", "url": "https://github.com/dotCMS/core/commit/d5f9f7d963db3c526db9c40411e2ef15d3fb3636", "message": "#17515 Avoid clash between field vars and graphql content fields", "committedDate": "2020-01-31T22:36:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNjM5Mg==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374236392", "bodyText": "maybe we should move this logic to its own Util, something like:\nclass GrahpQLUtil {\n    public List<String> getReservedWord(){\n         return InterfaceType.RESERVED_GRAPHQL_FIELD_NAMES;\n   }\n}", "author": "freddyucv", "createdAt": "2020-02-03T17:28:52Z", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java", "diffHunk": "@@ -232,8 +234,13 @@ private Field dbSaveUpdate(final Field throwAwayField) throws DotDataException {\n       }\n \n       // normalize our velocityvar\n+      final List<String> takenFieldVars = fieldsAlreadyAdded.stream().map(Field::variable).collect(\n+              Collectors.toList());\n+      // let's add GraphQL reserved field names to the taken fields vars list\n+      takenFieldVars.addAll(InterfaceType.RESERVED_GRAPHQL_FIELD_NAMES);", "originalCommit": "d5f9f7d963db3c526db9c40411e2ef15d3fb3636", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1NzY2OA==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374257668", "bodyText": "Done", "author": "dsilvam", "createdAt": "2020-02-03T18:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNjM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "94283cee41cdee3c7966b546b9294ddb2b3d533c", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java b/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java\nindex 23df83f2ee..109c996293 100644\n--- a/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java\n+++ b/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java\n\n@@ -236,8 +236,6 @@ public class FieldFactoryImpl implements FieldFactory {\n       // normalize our velocityvar\n       final List<String> takenFieldVars = fieldsAlreadyAdded.stream().map(Field::variable).collect(\n               Collectors.toList());\n-      // let's add GraphQL reserved field names to the taken fields vars list\n-      takenFieldVars.addAll(InterfaceType.RESERVED_GRAPHQL_FIELD_NAMES);\n \n       String tryVar = (throwAwayField.variable() == null)\n           ? suggestVelocityVar(throwAwayField.name(), takenFieldVars) : throwAwayField.variable();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNzQxMA==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374237410", "bodyText": "doc, why are you changing this method signature?, if the List is a list with the Field's id (or some other field attribute) I think is better keep the List of Fied and into the method get the field's id", "author": "freddyucv", "createdAt": "2020-02-03T17:30:45Z", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java", "diffHunk": "@@ -51,7 +51,7 @@ default FieldFactory instance() {\n     List<Field> selectByContentTypeInDb(String id) throws DotDataException;\n \n \n-    String suggestVelocityVar(String tryVar, List<Field> takenFields) throws DotDataException;\n+    String suggestVelocityVar(String tryVar, List<String> takenFields) throws DotDataException;", "originalCommit": "d5f9f7d963db3c526db9c40411e2ef15d3fb3636", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0MzY3Mw==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374243673", "bodyText": "The only thing we used from Field was its varname", "author": "dsilvam", "createdAt": "2020-02-03T17:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNzQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "94283cee41cdee3c7966b546b9294ddb2b3d533c", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java b/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java\nindex a591958aa8..e5b31499ff 100644\n--- a/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java\n+++ b/dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java\n\n@@ -50,8 +50,16 @@ public interface FieldFactory {\n \n     List<Field> selectByContentTypeInDb(String id) throws DotDataException;\n \n+    /**\n+     * Given an initial variable to try, it returns a version of it that sticks to the naming\n+     * conventions for field variable names and avoiding using the names in the provided list.\n+     * @param tryVar the initial variable to try\n+     * @param takenFieldsVariables a list of field variable names to avoid using\n+     * @return\n+     * @throws DotDataException\n+     */\n \n-    String suggestVelocityVar(String tryVar, List<String> takenFields) throws DotDataException;\n+    String suggestVelocityVar(String tryVar, List<String> takenFieldsVariables) throws DotDataException;\n \n \n     FieldVariable save(FieldVariable fieldVar) throws DotDataException;\n"}}, {"oid": "bb9d4574aa16f4ceb4b4e018c2f073faaae47bfd", "url": "https://github.com/dotCMS/core/commit/bb9d4574aa16f4ceb4b4e018c2f073faaae47bfd", "message": "#17515 more assertions to test", "committedDate": "2020-02-03T17:42:11Z", "type": "commit"}, {"oid": "94283cee41cdee3c7966b546b9294ddb2b3d533c", "url": "https://github.com/dotCMS/core/commit/94283cee41cdee3c7966b546b9294ddb2b3d533c", "message": "#17515 refactor", "committedDate": "2020-02-03T18:09:23Z", "type": "commit"}, {"oid": "1a017151116403a80824cad4f30ca2fd2c207bf7", "url": "https://github.com/dotCMS/core/commit/1a017151116403a80824cad4f30ca2fd2c207bf7", "message": "#17515 form a new list instead of adding to original one", "committedDate": "2020-02-05T18:36:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM1MQ==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437351", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.graphql.InterfaceType'", "author": "dev-dotcms", "createdAt": "2020-02-05T18:42:41Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -23,6 +23,8 @@\n import com.dotcms.contenttype.model.type.SimpleContentType;\n import com.dotcms.datagen.ContentTypeDataGen;\n import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.graphql.InterfaceType;", "originalCommit": "1a017151116403a80824cad4f30ca2fd2c207bf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM2MQ==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437361", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertTrue' due to existing static import 'org.junit.Assert.assertTrue'", "author": "dev-dotcms", "createdAt": "2020-02-05T18:42:43Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);\n+            Assert.assertTrue(UtilMethods.isSet(field1.variable()));", "originalCommit": "1a017151116403a80824cad4f30ca2fd2c207bf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM2Nw==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437367", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertNotNull' due to existing static import 'org.junit.Assert.assertNotNull'", "author": "dev-dotcms", "createdAt": "2020-02-05T18:42:44Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);\n+            Assert.assertTrue(UtilMethods.isSet(field1.variable()));\n+            Assert.assertNotEquals(fieldName, field1.variable());\n+\n+            // let's create a new field to make sure it's getting a new variable\n+\n+            Field field2 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field2 = fieldAPI.save(field2, user);\n+\n+            Assert.assertNotNull(field2);", "originalCommit": "1a017151116403a80824cad4f30ca2fd2c207bf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM3Nw==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437377", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertNotNull' due to existing static import 'org.junit.Assert.assertNotNull'", "author": "dev-dotcms", "createdAt": "2020-02-05T18:42:45Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);", "originalCommit": "1a017151116403a80824cad4f30ca2fd2c207bf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM5MQ==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437391", "bodyText": "Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "author": "dev-dotcms", "createdAt": "2020-02-05T18:42:47Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/GraphQLUtil.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.dotcms.graphql.util;\n+\n+import com.dotcms.graphql.InterfaceType;\n+import java.util.Set;\n+\n+public class GraphQLUtil {", "originalCommit": "1a017151116403a80824cad4f30ca2fd2c207bf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzQwNA==", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437404", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertTrue' due to existing static import 'org.junit.Assert.assertTrue'", "author": "dev-dotcms", "createdAt": "2020-02-05T18:42:48Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);\n+            Assert.assertTrue(UtilMethods.isSet(field1.variable()));\n+            Assert.assertNotEquals(fieldName, field1.variable());\n+\n+            // let's create a new field to make sure it's getting a new variable\n+\n+            Field field2 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field2 = fieldAPI.save(field2, user);\n+\n+            Assert.assertNotNull(field2);\n+            Assert.assertTrue(UtilMethods.isSet(field2.variable()));", "originalCommit": "1a017151116403a80824cad4f30ca2fd2c207bf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}