{"pr_number": 19342, "pr_title": "#19321 moving bundler to Resource, adding methods to BundleAPI", "pr_createdAt": "2020-09-25T21:01:07Z", "pr_url": "https://github.com/dotCMS/core/pull/19342", "timeline": [{"oid": "f0aed3467b46ed4b95d96be19a11a17dea5fc822", "url": "https://github.com/dotCMS/core/commit/f0aed3467b46ed4b95d96be19a11a17dea5fc822", "message": "#19321 moving bundler to Resource, adding methods to BundleAPI", "committedDate": "2020-09-25T20:48:21Z", "type": "commit"}, {"oid": "7548ec00613c194b2141ae2805352b51862967b6", "url": "https://github.com/dotCMS/core/commit/7548ec00613c194b2141ae2805352b51862967b6", "message": "#19321 javadoc and convenience method", "committedDate": "2020-09-28T11:53:08Z", "type": "commit"}, {"oid": "77be04b2248e909d9b59ab3b17e61c70d41942e0", "url": "https://github.com/dotCMS/core/commit/77be04b2248e909d9b59ab3b17e61c70d41942e0", "message": "#19321 removing unneeded class", "committedDate": "2020-09-28T15:20:00Z", "type": "commit"}, {"oid": "a4fb64e4ff65ff56b543c27ff451b5bc2f2f001f", "url": "https://github.com/dotCMS/core/commit/a4fb64e4ff65ff56b543c27ff451b5bc2f2f001f", "message": "#19321 validations, small refactor", "committedDate": "2020-10-01T00:06:19Z", "type": "commit"}, {"oid": "c04ec830a1b04e0940924ed9f6103b90d11e492c", "url": "https://github.com/dotCMS/core/commit/c04ec830a1b04e0940924ed9f6103b90d11e492c", "message": "#19321 tests", "committedDate": "2020-10-01T00:06:53Z", "type": "commit"}, {"oid": "e492bd49d610c385b17532569abc98f3bc95de4a", "url": "https://github.com/dotCMS/core/commit/e492bd49d610c385b17532569abc98f3bc95de4a", "message": "#19321 add class to mainsuite", "committedDate": "2020-10-01T14:42:49Z", "type": "commit"}, {"oid": "9da1e35d3fadfcaa9feb30c1e9d9018b1125c6e9", "url": "https://github.com/dotCMS/core/commit/9da1e35d3fadfcaa9feb30c1e9d9018b1125c6e9", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-19321", "committedDate": "2020-10-01T14:46:28Z", "type": "commit"}, {"oid": "f36638f61c85843e6246fd2828b1c696e1866fee", "url": "https://github.com/dotCMS/core/commit/f36638f61c85843e6246fd2828b1c696e1866fee", "message": "#19321 improve message", "committedDate": "2020-10-01T16:50:36Z", "type": "commit"}, {"oid": "515fe10613951f2c71bcac69bb8c32e8a82e1280", "url": "https://github.com/dotCMS/core/commit/515fe10613951f2c71bcac69bb8c32e8a82e1280", "message": "#19321 more tests", "committedDate": "2020-10-01T17:10:37Z", "type": "commit"}, {"oid": "88ae08d9818f9778ba7b10cc2f798a1933959aec", "url": "https://github.com/dotCMS/core/commit/88ae08d9818f9778ba7b10cc2f798a1933959aec", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-19321", "committedDate": "2020-10-02T14:47:45Z", "type": "commit"}, {"oid": "3d1224fa93410a6b4d6a0f81e56164dea39a10aa", "url": "https://github.com/dotCMS/core/commit/3d1224fa93410a6b4d6a0f81e56164dea39a10aa", "message": "#19321 use asyncresponse", "committedDate": "2020-10-02T20:27:20Z", "type": "commit"}, {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c", "url": "https://github.com/dotCMS/core/commit/086545d55e6acdd8b1a50f396781eddcf14e519c", "message": "#19321 update tests", "committedDate": "2020-10-02T20:47:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzQ1OQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500437459", "bodyText": "Log here", "author": "jdotcms", "createdAt": "2020-10-06T16:32:00Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java", "diffHunk": "@@ -391,4 +395,42 @@ public void deleteAssetFromBundle(String assetId, String bundleId)\n \n \t}\n \n+\t/**\n+\t * This takes a Bundle, generates the folder/file structure and returns the resulting directory\n+\t * as a File handle. It will not delete the bundle directory if it already existed.\n+\t * @param bundle - Bundle to generate\n+\t * @return\n+\t */\n+    @CloseDBIfOpened\n+    private File generateBundleDirectory(final Bundle bundle) {\n+\n+        final PushPublisherConfig pushPublisherConfig = new PushPublisherConfig(bundle);\n+        pushPublisherConfig.setPublishers(Arrays.asList(GenerateBundlePublisher.class));\n+        try {\n+            APILocator.getPublisherAPI().publish(pushPublisherConfig);\n+        }\n+        catch(Exception e) {", "originalCommit": "086545d55e6acdd8b1a50f396781eddcf14e519c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54fd4f86a95815444d6d6d117288667b0b8f69e8", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java b/dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java\nindex 9bfe90e740..573c1e8aca 100644\n--- a/dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java\n\n@@ -409,7 +409,8 @@ public class BundleAPIImpl implements BundleAPI {\n         try {\n             APILocator.getPublisherAPI().publish(pushPublisherConfig);\n         }\n-        catch(Exception e) {\n+        catch(final Exception e) {\n+        \tLogger.error(this,e.getMessage(),e);\n             throw new DotRuntimeException(e);\n         }\n         return BundlerUtil.getBundleRoot( pushPublisherConfig );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MTgyOA==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500441828", "bodyText": "set to final", "author": "jdotcms", "createdAt": "2020-10-06T16:38:45Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);", "originalCommit": "086545d55e6acdd8b1a50f396781eddcf14e519c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54fd4f86a95815444d6d6d117288667b0b8f69e8", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\nindex 6195a18732..91cf09a2f2 100644\n--- a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n+++ b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n\n@@ -68,26 +68,24 @@ public class PushUtils {\n         }\n         final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n         final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n-\n-\n-        List<File> files = FileUtil.listFilesRecursively(directory);\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n \n         Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n         // Create the output stream for the output file\n \n         // try-with-resources handles close of streams\n-        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());\n                         // Wrap the output file stream in streams that will tar and gzip everything\n-                        TarArchiveOutputStream taos = new TarArchiveOutputStream(\n-                                        new GZIPOutputStream(new BufferedOutputStream(fos)))) {\n+                        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                                        new GZIPOutputStream(new BufferedOutputStream(fileOutputStream)))) {\n \n-            taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n+\t\t\ttarArchiveOutputStream.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n             // TAR originally didn't support long file names, so enable the support for it\n-            taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\t\t\ttarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n \n             // Get to putting all the files in the compressed output file\n-            for (File f : files) {\n-                addFilesToCompression(taos, f, \".\", directory.getAbsolutePath());\n+            for (final File file : files) {\n+                addFilesToCompression(tarArchiveOutputStream, file, \".\", directory.getAbsolutePath());\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MTk0MQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500441941", "bodyText": "set to final rename to file", "author": "jdotcms", "createdAt": "2020-10-06T16:38:57Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+                        // Wrap the output file stream in streams that will tar and gzip everything\n+                        TarArchiveOutputStream taos = new TarArchiveOutputStream(\n+                                        new GZIPOutputStream(new BufferedOutputStream(fos)))) {\n+\n+            taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n+            // TAR originally didn't support long file names, so enable the support for it\n+            taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\n+            // Get to putting all the files in the compressed output file\n+            for (File f : files) {", "originalCommit": "086545d55e6acdd8b1a50f396781eddcf14e519c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54fd4f86a95815444d6d6d117288667b0b8f69e8", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\nindex 6195a18732..91cf09a2f2 100644\n--- a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n+++ b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n\n@@ -68,26 +68,24 @@ public class PushUtils {\n         }\n         final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n         final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n-\n-\n-        List<File> files = FileUtil.listFilesRecursively(directory);\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n \n         Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n         // Create the output stream for the output file\n \n         // try-with-resources handles close of streams\n-        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());\n                         // Wrap the output file stream in streams that will tar and gzip everything\n-                        TarArchiveOutputStream taos = new TarArchiveOutputStream(\n-                                        new GZIPOutputStream(new BufferedOutputStream(fos)))) {\n+                        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                                        new GZIPOutputStream(new BufferedOutputStream(fileOutputStream)))) {\n \n-            taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n+\t\t\ttarArchiveOutputStream.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n             // TAR originally didn't support long file names, so enable the support for it\n-            taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\t\t\ttarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n \n             // Get to putting all the files in the compressed output file\n-            for (File f : files) {\n-                addFilesToCompression(taos, f, \".\", directory.getAbsolutePath());\n+            for (final File file : files) {\n+                addFilesToCompression(tarArchiveOutputStream, file, \".\", directory.getAbsolutePath());\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MjM0NA==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500442344", "bodyText": "rename to fileOutputStream", "author": "jdotcms", "createdAt": "2020-10-06T16:39:34Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());", "originalCommit": "086545d55e6acdd8b1a50f396781eddcf14e519c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54fd4f86a95815444d6d6d117288667b0b8f69e8", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\nindex 6195a18732..91cf09a2f2 100644\n--- a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n+++ b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n\n@@ -68,26 +68,24 @@ public class PushUtils {\n         }\n         final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n         final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n-\n-\n-        List<File> files = FileUtil.listFilesRecursively(directory);\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n \n         Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n         // Create the output stream for the output file\n \n         // try-with-resources handles close of streams\n-        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());\n                         // Wrap the output file stream in streams that will tar and gzip everything\n-                        TarArchiveOutputStream taos = new TarArchiveOutputStream(\n-                                        new GZIPOutputStream(new BufferedOutputStream(fos)))) {\n+                        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                                        new GZIPOutputStream(new BufferedOutputStream(fileOutputStream)))) {\n \n-            taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n+\t\t\ttarArchiveOutputStream.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n             // TAR originally didn't support long file names, so enable the support for it\n-            taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\t\t\ttarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n \n             // Get to putting all the files in the compressed output file\n-            for (File f : files) {\n-                addFilesToCompression(taos, f, \".\", directory.getAbsolutePath());\n+            for (final File file : files) {\n+                addFilesToCompression(tarArchiveOutputStream, file, \".\", directory.getAbsolutePath());\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MjUyNg==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500442526", "bodyText": "Rename to tarArchiveOutputStream", "author": "jdotcms", "createdAt": "2020-10-06T16:39:48Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+                        // Wrap the output file stream in streams that will tar and gzip everything\n+                        TarArchiveOutputStream taos = new TarArchiveOutputStream(", "originalCommit": "086545d55e6acdd8b1a50f396781eddcf14e519c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54fd4f86a95815444d6d6d117288667b0b8f69e8", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\nindex 6195a18732..91cf09a2f2 100644\n--- a/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n+++ b/dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java\n\n@@ -68,26 +68,24 @@ public class PushUtils {\n         }\n         final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n         final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n-\n-\n-        List<File> files = FileUtil.listFilesRecursively(directory);\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n \n         Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n         // Create the output stream for the output file\n \n         // try-with-resources handles close of streams\n-        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());\n                         // Wrap the output file stream in streams that will tar and gzip everything\n-                        TarArchiveOutputStream taos = new TarArchiveOutputStream(\n-                                        new GZIPOutputStream(new BufferedOutputStream(fos)))) {\n+                        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                                        new GZIPOutputStream(new BufferedOutputStream(fileOutputStream)))) {\n \n-            taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n+\t\t\ttarArchiveOutputStream.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n             // TAR originally didn't support long file names, so enable the support for it\n-            taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\t\t\ttarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n \n             // Get to putting all the files in the compressed output file\n-            for (File f : files) {\n-                addFilesToCompression(taos, f, \".\", directory.getAbsolutePath());\n+            for (final File file : files) {\n+                addFilesToCompression(tarArchiveOutputStream, file, \".\", directory.getAbsolutePath());\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0Mjc2MQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500442761", "bodyText": "set to final", "author": "jdotcms", "createdAt": "2020-10-06T16:40:08Z", "path": "dotCMS/src/main/java/com/dotcms/publishing/GenerateBundlePublisher.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.dotcms.publishing;\n+\n+import java.io.File;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotmarketing.util.Logger;\n+\n+/**\n+ * This GenerateBundlePublisher uses the same config/bundlers as the PushPublisher - the only\n+ * difference is that once this publisher has built the bundle it does not do anything with it. The\n+ * GenerateBundlePublisher is meant to be used to build the bundle when a user selects to download a\n+ * bundle\n+ * \n+ * @author will\n+ *\n+ */\n+public class GenerateBundlePublisher extends PushPublisher {\n+\n+    @Override\n+    public PublisherConfig process(PublishStatus status) throws DotPublishingException {", "originalCommit": "086545d55e6acdd8b1a50f396781eddcf14e519c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54fd4f86a95815444d6d6d117288667b0b8f69e8", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/publishing/GenerateBundlePublisher.java b/dotCMS/src/main/java/com/dotcms/publishing/GenerateBundlePublisher.java\nindex fc3ecf638b..f74d25570e 100644\n--- a/dotCMS/src/main/java/com/dotcms/publishing/GenerateBundlePublisher.java\n+++ b/dotCMS/src/main/java/com/dotcms/publishing/GenerateBundlePublisher.java\n\n@@ -16,7 +16,7 @@ import com.dotmarketing.util.Logger;\n public class GenerateBundlePublisher extends PushPublisher {\n \n     @Override\n-    public PublisherConfig process(PublishStatus status) throws DotPublishingException {\n+    public PublisherConfig process(final PublishStatus status) throws DotPublishingException {\n         final File bundleRoot = BundlerUtil.getBundleRoot(this.config);\n         Logger.info(this.getClass(), \"Bundling Complete: \" + bundleRoot);\n         return this.config;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NTE5OQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500445199", "bodyText": "set to final", "author": "jdotcms", "createdAt": "2020-10-06T16:43:58Z", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +638,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + bundleId + \" not found\");\n+            }\n+            final File bundleFile = new File(\n+                    ConfigUtils.getBundlePath() + File.separator + bundle.getId() + \".tar.gz\");\n+            if (!bundleFile.exists()) {\n+                throw new DoesNotExistException(\n+                        \"The bundle has not been generated for the provided bundle ID: \"\n+                                + bundleId);\n+            }\n+            final String bundleName = bundle.getName().replaceAll(\"[^\\\\w.-]\", \"_\");\n+            response.setHeader( \"Content-Disposition\", \"attachment; filename=\" +bundleName  +\"-\"+ bundle.getId() + \".tar.gz\" );\n+            return Response.ok(bundleFile, \"application/x-tgz\").build();\n+        }catch (DoesNotExistException e){\n+            Logger.error(this,e.getMessage());\n+            return ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.NOT_FOUND);\n+        }catch (Exception e){\n+            Logger.error(this,e.getMessage());\n+            return ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+    }\n+    \n+    @Path(\"/_generate\")\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final void generateBundle(@Context final HttpServletRequest request,\n+                                       @Context final HttpServletResponse response,\n+                                        @Suspended final AsyncResponse asyncResponse,\n+                                       final GenerateBundleForm form) {\n+\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        final User user = initData.getUser();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(form.bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + form.bundleId + \" not found\");\n+            }\n+            \n+            //set Filter to the bundle\n+            final FilterDescriptor filter = APILocator.getPublisherAPI().getFilterDescriptorByKey(form.filterKey);\n+            bundle.setFilterKey(filter.getKey());\n+            bundle.setOwner(user.getUserId());\n+            //set ForcePush value of the filter to the bundle\n+            bundle.setForcePush(\n+                    (boolean) filter.getFilters().getOrDefault(FilterDescriptor.FORCE_PUSH_KEY,false));\n+            bundle.setOperation(form.operation.ordinal());\n+            //Update Bundle\n+            APILocator.getBundleAPI().updateBundle(bundle);\n+\n+            //Generate the bundle file for this given operation\n+\n+            final BundleGenerator generator = new BundleGenerator(bundle, user,asyncResponse);\n+\n+            final DotSubmitter submitter =\n+                    DotConcurrentFactory.getInstance().getSubmitter(\"generateBundle\",\n+                            new DotConcurrentFactory.SubmitterConfigBuilder().poolSize(2)\n+                                    .maxPoolSize(4).queueCapacity(500).build()\n+                    );\n+            submitter.submit(generator);\n+            final String bundleName = bundle.getName().replaceAll(\"[^\\\\w.-]\", \"_\");\n+            response.setContentType( \"application/x-tgz\" );\n+            response.setHeader( \"Content-Disposition\", \"attachment; filename=\" + bundleName  +\"-\"+ bundle.getId() + \".tar.gz\" );\n+        }catch (DoesNotExistException e){\n+            Logger.error(this,e.getMessage());\n+            asyncResponse.resume(ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.NOT_FOUND));\n+        }catch (Exception e){\n+            Logger.error(this,e.getMessage());\n+            asyncResponse.resume(ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR));\n+        }\n+        \n+\n+    } // uploadBundleSync.\n+    \n+    \n+    class BundleGenerator implements Runnable {\n+\n+\n+        public BundleGenerator(final Bundle bundle,  final User user, final AsyncResponse asyncResponse) {\n+            super();\n+            this.bundle = bundle;\n+            this.user = user;\n+            this.asyncResponse = asyncResponse;\n+            \n+        }\n+\n+        File bundleFile;", "originalCommit": "086545d55e6acdd8b1a50f396781eddcf14e519c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "54fd4f86a95815444d6d6d117288667b0b8f69e8", "url": "https://github.com/dotCMS/core/commit/54fd4f86a95815444d6d6d117288667b0b8f69e8", "message": "#19321 feedback", "committedDate": "2020-10-06T20:44:35Z", "type": "commit"}, {"oid": "c13481e2fcc6855e661eb20765214fada149b382", "url": "https://github.com/dotCMS/core/commit/c13481e2fcc6855e661eb20765214fada149b382", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-19321", "committedDate": "2020-10-06T20:44:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxNzQ1NQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500617455", "bodyText": "This comment needs to be updated because the response code is 200", "author": "nollymar", "createdAt": "2020-10-06T21:52:50Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "diffHunk": "@@ -88,7 +109,118 @@ private void publish(FileInputStream createCOntentFileInputStream) throws DotPub\n         final FormDataMultiPart multipart = mock(FormDataMultiPart.class);\n         when(multipart.getBodyParts()).thenReturn(list(bodyPart));\n \n-        final BundleResource bundleResource = new BundleResource();\n         bundleResource.uploadBundleSync(request, response, multipart);\n     }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true);\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private String insertPublishingBundle(final String userId, final Date publishDate)\n+            throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(userId);\n+        bundle.setPublishDate(publishDate);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * BasicAuth\n+     */\n+    private HttpServletRequest getHttpRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#generateBundle(HttpServletRequest, HttpServletResponse, AsyncResponse, GenerateBundleForm)}\n+     * When: Create a bundle and generate the tar.gz file of the given bundle.\n+     * Should: Generate the bundle without issues, 200.\n+     */\n+    @Test\n+    public void test_generateBundle_success() throws DotDataException, IOException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Create GenerateBundleForm\n+        final GenerateBundleForm bundleForm = new GenerateBundleForm.Builder().bundleId(bundleId).build();\n+\n+        //Call generate endpoint\n+        final AsyncResponse asyncResponse = new MockAsyncResponse((arg) -> {\n+\n+            final Response generateBundleResponse = (Response)arg;\n+            assertEquals(Status.OK.getStatusCode(), generateBundleResponse.getStatus());\n+            return true;\n+        }, arg -> {\n+            fail(\"Error generating bundle\");\n+            return true;\n+        });\n+\n+        bundleResource.generateBundle(getHttpRequest(),response,asyncResponse,bundleForm);\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_fileNotGenerated_return404() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),responseResource.getStatus());\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated", "originalCommit": "c13481e2fcc6855e661eb20765214fada149b382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3NzU5Mg==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r501077592", "bodyText": "done", "author": "erickgonzalez", "createdAt": "2020-10-07T14:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxNzQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ef4561f89bf9fd0f31f05d65ee257dfd1a52a7a", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java b/dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java\nindex 32de9fd50a..e3bb4b2420 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java\n\n@@ -200,11 +200,11 @@ public class BundleResourceTest {\n \n     /**\n      * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n-     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n-     * Should: return 404 since the file has not been generated\n+     * When: Create a bundle and try to download it, since the tar.gz has been generated should succeed.\n+     * Should: return 200 since the file has been generated\n      */\n     @Test\n-    public void test_downloadBundle_success() throws DotDataException, IOException {\n+    public void test_downloadBundle_success() throws DotDataException {\n         //Create new bundle\n         final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTA0NQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500621045", "bodyText": "what would happen if this response is sent considering that the endpoint is tagged with @Produces(MediaType.APPLICATION_OCTET_STREAM) ?", "author": "nollymar", "createdAt": "2020-10-06T22:01:11Z", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +636,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + bundleId + \" not found\");\n+            }\n+            final File bundleFile = new File(\n+                    ConfigUtils.getBundlePath() + File.separator + bundle.getId() + \".tar.gz\");\n+            if (!bundleFile.exists()) {\n+                throw new DoesNotExistException(\n+                        \"The bundle has not been generated for the provided bundle ID: \"\n+                                + bundleId);\n+            }\n+            final String bundleName = bundle.getName().replaceAll(\"[^\\\\w.-]\", \"_\");\n+            response.setHeader( \"Content-Disposition\", \"attachment; filename=\" +bundleName  +\"-\"+ bundle.getId() + \".tar.gz\" );\n+            return Response.ok(bundleFile, \"application/x-tgz\").build();\n+        }catch (DoesNotExistException e){\n+            Logger.error(this,e.getMessage());\n+            return ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.NOT_FOUND);", "originalCommit": "c13481e2fcc6855e661eb20765214fada149b382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3NTc2NQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r501075765", "bodyText": "It response the error like this:\n{\n    \"message\": \"Bundle with ID: bundle-id-not-exist not found\"\n}", "author": "erickgonzalez", "createdAt": "2020-10-07T14:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTA0NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3ef4561f89bf9fd0f31f05d65ee257dfd1a52a7a", "url": "https://github.com/dotCMS/core/commit/3ef4561f89bf9fd0f31f05d65ee257dfd1a52a7a", "message": "#19321 feedback", "committedDate": "2020-10-07T14:51:55Z", "type": "commit"}, {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "url": "https://github.com/dotCMS/core/commit/6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "message": "Merge branch 'master' into issue-19321", "committedDate": "2020-10-08T22:03:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYxMw==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040613", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'config'", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:18Z", "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -34,14 +33,14 @@\n \n \n     @Override\n-    public PublishStatus publish ( PublisherConfig config ) throws DotPublishingException {\n+    final public PublishStatus publish ( PublisherConfig config ) throws DotPublishingException {\n \n         return publish( config, new PublishStatus() );\n     }\n \n     @CloseDBIfOpened\n     @Override\n-    public PublishStatus publish ( PublisherConfig config, PublishStatus status ) throws DotPublishingException {\n+    final public PublishStatus publish ( PublisherConfig config, PublishStatus status ) throws DotPublishingException {", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYxOQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040619", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'initData'.", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:19Z", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +629,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYyNQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040625", "bodyText": "Codacy found an issue: Avoid declaring a variable if it is unreferenced before a possible exit point.", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:20Z", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +629,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYzNw==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040637", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'filterKey'", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:21Z", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;\n+        private @JsonProperty String filterKey = null;", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY0NQ==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040645", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:22Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java", "diffHunk": "@@ -391,4 +395,44 @@ public void deleteAssetFromBundle(String assetId, String bundleId)\n \n \t}\n \n+\t/**\n+\t * This takes a Bundle, generates the folder/file structure and returns the resulting directory\n+\t * as a File handle. It will not delete the bundle directory if it already existed.\n+\t * @param bundle - Bundle to generate\n+\t * @return\n+\t */\n+    @CloseDBIfOpened\n+    private File generateBundleDirectory(final Bundle bundle) {\n+\n+        final PushPublisherConfig pushPublisherConfig = new PushPublisherConfig(bundle);\n+        pushPublisherConfig.setPublishers(Arrays.asList(GenerateBundlePublisher.class));\n+        try {\n+            APILocator.getPublisherAPI().publish(pushPublisherConfig);\n+        }\n+        catch(final Exception e) {", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY1Mw==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040653", "bodyText": "Codacy found an issue: Field operation has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:23Z", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;\n+        private @JsonProperty String filterKey = null;\n+        private @JsonProperty int operation = 0;", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY2MA==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040660", "bodyText": "Codacy found an issue: Unnecessary modifier 'public' on method 'generateTarGzipBundleFile': the method is declared in an interface type", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:24Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPI.java", "diffHunk": "@@ -168,4 +168,10 @@\n \t */\n \tpublic void deleteAssetFromBundle(String assetId, String bundleId) throws DotDataException;\n \n+    /**\n+     * This takes a bundle and generates the tar.gzipped output file.  The resulting file will be placed under\n+     * the ConfigUtils.getBundlePath() + \"/\" + bundleId + \".tar.gz\"\n+     */\n+    public File generateTarGzipBundleFile(Bundle bundle);", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY2Mg==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040662", "bodyText": "Codacy found an issue: The String literal \".tar.gz\" appears 5 times in this file; the first occurrence is on line 664", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:25Z", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +629,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + bundleId + \" not found\");\n+            }\n+            final File bundleFile = new File(\n+                    ConfigUtils.getBundlePath() + File.separator + bundle.getId() + \".tar.gz\");", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY2Ng==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040666", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'bundleId'", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:26Z", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY3Mg==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040672", "bodyText": "Codacy found an issue: Field bundleId has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:27Z", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY4Mg==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040682", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on resource specification 'tarArchiveOutputStream': resource specifications are implicitly final", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:28Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,42 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());\n+                        // Wrap the output file stream in streams that will tar and gzip everything\n+                        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY5MA==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040690", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on resource specification 'fileOutputStream': resource specifications are implicitly final", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:29Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,42 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY5NA==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040694", "bodyText": "Codacy found an issue: Overridable method 'setDownloading' called during object construction", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:30Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushPublisherConfig.java", "diffHunk": "@@ -42,6 +50,44 @@ public PushPublisherConfig() {\n \t\tsuper();\n \t}\n \n+    /**\n+     * Convenience constructor for generating a PP config from a bundle\n+     * \n+     * @param bundle\n+     */\n+    public PushPublisherConfig(final Bundle bundle) {\n+        super();\n+\n+        final PublisherAPI publisherAPI = PublisherAPI.getInstance();\n+\n+        final List<PublishQueueElement> tempBundleContents =\n+                        Try.of(() -> publisherAPI.getQueueElementsByBundleId(bundle.getId()))\n+                                        .onFailure(e -> Logger.warnAndDebug(PushPublisherConfig.class, e))\n+                                        .getOrElse(ImmutableList.of());\n+        final List<PublishQueueElement> assetsToPublish = new ArrayList<PublishQueueElement>();\n+        assetsToPublish.addAll(tempBundleContents);\n+\n+\n+        this.setDownloading(true);", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY5OA==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040698", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.*'", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:31Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "diffHunk": "@@ -88,7 +109,118 @@ private void publish(FileInputStream createCOntentFileInputStream) throws DotPub\n         final FormDataMultiPart multipart = mock(FormDataMultiPart.class);\n         when(multipart.getBodyParts()).thenReturn(list(bodyPart));\n \n-        final BundleResource bundleResource = new BundleResource();\n         bundleResource.uploadBundleSync(request, response, multipart);\n     }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true);\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private String insertPublishingBundle(final String userId, final Date publishDate)\n+            throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(userId);\n+        bundle.setPublishDate(publishDate);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * BasicAuth\n+     */\n+    private HttpServletRequest getHttpRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#generateBundle(HttpServletRequest, HttpServletResponse, AsyncResponse, GenerateBundleForm)}\n+     * When: Create a bundle and generate the tar.gz file of the given bundle.\n+     * Should: Generate the bundle without issues, 200.\n+     */\n+    @Test\n+    public void test_generateBundle_success() throws DotDataException, IOException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Create GenerateBundleForm\n+        final GenerateBundleForm bundleForm = new GenerateBundleForm.Builder().bundleId(bundleId).build();\n+\n+        //Call generate endpoint\n+        final AsyncResponse asyncResponse = new MockAsyncResponse((arg) -> {\n+\n+            final Response generateBundleResponse = (Response)arg;\n+            assertEquals(Status.OK.getStatusCode(), generateBundleResponse.getStatus());\n+            return true;\n+        }, arg -> {\n+            fail(\"Error generating bundle\");\n+            return true;\n+        });\n+\n+        bundleResource.generateBundle(getHttpRequest(),response,asyncResponse,bundleForm);\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_fileNotGenerated_return404() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),responseResource.getStatus());", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDcwMg==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040702", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'operation'", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:32Z", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;\n+        private @JsonProperty String filterKey = null;\n+        private @JsonProperty int operation = 0;", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDcwNw==", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040707", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.*'", "author": "dev-dotcms", "createdAt": "2020-10-08T22:10:33Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "diffHunk": "@@ -88,7 +109,118 @@ private void publish(FileInputStream createCOntentFileInputStream) throws DotPub\n         final FormDataMultiPart multipart = mock(FormDataMultiPart.class);\n         when(multipart.getBodyParts()).thenReturn(list(bodyPart));\n \n-        final BundleResource bundleResource = new BundleResource();\n         bundleResource.uploadBundleSync(request, response, multipart);\n     }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true);\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private String insertPublishingBundle(final String userId, final Date publishDate)\n+            throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(userId);\n+        bundle.setPublishDate(publishDate);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * BasicAuth\n+     */\n+    private HttpServletRequest getHttpRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#generateBundle(HttpServletRequest, HttpServletResponse, AsyncResponse, GenerateBundleForm)}\n+     * When: Create a bundle and generate the tar.gz file of the given bundle.\n+     * Should: Generate the bundle without issues, 200.\n+     */\n+    @Test\n+    public void test_generateBundle_success() throws DotDataException, IOException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Create GenerateBundleForm\n+        final GenerateBundleForm bundleForm = new GenerateBundleForm.Builder().bundleId(bundleId).build();\n+\n+        //Call generate endpoint\n+        final AsyncResponse asyncResponse = new MockAsyncResponse((arg) -> {\n+\n+            final Response generateBundleResponse = (Response)arg;\n+            assertEquals(Status.OK.getStatusCode(), generateBundleResponse.getStatus());\n+            return true;\n+        }, arg -> {\n+            fail(\"Error generating bundle\");\n+            return true;\n+        });\n+\n+        bundleResource.generateBundle(getHttpRequest(),response,asyncResponse,bundleForm);\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_fileNotGenerated_return404() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),responseResource.getStatus());\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, since the tar.gz has been generated should succeed.\n+     * Should: return 200 since the file has been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_success() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Generate bundle file\n+        final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+        bundle.setOperation(PushPublisherConfig.Operation.PUBLISH.ordinal());\n+        APILocator.getBundleAPI().generateTarGzipBundleFile(bundle);\n+\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());", "originalCommit": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}