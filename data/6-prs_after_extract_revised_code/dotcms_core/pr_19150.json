{"pr_number": 19150, "pr_title": "#19147 : The evaluation order in Vanity URLs is still being used by s\u2026", "pr_createdAt": "2020-08-24T21:28:06Z", "pr_url": "https://github.com/dotCMS/core/pull/19150", "timeline": [{"oid": "0f1438fd1494c2a54935b7e1647bcaf5f168c59f", "url": "https://github.com/dotCMS/core/commit/0f1438fd1494c2a54935b7e1647bcaf5f168c59f", "message": "#19147 : The evaluation order in Vanity URLs is still being used by several customers. The new version of the Vanity URL API was not setting the expected value for that. The API is now returning the Vanities in ascending order so that users can specify the appropriate way in which Vanities should match an incoming URL.", "committedDate": "2020-08-24T21:27:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA3NDM5Mw==", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476074393", "bodyText": "We should always append e.getMessage() to our message so the real root cause does not get eaten higher up.", "author": "wezell", "createdAt": "2020-08-25T02:22:09Z", "path": "dotCMS/src/main/java/com/dotcms/vanityurl/business/VanityUrlAPIImpl.java", "diffHunk": "@@ -125,22 +126,18 @@ public void populateAllVanityURLsCache() throws DotDataException {\n           vanityUrls.stream().map(vanity -> vanity.get(\"live_inode\").toString()).collect(Collectors.toList());\n       final List<Contentlet> contentlets = this.contentletAPI.findContentlets(vanityUrlInodes);\n \n-      return contentlets.stream().map(contentlet -> new CachedVanityUrl(this.fromContentlet(contentlet))).collect(Collectors.toList());\n+      return contentlets.stream().map(contentlet -> new CachedVanityUrl(this.fromContentlet(contentlet))).sorted().collect(Collectors.toList());\n \n     } catch (final Exception e) {\n       Logger.error(this,\n-          String.format(\"An error occurred when retrieving Vanity URLs: siteId=[%s], \" + \"languageId=[%s], includeSystemHost=[%s]\",\n+          String.format(\"An error occurred when retrieving Vanity URLs: siteId=[%s], languageId=[%s]\",", "originalCommit": "0f1438fd1494c2a54935b7e1647bcaf5f168c59f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "9741f441d0e107dc371195ee750e60d4504cd390", "url": "https://github.com/dotCMS/core/commit/9741f441d0e107dc371195ee750e60d4504cd390", "message": "#19147 adding tests", "committedDate": "2020-08-25T13:18:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMwMw==", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446303", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-08-25T13:26:17Z", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {\n+        final String baseUri = '/' + UUIDGenerator.shorty();\n+        final String site = defaultHost.getIdentifier();\n+        final int action = 200;\n+        final int numberOfTestVanities = 10;\n+        \n+        \n+        for (int i = numberOfTestVanities; i > 0; i--) {\n+            final String title = \"VanityURLOrder\" + i;\n+            final int randomOrder = new Random().nextInt(100);\n+            Contentlet vanity = filtersUtil.createVanityUrl(title, site, baseUri, baseUri,\n+                            action, randomOrder, defaultLanguage.getId());\n+            filtersUtil.publishVanityUrl(vanity);\n+        }\n+\n+\n+        // this list of CachedVanityUrl is ordered based on the order of the vanities - asc\n+        List<CachedVanityUrl> cachedVanities = vanityUrlAPI.findInDb(defaultHost, defaultLanguage)\n+                        .stream()\n+                        .filter(v -> v.forwardTo.equals(baseUri))\n+                        .collect(Collectors.toList());\n+\n+        // testing we have all the vanities we just saved\n+        assert(cachedVanities.size() == numberOfTestVanities);\n+\n+        \n+        // testing they have different order\n+        assert(cachedVanities.get(0).order < cachedVanities.get(numberOfTestVanities-1).order);", "originalCommit": "9741f441d0e107dc371195ee750e60d4504cd390", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMxMA==", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446310", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-08-25T13:26:18Z", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {", "originalCommit": "9741f441d0e107dc371195ee750e60d4504cd390", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMxOA==", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446318", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-08-25T13:26:19Z", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {\n+        final String baseUri = '/' + UUIDGenerator.shorty();\n+        final String site = defaultHost.getIdentifier();\n+        final int action = 200;\n+        final int numberOfTestVanities = 10;\n+        \n+        \n+        for (int i = numberOfTestVanities; i > 0; i--) {\n+            final String title = \"VanityURLOrder\" + i;\n+            final int randomOrder = new Random().nextInt(100);\n+            Contentlet vanity = filtersUtil.createVanityUrl(title, site, baseUri, baseUri,\n+                            action, randomOrder, defaultLanguage.getId());\n+            filtersUtil.publishVanityUrl(vanity);\n+        }\n+\n+\n+        // this list of CachedVanityUrl is ordered based on the order of the vanities - asc\n+        List<CachedVanityUrl> cachedVanities = vanityUrlAPI.findInDb(defaultHost, defaultLanguage)\n+                        .stream()\n+                        .filter(v -> v.forwardTo.equals(baseUri))\n+                        .collect(Collectors.toList());\n+\n+        // testing we have all the vanities we just saved\n+        assert(cachedVanities.size() == numberOfTestVanities);", "originalCommit": "9741f441d0e107dc371195ee750e60d4504cd390", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMzNA==", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446334", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-08-25T13:26:20Z", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {\n+        final String baseUri = '/' + UUIDGenerator.shorty();\n+        final String site = defaultHost.getIdentifier();\n+        final int action = 200;\n+        final int numberOfTestVanities = 10;\n+        \n+        \n+        for (int i = numberOfTestVanities; i > 0; i--) {\n+            final String title = \"VanityURLOrder\" + i;\n+            final int randomOrder = new Random().nextInt(100);\n+            Contentlet vanity = filtersUtil.createVanityUrl(title, site, baseUri, baseUri,\n+                            action, randomOrder, defaultLanguage.getId());\n+            filtersUtil.publishVanityUrl(vanity);\n+        }\n+\n+\n+        // this list of CachedVanityUrl is ordered based on the order of the vanities - asc\n+        List<CachedVanityUrl> cachedVanities = vanityUrlAPI.findInDb(defaultHost, defaultLanguage)\n+                        .stream()\n+                        .filter(v -> v.forwardTo.equals(baseUri))\n+                        .collect(Collectors.toList());\n+\n+        // testing we have all the vanities we just saved\n+        assert(cachedVanities.size() == numberOfTestVanities);\n+\n+        \n+        // testing they have different order\n+        assert(cachedVanities.get(0).order < cachedVanities.get(numberOfTestVanities-1).order);\n+        \n+\n+\n+        CachedVanityUrl previousCachedVanity = cachedVanities.get(0);\n+        \n+        // the vanities are in order, from lowest to highest\n+        for (final CachedVanityUrl cached : cachedVanities) {\n+            assert(cached.order >= previousCachedVanity.order);", "originalCommit": "9741f441d0e107dc371195ee750e60d4504cd390", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}