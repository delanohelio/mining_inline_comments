{"pr_number": 19551, "pr_title": "Taking into account the PageMode when pull related content", "pr_createdAt": "2020-11-04T19:47:20Z", "pr_url": "https://github.com/dotCMS/core/pull/19551", "timeline": [{"oid": "65fec36019f104da3573a9e540b21d352574e845", "url": "https://github.com/dotCMS/core/commit/65fec36019f104da3573a9e540b21d352574e845", "message": "Taking into account the PageMode when pull related content", "committedDate": "2020-11-04T19:44:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMTg4NA==", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517621884", "bodyText": "I would check if it is not null or empty list", "author": "jdotcms", "createdAt": "2020-11-04T20:47:20Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);", "originalCommit": "65fec36019f104da3573a9e540b21d352574e845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDUyMw==", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517660523", "bodyText": "done 9ed56d6#diff-fbb11290830742365067c6c4e761a23f3eef90d1e024037cbaa272100c134e61R365", "author": "freddyucv", "createdAt": "2020-11-04T22:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMTg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "9ed56d60337cd0089bc8c6b1562ecf5fcd027a50", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\nindex c825b83af6..307d4ab455 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\n\n@@ -342,6 +342,7 @@ public class ContentMap {\n \t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n \t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n \t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.filter(Objects::nonNull)\n \t\t\t\t\t.collect(Collectors.toList());\n \n \t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjAxNA==", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517622014", "bodyText": "is this ok", "author": "jdotcms", "createdAt": "2020-11-04T20:47:37Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn relatedContent;", "originalCommit": "65fec36019f104da3573a9e540b21d352574e845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDYzMA==", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517660630", "bodyText": "done 9ed56d6#diff-fbb11290830742365067c6c4e761a23f3eef90d1e024037cbaa272100c134e61R371", "author": "freddyucv", "createdAt": "2020-11-04T22:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "9ed56d60337cd0089bc8c6b1562ecf5fcd027a50", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\nindex c825b83af6..307d4ab455 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\n\n@@ -342,6 +342,7 @@ public class ContentMap {\n \t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n \t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n \t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.filter(Objects::nonNull)\n \t\t\t\t\t.collect(Collectors.toList());\n \n \t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjA5OQ==", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517622099", "bodyText": "you ca use Try.of", "author": "jdotcms", "createdAt": "2020-11-04T20:47:50Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn relatedContent;\n+\t\t}\n+\t}\n+\n+\tprivate boolean needLiveVersion(final Contentlet contentlet) {\n+\t\ttry {\n+\t\t\treturn EDIT_OR_PREVIEW_MODE || !EDIT_OR_PREVIEW_MODE && contentlet.hasLiveVersion();", "originalCommit": "65fec36019f104da3573a9e540b21d352574e845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDc2NQ==", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517660765", "bodyText": "done 9ed56d6#diff-fbb11290830742365067c6c4e761a23f3eef90d1e024037cbaa272100c134e61R376", "author": "freddyucv", "createdAt": "2020-11-04T22:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ed56d60337cd0089bc8c6b1562ecf5fcd027a50", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\nindex c825b83af6..307d4ab455 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java\n\n@@ -342,6 +342,7 @@ public class ContentMap {\n \t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n \t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n \t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.filter(Objects::nonNull)\n \t\t\t\t\t.collect(Collectors.toList());\n \n \t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n"}}, {"oid": "9ed56d60337cd0089bc8c6b1562ecf5fcd027a50", "url": "https://github.com/dotCMS/core/commit/9ed56d60337cd0089bc8c6b1562ecf5fcd027a50", "message": "refactoring", "committedDate": "2020-11-04T22:09:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3NDU4Ng==", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517674586", "bodyText": "Is it better to return Optional?", "author": "dsilvam", "createdAt": "2020-11-04T22:43:02Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,47 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet> contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets != null && !contentlets.isEmpty() ? contentlets.get(0) : null;\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn null;", "originalCommit": "9ed56d60337cd0089bc8c6b1562ecf5fcd027a50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "840c9ea00f792e7dffa16e281d2fa9d9bab982ae", "url": "https://github.com/dotCMS/core/commit/840c9ea00f792e7dffa16e281d2fa9d9bab982ae", "message": "Removing unused import", "committedDate": "2020-11-05T16:23:54Z", "type": "commit"}, {"oid": "a885e7c966e5d0f51982d9223b8877b61e301686", "url": "https://github.com/dotCMS/core/commit/a885e7c966e5d0f51982d9223b8877b61e301686", "message": "Merge remote-tracking branch 'origin/master' into issue-19044-Unpublished-related-content-appearing-in-Preview-Mode-/-Live-mode-", "committedDate": "2020-11-09T17:13:32Z", "type": "commit"}, {"oid": "b45a686c78849e0fdc89fb7e78d58e13fdb31236", "url": "https://github.com/dotCMS/core/commit/b45a686c78849e0fdc89fb7e78d58e13fdb31236", "message": "Fixing", "committedDate": "2020-11-09T21:08:23Z", "type": "commit"}, {"oid": "18f881eb1cb77235bb450c9d26ad44a2191a3d9c", "url": "https://github.com/dotCMS/core/commit/18f881eb1cb77235bb450c9d26ad44a2191a3d9c", "message": "Fixing", "committedDate": "2020-11-09T22:46:24Z", "type": "commit"}]}