{"pr_number": 17859, "pr_title": "Issue 16684 vanity url forward to url map pattern results in 404", "pr_createdAt": "2020-01-17T17:25:12Z", "pr_url": "https://github.com/dotCMS/core/pull/17859", "timeline": [{"oid": "ec61b016f3730aec79113f61b9f98f83b760783f", "url": "https://github.com/dotCMS/core/commit/ec61b016f3730aec79113f61b9f98f83b760783f", "message": "using HTMLPageAssetRenderedAPI into VelocityServlet", "committedDate": "2019-12-30T18:56:40Z", "type": "commit"}, {"oid": "e0f22e9f54ad25e484f40b61ddbf48cc53a8a9b4", "url": "https://github.com/dotCMS/core/commit/e0f22e9f54ad25e484f40b61ddbf48cc53a8a9b4", "message": "Fixing error when navigate between page into edit page", "committedDate": "2019-12-30T20:31:11Z", "type": "commit"}, {"oid": "5f414b9974908ab816e654cce9617a1d18d30da6", "url": "https://github.com/dotCMS/core/commit/5f414b9974908ab816e654cce9617a1d18d30da6", "message": "Fixing test", "committedDate": "2020-01-02T18:23:53Z", "type": "commit"}, {"oid": "97637cf4847fa9368ed67f4258a71bf93d282b0f", "url": "https://github.com/dotCMS/core/commit/97637cf4847fa9368ed67f4258a71bf93d282b0f", "message": "Merge remote-tracking branch 'origin/master' into issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404", "committedDate": "2020-01-09T20:07:00Z", "type": "commit"}, {"oid": "e414190c50192ae769852e9825b3359c97bc84a2", "url": "https://github.com/dotCMS/core/commit/e414190c50192ae769852e9825b3359c97bc84a2", "message": "Merge remote-tracking branch 'origin/master' into issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404", "committedDate": "2020-01-15T12:45:11Z", "type": "commit"}, {"oid": "4e2c42eb51b8649bf8c3a778e592d57bad6e9fc1", "url": "https://github.com/dotCMS/core/commit/4e2c42eb51b8649bf8c3a778e592d57bad6e9fc1", "message": "pass the right PageMode through", "committedDate": "2020-01-15T14:00:18Z", "type": "commit"}, {"oid": "3ac725309e39a8c8d8a41251b2a472c26b469e32", "url": "https://github.com/dotCMS/core/commit/3ac725309e39a8c8d8a41251b2a472c26b469e32", "message": "removing URLMapFilter", "committedDate": "2020-01-15T14:01:33Z", "type": "commit"}, {"oid": "2bd7c1b49c8434be20e092c66ec6aa90e0c2ded6", "url": "https://github.com/dotCMS/core/commit/2bd7c1b49c8434be20e092c66ec6aa90e0c2ded6", "message": "refactoring", "committedDate": "2020-01-15T18:01:15Z", "type": "commit"}, {"oid": "d0a81083956f5439b2f706c798d4ca8e7af35f70", "url": "https://github.com/dotCMS/core/commit/d0a81083956f5439b2f706c798d4ca8e7af35f70", "message": "refactoring", "committedDate": "2020-01-15T18:09:01Z", "type": "commit"}, {"oid": "37af6ebf8c993360f29789139e28f9ab9bb356e2", "url": "https://github.com/dotCMS/core/commit/37af6ebf8c993360f29789139e28f9ab9bb356e2", "message": "refactoring", "committedDate": "2020-01-16T18:27:35Z", "type": "commit"}, {"oid": "a3c1563cc02192977dd725e61d28c52254f6abde", "url": "https://github.com/dotCMS/core/commit/a3c1563cc02192977dd725e61d28c52254f6abde", "message": "testing", "committedDate": "2020-01-17T17:05:29Z", "type": "commit"}, {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507", "url": "https://github.com/dotCMS/core/commit/b94e4277fac4d115ca9b3bad653f778f2af92507", "message": "uncommenting code", "committedDate": "2020-01-17T17:07:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1ODY1Mw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368058653", "bodyText": "Shouldn't we keep the former constructor for backward compatibility and deprecate it if necessary?", "author": "nollymar", "createdAt": "2020-01-17T17:47:37Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityAdminMode.java", "diffHunk": "@@ -13,9 +14,9 @@\n  */\n public class VelocityAdminMode extends VelocityLiveMode {\n \n-    public VelocityAdminMode(final HttpServletRequest request, final HttpServletResponse response, final String uri,\n+    public VelocityAdminMode(final HttpServletRequest request, final HttpServletResponse response, final IHTMLPage htmlPage,", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MTc2OA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368071768", "bodyText": "agree", "author": "jdotcms", "createdAt": "2020-01-17T18:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1ODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3Njk1Nw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368076957", "bodyText": "100% agreed. Specially true if a Hotfix Plugin needs to be created for Support.", "author": "jcastro-dotcms", "createdAt": "2020-01-17T18:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1ODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNTA2MA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368135060", "bodyText": "done ec40455", "author": "freddyucv", "createdAt": "2020-01-17T21:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1ODY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ec404552260c00230d3cce3ac019d69c6a6cea57", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityAdminMode.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityAdminMode.java\nindex 11ac81ed5a..500bea725b 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityAdminMode.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityAdminMode.java\n\n@@ -14,7 +15,17 @@ import javax.servlet.http.HttpSession;\n  */\n public class VelocityAdminMode extends VelocityLiveMode {\n \n-    public VelocityAdminMode(final HttpServletRequest request, final HttpServletResponse response, final IHTMLPage htmlPage,\n+    @Deprecated\n+    public VelocityAdminMode(final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        this(\n+                request,\n+                response,\n+                VelocityModeHandler.getHtmlPageFromURI(PageMode.get(request), request, response, uri, host),\n+                host\n+        );\n+    }\n+\n+    protected VelocityAdminMode(final HttpServletRequest request, final HttpServletResponse response, final IHTMLPage htmlPage,\n                              final Host host) {\n         super(request, response, htmlPage, host);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTE3Nw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368059177", "bodyText": "same here", "author": "nollymar", "createdAt": "2020-01-17T17:48:58Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityEditMode.java", "diffHunk": "@@ -23,46 +23,28 @@\n \n public class VelocityEditMode extends VelocityModeHandler {\n \n-    protected final HttpServletRequest request;\n-    protected final HttpServletResponse response;\n-    private static final PageMode mode = PageMode.EDIT_MODE;\n-    protected final String uri;\n-    private final Host host;\n     private final User user;\n     private final static String REORDER_MENU_URL=\"/c/portal/layout?p_l_id={0}&p_p_id=site-browser&p_p_action=1&p_p_state=maximized&_site_browser_struts_action=%2Fext%2Ffolders%2Forder_menu\";\n-    \n-    public VelocityEditMode(HttpServletRequest request, HttpServletResponse response, String uri, Host host) {\n-        this.request = request;\n-        this.response = response;\n-        this.uri = uri;\n-        this.host = host;\n-        this.user = WebAPILocator.getUserWebAPI().getUser(request);\n-    }\n \n-    public VelocityEditMode(HttpServletRequest request, HttpServletResponse response) {", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MTkwNA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368071904", "bodyText": "agree again", "author": "jdotcms", "createdAt": "2020-01-17T18:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNTEwMw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368135103", "bodyText": "done ec40455#diff-faba8e2cc585b6538a2c9ac382e5dfa6R30", "author": "freddyucv", "createdAt": "2020-01-17T21:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ec404552260c00230d3cce3ac019d69c6a6cea57", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityEditMode.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityEditMode.java\nindex 6c2893c94a..e7f1b71c1d 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityEditMode.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityEditMode.java\n\n@@ -26,7 +26,17 @@ public class VelocityEditMode extends VelocityModeHandler {\n     private final User user;\n     private final static String REORDER_MENU_URL=\"/c/portal/layout?p_l_id={0}&p_p_id=site-browser&p_p_action=1&p_p_state=maximized&_site_browser_struts_action=%2Fext%2Ffolders%2Forder_menu\";\n \n-    public VelocityEditMode(\n+    @Deprecated\n+    public VelocityEditMode(final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        this(\n+                request,\n+                response,\n+                VelocityModeHandler.getHtmlPageFromURI(PageMode.get(request), request, response, uri, host),\n+                host\n+        );\n+    }\n+\n+    protected VelocityEditMode(\n             final HttpServletRequest request,\n             final HttpServletResponse response,\n             final IHTMLPage htmlPage,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTMyNg==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368059326", "bodyText": "same here", "author": "nollymar", "createdAt": "2020-01-17T17:49:24Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -35,29 +35,16 @@\n import java.util.Optional;\n \n public class VelocityLiveMode extends VelocityModeHandler {\n-\n-\n-\n-    private final HttpServletRequest request;\n-    private final HttpServletResponse response;\n-    private static final PageMode mode = PageMode.LIVE;\n-    private final String uri;\n-    private final Host host;\n-\n-\n-\n-    public VelocityLiveMode(HttpServletRequest request, HttpServletResponse response, String uri, Host host) {", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNTQzNA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368135434", "bodyText": "done ec40455#diff-b418f48462e78c28b7053d80f7bc6ed5R40", "author": "freddyucv", "createdAt": "2020-01-17T21:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "ec404552260c00230d3cce3ac019d69c6a6cea57", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java\nindex 77e3709b36..5803873f26 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java\n\n@@ -35,7 +35,18 @@ import java.io.*;\n import java.util.Optional;\n \n public class VelocityLiveMode extends VelocityModeHandler {\n-    public VelocityLiveMode(\n+\n+    @Deprecated\n+    public VelocityLiveMode(final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        this(\n+                request,\n+                response,\n+                VelocityModeHandler.getHtmlPageFromURI(PageMode.get(request), request, response, uri, host),\n+                host\n+        );\n+    }\n+\n+    protected VelocityLiveMode(\n             final HttpServletRequest request,\n             final HttpServletResponse response,\n             final IHTMLPage htmlPage,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2Mzk2Ng==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368063966", "bodyText": "is it worth to add a Log.debug here? warning?", "author": "nollymar", "createdAt": "2020-01-17T18:01:11Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java", "diffHunk": "@@ -67,13 +88,35 @@ public final String eval() {\n             throw new DotRuntimeException(e);\n         }\n     }\n-    \n-    public static final VelocityModeHandler modeHandler(PageMode mode, HttpServletRequest request, HttpServletResponse response, String uri, Host host) {\n-        return pageModeVelocityMap.get(mode).apply(request, response, uri, host);\n+\n+    public static final VelocityModeHandler modeHandler(final PageMode mode, final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        // Find the current language\n+        final long langId = WebAPILocator.getLanguageWebAPI().getLanguage(request).getId();\n+\n+        try {\n+            // now we check identifier cache first (which DOES NOT have a 404 cache )\n+            final Identifier id = APILocator.getIdentifierAPI().find(host, uri);\n+\n+            final IHTMLPage htmlPage = APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n+                    APILocator.systemUser(), mode.respectAnonPerms);\n+\n+            return pageModeVelocityMap.get(mode).apply(request, response, htmlPage, host);\n+        } catch (DotDataException | DotSecurityException e) {\n+            throw new DotRuntimeException(e);", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec404552260c00230d3cce3ac019d69c6a6cea57", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java\nindex 688452fdba..07bef3ed08 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java\n\n@@ -91,20 +108,23 @@ public abstract class VelocityModeHandler {\n \n     public static final VelocityModeHandler modeHandler(final PageMode mode, final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n         // Find the current language\n+        final IHTMLPage htmlPage= getHtmlPageFromURI(mode, request, response, uri, host);\n+        return pageModeVelocityMap.get(mode).apply(request, response, htmlPage, host);\n+    }\n+\n+    protected static IHTMLPage getHtmlPageFromURI(PageMode mode, HttpServletRequest request, HttpServletResponse response, String uri, Host host) {\n         final long langId = WebAPILocator.getLanguageWebAPI().getLanguage(request).getId();\n \n         try {\n             // now we check identifier cache first (which DOES NOT have a 404 cache )\n             final Identifier id = APILocator.getIdentifierAPI().find(host, uri);\n \n-            final IHTMLPage htmlPage = APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n+            return APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n                     APILocator.systemUser(), mode.respectAnonPerms);\n \n-            return pageModeVelocityMap.get(mode).apply(request, response, htmlPage, host);\n         } catch (DotDataException | DotSecurityException e) {\n             throw new DotRuntimeException(e);\n         }\n-\n     }\n \n     public static final VelocityModeHandler modeHandler(final IHTMLPage htmlPage,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDI1Nw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368064257", "bodyText": "The constructor signature changed here too", "author": "nollymar", "createdAt": "2020-01-17T18:01:52Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityNavigateEditMode.java", "diffHunk": "@@ -42,20 +40,17 @@\n                 \"window.top.document.dispatchEvent(customEvent);\" +\n             \"</script>\";\n \n-    public VelocityNavigateEditMode(final HttpServletRequest request,\n-                                    final HttpServletResponse response,\n-                                    final String uri,\n-                                    final Host host) {\n-        super();\n-        this.request = request;\n-        this.response = response;\n-        this.uri = uri;\n-        this.host = host;\n-        this.user = WebAPILocator.getUserWebAPI().getUser(request);\n-    }\n \n-    public VelocityNavigateEditMode(HttpServletRequest request, HttpServletResponse response) {\n-        this(request, response, request.getRequestURI(), hostWebAPI.getCurrentHostNoThrow(request));\n+    public VelocityNavigateEditMode(", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NDQyMw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368074423", "bodyText": "yeah you have to try to keep the backwards compatibility, since dotcms is a framework", "author": "jdotcms", "createdAt": "2020-01-17T18:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNTUzOA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368135538", "bodyText": "done ec40455#diff-8aaa91d048a2b9c6c8fac2ca7dc1c044R60", "author": "freddyucv", "createdAt": "2020-01-17T21:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ec404552260c00230d3cce3ac019d69c6a6cea57", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityNavigateEditMode.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityNavigateEditMode.java\nindex 2bf49cc2b1..a8829d5a34 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityNavigateEditMode.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityNavigateEditMode.java\n\n@@ -41,7 +41,17 @@ public class VelocityNavigateEditMode  extends VelocityModeHandler {\n             \"</script>\";\n \n \n-    public VelocityNavigateEditMode(\n+    @Deprecated\n+    public VelocityNavigateEditMode(final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        this(\n+                request,\n+                response,\n+                VelocityModeHandler.getHtmlPageFromURI(PageMode.get(request), request, response, uri, host),\n+                host\n+        );\n+    }\n+\n+    protected VelocityNavigateEditMode(\n             final HttpServletRequest request,\n             final HttpServletResponse response,\n             final IHTMLPage htmlPage,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDg4Ng==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368064886", "bodyText": "is it worth to add a Log.debug ? or warning?", "author": "nollymar", "createdAt": "2020-01-17T18:03:24Z", "path": "dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java", "diffHunk": "@@ -530,4 +532,14 @@ public String getQueryStringFromUri(final String uri) {\n \t\t\t\turi.substring(indexOf+1):\n \t\t\t\tnull;\n \t}\n+\n+\tpublic static String getCurrentURI(final HttpServletRequest request)  {\n+\t\ttry {\n+\t\t\treturn URLDecoder.decode((request.getAttribute(Constants.CMS_FILTER_URI_OVERRIDE) != null)\n+\t\t\t\t\t? (String) request.getAttribute(Constants.CMS_FILTER_URI_OVERRIDE)\n+\t\t\t\t\t: request.getRequestURI(), \"UTF-8\");\n+\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tthrow new DotRuntimeException(e);", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNTY1OA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368135658", "bodyText": "done c99f44a#diff-b01fee3e8841e6997654dbe68e5baf2dR542", "author": "freddyucv", "createdAt": "2020-01-17T21:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c99f44a7598559801ecaf90b4041c07a374915e6", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java b/dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java\nindex ba4635a204..ac6d145790 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java\n\n@@ -539,6 +539,7 @@ public class CMSUrlUtil {\n \t\t\t\t\t? (String) request.getAttribute(Constants.CMS_FILTER_URI_OVERRIDE)\n \t\t\t\t\t: request.getRequestURI(), \"UTF-8\");\n \t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tLogger.debug(CMSUrlUtil.class, e.getMessage(), e);\n \t\t\tthrow new DotRuntimeException(e);\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTA5NA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368065094", "bodyText": "Log.debug or warning?", "author": "nollymar", "createdAt": "2020-01-17T18:03:54Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -232,35 +245,43 @@ public String getPageHtml(\n                 throws DotSecurityException, DotDataException {\n \n         final Host host = this.hostWebAPI.getCurrentHost(request, context.getUser());\n-        final IHTMLPage page = getHtmlPageAsset(context, host, request).getHTMLPage();\n+        final HTMLPageUrl htmlPageUrl = getHtmlPageAsset(context, host, request);\n+        final IHTMLPage page = htmlPageUrl.getHTMLPage();\n \n         return new HTMLPageAssetRenderedBuilder()\n                 .setHtmlPageAsset(page)\n                 .setUser(context.getUser())\n                 .setRequest(request)\n                 .setResponse(response)\n                 .setSite(host)\n-                .getPageHTML();\n+                .setURLMapper(htmlPageUrl.pageUrlMapper)\n+                .setLive(htmlPageUrl.hasLive())\n+                .getPageHTML(context.getPageMode());\n     }\n \n-    private HTMLPageUrl getHtmlPageAsset(\n-            final PageContext context,\n-            final Host host,\n-            final HttpServletRequest request)\n-                throws DotDataException, DotSecurityException {\n+    private HTMLPageUrl getHtmlPageAsset(final PageContext context, final Host host, final HttpServletRequest request)\n+            throws DotDataException, DotSecurityException {\n \n         HTMLPageUrl htmlPageUrl = null;\n-        IHTMLPage htmlPageAsset = findPageByContext(host, context);\n+        for (final SearchPageFunction pageSearcher : pageSearchers) {\n+            final Optional<HTMLPageUrl> optional = pageSearcher.search(context, host, request);\n \n-        if (htmlPageAsset == null){\n-            htmlPageUrl   = findByURLMap(context, host, request);\n-            htmlPageAsset = getPageByUri(context.getPageMode(), host, htmlPageUrl.getPageUrl());\n-        } else {\n-            htmlPageUrl   = new HTMLPageUrl(htmlPageAsset);\n+            if (optional.isPresent()) {\n+                htmlPageUrl = optional.get();\n+                break;\n+            }\n+        }\n+\n+        if(htmlPageUrl == null ){\n+            throw new HTMLPageAssetNotFoundException(context.getPageUri());", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MDY1Nw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368080657", "bodyText": "+1", "author": "jdotcms", "createdAt": "2020-01-17T18:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNTc2NQ==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368135765", "bodyText": "really here the exception is thrown", "author": "freddyucv", "createdAt": "2020-01-17T21:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "6c3aa905d0bae96a4291565839567b2df14b5f28", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\nindex 3390591cbf..b5f6f2e6bc 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n\n@@ -281,7 +285,9 @@ public class HTMLPageAssetRenderedAPIImpl implements HTMLPageAssetRenderedAPI {\n         return htmlPageUrl;\n     }\n \n-    private void checkPagePermission(PageContext context, IHTMLPage htmlPageAsset) throws DotDataException, DotSecurityException {\n+    private void checkPagePermission(final PageContext context, final IHTMLPage htmlPageAsset)\n+            throws DotDataException, DotSecurityException {\n+        \n         final boolean doesUserHavePermission = this.permissionAPI.doesUserHavePermission(\n                 htmlPageAsset,\n                 PermissionLevel.READ.getType(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTU1MQ==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368065551", "bodyText": "The constructor signature was modified here too", "author": "nollymar", "createdAt": "2020-01-17T18:05:10Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,25 +367,33 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final Host host, final String id)\n+            throws DotDataException, DotSecurityException {\n+\n+        final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n+        final Language language = this.getCurrentLanguage(request);\n+\n+        return APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n+                mode.respectAnonPerms);\n+    }\n+\n     private Language getCurrentLanguage(final HttpServletRequest request) {\n         return request != null ? this.languageWebAPI.getLanguage(request) : this.languageAPI.getDefaultLanguage();\n     }\n \n     public class HTMLPageUrl {\n-        private String pageUrl;\n         private String pageUrlMapper;\n         private HTMLPageAsset htmlPage;\n         private Boolean hasLive = null;\n \n-        public HTMLPageUrl(final String pageUrl, final String pageUrlMapper, final Boolean hasLive) {\n-            this.pageUrl = pageUrl;\n+        public HTMLPageUrl(final HTMLPageAsset htmlPage, final String pageUrlMapper, final Boolean hasLive) {", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MjgxMA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368082810", "bodyText": "agree", "author": "jdotcms", "createdAt": "2020-01-17T18:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzOTM1Ng==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368139356", "bodyText": "this a internal class, however I am going to change the method scope to private", "author": "freddyucv", "createdAt": "2020-01-17T21:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6cfbce90c8410568432e15d2f7a4052e5177972a", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\nindex 3390591cbf..85fe63e21e 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n\n@@ -373,7 +373,7 @@ public class HTMLPageAssetRenderedAPIImpl implements HTMLPageAssetRenderedAPI {\n         final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n         final Language language = this.getCurrentLanguage(request);\n \n-        return APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n+        return this.htmlPageAssetAPI.findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n                 mode.respectAnonPerms);\n     }\n \n"}}, {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094", "url": "https://github.com/dotCMS/core/commit/a32aa20439c5d3d69ed96b02e7da57654c6e0094", "message": "removing URLMapFilter", "committedDate": "2020-01-17T18:05:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjQyNA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368066424", "bodyText": "As these changes are made for a minor release, shouldn't this class be deprecated instead of deleted ?", "author": "nollymar", "createdAt": "2020-01-17T18:07:27Z", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/filters/URLMapFilter.java", "diffHunk": "@@ -1,156 +0,0 @@\n-/*", "originalCommit": "b94e4277fac4d115ca9b3bad653f778f2af92507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NzkwNA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368077904", "bodyText": "I agree, is @wezell aware about this change?", "author": "jdotcms", "createdAt": "2020-01-17T18:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzOTYyMA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368139620", "bodyText": "this is a filter so I don't know if this is needly", "author": "freddyucv", "createdAt": "2020-01-17T21:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NTQ4OQ==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368165489", "bodyText": "@nollymar we are moving away from the idea of major and minor releases - I think it is ok to delete.", "author": "wezell", "createdAt": "2020-01-17T22:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjQyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NzAxNw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368077017", "bodyText": "this is not bad, but if you have the request you can use more straight-forward solution", "author": "jdotcms", "createdAt": "2020-01-17T18:33:42Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -62,10 +64,19 @@ protected final void service(HttpServletRequest req, HttpServletResponse respons\n                 return;\n             }\n \n-            request.setRequestUri(uri);\n             final PageMode mode = PageMode.getWithNavigateMode(request);\n             try {\n-                VelocityModeHandler.modeHandler(mode, request, response).serve();\n+                final String pageHtml = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                        PageContextBuilder.builder()\n+                                .setPageUri(uri)\n+                                .setPageMode(mode)\n+                                .setUser(APILocator.getLoginServiceAPI().getLoggedInUser())", "originalCommit": "a32aa20439c5d3d69ed96b02e7da57654c6e0094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MDA2Mg==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368140062", "bodyText": "done 2e79300", "author": "freddyucv", "createdAt": "2020-01-17T21:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NzAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2e79300b85c7d196f00505d35066c610a415f580", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java\nindex 7b19e88fce..be864aa500 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java\n\n@@ -70,7 +71,7 @@ public class VelocityServlet extends HttpServlet {\n                         PageContextBuilder.builder()\n                                 .setPageUri(uri)\n                                 .setPageMode(mode)\n-                                .setUser(APILocator.getLoginServiceAPI().getLoggedInUser())\n+                                .setUser(WebAPILocator.getUserWebAPI().getLoggedInUser(request))\n                                 .setPageMode(mode)\n                                 .build(),\n                         request,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3ODkxMQ==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368078911", "bodyText": "Add doc", "author": "jdotcms", "createdAt": "2020-01-17T18:38:19Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -48,6 +50,18 @@\n     private final URLMapAPIImpl urlMapAPIImpl;\n     private final LanguageWebAPI languageWebAPI;\n \n+    @FunctionalInterface", "originalCommit": "a32aa20439c5d3d69ed96b02e7da57654c6e0094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MDIzOA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368140238", "bodyText": "done 2e79300", "author": "freddyucv", "createdAt": "2020-01-17T21:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3ODkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8d0ac8874bfdf61503d97d02689d958d2fa12d4", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\nindex 3390591cbf..a980071fe4 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n\n@@ -51,13 +51,17 @@ public class HTMLPageAssetRenderedAPIImpl implements HTMLPageAssetRenderedAPI {\n     private final LanguageWebAPI languageWebAPI;\n \n     @FunctionalInterface\n+    /**\n+     * It is a function to search a {@link HTMLPageAsset}, if the page is resolve using URL MAP then the URL Map\n+     * information is returned too\n+     */\n     private interface SearchPageFunction {\n         Optional<HTMLPageUrl> search(final PageContext context,\n                              final Host host,\n                              final HttpServletRequest request) throws DotDataException, DotSecurityException;\n     }\n \n-    final List<SearchPageFunction> pageSearchers = list(\n+    private final List<SearchPageFunction> pageSearchers = list(\n             (context, host, request) -> findPageByContext(host, context),\n             (context, host, request) -> findByURLMap(context, host, request)\n     );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MDEzNA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368080134", "bodyText": "if you are not planning to expose this, you can set to private and static to get init just once", "author": "jdotcms", "createdAt": "2020-01-17T18:41:33Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -48,6 +50,18 @@\n     private final URLMapAPIImpl urlMapAPIImpl;\n     private final LanguageWebAPI languageWebAPI;\n \n+    @FunctionalInterface\n+    private interface SearchPageFunction {\n+        Optional<HTMLPageUrl> search(final PageContext context,\n+                             final Host host,\n+                             final HttpServletRequest request) throws DotDataException, DotSecurityException;\n+    }\n+\n+    final List<SearchPageFunction> pageSearchers = list(", "originalCommit": "a32aa20439c5d3d69ed96b02e7da57654c6e0094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzMDE1Mg==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368130152", "bodyText": "I have to do several change to change it to static, I'll send it in another PR", "author": "freddyucv", "createdAt": "2020-01-17T20:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MDEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MDQ0Mg==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368140442", "bodyText": "just private for now\nd8d0ac8#diff-051d49b06feb0c7462b349b6b61988a8R58", "author": "freddyucv", "createdAt": "2020-01-17T21:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MDEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "d8d0ac8874bfdf61503d97d02689d958d2fa12d4", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\nindex 3390591cbf..a980071fe4 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n\n@@ -51,13 +51,17 @@ public class HTMLPageAssetRenderedAPIImpl implements HTMLPageAssetRenderedAPI {\n     private final LanguageWebAPI languageWebAPI;\n \n     @FunctionalInterface\n+    /**\n+     * It is a function to search a {@link HTMLPageAsset}, if the page is resolve using URL MAP then the URL Map\n+     * information is returned too\n+     */\n     private interface SearchPageFunction {\n         Optional<HTMLPageUrl> search(final PageContext context,\n                              final Host host,\n                              final HttpServletRequest request) throws DotDataException, DotSecurityException;\n     }\n \n-    final List<SearchPageFunction> pageSearchers = list(\n+    private final List<SearchPageFunction> pageSearchers = list(\n             (context, host, request) -> findPageByContext(host, context),\n             (context, host, request) -> findByURLMap(context, host, request)\n     );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MjUxNw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368082517", "bodyText": "what happen if the request is null?", "author": "jdotcms", "createdAt": "2020-01-17T18:47:37Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,25 +367,33 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final Host host, final String id)\n+            throws DotDataException, DotSecurityException {\n+\n+        final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();", "originalCommit": "a32aa20439c5d3d69ed96b02e7da57654c6e0094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MDU0Nw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368140547", "bodyText": "done: d8d0ac8#diff-051d49b06feb0c7462b349b6b61988a8R378", "author": "freddyucv", "createdAt": "2020-01-17T21:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MjUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "6cfbce90c8410568432e15d2f7a4052e5177972a", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\nindex 3390591cbf..85fe63e21e 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n\n@@ -373,7 +373,7 @@ public class HTMLPageAssetRenderedAPIImpl implements HTMLPageAssetRenderedAPI {\n         final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n         final Language language = this.getCurrentLanguage(request);\n \n-        return APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n+        return this.htmlPageAssetAPI.findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n                 mode.respectAnonPerms);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MzU1Mw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368083553", "bodyText": "In general this Builder IMO looks such as API or Service, it very smart to be just a builder to create a bean. It is always confusing", "author": "jdotcms", "createdAt": "2020-01-17T18:50:07Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/HTMLPageAssetRenderedBuilder.java", "diffHunk": "@@ -186,16 +186,21 @@ public PageView build(final boolean rendered, final PageMode mode) throws DotDat\n         return Optional.ofNullable(contentlet);", "originalCommit": "a32aa20439c5d3d69ed96b02e7da57654c6e0094", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f3d1a924414cb79755fde511a0f7c60660d0bb9", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/HTMLPageAssetRenderedBuilder.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/HTMLPageAssetRenderedBuilder.java\nindex 871a29c2b3..5e82805230 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/HTMLPageAssetRenderedBuilder.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/HTMLPageAssetRenderedBuilder.java\n\n@@ -186,7 +186,7 @@ public class HTMLPageAssetRenderedBuilder {\n         return Optional.ofNullable(contentlet);\n     }\n \n-    public String getPageHTML() throws DotSecurityException, DotDataException {\n+    public String getPageHTML() throws DotSecurityException {\n \n         final PageMode mode = PageMode.get(request);\n \n"}}, {"oid": "6cfbce90c8410568432e15d2f7a4052e5177972a", "url": "https://github.com/dotCMS/core/commit/6cfbce90c8410568432e15d2f7a4052e5177972a", "message": "testing", "committedDate": "2020-01-17T20:09:24Z", "type": "commit"}, {"oid": "ec404552260c00230d3cce3ac019d69c6a6cea57", "url": "https://github.com/dotCMS/core/commit/ec404552260c00230d3cce3ac019d69c6a6cea57", "message": "#16684 keepping the former constructor VelocityHandlerMode for backward compatibility and deprecate", "committedDate": "2020-01-17T20:28:41Z", "type": "commit"}, {"oid": "c99f44a7598559801ecaf90b4041c07a374915e6", "url": "https://github.com/dotCMS/core/commit/c99f44a7598559801ecaf90b4041c07a374915e6", "message": "adding logger", "committedDate": "2020-01-17T20:32:57Z", "type": "commit"}, {"oid": "2e79300b85c7d196f00505d35066c610a415f580", "url": "https://github.com/dotCMS/core/commit/2e79300b85c7d196f00505d35066c610a415f580", "message": "Using UserWebAPI instead UserAPI", "committedDate": "2020-01-17T20:36:44Z", "type": "commit"}, {"oid": "d8d0ac8874bfdf61503d97d02689d958d2fa12d4", "url": "https://github.com/dotCMS/core/commit/d8d0ac8874bfdf61503d97d02689d958d2fa12d4", "message": "doc and refactoring", "committedDate": "2020-01-17T20:50:43Z", "type": "commit"}, {"oid": "6c3aa905d0bae96a4291565839567b2df14b5f28", "url": "https://github.com/dotCMS/core/commit/6c3aa905d0bae96a4291565839567b2df14b5f28", "message": "codacy refactoring", "committedDate": "2020-01-17T20:59:16Z", "type": "commit"}, {"oid": "5d9e271aacc9a348eca1ca4789f00ab35ea68c8e", "url": "https://github.com/dotCMS/core/commit/5d9e271aacc9a348eca1ca4789f00ab35ea68c8e", "message": "Merge remote-tracking branch 'origin/master' into issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404", "committedDate": "2020-01-21T14:16:21Z", "type": "commit"}, {"oid": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10", "url": "https://github.com/dotCMS/core/commit/2ae94ad84aa7b886e7c8522711f8555b4f6f0d10", "message": "refactoring", "committedDate": "2020-01-21T14:38:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA0ODE5Mw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369048193", "bodyText": "I would always use boolean here", "author": "wezell", "createdAt": "2020-01-21T14:55:05Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -98,15 +96,9 @@ public final void serve(final OutputStream out) throws DotDataException, IOExcep\n \n \n             User user = getUser();\n-\n+            final String uri = CMSUrlUtil.getCurrentURI(request);\n             Logger.debug(this.getClass(), \"Page Permissions for URI=\" + uri);\n \n-\n-\n-            IHTMLPage htmlPage = APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n-                    APILocator.systemUser(), mode.respectAnonPerms);\n-\n-\n             // Verify and handle the case for unauthorized access of this contentlet\n             Boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);", "originalCommit": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMTM1NA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369231354", "bodyText": "done 0f3d1a9#diff-b418f48462e78c28b7053d80f7bc6ed5R103", "author": "freddyucv", "createdAt": "2020-01-21T20:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA0ODE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0f3d1a924414cb79755fde511a0f7c60660d0bb9", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java\nindex b93dee8638..ab4edbafe4 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java\n\n@@ -100,7 +100,7 @@ public class VelocityLiveMode extends VelocityModeHandler {\n             Logger.debug(this.getClass(), \"Page Permissions for URI=\" + uri);\n \n             // Verify and handle the case for unauthorized access of this contentlet\n-            Boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);\n+            boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);\n             if (unauthorized) {\n                 return;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjkyNA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369052924", "bodyText": "use boolean  primitive", "author": "wezell", "createdAt": "2020-01-21T15:02:34Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,25 +373,33 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final String id)\n+            throws DotDataException, DotSecurityException {\n+\n+        final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n+        final Language language = request != null ? this.getCurrentLanguage(request) : this.languageAPI.getDefaultLanguage();\n+\n+        return this.htmlPageAssetAPI.findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n+                mode.respectAnonPerms);\n+    }\n+\n     private Language getCurrentLanguage(final HttpServletRequest request) {\n         return request != null ? this.languageWebAPI.getLanguage(request) : this.languageAPI.getDefaultLanguage();\n     }\n \n-    public class HTMLPageUrl {\n-        private String pageUrl;\n+    public static class HTMLPageUrl {\n         private String pageUrlMapper;\n         private HTMLPageAsset htmlPage;\n         private Boolean hasLive = null;\n \n-        public HTMLPageUrl(final String pageUrl, final String pageUrlMapper, final Boolean hasLive) {\n-            this.pageUrl = pageUrl;\n+        private HTMLPageUrl(final HTMLPageAsset htmlPage, final String pageUrlMapper, final Boolean hasLive) {", "originalCommit": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA2NjMyMw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369066323", "bodyText": "here compare with null value\n\n  \n    \n      core/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n    \n    \n         Line 407\n      in\n      2ae94ad\n    \n    \n    \n    \n\n        \n          \n           return hasLive == null ? this.htmlPage.hasLiveVersion() : this.hasLive;", "author": "freddyucv", "createdAt": "2020-01-21T15:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMTQ3OA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369231478", "bodyText": "done 0f3d1a9#diff-051d49b06feb0c7462b349b6b61988a8R372", "author": "freddyucv", "createdAt": "2020-01-21T20:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "0f3d1a924414cb79755fde511a0f7c60660d0bb9", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\nindex 0207ac0e6a..3aa076a9f3 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n\n@@ -388,24 +366,22 @@ public class HTMLPageAssetRenderedAPIImpl implements HTMLPageAssetRenderedAPI {\n     }\n \n     public static class HTMLPageUrl {\n-        private String pageUrlMapper;\n+        private URLMapInfo urlMapInfo;\n         private HTMLPageAsset htmlPage;\n-        private Boolean hasLive = null;\n \n-        private HTMLPageUrl(final HTMLPageAsset htmlPage, final String pageUrlMapper, final Boolean hasLive) {\n+        private HTMLPageUrl(final HTMLPageAsset htmlPage, final URLMapInfo urlMapInfo) {\n             this.htmlPage = htmlPage;\n-            this.pageUrlMapper = pageUrlMapper;\n-            this.hasLive = hasLive;\n+            this.urlMapInfo = urlMapInfo;\n         }\n \n         private HTMLPageUrl(final HTMLPageAsset htmlPage) {\n-            this(htmlPage, null, null);\n+            this(htmlPage, null);\n         }\n \n         public boolean hasLive() {\n             try {\n-                return hasLive == null ? this.htmlPage.hasLiveVersion() : this.hasLive;\n-            } catch(DotDataException e) {\n+                return urlMapInfo != null ? urlMapInfo.getContentlet().isLive() : this.htmlPage.hasLiveVersion();\n+            } catch(DotDataException | DotSecurityException e) {\n                 throw new DotRuntimeException(e);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NzMwMg==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369057302", "bodyText": "Would a ternary-like operator be cleaner here?  Something like:\nfinal HTMLPageUrl htmlPageUrl = findPageByContext(host, context)\n   .orElse(findByURLMap(context, host, request))\n   .orElse(null);", "author": "wezell", "createdAt": "2020-01-21T15:10:04Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -232,34 +249,44 @@ public String getPageHtml(\n                 throws DotSecurityException, DotDataException {\n \n         final Host host = this.hostWebAPI.getCurrentHost(request, context.getUser());\n-        final IHTMLPage page = getHtmlPageAsset(context, host, request).getHTMLPage();\n+        final HTMLPageUrl htmlPageUrl = getHtmlPageAsset(context, host, request);\n+        final IHTMLPage page = htmlPageUrl.getHTMLPage();\n \n         return new HTMLPageAssetRenderedBuilder()\n                 .setHtmlPageAsset(page)\n                 .setUser(context.getUser())\n                 .setRequest(request)\n                 .setResponse(response)\n                 .setSite(host)\n-                .getPageHTML();\n+                .setURLMapper(htmlPageUrl.pageUrlMapper)\n+                .setLive(htmlPageUrl.hasLive())\n+                .getPageHTML(context.getPageMode());\n     }\n \n-    private HTMLPageUrl getHtmlPageAsset(\n-            final PageContext context,\n-            final Host host,\n-            final HttpServletRequest request)\n-                throws DotDataException, DotSecurityException {\n+    private HTMLPageUrl getHtmlPageAsset(final PageContext context, final Host host, final HttpServletRequest request)\n+            throws DotDataException, DotSecurityException {\n \n         HTMLPageUrl htmlPageUrl = null;\n-        IHTMLPage htmlPageAsset = findPageByContext(host, context);\n+        for (final SearchPageFunction pageSearcher : pageSearchers) {\n+            final Optional<HTMLPageUrl> optional = pageSearcher.search(context, host, request);\n \n-        if (htmlPageAsset == null){\n-            htmlPageUrl   = findByURLMap(context, host, request);\n-            htmlPageAsset = getPageByUri(context.getPageMode(), host, htmlPageUrl.getPageUrl());\n-        } else {\n-            htmlPageUrl   = new HTMLPageUrl(htmlPageAsset);\n+            if (optional.isPresent()) {\n+                htmlPageUrl = optional.get();\n+                break;\n+            }\n+        }\n+", "originalCommit": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMTgxNw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369231817", "bodyText": "done 0f3d1a9#diff-051d49b06feb0c7462b349b6b61988a8R251", "author": "freddyucv", "createdAt": "2020-01-21T20:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NzMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "0f3d1a924414cb79755fde511a0f7c60660d0bb9", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\nindex 0207ac0e6a..3aa076a9f3 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java\n\n@@ -258,7 +240,7 @@ public class HTMLPageAssetRenderedAPIImpl implements HTMLPageAssetRenderedAPI {\n                 .setRequest(request)\n                 .setResponse(response)\n                 .setSite(host)\n-                .setURLMapper(htmlPageUrl.pageUrlMapper)\n+                .setURLMapper(htmlPageUrl.getPageUrlMapper())\n                 .setLive(htmlPageUrl.hasLive())\n                 .getPageHTML(context.getPageMode());\n     }\n"}}, {"oid": "0f3d1a924414cb79755fde511a0f7c60660d0bb9", "url": "https://github.com/dotCMS/core/commit/0f3d1a924414cb79755fde511a0f7c60660d0bb9", "message": "refactoring", "committedDate": "2020-01-21T16:47:13Z", "type": "commit"}, {"oid": "2e073515120a35fb459d5df3b2a212340faab59d", "url": "https://github.com/dotCMS/core/commit/2e073515120a35fb459d5df3b2a212340faab59d", "message": "testing", "committedDate": "2020-01-21T19:46:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzEwOA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213108", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "dev-dotcms", "createdAt": "2020-01-21T19:58:51Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class VelocityServletIntegrationTest {\n+\n+    public static final String TEST_PATTERN = \"/testpattern\";\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private Host host;\n+    private ServletOutputStream servletOutputStream;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Before\n+    public void init() {\n+        host = new SiteDataGen().nextPersisted();\n+\n+        final Map<String, Object> attributes = new HashMap<>();\n+\n+        request = mock(HttpServletRequest.class);\n+        // Mock setAttribute\n+        doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                final Object value = invocation.getArgumentAt(1, Object.class);\n+                attributes.put(key, value);\n+                return null;\n+            }\n+        }).when(request).setAttribute(anyString(), anyObject());\n+\n+        // Mock getAttribute\n+        doAnswer(new Answer<Object>() {\n+            @Override\n+            public Object answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                return attributes.get(key);\n+            }\n+        }).when(request).getAttribute(anyString());\n+\n+        HttpServletRequestThreadLocal.INSTANCE.setRequest(request);\n+        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());\n+\n+        final HttpSession session = mock(HttpSession.class);\n+        when(session.getAttribute(WebKeys.PAGE_MODE_SESSION)).thenReturn(PageMode.LIVE);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        final Clickstream clickstream = mock(Clickstream.class);\n+        when(session.getAttribute(\"clickstream\")).thenReturn(clickstream);\n+\n+        response = mock(HttpServletResponse.class);\n+        servletOutputStream = mock(ServletOutputStream.class);\n+        try {\n+            when(response.getOutputStream()).thenReturn(servletOutputStream);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzEzMA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213130", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Mockito'", "author": "dev-dotcms", "createdAt": "2020-01-21T19:58:53Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE0OA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213148", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-01-21T19:58:55Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class VelocityServletIntegrationTest {\n+\n+    public static final String TEST_PATTERN = \"/testpattern\";\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private Host host;\n+    private ServletOutputStream servletOutputStream;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE2Mw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213163", "bodyText": "Issue found: Local variable 'unauthorized' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-21T19:58:56Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -98,17 +96,11 @@ public final void serve(final OutputStream out) throws DotDataException, IOExcep\n \n \n             User user = getUser();\n-\n+            final String uri = CMSUrlUtil.getCurrentURI(request);\n             Logger.debug(this.getClass(), \"Page Permissions for URI=\" + uri);\n \n-\n-\n-            IHTMLPage htmlPage = APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n-                    APILocator.systemUser(), mode.respectAnonPerms);\n-\n-\n             // Verify and handle the case for unauthorized access of this contentlet\n-            Boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);\n+            boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE3Mw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213173", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-01-21T19:58:58Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -74,7 +72,7 @@ public final void serve(final OutputStream out) throws DotDataException, IOExcep\n \n \n             // now we check identifier cache first (which DOES NOT have a 404 cache )\n-            Identifier id = APILocator.getIdentifierAPI().find(host, uri);\n+            final Identifier id = APILocator.getIdentifierAPI().find(this.htmlPage.getIdentifier());", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE4NQ==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213185", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "author": "dev-dotcms", "createdAt": "2020-01-21T19:58:59Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzIwMA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213200", "bodyText": "Issue found: Avoid appending characters as strings in StringBuffer.append.", "author": "dev-dotcms", "createdAt": "2020-01-21T19:59:01Z", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -280,6 +279,7 @@ private String buildContentQuery(\n             query.append(this.getHostFilter(context.getHost()));\n         }\n \n+        query.append(\" \");", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI1Mg==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213252", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Mockito.mock' due to existing static import 'org.mockito.Mockito.*'", "author": "dev-dotcms", "createdAt": "2020-01-21T19:59:06Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class VelocityServletIntegrationTest {\n+\n+    public static final String TEST_PATTERN = \"/testpattern\";\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private Host host;\n+    private ServletOutputStream servletOutputStream;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Before\n+    public void init() {\n+        host = new SiteDataGen().nextPersisted();\n+\n+        final Map<String, Object> attributes = new HashMap<>();\n+\n+        request = mock(HttpServletRequest.class);\n+        // Mock setAttribute\n+        doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                final Object value = invocation.getArgumentAt(1, Object.class);\n+                attributes.put(key, value);\n+                return null;\n+            }\n+        }).when(request).setAttribute(anyString(), anyObject());\n+\n+        // Mock getAttribute\n+        doAnswer(new Answer<Object>() {\n+            @Override\n+            public Object answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                return attributes.get(key);\n+            }\n+        }).when(request).getAttribute(anyString());\n+\n+        HttpServletRequestThreadLocal.INSTANCE.setRequest(request);\n+        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());\n+\n+        final HttpSession session = mock(HttpSession.class);\n+        when(session.getAttribute(WebKeys.PAGE_MODE_SESSION)).thenReturn(PageMode.LIVE);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        final Clickstream clickstream = mock(Clickstream.class);\n+        when(session.getAttribute(\"clickstream\")).thenReturn(clickstream);\n+\n+        response = mock(HttpServletResponse.class);\n+        servletOutputStream = mock(ServletOutputStream.class);\n+        try {\n+            when(response.getOutputStream()).thenReturn(servletOutputStream);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method to test: {@link VelocityServlet#service(HttpServletRequest, HttpServletResponse)}\n+     * when: There is exists a Content Type Url Map and is request\n+     * Should: return 200 Http code\n+     *\n+     * @throws ServletException\n+     * @throws IOException\n+     */\n+    @Test\n+    public void whenRequestURLMap() throws ServletException, IOException {\n+\n+        final VelocityServlet velocityServlet = new VelocityServlet();\n+\n+        final String newsPatternPrefix =\n+                TEST_PATTERN + System.currentTimeMillis() + \"/\";\n+        final Contentlet contentlet = createURLMapperContentType(newsPatternPrefix, host);\n+        ContentletDataGen.publish(contentlet);\n+\n+        final String contentletURLMap = newsPatternPrefix + contentlet.getStringProperty(\"urlTitle\");\n+\n+        when(request.getRequestURI()).thenReturn(contentletURLMap);\n+\n+        velocityServlet.service(request, response);\n+\n+        verify(servletOutputStream).write(\"\".getBytes());\n+        verify(response, never()).sendError(HttpServletResponse.SC_NOT_FOUND);\n+    }\n+\n+    /**\n+     * Method to test: {@link VelocityServlet#service(HttpServletRequest, HttpServletResponse)}\n+     * when: There is exists a Content Type Url Map and is request\n+     * Should: return 200 Http code\n+     *\n+     * @throws ServletException\n+     * @throws IOException\n+     */\n+    @Test\n+    public void whenRequestVanityURL() throws ServletException, IOException, DotDataException, DotSecurityException {\n+\n+        final VelocityServlet velocityServlet = new VelocityServlet();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n+        ContentletDataGen.publish(htmlPageAsset);\n+\n+        when(request.getRequestURI()).thenReturn(\"/vanityURL\");\n+\n+        final String VANITY_URI = \"/vanityURL\";\n+        createAndPublishVanityURL(htmlPageAsset.getPageUrl(), VANITY_URI);\n+\n+        when(request.getRequestURI()).thenReturn(VANITY_URI);\n+        final FilterChain chain = mock(FilterChain.class);\n+\n+        final VanityURLFilter vanityURLFilter = new VanityURLFilter();\n+        vanityURLFilter.doFilter(request, response, chain);\n+\n+        velocityServlet.service(request, response);\n+\n+        verify(servletOutputStream).write(\"\".getBytes());\n+        verify(response, never()).sendError(HttpServletResponse.SC_NOT_FOUND);\n+    }\n+\n+    private void createAndPublishVanityURL(final String forwardURL, final String VANITY_URI)\n+            throws DotDataException, DotSecurityException {\n+        final Language defaultLanguage = APILocator.getLanguageAPI().getDefaultLanguage();\n+        final Contentlet vanityUrl = FiltersUtil.getInstance().createVanityUrl(\"test\", host.getIdentifier(), VANITY_URI,\n+                forwardURL, 200, 0, defaultLanguage.getId());\n+\n+        FiltersUtil.getInstance().publishVanityUrl(vanityUrl);\n+    }\n+\n+    /**\n+     * Method to test: {@link VelocityServlet#service(HttpServletRequest, HttpServletResponse)}\n+     * when: There is exists a VanityURL that forward to a URL Map\n+     * Should: return 200 Http code\n+     *\n+     * @throws ServletException\n+     * @throws IOException\n+     */\n+    @Test\n+    public void whenRequestURLMapAndVanityURLTogether() throws ServletException, IOException, DotSecurityException, DotDataException {\n+\n+        final VelocityServlet velocityServlet = new VelocityServlet();\n+\n+        final String newsPatternPrefix =\n+                TEST_PATTERN + System.currentTimeMillis() + \"/\";\n+        final Contentlet contentlet = createURLMapperContentType(newsPatternPrefix, host);\n+        ContentletDataGen.publish(contentlet);\n+\n+        when(request.getRequestURI()).thenReturn(\"/vanityURL/\" + contentlet.getStringProperty(\"urlTitle\"));\n+\n+        final String VANITY_URI = \"/vanityURL/([a-zA-Z0-9-_]+)\";\n+        final String FORWARD_URL = newsPatternPrefix + \"$1\";\n+\n+        createAndPublishVanityURL(FORWARD_URL, VANITY_URI);\n+\n+        when(request.getRequestURI()).thenReturn(\"/vanityURL/\" + contentlet.getStringProperty(\"urlTitle\"));\n+        final FilterChain chain = Mockito.mock(FilterChain.class);", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI2OA==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213268", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-01-21T19:59:07Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,50 +351,53 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final String id)", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI3Nw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213277", "bodyText": "Issue found: Parameter 'urlMapped' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-21T19:59:08Z", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapInfo.java", "diffHunk": "@@ -9,10 +9,12 @@\n public class URLMapInfo {\n     final Contentlet contentlet;\n     final Identifier identifier;\n+    final String urlMapped;\n \n-    URLMapInfo(final Contentlet contentlet, final Identifier identifier) {\n+    URLMapInfo(final Contentlet contentlet, final Identifier identifier, String urlMapped) {", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI4Ng==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213286", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-01-21T19:59:09Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java", "diffHunk": "@@ -64,16 +102,42 @@ public final String eval() {\n             serve(out);\n             return new String(out.toByteArray());\n         } catch (DotDataException | IOException | DotSecurityException e) {\n+            Logger.debug(VelocityModeHandler.class, e.getMessage(), e);\n             throw new DotRuntimeException(e);\n         }\n     }\n-    \n-    public static final VelocityModeHandler modeHandler(PageMode mode, HttpServletRequest request, HttpServletResponse response, String uri, Host host) {\n-        return pageModeVelocityMap.get(mode).apply(request, response, uri, host);\n+\n+    public static final VelocityModeHandler modeHandler(final PageMode mode, final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        // Find the current language\n+        final IHTMLPage htmlPage= getHtmlPageFromURI(mode, request, uri, host);\n+        return pageModeVelocityMap.get(mode).apply(request, response, htmlPage, host);\n     }\n-    \n-    public static final VelocityModeHandler modeHandler(PageMode mode, HttpServletRequest request, HttpServletResponse response) {\n-        return pageModeVelocityMap.get(mode).apply(request, response, request.getRequestURI(), hostWebAPI.getCurrentHostNoThrow(request));\n+\n+    protected static IHTMLPage getHtmlPageFromURI(final PageMode mode, final HttpServletRequest request, final  String uri, final Host host) {\n+        final long langId = WebAPILocator.getLanguageWebAPI().getLanguage(request).getId();\n+\n+        try {\n+            // now we check identifier cache first (which DOES NOT have a 404 cache )\n+            final Identifier id = APILocator.getIdentifierAPI().find(host, uri);", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI5Nw==", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213297", "bodyText": "Issue found: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "author": "dev-dotcms", "createdAt": "2020-01-21T19:59:11Z", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -280,6 +279,7 @@ private String buildContentQuery(\n             query.append(this.getHostFilter(context.getHost()));\n         }\n \n+        query.append(\" \");", "originalCommit": "2e073515120a35fb459d5df3b2a212340faab59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}