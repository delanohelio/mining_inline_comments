{"pr_number": 18863, "pr_title": "#18795 Adding live:true condition automatically when Time Machine is \u2026", "pr_createdAt": "2020-07-10T18:26:29Z", "pr_url": "https://github.com/dotCMS/core/pull/18863", "timeline": [{"oid": "b91e4ecc94e8fe652653cefc5f3eec266b0df382", "url": "https://github.com/dotCMS/core/commit/b91e4ecc94e8fe652653cefc5f3eec266b0df382", "message": "#18795 Adding live:true condition automatically when Time Machine is running", "committedDate": "2020-07-10T18:22:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjEyNw==", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453006127", "bodyText": "code expresses a different thing that this javadoc", "author": "dsilvam", "createdAt": "2020-07-10T18:30:04Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java", "diffHunk": "@@ -414,4 +423,176 @@ private ContentTool getContentTool(final long languageId){\n         contentTool.init(viewContext);\n         return contentTool;\n     }\n+\n+    /*\n+\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a publish date in the future and the time machine parameter in null\n+     * Should: Not return the content\n+     */\n+    @Test\n+    public void whenTheTimeMachineDateIsNullAndPublishDateInFutureShouldNotReturnAnything() {\n+        final Calendar contentPublishDate = Calendar.getInstance();\n+        contentPublishDate.add(Calendar.DATE, 1);\n+\n+        final ContentType contentType = TestDataUtils.getNewsLikeContentType();\n+        new ContentletDataGen(contentType.id())\n+                .setPolicy(IndexPolicy.FORCE)\n+                .setProperty(SYS_PUBLISH_DATE, contentPublishDate.getTime())\n+                .nextPersisted();\n+\n+        final String query = String.format(QUERY_BY_STRUCTURE_NAME, contentType.variable());\n+\n+        final ContentTool contentTool = getContentTool(null);\n+\n+        final PaginatedContentList<ContentMap> contents = contentTool.pullPerPage(query, 1, 2, null);\n+        assertEquals(0, contents.size());\n+    }\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a publish date set to tomorrow and the time machine date is the date after tomorrow\n+     * Should: return one content\n+     */\n+    @Test\n+    public void whenTheTimeMachineDateAndPublishDateAreTomorrowShouldReturnOneContent() {\n+        final Calendar publishDate = Calendar.getInstance();\n+        publishDate.add(Calendar.DATE, 1);\n+\n+        final Calendar timeMachine = Calendar.getInstance();\n+        timeMachine.add(Calendar.DATE, 2);\n+\n+        final ContentType contentType = TestDataUtils.getNewsLikeContentType();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id())\n+                .setProperty(SYS_PUBLISH_DATE, publishDate.getTime())\n+                .languageId(1)\n+                .nextPersisted();\n+\n+        final String query = String.format(QUERY_BY_STRUCTURE_NAME, contentType.variable());\n+\n+        final ContentTool contentTool = getContentTool(timeMachine);\n+\n+        final PaginatedContentList<ContentMap> contents = contentTool.pullPerPage(query, 1, 2, null);\n+\n+        assertEquals(1  , contents.size());\n+        assertEquals(1  , contents.getTotalResults());\n+        assertEquals(contentlet.getIdentifier(), contents.get(0).getContentObject().getIdentifier());\n+    }\n+\n+    @NotNull\n+    private ContentTool getContentTool(Calendar timeMachine) {\n+        final ContentTool contentTool  = new ContentTool();\n+\n+        final String time = timeMachine != null ? Long.toString(timeMachine.getTime().getTime()) : null;\n+\n+        final HttpSession session = mock(HttpSession.class);\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getAttribute(WebKeys.USER)).thenReturn(APILocator.systemUser());\n+\n+        when(session.getAttribute(\"tm_date\")).thenReturn(time);\n+\n+        final ViewContext viewContext = mock(ViewContext.class);\n+        when(viewContext.getRequest()).thenReturn(request);\n+\n+        contentTool.init(viewContext);\n+        return contentTool;\n+    }\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a expire  date set to tomorrow and the time machine date is the date after tomorrow", "originalCommit": "b91e4ecc94e8fe652653cefc5f3eec266b0df382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA0OTYyMg==", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453049622", "bodyText": "done a73fc1f#diff-b77a02567ac2b8e298742516ca666f0dR510", "author": "freddyucv", "createdAt": "2020-07-10T19:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a73fc1f7ed898352425c4be3a6211ffafdea42a6", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java b/dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java\nindex 03dd76100b..fcd2132bdd 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java\n\n@@ -510,7 +509,7 @@ public class ContentToolTest extends IntegrationTestBase {\n     @Test\n     public void whenTheTimeMachineDateIsAfterTomorrowAndExpireDateIsTomorrowShouldNotReturnContent() {\n         final Calendar expireDate = Calendar.getInstance();\n-        expireDate.add(Calendar.DATE, 2);\n+        expireDate.add(Calendar.DATE, 1);\n \n         final ContentType contentType = TestDataUtils.getNewsLikeContentType();\n         new ContentletDataGen(contentType.id())\n"}}, {"oid": "a73fc1f7ed898352425c4be3a6211ffafdea42a6", "url": "https://github.com/dotCMS/core/commit/a73fc1f7ed898352425c4be3a6211ffafdea42a6", "message": "#18795 refactoring", "committedDate": "2020-07-10T19:53:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDc1Mg==", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453050752", "bodyText": "doc", "author": "jdotcms", "createdAt": "2020-07-10T19:58:06Z", "path": "dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+public class TimeMachineUtil {\n+\n+    private TimeMachineUtil(){}\n+\n+    public static Optional<String> getTimeMachineDate() {", "originalCommit": "a73fc1f7ed898352425c4be3a6211ffafdea42a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDk5NA==", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453050994", "bodyText": "shouldn't be getSession(false)", "author": "jdotcms", "createdAt": "2020-07-10T19:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NTI2OQ==", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453675269", "bodyText": "done de46031", "author": "freddyucv", "createdAt": "2020-07-13T14:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "de4603169a1241fa8698a2dc200bd71efdb03d2b", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java b/dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java\nindex 64c8b72cfa..2cdb16d4ec 100644\n--- a/dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java\n+++ b/dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java\n\n@@ -5,16 +5,24 @@ import com.dotcms.api.web.HttpServletRequestThreadLocal;\n import javax.servlet.http.HttpSession;\n import java.util.Optional;\n \n-public class TimeMachineUtil {\n+public final class TimeMachineUtil {\n \n     private TimeMachineUtil(){}\n \n+    /**\n+     * If Time Machine is running return the timestamp of the Time Machine date\n+     * @return\n+     */\n     public static Optional<String> getTimeMachineDate() {\n-        final HttpSession session = HttpServletRequestThreadLocal.INSTANCE.getRequest().getSession();\n+        final HttpSession session = HttpServletRequestThreadLocal.INSTANCE.getRequest().getSession(false);\n         final Object timeMachineObject = session != null ? session.getAttribute(\"tm_date\") : null;\n         return Optional.ofNullable(timeMachineObject != null ? timeMachineObject.toString() : null);\n     }\n \n+    /**\n+     * Return true if Time Machine is running, otherwise return false\n+     * @return\n+     */\n     public static boolean isRunning(){\n         final Optional<String> timeMachine = getTimeMachineDate();\n         return timeMachine.isPresent();\n"}}, {"oid": "a6e4173e4391c955b9516744c8973011fc349556", "url": "https://github.com/dotCMS/core/commit/a6e4173e4391c955b9516744c8973011fc349556", "message": "#18795 javadoc testing", "committedDate": "2020-07-10T19:58:47Z", "type": "commit"}, {"oid": "de4603169a1241fa8698a2dc200bd71efdb03d2b", "url": "https://github.com/dotCMS/core/commit/de4603169a1241fa8698a2dc200bd71efdb03d2b", "message": "#18795 refactoring", "committedDate": "2020-07-10T20:01:17Z", "type": "commit"}, {"oid": "c74c8d4ee863e025a4d5f255300514502a4685d3", "url": "https://github.com/dotCMS/core/commit/c74c8d4ee863e025a4d5f255300514502a4685d3", "message": "#18795 Fixing Test", "committedDate": "2020-07-15T15:14:22Z", "type": "commit"}, {"oid": "fa9a979092f4999062b9cedd2deb078ff96e9341", "url": "https://github.com/dotCMS/core/commit/fa9a979092f4999062b9cedd2deb078ff96e9341", "message": "Update ContentToolTest.java", "committedDate": "2020-07-16T16:28:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMTM4Mg==", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r455921382", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-07-16T16:37:41Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/TimeMachineUtilTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+import java.util.Date;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class TimeMachineUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "fa9a979092f4999062b9cedd2deb078ff96e9341", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMTM5Ng==", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r455921396", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.junit.Assert'", "author": "dev-dotcms", "createdAt": "2020-07-16T16:37:42Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/TimeMachineUtilTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+import java.util.Date;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;", "originalCommit": "fa9a979092f4999062b9cedd2deb078ff96e9341", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}