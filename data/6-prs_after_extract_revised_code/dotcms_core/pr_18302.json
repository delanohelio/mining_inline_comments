{"pr_number": 18302, "pr_title": "dotCMS/core#18363 Image File Browser Upgrade", "pr_createdAt": "2020-04-09T22:22:53Z", "pr_url": "https://github.com/dotCMS/core/pull/18302", "timeline": [{"oid": "96a212d4b806d091c1a65fda1ff0c30b8fba9eb8", "url": "https://github.com/dotCMS/core/commit/96a212d4b806d091c1a65fda1ff0c30b8fba9eb8", "message": "Merge remote-tracking branch 'origin/master' into HEAD", "committedDate": "2020-04-23T01:08:27Z", "type": "forcePushed"}, {"oid": "d19722134db6120d376d144d8d6ab813740b2e65", "url": "https://github.com/dotCMS/core/commit/d19722134db6120d376d144d8d6ab813740b2e65", "message": "#18294 initial poc", "committedDate": "2020-04-23T01:15:28Z", "type": "commit"}, {"oid": "e11d1f17cbbf1ec9e432638b0e64655ea5844ad2", "url": "https://github.com/dotCMS/core/commit/e11d1f17cbbf1ec9e432638b0e64655ea5844ad2", "message": "#18294 initial poc", "committedDate": "2020-04-23T01:15:38Z", "type": "commit"}, {"oid": "991b7247c9d61b5e87ef4732e485ec851fd08e43", "url": "https://github.com/dotCMS/core/commit/991b7247c9d61b5e87ef4732e485ec851fd08e43", "message": "#18294 dnd assets", "committedDate": "2020-04-23T01:22:55Z", "type": "commit"}, {"oid": "35d07bcc61e7174e2f3e059dfab08b307715712e", "url": "https://github.com/dotCMS/core/commit/35d07bcc61e7174e2f3e059dfab08b307715712e", "message": "#18294 updating BrowserAPI", "committedDate": "2020-04-23T01:24:03Z", "type": "commit"}, {"oid": "31fca30be0ca533f1803bb16468985c06738f672", "url": "https://github.com/dotCMS/core/commit/31fca30be0ca533f1803bb16468985c06738f672", "message": "##18294 dnd assets cleaning up", "committedDate": "2020-04-23T01:25:46Z", "type": "commit"}, {"oid": "158a5f7adf2b1759c10fac8b5db0a03ca6b0b71a", "url": "https://github.com/dotCMS/core/commit/158a5f7adf2b1759c10fac8b5db0a03ca6b0b71a", "message": "#8294 missed commit", "committedDate": "2020-04-23T01:26:31Z", "type": "commit"}, {"oid": "fb6abc671d4132e888f694d8be5f62fde9c03a52", "url": "https://github.com/dotCMS/core/commit/fb6abc671d4132e888f694d8be5f62fde9c03a52", "message": "##18294 dnd assets cleaning up", "committedDate": "2020-04-23T01:34:29Z", "type": "commit"}, {"oid": "fb6abc671d4132e888f694d8be5f62fde9c03a52", "url": "https://github.com/dotCMS/core/commit/fb6abc671d4132e888f694d8be5f62fde9c03a52", "message": "##18294 dnd assets cleaning up", "committedDate": "2020-04-23T01:34:29Z", "type": "forcePushed"}, {"oid": "66a6df23113db3571f011c3334191264d6ea1c72", "url": "https://github.com/dotCMS/core/commit/66a6df23113db3571f011c3334191264d6ea1c72", "message": "#18294 dnd dotAssets", "committedDate": "2020-04-23T01:36:23Z", "type": "commit"}, {"oid": "2b84babcc8add654d28777ab49e5446ce9cf75d2", "url": "https://github.com/dotCMS/core/commit/2b84babcc8add654d28777ab49e5446ce9cf75d2", "message": "#18294 adding icons", "committedDate": "2020-04-23T01:39:29Z", "type": "commit"}, {"oid": "9a71c6ef600e997e0c421b16f193e7a9fa532c5c", "url": "https://github.com/dotCMS/core/commit/9a71c6ef600e997e0c421b16f193e7a9fa532c5c", "message": "Style card view and list view", "committedDate": "2020-04-23T18:06:51Z", "type": "commit"}, {"oid": "6e49f55759fafce1f24a6a10c7d94bc2d70a6367", "url": "https://github.com/dotCMS/core/commit/6e49f55759fafce1f24a6a10c7d94bc2d70a6367", "message": "Clean up ImageEditor.js", "committedDate": "2020-04-23T18:09:28Z", "type": "commit"}, {"oid": "be62abf00dd2d249a0ebf2bb2f7794e0774c9f01", "url": "https://github.com/dotCMS/core/commit/be62abf00dd2d249a0ebf2bb2f7794e0774c9f01", "message": "Fix list thumbnail", "committedDate": "2020-04-23T19:34:33Z", "type": "commit"}, {"oid": "ea655ae803c01cb4b1ccecd2eb5081d817c56ade", "url": "https://github.com/dotCMS/core/commit/ea655ae803c01cb4b1ccecd2eb5081d817c56ade", "message": "#18924 add mimeType and maxResults to query", "committedDate": "2020-04-23T21:33:37Z", "type": "commit"}, {"oid": "5c813afd6c9c2d6ab9a593e519de14709b469cc2", "url": "https://github.com/dotCMS/core/commit/5c813afd6c9c2d6ab9a593e519de14709b469cc2", "message": "Fix icons and card scroll", "committedDate": "2020-04-24T18:47:16Z", "type": "commit"}, {"oid": "5c813afd6c9c2d6ab9a593e519de14709b469cc2", "url": "https://github.com/dotCMS/core/commit/5c813afd6c9c2d6ab9a593e519de14709b469cc2", "message": "Fix icons and card scroll", "committedDate": "2020-04-24T18:47:16Z", "type": "forcePushed"}, {"oid": "b881b91c9b374445929cedbab1b00fe0bf039179", "url": "https://github.com/dotCMS/core/commit/b881b91c9b374445929cedbab1b00fe0bf039179", "message": "#18294 initial cosmetic refactor (#18352)\n\n* #18924 add mimeType and maxResults to query\r\n\r\n* #18294 initial cosmetical refactor\r\n\r\nCo-authored-by: Erick Gonzalez <erick.gonzalez@dotcms.com>", "committedDate": "2020-04-24T18:47:48Z", "type": "commit"}, {"oid": "ca9a699170888a0ab60d7fddb1d8634eb0633f58", "url": "https://github.com/dotCMS/core/commit/ca9a699170888a0ab60d7fddb1d8634eb0633f58", "message": "Merge branch 'issue-18294-dnd-dotasset-upload' of github.com:dotCMS/core into issue-18294-dnd-dotasset-upload", "committedDate": "2020-04-24T19:21:06Z", "type": "commit"}, {"oid": "8fb7f0040e4ce70946646ef736bf35a026fc2ed8", "url": "https://github.com/dotCMS/core/commit/8fb7f0040e4ce70946646ef736bf35a026fc2ed8", "message": "#18294 fix to file asset icon", "committedDate": "2020-04-24T20:34:51Z", "type": "commit"}, {"oid": "745f33199dafb2aa7fd324b9033b76bdf79b23e6", "url": "https://github.com/dotCMS/core/commit/745f33199dafb2aa7fd324b9033b76bdf79b23e6", "message": "Move the css to file", "committedDate": "2020-04-27T14:06:46Z", "type": "commit"}, {"oid": "f195a47c114e14ccbc88fe2227f76938231a5653", "url": "https://github.com/dotCMS/core/commit/f195a47c114e14ccbc88fe2227f76938231a5653", "message": "Format css", "committedDate": "2020-04-27T14:26:11Z", "type": "commit"}, {"oid": "034fa2b058f0759e8318da0c634e165766856808", "url": "https://github.com/dotCMS/core/commit/034fa2b058f0759e8318da0c634e165766856808", "message": "Issue 18294 dnd dotasset upload changes (#18362)\n\n* #18294 initial cosmetical refactor\r\n\r\n* #18294 saving progress to the BrowserAPI refactor\r\n\r\n* #18294 BrowserAPI has been moved to an interface, also promoted to an APILocator and exposed on the BrowserResource\r\n\r\n* #18294 some doc", "committedDate": "2020-04-27T14:37:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNTQ3MA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r415935470", "bodyText": "remove commented code", "author": "dsilvam", "createdAt": "2020-04-27T15:53:57Z", "path": "dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.dotcms.browser;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.LanguageDataGen;\n+import com.dotcms.datagen.LinkDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.image.focalpoint.FocalPointAPITest;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple3;\n+\n+/**\n+ * Created by Oscar Arrieta on 6/8/17.\n+ */\n+\n+public class BrowserAPITest extends IntegrationTestBase {\n+\n+    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final FolderAPI folderAPI = APILocator.getFolderAPI();\n+    final UserAPI userAPI = APILocator.getUserAPI();\n+    final HostAPI hostAPI = APILocator.getHostAPI();\n+\n+    static Host testHost;\n+    static Folder testFolder, testSubFolder;\n+    static HTMLPageAsset testPage;\n+    static Language testLanguage;\n+    static Contentlet testDotAsset;\n+    static FileAsset testFileAsset, testFileAsset2, testFileAsset3Archived, testFileAsset2MultiLingual;\n+\n+    static Link testlink;\n+\n+\n+    @AfterClass\n+    public static void delete() throws Exception {\n+        \n+        //APILocator.getHostAPI().unpublish(testHost, APILocator.systemUser(), false);\n+        //APILocator.getHostAPI().archive(testHost, APILocator.systemUser(), false);\n+        //APILocator.getHostAPI().delete(testHost, APILocator.systemUser(), false);", "originalCommit": "034fa2b058f0759e8318da0c634e165766856808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6eb96b8b508069e8f5df60873ac6eb3fe5e979", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java b/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java\nindex 71da894d40..c25f8e4c24 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java\n\n@@ -50,7 +50,7 @@ import io.vavr.Tuple3;\n \n public class BrowserAPITest extends IntegrationTestBase {\n \n-    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final BrowserAPI browserAPI = new BrowserAPI();\n     final FolderAPI folderAPI = APILocator.getFolderAPI();\n     final UserAPI userAPI = APILocator.getUserAPI();\n     final HostAPI hostAPI = APILocator.getHostAPI();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1NzI5NA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r415957294", "bodyText": "Can be done like this:\n@Test(expected = NotFoundInDbException.class)", "author": "dsilvam", "createdAt": "2020-04-27T16:21:29Z", "path": "dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package com.dotcms.browser;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.LanguageDataGen;\n+import com.dotcms.datagen.LinkDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.image.focalpoint.FocalPointAPITest;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple3;\n+\n+/**\n+ * Created by Oscar Arrieta on 6/8/17.\n+ */\n+\n+public class BrowserAPITest extends IntegrationTestBase {\n+\n+    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final FolderAPI folderAPI = APILocator.getFolderAPI();\n+    final UserAPI userAPI = APILocator.getUserAPI();\n+    final HostAPI hostAPI = APILocator.getHostAPI();\n+\n+    static Host testHost;\n+    static Folder testFolder, testSubFolder;\n+    static HTMLPageAsset testPage;\n+    static Language testLanguage;\n+    static Contentlet testDotAsset;\n+    static FileAsset testFileAsset, testFileAsset2, testFileAsset3Archived, testFileAsset2MultiLingual;\n+\n+    static Link testlink;\n+\n+\n+    @AfterClass\n+    public static void delete() throws Exception {\n+        \n+        //APILocator.getHostAPI().unpublish(testHost, APILocator.systemUser(), false);\n+        //APILocator.getHostAPI().archive(testHost, APILocator.systemUser(), false);\n+        //APILocator.getHostAPI().delete(testHost, APILocator.systemUser(), false);\n+    }\n+    \n+    \n+    \n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        \n+        testLanguage = new LanguageDataGen().nextPersisted();\n+        testHost = new SiteDataGen().nextPersisted();\n+\n+        testFolder = new FolderDataGen().name(\"testFolder\").site(testHost).nextPersisted();\n+        testFileAsset = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text1FileAsset\", \".txt\"));\n+        \n+        \n+        testFileAsset2 = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text2FileAsset\", \".txt\"));\n+\n+\n+        File tempFile = File.createTempFile(\"testFileAsset2-es\", \".jpg\");\n+        URL url = FocalPointAPITest.class.getResource(\"/images/test.jpg\");\n+        File testImage = new File(url.getFile());\n+        FileUtils.copyFile(testImage, tempFile);\n+        \n+        testFileAsset2MultiLingual =APILocator.getFileAssetAPI().fromContentlet( new FileAssetDataGen(tempFile).languageId(testLanguage.getId()).folder(testFolder).nextPersisted());\n+\n+\n+        \n+        // archived\n+        testFileAsset3Archived = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text3FileAsset\", \".txt\"));\n+        APILocator.getContentletAPI().archive(testFileAsset3Archived, APILocator.systemUser(), false);\n+        \n+\n+        testDotAsset =  TestDataUtils.getDotAssetLikeContentlet(testFolder);\n+        \n+        testSubFolder =  new FolderDataGen().name(\"testSubFolder\").parent(testFolder).nextPersisted();\n+\n+        Template template=new Template();\n+        template.setTitle(\"a template \"+UUIDGenerator.generateUuid());\n+        template.setBody(\"<html><body> I'm mostly empty </body></html>\");\n+        template=APILocator.getTemplateAPI().saveTemplate(template, testHost, APILocator.systemUser(), false);\n+        \n+        HTMLPageAsset page = new HTMLPageDataGen(testFolder, template).next();\n+        page.setTitle(\"testingpage1\");\n+        testPage = APILocator.getHTMLPageAssetAPI().fromContentlet(HTMLPageDataGen.checkin(page, IndexPolicy.FORCE));\n+\n+        testlink = new LinkDataGen().hostId(testHost.getIdentifier()).title(\"testLink\").parent(testFolder).target(\"https://google.com\").linkType(\"EXTERNAL\").nextPersisted();\n+\n+    }\n+\n+    \n+\n+\n+\n+    \n+    @Test\n+    public void testGetFolderContentWithInvalidIdentifier() { // https://github.com/dotCMS/core/issues/11829\n+\n+        final String NOT_EXISTING_ID = \"01234567-1234-1234-1234-123456789012\";\n+\n+        try {\n+            browserAPI.getFolderContent( APILocator.systemUser(), NOT_EXISTING_ID, 0, -1, \"\", null, null, true, false, false, false, \"\", false, false, 1 );\n+        } catch ( Exception e ){\n+            Assert.assertTrue( e instanceof NotFoundInDbException );", "originalCommit": "034fa2b058f0759e8318da0c634e165766856808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e6eb96b8b508069e8f5df60873ac6eb3fe5e979", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java b/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java\nindex 71da894d40..c25f8e4c24 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java\n\n@@ -50,7 +50,7 @@ import io.vavr.Tuple3;\n \n public class BrowserAPITest extends IntegrationTestBase {\n \n-    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final BrowserAPI browserAPI = new BrowserAPI();\n     final FolderAPI folderAPI = APILocator.getFolderAPI();\n     final UserAPI userAPI = APILocator.getUserAPI();\n     final HostAPI hostAPI = APILocator.getHostAPI();\n"}}, {"oid": "1e6eb96b8b508069e8f5df60873ac6eb3fe5e979", "url": "https://github.com/dotCMS/core/commit/1e6eb96b8b508069e8f5df60873ac6eb3fe5e979", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18294-dnd-dotasset-upload", "committedDate": "2020-04-27T16:23:28Z", "type": "commit"}, {"oid": "485fe2b5e495bfefb5c3cb92f8f4a7c2a6bd907a", "url": "https://github.com/dotCMS/core/commit/485fe2b5e495bfefb5c3cb92f8f4a7c2a6bd907a", "message": "Merge branch 'issue-18294-dnd-dotasset-upload' of github.com:dotCMS/core into issue-18294-dnd-dotasset-upload", "committedDate": "2020-04-27T16:25:00Z", "type": "commit"}, {"oid": "5926389045bc616b410d8211794b69f061720c07", "url": "https://github.com/dotCMS/core/commit/5926389045bc616b410d8211794b69f061720c07", "message": "#18294 getting back a fix for icons", "committedDate": "2020-04-27T16:26:03Z", "type": "commit"}, {"oid": "cbfa9b136f8fb3dee032c8e51ec3f58d7a13d73b", "url": "https://github.com/dotCMS/core/commit/cbfa9b136f8fb3dee032c8e51ec3f58d7a13d73b", "message": "18294 BrowserTree resource has been deprecated", "committedDate": "2020-04-27T16:32:06Z", "type": "commit"}, {"oid": "d6902ad5492ed45870e43a701fc8e249455405b3", "url": "https://github.com/dotCMS/core/commit/d6902ad5492ed45870e43a701fc8e249455405b3", "message": "Add D&D to file browser dialog", "committedDate": "2020-04-27T18:59:31Z", "type": "commit"}, {"oid": "646147c3d49ee3245bce95fcefb596e7923df169", "url": "https://github.com/dotCMS/core/commit/646147c3d49ee3245bce95fcefb596e7923df169", "message": "Update selected folder bold", "committedDate": "2020-04-27T19:07:25Z", "type": "commit"}, {"oid": "e764a8e7c56d93d3d77821d8edd12521931aec93", "url": "https://github.com/dotCMS/core/commit/e764a8e7c56d93d3d77821d8edd12521931aec93", "message": "Fix upload in host level", "committedDate": "2020-04-27T19:11:25Z", "type": "commit"}, {"oid": "a4002051ce415df381f5d47d10bff3705cfbe72d", "url": "https://github.com/dotCMS/core/commit/a4002051ce415df381f5d47d10bff3705cfbe72d", "message": "#18294 code review changes", "committedDate": "2020-04-27T19:35:13Z", "type": "commit"}, {"oid": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "url": "https://github.com/dotCMS/core/commit/69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "message": "Merge branch 'issue-18294-dnd-dotasset-upload' of github.com:dotCMS/core into issue-18294-dnd-dotasset-upload", "committedDate": "2020-04-27T19:35:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzUzMw==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113533", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.beans.Host'", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:03Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserAPI.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package com.dotcms.browser;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotmarketing.beans.Host;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzU0NA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113544", "bodyText": "Issue found: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:04Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserAPIImpl.java", "diffHunk": "@@ -0,0 +1,524 @@\n+package com.dotcms.browser;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.IconType;\n+import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.comparators.WebAssetMapComparator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.ContentletToMapTransformer;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilHTML;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+\n+/**\n+ * Default implementation\n+ * @author jsanca\n+ */\n+public class BrowserAPIImpl implements BrowserAPI {\n+\n+    private final LanguageAPI langAPI       = APILocator.getLanguageAPI();\n+    private final UserWebAPI userAPI       = WebAPILocator.getUserWebAPI();\n+    private final FolderAPI folderAPI     = APILocator.getFolderAPI();\n+    private final PermissionAPI permissionAPI = APILocator.getPermissionAPI();\n+\n+    @Override\n+    @CloseDBIfOpened\n+    public Map<String, Object> getFolderContent(final BrowserQuery browserQuery) throws DotSecurityException, DotDataException {\n+\n+        final boolean respectFrontEndRoles = false;\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        final Role[] roles = APILocator.getRoleAPI().loadRolesForUser(browserQuery.user.getUserId()).toArray(new Role[0]);\n+\n+        // gets folder parent\n+        final Folder parent = folderAPI.find(browserQuery.hostFolderId, browserQuery.user, respectFrontEndRoles);\n+\n+        Host host = null;\n+        if (parent == null) {// If we didn't find a parent folder lets verify if\n+            // this is a host\n+            host = APILocator.getHostAPI().find(browserQuery.hostFolderId, browserQuery.user, respectFrontEndRoles);\n+\n+            if (host == null) {\n+\n+                Logger.error(this, \"Folder ID doesn't belong to a Folder nor a Host, id: \" + browserQuery.hostFolderId\n+                        + \", maybe the Folder was modified in the background.\");\n+                throw new NotFoundInDbException(\"Folder ID doesn't belong to a Folder nor a Host, id: \" + browserQuery.hostFolderId);\n+            }\n+        }\n+\n+        if (browserQuery.showFolders) {\n+\n+            this.includeFolders(browserQuery, returnList, roles, parent);\n+        }\n+\n+        if (browserQuery.showLinks) {\n+\n+            this.includeLinks(browserQuery, returnList, roles, parent, host);\n+        }\n+\n+        final String luceneQuery = this.createQuery(browserQuery, parent, host);\n+        final String esSortBy    = (\"name\".equals(browserQuery.sortBy) ? \"title\" : browserQuery.sortBy)\n+                + (browserQuery.sortByDesc ? \" desc\" : StringPool.BLANK);\n+\n+        final List<Contentlet> contentlets = APILocator.getContentletAPI().search(luceneQuery, browserQuery.maxResults,\n+                browserQuery.offset, esSortBy, browserQuery.user, true);\n+\n+        for (final Contentlet contentlet : contentlets) {\n+\n+            Map<String, Object> contentMap = null;\n+            if (contentlet.getBaseType().get() == BaseContentType.FILEASSET) {\n+\n+                final FileAsset fileAsset = APILocator.getFileAssetAPI().fromContentlet(contentlet);\n+                contentMap = fileAssetMap(fileAsset, browserQuery.user, browserQuery.showArchived);\n+            }\n+\n+            if (contentlet.getBaseType().get() == BaseContentType.DOTASSET) {\n+\n+                contentMap = dotAssetMap(contentlet, browserQuery.user, browserQuery.showArchived);\n+            }\n+\n+            if (contentlet.getBaseType().get() == BaseContentType.HTMLPAGE) {\n+\n+                final HTMLPageAsset page = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n+                contentMap = htmlPageMap(page, browserQuery.user, browserQuery.showArchived, browserQuery.languageId);\n+            }\n+\n+            final List<Integer> permissions = permissionAPI.getPermissionIdsFromRoles(contentlet, roles, browserQuery.user);\n+            final WfData wfdata             = new WfData(contentlet, permissions, browserQuery.user, browserQuery.showArchived);\n+            contentMap.put(\"wfActionMapList\", wfdata.wfActionMapList);\n+            contentMap.put(\"contentEditable\", wfdata.contentEditable);\n+            contentMap.put(\"permissions\",     permissions);\n+            returnList.add(contentMap);\n+        }\n+\n+        // Filtering\n+        returnList = this.filterReturnList(browserQuery, returnList);\n+\n+        // Sorting\n+        Collections.sort(returnList, new WebAssetMapComparator(browserQuery.sortBy, browserQuery.sortByDesc));\n+\n+        int offset     = browserQuery.offset;\n+        int maxResults = browserQuery.maxResults;\n+        // Offsetting\n+        if (offset < 0) {\n+\n+            offset = 0;\n+        }\n+\n+        if (maxResults <= 0) {\n+\n+            maxResults = returnList.size() - offset;\n+        }\n+\n+        if (maxResults + offset > returnList.size()) {\n+\n+            maxResults = returnList.size() - offset;\n+        }\n+\n+        final Map<String, Object> returnMap = new HashMap<>();\n+        returnMap.put(\"total\", returnList.size());\n+        returnMap.put(\"list\",  returnList.subList(offset, offset + maxResults));\n+        return returnMap;\n+    }\n+\n+    private List<Map<String, Object>> filterReturnList(final BrowserQuery browserQuery, final List<Map<String, Object>> returnList) {\n+\n+        final List<Map<String, Object>> filteredList = new ArrayList<Map<String, Object>>();\n+        for (final Map<String, Object> asset : returnList) {\n+\n+            String name = (String) asset.get(\"name\");\n+            name = name == null ? StringPool.BLANK : name;\n+\n+            String description = (String) asset.get(\"description\");\n+            description = description == null ? StringPool.BLANK : description;\n+\n+            String mimeType = (String) asset.get(\"mimeType\");\n+            mimeType = mimeType == null ? StringPool.BLANK : mimeType;\n+\n+            if (browserQuery.mimeTypes != null && browserQuery.mimeTypes.size() > 0) {\n+\n+                boolean match = false;\n+                for (final String mType : browserQuery.mimeTypes) {\n+                    if (mimeType.contains(mType)) {\n+                        match = true;\n+                    }\n+                }\n+\n+                if (!match) {\n+                    continue;\n+                }\n+            }\n+\n+            if (browserQuery.extensions != null && browserQuery.extensions.size() > 0) {\n+\n+                boolean match = false;\n+                for (final String extension : browserQuery.extensions) {\n+                    if (((String) asset.get(\"extension\")).contains(extension)) {\n+                        match = true;\n+                    }\n+                }\n+\n+                if (!match) {\n+                    continue;\n+                }\n+            }\n+\n+            filteredList.add(asset);\n+        }\n+\n+        return filteredList;\n+    }\n+\n+    private String createQuery(final BrowserQuery browserQuery, final Folder parent, final Host host) {\n+\n+        final StringBuilder luceneQuery = new StringBuilder();\n+        final List<String> baseTypes = new ArrayList<>();\n+\n+        if(browserQuery.showDotAssets) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.DOTASSET.getType()));\n+        }\n+\n+        if(browserQuery.showFiles) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.FILEASSET.getType()));\n+        }\n+\n+        if(browserQuery.showPages) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.HTMLPAGE.getType()));\n+        }\n+\n+        if(baseTypes.size()==0) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.ANY.getType()));\n+        }\n+\n+        luceneQuery.append(\"+basetype:(\" + String.join(\" OR \", baseTypes) + \") \");\n+        luceneQuery.append(browserQuery.languageId > 0? \" +languageid:\" + browserQuery.languageId : StringPool.BLANK);", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzU1Nw==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113557", "bodyText": "Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y)", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:06Z", "path": "dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+package com.dotcms.browser;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.LanguageDataGen;\n+import com.dotcms.datagen.LinkDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.image.focalpoint.FocalPointAPITest;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple3;\n+\n+/**\n+ * Created by Oscar Arrieta on 6/8/17.\n+ */\n+\n+public class BrowserAPITest extends IntegrationTestBase {\n+\n+    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final FolderAPI folderAPI = APILocator.getFolderAPI();\n+    final UserAPI userAPI = APILocator.getUserAPI();\n+    final HostAPI hostAPI = APILocator.getHostAPI();\n+\n+    static Host testHost;\n+    static Folder testFolder, testSubFolder;\n+    static HTMLPageAsset testPage;\n+    static Language testLanguage;\n+    static Contentlet testDotAsset;\n+    static FileAsset testFileAsset, testFileAsset2, testFileAsset3Archived, testFileAsset2MultiLingual;\n+\n+    static Link testlink;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        \n+        testLanguage = new LanguageDataGen().nextPersisted();\n+        testHost = new SiteDataGen().nextPersisted();\n+\n+        testFolder = new FolderDataGen().name(\"testFolder\").site(testHost).nextPersisted();\n+        testFileAsset = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text1FileAsset\", \".txt\"));\n+        \n+        \n+        testFileAsset2 = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text2FileAsset\", \".txt\"));\n+\n+\n+        File tempFile = File.createTempFile(\"testFileAsset2-es\", \".jpg\");\n+        URL url = FocalPointAPITest.class.getResource(\"/images/test.jpg\");\n+        File testImage = new File(url.getFile());\n+        FileUtils.copyFile(testImage, tempFile);\n+        \n+        testFileAsset2MultiLingual =APILocator.getFileAssetAPI().fromContentlet( new FileAssetDataGen(tempFile).languageId(testLanguage.getId()).folder(testFolder).nextPersisted());\n+\n+\n+        \n+        // archived\n+        testFileAsset3Archived = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text3FileAsset\", \".txt\"));\n+        APILocator.getContentletAPI().archive(testFileAsset3Archived, APILocator.systemUser(), false);\n+        \n+\n+        testDotAsset =  TestDataUtils.getDotAssetLikeContentlet(testFolder);\n+        \n+        testSubFolder =  new FolderDataGen().name(\"testSubFolder\").parent(testFolder).nextPersisted();\n+\n+        Template template=new Template();\n+        template.setTitle(\"a template \"+UUIDGenerator.generateUuid());\n+        template.setBody(\"<html><body> I'm mostly empty </body></html>\");\n+        template=APILocator.getTemplateAPI().saveTemplate(template, testHost, APILocator.systemUser(), false);\n+        \n+        HTMLPageAsset page = new HTMLPageDataGen(testFolder, template).next();\n+        page.setTitle(\"testingpage1\");\n+        testPage = APILocator.getHTMLPageAssetAPI().fromContentlet(HTMLPageDataGen.checkin(page, IndexPolicy.FORCE));\n+\n+        testlink = new LinkDataGen().hostId(testHost.getIdentifier()).title(\"testLink\").parent(testFolder).target(\"https://google.com\").linkType(\"EXTERNAL\").nextPersisted();\n+\n+    }\n+\n+    \n+\n+\n+\n+    \n+    @Test(expected = NotFoundInDbException.class)\n+    public void testGetFolderContentWithInvalidIdentifier() throws DotDataException, DotSecurityException { // https://github.com/dotCMS/core/issues/11829\n+\n+        final String NOT_EXISTING_ID = \"01234567-1234-1234-1234-123456789012\";\n+\n+        browserAPI.getFolderContent( APILocator.systemUser(), NOT_EXISTING_ID, 0, -1, \"\", null, null, true, false, false, false, \"\", false, false, 1 );\n+    }\n+\n+    @Test\n+    public void testGetFolderContentWithValidIdentifier() throws Exception { // https://github.com/dotCMS/core/issues/11829\n+\n+        final String folderPath = \"/BrowserAPITest-Folder\";\n+\n+        //Creating folder to check.\n+        User user = userAPI.getSystemUser();\n+        Host demo = testHost;\n+        Folder folder = folderAPI.createFolders( folderPath, demo, user, false );\n+\n+        try {\n+            Map<String, Object> folderContent = browserAPI.getFolderContent( APILocator.systemUser(), folder.getInode(), 0, -1, \"\", null, null, true, false, false, false, \"\", false, false, 1 );\n+            Assert.assertTrue( folderContent.containsKey( \"total\" ) );\n+            Assert.assertTrue( folderContent.containsKey( \"list\" ) );\n+        } catch ( Exception e ){\n+            Assert.fail( \"We should not be getting any exception here\" );\n+        } finally {\n+            folderAPI.delete( folder, user, false );\n+        }\n+    }\n+    \n+    \n+    \n+    \n+    @Test\n+    public void testingDifferentBrowserAPIResults() throws Exception{\n+        for(Tuple3<String,BrowserQuery, Set<String>> testCase : browserApiTestCases()) {\n+            String testTitle = testCase._1;\n+            Map<String,Object> results = browserAPI.getFolderContent(testCase._2);\n+            \n+            List<String> list = ((List<Map<String,Object>>) results.get(\"list\")).stream().map(m->(String) m.get(\"name\")).collect(Collectors.toList());\n+            \n+            assertTrue(testTitle, !list.isEmpty());\n+            \n+            Set<String> expectedNames = testCase._3;\n+            \n+            assertTrue(testTitle, list.size()==expectedNames.size());", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzU3Ng==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113576", "bodyText": "Issue found: Avoid using redundant field initializer for 'filter'", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:07Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzU4OA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113588", "bodyText": "Issue found: The String literal \"description\" appears 5 times in this file; the first occurrence is on line 166", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:08Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserAPIImpl.java", "diffHunk": "@@ -0,0 +1,524 @@\n+package com.dotcms.browser;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.IconType;\n+import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.comparators.WebAssetMapComparator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.ContentletToMapTransformer;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilHTML;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+\n+/**\n+ * Default implementation\n+ * @author jsanca\n+ */\n+public class BrowserAPIImpl implements BrowserAPI {\n+\n+    private final LanguageAPI langAPI       = APILocator.getLanguageAPI();\n+    private final UserWebAPI userAPI       = WebAPILocator.getUserWebAPI();\n+    private final FolderAPI folderAPI     = APILocator.getFolderAPI();\n+    private final PermissionAPI permissionAPI = APILocator.getPermissionAPI();\n+\n+    @Override\n+    @CloseDBIfOpened\n+    public Map<String, Object> getFolderContent(final BrowserQuery browserQuery) throws DotSecurityException, DotDataException {\n+\n+        final boolean respectFrontEndRoles = false;\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        final Role[] roles = APILocator.getRoleAPI().loadRolesForUser(browserQuery.user.getUserId()).toArray(new Role[0]);\n+\n+        // gets folder parent\n+        final Folder parent = folderAPI.find(browserQuery.hostFolderId, browserQuery.user, respectFrontEndRoles);\n+\n+        Host host = null;\n+        if (parent == null) {// If we didn't find a parent folder lets verify if\n+            // this is a host\n+            host = APILocator.getHostAPI().find(browserQuery.hostFolderId, browserQuery.user, respectFrontEndRoles);\n+\n+            if (host == null) {\n+\n+                Logger.error(this, \"Folder ID doesn't belong to a Folder nor a Host, id: \" + browserQuery.hostFolderId\n+                        + \", maybe the Folder was modified in the background.\");\n+                throw new NotFoundInDbException(\"Folder ID doesn't belong to a Folder nor a Host, id: \" + browserQuery.hostFolderId);\n+            }\n+        }\n+\n+        if (browserQuery.showFolders) {\n+\n+            this.includeFolders(browserQuery, returnList, roles, parent);\n+        }\n+\n+        if (browserQuery.showLinks) {\n+\n+            this.includeLinks(browserQuery, returnList, roles, parent, host);\n+        }\n+\n+        final String luceneQuery = this.createQuery(browserQuery, parent, host);\n+        final String esSortBy    = (\"name\".equals(browserQuery.sortBy) ? \"title\" : browserQuery.sortBy)\n+                + (browserQuery.sortByDesc ? \" desc\" : StringPool.BLANK);\n+\n+        final List<Contentlet> contentlets = APILocator.getContentletAPI().search(luceneQuery, browserQuery.maxResults,\n+                browserQuery.offset, esSortBy, browserQuery.user, true);\n+\n+        for (final Contentlet contentlet : contentlets) {\n+\n+            Map<String, Object> contentMap = null;\n+            if (contentlet.getBaseType().get() == BaseContentType.FILEASSET) {\n+\n+                final FileAsset fileAsset = APILocator.getFileAssetAPI().fromContentlet(contentlet);\n+                contentMap = fileAssetMap(fileAsset, browserQuery.user, browserQuery.showArchived);\n+            }\n+\n+            if (contentlet.getBaseType().get() == BaseContentType.DOTASSET) {\n+\n+                contentMap = dotAssetMap(contentlet, browserQuery.user, browserQuery.showArchived);\n+            }\n+\n+            if (contentlet.getBaseType().get() == BaseContentType.HTMLPAGE) {\n+\n+                final HTMLPageAsset page = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n+                contentMap = htmlPageMap(page, browserQuery.user, browserQuery.showArchived, browserQuery.languageId);\n+            }\n+\n+            final List<Integer> permissions = permissionAPI.getPermissionIdsFromRoles(contentlet, roles, browserQuery.user);\n+            final WfData wfdata             = new WfData(contentlet, permissions, browserQuery.user, browserQuery.showArchived);\n+            contentMap.put(\"wfActionMapList\", wfdata.wfActionMapList);\n+            contentMap.put(\"contentEditable\", wfdata.contentEditable);\n+            contentMap.put(\"permissions\",     permissions);\n+            returnList.add(contentMap);\n+        }\n+\n+        // Filtering\n+        returnList = this.filterReturnList(browserQuery, returnList);\n+\n+        // Sorting\n+        Collections.sort(returnList, new WebAssetMapComparator(browserQuery.sortBy, browserQuery.sortByDesc));\n+\n+        int offset     = browserQuery.offset;\n+        int maxResults = browserQuery.maxResults;\n+        // Offsetting\n+        if (offset < 0) {\n+\n+            offset = 0;\n+        }\n+\n+        if (maxResults <= 0) {\n+\n+            maxResults = returnList.size() - offset;\n+        }\n+\n+        if (maxResults + offset > returnList.size()) {\n+\n+            maxResults = returnList.size() - offset;\n+        }\n+\n+        final Map<String, Object> returnMap = new HashMap<>();\n+        returnMap.put(\"total\", returnList.size());\n+        returnMap.put(\"list\",  returnList.subList(offset, offset + maxResults));\n+        return returnMap;\n+    }\n+\n+    private List<Map<String, Object>> filterReturnList(final BrowserQuery browserQuery, final List<Map<String, Object>> returnList) {\n+\n+        final List<Map<String, Object>> filteredList = new ArrayList<Map<String, Object>>();\n+        for (final Map<String, Object> asset : returnList) {\n+\n+            String name = (String) asset.get(\"name\");\n+            name = name == null ? StringPool.BLANK : name;\n+\n+            String description = (String) asset.get(\"description\");", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzU5OQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113599", "bodyText": "Issue found: Unnecessary modifier 'public' on method 'getFolderContent': the method is declared in an interface type", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:09Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserAPI.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package com.dotcms.browser;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.IconType;\n+import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.comparators.WebAssetMapComparator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.ContentletToMapTransformer;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilHTML;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+\n+/**\n+ * Encapsulates the logic to interact with the Browser App\n+ */\n+public interface BrowserAPI {\n+\n+    /**\n+     * @deprecated see {@link #getFolderContent(BrowserQuery)}\n+     * @param usr\n+     * @param folderId\n+     * @param offset\n+     * @param maxResults\n+     * @param filter\n+     * @param mimeTypes\n+     * @param extensions\n+     * @param showArchived\n+     * @param noFolders\n+     * @param onlyFiles\n+     * @param sortBy\n+     * @param sortByDesc\n+     * @param excludeLinks\n+     * @param languageId\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Deprecated\n+    public default Map<String, Object> getFolderContent (final User usr, final String folderId, final int offset, final int maxResults, final String filter, final List<String> mimeTypes,\n+                                                 final List<String> extensions, final boolean showArchived, final boolean noFolders, final boolean onlyFiles, final String sortBy,\n+                                                 final boolean sortByDesc, final boolean excludeLinks, final long languageId) throws DotSecurityException, DotDataException {\n+    \treturn getFolderContent(usr, folderId, offset, maxResults, filter, mimeTypes, extensions, true, showArchived, noFolders, onlyFiles, sortBy, sortByDesc, excludeLinks, languageId);\n+    }\n+\n+    /**\n+     * @deprecated see {@link #getFolderContent(BrowserQuery)}\n+     * @param usr\n+     * @param folderId\n+     * @param offset\n+     * @param maxResults\n+     * @param filter\n+     * @param mimeTypes\n+     * @param extensions\n+     * @param showArchived\n+     * @param noFolders\n+     * @param onlyFiles\n+     * @param sortBy\n+     * @param sortByDesc\n+     * @param languageId\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Deprecated\n+    public default Map<String, Object> getFolderContent (final  User usr, final String folderId, final int offset, final int maxResults, final String filter, final List<String> mimeTypes,\n+                                                 final List<String> extensions, final boolean showArchived, final boolean noFolders, final boolean onlyFiles, final String sortBy, final boolean sortByDesc, final long languageId ) throws DotSecurityException, DotDataException {\n+    \treturn getFolderContent(usr, folderId, offset, maxResults, filter, mimeTypes, extensions, true, showArchived, noFolders, onlyFiles, sortBy, sortByDesc, languageId);\n+    }\n+\n+    /**\n+     * @deprecated see {@link #getFolderContent(BrowserQuery)}\n+     * @param user\n+     * @param folderId\n+     * @param offset\n+     * @param maxResults\n+     * @param filter\n+     * @param mimeTypes\n+     * @param extensions\n+     * @param showWorking\n+     * @param showArchived\n+     * @param noFolders\n+     * @param onlyFiles\n+     * @param sortBy\n+     * @param sortByDesc\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Deprecated\n+    public default Map<String, Object> getFolderContent(final User user, final String folderId,\n+                                                final int offset, final int maxResults, final String filter, final List<String> mimeTypes,\n+                                                final List<String> extensions, final boolean showWorking, final boolean showArchived, final boolean noFolders,\n+                                                final boolean onlyFiles, final String sortBy, final boolean sortByDesc)\n+\t\t\tthrows DotSecurityException, DotDataException {\n+\n+    \treturn getFolderContent(user, folderId, offset, maxResults, filter, mimeTypes, extensions, showWorking, showArchived, noFolders, onlyFiles, sortBy, sortByDesc, false, 0);\n+    }\n+\n+    /**\n+     * @deprecated see {@link #getFolderContent(BrowserQuery)}\n+     * @param user\n+     * @param folderId\n+     * @param offset\n+     * @param maxResults\n+     * @param filter\n+     * @param mimeTypes\n+     * @param extensions\n+     * @param showWorking\n+     * @param showArchived\n+     * @param noFolders\n+     * @param onlyFiles\n+     * @param sortBy\n+     * @param sortByDesc\n+     * @param languageId\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Deprecated\n+    public default Map<String, Object> getFolderContent(final User user, final String folderId,\n+                                                final int offset, final int maxResults, final String filter, final List<String> mimeTypes,\n+                                                final List<String> extensions, final boolean showWorking, final boolean showArchived, final boolean noFolders,\n+                                                final boolean onlyFiles, final String sortBy, final boolean sortByDesc, final long languageId)\n+\t\t\tthrows DotSecurityException, DotDataException {\n+\n+    \treturn getFolderContent(user, folderId, offset, maxResults, filter, mimeTypes, extensions, showWorking, showArchived, noFolders, onlyFiles, sortBy, sortByDesc, false, languageId);\n+    }\n+\n+    /**\n+     * @deprecated see {@link #getFolderContent(BrowserQuery)}\n+     * @param user\n+     * @param folderId\n+     * @param offset\n+     * @param maxResults\n+     * @param filter\n+     * @param mimeTypes\n+     * @param extensions\n+     * @param showWorking\n+     * @param showArchived\n+     * @param noFolders\n+     * @param onlyFiles\n+     * @param sortBy\n+     * @param sortByDesc\n+     * @param excludeLinks\n+     * @param languageId\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Deprecated\n+    public default Map<String, Object> getFolderContent(final User user, final String folderId,\n+                                                final int offset, final int maxResults, final String filter, final List<String> mimeTypes,\n+                                                final List<String> extensions, final boolean showWorking, final boolean showArchived, final boolean noFolders,\n+                                                final boolean onlyFiles, final String sortBy, final boolean sortByDesc, final boolean excludeLinks, final long languageId)\n+                    throws DotSecurityException, DotDataException {\n+        \n+        return getFolderContent( user,  folderId,\n+                         offset,  maxResults,  filter,  mimeTypes,\n+                        extensions,  showWorking,  showArchived,  noFolders,\n+                         onlyFiles,  sortBy,  sortByDesc,  excludeLinks,  languageId, false);\n+    }\n+    \n+\t/**\n+\t * Gets the Folders, HTMLPages, Links, FileAssets under the specified folderId.\n+\t *\n+\t * @param user\n+\t * @param folderId\n+\t * @param offset\n+\t * @param maxResults\n+\t * @param filter\n+\t * @param mimeTypes\n+\t * @param extensions\n+\t *\n+\t * @param showWorking   If true, returns the working version of HTMLPages, Links and FileAssets in the folder.\n+\t * \t\t\t\t\t\tIf false, returns the live version of HTMLPages, Links and FileAssets in the folder.\n+\t *\n+\t * @param showArchived  If true, includes the archived version of HTMLPages, Links and FileAssets in the folder.\n+\t *\n+\t * @param noFolders\n+\t * @param onlyFiles\n+\t * @param sortBy\n+\t * @param sortByDesc\n+\t * @param excludeLinks\n+\t * @return\n+\t * @throws DotSecurityException\n+\t * @throws DotDataException\n+\t */\n+    @Deprecated\n+\tpublic default Map<String, Object> getFolderContent(final User user, final String folderId,", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzYxMQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113611", "bodyText": "Issue found: Avoid using redundant field initializer for 'showArchived'", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:10Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzYyMQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113621", "bodyText": "Issue found: Local variable 'testCases' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+package com.dotcms.browser;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.LanguageDataGen;\n+import com.dotcms.datagen.LinkDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.image.focalpoint.FocalPointAPITest;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple3;\n+\n+/**\n+ * Created by Oscar Arrieta on 6/8/17.\n+ */\n+\n+public class BrowserAPITest extends IntegrationTestBase {\n+\n+    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final FolderAPI folderAPI = APILocator.getFolderAPI();\n+    final UserAPI userAPI = APILocator.getUserAPI();\n+    final HostAPI hostAPI = APILocator.getHostAPI();\n+\n+    static Host testHost;\n+    static Folder testFolder, testSubFolder;\n+    static HTMLPageAsset testPage;\n+    static Language testLanguage;\n+    static Contentlet testDotAsset;\n+    static FileAsset testFileAsset, testFileAsset2, testFileAsset3Archived, testFileAsset2MultiLingual;\n+\n+    static Link testlink;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        \n+        testLanguage = new LanguageDataGen().nextPersisted();\n+        testHost = new SiteDataGen().nextPersisted();\n+\n+        testFolder = new FolderDataGen().name(\"testFolder\").site(testHost).nextPersisted();\n+        testFileAsset = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text1FileAsset\", \".txt\"));\n+        \n+        \n+        testFileAsset2 = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text2FileAsset\", \".txt\"));\n+\n+\n+        File tempFile = File.createTempFile(\"testFileAsset2-es\", \".jpg\");\n+        URL url = FocalPointAPITest.class.getResource(\"/images/test.jpg\");\n+        File testImage = new File(url.getFile());\n+        FileUtils.copyFile(testImage, tempFile);\n+        \n+        testFileAsset2MultiLingual =APILocator.getFileAssetAPI().fromContentlet( new FileAssetDataGen(tempFile).languageId(testLanguage.getId()).folder(testFolder).nextPersisted());\n+\n+\n+        \n+        // archived\n+        testFileAsset3Archived = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text3FileAsset\", \".txt\"));\n+        APILocator.getContentletAPI().archive(testFileAsset3Archived, APILocator.systemUser(), false);\n+        \n+\n+        testDotAsset =  TestDataUtils.getDotAssetLikeContentlet(testFolder);\n+        \n+        testSubFolder =  new FolderDataGen().name(\"testSubFolder\").parent(testFolder).nextPersisted();\n+\n+        Template template=new Template();\n+        template.setTitle(\"a template \"+UUIDGenerator.generateUuid());\n+        template.setBody(\"<html><body> I'm mostly empty </body></html>\");\n+        template=APILocator.getTemplateAPI().saveTemplate(template, testHost, APILocator.systemUser(), false);\n+        \n+        HTMLPageAsset page = new HTMLPageDataGen(testFolder, template).next();\n+        page.setTitle(\"testingpage1\");\n+        testPage = APILocator.getHTMLPageAssetAPI().fromContentlet(HTMLPageDataGen.checkin(page, IndexPolicy.FORCE));\n+\n+        testlink = new LinkDataGen().hostId(testHost.getIdentifier()).title(\"testLink\").parent(testFolder).target(\"https://google.com\").linkType(\"EXTERNAL\").nextPersisted();\n+\n+    }\n+\n+    \n+\n+\n+\n+    \n+    @Test(expected = NotFoundInDbException.class)\n+    public void testGetFolderContentWithInvalidIdentifier() throws DotDataException, DotSecurityException { // https://github.com/dotCMS/core/issues/11829\n+\n+        final String NOT_EXISTING_ID = \"01234567-1234-1234-1234-123456789012\";\n+\n+        browserAPI.getFolderContent( APILocator.systemUser(), NOT_EXISTING_ID, 0, -1, \"\", null, null, true, false, false, false, \"\", false, false, 1 );\n+    }\n+\n+    @Test\n+    public void testGetFolderContentWithValidIdentifier() throws Exception { // https://github.com/dotCMS/core/issues/11829\n+\n+        final String folderPath = \"/BrowserAPITest-Folder\";\n+\n+        //Creating folder to check.\n+        User user = userAPI.getSystemUser();\n+        Host demo = testHost;\n+        Folder folder = folderAPI.createFolders( folderPath, demo, user, false );\n+\n+        try {\n+            Map<String, Object> folderContent = browserAPI.getFolderContent( APILocator.systemUser(), folder.getInode(), 0, -1, \"\", null, null, true, false, false, false, \"\", false, false, 1 );\n+            Assert.assertTrue( folderContent.containsKey( \"total\" ) );\n+            Assert.assertTrue( folderContent.containsKey( \"list\" ) );\n+        } catch ( Exception e ){\n+            Assert.fail( \"We should not be getting any exception here\" );\n+        } finally {\n+            folderAPI.delete( folder, user, false );\n+        }\n+    }\n+    \n+    \n+    \n+    \n+    @Test\n+    public void testingDifferentBrowserAPIResults() throws Exception{\n+        for(Tuple3<String,BrowserQuery, Set<String>> testCase : browserApiTestCases()) {\n+            String testTitle = testCase._1;\n+            Map<String,Object> results = browserAPI.getFolderContent(testCase._2);\n+            \n+            List<String> list = ((List<Map<String,Object>>) results.get(\"list\")).stream().map(m->(String) m.get(\"name\")).collect(Collectors.toList());\n+            \n+            assertTrue(testTitle, !list.isEmpty());\n+            \n+            Set<String> expectedNames = testCase._3;\n+            \n+            assertTrue(testTitle, list.size()==expectedNames.size());\n+            \n+            for(String name : list) {\n+                System.out.println(testTitle + \" - got :\" + name);\n+                assertTrue(testTitle, expectedNames.contains(name));\n+            }\n+            System.out.println(\"\");\n+        }   \n+    }\n+    \n+    \n+\n+    public static List<Tuple3<String,BrowserQuery, Set<String>>> browserApiTestCases() {\n+    \n+        List<Tuple3<String,BrowserQuery, Set<String>>> testCases = new ArrayList<>();", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzYzNQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113635", "bodyText": "Issue found: Parameter 'showFiles' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:13Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;\n+        private boolean showFolders=false;\n+        private boolean showFiles=false;\n+        private boolean sortByDesc=false;\n+        private boolean showLinks=false;\n+        private boolean showPages=false;\n+        private boolean showDotAssets=false;\n+        private long languageId=0;\n+\n+        private Builder() {}\n+\n+        private Builder(BrowserQuery browserQuery) {\n+            this.user = browserQuery.user;\n+            this.hostFolderId = browserQuery.hostFolderId;\n+            this.filter = browserQuery.filter;\n+            this.mimeTypes = browserQuery.mimeTypes;\n+            this.extensions = browserQuery.extensions;\n+            this.sortBy = browserQuery.sortBy;\n+            this.offset = browserQuery.offset;\n+            this.maxResults = browserQuery.maxResults;\n+            this.showWorking = browserQuery.showWorking;\n+            this.showArchived = browserQuery.showArchived;\n+            this.showFolders = browserQuery.showFolders;\n+            this.showFiles = browserQuery.showFiles;\n+            this.showPages = browserQuery.showPages;\n+            this.sortByDesc = browserQuery.sortByDesc;\n+            this.showLinks = browserQuery.showLinks;\n+            this.showDotAssets = browserQuery.showDotAssets;\n+            this.languageId = browserQuery.languageId;\n+        }\n+\n+        public Builder withUser(@Nonnull User user) {\n+            this.user = user;\n+            return this;\n+        }\n+        \n+        public Builder inHostOrFolder(@Nonnull Folder folder) {\n+            this.hostFolderId = folder !=null ? folder.getInode() : null;\n+            return this;\n+        }\n+        public Builder inHostOrFolder(@Nonnull Host host) {\n+            this.hostFolderId = host.getIdentifier();\n+            return this;\n+        }\n+        public Builder withHostId(@Nonnull String hostid) {\n+            this.hostFolderId = hostid;\n+            return this;\n+        }\n+        public Builder withHostOrFolderId(@Nonnull String hostFolderId) {\n+            this.hostFolderId = hostFolderId;\n+            return this;\n+        }\n+\n+        public Builder withFilter(@Nonnull String filter) {\n+            this.filter = filter;\n+            return this;\n+        }\n+\n+        public Builder showMimeTypes(@Nonnull List<String> mimeTypes) {\n+            this.mimeTypes = mimeTypes;\n+            return this;\n+        }\n+\n+        public Builder showExtensions(@Nonnull List<String>  extensions) {\n+            this.extensions = extensions;\n+            return this;\n+        }\n+\n+        public Builder sortBy(@Nonnull String sortBy) {\n+            this.sortBy = sortBy;\n+            return this;\n+        }\n+\n+        public Builder offset(@Nonnull int offset) {\n+            this.offset = offset;\n+            return this;\n+        }\n+\n+        public Builder maxResults(@Nonnull int maxResults) {\n+            this.maxResults = maxResults;\n+            return this;\n+        }\n+\n+        public Builder showWorking(@Nonnull boolean showWorking) {\n+            this.showWorking = showWorking;\n+            return this;\n+        }\n+\n+        public Builder showArchived(@Nonnull boolean showArchived) {\n+            this.showArchived = showArchived;\n+            return this;\n+        }\n+\n+        public Builder showFolders(@Nonnull boolean showFolders) {\n+            this.showFolders = showFolders;\n+            return this;\n+        }\n+\n+        public Builder showFiles(@Nonnull boolean showFiles) {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzY2OQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113669", "bodyText": "Issue found: Parameter 'browserQuery' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:15Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;\n+        private boolean showFolders=false;\n+        private boolean showFiles=false;\n+        private boolean sortByDesc=false;\n+        private boolean showLinks=false;\n+        private boolean showPages=false;\n+        private boolean showDotAssets=false;\n+        private long languageId=0;\n+\n+        private Builder() {}\n+\n+        private Builder(BrowserQuery browserQuery) {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzY4Mw==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113683", "bodyText": "Issue found: The String literal \"hasTitleImage\" appears 5 times in this file; the first occurrence is on line 293", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:17Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserAPIImpl.java", "diffHunk": "@@ -0,0 +1,524 @@\n+package com.dotcms.browser;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.IconType;\n+import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.comparators.WebAssetMapComparator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.ContentletToMapTransformer;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilHTML;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+\n+/**\n+ * Default implementation\n+ * @author jsanca\n+ */\n+public class BrowserAPIImpl implements BrowserAPI {\n+\n+    private final LanguageAPI langAPI       = APILocator.getLanguageAPI();\n+    private final UserWebAPI userAPI       = WebAPILocator.getUserWebAPI();\n+    private final FolderAPI folderAPI     = APILocator.getFolderAPI();\n+    private final PermissionAPI permissionAPI = APILocator.getPermissionAPI();\n+\n+    @Override\n+    @CloseDBIfOpened\n+    public Map<String, Object> getFolderContent(final BrowserQuery browserQuery) throws DotSecurityException, DotDataException {\n+\n+        final boolean respectFrontEndRoles = false;\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        final Role[] roles = APILocator.getRoleAPI().loadRolesForUser(browserQuery.user.getUserId()).toArray(new Role[0]);\n+\n+        // gets folder parent\n+        final Folder parent = folderAPI.find(browserQuery.hostFolderId, browserQuery.user, respectFrontEndRoles);\n+\n+        Host host = null;\n+        if (parent == null) {// If we didn't find a parent folder lets verify if\n+            // this is a host\n+            host = APILocator.getHostAPI().find(browserQuery.hostFolderId, browserQuery.user, respectFrontEndRoles);\n+\n+            if (host == null) {\n+\n+                Logger.error(this, \"Folder ID doesn't belong to a Folder nor a Host, id: \" + browserQuery.hostFolderId\n+                        + \", maybe the Folder was modified in the background.\");\n+                throw new NotFoundInDbException(\"Folder ID doesn't belong to a Folder nor a Host, id: \" + browserQuery.hostFolderId);\n+            }\n+        }\n+\n+        if (browserQuery.showFolders) {\n+\n+            this.includeFolders(browserQuery, returnList, roles, parent);\n+        }\n+\n+        if (browserQuery.showLinks) {\n+\n+            this.includeLinks(browserQuery, returnList, roles, parent, host);\n+        }\n+\n+        final String luceneQuery = this.createQuery(browserQuery, parent, host);\n+        final String esSortBy    = (\"name\".equals(browserQuery.sortBy) ? \"title\" : browserQuery.sortBy)\n+                + (browserQuery.sortByDesc ? \" desc\" : StringPool.BLANK);\n+\n+        final List<Contentlet> contentlets = APILocator.getContentletAPI().search(luceneQuery, browserQuery.maxResults,\n+                browserQuery.offset, esSortBy, browserQuery.user, true);\n+\n+        for (final Contentlet contentlet : contentlets) {\n+\n+            Map<String, Object> contentMap = null;\n+            if (contentlet.getBaseType().get() == BaseContentType.FILEASSET) {\n+\n+                final FileAsset fileAsset = APILocator.getFileAssetAPI().fromContentlet(contentlet);\n+                contentMap = fileAssetMap(fileAsset, browserQuery.user, browserQuery.showArchived);\n+            }\n+\n+            if (contentlet.getBaseType().get() == BaseContentType.DOTASSET) {\n+\n+                contentMap = dotAssetMap(contentlet, browserQuery.user, browserQuery.showArchived);\n+            }\n+\n+            if (contentlet.getBaseType().get() == BaseContentType.HTMLPAGE) {\n+\n+                final HTMLPageAsset page = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n+                contentMap = htmlPageMap(page, browserQuery.user, browserQuery.showArchived, browserQuery.languageId);\n+            }\n+\n+            final List<Integer> permissions = permissionAPI.getPermissionIdsFromRoles(contentlet, roles, browserQuery.user);\n+            final WfData wfdata             = new WfData(contentlet, permissions, browserQuery.user, browserQuery.showArchived);\n+            contentMap.put(\"wfActionMapList\", wfdata.wfActionMapList);\n+            contentMap.put(\"contentEditable\", wfdata.contentEditable);\n+            contentMap.put(\"permissions\",     permissions);\n+            returnList.add(contentMap);\n+        }\n+\n+        // Filtering\n+        returnList = this.filterReturnList(browserQuery, returnList);\n+\n+        // Sorting\n+        Collections.sort(returnList, new WebAssetMapComparator(browserQuery.sortBy, browserQuery.sortByDesc));\n+\n+        int offset     = browserQuery.offset;\n+        int maxResults = browserQuery.maxResults;\n+        // Offsetting\n+        if (offset < 0) {\n+\n+            offset = 0;\n+        }\n+\n+        if (maxResults <= 0) {\n+\n+            maxResults = returnList.size() - offset;\n+        }\n+\n+        if (maxResults + offset > returnList.size()) {\n+\n+            maxResults = returnList.size() - offset;\n+        }\n+\n+        final Map<String, Object> returnMap = new HashMap<>();\n+        returnMap.put(\"total\", returnList.size());\n+        returnMap.put(\"list\",  returnList.subList(offset, offset + maxResults));\n+        return returnMap;\n+    }\n+\n+    private List<Map<String, Object>> filterReturnList(final BrowserQuery browserQuery, final List<Map<String, Object>> returnList) {\n+\n+        final List<Map<String, Object>> filteredList = new ArrayList<Map<String, Object>>();\n+        for (final Map<String, Object> asset : returnList) {\n+\n+            String name = (String) asset.get(\"name\");\n+            name = name == null ? StringPool.BLANK : name;\n+\n+            String description = (String) asset.get(\"description\");\n+            description = description == null ? StringPool.BLANK : description;\n+\n+            String mimeType = (String) asset.get(\"mimeType\");\n+            mimeType = mimeType == null ? StringPool.BLANK : mimeType;\n+\n+            if (browserQuery.mimeTypes != null && browserQuery.mimeTypes.size() > 0) {\n+\n+                boolean match = false;\n+                for (final String mType : browserQuery.mimeTypes) {\n+                    if (mimeType.contains(mType)) {\n+                        match = true;\n+                    }\n+                }\n+\n+                if (!match) {\n+                    continue;\n+                }\n+            }\n+\n+            if (browserQuery.extensions != null && browserQuery.extensions.size() > 0) {\n+\n+                boolean match = false;\n+                for (final String extension : browserQuery.extensions) {\n+                    if (((String) asset.get(\"extension\")).contains(extension)) {\n+                        match = true;\n+                    }\n+                }\n+\n+                if (!match) {\n+                    continue;\n+                }\n+            }\n+\n+            filteredList.add(asset);\n+        }\n+\n+        return filteredList;\n+    }\n+\n+    private String createQuery(final BrowserQuery browserQuery, final Folder parent, final Host host) {\n+\n+        final StringBuilder luceneQuery = new StringBuilder();\n+        final List<String> baseTypes = new ArrayList<>();\n+\n+        if(browserQuery.showDotAssets) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.DOTASSET.getType()));\n+        }\n+\n+        if(browserQuery.showFiles) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.FILEASSET.getType()));\n+        }\n+\n+        if(browserQuery.showPages) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.HTMLPAGE.getType()));\n+        }\n+\n+        if(baseTypes.size()==0) {\n+\n+            baseTypes.add(String.valueOf(BaseContentType.ANY.getType()));\n+        }\n+\n+        luceneQuery.append(\"+basetype:(\" + String.join(\" OR \", baseTypes) + \") \");\n+        luceneQuery.append(browserQuery.languageId > 0? \" +languageid:\" + browserQuery.languageId : StringPool.BLANK);\n+        luceneQuery.append(host != null?                \" +conhost:\"    + host.getIdentifier() + \" +confolder:\" + Folder.SYSTEM_FOLDER : StringPool.BLANK);\n+        luceneQuery.append(parent != null?              \" +confolder:\"  + parent.getInode()       : StringPool.BLANK);\n+\n+        if (UtilMethods.isSet(browserQuery.filter)) {\n+\n+            final String[] spliter = browserQuery.filter.split(\" \");\n+            for (final String token : spliter) {\n+\n+                luceneQuery.append(\" +title:\" + token + \"*\");\n+            }\n+        }\n+\n+        luceneQuery.append(\n+                browserQuery.showArchived\n+                        ? \" +(working:true OR deleted:true) \"\n+                        : browserQuery.showWorking\n+                        ? \" +working:true -deleted:true\"\n+                        : \" +live:true\");\n+        return luceneQuery.toString();\n+    }\n+\n+    private void includeLinks(final BrowserQuery browserQuery, final List<Map<String, Object>> returnList,\n+                              final Role[] roles, final Folder parent, final Host host) throws DotDataException, DotSecurityException {\n+        // Getting the links directly under the parent folder or host\n+        List<Link> links = new ArrayList<>();\n+\n+        if (parent != null) {\n+\n+            if (browserQuery.showWorking) {\n+\n+                links.addAll(folderAPI.getLinks(parent, true, false, browserQuery.user, false));\n+            } else {\n+\n+                links.addAll(folderAPI.getLiveLinks(parent, browserQuery.user, false));\n+            }\n+\n+            if (browserQuery.showArchived) {\n+\n+                links.addAll(folderAPI.getLinks(parent, true, browserQuery.showArchived, browserQuery.user, false));\n+            }\n+        } else {\n+\n+            links = folderAPI.getLinks(host, true, browserQuery.showArchived, browserQuery.user, false);\n+        }\n+\n+        for (final Link link : links) {\n+\n+            final List<Integer> permissions2 = permissionAPI.getPermissionIdsFromRoles(link, roles, browserQuery.user);\n+\n+            if (permissions2.contains(PERMISSION_READ)) {\n+\n+                final Map<String, Object> linkMap = link.getMap();\n+                linkMap.put(\"permissions\", permissions2);\n+                linkMap.put(\"mimeType\", \"application/dotlink\");\n+                linkMap.put(\"name\", link.getTitle());\n+                linkMap.put(\"title\", link.getName());\n+                linkMap.put(\"description\", link.getFriendlyName());\n+                linkMap.put(\"extension\", \"link\");\n+                linkMap.put(\"hasLiveVersion\", APILocator.getVersionableAPI().hasLiveVersion(link));\n+                linkMap.put(\"statusIcons\", UtilHTML.getStatusIcons(link));\n+                linkMap.put(\"hasTitleImage\", \"\");", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzY5NQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113695", "bodyText": "Issue found: Parameter 'mimeTypes' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:18Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;\n+        private boolean showFolders=false;\n+        private boolean showFiles=false;\n+        private boolean sortByDesc=false;\n+        private boolean showLinks=false;\n+        private boolean showPages=false;\n+        private boolean showDotAssets=false;\n+        private long languageId=0;\n+\n+        private Builder() {}\n+\n+        private Builder(BrowserQuery browserQuery) {\n+            this.user = browserQuery.user;\n+            this.hostFolderId = browserQuery.hostFolderId;\n+            this.filter = browserQuery.filter;\n+            this.mimeTypes = browserQuery.mimeTypes;\n+            this.extensions = browserQuery.extensions;\n+            this.sortBy = browserQuery.sortBy;\n+            this.offset = browserQuery.offset;\n+            this.maxResults = browserQuery.maxResults;\n+            this.showWorking = browserQuery.showWorking;\n+            this.showArchived = browserQuery.showArchived;\n+            this.showFolders = browserQuery.showFolders;\n+            this.showFiles = browserQuery.showFiles;\n+            this.showPages = browserQuery.showPages;\n+            this.sortByDesc = browserQuery.sortByDesc;\n+            this.showLinks = browserQuery.showLinks;\n+            this.showDotAssets = browserQuery.showDotAssets;\n+            this.languageId = browserQuery.languageId;\n+        }\n+\n+        public Builder withUser(@Nonnull User user) {\n+            this.user = user;\n+            return this;\n+        }\n+        \n+        public Builder inHostOrFolder(@Nonnull Folder folder) {\n+            this.hostFolderId = folder !=null ? folder.getInode() : null;\n+            return this;\n+        }\n+        public Builder inHostOrFolder(@Nonnull Host host) {\n+            this.hostFolderId = host.getIdentifier();\n+            return this;\n+        }\n+        public Builder withHostId(@Nonnull String hostid) {\n+            this.hostFolderId = hostid;\n+            return this;\n+        }\n+        public Builder withHostOrFolderId(@Nonnull String hostFolderId) {\n+            this.hostFolderId = hostFolderId;\n+            return this;\n+        }\n+\n+        public Builder withFilter(@Nonnull String filter) {\n+            this.filter = filter;\n+            return this;\n+        }\n+\n+        public Builder showMimeTypes(@Nonnull List<String> mimeTypes) {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzcxNA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113714", "bodyText": "Issue found: Field showPages has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:20Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/browser/BrowserQueryForm.java", "diffHunk": "@@ -0,0 +1,262 @@\n+package com.dotcms.rest.api.v1.browser;\n+\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@JsonDeserialize(builder = BrowserQueryForm.Builder.class)\n+public class BrowserQueryForm {\n+\n+    private final String hostFolderId, filter, sortBy;\n+    private final int offset, maxResults;\n+    private final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    private final long languageId;\n+    private final List<String> extensions, mimeTypes;\n+\n+    private BrowserQueryForm(final BrowserQueryForm.Builder builder) {\n+\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    public String getHostFolderId() {\n+        return hostFolderId;\n+    }\n+\n+    public String getFilter() {\n+        return filter;\n+    }\n+\n+    public String getSortBy() {\n+        return sortBy;\n+    }\n+\n+    public int getOffset() {\n+        return offset;\n+    }\n+\n+    public int getMaxResults() {\n+        return maxResults;\n+    }\n+\n+    public boolean isShowWorking() {\n+        return showWorking;\n+    }\n+\n+    public boolean isShowArchived() {\n+        return showArchived;\n+    }\n+\n+    public boolean isShowFolders() {\n+        return showFolders;\n+    }\n+\n+    public boolean isShowFiles() {\n+        return showFiles;\n+    }\n+\n+    public boolean isShowPages() {\n+        return showPages;\n+    }\n+\n+    public boolean isSortByDesc() {\n+        return sortByDesc;\n+    }\n+\n+    public boolean isShowLinks() {\n+        return showLinks;\n+    }\n+\n+    public boolean isShowDotAssets() {\n+        return showDotAssets;\n+    }\n+\n+    public long getLanguageId() {\n+        return languageId;\n+    }\n+\n+    public List<String> getExtensions() {\n+        return extensions;\n+    }\n+\n+    public List<String> getMimeTypes() {\n+        return mimeTypes;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BrowserQueryForm{\" +\n+                \"hostFolderId='\" + hostFolderId + '\\'' +\n+                \", filter='\" + filter + '\\'' +\n+                \", sortBy='\" + sortBy + '\\'' +\n+                \", offset=\" + offset +\n+                \", maxResults=\" + maxResults +\n+                \", showWorking=\" + showWorking +\n+                \", showArchived=\" + showArchived +\n+                \", showFolders=\" + showFolders +\n+                \", showFiles=\" + showFiles +\n+                \", showPages=\" + showPages +\n+                \", sortByDesc=\" + sortByDesc +\n+                \", showLinks=\" + showLinks +\n+                \", showDotAssets=\" + showDotAssets +\n+                \", languageId=\" + languageId +\n+                \", extensions=\" + extensions +\n+                \", mimeTypes=\" + mimeTypes +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty\n+        private String hostFolderId   = Folder.SYSTEM_FOLDER;\n+\n+        @JsonProperty\n+        private String filter         = null;\n+\n+        @JsonProperty\n+        private List<String> mimeTypes  = new ArrayList<>();\n+\n+        @JsonProperty\n+        private List<String> extensions = new ArrayList<>();\n+\n+        @JsonProperty\n+        private String sortBy         = \"moddate\";\n+\n+        @JsonProperty\n+        private int offset            = 0;\n+\n+        @JsonProperty\n+        private int maxResults        = 100;\n+\n+        @JsonProperty\n+        private boolean showWorking   = true;\n+\n+        @JsonProperty\n+        private boolean showArchived  = false;\n+\n+        @JsonProperty\n+        private boolean showFolders   = false;\n+\n+        @JsonProperty\n+        private boolean showFiles     = false;\n+\n+        @JsonProperty\n+        private boolean sortByDesc    = false;\n+\n+        @JsonProperty\n+        private boolean showLinks     = false;\n+\n+        @JsonProperty\n+        private boolean showPages     = false;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzcyNw==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113727", "bodyText": "Issue found: Parameter 'showPages' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:21Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;\n+        private boolean showFolders=false;\n+        private boolean showFiles=false;\n+        private boolean sortByDesc=false;\n+        private boolean showLinks=false;\n+        private boolean showPages=false;\n+        private boolean showDotAssets=false;\n+        private long languageId=0;\n+\n+        private Builder() {}\n+\n+        private Builder(BrowserQuery browserQuery) {\n+            this.user = browserQuery.user;\n+            this.hostFolderId = browserQuery.hostFolderId;\n+            this.filter = browserQuery.filter;\n+            this.mimeTypes = browserQuery.mimeTypes;\n+            this.extensions = browserQuery.extensions;\n+            this.sortBy = browserQuery.sortBy;\n+            this.offset = browserQuery.offset;\n+            this.maxResults = browserQuery.maxResults;\n+            this.showWorking = browserQuery.showWorking;\n+            this.showArchived = browserQuery.showArchived;\n+            this.showFolders = browserQuery.showFolders;\n+            this.showFiles = browserQuery.showFiles;\n+            this.showPages = browserQuery.showPages;\n+            this.sortByDesc = browserQuery.sortByDesc;\n+            this.showLinks = browserQuery.showLinks;\n+            this.showDotAssets = browserQuery.showDotAssets;\n+            this.languageId = browserQuery.languageId;\n+        }\n+\n+        public Builder withUser(@Nonnull User user) {\n+            this.user = user;\n+            return this;\n+        }\n+        \n+        public Builder inHostOrFolder(@Nonnull Folder folder) {\n+            this.hostFolderId = folder !=null ? folder.getInode() : null;\n+            return this;\n+        }\n+        public Builder inHostOrFolder(@Nonnull Host host) {\n+            this.hostFolderId = host.getIdentifier();\n+            return this;\n+        }\n+        public Builder withHostId(@Nonnull String hostid) {\n+            this.hostFolderId = hostid;\n+            return this;\n+        }\n+        public Builder withHostOrFolderId(@Nonnull String hostFolderId) {\n+            this.hostFolderId = hostFolderId;\n+            return this;\n+        }\n+\n+        public Builder withFilter(@Nonnull String filter) {\n+            this.filter = filter;\n+            return this;\n+        }\n+\n+        public Builder showMimeTypes(@Nonnull List<String> mimeTypes) {\n+            this.mimeTypes = mimeTypes;\n+            return this;\n+        }\n+\n+        public Builder showExtensions(@Nonnull List<String>  extensions) {\n+            this.extensions = extensions;\n+            return this;\n+        }\n+\n+        public Builder sortBy(@Nonnull String sortBy) {\n+            this.sortBy = sortBy;\n+            return this;\n+        }\n+\n+        public Builder offset(@Nonnull int offset) {\n+            this.offset = offset;\n+            return this;\n+        }\n+\n+        public Builder maxResults(@Nonnull int maxResults) {\n+            this.maxResults = maxResults;\n+            return this;\n+        }\n+\n+        public Builder showWorking(@Nonnull boolean showWorking) {\n+            this.showWorking = showWorking;\n+            return this;\n+        }\n+\n+        public Builder showArchived(@Nonnull boolean showArchived) {\n+            this.showArchived = showArchived;\n+            return this;\n+        }\n+\n+        public Builder showFolders(@Nonnull boolean showFolders) {\n+            this.showFolders = showFolders;\n+            return this;\n+        }\n+\n+        public Builder showFiles(@Nonnull boolean showFiles) {\n+            this.showFiles = showFiles;\n+            return this;\n+        }\n+\n+        public Builder sortByDesc(@Nonnull boolean sortByDesc) {\n+            this.sortByDesc = sortByDesc;\n+            return this;\n+        }\n+\n+        public Builder showLinks(@Nonnull boolean showLinks) {\n+            this.showLinks = showLinks;\n+            return this;\n+        }\n+\n+        public Builder showPages(@Nonnull boolean showPages) {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzczOA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113738", "bodyText": "Issue found: Avoid using redundant field initializer for 'showDotAssets'", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:22Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/browser/BrowserQueryForm.java", "diffHunk": "@@ -0,0 +1,262 @@\n+package com.dotcms.rest.api.v1.browser;\n+\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@JsonDeserialize(builder = BrowserQueryForm.Builder.class)\n+public class BrowserQueryForm {\n+\n+    private final String hostFolderId, filter, sortBy;\n+    private final int offset, maxResults;\n+    private final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    private final long languageId;\n+    private final List<String> extensions, mimeTypes;\n+\n+    private BrowserQueryForm(final BrowserQueryForm.Builder builder) {\n+\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    public String getHostFolderId() {\n+        return hostFolderId;\n+    }\n+\n+    public String getFilter() {\n+        return filter;\n+    }\n+\n+    public String getSortBy() {\n+        return sortBy;\n+    }\n+\n+    public int getOffset() {\n+        return offset;\n+    }\n+\n+    public int getMaxResults() {\n+        return maxResults;\n+    }\n+\n+    public boolean isShowWorking() {\n+        return showWorking;\n+    }\n+\n+    public boolean isShowArchived() {\n+        return showArchived;\n+    }\n+\n+    public boolean isShowFolders() {\n+        return showFolders;\n+    }\n+\n+    public boolean isShowFiles() {\n+        return showFiles;\n+    }\n+\n+    public boolean isShowPages() {\n+        return showPages;\n+    }\n+\n+    public boolean isSortByDesc() {\n+        return sortByDesc;\n+    }\n+\n+    public boolean isShowLinks() {\n+        return showLinks;\n+    }\n+\n+    public boolean isShowDotAssets() {\n+        return showDotAssets;\n+    }\n+\n+    public long getLanguageId() {\n+        return languageId;\n+    }\n+\n+    public List<String> getExtensions() {\n+        return extensions;\n+    }\n+\n+    public List<String> getMimeTypes() {\n+        return mimeTypes;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BrowserQueryForm{\" +\n+                \"hostFolderId='\" + hostFolderId + '\\'' +\n+                \", filter='\" + filter + '\\'' +\n+                \", sortBy='\" + sortBy + '\\'' +\n+                \", offset=\" + offset +\n+                \", maxResults=\" + maxResults +\n+                \", showWorking=\" + showWorking +\n+                \", showArchived=\" + showArchived +\n+                \", showFolders=\" + showFolders +\n+                \", showFiles=\" + showFiles +\n+                \", showPages=\" + showPages +\n+                \", sortByDesc=\" + sortByDesc +\n+                \", showLinks=\" + showLinks +\n+                \", showDotAssets=\" + showDotAssets +\n+                \", languageId=\" + languageId +\n+                \", extensions=\" + extensions +\n+                \", mimeTypes=\" + mimeTypes +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty\n+        private String hostFolderId   = Folder.SYSTEM_FOLDER;\n+\n+        @JsonProperty\n+        private String filter         = null;\n+\n+        @JsonProperty\n+        private List<String> mimeTypes  = new ArrayList<>();\n+\n+        @JsonProperty\n+        private List<String> extensions = new ArrayList<>();\n+\n+        @JsonProperty\n+        private String sortBy         = \"moddate\";\n+\n+        @JsonProperty\n+        private int offset            = 0;\n+\n+        @JsonProperty\n+        private int maxResults        = 100;\n+\n+        @JsonProperty\n+        private boolean showWorking   = true;\n+\n+        @JsonProperty\n+        private boolean showArchived  = false;\n+\n+        @JsonProperty\n+        private boolean showFolders   = false;\n+\n+        @JsonProperty\n+        private boolean showFiles     = false;\n+\n+        @JsonProperty\n+        private boolean sortByDesc    = false;\n+\n+        @JsonProperty\n+        private boolean showLinks     = false;\n+\n+        @JsonProperty\n+        private boolean showPages     = false;\n+\n+        @JsonProperty\n+        private boolean showDotAssets = false;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzc0OQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113749", "bodyText": "Issue found: Field sortBy has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:23Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzc2MA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113760", "bodyText": "Issue found: Field showFolders has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:24Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;\n+        private boolean showFolders=false;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzc2OQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113769", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.contenttype.exception.NotFoundInDbException'", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:25Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserAPI.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package com.dotcms.browser;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzc4NA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113784", "bodyText": "Issue found: Class cannot be instantiated and does not provide any static methods or fields", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:27Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/browser/BrowserQueryForm.java", "diffHunk": "@@ -0,0 +1,262 @@\n+package com.dotcms.rest.api.v1.browser;\n+\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@JsonDeserialize(builder = BrowserQueryForm.Builder.class)\n+public class BrowserQueryForm {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzc5Mw==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113793", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:28Z", "path": "dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+package com.dotcms.browser;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.LanguageDataGen;\n+import com.dotcms.datagen.LinkDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.image.focalpoint.FocalPointAPITest;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple3;\n+\n+/**\n+ * Created by Oscar Arrieta on 6/8/17.\n+ */\n+\n+public class BrowserAPITest extends IntegrationTestBase {\n+\n+    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final FolderAPI folderAPI = APILocator.getFolderAPI();\n+    final UserAPI userAPI = APILocator.getUserAPI();\n+    final HostAPI hostAPI = APILocator.getHostAPI();\n+\n+    static Host testHost;\n+    static Folder testFolder, testSubFolder;\n+    static HTMLPageAsset testPage;\n+    static Language testLanguage;\n+    static Contentlet testDotAsset;\n+    static FileAsset testFileAsset, testFileAsset2, testFileAsset3Archived, testFileAsset2MultiLingual;\n+\n+    static Link testlink;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzgwNA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113804", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:29Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserAPIImpl.java", "diffHunk": "@@ -0,0 +1,524 @@\n+package com.dotcms.browser;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.IconType;\n+import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.comparators.WebAssetMapComparator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.ContentletToMapTransformer;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilHTML;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+\n+/**\n+ * Default implementation\n+ * @author jsanca\n+ */\n+public class BrowserAPIImpl implements BrowserAPI {\n+\n+    private final LanguageAPI langAPI       = APILocator.getLanguageAPI();\n+    private final UserWebAPI userAPI       = WebAPILocator.getUserWebAPI();\n+    private final FolderAPI folderAPI     = APILocator.getFolderAPI();\n+    private final PermissionAPI permissionAPI = APILocator.getPermissionAPI();\n+\n+    @Override\n+    @CloseDBIfOpened\n+    public Map<String, Object> getFolderContent(final BrowserQuery browserQuery) throws DotSecurityException, DotDataException {\n+\n+        final boolean respectFrontEndRoles = false;\n+        List<Map<String, Object>> returnList = new ArrayList<>();", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzgxOA==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113818", "bodyText": "Issue found: Field sortByDesc has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:30Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;\n+        private boolean showFolders=false;\n+        private boolean showFiles=false;\n+        private boolean sortByDesc=false;", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzgyMQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113821", "bodyText": "Issue found: Parameter 'sortByDesc' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:31Z", "path": "dotCMS/src/main/java/com/dotcms/browser/BrowserQuery.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package com.dotcms.browser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+\n+@JsonDeserialize(builder = BrowserQuery.Builder.class)\n+public class BrowserQuery {\n+\n+    final User user;\n+    final String hostFolderId, filter, sortBy;\n+    final int offset, maxResults;\n+    final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    final long languageId;\n+    final List<String> extensions, mimeTypes;\n+    \n+    @Override\n+    public String toString() {\n+        return \"BrowserQuery {user:\" + user + \", hostFolderId:\" + hostFolderId + \", filter:\" + filter + \", sortBy:\" + sortBy + \", offset:\" + offset + \", maxResults:\" + maxResults + \", showWorking:\" + showWorking\n+                        + \", showArchived:\" + showArchived + \", showFolders:\" + showFolders + \", onlyFiles:\" + showFiles\n+                        + \", sortByDesc:\" + sortByDesc + \", showLinks:\" + showLinks + \", showDotAssets:\" + showDotAssets + \", showPages:\" + showPages+ \", languageId:\"\n+                        + languageId + \", extensions:\" + extensions + \", mimeTypes:\" + mimeTypes + \"}\";\n+    }\n+\n+    private BrowserQuery(final Builder builder) {\n+\n+        this.user          = builder.user == null? APILocator.systemUser() : builder.user;\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    /**\n+     * Creates builder to build {@link BrowserQuery}.\n+     * \n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link BrowserQuery} and initialize it with the given object.\n+     * \n+     * @param browserQuery to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(BrowserQuery browserQuery) {\n+        return new Builder(browserQuery);\n+    }\n+\n+    /**\n+     * Builder to build {@link BrowserQuery}.\n+     */\n+    \n+    public static final class Builder {\n+        private User user ;\n+        private String hostFolderId=Folder.SYSTEM_FOLDER;\n+        private String filter = null;\n+        private List<String> mimeTypes=new ArrayList<>();\n+        private List<String>  extensions=new ArrayList<>();\n+        private String sortBy=\"moddate\";\n+        private int offset=0;\n+        private int maxResults=100;\n+        private boolean showWorking=true;\n+        private boolean showArchived=false;\n+        private boolean showFolders=false;\n+        private boolean showFiles=false;\n+        private boolean sortByDesc=false;\n+        private boolean showLinks=false;\n+        private boolean showPages=false;\n+        private boolean showDotAssets=false;\n+        private long languageId=0;\n+\n+        private Builder() {}\n+\n+        private Builder(BrowserQuery browserQuery) {\n+            this.user = browserQuery.user;\n+            this.hostFolderId = browserQuery.hostFolderId;\n+            this.filter = browserQuery.filter;\n+            this.mimeTypes = browserQuery.mimeTypes;\n+            this.extensions = browserQuery.extensions;\n+            this.sortBy = browserQuery.sortBy;\n+            this.offset = browserQuery.offset;\n+            this.maxResults = browserQuery.maxResults;\n+            this.showWorking = browserQuery.showWorking;\n+            this.showArchived = browserQuery.showArchived;\n+            this.showFolders = browserQuery.showFolders;\n+            this.showFiles = browserQuery.showFiles;\n+            this.showPages = browserQuery.showPages;\n+            this.sortByDesc = browserQuery.sortByDesc;\n+            this.showLinks = browserQuery.showLinks;\n+            this.showDotAssets = browserQuery.showDotAssets;\n+            this.languageId = browserQuery.languageId;\n+        }\n+\n+        public Builder withUser(@Nonnull User user) {\n+            this.user = user;\n+            return this;\n+        }\n+        \n+        public Builder inHostOrFolder(@Nonnull Folder folder) {\n+            this.hostFolderId = folder !=null ? folder.getInode() : null;\n+            return this;\n+        }\n+        public Builder inHostOrFolder(@Nonnull Host host) {\n+            this.hostFolderId = host.getIdentifier();\n+            return this;\n+        }\n+        public Builder withHostId(@Nonnull String hostid) {\n+            this.hostFolderId = hostid;\n+            return this;\n+        }\n+        public Builder withHostOrFolderId(@Nonnull String hostFolderId) {\n+            this.hostFolderId = hostFolderId;\n+            return this;\n+        }\n+\n+        public Builder withFilter(@Nonnull String filter) {\n+            this.filter = filter;\n+            return this;\n+        }\n+\n+        public Builder showMimeTypes(@Nonnull List<String> mimeTypes) {\n+            this.mimeTypes = mimeTypes;\n+            return this;\n+        }\n+\n+        public Builder showExtensions(@Nonnull List<String>  extensions) {\n+            this.extensions = extensions;\n+            return this;\n+        }\n+\n+        public Builder sortBy(@Nonnull String sortBy) {\n+            this.sortBy = sortBy;\n+            return this;\n+        }\n+\n+        public Builder offset(@Nonnull int offset) {\n+            this.offset = offset;\n+            return this;\n+        }\n+\n+        public Builder maxResults(@Nonnull int maxResults) {\n+            this.maxResults = maxResults;\n+            return this;\n+        }\n+\n+        public Builder showWorking(@Nonnull boolean showWorking) {\n+            this.showWorking = showWorking;\n+            return this;\n+        }\n+\n+        public Builder showArchived(@Nonnull boolean showArchived) {\n+            this.showArchived = showArchived;\n+            return this;\n+        }\n+\n+        public Builder showFolders(@Nonnull boolean showFolders) {\n+            this.showFolders = showFolders;\n+            return this;\n+        }\n+\n+        public Builder showFiles(@Nonnull boolean showFiles) {\n+            this.showFiles = showFiles;\n+            return this;\n+        }\n+\n+        public Builder sortByDesc(@Nonnull boolean sortByDesc) {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzgzNQ==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113835", "bodyText": "Issue found: Field sortBy has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:32Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/browser/BrowserQueryForm.java", "diffHunk": "@@ -0,0 +1,262 @@\n+package com.dotcms.rest.api.v1.browser;\n+\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@JsonDeserialize(builder = BrowserQueryForm.Builder.class)\n+public class BrowserQueryForm {\n+\n+    private final String hostFolderId, filter, sortBy;\n+    private final int offset, maxResults;\n+    private final boolean showWorking, showArchived, showFolders, showFiles, showPages,sortByDesc, showLinks, showDotAssets;\n+    private final long languageId;\n+    private final List<String> extensions, mimeTypes;\n+\n+    private BrowserQueryForm(final BrowserQueryForm.Builder builder) {\n+\n+        this.hostFolderId  = builder.hostFolderId;\n+        this.filter        = builder.filter;\n+        this.mimeTypes     = builder.mimeTypes;\n+        this.extensions    = builder.extensions;\n+        this.sortBy        = UtilMethods.isEmpty(builder.sortBy) ? \"moddate\" : builder.sortBy;\n+        this.offset        = builder.offset;\n+        this.maxResults    = builder.maxResults>500 ? 500 : builder.maxResults;\n+        this.showWorking   = builder.showWorking;\n+        this.showArchived  = builder.showArchived;\n+        this.showFolders   = builder.showFolders;\n+        this.showFiles     = builder.showFiles;\n+        this.sortByDesc    = builder.sortByDesc;\n+        this.showLinks     = builder.showLinks;\n+        this.showPages     = builder.showPages;\n+        this.showDotAssets = builder.showDotAssets;\n+        this.languageId    = builder.languageId;\n+    }\n+\n+    public String getHostFolderId() {\n+        return hostFolderId;\n+    }\n+\n+    public String getFilter() {\n+        return filter;\n+    }\n+\n+    public String getSortBy() {\n+        return sortBy;\n+    }\n+\n+    public int getOffset() {\n+        return offset;\n+    }\n+\n+    public int getMaxResults() {\n+        return maxResults;\n+    }\n+\n+    public boolean isShowWorking() {\n+        return showWorking;\n+    }\n+\n+    public boolean isShowArchived() {\n+        return showArchived;\n+    }\n+\n+    public boolean isShowFolders() {\n+        return showFolders;\n+    }\n+\n+    public boolean isShowFiles() {\n+        return showFiles;\n+    }\n+\n+    public boolean isShowPages() {\n+        return showPages;\n+    }\n+\n+    public boolean isSortByDesc() {\n+        return sortByDesc;\n+    }\n+\n+    public boolean isShowLinks() {\n+        return showLinks;\n+    }\n+\n+    public boolean isShowDotAssets() {\n+        return showDotAssets;\n+    }\n+\n+    public long getLanguageId() {\n+        return languageId;\n+    }\n+\n+    public List<String> getExtensions() {\n+        return extensions;\n+    }\n+\n+    public List<String> getMimeTypes() {\n+        return mimeTypes;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BrowserQueryForm{\" +\n+                \"hostFolderId='\" + hostFolderId + '\\'' +\n+                \", filter='\" + filter + '\\'' +\n+                \", sortBy='\" + sortBy + '\\'' +\n+                \", offset=\" + offset +\n+                \", maxResults=\" + maxResults +\n+                \", showWorking=\" + showWorking +\n+                \", showArchived=\" + showArchived +\n+                \", showFolders=\" + showFolders +\n+                \", showFiles=\" + showFiles +\n+                \", showPages=\" + showPages +\n+                \", sortByDesc=\" + sortByDesc +\n+                \", showLinks=\" + showLinks +\n+                \", showDotAssets=\" + showDotAssets +\n+                \", languageId=\" + languageId +\n+                \", extensions=\" + extensions +\n+                \", mimeTypes=\" + mimeTypes +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty\n+        private String hostFolderId   = Folder.SYSTEM_FOLDER;\n+\n+        @JsonProperty\n+        private String filter         = null;\n+\n+        @JsonProperty\n+        private List<String> mimeTypes  = new ArrayList<>();\n+\n+        @JsonProperty\n+        private List<String> extensions = new ArrayList<>();\n+\n+        @JsonProperty\n+        private String sortBy         = \"moddate\";", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExMzg0Mg==", "url": "https://github.com/dotCMS/core/pull/18302#discussion_r416113842", "bodyText": "Issue found: Local variable 'testCase' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-27T20:09:33Z", "path": "dotCMS/src/integration-test/java/com/dotcms/browser/BrowserAPITest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+package com.dotcms.browser;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.exception.NotFoundInDbException;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.LanguageDataGen;\n+import com.dotcms.datagen.LinkDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.image.focalpoint.FocalPointAPITest;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.links.model.Link;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple3;\n+\n+/**\n+ * Created by Oscar Arrieta on 6/8/17.\n+ */\n+\n+public class BrowserAPITest extends IntegrationTestBase {\n+\n+    final BrowserAPI browserAPI = APILocator.getBrowserAPI();\n+    final FolderAPI folderAPI = APILocator.getFolderAPI();\n+    final UserAPI userAPI = APILocator.getUserAPI();\n+    final HostAPI hostAPI = APILocator.getHostAPI();\n+\n+    static Host testHost;\n+    static Folder testFolder, testSubFolder;\n+    static HTMLPageAsset testPage;\n+    static Language testLanguage;\n+    static Contentlet testDotAsset;\n+    static FileAsset testFileAsset, testFileAsset2, testFileAsset3Archived, testFileAsset2MultiLingual;\n+\n+    static Link testlink;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        \n+        testLanguage = new LanguageDataGen().nextPersisted();\n+        testHost = new SiteDataGen().nextPersisted();\n+\n+        testFolder = new FolderDataGen().name(\"testFolder\").site(testHost).nextPersisted();\n+        testFileAsset = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text1FileAsset\", \".txt\"));\n+        \n+        \n+        testFileAsset2 = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text2FileAsset\", \".txt\"));\n+\n+\n+        File tempFile = File.createTempFile(\"testFileAsset2-es\", \".jpg\");\n+        URL url = FocalPointAPITest.class.getResource(\"/images/test.jpg\");\n+        File testImage = new File(url.getFile());\n+        FileUtils.copyFile(testImage, tempFile);\n+        \n+        testFileAsset2MultiLingual =APILocator.getFileAssetAPI().fromContentlet( new FileAssetDataGen(tempFile).languageId(testLanguage.getId()).folder(testFolder).nextPersisted());\n+\n+\n+        \n+        // archived\n+        testFileAsset3Archived = APILocator.getFileAssetAPI().fromContentlet(FileAssetDataGen.createFileAsset(testFolder, \"text3FileAsset\", \".txt\"));\n+        APILocator.getContentletAPI().archive(testFileAsset3Archived, APILocator.systemUser(), false);\n+        \n+\n+        testDotAsset =  TestDataUtils.getDotAssetLikeContentlet(testFolder);\n+        \n+        testSubFolder =  new FolderDataGen().name(\"testSubFolder\").parent(testFolder).nextPersisted();\n+\n+        Template template=new Template();\n+        template.setTitle(\"a template \"+UUIDGenerator.generateUuid());\n+        template.setBody(\"<html><body> I'm mostly empty </body></html>\");\n+        template=APILocator.getTemplateAPI().saveTemplate(template, testHost, APILocator.systemUser(), false);\n+        \n+        HTMLPageAsset page = new HTMLPageDataGen(testFolder, template).next();\n+        page.setTitle(\"testingpage1\");\n+        testPage = APILocator.getHTMLPageAssetAPI().fromContentlet(HTMLPageDataGen.checkin(page, IndexPolicy.FORCE));\n+\n+        testlink = new LinkDataGen().hostId(testHost.getIdentifier()).title(\"testLink\").parent(testFolder).target(\"https://google.com\").linkType(\"EXTERNAL\").nextPersisted();\n+\n+    }\n+\n+    \n+\n+\n+\n+    \n+    @Test(expected = NotFoundInDbException.class)\n+    public void testGetFolderContentWithInvalidIdentifier() throws DotDataException, DotSecurityException { // https://github.com/dotCMS/core/issues/11829\n+\n+        final String NOT_EXISTING_ID = \"01234567-1234-1234-1234-123456789012\";\n+\n+        browserAPI.getFolderContent( APILocator.systemUser(), NOT_EXISTING_ID, 0, -1, \"\", null, null, true, false, false, false, \"\", false, false, 1 );\n+    }\n+\n+    @Test\n+    public void testGetFolderContentWithValidIdentifier() throws Exception { // https://github.com/dotCMS/core/issues/11829\n+\n+        final String folderPath = \"/BrowserAPITest-Folder\";\n+\n+        //Creating folder to check.\n+        User user = userAPI.getSystemUser();\n+        Host demo = testHost;\n+        Folder folder = folderAPI.createFolders( folderPath, demo, user, false );\n+\n+        try {\n+            Map<String, Object> folderContent = browserAPI.getFolderContent( APILocator.systemUser(), folder.getInode(), 0, -1, \"\", null, null, true, false, false, false, \"\", false, false, 1 );\n+            Assert.assertTrue( folderContent.containsKey( \"total\" ) );\n+            Assert.assertTrue( folderContent.containsKey( \"list\" ) );\n+        } catch ( Exception e ){\n+            Assert.fail( \"We should not be getting any exception here\" );\n+        } finally {\n+            folderAPI.delete( folder, user, false );\n+        }\n+    }\n+    \n+    \n+    \n+    \n+    @Test\n+    public void testingDifferentBrowserAPIResults() throws Exception{\n+        for(Tuple3<String,BrowserQuery, Set<String>> testCase : browserApiTestCases()) {", "originalCommit": "69e3cda4a5f2b1d3aab9c768bbcc9c0962b51c1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}