{"pr_number": 19326, "pr_title": "Issue 8538 19267 v2", "pr_createdAt": "2020-09-24T18:27:22Z", "pr_url": "https://github.com/dotCMS/core/pull/19326", "timeline": [{"oid": "e007f6a5d903936b4b9fb7a0d648d87d226fc503", "url": "https://github.com/dotCMS/core/commit/e007f6a5d903936b4b9fb7a0d648d87d226fc503", "message": "#8538 #19267 set parents when editing", "committedDate": "2020-09-24T15:44:21Z", "type": "commit"}, {"oid": "1480653e7313b03b2ab49f9beae5a0349295fbb4", "url": "https://github.com/dotCMS/core/commit/1480653e7313b03b2ab49f9beae5a0349295fbb4", "message": "#8538 #19267 fix permissions when add/edit category", "committedDate": "2020-09-24T16:14:08Z", "type": "commit"}, {"oid": "c89c516e9c36e62c569340103ba6d131323385c8", "url": "https://github.com/dotCMS/core/commit/c89c516e9c36e62c569340103ba6d131323385c8", "message": "#8538 #19267 doc", "committedDate": "2020-09-24T16:22:43Z", "type": "commit"}, {"oid": "c34cc85c0e81f0718c96dd45b9b695ec1c46baad", "url": "https://github.com/dotCMS/core/commit/c34cc85c0e81f0718c96dd45b9b695ec1c46baad", "message": "#8538 #19267 tests", "committedDate": "2020-09-24T18:24:05Z", "type": "commit"}, {"oid": "97cd7ea03d7a3978f3f4f24817e9d98fa0987357", "url": "https://github.com/dotCMS/core/commit/97cd7ea03d7a3978f3f4f24817e9d98fa0987357", "message": "Merge branch 'release-5.3.9' of github.com:dotCMS/core into issue-8538-19267-v2", "committedDate": "2020-09-25T15:04:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5Mjg1Mw==", "url": "https://github.com/dotCMS/core/pull/19326#discussion_r495092853", "bodyText": "rename to role", "author": "jdotcms", "createdAt": "2020-09-25T16:14:05Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -1415,24 +1415,35 @@ private boolean isHost(final Permissionable permissionable) {\n \r\n \t@Override\r\n     public boolean doesUserHavePermissions(PermissionableType permType, int permissionType, User user) throws DotDataException {\r\n-    \tif(user==null) return false;\r\n+    \treturn doesUserHavePermissions(null,permType,permissionType,user);\r\n+    }\r\n+\r\n+\t@Override\r\n+\tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\r\n+\t\tif(user==null) return false;\r\n \r\n-    \tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\r\n+\t\tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\r\n \r\n-    \tBoolean hasPerm = false;\r\n-    \tRoleAPI roleAPI = APILocator.getRoleAPI();\r\n-\t\tList<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\r\n-\t\tfor(com.dotmarketing.business.Role r : roles) {\r\n+\t\tBoolean hasPerm = false;\r\n+\t\tfinal RoleAPI roleAPI = APILocator.getRoleAPI();\r\n+\t\tfinal List<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\r\n+\t\tfor(final com.dotmarketing.business.Role r : roles) {\r", "originalCommit": "97cd7ea03d7a3978f3f4f24817e9d98fa0987357", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0697b2fd86122de66d7efd2fa7d451055578932", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\nindex cbecdf5767..8f25495520 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n\n@@ -1420,24 +1420,28 @@ public class PermissionBitAPIImpl implements PermissionAPI {\n \n \t@Override\n \tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\n-\t\tif(user==null) return false;\n+\t\tif(user==null) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\n+\t\tif(APILocator.getUserAPI().isCMSAdmin(user)){\n+\t\t\treturn true;\n+\t\t}\n \n \t\tBoolean hasPerm = false;\n \t\tfinal RoleAPI roleAPI = APILocator.getRoleAPI();\n \t\tfinal List<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\n-\t\tfor(final com.dotmarketing.business.Role r : roles) {\n-\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(r, false);\n+\t\tfor(final com.dotmarketing.business.Role role : roles) {\n+\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(role, false);\n \t\t\tif(UtilMethods.isSet(assetId)) {\n \t\t\t\tperms = perms.stream()\n \t\t\t\t\t\t.filter(permission -> permission.getInode().equalsIgnoreCase(assetId))\n \t\t\t\t\t\t.collect(\n \t\t\t\t\t\t\t\tCollectors.toList());\n \t\t\t}\n-\t\t\tfor (final Permission p : perms) {\n-\t\t\t\tif(p.getType().equals(permType.getCanonicalName())) {\n-\t\t\t\t\thasPerm = hasPerm | p.getPermission()>=permissionType;\n+\t\t\tfor (final Permission permission : perms) {\n+\t\t\t\tif(permission.getType().equals(permType.getCanonicalName())) {\n+\t\t\t\t\thasPerm = hasPerm | permission.getPermission()>=permissionType;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MjkyMA==", "url": "https://github.com/dotCMS/core/pull/19326#discussion_r495092920", "bodyText": "use curly brackets", "author": "jdotcms", "createdAt": "2020-09-25T16:14:14Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -1415,24 +1415,35 @@ private boolean isHost(final Permissionable permissionable) {\n \r\n \t@Override\r\n     public boolean doesUserHavePermissions(PermissionableType permType, int permissionType, User user) throws DotDataException {\r\n-    \tif(user==null) return false;\r\n+    \treturn doesUserHavePermissions(null,permType,permissionType,user);\r\n+    }\r\n+\r\n+\t@Override\r\n+\tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\r\n+\t\tif(user==null) return false;\r", "originalCommit": "97cd7ea03d7a3978f3f4f24817e9d98fa0987357", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0697b2fd86122de66d7efd2fa7d451055578932", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\nindex cbecdf5767..8f25495520 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n\n@@ -1420,24 +1420,28 @@ public class PermissionBitAPIImpl implements PermissionAPI {\n \n \t@Override\n \tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\n-\t\tif(user==null) return false;\n+\t\tif(user==null) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\n+\t\tif(APILocator.getUserAPI().isCMSAdmin(user)){\n+\t\t\treturn true;\n+\t\t}\n \n \t\tBoolean hasPerm = false;\n \t\tfinal RoleAPI roleAPI = APILocator.getRoleAPI();\n \t\tfinal List<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\n-\t\tfor(final com.dotmarketing.business.Role r : roles) {\n-\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(r, false);\n+\t\tfor(final com.dotmarketing.business.Role role : roles) {\n+\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(role, false);\n \t\t\tif(UtilMethods.isSet(assetId)) {\n \t\t\t\tperms = perms.stream()\n \t\t\t\t\t\t.filter(permission -> permission.getInode().equalsIgnoreCase(assetId))\n \t\t\t\t\t\t.collect(\n \t\t\t\t\t\t\t\tCollectors.toList());\n \t\t\t}\n-\t\t\tfor (final Permission p : perms) {\n-\t\t\t\tif(p.getType().equals(permType.getCanonicalName())) {\n-\t\t\t\t\thasPerm = hasPerm | p.getPermission()>=permissionType;\n+\t\t\tfor (final Permission permission : perms) {\n+\t\t\t\tif(permission.getType().equals(permType.getCanonicalName())) {\n+\t\t\t\t\thasPerm = hasPerm | permission.getPermission()>=permissionType;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MzAwNQ==", "url": "https://github.com/dotCMS/core/pull/19326#discussion_r495093005", "bodyText": "use curly brackets", "author": "jdotcms", "createdAt": "2020-09-25T16:14:25Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -1415,24 +1415,35 @@ private boolean isHost(final Permissionable permissionable) {\n \r\n \t@Override\r\n     public boolean doesUserHavePermissions(PermissionableType permType, int permissionType, User user) throws DotDataException {\r\n-    \tif(user==null) return false;\r\n+    \treturn doesUserHavePermissions(null,permType,permissionType,user);\r\n+    }\r\n+\r\n+\t@Override\r\n+\tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\r\n+\t\tif(user==null) return false;\r\n \r\n-    \tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\r\n+\t\tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\r", "originalCommit": "97cd7ea03d7a3978f3f4f24817e9d98fa0987357", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0697b2fd86122de66d7efd2fa7d451055578932", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\nindex cbecdf5767..8f25495520 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n\n@@ -1420,24 +1420,28 @@ public class PermissionBitAPIImpl implements PermissionAPI {\n \n \t@Override\n \tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\n-\t\tif(user==null) return false;\n+\t\tif(user==null) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\n+\t\tif(APILocator.getUserAPI().isCMSAdmin(user)){\n+\t\t\treturn true;\n+\t\t}\n \n \t\tBoolean hasPerm = false;\n \t\tfinal RoleAPI roleAPI = APILocator.getRoleAPI();\n \t\tfinal List<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\n-\t\tfor(final com.dotmarketing.business.Role r : roles) {\n-\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(r, false);\n+\t\tfor(final com.dotmarketing.business.Role role : roles) {\n+\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(role, false);\n \t\t\tif(UtilMethods.isSet(assetId)) {\n \t\t\t\tperms = perms.stream()\n \t\t\t\t\t\t.filter(permission -> permission.getInode().equalsIgnoreCase(assetId))\n \t\t\t\t\t\t.collect(\n \t\t\t\t\t\t\t\tCollectors.toList());\n \t\t\t}\n-\t\t\tfor (final Permission p : perms) {\n-\t\t\t\tif(p.getType().equals(permType.getCanonicalName())) {\n-\t\t\t\t\thasPerm = hasPerm | p.getPermission()>=permissionType;\n+\t\t\tfor (final Permission permission : perms) {\n+\t\t\t\tif(permission.getType().equals(permType.getCanonicalName())) {\n+\t\t\t\t\thasPerm = hasPerm | permission.getPermission()>=permissionType;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MzE1Mw==", "url": "https://github.com/dotCMS/core/pull/19326#discussion_r495093153", "bodyText": "rename to permission", "author": "jdotcms", "createdAt": "2020-09-25T16:14:40Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -1415,24 +1415,35 @@ private boolean isHost(final Permissionable permissionable) {\n \r\n \t@Override\r\n     public boolean doesUserHavePermissions(PermissionableType permType, int permissionType, User user) throws DotDataException {\r\n-    \tif(user==null) return false;\r\n+    \treturn doesUserHavePermissions(null,permType,permissionType,user);\r\n+    }\r\n+\r\n+\t@Override\r\n+\tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\r\n+\t\tif(user==null) return false;\r\n \r\n-    \tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\r\n+\t\tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\r\n \r\n-    \tBoolean hasPerm = false;\r\n-    \tRoleAPI roleAPI = APILocator.getRoleAPI();\r\n-\t\tList<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\r\n-\t\tfor(com.dotmarketing.business.Role r : roles) {\r\n+\t\tBoolean hasPerm = false;\r\n+\t\tfinal RoleAPI roleAPI = APILocator.getRoleAPI();\r\n+\t\tfinal List<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\r\n+\t\tfor(final com.dotmarketing.business.Role r : roles) {\r\n \t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(r, false);\r\n-\t\t\tfor (Permission p : perms) {\r\n+\t\t\tif(UtilMethods.isSet(assetId)) {\r\n+\t\t\t\tperms = perms.stream()\r\n+\t\t\t\t\t\t.filter(permission -> permission.getInode().equalsIgnoreCase(assetId))\r\n+\t\t\t\t\t\t.collect(\r\n+\t\t\t\t\t\t\t\tCollectors.toList());\r\n+\t\t\t}\r\n+\t\t\tfor (final Permission p : perms) {\r", "originalCommit": "97cd7ea03d7a3978f3f4f24817e9d98fa0987357", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwNzI5NQ==", "url": "https://github.com/dotCMS/core/pull/19326#discussion_r495107295", "bodyText": "done", "author": "erickgonzalez", "createdAt": "2020-09-25T16:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MzE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f0697b2fd86122de66d7efd2fa7d451055578932", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\nindex cbecdf5767..8f25495520 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java\n\n@@ -1420,24 +1420,28 @@ public class PermissionBitAPIImpl implements PermissionAPI {\n \n \t@Override\n \tpublic boolean doesUserHavePermissions(final String assetId, final PermissionableType permType, final int permissionType, final User user) throws DotDataException {\n-\t\tif(user==null) return false;\n+\t\tif(user==null) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\tif(APILocator.getUserAPI().isCMSAdmin(user)) return true;\n+\t\tif(APILocator.getUserAPI().isCMSAdmin(user)){\n+\t\t\treturn true;\n+\t\t}\n \n \t\tBoolean hasPerm = false;\n \t\tfinal RoleAPI roleAPI = APILocator.getRoleAPI();\n \t\tfinal List<com.dotmarketing.business.Role> roles = roleAPI.loadRolesForUser(user.getUserId(), false);\n-\t\tfor(final com.dotmarketing.business.Role r : roles) {\n-\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(r, false);\n+\t\tfor(final com.dotmarketing.business.Role role : roles) {\n+\t\t\tList<Permission> perms = APILocator.getPermissionAPI().getPermissionsByRole(role, false);\n \t\t\tif(UtilMethods.isSet(assetId)) {\n \t\t\t\tperms = perms.stream()\n \t\t\t\t\t\t.filter(permission -> permission.getInode().equalsIgnoreCase(assetId))\n \t\t\t\t\t\t.collect(\n \t\t\t\t\t\t\t\tCollectors.toList());\n \t\t\t}\n-\t\t\tfor (final Permission p : perms) {\n-\t\t\t\tif(p.getType().equals(permType.getCanonicalName())) {\n-\t\t\t\t\thasPerm = hasPerm | p.getPermission()>=permissionType;\n+\t\t\tfor (final Permission permission : perms) {\n+\t\t\t\tif(permission.getType().equals(permType.getCanonicalName())) {\n+\t\t\t\t\thasPerm = hasPerm | permission.getPermission()>=permissionType;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"}}, {"oid": "f0697b2fd86122de66d7efd2fa7d451055578932", "url": "https://github.com/dotCMS/core/commit/f0697b2fd86122de66d7efd2fa7d451055578932", "message": "#8538 #19267 feedback", "committedDate": "2020-09-25T16:41:28Z", "type": "commit"}]}