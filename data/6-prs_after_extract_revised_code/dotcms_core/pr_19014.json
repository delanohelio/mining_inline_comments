{"pr_number": 19014, "pr_title": "#18946 Bring back base-type fields", "pr_createdAt": "2020-07-30T23:55:33Z", "pr_url": "https://github.com/dotCMS/core/pull/19014", "timeline": [{"oid": "ae63b8af7253b328edfff63f7eb4b39f6d8e207b", "url": "https://github.com/dotCMS/core/commit/ae63b8af7253b328edfff63f7eb4b39f6d8e207b", "message": "#18946 Bring back base-type fields", "committedDate": "2020-07-30T23:54:25Z", "type": "commit"}, {"oid": "938f0a57b96df2176bac50e6fd74bfa3aaee9335", "url": "https://github.com/dotCMS/core/commit/938f0a57b96df2176bac50e6fd74bfa3aaee9335", "message": "#18946 Curl tests part I", "committedDate": "2020-07-31T23:33:04Z", "type": "commit"}, {"oid": "2c63ed23052d92048664b674038c1707c25665fd", "url": "https://github.com/dotCMS/core/commit/2c63ed23052d92048664b674038c1707c25665fd", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18946-bring-back-graphql-fields-for-base-type-interfaces", "committedDate": "2020-07-31T23:33:22Z", "type": "commit"}, {"oid": "728adadde5cd3cc57187adf422a1a9414a066722", "url": "https://github.com/dotCMS/core/commit/728adadde5cd3cc57187adf422a1a9414a066722", "message": "#18946 Last set of postman tests. Re-add fields for DotAsset", "committedDate": "2020-08-03T18:16:01Z", "type": "commit"}, {"oid": "d3c781de522ba250e69f04c4a5b14ae14b63a0a9", "url": "https://github.com/dotCMS/core/commit/d3c781de522ba250e69f04c4a5b14ae14b63a0a9", "message": "#18946 codacy feedback", "committedDate": "2020-08-03T19:02:13Z", "type": "commit"}, {"oid": "0d7fcc1a66e77daed2928537252931681dea50ec", "url": "https://github.com/dotCMS/core/commit/0d7fcc1a66e77daed2928537252931681dea50ec", "message": "#18946 exporting graphql tests again", "committedDate": "2020-08-03T21:19:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NDMyOA==", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r464674328", "bodyText": "Nitpick:\nNo constant for this field?", "author": "victoralfaro-dotcms", "createdAt": "2020-08-03T21:34:24Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/ContentFields.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.dotcms.graphql;\n+\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.BASE_TYPE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.CONTENT_TYPE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.IDENTIFIER;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.INODE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.LIVE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.MOD_DATE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.TITLE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.URL_MAP;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.WORKING;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.ARCHIVED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.FOLDER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HOST_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LOCKED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.MOD_USER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.OWNER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITLE_IMAGE_KEY;\n+import static graphql.Scalars.GraphQLBoolean;\n+import static graphql.Scalars.GraphQLID;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.datafetcher.FolderFieldDataFetcher;\n+import com.dotcms.graphql.datafetcher.LanguageDataFetcher;\n+import com.dotcms.graphql.datafetcher.SiteFieldDataFetcher;\n+import com.dotcms.graphql.datafetcher.TitleImageFieldDataFetcher;\n+import com.dotcms.graphql.datafetcher.UserDataFetcher;\n+import com.dotcms.graphql.util.TypeUtil.TypeFetcher;\n+import graphql.schema.GraphQLTypeReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Utility class that defines and returns the available fields for the {@link InterfaceType#CONTENTLET}\n+ */\n+public final class ContentFields {\n+\n+    private ContentFields() {}\n+\n+    public static Map<String, TypeFetcher> getContentFields() {\n+        final Map<String, TypeFetcher> contentFields = new HashMap<>();\n+        contentFields.put(MOD_DATE, new TypeFetcher(GraphQLString));\n+        contentFields.put(TITLE, new TypeFetcher(GraphQLString));\n+        contentFields.put(TITLE_IMAGE_KEY, new TypeFetcher(GraphQLTypeReference.typeRef(\"Binary\"), new TitleImageFieldDataFetcher()));\n+        contentFields.put(CONTENT_TYPE, new TypeFetcher(GraphQLString));\n+        contentFields.put(BASE_TYPE, new TypeFetcher(GraphQLString));\n+        contentFields.put(LIVE, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(WORKING, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(ARCHIVED_KEY, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(LOCKED_KEY, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(\"conLanguage\", new TypeFetcher(GraphQLTypeReference.typeRef(\"Language\"), new LanguageDataFetcher()));", "originalCommit": "0d7fcc1a66e77daed2928537252931681dea50ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NjM2OA==", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r464676368", "bodyText": "Nitpick: to match every other field, can we declare it in the same order? That is: private static final...", "author": "victoralfaro-dotcms", "createdAt": "2020-08-03T21:39:17Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "diffHunk": "@@ -62,15 +48,15 @@\n     FORM(FormContentType.class),\n     DOTASSET(DotAssetContentType.class);\n \n-    private Class<? extends ContentType> baseContentType;\n+    final private Class<? extends ContentType> baseContentType;\n \n     InterfaceType(final Class<? extends ContentType> baseContentType) {\n         this.baseContentType = baseContentType;\n     }\n \n     public static Set<String> CONTENT_INTERFACE_FIELDS = new HashSet<>();\n \n-    private static Map<String, GraphQLInterfaceType> interfaceTypes = new HashMap<>();\n+    final private static Map<String, GraphQLInterfaceType> interfaceTypes = new HashMap<>();", "originalCommit": "0d7fcc1a66e77daed2928537252931681dea50ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MjY0MA==", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r464682640", "bodyText": "Done", "author": "dsilvam", "createdAt": "2020-08-03T21:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NjM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "baaca74e6d66dd4a28c2fce4af74c1278a9fcb6e", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java b/dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java\nindex 702bf5b86e..978e98d26a 100644\n--- a/dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java\n+++ b/dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java\n\n@@ -48,7 +48,7 @@ public enum InterfaceType {\n     FORM(FormContentType.class),\n     DOTASSET(DotAssetContentType.class);\n \n-    final private Class<? extends ContentType> baseContentType;\n+    private final Class<? extends ContentType> baseContentType;\n \n     InterfaceType(final Class<? extends ContentType> baseContentType) {\n         this.baseContentType = baseContentType;\n"}}, {"oid": "baaca74e6d66dd4a28c2fce4af74c1278a9fcb6e", "url": "https://github.com/dotCMS/core/commit/baaca74e6d66dd4a28c2fce4af74c1278a9fcb6e", "message": "#18946 code-review", "committedDate": "2020-08-03T21:51:48Z", "type": "commit"}, {"oid": "2e09acbac4e60b285282528632a925f63be3192c", "url": "https://github.com/dotCMS/core/commit/2e09acbac4e60b285282528632a925f63be3192c", "message": "#18946 better tests", "committedDate": "2020-08-03T23:32:40Z", "type": "commit"}, {"oid": "76074deb19660440f3a6970132f1887aa9ada885", "url": "https://github.com/dotCMS/core/commit/76074deb19660440f3a6970132f1887aa9ada885", "message": "#18946 postman tests", "committedDate": "2020-08-04T18:36:56Z", "type": "commit"}, {"oid": "13ca4c75b00bab15023b664fd51dc44d10fd8afb", "url": "https://github.com/dotCMS/core/commit/13ca4c75b00bab15023b664fd51dc44d10fd8afb", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18946-bring-back-graphql-fields-for-base-type-interfaces", "committedDate": "2020-08-04T19:27:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDEyMw==", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r465284123", "bodyText": "Codacy found an issue: This statement should have braces", "author": "dev-dotcms", "createdAt": "2020-08-04T19:34:53Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "diffHunk": "@@ -110,32 +79,55 @@\n         interfaceTypes.put(\"CONTENT\", createInterfaceType(CONTENT_INTERFACE_NAME, contentFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> fileAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(fileAssetFields, ImmutableFileAssetContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"FILEASSET\", createInterfaceType(FILE_INTERFACE_NAME, fileAssetFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> pageAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(pageAssetFields, ImmutablePageContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"HTMLPAGE\", createInterfaceType(PAGE_INTERFACE_NAME, pageAssetFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> personaFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(personaFields, ImmutablePersonaContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"PERSONA\", createInterfaceType(PERSONA_INTERFACE_NAME, personaFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> widgetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(widgetFields, ImmutableWidgetContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"WIDGET\", createInterfaceType(WIDGET_INTERFACE_NAME, widgetFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> vanityUrlFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(vanityUrlFields, ImmutableVanityUrlContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"VANITY_URL\", createInterfaceType(VANITY_URL_INTERFACE_NAME, vanityUrlFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> keyValueFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(keyValueFields, ImmutableKeyValueContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"KEY_VALUE\", createInterfaceType(KEY_VALUE_INTERFACE_NAME, keyValueFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> formFields = new HashMap<>(contentFields);\n-        interfaceTypes.put(\"FORM\", createInterfaceType(FORM_INTERFACE_NAME, formFields, new ContentResolver()));\n+        addBaseTypeFields(formFields, ImmutableFormContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n+        interfaceTypes.put(\"FORM\", createInterfaceType(FORM_INTERFACE_NAME, formFields,\n+                new ContentResolver()));\n \n         final Map<String, TypeFetcher> dotAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(dotAssetFields, ImmutableDotAssetContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"DOTASSET\", createInterfaceType(DOTASSET_INTERFACE_NAME, dotAssetFields, new ContentResolver()));\n     }\n \n-    public static Map<String, TypeFetcher> getContentFields() {\n-        return contentFields;\n+    private static void addBaseTypeFields(Map<String, TypeFetcher> baseTypeFields,\n+            List<Field> requiredFormFields) {\n+        for (final Field formField : requiredFormFields) {\n+            if(!formField.fixed()) continue;", "originalCommit": "13ca4c75b00bab15023b664fd51dc44d10fd8afb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDE0Nw==", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r465284147", "bodyText": "Codacy found an issue: The String literal \"dummy\" appears 7 times in this file; the first occurrence is on line 81", "author": "dev-dotcms", "createdAt": "2020-08-04T19:34:54Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "diffHunk": "@@ -110,32 +79,55 @@\n         interfaceTypes.put(\"CONTENT\", createInterfaceType(CONTENT_INTERFACE_NAME, contentFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> fileAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(fileAssetFields, ImmutableFileAssetContentType.builder().name(\"dummy\")", "originalCommit": "13ca4c75b00bab15023b664fd51dc44d10fd8afb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}