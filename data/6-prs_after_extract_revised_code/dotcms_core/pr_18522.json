{"pr_number": 18522, "pr_title": "Issue 18419", "pr_createdAt": "2020-05-19T20:14:48Z", "pr_url": "https://github.com/dotCMS/core/pull/18522", "timeline": [{"oid": "dd6ee94f1ef4f32bbe9d97638aa0d2779ade14d3", "url": "https://github.com/dotCMS/core/commit/dd6ee94f1ef4f32bbe9d97638aa0d2779ade14d3", "message": "#18419 refactor createfolders endpoint", "committedDate": "2020-05-19T20:10:20Z", "type": "commit"}, {"oid": "3e99ae8e939ce6ea352425ecbc542d232a52eab0", "url": "https://github.com/dotCMS/core/commit/3e99ae8e939ce6ea352425ecbc542d232a52eab0", "message": "#18419 add exception to mapper", "committedDate": "2020-05-19T20:11:04Z", "type": "commit"}, {"oid": "1bb82325567c09e1480af55b73ff5d1eec24d8f6", "url": "https://github.com/dotCMS/core/commit/1bb82325567c09e1480af55b73ff5d1eec24d8f6", "message": "#18419 tests", "committedDate": "2020-05-19T20:11:43Z", "type": "commit"}, {"oid": "e6f478ace78ea29d4e8dae4a409ae7b360c0def6", "url": "https://github.com/dotCMS/core/commit/e6f478ace78ea29d4e8dae4a409ae7b360c0def6", "message": "#18419 folderapi not checking host null", "committedDate": "2020-05-19T21:19:13Z", "type": "commit"}, {"oid": "4a6538db5e5df1a55f3ca7eb13d6e2d4248b5637", "url": "https://github.com/dotCMS/core/commit/4a6538db5e5df1a55f3ca7eb13d6e2d4248b5637", "message": "#18419 feedback changes", "committedDate": "2020-05-19T21:21:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDQzNA==", "url": "https://github.com/dotCMS/core/pull/18522#discussion_r428054434", "bodyText": "here we should use the Exception Mapper", "author": "freddyucv", "createdAt": "2020-05-20T14:23:27Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -70,41 +61,24 @@ public final Response createFolders(@Context final HttpServletRequest httpServle\n                                         @Context final HttpServletResponse httpServletResponse,\n                                         final List<String> paths,\n                                         @PathParam(\"siteName\") final String siteName) {\n-        Response response = null;\n-        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requiredFrontendUser(false)\n+                        .requestAndResponse(httpServletRequest, httpServletResponse)\n+                        .init();\n+\n         final User user = initData.getUser();\n-        final List<Map<String, Object>> folderResults;\n \n         try {\n-            Locale locale = LocaleUtil.getLocale(user, httpServletRequest);\n-            FolderHelper.FolderResults results = folderHelper.createFolders(paths, siteName, user);\n-            folderResults = results.folders\n-                    .stream()\n-                    .map(folder -> {\n-                        try {\n-                            return folder.getMap();\n-                        } catch (Exception e) {\n-                            Logger.error(this, \"Data Exception while converting to map\", e);\n-                            throw new DotRuntimeException(\"Data Exception while converting to map\", e);\n-                        }\n-                    })\n-                    .collect(Collectors.toList());\n-            ;\n+            final List<Map<String, Object>> createdFolders = folderHelper.createFolders(paths, siteName, user);\n \n-            response = Response.ok(new ResponseEntityView\n-                    (map(\"result\", folderResults),\n-                            results.getErrorEntities(), null,\n-                            this.i18NUtil.getMessagesMap(locale, \"Invalid-option-selected\",\n-                                    \"cancel\")\n-                    )).build(); // 200\n-        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n-            Logger.error(this, \"Error handling Save Folder Post Request\", e);\n-            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n-                throw new ForbiddenException(e);\n-            }\n-            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+            return Response.ok(new ResponseEntityView(createdFolders)).build(); // 200\n+        } catch (Exception e) {\n+            Logger.error(this.getClass(),\"Exception saving/creating folders.\", e);\n+            return ResponseUtil.mapExceptionResponse(e);", "originalCommit": "4a6538db5e5df1a55f3ca7eb13d6e2d4248b5637", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4Njg4OQ==", "url": "https://github.com/dotCMS/core/pull/18522#discussion_r428086889", "bodyText": "do you have an example of the exception mapper? Because I based on the AppsResource that is the latest resource created and this is how is handling the exceptions.", "author": "erickgonzalez", "createdAt": "2020-05-20T15:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4Njc0Mg==", "url": "https://github.com/dotCMS/core/pull/18522#discussion_r428186742", "bodyText": "done", "author": "erickgonzalez", "createdAt": "2020-05-20T17:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "3f7cd46a009f07407a7dc798256344bd0d800a91", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java b/dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java\nindex 385ae4d329..81cf3d2626 100644\n--- a/dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java\n+++ b/dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java\n\n@@ -60,7 +61,8 @@ public class FolderResource implements Serializable {\n     public final Response createFolders(@Context final HttpServletRequest httpServletRequest,\n                                         @Context final HttpServletResponse httpServletResponse,\n                                         final List<String> paths,\n-                                        @PathParam(\"siteName\") final String siteName) {\n+                                        @PathParam(\"siteName\") final String siteName)\n+            throws DotSecurityException, DotDataException {\n \n         final InitDataObject initData =\n                 new WebResource.InitBuilder(webResource)\n"}}, {"oid": "3f7cd46a009f07407a7dc798256344bd0d800a91", "url": "https://github.com/dotCMS/core/commit/3f7cd46a009f07407a7dc798256344bd0d800a91", "message": "#18419 feedback", "committedDate": "2020-05-20T20:12:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MzY1OA==", "url": "https://github.com/dotCMS/core/pull/18522#discussion_r428283658", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-05-20T20:19:04Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/folder/FolderResourceTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.dotcms.rest.api.v1.folder;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.Base64;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class FolderResourceTest {\n+\n+    static HttpServletResponse response;\n+    static FolderResource resource;\n+    static FolderAPI folderAPI;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "3f7cd46a009f07407a7dc798256344bd0d800a91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MzY2OQ==", "url": "https://github.com/dotCMS/core/pull/18522#discussion_r428283669", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.rest.api.v1.authentication.ResponseUtil'", "author": "dev-dotcms", "createdAt": "2020-05-20T20:19:05Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -1,27 +1,23 @@\n package com.dotcms.rest.api.v1.folder;\n \n-import static com.dotcms.util.CollectionsUtils.map;\n-\n import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n import com.dotcms.rest.InitDataObject;\n import com.dotcms.rest.ResponseEntityView;\n import com.dotcms.rest.WebResource;\n import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.rest.api.v1.authentication.ResponseUtil;", "originalCommit": "3f7cd46a009f07407a7dc798256344bd0d800a91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}