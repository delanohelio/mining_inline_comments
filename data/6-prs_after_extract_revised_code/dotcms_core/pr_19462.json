{"pr_number": 19462, "pr_title": "#19424 A regex pattern is used to extract the task id to support calver notation", "pr_createdAt": "2020-10-16T20:13:31Z", "pr_url": "https://github.com/dotCMS/core/pull/19462", "timeline": [{"oid": "1d585f43454e962323e2fcdf66bd8480a3f5c7d3", "url": "https://github.com/dotCMS/core/commit/1d585f43454e962323e2fcdf66bd8480a3f5c7d3", "message": "#19424 A regex pattern is used to extract the task id to support calver notation", "committedDate": "2020-10-16T20:11:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMzgyNw==", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r506703827", "bodyText": "it is usually a good idea to have the pattern Compile declared static as it is immutable. and therefore thread-safe.\nThe matcher has to be recreated every time.  So I would  move final Pattern pattern = Pattern.compile(\"[0-9]+\"); to a static constant.", "author": "fabrizzio-dotCMS", "createdAt": "2020-10-16T20:23:37Z", "path": "dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java", "diffHunk": "@@ -149,9 +152,22 @@ public void executeStartUpTasks() throws DotDataException {\n \n         \n     }\n-    \n-    \n-    \n+\n+    /**\n+     * Returns the id part of a task name\n+     * @param taskName\n+     * @return\n+     */\n+    @VisibleForTesting\n+    String getTaskId(final String taskName){\n+        final Pattern pattern = Pattern.compile(\"[0-9]+\");", "originalCommit": "1d585f43454e962323e2fcdf66bd8480a3f5c7d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80deb82826439dad9c6573b3fbceda4c1f874c58", "chunk": "diff --git a/dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java b/dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java\nindex ebaaa28e93..b5409c9723 100644\n--- a/dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java\n+++ b/dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java\n\n@@ -160,8 +160,7 @@ public class StartupTasksExecutor {\n      */\n     @VisibleForTesting\n     String getTaskId(final String taskName){\n-        final Pattern pattern = Pattern.compile(\"[0-9]+\");\n-        final Matcher matcher = pattern.matcher(taskName);\n+        final Matcher matcher = TASK_ID_PATTERN.matcher(taskName);\n \n         if (matcher.find()){\n             return matcher.group();\n"}}, {"oid": "80deb82826439dad9c6573b3fbceda4c1f874c58", "url": "https://github.com/dotCMS/core/commit/80deb82826439dad9c6573b3fbceda4c1f874c58", "message": "#19424 Applying code review suggestion", "committedDate": "2020-10-16T21:47:14Z", "type": "commit"}, {"oid": "f4036ad7a45795becd6675a319bb0f841c3da127", "url": "https://github.com/dotCMS/core/commit/f4036ad7a45795becd6675a319bb0f841c3da127", "message": "#19424 Including new IT in MainSuite", "committedDate": "2020-10-16T22:11:06Z", "type": "commit"}, {"oid": "8c26d320769d376686fe73a79ef43a66769098f5", "url": "https://github.com/dotCMS/core/commit/8c26d320769d376686fe73a79ef43a66769098f5", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-19424-update-logic-in-StartupTasksExecutor-to-support-calver", "committedDate": "2020-10-19T14:52:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjI3Mg==", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826272", "bodyText": "Codacy found an issue: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-10-19T15:02:52Z", "path": "dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java", "diffHunk": "@@ -169,7 +184,7 @@ public void executeUpgrades() throws DotDataException {\n         for (Class<?> c : TaskLocatorUtil.getStartupRunOnceTaskClasses()) {\n             name = c.getCanonicalName();\n             name = name.substring(name.lastIndexOf(\".\") + 1);\n-            String id = name.substring(4, 9);\n+            String id = getTaskId(name);", "originalCommit": "8c26d320769d376686fe73a79ef43a66769098f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjI4Nw==", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826287", "bodyText": "Codacy found an issue: JUnit 4 tests that execute tests should use the @Test annotation, JUnit 5 tests should use @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest", "author": "dev-dotcms", "createdAt": "2020-10-19T15:02:53Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/StartupTasksExecutorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.dotmarketing.startup;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class StartupTasksExecutorTest {\n+\n+    @DataProvider", "originalCommit": "8c26d320769d376686fe73a79ef43a66769098f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjMwMg==", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826302", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-10-19T15:02:54Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/StartupTasksExecutorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.dotmarketing.startup;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class StartupTasksExecutorTest {\n+\n+    @DataProvider\n+    public static Object [] testCases() {\n+        return new TestCase []{\n+                new TestCase(\"201009\", \"Task201009TestMethod\"),\n+                new TestCase(\"2010091\", \"Task2010091TestMethod\"),\n+                new TestCase(\"05030\", \"Task05030TestMethod\")\n+        };\n+    }\n+\n+    private static class TestCase{\n+        String taskId;\n+        String taskName;\n+\n+        public TestCase(final String taskId, final String taskName){\n+            this.taskId = taskId;\n+            this.taskName = taskName;\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{", "originalCommit": "8c26d320769d376686fe73a79ef43a66769098f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjMyNA==", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826324", "bodyText": "Codacy found an issue: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-10-19T15:02:55Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/StartupTasksExecutorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.dotmarketing.startup;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class StartupTasksExecutorTest {\n+\n+    @DataProvider\n+    public static Object [] testCases() {\n+        return new TestCase []{\n+                new TestCase(\"201009\", \"Task201009TestMethod\"),\n+                new TestCase(\"2010091\", \"Task2010091TestMethod\"),\n+                new TestCase(\"05030\", \"Task05030TestMethod\")\n+        };\n+    }\n+\n+    private static class TestCase{\n+        String taskId;\n+        String taskName;\n+\n+        public TestCase(final String taskId, final String taskName){\n+            this.taskId = taskId;\n+            this.taskName = taskName;\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link StartupTasksExecutor#getTaskId(String)}\n+     * Test case: A task name whose id has a specific length\n+     * Expected result: It should extract the length correctly\n+     * @param testCase\n+     */\n+    @Test\n+    @UseDataProvider(\"testCases\")\n+    public void testGetTaskId(TestCase testCase){\n+        final String id = StartupTasksExecutor.getInstance().getTaskId(testCase.taskName);", "originalCommit": "8c26d320769d376686fe73a79ef43a66769098f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}