{"pr_number": 17960, "pr_title": "Issue 17907 improved host listing", "pr_createdAt": "2020-02-06T19:12:25Z", "pr_url": "https://github.com/dotCMS/core/pull/17960", "timeline": [{"oid": "503759c2f503cc0d6d05157e736bc1d88c8c0e85", "url": "https://github.com/dotCMS/core/commit/503759c2f503cc0d6d05157e736bc1d88c8c0e85", "message": "#17907 adding  pagination", "committedDate": "2020-01-29T16:47:48Z", "type": "commit"}, {"oid": "1e54a6eb7e6bccfdfdc22d0302b4be765b4f1cd1", "url": "https://github.com/dotCMS/core/commit/1e54a6eb7e6bccfdfdc22d0302b4be765b4f1cd1", "message": "#17907 fix the total elements count", "committedDate": "2020-01-30T14:20:07Z", "type": "commit"}, {"oid": "d744d472293b1a5598fb44c53c4987e5094137e1", "url": "https://github.com/dotCMS/core/commit/d744d472293b1a5598fb44c53c4987e5094137e1", "message": "#17907  fixing total records count", "committedDate": "2020-01-30T14:26:55Z", "type": "commit"}, {"oid": "4c4cf339223c8f47af6bc846e0dc13cf44ecf0f4", "url": "https://github.com/dotCMS/core/commit/4c4cf339223c8f47af6bc846e0dc13cf44ecf0f4", "message": "#17907 pagination perfomrance improvements take 1", "committedDate": "2020-01-31T04:36:15Z", "type": "commit"}, {"oid": "11feb5bc73ac353fa5082a6896cca49e7999a8ee", "url": "https://github.com/dotCMS/core/commit/11feb5bc73ac353fa5082a6896cca49e7999a8ee", "message": "#17907  fixing pagination performance", "committedDate": "2020-02-05T14:29:37Z", "type": "commit"}, {"oid": "93d0d55a6897b1d08604180f9fc3a23e274d0ccd", "url": "https://github.com/dotCMS/core/commit/93d0d55a6897b1d08604180f9fc3a23e274d0ccd", "message": "#17907  language keys", "committedDate": "2020-02-05T14:30:44Z", "type": "commit"}, {"oid": "44ce2494006d2253cb87b337156b263fbbd79978", "url": "https://github.com/dotCMS/core/commit/44ce2494006d2253cb87b337156b263fbbd79978", "message": "#17907 service-integrations host pagination. + tests.", "committedDate": "2020-02-06T19:02:23Z", "type": "commit"}, {"oid": "7b929cccd5c314d25c96224c52773f8ce274fe5e", "url": "https://github.com/dotCMS/core/commit/7b929cccd5c314d25c96224c52773f8ce274fe5e", "message": "#17907 empty useless class removed", "committedDate": "2020-02-06T19:18:36Z", "type": "commit"}, {"oid": "f6b350224a98e9830eab5122fed79bbad6fd5e89", "url": "https://github.com/dotCMS/core/commit/f6b350224a98e9830eab5122fed79bbad6fd5e89", "message": "#17907 fix typo", "committedDate": "2020-02-06T19:20:24Z", "type": "commit"}, {"oid": "9f76a534385cd52333b057ed9fc3bbc3ec21f44b", "url": "https://github.com/dotCMS/core/commit/9f76a534385cd52333b057ed9fc3bbc3ec21f44b", "message": "#17907", "committedDate": "2020-02-07T01:33:32Z", "type": "commit"}, {"oid": "2e3c8153d43926f2cc65e4688b3e36dbd4ac31e4", "url": "https://github.com/dotCMS/core/commit/2e3c8153d43926f2cc65e4688b3e36dbd4ac31e4", "message": "#17907 feedback", "committedDate": "2020-02-07T01:38:52Z", "type": "commit"}, {"oid": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "url": "https://github.com/dotCMS/core/commit/9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "message": "#17907 feedback", "committedDate": "2020-02-07T01:41:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzI5Nw==", "url": "https://github.com/dotCMS/core/pull/17960#discussion_r376177297", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-07T01:47:26Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/secret/view/SiteView.java", "diffHunk": "@@ -25,6 +26,20 @@\n     public SiteView(final String id, final String name) {\n         this.id = id;\n         this.name = name;\n+        this.configured = false;\n+        this.secrets = null;\n+    }\n+\n+    /**\n+     * If we want to build a secret-less view but showing that the site has integrations.\n+     * @param id\n+     * @param name\n+     * @param configured\n+     */\n+    public SiteView(final String id, final String name, final boolean configured) {", "originalCommit": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzMwMg==", "url": "https://github.com/dotCMS/core/pull/17960#discussion_r376177302", "bodyText": "Issue found: The String literal \"/baseURL\" appears 7 times in this file; the first occurrence is on line 142", "author": "dev-dotcms", "createdAt": "2020-02-07T01:47:28Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/secret/ServiceIntegrationResourceTest.java", "diffHunk": "@@ -134,6 +138,9 @@ public void Test_Create_service_descriptor_Then_Create_Service_Integration_Then_\n         );\n         final HttpServletRequest request = mock(HttpServletRequest.class);\n         final HttpServletResponse response = mock(HttpServletResponse.class);\n+\n+        when(request.getRequestURI()).thenReturn(\"/baseURL\");", "originalCommit": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzMwNQ==", "url": "https://github.com/dotCMS/core/pull/17960#discussion_r376177305", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-02-07T01:47:29Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/secret/SiteViewPaginator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.dotcms.rest.api.v1.secret;\n+\n+import com.dotcms.rest.api.v1.secret.view.SiteView;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.PaginationException;\n+import com.dotcms.util.pagination.PaginatorOrdered;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.common.model.ContentletSearch;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.model.User;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * PaginatorOrdered implementation for objects of type SiteView.\n+ * This Pagination isn't very typical in the sense that items are not retrieved from a database.\n+ * Sorting and filtering itself happens right here on top of the list of elements itself.\n+ */\n+public class SiteViewPaginator implements PaginatorOrdered<SiteView> {\n+\n+    private static final String CONTENT_TYPE_HOST_QUERY = \"+contentType:Host +working:true \";\n+    private static final String CONTENT_TYPE_HOST_WITH_TITLE_QUERY = \"+contentType:Host +working:true +title:*%s*\";\n+\n+    private final Supplier<Set<String>> configuredSitesSupplier;\n+    private final HostAPI hostAPI;\n+    private final ContentletAPI contentletAPI;\n+\n+    @VisibleForTesting\n+    public SiteViewPaginator(final Supplier<Set<String>> configuredSitesSupplier,\n+            final HostAPI hostAPI, final ContentletAPI contentletAPI) {\n+        this.configuredSitesSupplier = configuredSitesSupplier;\n+        this.hostAPI = hostAPI;\n+        this.contentletAPI = contentletAPI;\n+    }\n+\n+    /**\n+     * This custom getItem implementation will extract join and apply filtering sorting and pagination.\n+     * @param user user to filter\n+     * @param filter extra filter parameter\n+     * @param limit Number of items to return\n+     * @param offset offset\n+     * @param orderBy This param is ignored.\n+     * @param direction This param is ignored.\n+     * @param extraParams This param is ignored.\n+     * @return SiteView pageItems.\n+     * @throws PaginationException\n+     */\n+    @Override\n+    public PaginatedArrayList<SiteView> getItems(final User user, final String filter,\n+            final int limit, final int offset,\n+            final String orderBy, final OrderDirection direction,\n+            final Map<String, Object> extraParams) throws PaginationException {\n+        try {\n+            //get all sites. Even though this comes from the index. it is permissions driven.\n+            final List<String> allSitesIdentifiers = getHostIdentifiers(user, filter);\n+\n+            final long totalCount = allSitesIdentifiers.size();\n+\n+            //This values are fed from the outside through the serviceIntegrationAPI.\n+            final Set<String> sitesWithConfigurations = configuredSitesSupplier.get();\n+            final LinkedHashSet<String> allSites = new LinkedHashSet<>(allSitesIdentifiers);\n+\n+            //By doing this we remove from the configured-sites collection whatever sites didn't match the search.\n+            //If it isn't part of the search results also discard from the configured sites we intent to show.\n+            final LinkedHashSet<String> configuredSites = sitesWithConfigurations.stream()\n+                    .filter(allSites::contains)\n+                    .collect(Collectors.toCollection(LinkedHashSet::new));\n+\n+            final List<String> finalList = join(configuredSites, allSitesIdentifiers).stream()\n+                    .skip(offset).limit(limit).collect(Collectors.toList());\n+\n+            //And finally load from db and map into the desired view.\n+            final List<SiteView> siteViews = finalList.stream().map(id -> {\n+                try {\n+                    return hostAPI.find(id, user, false);\n+                } catch (DotDataException | DotSecurityException e) {\n+                    Logger.error(SiteViewPaginator.class, e);\n+                }\n+                return null;\n+            }).filter(Objects::nonNull).map(host -> {\n+                final boolean configured = configuredSites.contains(host.getIdentifier());\n+                return new SiteView(host.getIdentifier(), host.getName(), configured);\n+            }).collect(Collectors.toList());\n+\n+            //And then we're done and out of here.\n+            final PaginatedArrayList<SiteView> paginatedArrayList = new PaginatedArrayList<>();\n+            paginatedArrayList.setTotalResults(totalCount);\n+            paginatedArrayList.addAll(siteViews);\n+            return paginatedArrayList;\n+\n+        } catch (Exception e) {", "originalCommit": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzMwNg==", "url": "https://github.com/dotCMS/core/pull/17960#discussion_r376177306", "bodyText": "Issue found: The String literal \"key\" appears 4 times in this file; the first occurrence is on line 116", "author": "dev-dotcms", "createdAt": "2020-02-07T01:47:30Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/secret/ServiceIntegrationResource.java", "diffHunk": "@@ -111,7 +113,8 @@ public final Response listAvailableServices(@Context final HttpServletRequest re\n     public final Response getServiceIntegrationByKey(\n             @Context final HttpServletRequest request,\n             @Context final HttpServletResponse response,\n-            @PathParam(\"key\") final String serviceKey\n+            @PathParam(\"key\") final String serviceKey,", "originalCommit": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzMxMg==", "url": "https://github.com/dotCMS/core/pull/17960#discussion_r376177312", "bodyText": "Issue found: Do not add empty strings", "author": "dev-dotcms", "createdAt": "2020-02-07T01:47:31Z", "path": "dotCMS/src/test/java/com/dotcms/util/pagination/SiteViewPaginatorUnitTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.dotcms.util.pagination;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.rest.api.v1.secret.SiteViewPaginator;\n+import com.dotcms.rest.api.v1.secret.view.SiteView;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.common.model.ContentletSearch;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.google.common.collect.Ordering;\n+import com.liferay.portal.model.User;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class SiteViewPaginatorUnitTest {\n+\n+    private static final char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n+\n+    @Test\n+    public void Test_Get_Items_Page_Size()\n+            throws DotSecurityException, DotDataException {\n+\n+        final int max = alphabet.length - 1;\n+        final User user = mockAdminUser();\n+        final List<String> allSites = mockAllSitesIdentifiers(max);\n+        final Set<String> sitesWithIntegrations = mockSitesWithIntegrations(allSites, 10);\n+        //System.out.println(\"Sites with integrations: \");\n+        sitesWithIntegrations.forEach(System.out::println);\n+        final HostAPI hostAPI = mock(HostAPI.class);\n+        final long time = System.currentTimeMillis();\n+        int i = 0;\n+        //System.out.println(\"Site names: \");\n+        for(final String identifier:allSites){\n+            final Host host;\n+            if(Host.SYSTEM_HOST.equals(identifier)){\n+                host = mockSite(identifier, \"System Host\");\n+                when(hostAPI.find(eq(identifier),any(User.class), anyBoolean())).thenReturn(host);\n+            } else {\n+                final String name = String.format(\"%s%d\",alphabet[i++],time);\n+                //System.out.println(name);\n+                host = mockSite(identifier, name);\n+            }\n+            when(hostAPI.find(eq(identifier),any(User.class), anyBoolean())).thenReturn(host);\n+        }\n+\n+        final List<ContentletSearch> mockedSearch = mockSearchResults(allSites);\n+        final ContentletAPI contentletAPI = mock(ContentletAPI.class);\n+        when(contentletAPI.searchIndex(anyString(), anyInt(), anyInt(), eq(\"title\"), any(User.class), anyBoolean())).thenReturn(mockedSearch);\n+        final Supplier<Set<String>> configuredSitesSupplier = () -> sitesWithIntegrations;\n+\n+        final SiteViewPaginator paginator = new SiteViewPaginator(configuredSitesSupplier, hostAPI, contentletAPI);\n+        final int limit = sitesWithIntegrations.size();\n+        final PaginatedArrayList<SiteView> items = paginator\n+                .getItems(user, null, limit, 0, null, null, Collections.emptyMap());\n+\n+        Assert.assertNotNull(items);\n+        Assert.assertFalse(items.isEmpty());\n+        Assert.assertEquals(items.get(0).getId(), Host.SYSTEM_HOST);\n+        Assert.assertEquals(items.size(), limit);\n+        //First item is'nt necessarily configured. So we start counting from 1.\n+        for(int j=1; j < limit; j++){\n+            Assert.assertTrue(items.get(j).isConfigured());\n+        }\n+    }\n+\n+    @Test\n+    public void Test_Get_Items_Sorted_Pages()\n+            throws DotSecurityException, DotDataException {\n+        final User user = mockAdminUser();\n+        final int maxConfigured = 6; //Only the first page is expected to bring back configured items.\n+        final List<String> allSites = mockAllSitesIdentifiers(alphabet.length - 1);\n+        final HostAPI hostAPI = mock(HostAPI.class);\n+        final List<String> allSitesSortedIdentifiers = new LinkedList<>();\n+        final long time = System.currentTimeMillis();\n+        //final Map<String,String> debugInfo = new TreeMap<>();\n+        int i = 0;\n+        //System.out.println(\"Site names: \");\n+        for(final String identifier:allSites){\n+            final Host host;\n+            final String name;\n+            if(Host.SYSTEM_HOST.equals(identifier)){\n+               name = \"System Host\";\n+               host = mockSite(identifier, name);\n+               when(hostAPI.find(eq(identifier),any(User.class), anyBoolean())).thenReturn(host);\n+            } else {\n+               name = String.format(\"%s%d\",alphabet[i++],time);\n+               host = mockSite(identifier, name);\n+            }\n+            //System.out.println(identifier + \":\" + name);\n+            //debugInfo.put(identifier,name);\n+            when(hostAPI.find(eq(identifier),any(User.class), anyBoolean())).thenReturn(host);\n+            allSitesSortedIdentifiers.add(identifier);\n+        }\n+\n+        final Set<String> sitesWithIntegrations = mockSitesWithIntegrations(allSites, maxConfigured);\n+        //System.out.println(\"Sites with integrations: \");\n+        //for (final String configurationIdentifier : sitesWithIntegrations) {\n+        //    System.out.println( configurationIdentifier + \":\"  + debugInfo.get(configurationIdentifier));\n+        //}\n+\n+        final List<ContentletSearch> mockedSearch = mockSearchResults(allSitesSortedIdentifiers);\n+        final ContentletAPI contentletAPI = mock(ContentletAPI.class);\n+        when(contentletAPI.searchIndex(anyString(), anyInt(), anyInt(), eq(\"title\"), any(User.class), anyBoolean())).thenReturn(mockedSearch);\n+        final Supplier<Set<String>> configuredSitesSupplier = () -> sitesWithIntegrations;\n+\n+        final SiteViewPaginator paginator = new SiteViewPaginator(configuredSitesSupplier, hostAPI, contentletAPI);\n+\n+        //First batch of 6.\n+        int limit = sitesWithIntegrations.size();\n+        final PaginatedArrayList<SiteView> itemsPage1 = paginator\n+                .getItems(user, null, limit, 0, null, null, Collections.emptyMap());\n+\n+        Assert.assertNotNull(itemsPage1);\n+        Assert.assertFalse(itemsPage1.isEmpty());\n+        Assert.assertEquals(Host.SYSTEM_HOST,itemsPage1.get(0).getId());\n+        itemsPage1.remove(0);\n+\n+        //Requesting first page with all configured items.\n+        final List<String> pageNamesPage1 = itemsPage1.stream().map(SiteView::getName).collect(Collectors.toList());\n+        Assert.assertTrue(Ordering.<String> natural().isOrdered(pageNamesPage1));\n+\n+        //Then the rest.\n+        final PaginatedArrayList<SiteView> itemsPage2 = paginator\n+                .getItems(user, null, 100, limit + 1 , null, null, Collections.emptyMap());\n+\n+        final List<String> pageNamesPage2 = itemsPage2.stream().map(SiteView::getName).collect(Collectors.toList());\n+        Assert.assertTrue(Ordering.<String> natural().isOrdered(pageNamesPage2));\n+\n+        //Test a page with both mixed configured and non-configured items are sorted.\n+        limit = sitesWithIntegrations.size() + 2;\n+        final PaginatedArrayList<SiteView> itemsPageMixed = paginator\n+                .getItems(user, null, limit, 0, null, null, Collections.emptyMap());\n+\n+        final List<String> pageNamesConfiguredItemsPage = itemsPageMixed.stream()\n+                .filter(siteView -> !Host.SYSTEM_HOST.equals(siteView.getId()))\n+                .filter(SiteView::isConfigured).map(SiteView::getName).collect(Collectors.toList());\n+        Assert.assertTrue(Ordering.<String>natural().isOrdered(pageNamesConfiguredItemsPage));\n+\n+        final List<String> pageNamesNonConfiguredItemsPage = itemsPageMixed.stream()\n+                .filter(siteView -> !Host.SYSTEM_HOST.equals(siteView.getId()))\n+                .filter(siteView -> !siteView.isConfigured()).map(SiteView::getName)\n+                .collect(Collectors.toList());\n+        Assert.assertTrue(Ordering.<String>natural().isOrdered(pageNamesNonConfiguredItemsPage));\n+\n+    }\n+\n+    private Host mockSite(final String identifier,final String name) {\n+        final Host host = mock(Host.class);\n+        when(host.getHostname()).thenReturn(name);\n+        when(host.getName()).thenReturn(name);\n+        when(host.getInode()).thenReturn(UUIDUtil.uuid());\n+        when(host.getIdentifier()).thenReturn(identifier);\n+        return host;\n+    }\n+\n+    private User mockAdminUser() {\n+        final User adminUser = mock(User.class);\n+        when(adminUser.getUserId()).thenReturn(\"dotcms.org.1\");\n+        when(adminUser.getEmailAddress()).thenReturn(\"admin@dotcms.com\");\n+        when(adminUser.getFirstName()).thenReturn(\"Admin\");\n+        when(adminUser.getLastName()).thenReturn(\"User\");\n+        return adminUser;\n+    }\n+\n+    private List<String> mockAllSitesIdentifiers(final int allSitesNumber){\n+        final List<String> allSites = new LinkedList<>();\n+        allSites.add(0, Host.SYSTEM_HOST);\n+        for(int i=0; i<= allSitesNumber; i++){\n+            allSites.add(\"\"+i);", "originalCommit": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzMxNA==", "url": "https://github.com/dotCMS/core/pull/17960#discussion_r376177314", "bodyText": "Issue found: Avoid variables with short names like i", "author": "dev-dotcms", "createdAt": "2020-02-07T01:47:33Z", "path": "dotCMS/src/test/java/com/dotcms/util/pagination/SiteViewPaginatorUnitTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.dotcms.util.pagination;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.rest.api.v1.secret.SiteViewPaginator;\n+import com.dotcms.rest.api.v1.secret.view.SiteView;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.common.model.ContentletSearch;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.google.common.collect.Ordering;\n+import com.liferay.portal.model.User;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class SiteViewPaginatorUnitTest {\n+\n+    private static final char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n+\n+    @Test\n+    public void Test_Get_Items_Page_Size()\n+            throws DotSecurityException, DotDataException {\n+\n+        final int max = alphabet.length - 1;\n+        final User user = mockAdminUser();\n+        final List<String> allSites = mockAllSitesIdentifiers(max);\n+        final Set<String> sitesWithIntegrations = mockSitesWithIntegrations(allSites, 10);\n+        //System.out.println(\"Sites with integrations: \");\n+        sitesWithIntegrations.forEach(System.out::println);\n+        final HostAPI hostAPI = mock(HostAPI.class);\n+        final long time = System.currentTimeMillis();\n+        int i = 0;\n+        //System.out.println(\"Site names: \");\n+        for(final String identifier:allSites){\n+            final Host host;\n+            if(Host.SYSTEM_HOST.equals(identifier)){\n+                host = mockSite(identifier, \"System Host\");\n+                when(hostAPI.find(eq(identifier),any(User.class), anyBoolean())).thenReturn(host);\n+            } else {\n+                final String name = String.format(\"%s%d\",alphabet[i++],time);\n+                //System.out.println(name);\n+                host = mockSite(identifier, name);\n+            }\n+            when(hostAPI.find(eq(identifier),any(User.class), anyBoolean())).thenReturn(host);\n+        }\n+\n+        final List<ContentletSearch> mockedSearch = mockSearchResults(allSites);\n+        final ContentletAPI contentletAPI = mock(ContentletAPI.class);\n+        when(contentletAPI.searchIndex(anyString(), anyInt(), anyInt(), eq(\"title\"), any(User.class), anyBoolean())).thenReturn(mockedSearch);\n+        final Supplier<Set<String>> configuredSitesSupplier = () -> sitesWithIntegrations;\n+\n+        final SiteViewPaginator paginator = new SiteViewPaginator(configuredSitesSupplier, hostAPI, contentletAPI);\n+        final int limit = sitesWithIntegrations.size();\n+        final PaginatedArrayList<SiteView> items = paginator\n+                .getItems(user, null, limit, 0, null, null, Collections.emptyMap());\n+\n+        Assert.assertNotNull(items);\n+        Assert.assertFalse(items.isEmpty());\n+        Assert.assertEquals(items.get(0).getId(), Host.SYSTEM_HOST);\n+        Assert.assertEquals(items.size(), limit);\n+        //First item is'nt necessarily configured. So we start counting from 1.\n+        for(int j=1; j < limit; j++){\n+            Assert.assertTrue(items.get(j).isConfigured());\n+        }\n+    }\n+\n+    @Test\n+    public void Test_Get_Items_Sorted_Pages()\n+            throws DotSecurityException, DotDataException {\n+        final User user = mockAdminUser();\n+        final int maxConfigured = 6; //Only the first page is expected to bring back configured items.\n+        final List<String> allSites = mockAllSitesIdentifiers(alphabet.length - 1);\n+        final HostAPI hostAPI = mock(HostAPI.class);\n+        final List<String> allSitesSortedIdentifiers = new LinkedList<>();\n+        final long time = System.currentTimeMillis();\n+        //final Map<String,String> debugInfo = new TreeMap<>();\n+        int i = 0;", "originalCommit": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzMxNw==", "url": "https://github.com/dotCMS/core/pull/17960#discussion_r376177317", "bodyText": "Issue found: Avoid using Literals in Conditional Statements", "author": "dev-dotcms", "createdAt": "2020-02-07T01:47:34Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/secret/ServiceIntegrationResourceTest.java", "diffHunk": "@@ -585,11 +607,114 @@ public void Test_Required_Params() throws IOException, DotDataException, DotSecu\n         }\n     }\n \n+    @Test\n+    public void Test_Pagination_And_Sort_Then_Request_Filter_Expect_Empty_Results() {\n \n+        final Map<String, Param> paramMap = ImmutableMap.of(\n+                \"param1\", Param.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n+                \"param2\", Param.newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n+                \"param3\", Param.newParam(\"val-3\", false, Type.STRING, \"label\", \"hint\", true)\n+        );\n+        final long timeMark = System.currentTimeMillis();\n+        final List<Host> hosts= new ArrayList<>();\n+        final char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n+        for(final char chr :alphabet) {\n+           hosts.add(new SiteDataGen().name( String.format(\"%s,%d\",chr, timeMark )).nextPersisted());\n+        }\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        when(request.getRequestURI()).thenReturn(\"/baseURL\");\n+        final String serviceKey = String.format(\"lol_%d\", System.currentTimeMillis());\n+        final String fileName = String.format(\"%s.yml\", serviceKey);\n+        try (final InputStream inputStream = createServiceDescriptorFile(fileName, serviceKey,\n+                \"lola\",\n+                \"A bunch of string params to demo the mechanism.\", false, paramMap)) {\n+\n+            // Create Service integration Descriptor\n+            final Response serviceIntegrationResponse = serviceIntegrationResource\n+                    .createServiceIntegration(request, response,\n+                            createFormDataMultiPart(fileName, inputStream));\n+            Assert.assertNotNull(serviceIntegrationResponse);\n+            Assert.assertEquals(HttpStatus.SC_OK, serviceIntegrationResponse.getStatus());\n+            final Response availableServicesResponse = serviceIntegrationResource\n+                    .listAvailableServices(request, response);\n+            Assert.assertEquals(HttpStatus.SC_OK, availableServicesResponse.getStatus());\n+            final ResponseEntityView responseEntityView1 = (ResponseEntityView) availableServicesResponse\n+                    .getEntity();\n+            final List<ServiceIntegrationView> integrationViewList = (List<ServiceIntegrationView>) responseEntityView1\n+                    .getEntity();\n+            Assert.assertFalse(integrationViewList.isEmpty());\n+            Assert.assertTrue(\n+                    integrationViewList.stream().anyMatch(\n+                            serviceIntegrationView -> \"lola\"\n+                                    .equals(serviceIntegrationView.getName())));\n+\n+            // Add secrets to it.\n+            for(final Host host:hosts) {\n+                createSecret(request, response, serviceKey, host, paramMap);\n+            }\n+\n+            //fetch and test pagination\n+            final int pageSize = 4;\n+            final int numberOfPages = hosts.size() / pageSize;\n+\n+            for(int currentPage = 1; currentPage <= numberOfPages; currentPage++) {\n+\n+                final Response paginationResponse1 = serviceIntegrationResource\n+                        .getServiceIntegrationByKey(request, response, serviceKey,\n+                                new PaginationContext(null, currentPage, pageSize, \"\", \"\"));\n+                Assert.assertEquals(HttpStatus.SC_OK, paginationResponse1.getStatus());\n+                final ResponseEntityView paginationEntity1 = (ResponseEntityView) paginationResponse1\n+                        .getEntity();\n+                final ServiceIntegrationView paginationView1 = (ServiceIntegrationView) paginationEntity1\n+                        .getEntity();\n+                Assert.assertEquals(hosts.size(), paginationView1.getConfigurationsCount());\n+                final List<SiteView> hostsBatch1 = paginationView1.getSites();\n+                Assert.assertNotNull(hostsBatch1);\n+\n+                if(currentPage < numberOfPages) {\n+                    Assert.assertEquals(pageSize, hostsBatch1.size());\n+                } else {\n+                    Assert.assertTrue(pageSize <= hostsBatch1.size());\n+                }\n+\n+                List<SiteView> itemsPage;\n+                if(currentPage == 1){", "originalCommit": "9d7e1f5d4e00b23f898450bb0edbbb15ed3398d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}