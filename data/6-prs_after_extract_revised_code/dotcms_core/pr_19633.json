{"pr_number": 19633, "pr_title": "19558 send theme as content type dependency", "pr_createdAt": "2020-11-30T17:00:56Z", "pr_url": "https://github.com/dotCMS/core/pull/19633", "timeline": [{"oid": "6a5f572493acbe05eab280823a2cd6d1bbd270b8", "url": "https://github.com/dotCMS/core/commit/6a5f572493acbe05eab280823a2cd6d1bbd270b8", "message": "#19558 Sending Theme when a page is sent as COntent type's dependencie", "committedDate": "2020-11-30T16:53:32Z", "type": "commit"}, {"oid": "6c2825075737d6a3b10ecd3a1e0278d7d862c091", "url": "https://github.com/dotCMS/core/commit/6c2825075737d6a3b10ecd3a1e0278d7d862c091", "message": "Sending theme when use the PUSH_PUBLISHING_PUSH_ALL_FOLDER_PAGES property", "committedDate": "2020-11-30T16:53:45Z", "type": "commit"}, {"oid": "f53903c7d39c2165a74222fc8d76c0768d1a1cd0", "url": "https://github.com/dotCMS/core/commit/f53903c7d39c2165a74222fc8d76c0768d1a1cd0", "message": "missing", "committedDate": "2020-11-30T16:53:54Z", "type": "commit"}, {"oid": "5ae41d2b003dc9960cf10ecc61b18bec07a55bc0", "url": "https://github.com/dotCMS/core/commit/5ae41d2b003dc9960cf10ecc61b18bec07a55bc0", "message": "fix conflicts", "committedDate": "2020-11-30T16:55:07Z", "type": "commit"}, {"oid": "b270c6065a22a424c0e8c7ab2464cbc74c87524f", "url": "https://github.com/dotCMS/core/commit/b270c6065a22a424c0e8c7ab2464cbc74c87524f", "message": "#19558 fix failing test", "committedDate": "2020-11-30T16:55:11Z", "type": "commit"}, {"oid": "e514e1833e85bdf70e25c9c4262ede98eb06243d", "url": "https://github.com/dotCMS/core/commit/e514e1833e85bdf70e25c9c4262ede98eb06243d", "message": "#19558 temporary comment asssertion of number of contentlets", "committedDate": "2020-11-30T16:55:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3MTE4MA==", "url": "https://github.com/dotCMS/core/pull/19633#discussion_r532771180", "bodyText": "why is this line commented?", "author": "nollymar", "createdAt": "2020-11-30T17:28:20Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publisher/util/DependencyManagerTest.java", "diffHunk": "@@ -266,19 +284,156 @@ public void test_Content_Type_with_detail_Page()\n         DependencyManager dependencyManager = new DependencyManager(DependencyManagerTest.user, config);\n         dependencyManager.setDependencies();\n \n-        assertEquals(2, dependencyManager.getContentTypes().size());\n+        assertEquals(4, dependencyManager.getContentTypes().size());\n         assertTrue(dependencyManager.getContentTypes().contains(contentType.id()));\n         assertTrue(dependencyManager.getContentTypes().contains(contentlet.getContentType().id()));\n+        assertTrue(dependencyManager.getContentTypes().contains(theme.getContentType().id()));\n+        assertTrue(dependencyManager.getContentTypes().contains(htmlPageAsset.getContentType().id()));\n \n-        assertEquals(2, dependencyManager.getContents().size());\n+//        assertEquals(3, dependencyManager.getContents().size());", "originalCommit": "e514e1833e85bdf70e25c9c4262ede98eb06243d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxNzc0MA==", "url": "https://github.com/dotCMS/core/pull/19633#discussion_r532917740", "bodyText": "Commented out to avoid test failure. New issue was created to uncomment this when @freddyucv comes back.", "author": "dsilvam", "createdAt": "2020-11-30T21:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3MTE4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3Mjc4NQ==", "url": "https://github.com/dotCMS/core/pull/19633#discussion_r532772785", "bodyText": "same here", "author": "nollymar", "createdAt": "2020-11-30T17:30:34Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publisher/util/DependencyManagerTest.java", "diffHunk": "@@ -266,19 +284,156 @@ public void test_Content_Type_with_detail_Page()\n         DependencyManager dependencyManager = new DependencyManager(DependencyManagerTest.user, config);\n         dependencyManager.setDependencies();\n \n-        assertEquals(2, dependencyManager.getContentTypes().size());\n+        assertEquals(4, dependencyManager.getContentTypes().size());\n         assertTrue(dependencyManager.getContentTypes().contains(contentType.id()));\n         assertTrue(dependencyManager.getContentTypes().contains(contentlet.getContentType().id()));\n+        assertTrue(dependencyManager.getContentTypes().contains(theme.getContentType().id()));\n+        assertTrue(dependencyManager.getContentTypes().contains(htmlPageAsset.getContentType().id()));\n \n-        assertEquals(2, dependencyManager.getContents().size());\n+//        assertEquals(3, dependencyManager.getContents().size());\n         assertTrue(dependencyManager.getContents().contains(htmlPageAsset.getIdentifier()));\n         assertTrue(dependencyManager.getContents().contains(contentlet.getIdentifier()));\n+        assertTrue(dependencyManager.getContents().contains(theme.getIdentifier()));\n \n         assertEquals(1, dependencyManager.getTemplates().size());\n         assertTrue(dependencyManager.getTemplates().contains(template.getIdentifier()));\n \n-        assertEquals(1, dependencyManager.getContainers().size());\n+        assertEquals(2, dependencyManager.getContainers().size());\n         assertTrue(dependencyManager.getContainers().contains(container.getIdentifier()));\n+        assertTrue(dependencyManager.getContainers().contains(container_2.getIdentifier()));\n+\n+        assertEquals(3, dependencyManager.getFolders().size());\n+        assertTrue(dependencyManager.getFolders().contains(theme.getFolder()));\n+    }\n+\n+    /**\n+     * <b>Method to test:</b> {@link DependencyManager#setDependencies()} <p>\n+     * <b>Given Scenario:</b> A {@link ContentType} with a page as detail page that not exist<p>\n+     * <b>ExpectedResult:</b> Should not throw any exception\n+     * @throws DotSecurityException\n+     * @throws DotBundleException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_Content_Type_with_not_exists_detail_Page()\n+            throws DotSecurityException, DotBundleException, DotDataException {\n+\n+        final PushPublisherConfig config = new PushPublisherConfig();\n+        final User systemUser = APILocator.systemUser();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final String baseUrl = String.format(\"/test%s\", System.currentTimeMillis());\n+\n+        final ContentType contentType = new ContentTypeDataGen().user(systemUser)\n+                .host(host)\n+                .detailPage(\"not_exists\")\n+                .urlMapPattern(String.format(\"%s/{text}\", baseUrl))\n+                .nextPersisted();\n+\n+        //Creates a bundle with just the child\n+        createBundle(config, contentType);\n+\n+        DependencyManager dependencyManager = new DependencyManager(DependencyManagerTest.user, config);\n+        dependencyManager.setDependencies();\n+\n+        assertEquals(1, dependencyManager.getContentTypes().size());\n+        assertTrue(dependencyManager.getContentTypes().contains(contentType.id()));\n+\n+//        assertEquals(0, dependencyManager.getContents().size());\n+\n+        assertEquals(0, dependencyManager.getTemplates().size());\n+\n+        assertEquals(0, dependencyManager.getContainers().size());\n+    }\n+\n+    /**\n+     * <b>Method to test:</b> {@link DependencyManager#setDependencies()} <p>\n+     * <b>Given Scenario:</b> A {@link ContentType} with a page as detail page that not exist<p>\n+     * <b>ExpectedResult:</b> Should not throw any exception\n+     * @throws DotSecurityException\n+     * @throws DotBundleException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_Sending_Page_as_dependencies_with_PUSH_PUBLISHING_PUSH_ALL_FOLDER_PAGES()\n+            throws DotSecurityException, DotBundleException, DotDataException {\n+\n+        Config.setProperty(\"PUSH_PUBLISHING_PUSH_ALL_FOLDER_PAGES\", true);\n+\n+        try {\n+            final PushPublisherConfig config = new PushPublisherConfig();\n+\n+            final Host host = new SiteDataGen().nextPersisted();\n+            final ContentType contentTypeForContent = new ContentTypeDataGen().nextPersisted();\n+\n+            final Container container = new ContainerDataGen()\n+                    .withContentType(contentTypeForContent, \"Testing\")\n+                    .nextPersisted();\n+\n+            final Container container_2 = new ContainerDataGen()\n+                    .nextPersisted();\n+\n+            final TemplateLayout templateLayout = new TemplateLayoutDataGen()\n+                    .withContainer(container, ContainerUUID.UUID_START_VALUE)\n+                    .withContainer(container_2, ContainerUUID.UUID_START_VALUE)\n+                    .next();\n+\n+            final Folder folderTheme = new FolderDataGen().nextPersisted();\n+            final Contentlet theme_1 = new ThemeDataGen()\n+                    .site(host)\n+                    .themesFolder(folderTheme)\n+                    .nextPersisted();\n+\n+            final Template template_1 = new TemplateDataGen()\n+                    .drawedBody(templateLayout)\n+                    .host(host)\n+                    .theme(theme_1)\n+                    .nextPersisted();\n+\n+            final Folder pages_folder = new FolderDataGen().nextPersisted();\n+            final HTMLPageAsset htmlPageAsset_1 = new HTMLPageDataGen(host, template_1)\n+                    .folder(pages_folder)\n+                    .nextPersisted();\n+\n+            final Contentlet theme_2 = new ThemeDataGen()\n+                    .site(host)\n+                    .themesFolder(folderTheme)\n+                    .nextPersisted();\n+\n+            final Template template_2 = new TemplateDataGen()\n+                    .drawedBody(templateLayout)\n+                    .host(host)\n+                    .theme(theme_2)\n+                    .nextPersisted();\n+\n+            final HTMLPageAsset htmlPageAsset_2 = new HTMLPageDataGen(host, template_2)\n+                    .folder(pages_folder)\n+                    .nextPersisted();\n+\n+            createBundle(config, htmlPageAsset_1);\n+\n+            DependencyManager dependencyManager = new DependencyManager(DependencyManagerTest.user, config);\n+            dependencyManager.setDependencies();\n+\n+//            assertEquals(4, dependencyManager.getContents().size());", "originalCommit": "e514e1833e85bdf70e25c9c4262ede98eb06243d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NDEwMQ==", "url": "https://github.com/dotCMS/core/pull/19633#discussion_r532774101", "bodyText": "The DotSecurityException and the DotDataException can be wrapped in the same catch", "author": "nollymar", "createdAt": "2020-11-30T17:32:36Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -858,79 +873,96 @@ private void setHTMLPagesDependencies(final Set<String> idsToWork,final Publishe\n \tprivate void setTemplateDependencies(final PublisherFilter publisherFilter)  {\n \t\ttry {\n \t\t\tfinal List<Container> containerList = new ArrayList<>();\n-\t\t\tfinal FolderAPI folderAPI = APILocator.getFolderAPI();\n \n \t\t\tfor (final String id : templatesSet) {\n-\t\t\t\tfinal Template workingTemplate = APILocator.getTemplateAPI().findWorkingTemplate(id, user, false);\n-\t\t\t\tfinal Template liveTemplate = APILocator.getTemplateAPI().findLiveTemplate(id, user, false);\n+\t\t\t\tsetTemplateDependencies(publisherFilter, containerList, id);\n+\t\t\t}\n \n-\t\t\t\t// Host dependency\n-\t\t\t\tif (!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n-\t\t\t\t\tfinal Host host = APILocator.getHostAPI()\n-\t\t\t\t\t\t\t.find(APILocator.getTemplateAPI().getTemplateHost(workingTemplate).getIdentifier(),\n-\t\t\t\t\t\t\t\t\tuser, false);\n-\t\t\t\t\thosts.addOrClean(\n-\t\t\t\t\t\t\tAPILocator.getTemplateAPI().getTemplateHost(workingTemplate).getIdentifier(),\n-\t\t\t\t\t\t\thost.getModDate());\n-\t\t\t\t}\n+\t\t} catch (DotSecurityException e) {\n \n-\t\t\t\tcontainerList.clear();\n-\t\t\t\t// Container dependencies\n-\t\t\t\tif (!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.CONTAINER.getType())) {\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n-\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplate, user, false));\n+\t\t\tLogger.error(this, e.getMessage(),e);\n+\t\t} catch (DotDataException e) {", "originalCommit": "e514e1833e85bdf70e25c9c4262ede98eb06243d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c211dc144a18564189ce759fcba244e12b0fc988", "url": "https://github.com/dotCMS/core/commit/c211dc144a18564189ce759fcba244e12b0fc988", "message": "merge", "committedDate": "2020-12-01T15:54:14Z", "type": "commit"}]}