{"pr_number": 18638, "pr_title": "Apps key regenerte", "pr_createdAt": "2020-06-10T17:57:39Z", "pr_url": "https://github.com/dotCMS/core/pull/18638", "timeline": [{"oid": "79fe5b97372e1998771d75a8b9960fd4056cc8a4", "url": "https://github.com/dotCMS/core/commit/79fe5b97372e1998771d75a8b9960fd4056cc8a4", "message": "issue-18249-Refactor-Dot-Field-Variables core#18249 (#18290)\n\n* core#18249\r\n\r\n* Added missing languages\r\n\r\n* add hidden title label\r\n\r\n* custom label added", "committedDate": "2020-04-23T16:17:58Z", "type": "commit"}, {"oid": "98e9bdb8269c3f230ec0cb75f24991b096d5057b", "url": "https://github.com/dotCMS/core/commit/98e9bdb8269c3f230ec0cb75f24991b096d5057b", "message": "Merge branch 'master' of https://github.com/dotCMS/core into apps-feature-branch", "committedDate": "2020-04-27T15:15:35Z", "type": "commit"}, {"oid": "44fda47a71168a2a60fdf3ead1a2fa6557a63344", "url": "https://github.com/dotCMS/core/commit/44fda47a71168a2a60fdf3ead1a2fa6557a63344", "message": "Issue 18218 warnings (#18360)\n\n* #18218 apps secret  warning checks\r\n\r\n* #18218 lang keys\r\n\r\n* #18218  warnings fix broken test", "committedDate": "2020-04-27T18:24:21Z", "type": "commit"}, {"oid": "1e511817f36777295385ded5df9eb3134fa47257", "url": "https://github.com/dotCMS/core/commit/1e511817f36777295385ded5df9eb3134fa47257", "message": "  #18373 apps resilience when a site is deleted (#18365)\n\n* apps resilience when a site is deleted\r\n\r\n* # apps delete secrets for site\r\n\r\n* apps site delete resilience\r\n\r\n* # apps site delete resilience", "committedDate": "2020-04-27T22:44:49Z", "type": "commit"}, {"oid": "97acae1b22c048f3575b9fe21119244bb1f67996", "url": "https://github.com/dotCMS/core/commit/97acae1b22c048f3575b9fe21119244bb1f67996", "message": "Merge branch 'master' of https://github.com/dotCMS/core into apps-feature-branch", "committedDate": "2020-04-28T15:51:11Z", "type": "commit"}, {"oid": "cd31431c73ef647b622fe149d7784041d1b2ddd6", "url": "https://github.com/dotCMS/core/commit/cd31431c73ef647b622fe149d7784041d1b2ddd6", "message": "Merge branch 'apps-feature-branch' of https://github.com/dotCMS/core into apps-feature-branch", "committedDate": "2020-04-28T15:51:39Z", "type": "commit"}, {"oid": "2f812d12b4c56f6490539582f8f8e30f5fe83fbd", "url": "https://github.com/dotCMS/core/commit/2f812d12b4c56f6490539582f8f8e30f5fe83fbd", "message": "#18218 fixes for apps  warnings (#18386)", "committedDate": "2020-04-28T23:32:40Z", "type": "commit"}, {"oid": "643b70f3e106d6984376d262f9154d76b6f80eb1", "url": "https://github.com/dotCMS/core/commit/643b70f3e106d6984376d262f9154d76b6f80eb1", "message": "Merge branch 'master' of https://github.com/dotCMS/core into apps-feature-branch", "committedDate": "2020-04-30T18:40:10Z", "type": "commit"}, {"oid": "b654b9e09020d9ee09cfe86814f2bf32e619bd43", "url": "https://github.com/dotCMS/core/commit/b654b9e09020d9ee09cfe86814f2bf32e619bd43", "message": "#17938 + #18381", "committedDate": "2020-05-05T23:12:25Z", "type": "commit"}, {"oid": "27de53f61c6b1ebb67f75a859ad34e27799f0c35", "url": "https://github.com/dotCMS/core/commit/27de53f61c6b1ebb67f75a859ad34e27799f0c35", "message": "#17938  #18381 wip", "committedDate": "2020-05-07T14:53:08Z", "type": "commit"}, {"oid": "7efc997e154531b9afbb729021ea6921301be949", "url": "https://github.com/dotCMS/core/commit/7efc997e154531b9afbb729021ea6921301be949", "message": "#18381 merge", "committedDate": "2020-06-09T17:36:57Z", "type": "commit"}, {"oid": "89fe9f9c4de724eb2132afa8504e9febf5c044ca", "url": "https://github.com/dotCMS/core/commit/89fe9f9c4de724eb2132afa8504e9febf5c044ca", "message": "#18381  #17938", "committedDate": "2020-06-10T14:05:25Z", "type": "commit"}, {"oid": "d6bd9c5bc5623f8f876b86485230d937eaf6ea45", "url": "https://github.com/dotCMS/core/commit/d6bd9c5bc5623f8f876b86485230d937eaf6ea45", "message": "#18381 #17938", "committedDate": "2020-06-10T17:39:25Z", "type": "commit"}, {"oid": "42d8ca627a1384c6b744a1472dbb7b8e72f6aa57", "url": "https://github.com/dotCMS/core/commit/42d8ca627a1384c6b744a1472dbb7b8e72f6aa57", "message": "Updating commit reference for src/main/enterprise", "committedDate": "2020-06-10T21:22:17Z", "type": "commit"}, {"oid": "42f9689c1c0105451f593b12dba810c6da41a579", "url": "https://github.com/dotCMS/core/commit/42f9689c1c0105451f593b12dba810c6da41a579", "message": "#18381 #17938  testing cluster id gen", "committedDate": "2020-06-10T23:00:19Z", "type": "commit"}, {"oid": "327d6a99502d0187e13bf9532628c94d18fb8c94", "url": "https://github.com/dotCMS/core/commit/327d6a99502d0187e13bf9532628c94d18fb8c94", "message": "#18638 reverting a bad file", "committedDate": "2020-06-11T15:50:21Z", "type": "commit"}, {"oid": "1173a235b140bd1af9f80fbad7d78ce3113e73b0", "url": "https://github.com/dotCMS/core/commit/1173a235b140bd1af9f80fbad7d78ce3113e73b0", "message": "Merge branch 'master' into apps-key-regenerte", "committedDate": "2020-06-12T21:42:55Z", "type": "commit"}, {"oid": "7fcdc9ffad9770592a46f7e86cf04d661aa6de36", "url": "https://github.com/dotCMS/core/commit/7fcdc9ffad9770592a46f7e86cf04d661aa6de36", "message": "#18638 adding test to key reset + feedback", "committedDate": "2020-06-12T23:31:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTExNA==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440321114", "bodyText": "we should validate the column actually exists after the upgrade", "author": "nollymar", "createdAt": "2020-06-15T17:05:53Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumnTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import java.sql.SQLException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05350AddDotSaltClusterColumnTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    private void dropColumn() throws SQLException {\n+        try {\n+            final String dropColumnSQL = \"ALTER TABLE dot_cluster DROP COLUMN cluster_salt\";\n+            final DotConnect dotConnect = new DotConnect();\n+            dotConnect.executeStatement(dropColumnSQL);\n+        } catch (Exception e) {\n+            Logger.info(Task05350AddDotSaltClusterColumnTest.class, () -> \"Failed removing cluster_salt column. Maybe it didn't exist?\");\n+        }\n+    }\n+\n+    @Test\n+    public void test_upgradeTask_success() throws SQLException, DotDataException {\n+        dropColumn();\n+        final Task05350AddDotSaltClusterColumn task = new Task05350AddDotSaltClusterColumn();\n+        assertTrue(task.forceRun());//True because the column does not exists\n+        task.executeUpgrade();\n+        assertFalse(task.forceRun());//False because the column exists", "originalCommit": "7fcdc9ffad9770592a46f7e86cf04d661aa6de36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNjY5NA==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440326694", "bodyText": "task.forceRun() takes care of that. internally it verifies if the column does or does not exist", "author": "fabrizzio-dotCMS", "createdAt": "2020-06-15T17:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTExNA=="}], "type": "inlineReview", "revised_code": {"commit": "050a780b7961ca1c9f9274e2caf01ece12bb8e92", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumnTest.java b/dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumnTest.java\nindex 24b1ea512e..052a5359fb 100644\n--- a/dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumnTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumnTest.java\n\n@@ -1,5 +1,6 @@\n package com.dotmarketing.startup.runonce;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMjExMg==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440322112", "bodyText": "Use the companyAPI object you just created", "author": "nollymar", "createdAt": "2020-06-15T17:07:45Z", "path": "dotCMS/src/main/java/com/dotcms/rest/CMSConfigResource.java", "diffHunk": "@@ -497,4 +500,30 @@ public Response deleteEndpoint ( @Context HttpServletRequest request,\n         return responseResource.response( responseMessage.toString() );\n     }\n \n+    @POST\n+    @Path (\"/regenerateKey\")\n+    @Produces (MediaType.APPLICATION_JSON)\n+    @Consumes (MediaType.APPLICATION_FORM_URLENCODED)\n+    public Response regenerateKey ( @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response) throws JSONException, IOException {\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();\n+            final CompanyAPI companyAPI = APILocator.getCompanyAPI();\n+            final Company defaultCompany = companyAPI.getDefaultCompany();\n+            final Company updatedCompany = APILocator.getCompanyAPI().regenerateKey(defaultCompany, user);", "originalCommit": "7fcdc9ffad9770592a46f7e86cf04d661aa6de36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1Nzg1Ng==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440457856", "bodyText": "Good catch.", "author": "fabrizzio-dotCMS", "createdAt": "2020-06-15T21:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMjExMg=="}], "type": "inlineReview", "revised_code": {"commit": "9ba296e2f54287c091f6f07d66336370b0ac4453", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rest/CMSConfigResource.java b/dotCMS/src/main/java/com/dotcms/rest/CMSConfigResource.java\nindex 5ab4d2a438..8177cde2d1 100644\n--- a/dotCMS/src/main/java/com/dotcms/rest/CMSConfigResource.java\n+++ b/dotCMS/src/main/java/com/dotcms/rest/CMSConfigResource.java\n\n@@ -517,7 +517,7 @@ public class CMSConfigResource {\n             final User user = initData.getUser();\n             final CompanyAPI companyAPI = APILocator.getCompanyAPI();\n             final Company defaultCompany = companyAPI.getDefaultCompany();\n-            final Company updatedCompany = APILocator.getCompanyAPI().regenerateKey(defaultCompany, user);\n+            final Company updatedCompany = companyAPI.regenerateKey(defaultCompany, user);\n             return Response.ok(new ResponseEntityView(updatedCompany.getKeyDigest())).build(); // 200\n         } catch (Exception e) {\n             Logger.error(this.getClass(), \"Exception calling regenerateKey.\" , e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzMjMyOQ==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440332329", "bodyText": "I think the user has a method called isAdmin, which is the same\nuser.isAdmin()", "author": "jdotcms", "createdAt": "2020-06-15T17:26:21Z", "path": "dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java", "diffHunk": "@@ -155,5 +167,35 @@ public void updateDefaultUserSettings(String languageId, String timeZoneId,\n                     skinId, dottedSkins, roundedSkins,\n                     resolution);\n         }\n+\n+        @Override\n+        @WrapInTransaction\n+        public Company regenerateKey(final Company company, final User user)\n+                throws DotDataException, DotSecurityException {\n+            try {\n+                if (!APILocator.getRoleAPI()", "originalCommit": "7fcdc9ffad9770592a46f7e86cf04d661aa6de36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1ODU0Mw==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440458543", "bodyText": "very nice. I'm using it instead", "author": "fabrizzio-dotCMS", "createdAt": "2020-06-15T21:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzMjMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ba296e2f54287c091f6f07d66336370b0ac4453", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java b/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java\nindex 503f809ab7..77d9af6fbe 100644\n--- a/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java\n+++ b/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java\n\n@@ -173,8 +173,7 @@ public class CompanyAPIFactory implements Serializable {\n         public Company regenerateKey(final Company company, final User user)\n                 throws DotDataException, DotSecurityException {\n             try {\n-                if (!APILocator.getRoleAPI()\n-                        .doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())) {\n+                if (!user.isAdmin()) {\n                     throw new DotSecurityException(String.format(\n                             \"User `%s` does not have permission to regenerate company Key operation.\",\n                             user.getUserId()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzMzU5Mw==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440333593", "bodyText": "good", "author": "jdotcms", "createdAt": "2020-06-15T17:28:31Z", "path": "dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java", "diffHunk": "@@ -155,5 +167,35 @@ public void updateDefaultUserSettings(String languageId, String timeZoneId,\n                     skinId, dottedSkins, roundedSkins,\n                     resolution);\n         }\n+\n+        @Override\n+        @WrapInTransaction\n+        public Company regenerateKey(final Company company, final User user)\n+                throws DotDataException, DotSecurityException {\n+            try {\n+                if (!APILocator.getRoleAPI()\n+                        .doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())) {\n+                    throw new DotSecurityException(String.format(\n+                            \"User `%s` does not have permission to regenerate company Key operation.\",\n+                            user.getUserId()));\n+                }\n+                final String originalKey = company.getKey();\n+                final String newKey = Base64.objectToString(Encryptor.generateKey());\n+                company.setKey(newKey);\n+                company.setModified(true);\n+                CompanyManagerUtil.updateCompany(company);\n+                final Key originalKeyObj = (Key) Base64.stringToObject(originalKey);\n+                final Key newKeyObj = (Key) Base64.stringToObject(newKey);\n+                HibernateUtil.addCommitListener(() -> {", "originalCommit": "7fcdc9ffad9770592a46f7e86cf04d661aa6de36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ba296e2f54287c091f6f07d66336370b0ac4453", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java b/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java\nindex 503f809ab7..77d9af6fbe 100644\n--- a/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java\n+++ b/dotCMS/src/main/java/com/dotcms/company/CompanyAPIFactory.java\n\n@@ -173,8 +173,7 @@ public class CompanyAPIFactory implements Serializable {\n         public Company regenerateKey(final Company company, final User user)\n                 throws DotDataException, DotSecurityException {\n             try {\n-                if (!APILocator.getRoleAPI()\n-                        .doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())) {\n+                if (!user.isAdmin()) {\n                     throw new DotSecurityException(String.format(\n                             \"User `%s` does not have permission to regenerate company Key operation.\",\n                             user.getUserId()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0NzgyNQ==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r440347825", "bodyText": "good", "author": "jdotcms", "createdAt": "2020-06-15T17:54:54Z", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import io.vavr.control.Try;\n+import java.sql.SQLException;\n+\n+public class Task05350AddDotSaltClusterColumn implements StartupTask {\n+\n+    private static final String SELECT = \"SELECT cluster_id FROM dot_cluster\";\n+    private static final String UPDATE = \"UPDATE dot_cluster SET cluster_salt = ? WHERE cluster_id = ? \";\n+\n+    private static final String POSTGRES_SQL_ADD_DOT_CLUSTER_SALT_COLUMN = \" ALTER TABLE dot_cluster ADD cluster_salt VARCHAR(256)\";\n+    private static final String MSSQL_ADD_DOT_CLUSTER_SALT_COLUMN = \" ALTER TABLE dot_cluster ADD cluster_salt VARCHAR(256)\";\n+    private static final String MYSQL_ADD_DOT_CLUSTER_SALT_COLUMN = \" ALTER TABLE dot_cluster ADD cluster_salt VARCHAR(256)\";\n+    private static final String ORACLE_ADD_DOT_CLUSTER_SALT_COLUMN = \" ALTER TABLE dot_cluster ADD cluster_salt VARCHAR(256)\";\n+\n+    @Override\n+    public boolean forceRun() {\n+        try {\n+            return !new DotDatabaseMetaData().getColumnNames(DbConnectionFactory.getConnection(), \"dot_cluster\").contains(\"cluster_salt\");", "originalCommit": "7fcdc9ffad9770592a46f7e86cf04d661aa6de36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "9ba296e2f54287c091f6f07d66336370b0ac4453", "url": "https://github.com/dotCMS/core/commit/9ba296e2f54287c091f6f07d66336370b0ac4453", "message": "#18381 merge + feedback", "committedDate": "2020-06-15T22:45:32Z", "type": "commit"}, {"oid": "c3aa2e62e33d27109493ba4d434799116d55e8f0", "url": "https://github.com/dotCMS/core/commit/c3aa2e62e33d27109493ba4d434799116d55e8f0", "message": "Remove commits from enterprise", "committedDate": "2020-06-15T23:40:04Z", "type": "commit"}, {"oid": "6263f66fd9467b9b26983f48844c3824d80c50ec", "url": "https://github.com/dotCMS/core/commit/6263f66fd9467b9b26983f48844c3824d80c50ec", "message": "#18638  ignore enterprise stuff added from core", "committedDate": "2020-06-16T04:11:47Z", "type": "commit"}, {"oid": "050a780b7961ca1c9f9274e2caf01ece12bb8e92", "url": "https://github.com/dotCMS/core/commit/050a780b7961ca1c9f9274e2caf01ece12bb8e92", "message": "#18381  small improvement on the test case", "committedDate": "2020-06-16T16:21:50Z", "type": "commit"}, {"oid": "f68b10deadb6cb6a84dba386edd4b2c744676ead", "url": "https://github.com/dotCMS/core/commit/f68b10deadb6cb6a84dba386edd4b2c744676ead", "message": "#17938 sha256 was incorrect", "committedDate": "2020-06-18T20:47:56Z", "type": "commit"}, {"oid": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "url": "https://github.com/dotCMS/core/commit/078baf5b98c5c22e48f68ecccc48a8f468335d98", "message": "#18381 solving  merge conflicts", "committedDate": "2020-06-18T23:03:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODI0Mw==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548243", "bodyText": "Codacy found an issue: The String literal \" ALTER TABLE dot_cluster ADD cluster_salt VARCHAR(256)\" appears 4 times in this file; the first occurrence is on line 22", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:10Z", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import io.vavr.control.Try;\n+import java.sql.SQLException;\n+\n+public class Task05350AddDotSaltClusterColumn implements StartupTask {\n+\n+    private static final String SELECT = \"SELECT cluster_id FROM dot_cluster\";\n+    private static final String UPDATE = \"UPDATE dot_cluster SET cluster_salt = ? WHERE cluster_id = ? \";\n+\n+    private static final String POSTGRES_SQL_ADD_DOT_CLUSTER_SALT_COLUMN = \" ALTER TABLE dot_cluster ADD cluster_salt VARCHAR(256)\";", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODI0Ng==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548246", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:11Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumnTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05350AddDotSaltClusterColumnTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODI2Ng==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548266", "bodyText": "Codacy found an issue: Classes implementing Serializable should set a serialVersionUID", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:13Z", "path": "dotCMS/src/main/java/com/dotcms/system/event/local/type/security/CompanyKeyResetEvent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.dotcms.system.event.local.type.security;\n+\n+import java.io.Serializable;\n+import java.security.Key;\n+\n+\n+/**\n+ * This event is used to broadcast the info related with ResetKey event\n+ */\n+public class CompanyKeyResetEvent implements Serializable {", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODI3Nw==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548277", "bodyText": "Codacy found an issue: A class which only has private constructors should be final", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:16Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsKeyDefaultProvider.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.auth.providers.jwt.factories.SigningKeyFactory;\n+import com.dotmarketing.business.APILocator;\n+import java.security.Key;\n+\n+public class AppsKeyDefaultProvider implements SigningKeyFactory {", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODI4MQ==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548281", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:17Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/listener/SecurityKeyResetTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.dotcms.publishing.listener;\n+\n+import static com.dotcms.publisher.business.PublisherTestUtil.createEndpoint;\n+import static com.dotcms.publisher.business.PublisherTestUtil.createEnvironment;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.company.CompanyAPI;\n+import com.dotcms.company.CompanyAPIFactory;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotcms.publisher.endpoint.business.PublishingEndPointAPI;\n+import com.dotcms.publisher.environment.bean.Environment;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.Company;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.Encryptor;\n+import java.security.Key;\n+import java.util.List;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class SecurityKeyResetTest extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODI5MQ==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548291", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:19Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/listener/SecurityKeyResetTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.dotcms.publishing.listener;\n+\n+import static com.dotcms.publisher.business.PublisherTestUtil.createEndpoint;\n+import static com.dotcms.publisher.business.PublisherTestUtil.createEnvironment;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.company.CompanyAPI;\n+import com.dotcms.company.CompanyAPIFactory;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotcms.publisher.endpoint.business.PublishingEndPointAPI;\n+import com.dotcms.publisher.environment.bean.Environment;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.Company;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.Encryptor;\n+import java.security.Key;\n+import java.util.List;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class SecurityKeyResetTest extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+    }\n+\n+    /**\n+     * Given scenario: This basically tests that after a key reset the push publish endpoint are\n+     * still usable for decrypting important stuff using the new key; Expected: The endpoints that\n+     * were using the key that got re-generated remain usable.\n+     */\n+    @Test\n+    public void Test_Push_Publish_Endpoints_Have_Valid_Keys_After_Key_Reset_Expect_Success() throws Exception {", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODI5Nw==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548297", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:20Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05350AddDotSaltClusterColumnTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05350AddDotSaltClusterColumnTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    private void dropColumn(final DotConnect dotConnect) throws SQLException {\n+        try {\n+            final String dropColumnSQL = \"ALTER TABLE dot_cluster DROP COLUMN cluster_salt\";\n+            dotConnect.executeStatement(dropColumnSQL);\n+        } catch (Exception e) {", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0ODMwNQ==", "url": "https://github.com/dotCMS/core/pull/18638#discussion_r442548305", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-06-18T23:10:21Z", "path": "dotCMS/src/main/java/com/dotcms/publishing/listener/PushPublishKeyResetEventListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.dotcms.publishing.listener;\n+\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotcms.publisher.endpoint.business.PublishingEndPointAPI;\n+import com.dotcms.system.event.local.model.EventSubscriber;\n+import com.dotcms.system.event.local.type.security.CompanyKeyResetEvent;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import java.security.Key;\n+import java.util.List;\n+\n+/**\n+ * Once registered this listener takes care or recreating the Push-Publish Auth-Keys\n+ * First decrypting the old content using the original Key then re-inserting it using the new Key.\n+ */\n+public final class PushPublishKeyResetEventListener implements EventSubscriber<CompanyKeyResetEvent> {\n+\n+    private final PublishingEndPointAPI publishingEndPointAPI;\n+\n+    private PushPublishKeyResetEventListener(final PublishingEndPointAPI publishingEndPointAPI) {\n+        this.publishingEndPointAPI = publishingEndPointAPI;\n+    }\n+\n+    private PushPublishKeyResetEventListener() {\n+       this(APILocator.getPublisherEndPointAPI());\n+    }\n+\n+    @Override\n+    public void notify(final CompanyKeyResetEvent event) {\n+        try {\n+            final Key originalKey = event.getOriginalKey();\n+            final Key newKey = event.getResetKey();\n+            final List<PublishingEndPoint> allEndPoints = publishingEndPointAPI.getAllEndPoints();\n+            for (final PublishingEndPoint publishingEndPoint : allEndPoints) {\n+                try {\n+                    final StringBuilder originalAuthKey = publishingEndPoint.getAuthKey();\n+                    final String authKey = Encryptor.decrypt(originalKey, originalAuthKey.toString());\n+                    final String encryptedKey = Encryptor.encrypt(newKey,authKey);\n+                    publishingEndPoint.setAuthKey(new StringBuilder(encryptedKey));\n+                } catch (Exception e) {", "originalCommit": "078baf5b98c5c22e48f68ecccc48a8f468335d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}