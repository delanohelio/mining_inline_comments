{"pr_number": 18306, "pr_title": "Issue 18284 backend api bugs", "pr_createdAt": "2020-04-14T19:29:41Z", "pr_url": "https://github.com/dotCMS/core/pull/18306", "timeline": [{"oid": "5439a133324e186f1615ad4f119d412bcdb2191d", "url": "https://github.com/dotCMS/core/commit/5439a133324e186f1615ad4f119d412bcdb2191d", "message": "#18284 bug fixing", "committedDate": "2020-04-14T03:51:44Z", "type": "commit"}, {"oid": "1cd1978e2bd9cc1155c7e3fa906d554481e46633", "url": "https://github.com/dotCMS/core/commit/1cd1978e2bd9cc1155c7e3fa906d554481e46633", "message": "#18284 bug fixing", "committedDate": "2020-04-14T19:18:03Z", "type": "commit"}, {"oid": "bf0ef357b5809cade133c0d5662f4199fe2ba887", "url": "https://github.com/dotCMS/core/commit/bf0ef357b5809cade133c0d5662f4199fe2ba887", "message": "#18284 merge with master", "committedDate": "2020-04-14T19:34:12Z", "type": "commit"}, {"oid": "ee51d4c7d926ec8039d2041d2da628793228df3a", "url": "https://github.com/dotCMS/core/commit/ee51d4c7d926ec8039d2041d2da628793228df3a", "message": "#18284  remove comment", "committedDate": "2020-04-14T19:38:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTM1MA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408449350", "bodyText": "Is each position in the map a different test case ?", "author": "nollymar", "createdAt": "2020-04-14T21:33:38Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -459,15 +465,16 @@ public void Test_Create_App_Descriptor_Then_Create_App_Integration_Then_Delete_A\n     }\n \n     @Test\n-    public void Test_Protected_Hidden_Secret_And_Values_Returned_Match_Descriptor() {\n+    public void Test_Secret_Serializer_Returned_Values_Match_Descriptor_Verify_Hidden_Secrets_Are_Protected() throws Exception{\n \n-        final List<String> orderedParamNames = ImmutableList.of(\"param1\",\"param2\",\"param3\",\"param4\");\n+        final List<String> orderedParamNames = ImmutableList.of(\"param1\",\"param2\",\"param3\",\"param4\",\"param5\");\n         //This is how the descriptor looks like.\n         final SortedMap<String, ParamDescriptor> appDescriptorParamsMap = ImmutableSortedMap.of(\n-                orderedParamNames.get(0), ParamDescriptor.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                orderedParamNames.get(1), ParamDescriptor.newParam(\"true\", false, Type.BOOL, \"label\", \"hint\", true),\n-                orderedParamNames.get(2), ParamDescriptor.newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n-                orderedParamNames.get(3), ParamDescriptor.newParam(\"true\", false, Type.BOOL, \"label\", \"hint\", true)\n+                orderedParamNames.get(0), ParamDescriptor.newParam(\"\", true, Type.STRING, \"label\", \"hint\", true),", "originalCommit": "ee51d4c7d926ec8039d2041d2da628793228df3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzM1NA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408457354", "bodyText": "Not really. the true purpose is validating that hidden secrets are coming back protected while the non-hidden show their original value.  I mean anything but a protected secret mask.", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-14T21:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxODAyOA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408918028", "bodyText": "I see duplicate entries, is it ok?", "author": "nollymar", "createdAt": "2020-04-15T15:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4NDczMQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r410484731", "bodyText": "didn't really matter for the purpose of that test but should be cleaner now.", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-17T21:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4NTQ4NA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r410485484", "bodyText": "Trying to be more aligned with the rest of our library  I created an AppDescriptorDataGen", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-17T21:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "b17ae1385f7219228362056bfd8477bbe694daf3", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java b/dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java\nindex 2e215220e6..d30d577613 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java\n\n@@ -467,14 +464,13 @@ public class AppsResourceTest extends IntegrationTestBase {\n     @Test\n     public void Test_Secret_Serializer_Returned_Values_Match_Descriptor_Verify_Hidden_Secrets_Are_Protected() throws Exception{\n \n-        final List<String> orderedParamNames = ImmutableList.of(\"param1\",\"param2\",\"param3\",\"param4\",\"param5\");\n+        final List<String> orderedParamNames = ImmutableList.of(\"param1\",\"param2\",\"param3\",\"param4\");\n         //This is how the descriptor looks like.\n         final SortedMap<String, ParamDescriptor> appDescriptorParamsMap = ImmutableSortedMap.of(\n                 orderedParamNames.get(0), ParamDescriptor.newParam(\"\", true, Type.STRING, \"label\", \"hint\", true),\n                 orderedParamNames.get(1), ParamDescriptor.newParam(\"\", false, Type.BOOL, \"label\", \"hint\", true),//Bools shouldn't be hidden\n-                orderedParamNames.get(2), ParamDescriptor.newParam(\"\", true, Type.STRING, \"label\", \"hint\", true),\n-                orderedParamNames.get(3), ParamDescriptor.newParam(\"\", false, Type.BOOL, \"label\", \"hint\", true), //Bools shouldn't be hidden\n-                orderedParamNames.get(4), ParamDescriptor.newParam(\"\", false, Type.STRING, \"label\", \"hint\", true) //Bools shouldn't be hidden\n+                orderedParamNames.get(2), ParamDescriptor.newParam(\"\", false, Type.BOOL, \"label\", \"hint\", true), //Bools shouldn't be hidden\n+                orderedParamNames.get(3), ParamDescriptor.newParam(\"\", false, Type.STRING, \"label\", \"hint\", true) //Bools shouldn't be hidden\n         );\n \n         final HttpServletRequest request = mock(HttpServletRequest.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU3NDYwOQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408574609", "bodyText": "Add doc", "author": "jdotcms", "createdAt": "2020-04-15T04:31:47Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsCache.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotmarketing.business.Cachable;\n+import com.dotmarketing.business.DotCacheException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+public abstract class AppsCache implements Cachable {", "originalCommit": "ee51d4c7d926ec8039d2041d2da628793228df3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MzI3OA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r410483278", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-17T21:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU3NDYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b17ae1385f7219228362056bfd8477bbe694daf3", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/security/apps/AppsCache.java b/dotCMS/src/main/java/com/dotcms/security/apps/AppsCache.java\nindex 4bb569241d..48743f2051 100644\n--- a/dotCMS/src/main/java/com/dotcms/security/apps/AppsCache.java\n+++ b/dotCMS/src/main/java/com/dotcms/security/apps/AppsCache.java\n\n@@ -7,6 +7,9 @@ import java.util.Map;\n import java.util.Set;\n import java.util.function.Supplier;\n \n+/**\n+ * Cache Admin allows management of Apps Cache Entries organized in various ways.\n+ */\n public abstract class AppsCache implements Cachable {\n \n     static final String SECRETS_CACHE_GROUP = \"SECRETS_CACHE_GROUP\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU3NTE2MQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408575161", "bodyText": "Very cool", "author": "jdotcms", "createdAt": "2020-04-15T04:33:59Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsCacheImpl.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotmarketing.business.CacheLocator;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.util.UtilMethods;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Cache Admin allows management of Apps Cache.\n+ * Here we have The yml App Descriptors Cache as well as the secret storage.\n+ * The class is just a entry point to the cache administrator.\n+ * You can store secrets organized by key and also keep a list of all the keys that currently exist in the secret store.\n+ */\n+public class AppsCacheImpl extends AppsCache {", "originalCommit": "ee51d4c7d926ec8039d2041d2da628793228df3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MzM3MQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r410483371", "bodyText": "thx", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-17T21:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU3NTE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b17ae1385f7219228362056bfd8477bbe694daf3", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/security/apps/AppsCacheImpl.java b/dotCMS/src/main/java/com/dotcms/security/apps/AppsCacheImpl.java\nindex abbd909401..82acf61ec6 100644\n--- a/dotCMS/src/main/java/com/dotcms/security/apps/AppsCacheImpl.java\n+++ b/dotCMS/src/main/java/com/dotcms/security/apps/AppsCacheImpl.java\n\n@@ -20,12 +20,13 @@ import java.util.stream.Collectors;\n  */\n public class AppsCacheImpl extends AppsCache {\n \n-    private DotCacheAdministrator cache;\n+    private final DotCacheAdministrator cache;\n \n     /**\n      * Default constructor.\n      */\n     public AppsCacheImpl() {\n+        super();\n         cache = CacheLocator.getCacheAdministrator();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NjUwMQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408876501", "bodyText": "I think we can use here a readable value something like: \"HIDDEN SECRET\", I think it give more information than just \"*****\"", "author": "freddyucv", "createdAt": "2020-04-15T14:16:20Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/SecretView.java", "diffHunk": "@@ -107,7 +111,7 @@ private void buildCommonJson(final AbstractProperty property,\n             if (type.equals(Type.BOOL)) {\n                 map.put(\"value\", property.getBoolean());\n             } else {\n-                map.put(\"value\", property.getString());\n+                map.put(\"value\", property.isHidden() ? HIDDEN_SECRET_MASK : property.getString());", "originalCommit": "ee51d4c7d926ec8039d2041d2da628793228df3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4Njc3Ng==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408886776", "bodyText": "But the requirement says hidden secrets must come back from the resource with that value  \"*****\" so they can not be read.", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-15T14:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NjUwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDIwMw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408880203", "bodyText": "are you sure that you are testing all this cases?", "author": "freddyucv", "createdAt": "2020-04-15T14:20:59Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -565,35 +537,73 @@ private static String getServiceDescriptorDirectory() {\n     }\n \n    private boolean validateServiceDescriptor(final AppDescriptor appDescriptor)\n-           throws DotDataException {\n+           throws DotDataValidationException {\n        if(UtilMethods.isNotSet(appDescriptor.getKey())){\n-          throw new DotDataException(\"The required field `key` isn't set on the incoming file.\");\n+          throw new DotDataValidationException(\"The required field `key` isn't set on the incoming file.\");\n        }\n \n        if(appDescriptor.getKey().length() > 100){\n-           throw new DotDataException(\"The required field `key` is too large.\");\n+           throw new DotDataValidationException(\"The required field `key` exceeds 100 chars length.\");\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getName())){\n-           throw new DotDataException(\"The required field `name` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `name` isn't set on the incoming file.\");\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getDescription())){\n-           throw new DotDataException(\"The required field `description` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `description` isn't set on the incoming file.\");\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getIconUrl())){\n-           throw new DotDataException(\"The required field `iconUrl` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `iconUrl` isn't set on the incoming file.\");\n        }\n \n        if(!UtilMethods.isSet(appDescriptor.getParams())){\n-           throw new DotDataException(\"The required field `params` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `params` isn't set on the incoming file.\");\n+       }\n+\n+       for (Map.Entry<String, ParamDescriptor> entry : appDescriptor.getParams().entrySet()) {\n+           validateParamDescriptor(entry.getKey(), entry.getValue());\n        }\n \n        return true;\n \n    }\n \n+   private void validateParamDescriptor(final String name, final ParamDescriptor descriptor) throws DotDataValidationException {\n+\n+       if(UtilMethods.isNotSet(name)){\n+           throw new DotDataValidationException(\"Param descriptor is missing required  field `name` .\");\n+       }\n+\n+       if(name.length() > 100){\n+           throw new DotDataValidationException(String.format(\"Param name `%s` exceeds 100 chars length.\", name));\n+       }\n+\n+       if(UtilMethods.isNotSet(descriptor.getHint())){\n+           throw new DotDataValidationException(\"Param descriptor `%s` is missing required field `hint` .\");\n+       }\n+\n+       if(UtilMethods.isNotSet(descriptor.getLabel())){\n+           throw new DotDataValidationException(String.format(\"Param descriptor `%s` is missing required field `hint` .\",name));\n+       }\n+\n+       if(null == descriptor.getType()){\n+           throw new DotDataValidationException(String.format(\"Param descriptor `%s` is missing required field `type` .\",name));\n+       }\n+\n+       if (Type.BOOL.equals(descriptor.getType()) && descriptor.isHidden() ) {\n+           throw new DotDataValidationException(String.format(\"Boolean Params like `%s` can not be marked hidden.\", name));\n+       }\n+\n+       if (\"null\".equalsIgnoreCase(descriptor.getValue()) && descriptor.isRequired()) {\n+           throw new DotDataValidationException(String.format(\n+                   \"Null isn't allowed as the default value on required params see `%s`. \",\n+                   name)\n+           );\n+       }\n+   }", "originalCommit": "ee51d4c7d926ec8039d2041d2da628793228df3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4NTA5Mw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r410485093", "bodyText": "Tests added", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-17T21:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "b17ae1385f7219228362056bfd8477bbe694daf3", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java b/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java\nindex b6a197fbee..7bf6c2a3d0 100644\n--- a/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java\n\n@@ -542,8 +544,8 @@ public class AppsAPIImpl implements AppsAPI {\n           throw new DotDataValidationException(\"The required field `key` isn't set on the incoming file.\");\n        }\n \n-       if(appDescriptor.getKey().length() > 100){\n-           throw new DotDataValidationException(\"The required field `key` exceeds 100 chars length.\");\n+       if(DESCRIPTOR_KEY_MAX_LENGTH < appDescriptor.getKey().length()){\n+           throw new DotDataValidationException(String.format(\"The required field `key` exceeds %d chars length.\", DESCRIPTOR_KEY_MAX_LENGTH));\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getName())){\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0Njg0Mw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r408946843", "bodyText": "These validations need testing", "author": "nollymar", "createdAt": "2020-04-15T15:47:23Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -565,35 +537,73 @@ private static String getServiceDescriptorDirectory() {\n     }\n \n    private boolean validateServiceDescriptor(final AppDescriptor appDescriptor)\n-           throws DotDataException {\n+           throws DotDataValidationException {\n        if(UtilMethods.isNotSet(appDescriptor.getKey())){\n-          throw new DotDataException(\"The required field `key` isn't set on the incoming file.\");\n+          throw new DotDataValidationException(\"The required field `key` isn't set on the incoming file.\");\n        }\n \n        if(appDescriptor.getKey().length() > 100){\n-           throw new DotDataException(\"The required field `key` is too large.\");\n+           throw new DotDataValidationException(\"The required field `key` exceeds 100 chars length.\");\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getName())){\n-           throw new DotDataException(\"The required field `name` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `name` isn't set on the incoming file.\");\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getDescription())){\n-           throw new DotDataException(\"The required field `description` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `description` isn't set on the incoming file.\");\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getIconUrl())){\n-           throw new DotDataException(\"The required field `iconUrl` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `iconUrl` isn't set on the incoming file.\");\n        }\n \n        if(!UtilMethods.isSet(appDescriptor.getParams())){\n-           throw new DotDataException(\"The required field `params` isn't set on the incoming file.\");\n+           throw new DotDataValidationException(\"The required field `params` isn't set on the incoming file.\");\n+       }\n+\n+       for (Map.Entry<String, ParamDescriptor> entry : appDescriptor.getParams().entrySet()) {\n+           validateParamDescriptor(entry.getKey(), entry.getValue());\n        }\n \n        return true;\n \n    }\n \n+   private void validateParamDescriptor(final String name, final ParamDescriptor descriptor) throws DotDataValidationException {", "originalCommit": "ee51d4c7d926ec8039d2041d2da628793228df3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MzQ2Ng==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r410483466", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2020-04-17T21:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0Njg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b17ae1385f7219228362056bfd8477bbe694daf3", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java b/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java\nindex b6a197fbee..7bf6c2a3d0 100644\n--- a/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java\n+++ b/dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java\n\n@@ -542,8 +544,8 @@ public class AppsAPIImpl implements AppsAPI {\n           throw new DotDataValidationException(\"The required field `key` isn't set on the incoming file.\");\n        }\n \n-       if(appDescriptor.getKey().length() > 100){\n-           throw new DotDataValidationException(\"The required field `key` exceeds 100 chars length.\");\n+       if(DESCRIPTOR_KEY_MAX_LENGTH < appDescriptor.getKey().length()){\n+           throw new DotDataValidationException(String.format(\"The required field `key` exceeds %d chars length.\", DESCRIPTOR_KEY_MAX_LENGTH));\n        }\n \n        if(UtilMethods.isNotSet(appDescriptor.getName())){\n"}}, {"oid": "b17ae1385f7219228362056bfd8477bbe694daf3", "url": "https://github.com/dotCMS/core/commit/b17ae1385f7219228362056bfd8477bbe694daf3", "message": "#save point previous to merge", "committedDate": "2020-04-15T21:20:41Z", "type": "commit"}, {"oid": "6b7ae5a72e544f4d0cc3e81cc38dbafc756c7711", "url": "https://github.com/dotCMS/core/commit/6b7ae5a72e544f4d0cc3e81cc38dbafc756c7711", "message": "#18284 merge", "committedDate": "2020-04-15T21:53:18Z", "type": "commit"}, {"oid": "d844dac6e0342218a98422deacfb519a3e8de686", "url": "https://github.com/dotCMS/core/commit/d844dac6e0342218a98422deacfb519a3e8de686", "message": "#18284 adding the allow extra params to AppView", "committedDate": "2020-04-16T14:23:43Z", "type": "commit"}, {"oid": "ea093e5f8c692fa47c6a09fb6625fc8a5df6d907", "url": "https://github.com/dotCMS/core/commit/ea093e5f8c692fa47c6a09fb6625fc8a5df6d907", "message": "#18284 validation tests", "committedDate": "2020-04-16T20:04:13Z", "type": "commit"}, {"oid": "c6f08c0802358fa7ae8c7c4cf45b5c3fcb992a6b", "url": "https://github.com/dotCMS/core/commit/c6f08c0802358fa7ae8c7c4cf45b5c3fcb992a6b", "message": "#18284 new test case per received feedback", "committedDate": "2020-04-17T02:48:39Z", "type": "commit"}, {"oid": "c55819fe1af5a5eae0a15c248e824c8a64b7db77", "url": "https://github.com/dotCMS/core/commit/c55819fe1af5a5eae0a15c248e824c8a64b7db77", "message": "#18284 new  test cases to validate yml file", "committedDate": "2020-04-17T21:39:37Z", "type": "commit"}, {"oid": "c5bcaebbdf38435f9a925c532e8d4f6b436cc7cb", "url": "https://github.com/dotCMS/core/commit/c5bcaebbdf38435f9a925c532e8d4f6b436cc7cb", "message": "#18284 bot feedback", "committedDate": "2020-04-17T21:48:39Z", "type": "commit"}, {"oid": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "url": "https://github.com/dotCMS/core/commit/be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-18284-backend-api-bugs", "committedDate": "2020-04-20T16:46:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTg3Nw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535877", "bodyText": "Issue found: The String literal \"param3\" appears 9 times in this file; the first occurrence is on line 255", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:08Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -268,25 +238,24 @@ public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_T\n      * Expected Result: Pagination shows all available sites with no configurations and the default values from the yml are loaded instead.\n      */\n     @Test\n-    public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret() {\n-\n-        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n-                \"param1\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true)\n-        );\n+    public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret()\n+            throws IOException {\n+\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"param1\", false,  true)\n+                .stringParam(\"param2\", false,  true)\n+                .stringParam(\"param3\", false,  true)", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTg5MA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535890", "bodyText": "Issue found: The String literal \"desc\" appears 16 times in this file; the first occurrence is on line 474", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:09Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {\n+            final AppsAPI api = APILocator.getAppsAPI();\n+            final User admin = TestUserUtils.getAdminUser();\n+            return api.createAppDescriptor(inputStream, admin);\n+        }\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that expect to break the validation rules\n+     * Expected Result: DotDataValidationException is raised.\n+     */\n+    @Test(expected = DotDataValidationException.class)\n+    @UseDataProvider(\"getExpectedExceptionTestCases\")\n+    public void Test_App_Descriptor_Validation_Expect_Validation_Exceptions(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+    @DataProvider\n+    public static Object[] getExpectedExceptionTestCases() throws Exception {\n+        final Map<String, ParamDescriptor> emptyParams = ImmutableMap.of();\n+        return new Object[]{\n+                //The following test that the general required fields are mandatory.\n+                new AppTestCase(\"\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"\", false, emptyParams),", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTg5Nw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535897", "bodyText": "Issue found: The String literal \"demo\" appears 9 times in this file; the first occurrence is on line 136", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:10Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -144,30 +116,31 @@ private FormDataMultiPart createFormDataMultiPart(final String fileName,\n      * @throws DotSecurityException\n      */\n     @Test\n-    public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_The_Whole_App() {\n+    public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_The_Whole_App()\n+            throws IOException {\n \n         final Host host = new SiteDataGen().nextPersisted();\n-\n-        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n-                \"p1\", ParamDescriptor.newParam(\"v1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"p2\", ParamDescriptor.newParam(\"v2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"p3\", ParamDescriptor.newParam(\"v3\", false, Type.STRING, \"label\", \"hint\", true)\n-        );\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"p1\", false,  true)\n+                .stringParam(\"p2\", false,  true)\n+                .stringParam(\"p3\", false,  true)\n+                .withName(\"any\")\n+                .withDescription(\"demo\")", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTkwNQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535905", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {\n+            final AppsAPI api = APILocator.getAppsAPI();\n+            final User admin = TestUserUtils.getAdminUser();\n+            return api.createAppDescriptor(inputStream, admin);\n+        }\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that expect to break the validation rules\n+     * Expected Result: DotDataValidationException is raised.\n+     */\n+    @Test(expected = DotDataValidationException.class)\n+    @UseDataProvider(\"getExpectedExceptionTestCases\")\n+    public void Test_App_Descriptor_Validation_Expect_Validation_Exceptions(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+    @DataProvider\n+    public static Object[] getExpectedExceptionTestCases() throws Exception {", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTkxNQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535915", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:12Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsCacheImplTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.CacheLocator;\n+import com.dotmarketing.business.DotCacheException;\n+import java.util.Arrays;\n+import java.util.Map;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AppsCacheImplTest {\n+\n+    static AppsCache cache;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTkyNw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535927", "bodyText": "Issue found: Ternary operators that can be simplified with || or &&", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:13Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/ParamDescriptor.java", "diffHunk": "@@ -14,34 +15,64 @@\n \n     private final String hint;\n \n-    private final boolean required;\n+    private final Boolean required;\n \n-    private ParamDescriptor(final String value, final boolean hidden, final Type type, final String label, final String hint, final boolean required) {\n+    /**\n+     * Private Constructor\n+     * @param value\n+     * @param hidden\n+     * @param type\n+     * @param label\n+     * @param hint\n+     * @param required\n+     */\n+    private ParamDescriptor(final String value, final Boolean hidden, final Type type, final String label, final String hint, final Boolean required) {\n         super(value, hidden, type);\n         this.label = label;\n         this.hint = hint;\n         this.required = required;\n     }\n \n+    /**\n+     * Label getter\n+     * @return\n+     */\n     public String getLabel() {\n         return label;\n     }\n \n+    /**\n+     * Hint getter\n+     * @return\n+     */\n     public String getHint() {\n         return hint;\n     }\n \n+    /**\n+     * required getter\n+     * @return\n+     */\n     public boolean isRequired() {\n+        return UtilMethods.isSet(required) ? required : false ;", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTk0Mg==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535942", "bodyText": "Issue found: Field paramMap has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:14Z", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/AppDescriptorDataGen.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.dotcms.datagen;\n+\n+import com.dotcms.security.apps.AppDescriptor;\n+import com.dotcms.security.apps.AppsAPI;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Type;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.google.common.collect.ImmutableSortedMap;\n+import com.google.common.collect.Ordering;\n+import com.liferay.util.StringPool;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.SortedMap;\n+\n+/**\n+ * Test utility to simplify creation of application descriptor yml files\n+ */\n+public class AppDescriptorDataGen extends AbstractDataGen<AppDescriptor> {\n+\n+    private static final ObjectMapper ymlMapper = new ObjectMapper(new YAMLFactory())\n+            .findAndRegisterModules();\n+\n+    private String key = String.format(\"app_%d\", System.currentTimeMillis());\n+    private String name = key;\n+    private String fileName = String.format(\"%s.yml\", key);\n+    private  String description = \"\";\n+    private Boolean allowExtraParameters;\n+    private String iconUrl = \"none.ico\";\n+\n+    private SortedMap<String, ParamDescriptor> paramMap;", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTk2Mg==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535962", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:15Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotmarketing.business.CacheLocator;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.util.UtilMethods;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Cache Admin allows management of Apps Cache.\n+ * Here we have The yml App Descriptors Cache as well as the secret storage.\n+ * The class is just a entry point to the cache administrator.\n+ * You can store secrets organized by key and also keep a list of all the keys that currently exist in the secret store.\n+ */\n+public class AppsCacheImpl extends AppsCache {\n+\n+    private final DotCacheAdministrator cache;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public AppsCacheImpl() {\n+        super();\n+        cache = CacheLocator.getCacheAdministrator();\n+    }\n+\n+    /**\n+     * Mandatory Primary group getter\n+     * @return SECRETS_CACHE_GROUP\n+     */\n+    @Override\n+    public String getPrimaryGroup() {\n+        return SECRETS_CACHE_GROUP;\n+    }\n+\n+    /**\n+     * Groups listing\n+     * @return groups String array\n+     */\n+    @Override\n+    public String[] getGroups() {\n+        return new String[]{SECRETS_CACHE_GROUP, SECRETS_CACHE_KEYS_GROUP, DESCRIPTORS_CACHE_GROUP};\n+    }\n+\n+    /**\n+     * Mandatory clear cache implementation\n+     */\n+    @Override\n+    public void clearCache() {\n+        for (final String group : getGroups()) {\n+            cache.flushGroup(group);\n+        }\n+    }\n+\n+    /**\n+     * This is the base cache method for AppDescriptors tracking\n+     * It takes a supplier that will be called in case no app descriptor is found in cache.\n+     * @param supplier Supplier delegated expected to load AppDescriptors\n+     * @return\n+     */\n+    public List<AppDescriptorMeta> getAppDescriptorsMeta( final Supplier<List<AppDescriptorMeta>> supplier){\n+        List<AppDescriptorMeta> appDescriptors = (List<AppDescriptorMeta>) cache.getNoThrow(DESCRIPTORS_LIST_KEY, DESCRIPTORS_CACHE_GROUP);\n+        if (!UtilMethods.isSet(appDescriptors) && null != supplier) {\n+           appDescriptors = supplier.get();\n+        }\n+        putAppDescriptor(appDescriptors);\n+        return appDescriptors;\n+    }\n+\n+    /**\n+     * This will simply put a list of descriptor into memory.\n+     * @param appDescriptors\n+     */\n+    private void putAppDescriptor(final List<AppDescriptorMeta> appDescriptors) {\n+        cache.put(DESCRIPTORS_LIST_KEY, appDescriptors, DESCRIPTORS_CACHE_GROUP);\n+    }\n+\n+    /**\n+     * Given a supplier delegate able to retrieve AppDescriptors this method will use it to populate cache.\n+     * Once passed that point the method takes whatever descriptors exist in cache and use the returned entries\n+     * to build Map like structure still in cache to track AppDescriptors by app-key.\n+     * If the supplier is null the function will get back the contents from cache and no population attempt will be performed.\n+     * @param supplier\n+     * @return\n+     */\n+    public Map<String, AppDescriptorMeta> getAppDescriptorsMap(final Supplier<List<AppDescriptorMeta>> supplier) {\n+        Map<String, AppDescriptorMeta> descriptorsByKey = (Map<String, AppDescriptorMeta>) cache.getNoThrow(\n+                DESCRIPTORS_MAPPED_BY_KEY, DESCRIPTORS_CACHE_GROUP);\n+        if (!UtilMethods.isSet(descriptorsByKey) && null != supplier) {\n+            synchronized (AppsCacheImpl.class) {\n+                descriptorsByKey = getAppDescriptorsMeta(supplier).stream().collect(\n+                        Collectors.toMap(serviceDescriptorMeta -> serviceDescriptorMeta\n+                                        .getAppDescriptor().getKey().toLowerCase(), Function.identity(),\n+                                (serviceDescriptor, serviceDescriptor2) -> serviceDescriptor));\n+\n+                putDescriptorsByKey(descriptorsByKey);\n+            }\n+        }\n+        return descriptorsByKey;\n+    }\n+\n+    /**\n+     * This simply allow putting in cache\n+     * A Map like structure, Where the key is the app-key and the entry is the AppDescriptor.\n+     * @param descriptorsByKey\n+     */\n+    private void putDescriptorsByKey(final Map<String, AppDescriptorMeta> descriptorsByKey){\n+        cache.put(DESCRIPTORS_MAPPED_BY_KEY, descriptorsByKey, DESCRIPTORS_CACHE_GROUP);\n+    }\n+\n+    /**\n+     * Remove all descriptors from cache;\n+     */\n+    public void invalidateDescriptorsCache(){\n+        cache.flushGroup(DESCRIPTORS_CACHE_GROUP);\n+    }\n+\n+    /**\n+     * In a similar fashion this takes a supplier delegate responsible for getting the secret keys to populate cache.\n+     * If the supplier is null the function will get back the contents from cache and no population attempt will be performed.\n+     * @param supplier string keys set delegate\n+     * @return\n+     * @throws DotCacheException\n+     */\n+    public Set<String> getKeysFromCache(final Supplier<Set<String>> supplier)\n+            throws DotCacheException {\n+        synchronized (AppsCacheImpl.class) {\n+            Set<String> keys = (Set<String>) cache.get(SECRETS_CACHE_KEY, SECRETS_CACHE_KEYS_GROUP);\n+            if (!UtilMethods.isSet(keys) && null != supplier) {\n+                keys = supplier.get();\n+                putKeys(keys);\n+            }\n+            return keys;\n+        }\n+    }\n+\n+    /**\n+     * In this version of the method the supplier is null\n+     * so the function will get back the contents from cache and no population attempt will be performed.\n+     * @return\n+     * @throws DotCacheException\n+     */\n+    public Set<String> getKeysFromCache() throws DotCacheException {\n+       return getKeysFromCache(null);\n+    }\n+\n+    /**\n+     * Given a supplier delegate able to retrieve an encrypted secret this method will use it to populate cache.\n+     * @param key Key\n+     * @param supplier encrypted secret supplier\n+     * @return encrypted secret from cache.\n+     */\n+    public char[] getFromCache(final String key, final Supplier<char[]> supplier) {\n+        synchronized (AppsCacheImpl.class) {\n+            char[] retVal = (char[]) cache.getNoThrow(key, SECRETS_CACHE_GROUP);\n+            if (retVal == null && null != supplier) {\n+                retVal = supplier.get();\n+                putSecret(key, retVal);\n+            }\n+            return retVal;\n+        }\n+    }\n+\n+    /**\n+     * In this version of the method the supplier is null\n+     * so the function will get back the secrets from cache and no population attempt will be performed.\n+     * @param key secret key\n+     * @return encrypted secret from cache.\n+     */\n+    public char[] getFromCache(final String key){\n+       return getFromCache(key, null);\n+    }\n+\n+    /**\n+     * Simply Puts a secret in cache.\n+     * @param key\n+     * @param chars\n+     */\n+    public void putSecret(final String key, final char[] chars){", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTk4MQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535981", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:16Z", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/AppDescriptorDataGen.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.dotcms.datagen;\n+\n+import com.dotcms.security.apps.AppDescriptor;\n+import com.dotcms.security.apps.AppsAPI;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Type;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.google.common.collect.ImmutableSortedMap;\n+import com.google.common.collect.Ordering;\n+import com.liferay.util.StringPool;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.SortedMap;\n+\n+/**\n+ * Test utility to simplify creation of application descriptor yml files\n+ */\n+public class AppDescriptorDataGen extends AbstractDataGen<AppDescriptor> {\n+\n+    private static final ObjectMapper ymlMapper = new ObjectMapper(new YAMLFactory())\n+            .findAndRegisterModules();\n+\n+    private String key = String.format(\"app_%d\", System.currentTimeMillis());\n+    private String name = key;\n+    private String fileName = String.format(\"%s.yml\", key);\n+    private  String description = \"\";\n+    private Boolean allowExtraParameters;\n+    private String iconUrl = \"none.ico\";\n+\n+    private SortedMap<String, ParamDescriptor> paramMap;\n+\n+    public SortedMap<String, ParamDescriptor> paramMap(){\n+       if(null == paramMap){\n+          paramMap = builder.build();\n+       }\n+       return paramMap;\n+    }\n+\n+    private final ImmutableSortedMap.Builder<String, ParamDescriptor> builder = new ImmutableSortedMap.Builder<>(Ordering.natural());\n+\n+    /**\n+     * Next new non-persisted object\n+     * @return\n+     */\n+    @Override\n+    public AppDescriptor next() {\n+        return new AppDescriptor(key, name, description, iconUrl, allowExtraParameters, paramMap());\n+    }\n+\n+    /**\n+     * persist the object passed and generates a file representation.\n+     * @param object the object to persist\n+     * @return\n+     */\n+    @Override\n+    public AppDescriptor persist(final AppDescriptor object) {\n+        final AppsAPI api = APILocator.getAppsAPI();\n+        try (InputStream input = persistDescriptorAsFile(object)) {\n+            return api.createAppDescriptor(input, TestUserUtils.getAdminUser());\n+        } catch (IOException | DotDataException | DotSecurityException e) {\n+            throw new RuntimeException(e);", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTk4Nw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535987", "bodyText": "Issue found: Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:17Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -830,31 +812,31 @@ public void Test_Create_Descriptor_Then_Add_Dynamic_Prop() {\n      * Expected Result: We should be able to add extra params. And they are shown at the end on the site view detail\n      */\n     @Test\n-    public void Test_Pagination_And_Sort_Then_Request_Filter_Expect_Empty_Results() {\n-\n-        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n-                \"param1\", ParamDescriptor\n-                        .newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", ParamDescriptor\n-                        .newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", ParamDescriptor\n-                        .newParam(\"val-3\", false, Type.STRING, \"label\", \"hint\", true)\n-        );\n+    public void Test_Pagination_And_Sort_Then_Request_Filter_Expect_Empty_Results()\n+            throws IOException {\n+\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"param1\", false, true)\n+                .stringParam(\"param2\", false, true)\n+                .stringParam(\"param3\", false, true)\n+                .withName(\"any\")\n+                .withDescription(\"demo\")\n+                .withExtraParameters(false);\n \n         final long timeMark = System.currentTimeMillis();\n-        final List<Host> hosts= new ArrayList<>();\n+        final List<Host> hosts = new ArrayList<>();\n         final char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n         for(final char chr :alphabet) {\n            hosts.add(new SiteDataGen().name( String.format(\"%s,%d\",chr, timeMark )).nextPersisted());\n         }\n         final HttpServletRequest request = mock(HttpServletRequest.class);\n         final HttpServletResponse response = mock(HttpServletResponse.class);\n         when(request.getRequestURI()).thenReturn(\"/baseURL\");\n-        final String key = String.format(\"lol_%d\", System.currentTimeMillis());\n-        final String fileName = String.format(\"%s.yml\", key);\n-        try (final InputStream inputStream = createAppDescriptorFile(fileName, key,\n-                \"lola\",\n-                \"A bunch of string params to demo the mechanism.\", false, paramMap)) {\n+\n+        final String key = dataGen.getKey();\n+        final String fileName = dataGen.getFileName();\n+\n+        try (final InputStream inputStream = dataGen.nextPersistedDescriptor()) {", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNTk5Ng==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411535996", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:18Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsCache.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotmarketing.business.Cachable;\n+import com.dotmarketing.business.DotCacheException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Cache Admin allows management of Apps Cache Entries organized in various ways.\n+ */\n+public abstract class AppsCache implements Cachable {\n+\n+    static final String SECRETS_CACHE_GROUP = \"SECRETS_CACHE_GROUP\";\n+    static final String SECRETS_CACHE_KEYS_GROUP = \"KEYS_CACHE_GROUP\";\n+    static final String SECRETS_CACHE_KEY = \"KEYS_CACHE\";\n+\n+    static final String DESCRIPTORS_CACHE_GROUP = \"DESCRIPTORS_CACHE_GROUP\";\n+    static final String DESCRIPTORS_LIST_KEY = \"DESCRIPTORS_LIST_KEY\";\n+    static final String DESCRIPTORS_MAPPED_BY_KEY = \"DESCRIPTORS_MAPPED_BY_KEY\";\n+\n+    static final char[] CACHE_404 = new char[] {'4', '0', '4'};\n+\n+    public abstract List<AppDescriptorMeta> getAppDescriptorsMeta(Supplier<List<AppDescriptorMeta>> supplier);\n+\n+    public abstract Map<String, AppDescriptorMeta> getAppDescriptorsMap(final Supplier<List<AppDescriptorMeta>> supplier);\n+\n+    public abstract void invalidateDescriptorsCache();\n+\n+    public abstract Set<String> getKeysFromCache(final Supplier<Set<String>> supplier) throws DotCacheException;\n+\n+    public abstract Set<String> getKeysFromCache() throws DotCacheException;\n+\n+    public abstract char[] getFromCache(final String key, final Supplier<char[]> defaultValue);\n+\n+    public abstract char[] getFromCache(final String key);\n+\n+    public abstract void flushSecret();\n+\n+    public abstract void flushSecret(final String key) throws DotCacheException ;\n+\n+    public abstract void putSecret(final String key, final char[] chars);", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjAwNw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536007", "bodyText": "Issue found: Unnecessary modifier 'final' on resource specification 'jsonGenerator': resource specifications are implicitly final", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:19Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -563,39 +527,76 @@ public void Test_Protected_Hidden_Secret_And_Values_Returned_Match_Descriptor()\n                 //Using a LinkedHashMap we guarantee we keep the original order on which the elements were sent.\n                 int index = 0;\n                 for (Entry<String, SecretView> secretEntry : secrets.entrySet()) {\n-                    final String key = secretEntry.getKey();\n-                    final SecretView view = secretEntry.getValue();\n-                    final ParamDescriptor originalParam = appDescriptorParamsMap.get(key);\n-                    if (view.getSecret().isHidden()) {\n-                        Assert.assertEquals(AppsHelper.HIDDEN_SECRET_MASK, new String(view.getSecret().getValue()));\n-                    } else {\n-                        Assert.assertEquals(originalParam.getString(), new String(view.getSecret().getValue()));\n+                    try (StringWriter writer = new StringWriter()) {\n+\n+                        try(final JsonGenerator jsonGenerator = createJsonGenerator(writer)){", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjAxNQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536015", "bodyText": "Issue found: Ternary operators that can be simplified with || or &&", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:20Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AbstractProperty.java", "diffHunk": "@@ -24,6 +25,10 @@ public T getValue() {\n     }\n \n     public boolean isHidden() {\n+        return UtilMethods.isSet(hidden) ? hidden : false;", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjAzMw==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536033", "bodyText": "Issue found: Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:22Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjAzOA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536038", "bodyText": "Issue found: The String literal \"param2\" appears 9 times in this file; the first occurrence is on line 254", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:23Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -268,25 +238,24 @@ public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_T\n      * Expected Result: Pagination shows all available sites with no configurations and the default values from the yml are loaded instead.\n      */\n     @Test\n-    public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret() {\n-\n-        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n-                \"param1\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true)\n-        );\n+    public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret()\n+            throws IOException {\n+\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"param1\", false,  true)\n+                .stringParam(\"param2\", false,  true)", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjA1MQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536051", "bodyText": "Issue found: The String literal \"param1\" appears 19 times in this file; the first occurrence is on line 253", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:24Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -268,25 +238,24 @@ public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_T\n      * Expected Result: Pagination shows all available sites with no configurations and the default values from the yml are loaded instead.\n      */\n     @Test\n-    public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret() {\n-\n-        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n-                \"param1\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", ParamDescriptor\n-                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true)\n-        );\n+    public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret()\n+            throws IOException {\n+\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"param1\", false,  true)", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjA3MQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536071", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:25Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -477,39 +441,36 @@ public void Test_Create_App_Descriptor_Then_Create_App_Integration_Then_Delete_A\n                         .getAppDetail(request, response, appKey, siteId);\n                 Assert.assertEquals(HttpStatus.SC_NOT_FOUND, responseNotFound.getStatus());\n             }\n-        } catch (Exception e) {\n-            Logger.error(AppsResourceTest.class, e);\n-            fail();\n         }\n     }\n \n     /**\n      * Test hidden secrets come back protected.\n      * Given scenario: We have a descriptor with hidden and non-hidden stuff\n-     * Expected Result: Whatever was marked as hidden in the app-descriptor must come back protected.\n+     * Expected Result: Whatever was marked as hidden in the app-descriptor must come back protected Also we expect the response to have the params in natural order.\n      */\n     @Test\n-    public void Test_Protected_Hidden_Secret_And_Values_Returned_Match_Descriptor() {\n+    public void Test_Secret_Serializer_Returned_Values_Match_Descriptor_Verify_Hidden_Secrets_Are_Protected_Verify_Params_Are_Ordered() throws Exception{", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjA4NA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536084", "bodyText": "Issue found: The String literal \"label\" appears 10 times in this file; the first occurrence is on line 493", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:26Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {\n+            final AppsAPI api = APILocator.getAppsAPI();\n+            final User admin = TestUserUtils.getAdminUser();\n+            return api.createAppDescriptor(inputStream, admin);\n+        }\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that expect to break the validation rules\n+     * Expected Result: DotDataValidationException is raised.\n+     */\n+    @Test(expected = DotDataValidationException.class)\n+    @UseDataProvider(\"getExpectedExceptionTestCases\")\n+    public void Test_App_Descriptor_Validation_Expect_Validation_Exceptions(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+    @DataProvider\n+    public static Object[] getExpectedExceptionTestCases() throws Exception {\n+        final Map<String, ParamDescriptor> emptyParams = ImmutableMap.of();\n+        return new Object[]{\n+                //The following test that the general required fields are mandatory.\n+                new AppTestCase(\"\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false, emptyParams),\n+                //Name too large.\n+                new AppTestCase(RandomStringUtils\n+                        .randomAlphanumeric(AppsAPIImpl.DESCRIPTOR_KEY_MAX_LENGTH + 1), \"any-name\",\n+                        \"desc\", \"icon\", false,\n+                        emptyParams),\n+                //Key-too large.\n+                new AppTestCase(\"any-key\", RandomStringUtils\n+                        .randomAlphanumeric(AppsAPIImpl.DESCRIPTOR_NAME_MAX_LENGTH + 1), \"desc\",\n+                        \"icon\", false,\n+                        emptyParams),\n+                //The following test paramDefinition.\n+                //Null type  is not allowed.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                       ImmutableSortedMap.of(\"p1\", newParam(\"\", true, null, \"\", \"\", true)\n+                )),\n+                //Hidden bool param is not allowed.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                       ImmutableSortedMap.of(\"p1\", newParam(\"\", true, Type.BOOL, \"label\", \"hint\", true)", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjA5MA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536090", "bodyText": "Issue found: The String literal \"any-name\" appears 16 times in this file; the first occurrence is on line 473", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:26Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {\n+            final AppsAPI api = APILocator.getAppsAPI();\n+            final User admin = TestUserUtils.getAdminUser();\n+            return api.createAppDescriptor(inputStream, admin);\n+        }\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that expect to break the validation rules\n+     * Expected Result: DotDataValidationException is raised.\n+     */\n+    @Test(expected = DotDataValidationException.class)\n+    @UseDataProvider(\"getExpectedExceptionTestCases\")\n+    public void Test_App_Descriptor_Validation_Expect_Validation_Exceptions(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+    @DataProvider\n+    public static Object[] getExpectedExceptionTestCases() throws Exception {\n+        final Map<String, ParamDescriptor> emptyParams = ImmutableMap.of();\n+        return new Object[]{\n+                //The following test that the general required fields are mandatory.\n+                new AppTestCase(\"\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"\", \"\", false, emptyParams),", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjA5OQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536099", "bodyText": "Issue found: The String literal \"any\" appears 9 times in this file; the first occurrence is on line 135", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:27Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -144,30 +116,31 @@ private FormDataMultiPart createFormDataMultiPart(final String fileName,\n      * @throws DotSecurityException\n      */\n     @Test\n-    public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_The_Whole_App() {\n+    public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_The_Whole_App()\n+            throws IOException {\n \n         final Host host = new SiteDataGen().nextPersisted();\n-\n-        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n-                \"p1\", ParamDescriptor.newParam(\"v1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"p2\", ParamDescriptor.newParam(\"v2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"p3\", ParamDescriptor.newParam(\"v3\", false, Type.STRING, \"label\", \"hint\", true)\n-        );\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"p1\", false,  true)\n+                .stringParam(\"p2\", false,  true)\n+                .stringParam(\"p3\", false,  true)\n+                .withName(\"any\")", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjExMA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536110", "bodyText": "Issue found: The String literal \"any-key\" appears 13 times in this file; the first occurrence is on line 472", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:29Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {\n+            final AppsAPI api = APILocator.getAppsAPI();\n+            final User admin = TestUserUtils.getAdminUser();\n+            return api.createAppDescriptor(inputStream, admin);\n+        }\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that expect to break the validation rules\n+     * Expected Result: DotDataValidationException is raised.\n+     */\n+    @Test(expected = DotDataValidationException.class)\n+    @UseDataProvider(\"getExpectedExceptionTestCases\")\n+    public void Test_App_Descriptor_Validation_Expect_Validation_Exceptions(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+    @DataProvider\n+    public static Object[] getExpectedExceptionTestCases() throws Exception {\n+        final Map<String, ParamDescriptor> emptyParams = ImmutableMap.of();\n+        return new Object[]{\n+                //The following test that the general required fields are mandatory.\n+                new AppTestCase(\"\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"\", \"\", \"\", false, emptyParams),", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjEyMA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536120", "bodyText": "Issue found: The String literal \"icon\" appears 15 times in this file; the first occurrence is on line 475", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:30Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {\n+            final AppsAPI api = APILocator.getAppsAPI();\n+            final User admin = TestUserUtils.getAdminUser();\n+            return api.createAppDescriptor(inputStream, admin);\n+        }\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that expect to break the validation rules\n+     * Expected Result: DotDataValidationException is raised.\n+     */\n+    @Test(expected = DotDataValidationException.class)\n+    @UseDataProvider(\"getExpectedExceptionTestCases\")\n+    public void Test_App_Descriptor_Validation_Expect_Validation_Exceptions(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+    @DataProvider\n+    public static Object[] getExpectedExceptionTestCases() throws Exception {\n+        final Map<String, ParamDescriptor> emptyParams = ImmutableMap.of();\n+        return new Object[]{\n+                //The following test that the general required fields are mandatory.\n+                new AppTestCase(\"\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false, emptyParams),", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjEyOA==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536128", "bodyText": "Issue found: The String literal \"any-value\" appears 5 times in this file; the first occurrence is on line 736", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:31Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -736,18 +725,15 @@ public void Test_Required_Params_Multiple_Params_Descriptor_Non_Empty_Value_Miss\n             //Secrets are destroyed for security every time. Making the form useless. They need to be re-generated every time.\n             //We're sending only one parameter when the descriptor says there's another one mandatory.\n             final Map<String, Input> inputParamMap = ImmutableMap.of(\n-                    \"param1\", Input.newInputParam(\"any-value\".toCharArray(),false)\n-                    //Please Notice We're NOT sending param2\n+                    \"param1\", newInputParam(\"any-value\".toCharArray(),false)", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNjEzOQ==", "url": "https://github.com/dotCMS/core/pull/18306#discussion_r411536139", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-20T16:53:32Z", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -418,6 +434,160 @@ public void Test_Secret_Destroy_Method() {\n         }\n     }\n \n+    private AppDescriptor evaluateAppTestCase(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        Logger.info(AppsAPIImplTest.class, () -> \"Evaluating  \" + testCase.toString());\n+        final AppDescriptorDataGen descriptorDataGen = new AppDescriptorDataGen();\n+        descriptorDataGen.withName(testCase.name).withKey(testCase.key)\n+                .withExtraParameters(testCase.allowExtraParameters)\n+                .withDescription(testCase.description).withIconUrl(testCase.iconUrl);\n+        for (final Map.Entry<String, ParamDescriptor> entry : testCase.params.entrySet()) {\n+            descriptorDataGen.param(entry.getKey(), entry.getValue());\n+        }\n+        try (final InputStream inputStream = descriptorDataGen.nextPersistedDescriptor()) {\n+            final AppsAPI api = APILocator.getAppsAPI();\n+            final User admin = TestUserUtils.getAdminUser();\n+            return api.createAppDescriptor(inputStream, admin);\n+        }\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that expect to break the validation rules\n+     * Expected Result: DotDataValidationException is raised.\n+     */\n+    @Test(expected = DotDataValidationException.class)\n+    @UseDataProvider(\"getExpectedExceptionTestCases\")\n+    public void Test_App_Descriptor_Validation_Expect_Validation_Exceptions(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+    @DataProvider\n+    public static Object[] getExpectedExceptionTestCases() throws Exception {\n+        final Map<String, ParamDescriptor> emptyParams = ImmutableMap.of();\n+        return new Object[]{\n+                //The following test that the general required fields are mandatory.\n+                new AppTestCase(\"\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"\", false, emptyParams),\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false, emptyParams),\n+                //Name too large.\n+                new AppTestCase(RandomStringUtils\n+                        .randomAlphanumeric(AppsAPIImpl.DESCRIPTOR_KEY_MAX_LENGTH + 1), \"any-name\",\n+                        \"desc\", \"icon\", false,\n+                        emptyParams),\n+                //Key-too large.\n+                new AppTestCase(\"any-key\", RandomStringUtils\n+                        .randomAlphanumeric(AppsAPIImpl.DESCRIPTOR_NAME_MAX_LENGTH + 1), \"desc\",\n+                        \"icon\", false,\n+                        emptyParams),\n+                //The following test paramDefinition.\n+                //Null type  is not allowed.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                       ImmutableSortedMap.of(\"p1\", newParam(\"\", true, null, \"\", \"\", true)\n+                )),\n+                //Hidden bool param is not allowed.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                       ImmutableSortedMap.of(\"p1\", newParam(\"\", true, Type.BOOL, \"label\", \"hint\", true)\n+                )),\n+                //emptyLabel.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                       ImmutableSortedMap.of(\"p1\", newParam(\"v1\", true, Type.STRING, \"\", \"\", true)\n+                )),\n+                //emptyHint.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                       ImmutableSortedMap.of(\"p1\", newParam(\"v1\", true, Type.STRING, \"label\", \"\", true)\n+                )),\n+                //Required param with null default.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                       ImmutableSortedMap.of(\"p1\", newParam(\"null\", false, Type.STRING, \"label\", \"hint\", true)\n+                )),\n+                //non parsable to bool string.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                        ImmutableSortedMap.of(\"p1\", newParam(\"lol\", false, Type.BOOL, \"label\", \"hint\", true)\n+                )),\n+                //Null hidden to emulate missing hidden field.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                        ImmutableSortedMap.of(\n+                                \"p1\", newParam(\"false\", null, Type.BOOL, \"label\", \"hint\", true)\n+                        )),\n+                //Null required to emulate missing hidden field.\n+                new AppTestCase(\"any-key\", \"any-name\", \"desc\", \"icon\", false,\n+                        ImmutableSortedMap.of(\n+                                \"p1\", newParam(\"false\", false, Type.BOOL, \"label\", \"hint\", null)\n+                        ))\n+        };\n+    }\n+\n+    /**\n+     * Test AppsAPI#createAppDescriptor input validation.\n+     * Given scenario: Passing Params that normally wouldn't break the validation rules.\n+     * Expected Result: No DotDataValidationException is raised.\n+     */\n+    @Test\n+    @UseDataProvider(\"getValidExceptionFreeTestCases\")\n+    public void Test_App_Descriptor_Validation_Exception_Free(final AppTestCase testCase)\n+            throws IOException, DotDataException, DotSecurityException {\n+        assertNotNull(evaluateAppTestCase(testCase));\n+    }\n+\n+\n+    @DataProvider\n+    public static Object[] getValidExceptionFreeTestCases() throws Exception {", "originalCommit": "be6b27bd6fce638bfe0bf5befec769f4ce9a6300", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}