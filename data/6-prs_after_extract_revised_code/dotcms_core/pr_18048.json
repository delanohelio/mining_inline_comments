{"pr_number": 18048, "pr_title": "#17994 : As of many versions ago, pushing an archived content would m\u2026", "pr_createdAt": "2020-02-26T18:13:41Z", "pr_url": "https://github.com/dotCMS/core/pull/18048", "timeline": [{"oid": "1e5fba4e85928642a018809561c185e9946190ca", "url": "https://github.com/dotCMS/core/commit/1e5fba4e85928642a018809561c185e9946190ca", "message": "#17994 : As of many versions ago, pushing an archived content would make dotCMS delete it altogether in the receiving instance, which is incorrect. This change allows the Push Publishing feature and the Push Now actionlet the flexibility to push an archived content to the receiver for: (1) Simply flagging it as Archived, or (2) to delete it completely.", "committedDate": "2020-02-26T18:11:06Z", "type": "commit"}, {"oid": "2afa92cc3cc0a4a99febbe242c6ba2a1dd98f903", "url": "https://github.com/dotCMS/core/commit/2afa92cc3cc0a4a99febbe242c6ba2a1dd98f903", "message": "#17994 : Implementing valid suggestions from Codacy.", "committedDate": "2020-02-26T18:24:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjQwNw==", "url": "https://github.com/dotCMS/core/pull/18048#discussion_r384682407", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-02-26T18:31:27Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/PushNowActionlet.java", "diffHunk": "@@ -14,122 +18,135 @@\n import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n import com.dotmarketing.util.Logger;\n import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n \n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n \n+/**\n+ * This Workflow Actionlet allows users to Push Publish a piece of Content when executing a Workflow Action. It takes\n+ * two parameters:\n+ * <ol>\n+ *     <li><b>Name of the Environment (String):</b> The name of the Push Publishing environment that will receive the\n+ *     Contentlet.</li>\n+ *     <li><b>Force the Push? true or false (String):</b> Type in true if the push will be forced. Otherwise, type in\n+ *     false. Defaults to false.</li>\n+ * </ol>\n+ * It's worth noting that, as its name implies, this Workflow Actionlet <b>allows users to {@code Push} content ONLY,\n+ * and NOT to {@code Remove} or {@code Push Remove}.</b>\n+ *\n+ * @author Oscar Arrieta\n+ * @version 3.2\n+ * @since Mar 4, 2015\n+ */\n public class PushNowActionlet extends WorkFlowActionlet {\n \n     private static final long serialVersionUID = 1L;\n-    private PublisherAPI publisherAPI = PublisherAPI.getInstance();\n \n-    @Override\n-    public List<WorkflowActionletParameter> getParameters() {\n-        List<WorkflowActionletParameter> params = new ArrayList<WorkflowActionletParameter>();\n+    private static final String ENVIRONMENT_DELIMITER = \",\";\n+    private static final String ACTIONLET_NAME = \"Push Now\";\n+    private static final String ACTIONLET_DESCRIPTION = \"This actionlet will automatically publish the the content \" +\n+            \"object to the specified environment(s). Multiple environments can be separated by a comma (',')\";\n+    private static final String PARAM_ENVIRONMENT = \"environment\";\n+    private static final String PARAM_FORCE_PUSH = \"force\";\n \n-        params.add(new WorkflowActionletParameter(\"environment\", \"Name of the Enviroment\", \"\", true));\n-        params.add(new WorkflowActionletParameter(\"force\", \"Force the Push? true or false\", \"false\", true));\n+    private final PublisherAPI publisherAPI = PublisherAPI.getInstance();\n+    private final EnvironmentAPI environmentAPI = APILocator.getEnvironmentAPI();\n+    private final BundleAPI bundleAPI = APILocator.getBundleAPI();\n+    private final UserAPI userAPI = APILocator.getUserAPI();\n+    private final RoleAPI roleAPI = APILocator.getRoleAPI();\n \n+    @Override\n+    public List<WorkflowActionletParameter> getParameters() {\n+        final List<WorkflowActionletParameter> params = new ArrayList<>();\n+        params.add(new WorkflowActionletParameter(PARAM_ENVIRONMENT, \"Name of the Environment\", \"\", true));\n+        params.add(new WorkflowActionletParameter(PARAM_FORCE_PUSH, \"Force the Push? true or false\", \"false\", true));\n         return params;\n     }\n \n     @Override\n     public String getName() {\n-        return \"Push Now\";\n+        return ACTIONLET_NAME;\n     }\n \n     @Override\n     public String getHowTo() {\n-        return \"This actionlet will automatically publish the the content object to the specified enviroment(s). Multiple Environments can be separated by a comma\";\n+        return ACTIONLET_DESCRIPTION;\n     }\n \n-    public void executeAction(WorkflowProcessor processor, Map<String, WorkflowActionClassParameter> params)\n+    @Override\n+    public void executeAction(final WorkflowProcessor processor, final Map<String, WorkflowActionClassParameter> params)\n             throws WorkflowActionFailureException {\n+        final List<String> identifiers = new ArrayList<>();\n+        final Contentlet contentlet = processor.getContentlet();\n+        final User user = processor.getUser();\n+        final String environments = params.get(PARAM_ENVIRONMENT).getValue();\n         try {\n-            // Gets available languages\n-            // List<Language> languages = languagesAPI.getLanguages();\n-\n-            Contentlet ref = processor.getContentlet();\n-\n-            boolean _contentPushNeverExpire = true;\n-\n-            boolean forcePush = (\"true\".equals(params.get(\"force\").getValue())) ? true : false;\n-            String envrions = params.get(\"environment\").getValue();\n-            if (envrions == null) {\n-                Logger.error(this.getClass(), \"There are no environments set to push to\");\n+            if (!UtilMethods.isSet(environments)) {\n+                Logger.error(this, \"There are no Push Publishing environments set to send the bundle.\");\n             }\n-\n-            String[] whereToSend = envrions.split(\",\");\n-\n-            List<Environment> envsToSendTo = new ArrayList<Environment>();\n-            List<Environment> permissionedEnv = new ArrayList<Environment>();\n-            List<Environment> finalEnvs = new ArrayList<Environment>();\n-\n-\n+            final String[] whereToSend = environments.split(ENVIRONMENT_DELIMITER);\n+            final List<Environment> envsToSendTo = new ArrayList<>();\n             // Lists of Environments to push to\n-            for (String name : whereToSend) {\n-                if (UtilMethods.isSet(name)) {\n-                    name = name.trim();\n-                    final Environment e = APILocator.getEnvironmentAPI().findEnvironmentByName(name);\n-                    if (e != null) {\n-\n-                        envsToSendTo.add(e);\n-                    }else{\n-                        Logger.error(PushNowActionlet.class, \"The Environment \" + name + \" does not exists\");\n+            for (String environmentName : whereToSend) {\n+                if (UtilMethods.isSet(environmentName)) {\n+                    environmentName = environmentName.trim();\n+                    final Environment environment = this.environmentAPI.findEnvironmentByName(environmentName);\n+                    if (null != environment && UtilMethods.isSet(environment.getId())) {\n+                        envsToSendTo.add(environment);\n+                    } else {\n+                        Logger.error(this, \"The Environment '\" + environmentName + \"' does not exist.\");\n                     }\n                 }\n-\n             }\n-\n-            if(envsToSendTo.isEmpty()){\n-                throw new DotPublisherException(\"There are no enviroments to send the bundle\");\n+            if (envsToSendTo.isEmpty()) {\n+                throw new WorkflowActionFailureException(\"There are no environments to send the bundle.\");\n             }\n-\n-\n             // make sure the user has permissions to push\n-            boolean isAdmin = APILocator.getUserAPI().isCMSAdmin(processor.getUser());\n-            List<Role> roles = APILocator.getRoleAPI().loadRolesForUser(processor.getUser().getUserId(),true);\n-            if(isAdmin){\n-                List<Environment> app = APILocator.getEnvironmentAPI().findEnvironmentsWithServers();\n-                for(Environment e:app)\n-                    permissionedEnv.add(e);\n-            }\n-            else{\n-                for(Role r: roles){\n+            final boolean isAdmin = this.userAPI.isCMSAdmin(user);\n+            final List<Role> roleList = this.roleAPI.loadRolesForUser(user.getUserId(),true);\n+            final List<Environment> permissionedEnv = new ArrayList<>();\n+            if (isAdmin) {\n+                final List<Environment> environmentList = this.environmentAPI.findEnvironmentsWithServers();\n+                for (final Environment environment : environmentList) {\n+                    permissionedEnv.add(environment);\n+                }\n+            } else {\n+                for (final Role role : roleList){\n                     try {\n-                        permissionedEnv.addAll(APILocator.getEnvironmentAPI().findEnvironmentsByRole(r.getId()));\n-                    } catch (Exception e) {\n-                        Logger.error(PushNowActionlet.class, e.getMessage());\n+                        permissionedEnv.addAll(this.environmentAPI.findEnvironmentsByRole(role.getId()));\n+                    } catch (final Exception e) {", "originalCommit": "2afa92cc3cc0a4a99febbe242c6ba2a1dd98f903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}