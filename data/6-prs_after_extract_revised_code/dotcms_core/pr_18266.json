{"pr_number": 18266, "pr_title": "#18132 Fix another case and Integration test for it", "pr_createdAt": "2020-04-03T20:39:09Z", "pr_url": "https://github.com/dotCMS/core/pull/18266", "timeline": [{"oid": "ca7d45d01418d3b81683a645804bd7210f46ef95", "url": "https://github.com/dotCMS/core/commit/ca7d45d01418d3b81683a645804bd7210f46ef95", "message": "#18132 Fix another case and Integration test for it", "committedDate": "2020-04-03T20:38:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyNTM1OA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r403325358", "bodyText": "it better move this logic into a private method", "author": "freddyucv", "createdAt": "2020-04-03T20:49:39Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/ContentletLoader.java", "diffHunk": "@@ -560,7 +560,8 @@ public InputStream writeObject(final VelocityResourceKey key)\n \n         long language = new Long(key.language);\n         ContentletVersionInfo info = APILocator.getVersionableAPI().getContentletVersionInfo(key.id1, language);\n-        if (info == null && language != defaultLang && APILocator.getLanguageAPI().canDefaultContentToDefaultLanguage()) {\n+\n+        if ((info == null || key.mode.showLive && info.getLiveInode() == null) && language != defaultLang && APILocator.getLanguageAPI().canDefaultContentToDefaultLanguage()) {", "originalCommit": "ca7d45d01418d3b81683a645804bd7210f46ef95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTEyMw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r404349123", "bodyText": "fixed", "author": "dsilvam", "createdAt": "2020-04-06T19:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyNTM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "3627c64bf241f81e55db4a980ba2f8fc976ee2bf", "chunk": "diff --git a/dotCMS/src/main/java/com/dotcms/rendering/velocity/services/ContentletLoader.java b/dotCMS/src/main/java/com/dotcms/rendering/velocity/services/ContentletLoader.java\nindex 35b447d612..f3539ca71f 100644\n--- a/dotCMS/src/main/java/com/dotcms/rendering/velocity/services/ContentletLoader.java\n+++ b/dotCMS/src/main/java/com/dotcms/rendering/velocity/services/ContentletLoader.java\n\n@@ -561,11 +561,11 @@ public class ContentletLoader implements DotLoader {\n         long language = new Long(key.language);\n         ContentletVersionInfo info = APILocator.getVersionableAPI().getContentletVersionInfo(key.id1, language);\n \n-        if ((info == null || key.mode.showLive && info.getLiveInode() == null) && language != defaultLang && APILocator.getLanguageAPI().canDefaultContentToDefaultLanguage()) {\n+        if (!isLiveVersionAvailable(key, info) && language != defaultLang && APILocator.getLanguageAPI().canDefaultContentToDefaultLanguage()) {\n             info = APILocator.getVersionableAPI().getContentletVersionInfo(key.id1, defaultLang);\n         }\n \n-        if (info == null || key.mode.showLive && info.getLiveInode() == null) {\n+        if (!isLiveVersionAvailable(key, info)) {\n             throw new ResourceNotFoundException(\"cannot find content for: \" + key);\n         }\n         Contentlet contentlet =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjUxOA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r403332518", "bodyText": "here we should check also if it is the right content", "author": "freddyucv", "createdAt": "2020-04-03T20:59:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -551,7 +619,79 @@ public void test_MultilangContent_IndexingAllLanguages()\n             SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n             Assert.assertTrue(searchResults.getTotalResults() >= 1);", "originalCommit": "ca7d45d01418d3b81683a645804bd7210f46ef95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTIxOQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r404349219", "bodyText": "fixed", "author": "dsilvam", "createdAt": "2020-04-06T19:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "8ced26b1d3c559cd4262ce7048e64cfc506b9d2e", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java b/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\nindex 1ba683a6c9..3eec0740f6 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\n\n@@ -618,6 +923,9 @@ public class SiteSearchJobImplTest extends IntegrationTestBase {\n \n             SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n             Assert.assertTrue(searchResults.getTotalResults() >= 1);\n+            Assert.assertEquals(page.getTitle(), searchResults.getResults().get(0).getTitle());\n+            Assert.assertEquals(page.getLanguageId(), searchResults.getResults().get(0).getLanguage());\n+\n \n         } finally {\n             Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjU4Mg==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r403332582", "bodyText": "here we should check also if it is the right content", "author": "freddyucv", "createdAt": "2020-04-03T20:59:20Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -551,7 +619,79 @@ public void test_MultilangContent_IndexingAllLanguages()\n             SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n             Assert.assertTrue(searchResults.getTotalResults() >= 1);\n \n-            searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n+        } finally {\n+            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\",\n+                    defaultContentToDefaultLangOriginalValue);\n+        }\n+    }\n+\n+    /**\n+     * Given sceneario: Content in default language only referenced from a page in default language, and having DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true.\n+     * Create a Site-Search run including the second language only.\n+     * Expected result: the page should be in the results, because DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true and DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true .\n+     */\n+\n+    @Test\n+    public void test_DefaultLangContent_DefaultLangPage_IndexingSecondLang_ShouldFindResults()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException, WebAssetException {\n+\n+        boolean defaultContentToDefaultLangOriginalValue =\n+                Config.getBooleanProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", false);\n+\n+        try {\n+\n+            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", true);\n+\n+            final Host site = new SiteDataGen().nextPersisted();\n+            Language defaultLang = APILocator.getLanguageAPI().getDefaultLanguage();\n+            Language secondLang = new LanguageDataGen().nextPersisted();\n+            folder = new FolderDataGen().site(site).nextPersisted();\n+\n+            Contentlet contentDefaultLang = createAndPublishEmployeeContent(site, defaultLang, \"catherine\");\n+\n+            // create container, template and htmlpage to reference previously created content\n+\n+            HTMLPageAsset page = createHtmlPageAsset(defaultLang, contentDefaultLang);\n+\n+            final String html = APILocator.getHTMLPageAssetAPI().getHTML(page.getURI(), site, true,\n+                    contentDefaultLang.getIdentifier(), APILocator.systemUser(),\n+                    contentDefaultLang.getLanguageId(), USER_AGENT_DOTCMS_SITESEARCH);\n+\n+            Assert.assertFalse(html.isEmpty());\n+            Assert.assertTrue(\"Page should contain content's body\", html.contains(\"catherine\"));\n+\n+            final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+            for (final String index : indicesBeforeTest) {\n+                esIndexAPI.delete(index);\n+            }\n+            final String jobId = UUIDUtil.uuid();\n+            final String alias = \"any-alias-\" + System.currentTimeMillis();\n+            final JobDataMap jobDataMap = new JobDataMap();\n+            jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+            jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.FALSE.toString());\n+            jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, alias);\n+            jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+            jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME,\n+                    SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+            jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+            jobDataMap\n+                    .put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{\n+                            Long.toString(secondLang.getId())});\n+            jobDataMap.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+            final JobDetail jobDetail = Mockito.mock(JobDetail.class);\n+            Mockito.when(jobDetail.getJobDataMap()).thenReturn(jobDataMap);\n+            final JobExecutionContext context = Mockito.mock(JobExecutionContext.class);\n+            Mockito.when(context.getJobDetail()).thenReturn(jobDetail);\n+            Mockito.when(context.getFireTime()).thenReturn(new Date());\n+            final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+            impl.run(context);\n+\n+            final List<String> indicesAfterTest = siteSearchAPI.listIndices();\n+            Assert.assertFalse(indicesAfterTest.isEmpty());\n+            final String newIndexName = indicesAfterTest.get(0);\n+\n+            SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n             Assert.assertTrue(searchResults.getTotalResults() >= 1);", "originalCommit": "ca7d45d01418d3b81683a645804bd7210f46ef95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTI1Ng==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r404349256", "bodyText": "fixed", "author": "dsilvam", "createdAt": "2020-04-06T19:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ced26b1d3c559cd4262ce7048e64cfc506b9d2e", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java b/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\nindex 1ba683a6c9..3eec0740f6 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\n\n@@ -618,6 +923,9 @@ public class SiteSearchJobImplTest extends IntegrationTestBase {\n \n             SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n             Assert.assertTrue(searchResults.getTotalResults() >= 1);\n+            Assert.assertEquals(page.getTitle(), searchResults.getResults().get(0).getTitle());\n+            Assert.assertEquals(page.getLanguageId(), searchResults.getResults().get(0).getLanguage());\n+\n \n         } finally {\n             Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjk2Mw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r403332963", "bodyText": "do we have this scenario?\nContent in default language only referenced from a page in default language, and having DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false.", "author": "freddyucv", "createdAt": "2020-04-03T21:00:14Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -560,5 +700,32 @@ public void test_MultilangContent_IndexingAllLanguages()\n         }\n     }\n \n+    private HTMLPageAsset createHtmlPageAsset(Language lang1, Contentlet contentlet)\n+            throws DotSecurityException, WebAssetException, DotDataException {\n+        final Container container = new ContainerDataGen().withContentType(contentlet\n+                .getContentType(), \"$!{firstName}\").nextPersisted();\n+\n+        ContainerDataGen.publish(container);\n+\n+        final String uuid = UUIDGenerator.generateUuid();\n+\n+        final Template template = new TemplateDataGen()\n+                .withContainer(container.getIdentifier(), uuid)\n+                .nextPersisted();\n+\n+        TemplateDataGen.publish(template);\n+\n+        HTMLPageAsset page = new HTMLPageDataGen(folder, template).languageId(lang1.getId())\n+                .nextPersisted();\n+\n+        HTMLPageDataGen.publish(page);\n \n+        final MultiTree multiTree = new MultiTree(page.getIdentifier(),\n+                container.getIdentifier(),\n+                contentlet.getIdentifier(), getDotParserContainerUUID(uuid), 0);\n+\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        return page;\n+    }", "originalCommit": "ca7d45d01418d3b81683a645804bd7210f46ef95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMzI0NA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r403333244", "bodyText": "and this one?\nContent in default language only referenced from a page in default language, and having DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false.", "author": "freddyucv", "createdAt": "2020-04-03T21:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTMxOA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r404349318", "bodyText": "New cases added", "author": "dsilvam", "createdAt": "2020-04-06T19:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8ced26b1d3c559cd4262ce7048e64cfc506b9d2e", "chunk": "diff --git a/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java b/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\nindex 1ba683a6c9..3eec0740f6 100644\n--- a/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\n+++ b/dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java\n\n@@ -693,6 +1001,8 @@ public class SiteSearchJobImplTest extends IntegrationTestBase {\n \n             SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n             Assert.assertTrue(searchResults.getTotalResults() >= 1);\n+            Assert.assertEquals(page.getTitle(), searchResults.getResults().get(0).getTitle());\n+            Assert.assertEquals(page.getLanguageId(), searchResults.getResults().get(0).getLanguage());\n \n         } finally {\n             Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\",\n"}}, {"oid": "8ced26b1d3c559cd4262ce7048e64cfc506b9d2e", "url": "https://github.com/dotCMS/core/commit/8ced26b1d3c559cd4262ce7048e64cfc506b9d2e", "message": "#18132 refactor tests with datagens. New cases included", "committedDate": "2020-04-04T00:21:31Z", "type": "commit"}, {"oid": "3627c64bf241f81e55db4a980ba2f8fc976ee2bf", "url": "https://github.com/dotCMS/core/commit/3627c64bf241f81e55db4a980ba2f8fc976ee2bf", "message": "#18132 new test cases and refactor", "committedDate": "2020-04-06T19:53:50Z", "type": "commit"}, {"oid": "d58061abef2d3369b5a6adcd7cac3e5e15246c0c", "url": "https://github.com/dotCMS/core/commit/d58061abef2d3369b5a6adcd7cac3e5e15246c0c", "message": "#18132 test case class", "committedDate": "2020-04-06T21:21:14Z", "type": "commit"}, {"oid": "5de2a0c2c46018761badc26a262ba31a0f595e56", "url": "https://github.com/dotCMS/core/commit/5de2a0c2c46018761badc26a262ba31a0f595e56", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18132-fixing-another-case-and-integration-test", "committedDate": "2020-04-07T15:11:07Z", "type": "commit"}, {"oid": "b06fc777c93e2cf935ebbae16592991c5fec58e4", "url": "https://github.com/dotCMS/core/commit/b06fc777c93e2cf935ebbae16592991c5fec58e4", "message": "#18132 fix another case for site-search. Tests updated", "committedDate": "2020-04-08T18:39:17Z", "type": "commit"}, {"oid": "3d1f66dcc4c39c14c5b51dac24ef4bdb476f012d", "url": "https://github.com/dotCMS/core/commit/3d1f66dcc4c39c14c5b51dac24ef4bdb476f012d", "message": "#18132 Tests updated", "committedDate": "2020-04-08T18:56:27Z", "type": "commit"}, {"oid": "a82854d534b12c6bdd696d0a7354d6d268148146", "url": "https://github.com/dotCMS/core/commit/a82854d534b12c6bdd696d0a7354d6d268148146", "message": "#18132 correct mapping for language", "committedDate": "2020-04-09T23:28:45Z", "type": "commit"}, {"oid": "c463df3cd4a88575a0add12b3ec924536c2a435c", "url": "https://github.com/dotCMS/core/commit/c463df3cd4a88575a0add12b3ec924536c2a435c", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18132-fixing-another-case-and-integration-test", "committedDate": "2020-04-13T16:39:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTg3MA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581870", "bodyText": "Issue found: Parameter 'createContentInDefaultLanguage' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:26Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;\n+    private boolean createContentInDefaultLanguage;\n+    private boolean createContentInSecondLanguage;\n+    private boolean createContentInThirdLanguage;\n+    private boolean createPageInDefaultLanguage;\n+    private boolean createPageInSecondLanguage;\n+    private boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+    private boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+    private boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+    public TestCaseSiteSearchBuilder defaultPageToDefaultLanguage(\n+            boolean defaultPageToDefaultLanguage) {\n+        this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder defaultContentToDefaultLanguage(\n+            boolean defaultContentToDefaultLanguage) {\n+        this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder siteSearchDefaultLanguage(\n+            boolean siteSearchDefaultLanguage) {\n+        this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder siteSearchSecondLanguage(boolean siteSearchSecondLanguage) {\n+        this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder siteSearchThirdLanguage(boolean siteSearchThirdLanguage) {\n+        this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder createContentInDefaultLanguage(\n+            boolean createContentInDefaultLanguage) {", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTg4NQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581885", "bodyText": "Issue found: Local variable 'case3' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:27Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()\n+                .siteSearchDefaultLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case2 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         *\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case3 = new TestCaseSiteSearchBuilder()", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTg5OA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581898", "bodyText": "Issue found: Local variable 'defaultPagetoDefaultLangOriginalValue' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:28Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()\n+                .siteSearchDefaultLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case2 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         *\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case3 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(false)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+\n+         * Given sceneario: Content in second language only referenced from a page in default language.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true.\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language.\n+         * Expected: searching for content in second language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case4 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Same as above but with DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=false\n+         * Expected: searching for content in second language should give NO results.\n+         */\n+\n+        TestCaseSiteSearch case5 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(false)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: two-language (default and second) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case6 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Given sceneario: two-language (second and third) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case7 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .siteSearchThirdLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createContentInThirdLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .expectedResultsWhenSearchingContentInThirdLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        return new TestCaseSiteSearch[] {case1, case2, case3, case4, case5, case6, case7};\n+    }\n \n+    @UseDataProvider(\"siteSearchTestCases\")\n     @Test\n-    public void test_MultilangContent_IndexingAllLanguages()\n+    public void testSiteSearchDifferentScenarios(final TestCaseSiteSearch testCase)\n             throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException, WebAssetException {\n \n         boolean defaultContentToDefaultLangOriginalValue =\n                 Config.getBooleanProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", false);\n \n-        try {\n+        boolean defaultPagetoDefaultLangOriginalValue =", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTkxNw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581917", "bodyText": "Issue found: Avoid unused private methods such as 'createNewVersionHtmlPage(HTMLPageAsset,Language)'.", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:29Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -539,17 +704,118 @@ public void test_MultilangContent_IndexingAllLanguages()\n             Assert.assertFalse(indicesAfterTest.isEmpty());\n             final String newIndexName = indicesAfterTest.get(0);\n \n-            SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n-            Assert.assertTrue(searchResults.getTotalResults() >= 1);\n \n-            searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n-            Assert.assertTrue(searchResults.getTotalResults() >= 1);\n+            if(testCase.expectedResultsWhenSearchingContentInDefaultLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n+                Assert.assertTrue(\"Content in default Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n+                Assert.assertEquals(\"Content in default Language gives NO results\", 0,\n+                        searchResults.getTotalResults());\n+            }\n+\n+            if(testCase.expectedResultsWhenSearchingContentInSecondLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n+                Assert.assertTrue(\"Content in second Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n+                Assert.assertEquals(\"Content in second Language gives NO results\", 0,\n+                        searchResults.getTotalResults());\n+            }\n+\n+            if(testCase.expectedResultsWhenSearchingContentInThirdLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"caterina\", 0, 10);\n+                Assert.assertTrue(\"Content in third Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"caterina\", 0, 10);\n+                Assert.assertEquals(\"Content in third Language gives NO results\", 0,\n+                        searchResults.getTotalResults());\n+            }\n \n         } finally {\n             Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\",\n                     defaultContentToDefaultLangOriginalValue);\n+\n+            Config.setProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\",\n+                    defaultPagetoDefaultLangOriginalValue);\n         }\n     }\n \n+    private HTMLPageAsset createNewVersionHtmlPage(HTMLPageAsset pageDefaultLang, Language secondLang)", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTkyOQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581929", "bodyText": "Issue found: Local variable 'searchResults' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:31Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -539,17 +704,118 @@ public void test_MultilangContent_IndexingAllLanguages()\n             Assert.assertFalse(indicesAfterTest.isEmpty());\n             final String newIndexName = indicesAfterTest.get(0);\n \n-            SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n-            Assert.assertTrue(searchResults.getTotalResults() >= 1);\n \n-            searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n-            Assert.assertTrue(searchResults.getTotalResults() >= 1);\n+            if(testCase.expectedResultsWhenSearchingContentInDefaultLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n+                Assert.assertTrue(\"Content in default Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n+                Assert.assertEquals(\"Content in default Language gives NO results\", 0,\n+                        searchResults.getTotalResults());\n+            }\n+\n+            if(testCase.expectedResultsWhenSearchingContentInSecondLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n+                Assert.assertTrue(\"Content in second Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTkzNw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581937", "bodyText": "Issue found: Parameter 'siteSearchDefaultLanguage' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:32Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;\n+    private boolean createContentInDefaultLanguage;\n+    private boolean createContentInSecondLanguage;\n+    private boolean createContentInThirdLanguage;\n+    private boolean createPageInDefaultLanguage;\n+    private boolean createPageInSecondLanguage;\n+    private boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+    private boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+    private boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+    public TestCaseSiteSearchBuilder defaultPageToDefaultLanguage(\n+            boolean defaultPageToDefaultLanguage) {\n+        this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder defaultContentToDefaultLanguage(\n+            boolean defaultContentToDefaultLanguage) {\n+        this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder siteSearchDefaultLanguage(\n+            boolean siteSearchDefaultLanguage) {", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTk0OA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581948", "bodyText": "Issue found: Parameter 'firstName' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:33Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -539,17 +704,118 @@ public void test_MultilangContent_IndexingAllLanguages()\n             Assert.assertFalse(indicesAfterTest.isEmpty());\n             final String newIndexName = indicesAfterTest.get(0);\n \n-            SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n-            Assert.assertTrue(searchResults.getTotalResults() >= 1);\n \n-            searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n-            Assert.assertTrue(searchResults.getTotalResults() >= 1);\n+            if(testCase.expectedResultsWhenSearchingContentInDefaultLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n+                Assert.assertTrue(\"Content in default Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catherine\", 0, 10);\n+                Assert.assertEquals(\"Content in default Language gives NO results\", 0,\n+                        searchResults.getTotalResults());\n+            }\n+\n+            if(testCase.expectedResultsWhenSearchingContentInSecondLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n+                Assert.assertTrue(\"Content in second Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"catalina\", 0, 10);\n+                Assert.assertEquals(\"Content in second Language gives NO results\", 0,\n+                        searchResults.getTotalResults());\n+            }\n+\n+            if(testCase.expectedResultsWhenSearchingContentInThirdLanguage) {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"caterina\", 0, 10);\n+                Assert.assertTrue(\"Content in third Language gives results\",\n+                        searchResults.getTotalResults() >= 1);\n+                Assert.assertEquals(pageDefaultLang.getTitle(),\n+                        searchResults.getResults().get(0).getTitle());\n+                Assert.assertEquals(pageDefaultLang.getLanguageId(),\n+                        searchResults.getResults().get(0).getLanguage());\n+            } else {\n+                SiteSearchResults searchResults = siteSearchAPI.search(newIndexName, \"caterina\", 0, 10);\n+                Assert.assertEquals(\"Content in third Language gives NO results\", 0,\n+                        searchResults.getTotalResults());\n+            }\n \n         } finally {\n             Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\",\n                     defaultContentToDefaultLangOriginalValue);\n+\n+            Config.setProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\",\n+                    defaultPagetoDefaultLangOriginalValue);\n         }\n     }\n \n+    private HTMLPageAsset createNewVersionHtmlPage(HTMLPageAsset pageDefaultLang, Language secondLang)\n+            throws DotSecurityException, DotDataException {\n+        Contentlet pageSecondLang = contentletAPI.find(pageDefaultLang.getInode(), systemUser, false);\n+        pageSecondLang.setInode(\"\");\n+        pageSecondLang.setLanguageId(secondLang.getId());\n+        pageSecondLang = contentletAPI.checkin(pageSecondLang, systemUser, false);\n+        ContentletDataGen.publish(pageSecondLang);\n+        return APILocator.getHTMLPageAssetAPI().fromContentlet(pageSecondLang);\n+    }\n+\n+    private void createNewVersionAndPublishExistingEmployeeContent(Language newLang,\n+            Contentlet contentToCheckout, String firstName) throws DotDataException, DotSecurityException {\n+        Contentlet contentInNewLang = contentletAPI\n+                .find(contentToCheckout.getInode(), systemUser, false);\n+        contentInNewLang.setInode(\"\");\n+        contentInNewLang.setLanguageId(newLang.getId());\n+        contentInNewLang.setStringProperty(\"firstName\", firstName);\n+        contentInNewLang = contentletAPI.checkin(contentInNewLang, systemUser, false);\n+        ContentletDataGen.publish(contentInNewLang);\n+    }\n+\n+    private Contentlet createAndPublishEmployeeContent(Host site, Language language,\n+            String firstName) throws DotDataException, DotSecurityException {", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTk2Mw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581963", "bodyText": "Issue found: Parameter 'defaultPageToDefaultLanguage' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:34Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTk4MQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581981", "bodyText": "Issue found: Field defaultPageToDefaultLanguage has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:35Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MTk5Mw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407581993", "bodyText": "Issue found: Parameter 'expectedResultsWhenSearchingContentInSecondLanguage' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:36Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjAwNg==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582006", "bodyText": "Issue found: Parameter 'siteSearchThirdLanguage' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:37Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjAxNQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582015", "bodyText": "Issue found: Parameter 'assetFile' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:38Z", "path": "dotCMS/src/main/java/com/dotcms/publishing/Publisher.java", "diffHunk": "@@ -225,7 +227,12 @@ protected boolean shouldProcess ( File assetFile ) throws IOException, DotPublis\n         return true;\n     }\n \n-\tpublic Set<String> getProtocols(){\n+    private boolean doesPathContainLanguageId(File assetFile) {", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjAyMQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582021", "bodyText": "Issue found: Field createContentInDefaultLanguage has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:40Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;\n+    private boolean createContentInDefaultLanguage;", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjAzNw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582037", "bodyText": "Issue found: Parameter 'expectedResultsWhenSearchingContentInDefaultLanguage' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:41Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjA1MA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582050", "bodyText": "Issue found: Local variable 'thirdLang' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:42Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()\n+                .siteSearchDefaultLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case2 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         *\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case3 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(false)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+\n+         * Given sceneario: Content in second language only referenced from a page in default language.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true.\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language.\n+         * Expected: searching for content in second language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case4 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Same as above but with DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=false\n+         * Expected: searching for content in second language should give NO results.\n+         */\n+\n+        TestCaseSiteSearch case5 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(false)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: two-language (default and second) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case6 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Given sceneario: two-language (second and third) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case7 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .siteSearchThirdLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createContentInThirdLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .expectedResultsWhenSearchingContentInThirdLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        return new TestCaseSiteSearch[] {case1, case2, case3, case4, case5, case6, case7};\n+    }\n \n+    @UseDataProvider(\"siteSearchTestCases\")\n     @Test\n-    public void test_MultilangContent_IndexingAllLanguages()\n+    public void testSiteSearchDifferentScenarios(final TestCaseSiteSearch testCase)\n             throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException, WebAssetException {\n \n         boolean defaultContentToDefaultLangOriginalValue =\n                 Config.getBooleanProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", false);\n \n-        try {\n+        boolean defaultPagetoDefaultLangOriginalValue =\n+                Config.getBooleanProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\", true);\n \n-            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", true);\n+        try {\n+            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", testCase.defaultContentToDefaultLanguage);\n+            Config.setProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\", testCase.defaultPageToDefaultLanguage);\n \n             final Host site = new SiteDataGen().nextPersisted();\n-            Language lang1 = APILocator.getLanguageAPI().getDefaultLanguage();\n-            Language lang2 = new LanguageDataGen().nextPersisted();\n+            Language defaultLang = APILocator.getLanguageAPI().getDefaultLanguage();\n+            Language secondLang = new LanguageDataGen().nextPersisted();\n+            Language thirdLang = new LanguageDataGen().nextPersisted();", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjA2Ng==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582066", "bodyText": "Issue found: Field createContentInSecondLanguage has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:43Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;\n+    private boolean createContentInDefaultLanguage;\n+    private boolean createContentInSecondLanguage;", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjA4Mw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582083", "bodyText": "Issue found: Local variable 'case1' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:44Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjA5Mw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582093", "bodyText": "Issue found: Local variable 'secondLang' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:45Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()\n+                .siteSearchDefaultLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case2 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         *\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case3 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(false)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+\n+         * Given sceneario: Content in second language only referenced from a page in default language.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true.\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language.\n+         * Expected: searching for content in second language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case4 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Same as above but with DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=false\n+         * Expected: searching for content in second language should give NO results.\n+         */\n+\n+        TestCaseSiteSearch case5 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(false)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: two-language (default and second) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case6 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Given sceneario: two-language (second and third) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case7 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .siteSearchThirdLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createContentInThirdLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .expectedResultsWhenSearchingContentInThirdLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        return new TestCaseSiteSearch[] {case1, case2, case3, case4, case5, case6, case7};\n+    }\n \n+    @UseDataProvider(\"siteSearchTestCases\")\n     @Test\n-    public void test_MultilangContent_IndexingAllLanguages()\n+    public void testSiteSearchDifferentScenarios(final TestCaseSiteSearch testCase)\n             throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException, WebAssetException {\n \n         boolean defaultContentToDefaultLangOriginalValue =\n                 Config.getBooleanProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", false);\n \n-        try {\n+        boolean defaultPagetoDefaultLangOriginalValue =\n+                Config.getBooleanProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\", true);\n \n-            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", true);\n+        try {\n+            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", testCase.defaultContentToDefaultLanguage);\n+            Config.setProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\", testCase.defaultPageToDefaultLanguage);\n \n             final Host site = new SiteDataGen().nextPersisted();\n-            Language lang1 = APILocator.getLanguageAPI().getDefaultLanguage();\n-            Language lang2 = new LanguageDataGen().nextPersisted();\n+            Language defaultLang = APILocator.getLanguageAPI().getDefaultLanguage();\n+            Language secondLang = new LanguageDataGen().nextPersisted();", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjA5OQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582099", "bodyText": "Issue found: Field createPageInDefaultLanguage has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:46Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;\n+    private boolean createContentInDefaultLanguage;\n+    private boolean createContentInSecondLanguage;\n+    private boolean createContentInThirdLanguage;\n+    private boolean createPageInDefaultLanguage;", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjEwNQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582105", "bodyText": "Issue found: Local variable 'case5' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:47Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()\n+                .siteSearchDefaultLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case2 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         *\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case3 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(false)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+\n+         * Given sceneario: Content in second language only referenced from a page in default language.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true.\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language.\n+         * Expected: searching for content in second language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case4 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Same as above but with DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=false\n+         * Expected: searching for content in second language should give NO results.\n+         */\n+\n+        TestCaseSiteSearch case5 = new TestCaseSiteSearchBuilder()", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjExNw==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582117", "bodyText": "Issue found: Field siteSearchThirdLanguage has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:48Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjEzMA==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582130", "bodyText": "Issue found: Local variable 'case6' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:49Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()\n+                .siteSearchDefaultLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case2 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         *\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case3 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(false)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+\n+         * Given sceneario: Content in second language only referenced from a page in default language.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true.\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language.\n+         * Expected: searching for content in second language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case4 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Same as above but with DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=false\n+         * Expected: searching for content in second language should give NO results.\n+         */\n+\n+        TestCaseSiteSearch case5 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(false)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: two-language (default and second) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case6 = new TestCaseSiteSearchBuilder()", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjE0NQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582145", "bodyText": "Issue found: Field expectedResultsWhenSearchingContentInSecondLanguage has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:50Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;\n+    private boolean createContentInDefaultLanguage;\n+    private boolean createContentInSecondLanguage;\n+    private boolean createContentInThirdLanguage;\n+    private boolean createPageInDefaultLanguage;\n+    private boolean createPageInSecondLanguage;\n+    private boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+    private boolean expectedResultsWhenSearchingContentInSecondLanguage;", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjE1NQ==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582155", "bodyText": "Issue found: Parameter 'expectedResultsWhenSearchingContentInDefaultLanguage' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:51Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/TestCaseSiteSearchBuilder.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.publishing.job.SiteSearchJobImplTest.TestCaseSiteSearch;\n+\n+public class TestCaseSiteSearchBuilder {\n+\n+    private boolean defaultPageToDefaultLanguage;\n+    private boolean defaultContentToDefaultLanguage;\n+    private boolean siteSearchDefaultLanguage;\n+    private boolean siteSearchSecondLanguage;\n+    private boolean siteSearchThirdLanguage;\n+    private boolean createContentInDefaultLanguage;\n+    private boolean createContentInSecondLanguage;\n+    private boolean createContentInThirdLanguage;\n+    private boolean createPageInDefaultLanguage;\n+    private boolean createPageInSecondLanguage;\n+    private boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+    private boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+    private boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+    public TestCaseSiteSearchBuilder defaultPageToDefaultLanguage(\n+            boolean defaultPageToDefaultLanguage) {\n+        this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder defaultContentToDefaultLanguage(\n+            boolean defaultContentToDefaultLanguage) {\n+        this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder siteSearchDefaultLanguage(\n+            boolean siteSearchDefaultLanguage) {\n+        this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder siteSearchSecondLanguage(boolean siteSearchSecondLanguage) {\n+        this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder siteSearchThirdLanguage(boolean siteSearchThirdLanguage) {\n+        this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder createContentInDefaultLanguage(\n+            boolean createContentInDefaultLanguage) {\n+        this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder createContentInSecondLanguage(\n+            boolean createContentInSecondLanguage) {\n+        this.createContentInSecondLanguage = createContentInSecondLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder createContentInThirdLanguage(\n+            boolean createContentInThirdLanguage) {\n+        this.createContentInThirdLanguage = createContentInThirdLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder createPageInDefaultLanguage(\n+            boolean createPageInDefaultLanguage) {\n+        this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder createPageInSecondLanguage(\n+            boolean createPageInSecondLanguage) {\n+        this.createPageInSecondLanguage = createPageInSecondLanguage;\n+        return this;\n+    }\n+\n+    public TestCaseSiteSearchBuilder expectedResultsWhenSearchingContentInDefaultLanguage(\n+            boolean expectedResultsWhenSearchingContentInDefaultLanguage) {", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjE3Mg==", "url": "https://github.com/dotCMS/core/pull/18266#discussion_r407582172", "bodyText": "Issue found: Local variable 'contentToPassToPage' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-13T16:48:52Z", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -439,74 +445,220 @@ public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Pag\n \n     }\n \n-    /**\n-     * Given sceneario: Multi-language content referenced from a page. Create a Site-Search run including all the languages of the content and\n-     * check the two versions made it into the resulting index.\n-     */\n+    static class TestCaseSiteSearch {\n+        boolean defaultPageToDefaultLanguage;\n+        boolean defaultContentToDefaultLanguage;\n+        boolean siteSearchDefaultLanguage;\n+        boolean siteSearchSecondLanguage;\n+        boolean siteSearchThirdLanguage;\n+        boolean createContentInDefaultLanguage;\n+        boolean createContentInSecondLanguage;\n+        boolean createContentInThirdLanguage;\n+        boolean createPageInDefaultLanguage;\n+        boolean createPageInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInDefaultLanguage;\n+        boolean expectedResultsWhenSearchingContentInSecondLanguage;\n+        boolean expectedResultsWhenSearchingContentInThirdLanguage;\n+\n+        public TestCaseSiteSearch(boolean defaultPageToDefaultLanguage,\n+                boolean defaultContentToDefaultLanguage, boolean siteSearchDefaultLanguage,\n+                boolean siteSearchSecondLanguage, boolean siteSearchThirdLanguage,\n+                boolean createContentInDefaultLanguage,\n+                boolean createContentInSecondLanguage, boolean createContentInThirdLanguage,\n+                boolean createPageInDefaultLanguage,\n+                boolean createPageInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInDefaultLanguage,\n+                boolean expectedResultsWhenSearchingContentInSecondLanguage,\n+                boolean expectedResultsWhenSearchingContentInThirdLanguage) {\n+            this.defaultPageToDefaultLanguage = defaultPageToDefaultLanguage;\n+            this.defaultContentToDefaultLanguage = defaultContentToDefaultLanguage;\n+            this.siteSearchDefaultLanguage = siteSearchDefaultLanguage;\n+            this.siteSearchSecondLanguage = siteSearchSecondLanguage;\n+            this.siteSearchThirdLanguage = siteSearchThirdLanguage;\n+            this.createContentInDefaultLanguage = createContentInDefaultLanguage;\n+            this.createContentInSecondLanguage = createContentInSecondLanguage;\n+            this.createContentInThirdLanguage = createContentInThirdLanguage;\n+            this.createPageInDefaultLanguage = createPageInDefaultLanguage;\n+            this.createPageInSecondLanguage = createPageInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInDefaultLanguage = expectedResultsWhenSearchingContentInDefaultLanguage;\n+            this.expectedResultsWhenSearchingContentInSecondLanguage = expectedResultsWhenSearchingContentInSecondLanguage;\n+            this.expectedResultsWhenSearchingContentInThirdLanguage = expectedResultsWhenSearchingContentInThirdLanguage;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] siteSearchTestCases() {\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in default language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case1 = new TestCaseSiteSearchBuilder()\n+                .siteSearchDefaultLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case2 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+        /*\n+         * Given sceneario: default-language content referenced from a page in default lang only.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=false\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         *\n+         * Create a Site-Search run only in second language\n+         * Expected: searching for the content in default language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case3 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(false)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+\n+\n+         * Given sceneario: Content in second language only referenced from a page in default language.\n+         * DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE=true.\n+         * DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run only in second language.\n+         * Expected: searching for content in second language should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case4 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Same as above but with DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=false\n+         * Expected: searching for content in second language should give NO results.\n+         */\n+\n+        TestCaseSiteSearch case5 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(false)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(false)\n+                .createTestCaseSiteSearch();\n+\n+        /*\n+         * Given sceneario: two-language (default and second) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case6 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .createContentInDefaultLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        /*\n+         * Given sceneario: two-language (second and third) content referenced from a page in default lang only. DEFAULT_PAGE_TO_DEFAULT_LANGUAGE=true.\n+         * Create a Site-Search run including both languages\n+         * Expected: searching content of either version of the content should give results. The result should be the page in the default language\n+         */\n+\n+        TestCaseSiteSearch case7 = new TestCaseSiteSearchBuilder()\n+                .defaultContentToDefaultLanguage(true)\n+                .defaultPageToDefaultLanguage(true)\n+                .siteSearchSecondLanguage(true)\n+                .siteSearchThirdLanguage(true)\n+                .createContentInSecondLanguage(true)\n+                .createContentInThirdLanguage(true)\n+                .createPageInDefaultLanguage(true)\n+                .expectedResultsWhenSearchingContentInSecondLanguage(true)\n+                .expectedResultsWhenSearchingContentInThirdLanguage(true)\n+                .createTestCaseSiteSearch();\n+\n+\n+        return new TestCaseSiteSearch[] {case1, case2, case3, case4, case5, case6, case7};\n+    }\n \n+    @UseDataProvider(\"siteSearchTestCases\")\n     @Test\n-    public void test_MultilangContent_IndexingAllLanguages()\n+    public void testSiteSearchDifferentScenarios(final TestCaseSiteSearch testCase)\n             throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException, WebAssetException {\n \n         boolean defaultContentToDefaultLangOriginalValue =\n                 Config.getBooleanProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", false);\n \n-        try {\n+        boolean defaultPagetoDefaultLangOriginalValue =\n+                Config.getBooleanProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\", true);\n \n-            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", true);\n+        try {\n+            Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", testCase.defaultContentToDefaultLanguage);\n+            Config.setProperty(\"DEFAULT_PAGE_TO_DEFAULT_LANGUAGE\", testCase.defaultPageToDefaultLanguage);\n \n             final Host site = new SiteDataGen().nextPersisted();\n-            Language lang1 = APILocator.getLanguageAPI().getDefaultLanguage();\n-            Language lang2 = new LanguageDataGen().nextPersisted();\n+            Language defaultLang = APILocator.getLanguageAPI().getDefaultLanguage();\n+            Language secondLang = new LanguageDataGen().nextPersisted();\n+            Language thirdLang = new LanguageDataGen().nextPersisted();\n             folder = new FolderDataGen().site(site).nextPersisted();\n \n-            Contentlet contentletLang1 = TestDataUtils\n-                    .getEmployeeContent(true, lang1.getId(), null, site);\n-\n-            contentletLang1 = contentletAPI.find(contentletLang1.getInode(), systemUser, false);\n-            contentletLang1.setStringProperty(\"firstName\", \"catherine\");\n-            contentletLang1 = contentletAPI.checkin(contentletLang1, systemUser, false);\n-\n-            ContentletDataGen.publish(contentletLang1);\n-\n-            Contentlet contentletLang2 = contentletAPI\n-                    .find(contentletLang1.getInode(), systemUser, false);\n-            contentletLang2.setInode(\"\");\n-            contentletLang2.setLanguageId(lang2.getId());\n-            contentletLang2.setStringProperty(\"firstName\", \"catalina\");\n-            contentletLang2 = contentletAPI.checkin(contentletLang2, systemUser, false);\n-\n-            ContentletDataGen.publish(contentletLang2);\n-\n-            final Container container = new ContainerDataGen().withContentType(contentletLang1\n-                    .getContentType(), \"$!{firstName}\").nextPersisted();\n-\n-            ContainerDataGen.publish(container);\n+            Contentlet contentletDefaultLang = null;\n+            Contentlet contentSecondLang = null;\n \n-            final String uuid = UUIDGenerator.generateUuid();\n+            if(testCase.createContentInDefaultLanguage) {\n+                contentletDefaultLang = createAndPublishEmployeeContent(site, defaultLang, \"catherine\");\n \n-            final Template template = new TemplateDataGen()\n-                    .withContainer(container.getIdentifier(), uuid)\n-                    .nextPersisted();\n+                if(testCase.createContentInSecondLanguage) {\n+                    createNewVersionAndPublishExistingEmployeeContent(secondLang, contentletDefaultLang,\n+                            \"catalina\");\n+                }\n+            } else if(testCase.createContentInSecondLanguage) {\n+                contentSecondLang = createAndPublishEmployeeContent(site, secondLang, \"catalina\");\n \n-            TemplateDataGen.publish(template);\n-\n-            HTMLPageAsset page = new HTMLPageDataGen(folder, template).languageId(lang1.getId())\n-                    .nextPersisted();\n-\n-            HTMLPageDataGen.publish(page);\n-\n-            final MultiTree multiTree = new MultiTree(page.getIdentifier(),\n-                    container.getIdentifier(),\n-                    contentletLang1.getIdentifier(), getDotParserContainerUUID(uuid), 0);\n-\n-            APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+                if(testCase.createContentInThirdLanguage) {\n+                    createNewVersionAndPublishExistingEmployeeContent(thirdLang, contentSecondLang,\n+                            \"caterina\");\n+                }\n+            }\n \n-            final String html = APILocator.getHTMLPageAssetAPI().getHTML(page.getURI(), site, true,\n-                    contentletLang1.getIdentifier(), APILocator.systemUser(),\n-                    contentletLang1.getLanguageId(), USER_AGENT_DOTCMS_SITESEARCH);\n+            Contentlet contentToPassToPage = contentletDefaultLang!=null", "originalCommit": "c463df3cd4a88575a0add12b3ec924536c2a435c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}