{"pr_number": 1357, "pr_title": "Add analytics support for password grant type", "pr_createdAt": "2020-04-17T08:30:36Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNzg5OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410117899", "bodyText": "Start with a capital letter and end with a full stop for the comments. Do this in all applicable places.", "author": "dewniMW", "createdAt": "2020-04-17T09:52:27Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java", "diffHunk": "@@ -174,6 +200,86 @@ private boolean validateUserCredentials(OAuth2AccessTokenReqDTO tokenReq, Servic\n         return true;\n     }\n \n+    /**\n+     * This method will publish the Password Grant Authentication data.\n+     *\n+     * @param tokenReq Token request which contains all the details of the request.\n+     * @param authenticated Boolean value which determines whether the user is authenticated or not.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     */\n+    private void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,\n+                                           ServiceProvider serviceProvider) {\n+\n+        AuthenticatedUser authenticatedUser = getAuthenticatedUser(tokenReq, serviceProvider);\n+        AuthenticationContext authenticationContext = initializeAuthContext(authenticatedUser, serviceProvider);\n+        AuthenticationDataPublisher authnDataPublisherProxy =\n+                OAuth2ServiceComponentHolder.getAuthenticationDataPublisherProxy();\n+        if (authnDataPublisherProxy != null && authnDataPublisherProxy.isEnabled(authenticationContext)) {\n+            Map<String, Object> paramMap = new HashMap<>();\n+            paramMap.put(FrameworkConstants.AnalyticsAttributes.USER, authenticatedUser);\n+            Map<String, Object> unmodifiableParamMap = Collections.unmodifiableMap(paramMap);\n+            if (authenticated) {\n+                authnDataPublisherProxy\n+                        .publishAuthenticationStepSuccess(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationSuccess(null, authenticationContext, unmodifiableParamMap);\n+            } else {\n+                authnDataPublisherProxy.\n+                        publishAuthenticationStepFailure(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationFailure(null, authenticationContext,\n+                        unmodifiableParamMap);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method will create an AuthenticationContext object which needs to be passed to the publish methods.\n+     *\n+     * @param authenticatedUser User which tries to be authenticate.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     * @return An AuthenticationContest object with relevant details.\n+     */\n+    private AuthenticationContext initializeAuthContext(AuthenticatedUser authenticatedUser,\n+                                                        ServiceProvider serviceProvider) {\n+\n+        AuthenticationContext authenticationContext = new AuthenticationContext();\n+        String contextId = UUIDGenerator.generateUUID();\n+        authenticationContext.setContextIdentifier(contextId);\n+        authenticationContext.setTenantDomain(authenticatedUser.getTenantDomain());\n+        authenticationContext.setRequestType(OAUTH2);\n+        authenticationContext.setRememberMe(false);\n+        authenticationContext.setForceAuthenticate(true);\n+        authenticationContext.setPassiveAuthenticate(false);\n+        authenticationContext.setProperty(IS_INITIAL_LOGIN, true);\n+\n+        // setting sequenceConfig with authenticatedUser, serviceProvider", "originalCommit": "397e811079d3936cc61587a525122f8889e3e115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxNzg2OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412017869", "bodyText": "Modified", "author": "ShanChathusanda93", "createdAt": "2020-04-21T09:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNzg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\nindex 225d541b2..c2dd3af52 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\n\n@@ -251,19 +251,19 @@ public class PasswordGrantHandler extends AbstractAuthorizationGrantHandler {\n         authenticationContext.setPassiveAuthenticate(false);\n         authenticationContext.setProperty(IS_INITIAL_LOGIN, true);\n \n-        // setting sequenceConfig with authenticatedUser, serviceProvider\n+        // Setting sequenceConfig with authenticatedUser, serviceProvider.\n         SequenceConfig sequenceConfig = new SequenceConfig();\n         sequenceConfig.setAuthenticatedUser(authenticatedUser);\n \n-        // setting applicationConfig with serviceProvider\n+        // Setting applicationConfig with serviceProvider.\n         ApplicationConfig applicationConfig = new ApplicationConfig(serviceProvider);\n         sequenceConfig.setApplicationConfig(applicationConfig);\n \n         sequenceConfig.setAuthenticatedIdPs(FrameworkConstants.LOCAL_IDP_NAME);\n         authenticationContext.setSequenceConfig(sequenceConfig);\n \n-        // setting the authenticated IDP for currentAuthenticatedIDPs to get\n-        // the tenant domain and other parameters when the login is a success\n+         /* Setting the authenticated IDP for currentAuthenticatedIDPs to get\n+         the tenant domain and other parameters when the login is a success. */\n         AuthenticatedIdPData authenticatedIdPData = new AuthenticatedIdPData();\n         authenticatedIdPData.setUser(authenticatedUser);\n         authenticatedIdPData.setIdpName(FrameworkConstants.LOCAL_IDP_NAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODIwNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410118204", "bodyText": "Use java multiline comment", "author": "dewniMW", "createdAt": "2020-04-17T09:52:59Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java", "diffHunk": "@@ -174,6 +200,86 @@ private boolean validateUserCredentials(OAuth2AccessTokenReqDTO tokenReq, Servic\n         return true;\n     }\n \n+    /**\n+     * This method will publish the Password Grant Authentication data.\n+     *\n+     * @param tokenReq Token request which contains all the details of the request.\n+     * @param authenticated Boolean value which determines whether the user is authenticated or not.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     */\n+    private void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,\n+                                           ServiceProvider serviceProvider) {\n+\n+        AuthenticatedUser authenticatedUser = getAuthenticatedUser(tokenReq, serviceProvider);\n+        AuthenticationContext authenticationContext = initializeAuthContext(authenticatedUser, serviceProvider);\n+        AuthenticationDataPublisher authnDataPublisherProxy =\n+                OAuth2ServiceComponentHolder.getAuthenticationDataPublisherProxy();\n+        if (authnDataPublisherProxy != null && authnDataPublisherProxy.isEnabled(authenticationContext)) {\n+            Map<String, Object> paramMap = new HashMap<>();\n+            paramMap.put(FrameworkConstants.AnalyticsAttributes.USER, authenticatedUser);\n+            Map<String, Object> unmodifiableParamMap = Collections.unmodifiableMap(paramMap);\n+            if (authenticated) {\n+                authnDataPublisherProxy\n+                        .publishAuthenticationStepSuccess(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationSuccess(null, authenticationContext, unmodifiableParamMap);\n+            } else {\n+                authnDataPublisherProxy.\n+                        publishAuthenticationStepFailure(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationFailure(null, authenticationContext,\n+                        unmodifiableParamMap);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method will create an AuthenticationContext object which needs to be passed to the publish methods.\n+     *\n+     * @param authenticatedUser User which tries to be authenticate.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     * @return An AuthenticationContest object with relevant details.\n+     */\n+    private AuthenticationContext initializeAuthContext(AuthenticatedUser authenticatedUser,\n+                                                        ServiceProvider serviceProvider) {\n+\n+        AuthenticationContext authenticationContext = new AuthenticationContext();\n+        String contextId = UUIDGenerator.generateUUID();\n+        authenticationContext.setContextIdentifier(contextId);\n+        authenticationContext.setTenantDomain(authenticatedUser.getTenantDomain());\n+        authenticationContext.setRequestType(OAUTH2);\n+        authenticationContext.setRememberMe(false);\n+        authenticationContext.setForceAuthenticate(true);\n+        authenticationContext.setPassiveAuthenticate(false);\n+        authenticationContext.setProperty(IS_INITIAL_LOGIN, true);\n+\n+        // setting sequenceConfig with authenticatedUser, serviceProvider\n+        SequenceConfig sequenceConfig = new SequenceConfig();\n+        sequenceConfig.setAuthenticatedUser(authenticatedUser);\n+\n+        // setting applicationConfig with serviceProvider\n+        ApplicationConfig applicationConfig = new ApplicationConfig(serviceProvider);\n+        sequenceConfig.setApplicationConfig(applicationConfig);\n+\n+        sequenceConfig.setAuthenticatedIdPs(FrameworkConstants.LOCAL_IDP_NAME);\n+        authenticationContext.setSequenceConfig(sequenceConfig);\n+\n+        // setting the authenticated IDP for currentAuthenticatedIDPs to get\n+        // the tenant domain and other parameters when the login is a success", "originalCommit": "397e811079d3936cc61587a525122f8889e3e115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxODAzMg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412018032", "bodyText": "Modified.", "author": "ShanChathusanda93", "createdAt": "2020-04-21T09:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\nindex 225d541b2..c2dd3af52 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\n\n@@ -251,19 +251,19 @@ public class PasswordGrantHandler extends AbstractAuthorizationGrantHandler {\n         authenticationContext.setPassiveAuthenticate(false);\n         authenticationContext.setProperty(IS_INITIAL_LOGIN, true);\n \n-        // setting sequenceConfig with authenticatedUser, serviceProvider\n+        // Setting sequenceConfig with authenticatedUser, serviceProvider.\n         SequenceConfig sequenceConfig = new SequenceConfig();\n         sequenceConfig.setAuthenticatedUser(authenticatedUser);\n \n-        // setting applicationConfig with serviceProvider\n+        // Setting applicationConfig with serviceProvider.\n         ApplicationConfig applicationConfig = new ApplicationConfig(serviceProvider);\n         sequenceConfig.setApplicationConfig(applicationConfig);\n \n         sequenceConfig.setAuthenticatedIdPs(FrameworkConstants.LOCAL_IDP_NAME);\n         authenticationContext.setSequenceConfig(sequenceConfig);\n \n-        // setting the authenticated IDP for currentAuthenticatedIDPs to get\n-        // the tenant domain and other parameters when the login is a success\n+         /* Setting the authenticated IDP for currentAuthenticatedIDPs to get\n+         the tenant domain and other parameters when the login is a success. */\n         AuthenticatedIdPData authenticatedIdPData = new AuthenticatedIdPData();\n         authenticatedIdPData.setUser(authenticatedUser);\n         authenticatedIdPData.setIdpName(FrameworkConstants.LOCAL_IDP_NAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODk5MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410118990", "bodyText": "Add a new line", "author": "dewniMW", "createdAt": "2020-04-17T09:54:31Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java", "diffHunk": "@@ -391,4 +393,25 @@ protected void unsetTokenBinderInfo(TokenBinderInfo tokenBinderInfo) {\n             OAuth2ServiceComponentHolder.getInstance().removeTokenBinder((TokenBinder) tokenBinderInfo);\n         }\n     }\n+\n+    @Reference(\n+            name = \"framework.authentication.data.publisher\",\n+            service = AuthenticationDataPublisher.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetAuthenticationDataPublisher\"\n+    )\n+    protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {", "originalCommit": "397e811079d3936cc61587a525122f8889e3e115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxODI2Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412018262", "bodyText": "Modified.", "author": "ShanChathusanda93", "createdAt": "2020-04-21T09:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\nindex 19162725a..32cbe67f6 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\n\n@@ -402,6 +402,7 @@ public class OAuth2ServiceComponent {\n             unbind = \"unsetAuthenticationDataPublisher\"\n     )\n     protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {\n+\n         if (FrameworkConstants.AnalyticsAttributes.AUTHN_DATA_PUBLISHER_PROXY.equalsIgnoreCase(dataPublisher.\n                 getName()) && dataPublisher.isEnabled(null)) {\n             OAuth2ServiceComponentHolder.setAuthenticationDataPublisherProxy(dataPublisher);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExOTEyMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410119123", "bodyText": "Add a new line", "author": "dewniMW", "createdAt": "2020-04-17T09:54:49Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java", "diffHunk": "@@ -391,4 +393,25 @@ protected void unsetTokenBinderInfo(TokenBinderInfo tokenBinderInfo) {\n             OAuth2ServiceComponentHolder.getInstance().removeTokenBinder((TokenBinder) tokenBinderInfo);\n         }\n     }\n+\n+    @Reference(\n+            name = \"framework.authentication.data.publisher\",\n+            service = AuthenticationDataPublisher.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetAuthenticationDataPublisher\"\n+    )\n+    protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {\n+        if (FrameworkConstants.AnalyticsAttributes.AUTHN_DATA_PUBLISHER_PROXY.equalsIgnoreCase(dataPublisher.\n+                getName()) && dataPublisher.isEnabled(null)) {\n+            OAuth2ServiceComponentHolder.setAuthenticationDataPublisherProxy(dataPublisher);\n+        }\n+    }\n+\n+    protected void unsetAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {", "originalCommit": "397e811079d3936cc61587a525122f8889e3e115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxODM5OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412018399", "bodyText": "Modified.", "author": "ShanChathusanda93", "createdAt": "2020-04-21T09:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExOTEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\nindex 19162725a..32cbe67f6 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\n\n@@ -402,6 +402,7 @@ public class OAuth2ServiceComponent {\n             unbind = \"unsetAuthenticationDataPublisher\"\n     )\n     protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {\n+\n         if (FrameworkConstants.AnalyticsAttributes.AUTHN_DATA_PUBLISHER_PROXY.equalsIgnoreCase(dataPublisher.\n                 getName()) && dataPublisher.isEnabled(null)) {\n             OAuth2ServiceComponentHolder.setAuthenticationDataPublisherProxy(dataPublisher);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExOTQzMQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410119431", "bodyText": "Why do we pass null to the isEnabled() method?", "author": "mefarazath", "createdAt": "2020-04-17T09:55:27Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java", "diffHunk": "@@ -391,4 +393,25 @@ protected void unsetTokenBinderInfo(TokenBinderInfo tokenBinderInfo) {\n             OAuth2ServiceComponentHolder.getInstance().removeTokenBinder((TokenBinder) tokenBinderInfo);\n         }\n     }\n+\n+    @Reference(\n+            name = \"framework.authentication.data.publisher\",\n+            service = AuthenticationDataPublisher.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetAuthenticationDataPublisher\"\n+    )\n+    protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {\n+        if (FrameworkConstants.AnalyticsAttributes.AUTHN_DATA_PUBLISHER_PROXY.equalsIgnoreCase(dataPublisher.\n+                getName()) && dataPublisher.isEnabled(null)) {", "originalCommit": "397e811079d3936cc61587a525122f8889e3e115", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\nindex 19162725a..32cbe67f6 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java\n\n@@ -402,6 +402,7 @@ public class OAuth2ServiceComponent {\n             unbind = \"unsetAuthenticationDataPublisher\"\n     )\n     protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {\n+\n         if (FrameworkConstants.AnalyticsAttributes.AUTHN_DATA_PUBLISHER_PROXY.equalsIgnoreCase(dataPublisher.\n                 getName()) && dataPublisher.isEnabled(null)) {\n             OAuth2ServiceComponentHolder.setAuthenticationDataPublisherProxy(dataPublisher);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NTc0OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410185748", "bodyText": "Add an empty line as the 1st line of the method. Check in other places as well.", "author": "janakamarasena", "createdAt": "2020-04-17T12:21:34Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponentHolder.java", "diffHunk": "@@ -198,4 +200,23 @@ public void setOAuthAdminService(OAuthAdminServiceImpl oauthAdminService) {\n \n         this.oauthAdminService = oauthAdminService;\n     }\n+\n+    /**\n+     * Set Authentication Data Publisher Proxy instance.\n+     *\n+     * @param authenticationDataPublisherProxy\n+     */\n+    public static void setAuthenticationDataPublisherProxy(AuthenticationDataPublisher\n+                                                                   authenticationDataPublisherProxy) {", "originalCommit": "397e811079d3936cc61587a525122f8889e3e115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxODUzNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412018537", "bodyText": "Modified.", "author": "ShanChathusanda93", "createdAt": "2020-04-21T09:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponentHolder.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponentHolder.java\nindex 5489fed80..ff4761d86 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponentHolder.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponentHolder.java\n\n@@ -208,6 +208,7 @@ public class OAuth2ServiceComponentHolder {\n      */\n     public static void setAuthenticationDataPublisherProxy(AuthenticationDataPublisher\n                                                                    authenticationDataPublisherProxy) {\n+\n         OAuth2ServiceComponentHolder.authenticationDataPublisherProxy = authenticationDataPublisherProxy;\n     }\n \n"}}, {"oid": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "message": "Add analytics support for password grant type", "committedDate": "2020-04-17T12:48:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NDA1Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412064056", "bodyText": "Shall we make this method protected?\nWill be useful for anyone extending the grant handler.", "author": "mefarazath", "createdAt": "2020-04-21T10:25:36Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java", "diffHunk": "@@ -174,6 +200,86 @@ private boolean validateUserCredentials(OAuth2AccessTokenReqDTO tokenReq, Servic\n         return true;\n     }\n \n+    /**\n+     * This method will publish the Password Grant Authentication data.\n+     *\n+     * @param tokenReq Token request which contains all the details of the request.\n+     * @param authenticated Boolean value which determines whether the user is authenticated or not.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     */\n+    private void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,", "originalCommit": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjExNDY0Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412114642", "bodyText": "Modified.", "author": "ShanChathusanda93", "createdAt": "2020-04-21T11:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NDA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "22c02ed21461a1deee2dfa9b872b02b5285c16ce", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\nindex c2dd3af52..20e002a9c 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java\n\n@@ -207,7 +207,7 @@ public class PasswordGrantHandler extends AbstractAuthorizationGrantHandler {\n      * @param authenticated Boolean value which determines whether the user is authenticated or not.\n      * @param serviceProvider Service provider which contains the details of the application.\n      */\n-    private void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,\n+    protected void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,\n                                            ServiceProvider serviceProvider) {\n \n         AuthenticatedUser authenticatedUser = getAuthenticatedUser(tokenReq, serviceProvider);\n"}}, {"oid": "22c02ed21461a1deee2dfa9b872b02b5285c16ce", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/22c02ed21461a1deee2dfa9b872b02b5285c16ce", "message": "Add analytics support for password grant type", "committedDate": "2020-04-21T11:47:01Z", "type": "commit"}, {"oid": "22c02ed21461a1deee2dfa9b872b02b5285c16ce", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/22c02ed21461a1deee2dfa9b872b02b5285c16ce", "message": "Add analytics support for password grant type", "committedDate": "2020-04-21T11:47:01Z", "type": "forcePushed"}]}