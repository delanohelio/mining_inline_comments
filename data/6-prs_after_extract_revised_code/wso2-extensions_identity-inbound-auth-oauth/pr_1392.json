{"pr_number": 1392, "pr_title": "Introduce response_type=none", "pr_createdAt": "2020-06-10T13:00:35Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMzYxMQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438103611", "bodyText": "Shall we try two test cases for failure and success? :)", "author": "mefarazath", "createdAt": "2020-06-10T13:02:25Z", "path": "components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.common;\n+\n+import org.apache.oltu.oauth2.common.error.OAuthError;\n+import org.apache.oltu.oauth2.common.exception.OAuthProblemException;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+/**\n+ * Test class for NoneResponseType Validator.\n+ */\n+public class NoneResponseValidatorTest {\n+\n+    protected NoneResponseTypeValidator testedResponseValidator;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        testedResponseValidator = new NoneResponseTypeValidator();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+    }\n+\n+    @DataProvider(name = \"Request Method Provider\")\n+    public Object[][] getRequestMethod() {\n+\n+        return new Object[][]{\n+                {\"GET\", true},\n+                {\"POST\", true},\n+                {\"HEAD\", false},\n+                {\"DELETE\", false},\n+                {\"OPTIONS\", false},\n+                {\"PUT\", false},\n+                {\"\", false},\n+                {null, false}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"Request Method Provider\")\n+    public void testValidateMethod(String method, boolean shouldPass) throws Exception {", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNDc2MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438104761", "bodyText": "All the other validator classes have the tests in the similar manner. I will update these tests", "author": "pamodaaw", "createdAt": "2020-06-10T13:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMzYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNDY5Nw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438634697", "bodyText": "introduced two test cases", "author": "pamodaaw", "createdAt": "2020-06-11T08:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMzYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nsimilarity index 59%\nrename from components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\nrename to components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nindex 7e65368ff..a85d205e5 100644\n--- a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\n+++ b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\n\n@@ -29,13 +29,14 @@ import javax.servlet.http.HttpServletRequest;\n \n import static org.powermock.api.mockito.PowerMockito.mock;\n import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n /**\n  * Test class for NoneResponseType Validator.\n  */\n-public class NoneResponseValidatorTest {\n+public class NoneResponseTypeValidatorTest {\n \n     protected NoneResponseTypeValidator testedResponseValidator;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMzc3NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438103775", "bodyText": "remove redundant constructor", "author": "emswbandara", "createdAt": "2020-06-10T13:02:41Z", "path": "components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.common;\n+\n+import org.apache.oltu.oauth2.common.OAuth;\n+import org.apache.oltu.oauth2.common.error.OAuthError;\n+import org.apache.oltu.oauth2.common.exception.OAuthProblemException;\n+import org.apache.oltu.oauth2.common.validators.AbstractValidator;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ *  Validator for response_type=none requests.\n+ */\n+public class NoneResponseTypeValidator extends AbstractValidator<HttpServletRequest> {\n+\n+    public NoneResponseTypeValidator() {", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNDQ3OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438634479", "bodyText": "done", "author": "pamodaaw", "createdAt": "2020-06-11T08:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMzc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java b/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java\nindex ca59a6673..8bb3027c4 100644\n--- a/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java\n+++ b/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java\n\n@@ -30,10 +30,6 @@ import javax.servlet.http.HttpServletRequest;\n  */\n public class NoneResponseTypeValidator extends AbstractValidator<HttpServletRequest> {\n \n-    public NoneResponseTypeValidator() {\n-\n-    }\n-\n     @Override\n     public void validateMethod(HttpServletRequest request) throws OAuthProblemException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNDIwNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438104204", "bodyText": "Can we have a comment explaining the behaviour of the response=none?\nor possibly a link to the spec would do too", "author": "mefarazath", "createdAt": "2020-06-10T13:03:18Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.authz.handlers;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+\n+/**\n+ * This class will handle the requests with response_type=none.\n+ */\n+public class NoneResponseTypeHandler extends AbstractResponseTypeHandler {", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1Njg2Nw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438556867", "bodyText": "Improved the comment", "author": "pamodaaw", "createdAt": "2020-06-11T05:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNDIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\nindex 87c9f830c..97fb945d0 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n\n@@ -23,7 +23,12 @@ import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n \n /**\n- * This class will handle the requests with response_type=none.\n+ * This class will handle the requests with response_type=none as given in the spec https://openid\n+ * .net/specs/oauth-v2-multiple-response-types-1_0.html#none.\n+ * When supplied as the response_type parameter in an OAuth 2.0 Authorization Request, Authorization Code, Access\n+ * Token, Access Token Type, or ID Token is not sent in the successful response. If a redirect_uri is supplied, the\n+ * User Agent is redirected there after granting or denying access. If the state parameter is present, it is added to\n+ * the response as well.\n  */\n public class NoneResponseTypeHandler extends AbstractResponseTypeHandler {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNDU4MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438104581", "bodyText": "Is there any reason why we can't move this check to the superclass?", "author": "mefarazath", "createdAt": "2020-06-10T13:03:58Z", "path": "components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.common;\n+\n+import org.apache.oltu.oauth2.common.OAuth;\n+import org.apache.oltu.oauth2.common.error.OAuthError;\n+import org.apache.oltu.oauth2.common.exception.OAuthProblemException;\n+import org.apache.oltu.oauth2.common.validators.AbstractValidator;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ *  Validator for response_type=none requests.\n+ */\n+public class NoneResponseTypeValidator extends AbstractValidator<HttpServletRequest> {\n+\n+    public NoneResponseTypeValidator() {\n+\n+    }\n+\n+    @Override\n+    public void validateMethod(HttpServletRequest request) throws OAuthProblemException {\n+\n+        String method = request.getMethod();", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTYwNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438531604", "bodyText": "Super method allows only to have 'POST'", "author": "pamodaaw", "createdAt": "2020-06-11T04:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNDU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java b/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java\nindex ca59a6673..8bb3027c4 100644\n--- a/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java\n+++ b/components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java\n\n@@ -30,10 +30,6 @@ import javax.servlet.http.HttpServletRequest;\n  */\n public class NoneResponseTypeValidator extends AbstractValidator<HttpServletRequest> {\n \n-    public NoneResponseTypeValidator() {\n-\n-    }\n-\n     @Override\n     public void validateMethod(HttpServletRequest request) throws OAuthProblemException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMzU1OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438233559", "bodyText": "Lets make this consistent NoneResponseTypeValidatorTest", "author": "janakamarasena", "createdAt": "2020-06-10T15:56:40Z", "path": "components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.common;\n+\n+import org.apache.oltu.oauth2.common.error.OAuthError;\n+import org.apache.oltu.oauth2.common.exception.OAuthProblemException;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+/**\n+ * Test class for NoneResponseType Validator.\n+ */\n+public class NoneResponseValidatorTest {", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNDg2Mw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438634863", "bodyText": "updated", "author": "pamodaaw", "createdAt": "2020-06-11T08:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMzU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nsimilarity index 59%\nrename from components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\nrename to components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nindex 7e65368ff..a85d205e5 100644\n--- a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\n+++ b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\n\n@@ -29,13 +29,14 @@ import javax.servlet.http.HttpServletRequest;\n \n import static org.powermock.api.mockito.PowerMockito.mock;\n import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n /**\n  * Test class for NoneResponseType Validator.\n  */\n-public class NoneResponseValidatorTest {\n+public class NoneResponseTypeValidatorTest {\n \n     protected NoneResponseTypeValidator testedResponseValidator;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNjU3Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438236572", "bodyText": "These two are invalid test cases, right? In actuality, we don't have \"\" or null HTTP methods", "author": "janakamarasena", "createdAt": "2020-06-10T16:00:55Z", "path": "components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.common;\n+\n+import org.apache.oltu.oauth2.common.error.OAuthError;\n+import org.apache.oltu.oauth2.common.exception.OAuthProblemException;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+/**\n+ * Test class for NoneResponseType Validator.\n+ */\n+public class NoneResponseValidatorTest {\n+\n+    protected NoneResponseTypeValidator testedResponseValidator;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        testedResponseValidator = new NoneResponseTypeValidator();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+    }\n+\n+    @DataProvider(name = \"Request Method Provider\")\n+    public Object[][] getRequestMethod() {\n+\n+        return new Object[][]{\n+                {\"GET\", true},\n+                {\"POST\", true},\n+                {\"HEAD\", false},\n+                {\"DELETE\", false},\n+                {\"OPTIONS\", false},\n+                {\"PUT\", false},\n+                {\"\", false},\n+                {null, false}", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTc5Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438535796", "bodyText": "These two conditions are tested in the other response type test classes as well.", "author": "pamodaaw", "createdAt": "2020-06-11T04:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNjU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nsimilarity index 59%\nrename from components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\nrename to components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nindex 7e65368ff..a85d205e5 100644\n--- a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\n+++ b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\n\n@@ -29,13 +29,14 @@ import javax.servlet.http.HttpServletRequest;\n \n import static org.powermock.api.mockito.PowerMockito.mock;\n import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n /**\n  * Test class for NoneResponseType Validator.\n  */\n-public class NoneResponseValidatorTest {\n+public class NoneResponseTypeValidatorTest {\n \n     protected NoneResponseTypeValidator testedResponseValidator;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzOTI4NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438239285", "bodyText": "Shall we add what was expected as well?", "author": "janakamarasena", "createdAt": "2020-06-10T16:05:08Z", "path": "components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.common;\n+\n+import org.apache.oltu.oauth2.common.error.OAuthError;\n+import org.apache.oltu.oauth2.common.exception.OAuthProblemException;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+/**\n+ * Test class for NoneResponseType Validator.\n+ */\n+public class NoneResponseValidatorTest {\n+\n+    protected NoneResponseTypeValidator testedResponseValidator;\n+\n+    @BeforeMethod\n+    public void setUp() throws Exception {\n+\n+        testedResponseValidator = new NoneResponseTypeValidator();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() throws Exception {\n+\n+    }\n+\n+    @DataProvider(name = \"Request Method Provider\")\n+    public Object[][] getRequestMethod() {\n+\n+        return new Object[][]{\n+                {\"GET\", true},\n+                {\"POST\", true},\n+                {\"HEAD\", false},\n+                {\"DELETE\", false},\n+                {\"OPTIONS\", false},\n+                {\"PUT\", false},\n+                {\"\", false},\n+                {null, false}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"Request Method Provider\")\n+    public void testValidateMethod(String method, boolean shouldPass) throws Exception {\n+\n+        HttpServletRequest mockRequest = mock(HttpServletRequest.class);\n+        when(mockRequest.getMethod()).thenReturn(method);\n+        if (shouldPass) {\n+            testedResponseValidator.validateMethod(mockRequest);\n+            // Nothing to assert here. The above method will only throw an exception if not valid\n+        } else {\n+            try {\n+                testedResponseValidator.validateMethod(mockRequest);\n+                fail();\n+            } catch (OAuthProblemException e) {\n+                assertTrue(e.getMessage().startsWith(OAuthError.TokenResponse.INVALID_REQUEST), \"Invalid error \" +\n+                        \"message received. Received was: \" + e.getMessage());", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nsimilarity index 59%\nrename from components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\nrename to components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\nindex 7e65368ff..a85d205e5 100644\n--- a/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseValidatorTest.java\n+++ b/components/org.wso2.carbon.identity.oauth.common/src/test/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidatorTest.java\n\n@@ -29,13 +29,14 @@ import javax.servlet.http.HttpServletRequest;\n \n import static org.powermock.api.mockito.PowerMockito.mock;\n import static org.powermock.api.mockito.PowerMockito.when;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n /**\n  * Test class for NoneResponseType Validator.\n  */\n-public class NoneResponseValidatorTest {\n+public class NoneResponseTypeValidatorTest {\n \n     protected NoneResponseTypeValidator testedResponseValidator;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NjY1OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438246658", "bodyText": "Suggestion: Also, maybe we could write a unit test for this method to make sure we don't send back anything unwanted in the response at this level. Just in case the implementation of the initResponse  method changes.", "author": "janakamarasena", "createdAt": "2020-06-10T16:13:23Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.authz.handlers;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+\n+/**\n+ * This class will handle the requests with response_type=none.\n+ */\n+public class NoneResponseTypeHandler extends AbstractResponseTypeHandler {\n+\n+    @Override\n+    public OAuth2AuthorizeRespDTO issue(OAuthAuthzReqMessageContext oauthAuthzMsgCtx) throws IdentityOAuth2Exception {\n+\n+        return initResponse(oauthAuthzMsgCtx);", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NzcxMA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438557710", "bodyText": "+1", "author": "mefarazath", "createdAt": "2020-06-11T05:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NjY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxNTQzNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438615437", "bodyText": "added a new test case", "author": "pamodaaw", "createdAt": "2020-06-11T08:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NjY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\nindex 87c9f830c..97fb945d0 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n\n@@ -23,7 +23,12 @@ import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n \n /**\n- * This class will handle the requests with response_type=none.\n+ * This class will handle the requests with response_type=none as given in the spec https://openid\n+ * .net/specs/oauth-v2-multiple-response-types-1_0.html#none.\n+ * When supplied as the response_type parameter in an OAuth 2.0 Authorization Request, Authorization Code, Access\n+ * Token, Access Token Type, or ID Token is not sent in the successful response. If a redirect_uri is supplied, the\n+ * User Agent is redirected there after granting or denying access. If the state parameter is present, it is added to\n+ * the response as well.\n  */\n public class NoneResponseTypeHandler extends AbstractResponseTypeHandler {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NzAxNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438247014", "bodyText": "This request will go through scope validation as well. Is that expected for this flow? The response will also contain scopes as the initResponse adds scopes to the OAuth2AuthorizeRespDTO  object.", "author": "janakamarasena", "createdAt": "2020-06-10T16:13:57Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.authz.handlers;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+\n+/**\n+ * This class will handle the requests with response_type=none.\n+ */\n+public class NoneResponseTypeHandler extends AbstractResponseTypeHandler {", "originalCommit": "82295f9fd484c859c5a323bd566755aacf81561b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\nindex 87c9f830c..97fb945d0 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n\n@@ -23,7 +23,12 @@ import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n \n /**\n- * This class will handle the requests with response_type=none.\n+ * This class will handle the requests with response_type=none as given in the spec https://openid\n+ * .net/specs/oauth-v2-multiple-response-types-1_0.html#none.\n+ * When supplied as the response_type parameter in an OAuth 2.0 Authorization Request, Authorization Code, Access\n+ * Token, Access Token Type, or ID Token is not sent in the successful response. If a redirect_uri is supplied, the\n+ * User Agent is redirected there after granting or denying access. If the state parameter is present, it is added to\n+ * the response as well.\n  */\n public class NoneResponseTypeHandler extends AbstractResponseTypeHandler {\n \n"}}, {"oid": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e6a7134609e299ce9ec926ac3577342ee7076ad5", "message": "Introduce response type being none", "committedDate": "2020-06-11T05:49:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NzAxMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438557013", "bodyText": "Do we need to override this if we are not doing anything?", "author": "mefarazath", "createdAt": "2020-06-11T05:52:36Z", "path": "components/org.wso2.carbon.identity.oauth.common/src/main/java/org/wso2/carbon/identity/oauth/common/NoneResponseTypeValidator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.common;\n+\n+import org.apache.oltu.oauth2.common.OAuth;\n+import org.apache.oltu.oauth2.common.error.OAuthError;\n+import org.apache.oltu.oauth2.common.exception.OAuthProblemException;\n+import org.apache.oltu.oauth2.common.validators.AbstractValidator;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ *  Validator for response_type=none requests.\n+ */\n+public class NoneResponseTypeValidator extends AbstractValidator<HttpServletRequest> {\n+\n+    @Override\n+    public void validateMethod(HttpServletRequest request) throws OAuthProblemException {\n+\n+        String method = request.getMethod();\n+        if (!OAuth.HttpMethod.GET.equals(method) && !OAuth.HttpMethod.POST.equals(method)) {\n+            throw OAuthProblemException.error(OAuthError.CodeResponse.INVALID_REQUEST)\n+                    .description(\"Method not correct.\");\n+        }\n+    }\n+\n+    @Override\n+    public void validateContentType(HttpServletRequest request) throws OAuthProblemException {", "originalCommit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3NDU4Mw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438574583", "bodyText": "The abstract implementation checks only for the content type application/x-www-form-urlencoded. In this scenario, the content type is coming as null.", "author": "pamodaaw", "createdAt": "2020-06-11T06:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NzAxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NzM3NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438557374", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class will handle the requests with response_type=none as given in the spec https://openid\n          \n          \n            \n             * Handles requests with response_type=none as defined in https://openid", "author": "mefarazath", "createdAt": "2020-06-11T05:53:45Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.authz.handlers;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+\n+/**\n+ * This class will handle the requests with response_type=none as given in the spec https://openid", "originalCommit": "e6a7134609e299ce9ec926ac3577342ee7076ad5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec30ec1386509622171a899e54626b6323bf31a4", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\nindex 97fb945d0..f46363b49 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandler.java\n\n@@ -23,7 +23,7 @@ import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n \n /**\n- * This class will handle the requests with response_type=none as given in the spec https://openid\n+ * Handles requests with response_type=none as defined in the spec https://openid\n  * .net/specs/oauth-v2-multiple-response-types-1_0.html#none.\n  * When supplied as the response_type parameter in an OAuth 2.0 Authorization Request, Authorization Code, Access\n  * Token, Access Token Type, or ID Token is not sent in the successful response. If a redirect_uri is supplied, the\n"}}, {"oid": "ec30ec1386509622171a899e54626b6323bf31a4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/ec30ec1386509622171a899e54626b6323bf31a4", "message": "Introduce response type being none", "committedDate": "2020-06-11T07:57:49Z", "type": "forcePushed"}, {"oid": "60fd2fcb2d200542edca6e68a1b20672403bfa9d", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/60fd2fcb2d200542edca6e68a1b20672403bfa9d", "message": "Introduce response type being none", "committedDate": "2020-06-11T08:12:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyMDEzNQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438620135", "bodyText": "add a new line.", "author": "thanujalk", "createdAt": "2020-06-11T08:18:57Z", "path": "components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.authz.handlers;\n+\n+import org.mockito.Mockito;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.oauth.common.OAuthConstants;\n+import org.wso2.carbon.identity.oauth.event.OAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth.internal.OAuthComponentServiceHolder;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeReqDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+\n+/**\n+ * Unit test covering NoneResponseTypeHandler class\n+ */\n+public class NoneResponseTypeHandlerTest {\n+\n+    @BeforeTest\n+    public void setUp() throws Exception {", "originalCommit": "60fd2fcb2d200542edca6e68a1b20672403bfa9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNzE5Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438637192", "bodyText": "This method is not required. hence it is removed.", "author": "pamodaaw", "createdAt": "2020-06-11T08:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyMDEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e3e8cb1dab1fb9c50e64ec6be396918915dad9d", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java b/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java\nindex 129f972a7..63cc3feab 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java\n\n@@ -18,31 +18,22 @@\n \n package org.wso2.carbon.identity.oauth2.authz.handlers;\n \n-import org.mockito.Mockito;\n import org.testng.Assert;\n-import org.testng.annotations.BeforeTest;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n import org.wso2.carbon.identity.oauth.common.OAuthConstants;\n-import org.wso2.carbon.identity.oauth.event.OAuthEventInterceptor;\n-import org.wso2.carbon.identity.oauth.internal.OAuthComponentServiceHolder;\n import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeReqDTO;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n \n /**\n- * Unit test covering NoneResponseTypeHandler class\n+ * Unit test covering NoneResponseTypeHandler class.\n  */\n public class NoneResponseTypeHandlerTest {\n \n-    @BeforeTest\n-    public void setUp() throws Exception {\n-        OAuthEventInterceptor interceptor = Mockito.mock(OAuthEventInterceptor.class);\n-        OAuthComponentServiceHolder.getInstance().addOauthEventInterceptorProxy(interceptor);\n-    }\n-\n     @DataProvider(name = \"CommonDataProvider\")\n     public Object[][] commonDataProvider() {\n+\n         return new Object[][]{\n                 {\"https://localhost:8000/callback1\"},\n                 {\"https://localhost:8000/callback2\"}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyMDE4OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1392#discussion_r438620189", "bodyText": "add a new line.", "author": "thanujalk", "createdAt": "2020-06-11T08:19:04Z", "path": "components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.authz.handlers;\n+\n+import org.mockito.Mockito;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.identity.oauth.common.OAuthConstants;\n+import org.wso2.carbon.identity.oauth.event.OAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth.internal.OAuthComponentServiceHolder;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeReqDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+\n+/**\n+ * Unit test covering NoneResponseTypeHandler class\n+ */\n+public class NoneResponseTypeHandlerTest {\n+\n+    @BeforeTest\n+    public void setUp() throws Exception {\n+        OAuthEventInterceptor interceptor = Mockito.mock(OAuthEventInterceptor.class);\n+        OAuthComponentServiceHolder.getInstance().addOauthEventInterceptorProxy(interceptor);\n+    }\n+\n+    @DataProvider(name = \"CommonDataProvider\")\n+    public Object[][] commonDataProvider() {", "originalCommit": "60fd2fcb2d200542edca6e68a1b20672403bfa9d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e3e8cb1dab1fb9c50e64ec6be396918915dad9d", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java b/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java\nindex 129f972a7..63cc3feab 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/test/java/org/wso2/carbon/identity/oauth2/authz/handlers/NoneResponseTypeHandlerTest.java\n\n@@ -18,31 +18,22 @@\n \n package org.wso2.carbon.identity.oauth2.authz.handlers;\n \n-import org.mockito.Mockito;\n import org.testng.Assert;\n-import org.testng.annotations.BeforeTest;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n import org.wso2.carbon.identity.oauth.common.OAuthConstants;\n-import org.wso2.carbon.identity.oauth.event.OAuthEventInterceptor;\n-import org.wso2.carbon.identity.oauth.internal.OAuthComponentServiceHolder;\n import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeReqDTO;\n import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n \n /**\n- * Unit test covering NoneResponseTypeHandler class\n+ * Unit test covering NoneResponseTypeHandler class.\n  */\n public class NoneResponseTypeHandlerTest {\n \n-    @BeforeTest\n-    public void setUp() throws Exception {\n-        OAuthEventInterceptor interceptor = Mockito.mock(OAuthEventInterceptor.class);\n-        OAuthComponentServiceHolder.getInstance().addOauthEventInterceptorProxy(interceptor);\n-    }\n-\n     @DataProvider(name = \"CommonDataProvider\")\n     public Object[][] commonDataProvider() {\n+\n         return new Object[][]{\n                 {\"https://localhost:8000/callback1\"},\n                 {\"https://localhost:8000/callback2\"}\n"}}, {"oid": "2e3e8cb1dab1fb9c50e64ec6be396918915dad9d", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2e3e8cb1dab1fb9c50e64ec6be396918915dad9d", "message": "Introduce response type being none", "committedDate": "2020-06-11T08:48:07Z", "type": "forcePushed"}, {"oid": "cceb0138431c88500f4a091e4c9ea1609d88b8ab", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/cceb0138431c88500f4a091e4c9ea1609d88b8ab", "message": "Introduce response type being none", "committedDate": "2020-06-12T05:50:32Z", "type": "forcePushed"}, {"oid": "6ef264112bc4205f973ee8f4217b8b077b159217", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6ef264112bc4205f973ee8f4217b8b077b159217", "message": "Introduce response type being none", "committedDate": "2020-06-12T05:56:23Z", "type": "forcePushed"}, {"oid": "b92df233957fa6e9aadc5ef909c7397c7cd93a21", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b92df233957fa6e9aadc5ef909c7397c7cd93a21", "message": "Introduce response type being none", "committedDate": "2020-06-12T05:57:39Z", "type": "commit"}, {"oid": "b92df233957fa6e9aadc5ef909c7397c7cd93a21", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b92df233957fa6e9aadc5ef909c7397c7cd93a21", "message": "Introduce response type being none", "committedDate": "2020-06-12T05:57:39Z", "type": "forcePushed"}]}