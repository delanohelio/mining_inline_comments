{"pr_number": 1510, "pr_title": "Reuse existing refresh token when issuing a new access token", "pr_createdAt": "2020-12-05T14:20:05Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDkyNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546534924", "bodyText": "Shall we change this variable to expireExistingToken? WDYT?", "author": "ShanChathusanda93", "createdAt": "2020-12-21T06:43:46Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -351,6 +352,7 @@ private OAuth2AccessTokenRespDTO issueExistingAccessToken(OAuthTokenReqMessageCo\n \n     private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageContext tokReqMsgCtx, String scope,\n                                                             String consumerKey, AccessTokenDO existingTokenBean,\n+                                                            boolean markExistingTokenExpired,", "originalCommit": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\nindex 66fb3a7a5..00dd53b10 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n\n@@ -352,7 +352,7 @@ public abstract class AbstractAuthorizationGrantHandler implements Authorization\n \n     private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageContext tokReqMsgCtx, String scope,\n                                                             String consumerKey, AccessTokenDO existingTokenBean,\n-                                                            boolean markExistingTokenExpired,\n+                                                            boolean expireExistingToken,\n                                                             OauthTokenIssuer oauthTokenIssuer)\n             throws IdentityOAuth2Exception {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNTUwNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546535507", "bodyText": "Shall we add a comment to describe the if condition? Similar one to the following.\nFrom the below if condition, it will check whether the existing token needs to be expired or not. Based on that the corresponding parameters will be sent to the persistAccessTokenInDB method.\nWDYT?", "author": "ShanChathusanda93", "createdAt": "2020-12-21T06:45:41Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,15 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+        if (markExistingTokenExpired) {", "originalCommit": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\nindex 66fb3a7a5..00dd53b10 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n\n@@ -362,15 +362,19 @@ public abstract class AbstractAuthorizationGrantHandler implements Authorization\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        if (markExistingTokenExpired) {\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n             // Persist the access token in database and mark the existing token as expired\n             persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         } else {\n-            // Persist the access token in database\n+            // Persist the access token in database without updating the existingTokenBean\n             persistAccessTokenInDB(tokReqMsgCtx, null, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         }\n+\n         //update cache with newly added token\n         updateCacheIfEnabled(newTokenBean, OAuth2Util.buildScopeString(tokReqMsgCtx.getScope()), oauthTokenIssuer);\n         return createResponseWithTokenBean(newTokenBean, validityPeriodInMillis, scope);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNzE0MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546537141", "bodyText": "Shall we add a comment to describe the if condition? Similar one to the following.\nPersist the access token in database. Here the existingTokenBean is already updated in the database as revoked. Because of that we are sending the existingTokenBean as a null.\nWDYT?", "author": "ShanChathusanda93", "createdAt": "2020-12-21T06:51:29Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,15 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+        if (markExistingTokenExpired) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database", "originalCommit": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\nindex 66fb3a7a5..00dd53b10 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n\n@@ -362,15 +362,19 @@ public abstract class AbstractAuthorizationGrantHandler implements Authorization\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        if (markExistingTokenExpired) {\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n             // Persist the access token in database and mark the existing token as expired\n             persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         } else {\n-            // Persist the access token in database\n+            // Persist the access token in database without updating the existingTokenBean\n             persistAccessTokenInDB(tokReqMsgCtx, null, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         }\n+\n         //update cache with newly added token\n         updateCacheIfEnabled(newTokenBean, OAuth2Util.buildScopeString(tokReqMsgCtx.getScope()), oauthTokenIssuer);\n         return createResponseWithTokenBean(newTokenBean, validityPeriodInMillis, scope);\n"}}, {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/687a16efaf8fb4d3c865d294fc2d9568fb315602", "message": "Reuse existing refresh token when issuing a new access token", "committedDate": "2020-12-21T19:45:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDA5Mw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054093", "bodyText": "lets the change comment to\n// Persist the access token in database without updating the existing token.\n// The existing token should already be updated by this point.\n\nWe need to say that expireExistingToken == false should only be when the existing token is already updated in the db to a non active state.", "author": "janakamarasena", "createdAt": "2020-12-22T03:57:00Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database without updating the existingTokenBean", "originalCommit": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDY0NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054644", "bodyText": "Also lets add a debug log to check which condition gets through.", "author": "janakamarasena", "createdAt": "2020-12-22T03:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5NzkyOA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r551797928", "bodyText": "Also lets add a debug log to check which condition gets through.\n\nAll the flows which invoke this method have debug logs stating what's going to happen next. So I believe they describe the value that comes here", "author": "rksk", "createdAt": "2021-01-05T09:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "19ea89f04672e13f59dce0ba490c80f418874ccf", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\nindex 00dd53b10..56c658c0f 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n\n@@ -363,19 +363,20 @@ public abstract class AbstractAuthorizationGrantHandler implements Authorization\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n \n-        /* Check whether the existing token needs to be expired and send the corresponding parameters\n-        to the persistAccessTokenInDB method. */\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters to the\n+        persistAccessTokenInDB method. */\n         if (expireExistingToken) {\n-            // Persist the access token in database and mark the existing token as expired\n+            // Persist the access token in database and mark the existing token as expired.\n             persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         } else {\n-            // Persist the access token in database without updating the existingTokenBean\n+            // Persist the access token in database without updating the existing token.\n+            // The existing token should already be updated by this point.\n             persistAccessTokenInDB(tokReqMsgCtx, null, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         }\n \n-        //update cache with newly added token\n+        // Update cache with newly added token.\n         updateCacheIfEnabled(newTokenBean, OAuth2Util.buildScopeString(tokReqMsgCtx.getScope()), oauthTokenIssuer);\n         return createResponseWithTokenBean(newTokenBean, validityPeriodInMillis, scope);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDIwOQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054209", "bodyText": "Add a fullstop at the end.", "author": "janakamarasena", "createdAt": "2020-12-22T03:57:26Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired", "originalCommit": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19ea89f04672e13f59dce0ba490c80f418874ccf", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\nindex 00dd53b10..56c658c0f 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java\n\n@@ -363,19 +363,20 @@ public abstract class AbstractAuthorizationGrantHandler implements Authorization\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n \n-        /* Check whether the existing token needs to be expired and send the corresponding parameters\n-        to the persistAccessTokenInDB method. */\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters to the\n+        persistAccessTokenInDB method. */\n         if (expireExistingToken) {\n-            // Persist the access token in database and mark the existing token as expired\n+            // Persist the access token in database and mark the existing token as expired.\n             persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         } else {\n-            // Persist the access token in database without updating the existingTokenBean\n+            // Persist the access token in database without updating the existing token.\n+            // The existing token should already be updated by this point.\n             persistAccessTokenInDB(tokReqMsgCtx, null, newTokenBean, timestamp,\n                     newTokenBean.getAccessToken());\n         }\n \n-        //update cache with newly added token\n+        // Update cache with newly added token.\n         updateCacheIfEnabled(newTokenBean, OAuth2Util.buildScopeString(tokReqMsgCtx.getScope()), oauthTokenIssuer);\n         return createResponseWithTokenBean(newTokenBean, validityPeriodInMillis, scope);\n     }\n"}}, {"oid": "19ea89f04672e13f59dce0ba490c80f418874ccf", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/19ea89f04672e13f59dce0ba490c80f418874ccf", "message": "Reuse existing refresh token when issuing a new access token", "committedDate": "2021-01-05T09:01:11Z", "type": "commit"}, {"oid": "19ea89f04672e13f59dce0ba490c80f418874ccf", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/19ea89f04672e13f59dce0ba490c80f418874ccf", "message": "Reuse existing refresh token when issuing a new access token", "committedDate": "2021-01-05T09:01:11Z", "type": "forcePushed"}]}