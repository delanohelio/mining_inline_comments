{"pr_number": 1413, "pr_title": "Introduce token revocation with binding expiry", "pr_createdAt": "2020-07-15T13:09:34Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413", "timeline": [{"oid": "eb3828fa3df8c1bacd6e4872a18e41f8fb9b941d", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/eb3828fa3df8c1bacd6e4872a18e41f8fb9b941d", "message": "Introduce token revocation with binding expiry", "committedDate": "2020-07-16T07:50:03Z", "type": "forcePushed"}, {"oid": "2c4cb4610b287543167da6de8b837f528bcf0efe", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2c4cb4610b287543167da6de8b837f528bcf0efe", "message": "Introduce token revocation with binding expiry", "committedDate": "2020-07-16T07:54:25Z", "type": "forcePushed"}, {"oid": "c3de72657fc19101456fb6b764cf963d8ce50273", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/c3de72657fc19101456fb6b764cf963d8ce50273", "message": "Introduce token revocation with binding expiry", "committedDate": "2020-07-17T04:40:55Z", "type": "forcePushed"}, {"oid": "a7652d7ee894f9ff3fd5523cc6876ecdae4e9358", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a7652d7ee894f9ff3fd5523cc6876ecdae4e9358", "message": "Introduce token revocation with binding expiry", "committedDate": "2020-07-17T04:44:50Z", "type": "forcePushed"}, {"oid": "5861287df66549e5c5f697bbedc04b540f1a4d22", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/5861287df66549e5c5f697bbedc04b540f1a4d22", "message": "Introduce a new OIDC property for apps to revoke tokens", "committedDate": "2020-08-07T11:31:26Z", "type": "commit"}, {"oid": "9f67237a1b23fa2b3dac22821d96c06ad4e3c4cf", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9f67237a1b23fa2b3dac22821d96c06ad4e3c4cf", "message": "Add an event handler to revoke tokens when IDP session terminates", "committedDate": "2020-08-07T11:32:13Z", "type": "forcePushed"}, {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "message": "Add an event handler to revoke tokens when IDP session terminates", "committedDate": "2020-08-07T11:58:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDgwOA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467014808", "bodyText": "Are we using all of these values which are set to the accessTokenDO?", "author": "thanujalk", "createdAt": "2020-08-07T12:41:02Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);\n+                        } else {\n+                            String consumerKey = resultSet.getString(\"CONSUMER_KEY\");\n+                            String tokenScope = resultSet.getString(\"TOKEN_SCOPE\");\n+                            String refreshToken = resultSet.getString(\"REFRESH_TOKEN\");\n+                            String tokenId = resultSet.getString(\"TOKEN_ID\");\n+\n+                            String[] scope = OAuth2Util.buildScopeArray(tokenScope);\n+                            accessTokenDO.setAccessToken(token);\n+                            accessTokenDO.setConsumerKey(consumerKey);\n+                            accessTokenDO.setScope(scope);\n+                            accessTokenDO.setAuthzUser(user);\n+                            accessTokenDO.setTenantID(tenantId);\n+                            accessTokenDO.setRefreshToken(refreshToken);\n+                            accessTokenDO.setTokenId(tokenId);", "originalCommit": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1NDQ4NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467054485", "bodyText": "We need the token, consumer key and scope.", "author": "pamodaaw", "createdAt": "2020-08-07T13:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDgwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNTk3MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467015970", "bodyText": "We are not using the scope values", "author": "thanujalk", "createdAt": "2020-08-07T12:43:26Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);", "originalCommit": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0MjAwMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467042003", "bodyText": "We need the scopes to invalidate the cache. https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413/files#diff-4e2e9dcf5da24d01c2cbe7ee9a8fd87dR205", "author": "pamodaaw", "createdAt": "2020-08-07T13:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNTk3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNzQ5Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467017496", "bodyText": "Use a common constant for this and the SSOSessionBasedCookieBinder", "author": "thanujalk", "createdAt": "2020-08-07T12:46:28Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";", "originalCommit": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\nindex 667d48681..42f1f5e40 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n\n@@ -34,6 +34,7 @@ import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n import org.wso2.carbon.identity.oauth.OAuthUtil;\n import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.OAuth2Constants;\n import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODUwNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467018504", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n          \n          \n            \n                    if (!IdentityEventConstants.EventName.SESSION_TERMINATE.name().equals(event.getEventName())) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }", "author": "thanujalk", "createdAt": "2020-08-07T12:48:26Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {", "originalCommit": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\nindex 667d48681..42f1f5e40 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n\n@@ -34,6 +34,7 @@ import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n import org.wso2.carbon.identity.oauth.OAuthUtil;\n import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.OAuth2Constants;\n import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODc0NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467018744", "bodyText": "Don't we need to check is the listener enabled here?", "author": "thanujalk", "createdAt": "2020-08-07T12:48:57Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+", "originalCommit": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0ODA5NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467048094", "bodyText": "The listener is hit only if it is subscribed for the specific event from the identity-event.properties file.", "author": "pamodaaw", "createdAt": "2020-08-07T13:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\nindex 667d48681..42f1f5e40 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n\n@@ -34,6 +34,7 @@ import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n import org.wso2.carbon.identity.oauth.OAuthUtil;\n import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.OAuth2Constants;\n import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTg4NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467019884", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {\n          \n          \n            \n                            if (FrameworkConstants.RequestType.CLAIM_TYPE_OIDC.equals(request.getParameter(TYPE))) {", "author": "thanujalk", "createdAt": "2020-08-07T12:51:10Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n+\n+            HttpServletRequest request = getHttpRequestFromEvent(event);\n+            Map<String, Object> eventProperties = event.getEventProperties();\n+            AuthenticationContext context = (AuthenticationContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.CONTEXT);\n+            try {\n+                if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {", "originalCommit": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\nindex 667d48681..42f1f5e40 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n\n@@ -34,6 +34,7 @@ import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n import org.wso2.carbon.identity.oauth.OAuthUtil;\n import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.OAuth2Constants;\n import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMDc1Mw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467020753", "bodyText": "if there are no binding type we can skip this", "author": "thanujalk", "createdAt": "2020-08-07T12:52:48Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n+\n+            HttpServletRequest request = getHttpRequestFromEvent(event);\n+            Map<String, Object> eventProperties = event.getEventProperties();\n+            AuthenticationContext context = (AuthenticationContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.CONTEXT);\n+            try {\n+                if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {\n+\n+                    String consumerKey = context.getRelyingParty();\n+                    String bindingType = OAuth2Util.getAppInformationByClientId(consumerKey).getTokenBindingType();\n+\n+                    revokeTokensForBindingType(request, context.getLastAuthenticatedUser(), consumerKey, bindingType);", "originalCommit": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyMDg2Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r468020862", "bodyText": "added a null check and called this method", "author": "pamodaaw", "createdAt": "2020-08-10T16:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMDc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\nindex 667d48681..42f1f5e40 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java\n\n@@ -34,6 +34,7 @@ import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n import org.wso2.carbon.identity.oauth.OAuthUtil;\n import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.OAuth2Constants;\n import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n"}}, {"oid": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "message": "Add an event handler to revoke tokens when IDP session terminates", "committedDate": "2020-08-07T14:05:57Z", "type": "forcePushed"}, {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0699ffd5b137d19b720b381c96867aef6587a3d4", "message": "Add an event handler to revoke tokens when IDP session terminates", "committedDate": "2020-08-07T14:14:07Z", "type": "commit"}, {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0699ffd5b137d19b720b381c96867aef6587a3d4", "message": "Add an event handler to revoke tokens when IDP session terminates", "committedDate": "2020-08-07T14:14:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDAwNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467084004", "bodyText": "Do we need this class?", "author": "thanujalk", "createdAt": "2020-08-07T14:41:03Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2;\n+\n+/**\n+ * This class contains the constants required by the OAuth2 components.\n+ */\n+public class OAuth2Constants {", "originalCommit": "0699ffd5b137d19b720b381c96867aef6587a3d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzU0Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467117542", "bodyText": "There's no class for the constants. Or else we can define this constant in the org.wso2.carbon.identity.oauth.common component", "author": "pamodaaw", "createdAt": "2020-08-07T15:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDAwNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d10e176a6569774907d589664f7f7fd125f82596", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/d10e176a6569774907d589664f7f7fd125f82596", "message": "Refactor code", "committedDate": "2020-08-10T16:12:40Z", "type": "commit"}]}