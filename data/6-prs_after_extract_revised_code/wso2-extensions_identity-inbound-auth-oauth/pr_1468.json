{"pr_number": 1468, "pr_title": "Introduce the abiltiy to engage multiple scope validation implementaions at Server/Tenant level.", "pr_createdAt": "2020-10-09T07:54:10Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468", "timeline": [{"oid": "848290cac9f90aef5d984996538635e17a9bf6ea", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/848290cac9f90aef5d984996538635e17a9bf6ea", "message": "Add server/tenant level scope validation", "committedDate": "2020-10-07T10:38:03Z", "type": "commit"}, {"oid": "a8155539bf42476534dc23b44a83cf54ecbf4acf", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a8155539bf42476534dc23b44a83cf54ecbf4acf", "message": "Add configuartion for allowed scopes", "committedDate": "2020-10-07T10:38:04Z", "type": "commit"}, {"oid": "d3004c201f06403a48a4b8dada463e8de89fc1fe", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/d3004c201f06403a48a4b8dada463e8de89fc1fe", "message": "Refactor global scope validation flow", "committedDate": "2020-10-07T10:38:04Z", "type": "commit"}, {"oid": "6deca6f7e981365f81e60c346835a5366e4a2653", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6deca6f7e981365f81e60c346835a5366e4a2653", "message": "Refactor role based scope validation", "committedDate": "2020-10-07T10:38:05Z", "type": "commit"}, {"oid": "1128fb4608b45579dfdf0b6e1ab0cbb4e174b1bd", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/1128fb4608b45579dfdf0b6e1ab0cbb4e174b1bd", "message": "Refactor role based scope validation", "committedDate": "2020-10-07T10:38:05Z", "type": "commit"}, {"oid": "64da450ae777b5d354e460bf5c91e9c80ce63740", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/64da450ae777b5d354e460bf5c91e9c80ce63740", "message": "Refactor role based scope validation", "committedDate": "2020-10-07T10:40:14Z", "type": "commit"}, {"oid": "45b547a53517b3b1df78374e8ee70fd858ba89b9", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/45b547a53517b3b1df78374e8ee70fd858ba89b9", "message": "Refactor role based scope validation", "committedDate": "2020-10-07T10:40:15Z", "type": "commit"}, {"oid": "756a7071328c83e75c077d507cc7b2467f9bb222", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/756a7071328c83e75c077d507cc7b2467f9bb222", "message": "Refactor role based scope validation", "committedDate": "2020-10-07T10:40:15Z", "type": "commit"}, {"oid": "4b1e71dd677a426363b22d21e77cf596e8659c0b", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4b1e71dd677a426363b22d21e77cf596e8659c0b", "message": "Refactor role based scope validation", "committedDate": "2020-10-07T10:40:15Z", "type": "commit"}, {"oid": "cd4f8d488aa40aa64ce14570a3cfdfac02540c01", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/cd4f8d488aa40aa64ce14570a3cfdfac02540c01", "message": "Remove canhandle() method from the ScopeVaidator interface", "committedDate": "2020-10-07T10:40:16Z", "type": "commit"}, {"oid": "0f3d7fef7ab99b14d966dcaaca4c19285e91952c", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0f3d7fef7ab99b14d966dcaaca4c19285e91952c", "message": "Move the global validation to grant handler level", "committedDate": "2020-10-09T05:11:36Z", "type": "commit"}, {"oid": "1b82a5df40af30a69c1db1f56870dd2d1f95fadd", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/1b82a5df40af30a69c1db1f56870dd2d1f95fadd", "message": "Refactor global scope validation", "committedDate": "2020-10-09T05:11:36Z", "type": "commit"}, {"oid": "dec441b11fc13e6615186742c5e58643b223a8f2", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/dec441b11fc13e6615186742c5e58643b223a8f2", "message": "fix comment", "committedDate": "2020-10-09T07:45:17Z", "type": "commit"}, {"oid": "f8b96b8205984a30b5cb138beabce3e2d252674c", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/f8b96b8205984a30b5cb138beabce3e2d252674c", "message": "Merge branch 'master' of https://github.com/wso2-extensions/identity-inbound-auth-oauth into master-rolebasescopevaldation", "committedDate": "2020-10-09T07:48:53Z", "type": "commit"}, {"oid": "2f56dc3bfdb08306c6a9935b88786a99f728df4b", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2f56dc3bfdb08306c6a9935b88786a99f728df4b", "message": "resolve merge conflict", "committedDate": "2020-10-09T07:52:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDQ4Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r503190482", "bodyText": "Lets move the variable to the top. Would be cleaner.", "author": "janakamarasena", "createdAt": "2020-10-12T10:14:15Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "diffHunk": "@@ -47,6 +48,28 @@\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n \n+    public List<ScopeValidator> getScopeValidators() {\n+\n+        return scopeValidators;\n+    }\n+\n+    public void addScopeValidator(ScopeValidator scopeValidator) {\n+\n+        scopeValidators.add(scopeValidator);\n+    }\n+\n+    public void removeScopeValidator(ScopeValidator scopeValidator) {\n+\n+        scopeValidators.remove(scopeValidator);\n+    }\n+\n+    public void setScopeValidators(List<ScopeValidator> scopeValidators) {\n+\n+        this.scopeValidators = scopeValidators;\n+    }\n+\n+    private List<ScopeValidator> scopeValidators = new ArrayList<>();", "originalCommit": "2f56dc3bfdb08306c6a9935b88786a99f728df4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNzEwNg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r505307106", "bodyText": "moved in 79d44c4", "author": "shilmyhasan", "createdAt": "2020-10-15T08:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java\nindex 898bbd8a4..b8c1c589a 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java\n\n@@ -47,29 +47,49 @@ public class OAuthComponentServiceHolder {\n     private OAuth2ScopeService oauth2ScopeService;\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n+    private List<ScopeValidator> scopeValidators = new ArrayList<>();\n+\n \n+    /**\n+     * Get the list of scope validator implementations available.\n+     *\n+     * @return ScopeValidaror returns a list ot scope validator.\n+     */\n     public List<ScopeValidator> getScopeValidators() {\n \n         return scopeValidators;\n     }\n \n+    /**\n+     * Add scope validator implementation.\n+     *\n+     * @param scopeValidator Scope validator implementation.\n+     */\n     public void addScopeValidator(ScopeValidator scopeValidator) {\n \n         scopeValidators.add(scopeValidator);\n     }\n \n+    /**\n+     * Remove scope validator implementation.\n+     *\n+     * @param scopeValidator Scope validator implementation.\n+     */\n     public void removeScopeValidator(ScopeValidator scopeValidator) {\n \n         scopeValidators.remove(scopeValidator);\n     }\n \n+    /**\n+     * Set a list of scope validator implementations.\n+     *\n+     * @param scopeValidators List of Scope validator implementation.\n+     */\n     public void setScopeValidators(List<ScopeValidator> scopeValidators) {\n \n         this.scopeValidators = scopeValidators;\n     }\n \n-    private List<ScopeValidator> scopeValidators = new ArrayList<>();\n-\n     private OAuthComponentServiceHolder() {\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDg1Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r503190852", "bodyText": "Add method comments to the public methods", "author": "janakamarasena", "createdAt": "2020-10-12T10:14:54Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "diffHunk": "@@ -47,6 +48,28 @@\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n \n+    public List<ScopeValidator> getScopeValidators() {", "originalCommit": "2f56dc3bfdb08306c6a9935b88786a99f728df4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNzQ1Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r505307452", "bodyText": "added in 79d44c4", "author": "shilmyhasan", "createdAt": "2020-10-15T08:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java\nindex 898bbd8a4..b8c1c589a 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java\n\n@@ -47,29 +47,49 @@ public class OAuthComponentServiceHolder {\n     private OAuth2ScopeService oauth2ScopeService;\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n+    private List<ScopeValidator> scopeValidators = new ArrayList<>();\n+\n \n+    /**\n+     * Get the list of scope validator implementations available.\n+     *\n+     * @return ScopeValidaror returns a list ot scope validator.\n+     */\n     public List<ScopeValidator> getScopeValidators() {\n \n         return scopeValidators;\n     }\n \n+    /**\n+     * Add scope validator implementation.\n+     *\n+     * @param scopeValidator Scope validator implementation.\n+     */\n     public void addScopeValidator(ScopeValidator scopeValidator) {\n \n         scopeValidators.add(scopeValidator);\n     }\n \n+    /**\n+     * Remove scope validator implementation.\n+     *\n+     * @param scopeValidator Scope validator implementation.\n+     */\n     public void removeScopeValidator(ScopeValidator scopeValidator) {\n \n         scopeValidators.remove(scopeValidator);\n     }\n \n+    /**\n+     * Set a list of scope validator implementations.\n+     *\n+     * @param scopeValidators List of Scope validator implementation.\n+     */\n     public void setScopeValidators(List<ScopeValidator> scopeValidators) {\n \n         this.scopeValidators = scopeValidators;\n     }\n \n-    private List<ScopeValidator> scopeValidators = new ArrayList<>();\n-\n     private OAuthComponentServiceHolder() {\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NTgyMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r503195823", "bodyText": "Let's add a method comment", "author": "GANGANI", "createdAt": "2020-10-12T10:24:11Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java", "diffHunk": "@@ -454,6 +478,11 @@ public boolean isShowDisplayNameInConsentPage() {\n         return showDisplayNameInConsentPage;\n     }\n \n+    public List<String> getAllowedScopes() {", "originalCommit": "2f56dc3bfdb08306c6a9935b88786a99f728df4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNzY0Nw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r505307647", "bodyText": "added in 79d44c4", "author": "shilmyhasan", "createdAt": "2020-10-15T08:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NTgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java\nindex ca6af0b8d..2522d377a 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java\n\n@@ -478,6 +478,11 @@ public class OAuthServerConfiguration {\n         return showDisplayNameInConsentPage;\n     }\n \n+    /**\n+     * Get the list of alloed scopes.\n+     *\n+     * @return String returns a list of scope string.\n+     */\n     public List<String> getAllowedScopes() {\n \n         return allowedScopes;\n"}}, {"oid": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "message": "add method comments", "committedDate": "2020-10-15T07:35:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjM5Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r506356396", "bodyText": "Need to add the logic to handle allowed scopes", "author": "janakamarasena", "createdAt": "2020-10-16T12:19:08Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/DefaultOAuth2TokenValidator.java", "diffHunk": "@@ -110,6 +113,21 @@ public boolean validateScope(OAuth2TokenValidationMessageContext messageContext)\n                             \" are not found in the server configuration \", StringUtils.join(appScopeValidators, \", \"),\n                     app.getApplicationName(), OAuth2Util.getTenantDomainOfOauthApp(app)));\n         }\n+\n+        // Deriving the global level scope validator implementations.", "originalCommit": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIyMDg5OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507220899", "bodyText": "Added in AccessTokenIssuer  in 328d264", "author": "shilmyhasan", "createdAt": "2020-10-18T22:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjM5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjQ3Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r506356472", "bodyText": "Need to add the logic to handle allowed scopes", "author": "janakamarasena", "createdAt": "2020-10-16T12:19:12Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -250,6 +252,20 @@ public boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws Id\n                 }\n             }\n         }\n+        // Deriving the list of global level scope validation implementations.", "originalCommit": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIyMDc0Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507220746", "bodyText": "Added in 328d264", "author": "shilmyhasan", "createdAt": "2020-10-18T22:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjQ3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjcyOQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r506356729", "bodyText": "Need to add the logic to handle allowed scopes.", "author": "janakamarasena", "createdAt": "2020-10-16T12:19:38Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/AbstractResponseTypeHandler.java", "diffHunk": "@@ -101,6 +103,19 @@ public boolean validateScope(OAuthAuthzReqMessageContext oauthAuthzMsgCtx) throw\n                 .getAuthorizationCodeValidityPeriod());\n         oauthAuthzMsgCtx.setAccessTokenIssuedTime(scopeValidationCallback.getAccessTokenValidityPeriod());\n         oauthAuthzMsgCtx.setApprovedScope(scopeValidationCallback.getApprovedScope());\n+        // Deriving the global level scope validator implementations.", "originalCommit": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIyMDYwMA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507220600", "bodyText": "Added in upper level (AuthorizationHandlerManager) in 328d264", "author": "shilmyhasan", "createdAt": "2020-10-18T22:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjcyOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/328d264a2e70a4028ddfcbf05a25f57e3e873174", "message": "move allowed scopes reading", "committedDate": "2020-10-18T22:00:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MDAwMQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507450001", "bodyText": "Do we need to mention at which level the scope validation fails in the response?\nWe could include that detail in a debug log.\n@IsuraD WDYT?", "author": "janakamarasena", "createdAt": "2020-10-19T04:41:03Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -473,13 +481,14 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             return buildIntrospectionErrorResponse(\"Invalid access delegation\");\n         }\n \n-        // Validate scopes.\n+        // Validate scopes at app level.\n         if (!tokenValidator.validateScope(messageContext)) {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n-            return buildIntrospectionErrorResponse(\"Scope validation failed\");\n+            return buildIntrospectionErrorResponse(\"Scope validation failed at app level\");", "originalCommit": "328d264a2e70a4028ddfcbf05a25f57e3e873174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NjQ5Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507686492", "bodyText": "+1 to have a detailed debug log", "author": "IsuraD", "createdAt": "2020-10-19T11:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MDAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5MTI1MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507691250", "bodyText": "changed in 9e9c853", "author": "shilmyhasan", "createdAt": "2020-10-19T12:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MDAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "760fadc552937ae7aee54dd69d30696c39f0f05f", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\nindex f7509d490..ffb7e989f 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\n\n@@ -488,7 +494,7 @@ public class TokenValidationHandler {\n             return buildIntrospectionErrorResponse(\"Scope validation failed at app level\");\n         }\n \n-        addAllowedScopes(messageContext, requestedAllowedScopes.toArray(new String[requestedAllowedScopes.size()]));\n+        addAllowedScopes(messageContext, requestedAllowedScopes.toArray(new String[0]));\n         // All set. mark the token active.\n         introResp.setActive(true);\n         return introResp;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTA5MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507451091", "bodyText": "Duplicate code. Reuse the method defined in OAuth2Util", "author": "janakamarasena", "createdAt": "2020-10-19T04:43:21Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -142,10 +151,27 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n         if (valid) {\n             //Add authorized internal scopes to the request for sending in the response.\n             addAuthorizedInternalScopes(authzReqMsgCtx, authorizedInternalScopes);\n+            addAllowedScopes(authzReqMsgCtx, requestedAllowedScopes.toArray(new String[requestedAllowedScopes.size()]));\n         }\n         return authorizeRespDTO;\n     }\n \n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check\n+     * @return - 'true' if the scope is white listed. 'false' if not.\n+     */\n+    public boolean isAllowedScope(List<String> scopeSkipList, String scope) {", "originalCommit": "328d264a2e70a4028ddfcbf05a25f57e3e873174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5OTEwMA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507499100", "bodyText": "removed in 4d2bf08", "author": "shilmyhasan", "createdAt": "2020-10-19T06:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d2bf08c421feabe46cf80c0cda56853705228d8", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\nindex 4e43885ac..fba63ea46 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n\n@@ -156,22 +156,6 @@ public class AuthorizationHandlerManager {\n         return authorizeRespDTO;\n     }\n \n-    /**\n-     * Determines if the scope is specified in the whitelist.\n-     *\n-     * @param scope - The scope key to check\n-     * @return - 'true' if the scope is white listed. 'false' if not.\n-     */\n-    public boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n-\n-        for (String scopeTobeSkipped : scopeSkipList) {\n-            if (scope.matches(scopeTobeSkipped)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n     private void addAuthorizedInternalScopes(OAuthAuthzReqMessageContext authzReqMsgCtx,\n                                              String[] authorizedInternalScopes) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTY2Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507451662", "bodyText": "Let's change the variable name to allowedScopes", "author": "janakamarasena", "createdAt": "2020-10-19T04:44:22Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();", "originalCommit": "328d264a2e70a4028ddfcbf05a25f57e3e873174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5OTAwNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507499004", "bodyText": "changed in 4d2bf08", "author": "shilmyhasan", "createdAt": "2020-10-19T06:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4d2bf08c421feabe46cf80c0cda56853705228d8", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\nindex 4e43885ac..fba63ea46 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n\n@@ -129,11 +129,11 @@ public class AuthorizationHandlerManager {\n             return authorizeRespDTO;\n         }\n \n-        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n         List<String> requestedAllowedScopes = new ArrayList<>();\n         String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n         for (String scope : requestedScope) {\n-            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+            if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n                 requestedAllowedScopes.add(scope);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507467108", "bodyText": "We need to remove these scopes from authzReqMsgCtx before engaging the  validateScope method.\nCheck the usage of removeInternalScopes method for reference.", "author": "janakamarasena", "createdAt": "2020-10-19T05:13:23Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        for (String scope : requestedScope) {\n+            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+                requestedAllowedScopes.add(scope);\n+            }\n+        }\n+", "originalCommit": "328d264a2e70a4028ddfcbf05a25f57e3e873174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5Njg5MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507496891", "bodyText": "Some scopes which can come under allowed scopes like openId can used at the grant handler level as well, so we can not remove it from the requested scopes like internal scopes.  @malithie can confirm this, as we had a discussion on this previously as well.", "author": "shilmyhasan", "createdAt": "2020-10-19T06:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwODg0Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507508846", "bodyText": "In the default scope validator we have specially handled[1] the openid scope so we don't need to add it to the allowed scopes. If we don't skip the allowed scopes from scope validators then there is a chance one of the scope validators will fail the request.\n[1] - https://github.com/wso2-extensions/identity-inbound-auth-oauth/blob/master/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/JDBCScopeValidator.java#L208", "author": "janakamarasena", "createdAt": "2020-10-19T06:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MDAyNg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507540026", "bodyText": "To address the requirement, the correct approach is to skip passing allowed scopes for further validations for downstream handlers.\nTo do that, what I suggested was to identify the impact of allowing scopes at the handler level, based on the fact that those are being utilized at a grant handler or lower levels for decisions.\nIn such a case, we need to take such validations to the handler level and fix the downstream handlers, and also capture the backward compatibility concerns (document) in case someone has extended in lower levels and have taken decisions.", "author": "malithie", "createdAt": "2020-10-19T07:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU5MjgxMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507592813", "bodyText": "ack , addressed in 712da68", "author": "shilmyhasan", "createdAt": "2020-10-19T09:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "4d2bf08c421feabe46cf80c0cda56853705228d8", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\nindex 4e43885ac..fba63ea46 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n\n@@ -129,11 +129,11 @@ public class AuthorizationHandlerManager {\n             return authorizeRespDTO;\n         }\n \n-        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n         List<String> requestedAllowedScopes = new ArrayList<>();\n         String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n         for (String scope : requestedScope) {\n-            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+            if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n                 requestedAllowedScopes.add(scope);\n             }\n         }\n"}}, {"oid": "4d2bf08c421feabe46cf80c0cda56853705228d8", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4d2bf08c421feabe46cf80c0cda56853705228d8", "message": "Refactor allowed scopes", "committedDate": "2020-10-19T06:22:23Z", "type": "commit"}, {"oid": "dc50a199849af151aff3f12875d02c13a09887af", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/dc50a199849af151aff3f12875d02c13a09887af", "message": "Merge branch 'master' of https://github.com/wso2-extensions/identity-inbound-auth-oauth into master-rolebasescopevaldation\n\n\u0001 Conflicts:\n\u0001\tcomponents/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "committedDate": "2020-10-19T06:31:37Z", "type": "commit"}, {"oid": "712da68b56ac47cad8d15e773720e036846df432", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/712da68b56ac47cad8d15e773720e036846df432", "message": "remove allowed scope from message context", "committedDate": "2020-10-19T09:10:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzU2NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507603565", "bodyText": "Add space after method signature.", "author": "janakamarasena", "createdAt": "2020-10-19T09:29:25Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n+        for (String scopeTobeSkipped : scopeSkipList) {", "originalCommit": "712da68b56ac47cad8d15e773720e036846df432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzMxOQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507617319", "bodyText": "addressed in 9f55ee3", "author": "shilmyhasan", "createdAt": "2020-10-19T09:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 07766e590..ed3321e9b 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n\n@@ -3858,14 +3858,19 @@ public class OAuth2Util {\n     }\n \n     /**\n-     * Determines if the scope is specified in the whitelist.\n+     * Determines if the scope is specified in the allowed scopes list.\n      *\n-     * @param scope - The scope key to check.\n+     * @param allowedScopesList Allowed scopes list\n+     * @param scope             The scope key to check.\n      * @return - 'true' if the scope is allowed. 'false' if not.\n      */\n-    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n-        for (String scopeTobeSkipped : scopeSkipList) {\n+    public static boolean isAllowedScope(List<String> allowedScopesList, String scope) {\n+\n+        for (String scopeTobeSkipped : allowedScopesList) {\n             if (scope.matches(scopeTobeSkipped)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(scope + \" is found in the allowed list of scopes.\");\n+                }\n                 return true;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzk1MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507603950", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Determines if the scope is specified in the whitelist.\n          \n          \n            \n                 * Determines if the scope is specified in the allowed list.", "author": "janakamarasena", "createdAt": "2020-10-19T09:29:58Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.", "originalCommit": "712da68b56ac47cad8d15e773720e036846df432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzE0MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507617140", "bodyText": "changed in 9f55ee3", "author": "shilmyhasan", "createdAt": "2020-10-19T09:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 07766e590..ed3321e9b 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n\n@@ -3858,14 +3858,19 @@ public class OAuth2Util {\n     }\n \n     /**\n-     * Determines if the scope is specified in the whitelist.\n+     * Determines if the scope is specified in the allowed scopes list.\n      *\n-     * @param scope - The scope key to check.\n+     * @param allowedScopesList Allowed scopes list\n+     * @param scope             The scope key to check.\n      * @return - 'true' if the scope is allowed. 'false' if not.\n      */\n-    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n-        for (String scopeTobeSkipped : scopeSkipList) {\n+    public static boolean isAllowedScope(List<String> allowedScopesList, String scope) {\n+\n+        for (String scopeTobeSkipped : allowedScopesList) {\n             if (scope.matches(scopeTobeSkipped)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(scope + \" is found in the allowed list of scopes.\");\n+                }\n                 return true;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNjgwMA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507606800", "bodyText": "Missing param in javadoc comment", "author": "janakamarasena", "createdAt": "2020-10-19T09:34:22Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.", "originalCommit": "712da68b56ac47cad8d15e773720e036846df432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzA2MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507617060", "bodyText": "fixed in 9f55ee3", "author": "shilmyhasan", "createdAt": "2020-10-19T09:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNjgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 07766e590..ed3321e9b 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n\n@@ -3858,14 +3858,19 @@ public class OAuth2Util {\n     }\n \n     /**\n-     * Determines if the scope is specified in the whitelist.\n+     * Determines if the scope is specified in the allowed scopes list.\n      *\n-     * @param scope - The scope key to check.\n+     * @param allowedScopesList Allowed scopes list\n+     * @param scope             The scope key to check.\n      * @return - 'true' if the scope is allowed. 'false' if not.\n      */\n-    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n-        for (String scopeTobeSkipped : scopeSkipList) {\n+    public static boolean isAllowedScope(List<String> allowedScopesList, String scope) {\n+\n+        for (String scopeTobeSkipped : allowedScopesList) {\n             if (scope.matches(scopeTobeSkipped)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(scope + \" is found in the allowed list of scopes.\");\n+                }\n                 return true;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzIwOQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507607209", "bodyText": "Lets rename scopeSkipList to something like allowedList for more clarity.", "author": "janakamarasena", "createdAt": "2020-10-19T09:35:03Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {", "originalCommit": "712da68b56ac47cad8d15e773720e036846df432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNjk0OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507616948", "bodyText": "changed in 9f55ee3", "author": "shilmyhasan", "createdAt": "2020-10-19T09:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 07766e590..ed3321e9b 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n\n@@ -3858,14 +3858,19 @@ public class OAuth2Util {\n     }\n \n     /**\n-     * Determines if the scope is specified in the whitelist.\n+     * Determines if the scope is specified in the allowed scopes list.\n      *\n-     * @param scope - The scope key to check.\n+     * @param allowedScopesList Allowed scopes list\n+     * @param scope             The scope key to check.\n      * @return - 'true' if the scope is allowed. 'false' if not.\n      */\n-    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n-        for (String scopeTobeSkipped : scopeSkipList) {\n+    public static boolean isAllowedScope(List<String> allowedScopesList, String scope) {\n+\n+        for (String scopeTobeSkipped : allowedScopesList) {\n             if (scope.matches(scopeTobeSkipped)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(scope + \" is found in the allowed list of scopes.\");\n+                }\n                 return true;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzQ4Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507607486", "bodyText": "Lets add a debug log to find what scopes were allowed since we are doing regex matching", "author": "janakamarasena", "createdAt": "2020-10-19T09:35:31Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n+        for (String scopeTobeSkipped : scopeSkipList) {\n+            if (scope.matches(scopeTobeSkipped)) {\n+                return true;", "originalCommit": "712da68b56ac47cad8d15e773720e036846df432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNjg1Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507616852", "bodyText": "added in 9f55ee3", "author": "shilmyhasan", "createdAt": "2020-10-19T09:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\nindex 07766e590..ed3321e9b 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java\n\n@@ -3858,14 +3858,19 @@ public class OAuth2Util {\n     }\n \n     /**\n-     * Determines if the scope is specified in the whitelist.\n+     * Determines if the scope is specified in the allowed scopes list.\n      *\n-     * @param scope - The scope key to check.\n+     * @param allowedScopesList Allowed scopes list\n+     * @param scope             The scope key to check.\n      * @return - 'true' if the scope is allowed. 'false' if not.\n      */\n-    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n-        for (String scopeTobeSkipped : scopeSkipList) {\n+    public static boolean isAllowedScope(List<String> allowedScopesList, String scope) {\n+\n+        for (String scopeTobeSkipped : allowedScopesList) {\n             if (scope.matches(scopeTobeSkipped)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(scope + \" is found in the allowed list of scopes.\");\n+                }\n                 return true;\n             }\n         }\n"}}, {"oid": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9f55ee3aa001b5471ee20f6625ffebee8394af5e", "message": "refactor", "committedDate": "2020-10-19T09:45:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0NTY4OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507645688", "bodyText": "Add null check for requestedScope. Also rename requestedScope to requestedScopes", "author": "janakamarasena", "createdAt": "2020-10-19T10:39:17Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,20 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();;\n+        for (String scope : requestedScope) {", "originalCommit": "9f55ee3aa001b5471ee20f6625ffebee8394af5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3MjE0NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507672144", "bodyText": "added in a93b154", "author": "shilmyhasan", "createdAt": "2020-10-19T11:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0NTY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "a93b154c4c7b205e58ded516c4d53be85f268998", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\nindex ec2548083..00d369303 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n\n@@ -131,17 +131,19 @@ public class AuthorizationHandlerManager {\n \n         List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n         List<String> requestedAllowedScopes = new ArrayList<>();\n-        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n-        List<String> requestedScopesList = new ArrayList<>();;\n-        for (String scope : requestedScope) {\n-            if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n-                requestedAllowedScopes.add(scope);\n-            } else {\n-                requestedScopesList.add(scope);\n+        String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();\n+        if (requestedScopes != null) {\n+            for (String scope : requestedScopes) {\n+                if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n+                    requestedAllowedScopes.add(scope);\n+                } else {\n+                    requestedScopesList.add(scope);\n+                }\n             }\n+            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(requestedScopesList.toArray(\n+                    new String[requestedScopesList.size()]));\n         }\n-        authzReqMsgCtx.getAuthorizationReqDTO().setScopes(requestedScopesList.toArray(\n-                new String[requestedScopesList.size()]));\n \n         //Execute Internal SCOPE Validation.\n         JDBCPermissionBasedInternalScopeValidator scopeValidator = new JDBCPermissionBasedInternalScopeValidator();\n"}}, {"oid": "a93b154c4c7b205e58ded516c4d53be85f268998", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a93b154c4c7b205e58ded516c4d53be85f268998", "message": "refactor", "committedDate": "2020-10-19T11:27:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3MjQ0NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507672444", "bodyText": "new String[0])", "author": "IsuraD", "createdAt": "2020-10-19T11:29:14Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,22 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();\n+        if (requestedScopes != null) {\n+            for (String scope : requestedScopes) {\n+                if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n+                    requestedAllowedScopes.add(scope);\n+                } else {\n+                    requestedScopesList.add(scope);\n+                }\n+            }\n+            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(requestedScopesList.toArray(\n+                    new String[requestedScopesList.size()]));", "originalCommit": "a93b154c4c7b205e58ded516c4d53be85f268998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4Mjg5MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507682891", "bodyText": "changed in 760fadc", "author": "shilmyhasan", "createdAt": "2020-10-19T11:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3MjQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "760fadc552937ae7aee54dd69d30696c39f0f05f", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\nindex 00d369303..d4355ecff 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n\n@@ -132,17 +132,17 @@ public class AuthorizationHandlerManager {\n         List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n         List<String> requestedAllowedScopes = new ArrayList<>();\n         String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n-        List<String> requestedScopesList = new ArrayList<>();\n+        List<String> scopesToBeValidated = new ArrayList<>();\n         if (requestedScopes != null) {\n             for (String scope : requestedScopes) {\n                 if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n                     requestedAllowedScopes.add(scope);\n                 } else {\n-                    requestedScopesList.add(scope);\n+                    scopesToBeValidated.add(scope);\n                 }\n             }\n-            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(requestedScopesList.toArray(\n-                    new String[requestedScopesList.size()]));\n+            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(scopesToBeValidated.toArray(\n+                    new String[0]));\n         }\n \n         //Execute Internal SCOPE Validation.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NDQyNw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507674427", "bodyText": "rename requestedScopesList to scopesToValidate or scopesToBeValidated", "author": "IsuraD", "createdAt": "2020-10-19T11:32:52Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,22 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();", "originalCommit": "a93b154c4c7b205e58ded516c4d53be85f268998", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MzAyNQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507683025", "bodyText": "renamed in 760fadc", "author": "shilmyhasan", "createdAt": "2020-10-19T11:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NDQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "760fadc552937ae7aee54dd69d30696c39f0f05f", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\nindex 00d369303..d4355ecff 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java\n\n@@ -132,17 +132,17 @@ public class AuthorizationHandlerManager {\n         List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n         List<String> requestedAllowedScopes = new ArrayList<>();\n         String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n-        List<String> requestedScopesList = new ArrayList<>();\n+        List<String> scopesToBeValidated = new ArrayList<>();\n         if (requestedScopes != null) {\n             for (String scope : requestedScopes) {\n                 if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n                     requestedAllowedScopes.add(scope);\n                 } else {\n-                    requestedScopesList.add(scope);\n+                    scopesToBeValidated.add(scope);\n                 }\n             }\n-            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(requestedScopesList.toArray(\n-                    new String[requestedScopesList.size()]));\n+            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(scopesToBeValidated.toArray(\n+                    new String[0]));\n         }\n \n         //Execute Internal SCOPE Validation.\n"}}, {"oid": "760fadc552937ae7aee54dd69d30696c39f0f05f", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/760fadc552937ae7aee54dd69d30696c39f0f05f", "message": "refactor", "committedDate": "2020-10-19T11:47:23Z", "type": "commit"}, {"oid": "9e9c8538844849ed3ae1ab5576aab28d498cc017", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9e9c8538844849ed3ae1ab5576aab28d498cc017", "message": "refactor logs", "committedDate": "2020-10-19T12:03:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODY0Nw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508198647", "bodyText": "additional ;", "author": "janakamarasena", "createdAt": "2020-10-20T04:14:21Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -408,9 +410,21 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             }\n \n         } else {\n-\n             try {\n                 accessTokenDO = OAuth2Util.findAccessToken(validationRequest.getAccessToken().getIdentifier(), false);\n+                List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+                String[] requestedScopes = accessTokenDO.getScope();\n+                List<String> scopesToBeValidated = new ArrayList<>();;", "originalCommit": "9e9c8538844849ed3ae1ab5576aab28d498cc017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxMDE0Mg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508210142", "bodyText": "removed in a1fc7cc", "author": "shilmyhasan", "createdAt": "2020-10-20T05:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a1fc7ccf713f226608dc667d1bdcf13cd22ad83d", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\nindex 0a6dadccc..b1251aad8 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\n\n@@ -414,7 +414,7 @@ public class TokenValidationHandler {\n                 accessTokenDO = OAuth2Util.findAccessToken(validationRequest.getAccessToken().getIdentifier(), false);\n                 List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n                 String[] requestedScopes = accessTokenDO.getScope();\n-                List<String> scopesToBeValidated = new ArrayList<>();;\n+                List<String> scopesToBeValidated = new ArrayList<>();\n                 if (requestedScopes != null) {\n                     for (String scope : requestedScopes) {\n                         if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODc5NA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508198794", "bodyText": "add fullstop at the end", "author": "janakamarasena", "createdAt": "2020-10-20T04:14:47Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -473,13 +487,17 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             return buildIntrospectionErrorResponse(\"Invalid access delegation\");\n         }\n \n-        // Validate scopes.\n+        // Validate scopes at app level.\n         if (!tokenValidator.validateScope(messageContext)) {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Scope validation has failed at app level\");", "originalCommit": "9e9c8538844849ed3ae1ab5576aab28d498cc017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxMDA5MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508210090", "bodyText": "added in a1fc7cc", "author": "shilmyhasan", "createdAt": "2020-10-20T05:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a1fc7ccf713f226608dc667d1bdcf13cd22ad83d", "chunk": "diff --git a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\nindex 0a6dadccc..b1251aad8 100644\n--- a/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\n+++ b/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java\n\n@@ -492,7 +492,7 @@ public class TokenValidationHandler {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n             if (log.isDebugEnabled()) {\n-                log.debug(\"Scope validation has failed at app level\");\n+                log.debug(\"Scope validation has failed at app level.\");\n             }\n             return buildIntrospectionErrorResponse(\"Scope validation failed\");\n         }\n"}}, {"oid": "a1fc7ccf713f226608dc667d1bdcf13cd22ad83d", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a1fc7ccf713f226608dc667d1bdcf13cd22ad83d", "message": "refactor code", "committedDate": "2020-10-20T04:58:56Z", "type": "commit"}]}