{"pr_number": 3836, "pr_title": "CATROID-793 Fix ANR of regex HTML assistant", "pr_createdAt": "2020-10-15T00:25:17Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3836", "timeline": [{"oid": "43ed69cbfd8bbec0739d091b42977c00dfea824f", "url": "https://github.com/Catrobat/Catroid/commit/43ed69cbfd8bbec0739d091b42977c00dfea824f", "message": "CATROID-793 Fix ANR of regex HTML assistant (#1)\n\n* Simplifications, fixes, and efficiency\r\n* Removal of spurious comment\r\n* Added visibility for testing annotation\r\n* Real life example from timeanddate.com\r\n* Escaping the html code in the regex", "committedDate": "2020-10-15T00:21:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTM2MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3836#discussion_r506525361", "bodyText": "PLEASE REFACTOR:\nIn my opinion, it's a bit hard to read.\nMy suggestion would be:\nif (keyword == null) {\n\treturn null;\n}\nint keywordIndex = html.indexOf(keyword);\nif (keyword.equals(html) || keywordIndex < 0) {\n\treturn \"(.+)\";\n}", "author": "gPathpp", "createdAt": "2020-10-16T15:06:34Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java", "diffHunk": "@@ -56,87 +57,64 @@ private void showError() {\n \t\t\t\tR.string.formula_editor_function_regex_html_extractor_not_found);\n \t}\n \n-\t@VisibleForTesting\n-\tpublic String findKeyword(String keyword, String text) {\n+\t@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED)\n+\tpublic String findKeyword(String keyword, String html) {\n \t\tif (keyword.equals(\"\")) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (text.indexOf(keyword) >= 0) {\n+\t\tif (html.contains(keyword)) {\n \t\t\treturn keyword;\n \t\t} else {\n-\t\t\treturn findKeywordWithHtmlBetweenWordsInText(keyword, text);\n+\t\t\treturn findKeywordWithHtmlBetweenWordsInText(keyword, html);\n \t\t}\n \t}\n \n-\tprivate String findKeywordWithHtmlBetweenWordsInText(String keyword, String text) {\n-\t\tString[] splittedKeyword = keyword.split(\" \");\n-\t\tString regex = Pattern.quote(splittedKeyword[0]);\n-\n-\t\tfor (int i = 1; i < splittedKeyword.length; i++) {\n-\t\t\tregex += \".*?\" + Pattern.quote(splittedKeyword[i]);\n-\t\t}\n-\t\treturn findShortestOccurrenceInText(regex, text);\n-\t}\n+\tprivate String findKeywordWithHtmlBetweenWordsInText(String keywords, String html) {\n \n-\tprivate String findShortestOccurrenceInText(String regex, String text) {\n-\t\tMatcher m = Pattern.compile(regex).matcher(text);\n+\t\tString[] splittedKeywords = keywords.split(\"\\\\s+\");\n+\t\tString keywordsWithHtmlBetweenWords = Pattern.quote(splittedKeywords[0]);\n \n-\t\tString shortestOccurrence = null;\n-\t\tint lastIndex = -1;\n-\t\twhile (m.find(lastIndex + 1)) {\n-\t\t\tString found = m.group();\n-\t\t\tif (shortestOccurrence == null || shortestOccurrence.length() > found.length()) {\n-\t\t\t\tshortestOccurrence = found;\n-\t\t\t\tlastIndex = m.start();\n-\t\t\t}\n+\t\tfor (int i = 1; i < splittedKeywords.length; i++) {\n+\t\t\tkeywordsWithHtmlBetweenWords += \"(\\\\s|&nbsp;|<[^>]+>)+?\" + Pattern.quote(splittedKeywords[i]);\n \t\t}\n-\t\treturn shortestOccurrence;\n+\t\tMatcher matcher = Pattern.compile(keywordsWithHtmlBetweenWords).matcher(html);\n+\t\tif (matcher.find()) {\n+\t\t\treturn matcher.group();\n+\t\t} \n+\t\treturn null;\n \t}\n \n-\tpublic String htmlToRegexConverter(String keyword, String htmlText) {\n-\t\tint keywordIndex;\n-\t\tString regex;\n+\t@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED)\n+\tpublic String htmlToRegexConverter(String keyword, String html) {\n \n \t\tif (keyword != null) {\n-\t\t\tkeywordIndex = htmlText.indexOf(keyword);\n-\t\t\tif (keyword.equals(htmlText)) {\n-\t\t\t\tregex = \"(.*)\";\n-\t\t\t} else {\n-\t\t\t\tregex = \"(.*)\";\n+\t\t\tint keywordIndex = html.indexOf(keyword);", "originalCommit": "43ed69cbfd8bbec0739d091b42977c00dfea824f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3MjEwOA==", "url": "https://github.com/Catrobat/Catroid/pull/3836#discussion_r506572108", "bodyText": "PLEASE REFACTOR:\n...\n\nAgreed & done, thanks!", "author": "wslany", "createdAt": "2020-10-16T16:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "07bd2834df258a08402c42744511af7c7d04a2bc", "chunk": "diff --git a/catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java b/catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java\nindex 04ae5e05d..ace5f67ef 100644\n--- a/catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java\n+++ b/catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java\n\n@@ -87,29 +87,30 @@ public class HtmlRegexExtractor {\n \t@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED)\n \tpublic String htmlToRegexConverter(String keyword, String html) {\n \n-\t\tif (keyword != null) {\n-\t\t\tint keywordIndex = html.indexOf(keyword);\n-\t\t\tString regex = \"(.+)\";\n-\t\t\tif (!keyword.equals(html) && keywordIndex >= 0) {\n-\t\t\t\tint distance = 0;\n-\t\t\t\tint beforeKeywordIndex;\n-\t\t\t\tint afterKeywordIndex;\n-\n-\t\t\t\tdo {\n-\t\t\t\t\tdistance++;\n-\n-\t\t\t\t\tbeforeKeywordIndex = Math.max(0, keywordIndex - distance);\n-\t\t\t\t\tString beforeKeyword = html.substring(beforeKeywordIndex, keywordIndex);\n-\n-\t\t\t\t\tafterKeywordIndex = Math.min(keywordIndex + keyword.length() + distance, html.length());\n-\t\t\t\t\tString afterKeyword = html.substring(keywordIndex + keyword.length(), afterKeywordIndex);\n-\n-\t\t\t\t\tregex = Pattern.quote(beforeKeyword) + \"(.+?)\" + Pattern.quote(afterKeyword);\n-\t\t\t\t} while (!matchesFirst(regex, html, keyword) && (beforeKeywordIndex > 0 || afterKeywordIndex < html.length()));\n-\t\t\t}\n-\t\t\treturn regex;\n-\t\t}\t\n-\t\treturn null;\n+\t\tif (keyword == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tint keywordIndex = html.indexOf(keyword);\n+\t\tif (keyword.equals(html) || keywordIndex < 0) {\n+\t\t\treturn \"(.+)\";\n+\t\t}\n+\t\tString regex;\n+\t\tint distance = 0;\n+\t\tint beforeKeywordIndex;\n+\t\tint afterKeywordIndex;\n+\n+\t\tdo {\n+\t\t\tdistance++;\n+\n+\t\t\tbeforeKeywordIndex = Math.max(0, keywordIndex - distance);\n+\t\t\tString beforeKeyword = html.substring(beforeKeywordIndex, keywordIndex);\n+\n+\t\t\tafterKeywordIndex = Math.min(keywordIndex + keyword.length() + distance, html.length());\n+\t\t\tString afterKeyword = html.substring(keywordIndex + keyword.length(), afterKeywordIndex);\n+\n+\t\t\tregex = Pattern.quote(beforeKeyword) + \"(.+?)\" + Pattern.quote(afterKeyword);\n+\t\t} while (!matchesFirst(regex, html, keyword) && (beforeKeywordIndex > 0 || afterKeywordIndex < html.length()));\n+\t\treturn regex;\n \t}\n \n \tprivate boolean matchesFirst(String pattern, String html, String expectedMatch) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MTAwNw==", "url": "https://github.com/Catrobat/Catroid/pull/3836#discussion_r506541007", "bodyText": "QUESTION: Do we need such a long text? And why was \"testCreateRegexWhereTextOnlyKeywords()\" deleted?", "author": "gPathpp", "createdAt": "2020-10-16T15:23:44Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/HtmlRegexExtractorTest.java", "diffHunk": "@@ -105,50 +104,79 @@ public void testFindKeywordSmallestOccurrence() {\n \n \t@Test\n \tpublic void testCreateRegexWithOneCharContext() {\n-\t\tassertEquals(\"b(.*)e\", htmlExtractor.htmlToRegexConverter(\"cd\", \"abcdefg\"));\n+\t\tassertEquals(\"\\\\Qb\\\\E(.+?)\\\\Qe\\\\E\", htmlExtractor.htmlToRegexConverter(\"cd\", \"abcdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWithKeywordAtStart() {\n-\t\tassertEquals(\"(.*)c\", htmlExtractor.htmlToRegexConverter(\"ab\", \"abcdefg\"));\n-\t}\n-\n-\t@Test\n-\tpublic void testCreateRegexWithKeywordAtEnd() {\n-\t\tassertEquals(\"d(.*)\", htmlExtractor.htmlToRegexConverter(\"efg\", \"abcdefg\"));\n+\t\tassertEquals(\"\\\\Q\\\\E(.+?)\\\\Qc\\\\E\", htmlExtractor.htmlToRegexConverter(\"ab\", \"abcdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWithDuplicateKeywordFirstOccurrence1CharContext() {\n-\t\tassertEquals(\"ab(.*)defga\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abKEYdefgadKEYdefg\"));\n+\t\tassertEquals(\"\\\\Qb\\\\E(.+?)\\\\Qd\\\\E\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abKEYdefgadKEYdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWith2CharContext() {\n-\t\tassertEquals(\"yb(.*)de\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abcdefg ybKEYdefg\"));\n+\t\tassertEquals(\"\\\\Qyb\\\\E(.+?)\\\\Qde\\\\E\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abcdefg ybKEYdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWhereKeywordEqualsHtmlText() {\n-\t\tassertEquals(\"(.*)\", htmlExtractor.htmlToRegexConverter(\"abcdefg\", \"abcdefg\"));\n+\t\tassertEquals(\"(.+)\", htmlExtractor.htmlToRegexConverter(\"abcdefg\", \"abcdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexPostfixInKeyword() {\n-\t\tassertEquals(\"(.*)b\", htmlExtractor.htmlToRegexConverter(\"abc\", \"abcbc\"));\n+\t\tassertEquals(\"\\\\Q\\\\E(.+?)\\\\Qbd\\\\E\", htmlExtractor.htmlToRegexConverter(\"abc\", \"abcbd\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexOutOfBoundsAfter2CharContext() {\n-\t\tassertEquals(\"b(.*)ba\", htmlExtractor.htmlToRegexConverter(\"abc\", \"babcbabcb\"));\n+\t\tassertEquals(\"\\\\Qb\\\\E(.+?)\\\\Qba\\\\E\", htmlExtractor.htmlToRegexConverter(\"abc\", \"babcbabcb\"));\n \t}\n \t@Test\n \tpublic void testFirstKeyBordersOnSecondKey() {\n-\t\tassertEquals(\"baaaa(.*)aaaaK\", htmlExtractor.htmlToRegexConverter(\"KEY\",\n-\t\t\t\t\"baaaaKEYaaaaKEYaaaa\"));\n-\t}\n-\t@Test\n-\tpublic void testCreateRegexWhereTextOnlyKeywords() {\n-\t\tassertEquals(\"(.*)aa\", htmlExtractor.htmlToRegexConverter(\"a\", \"aaa\"));\n+\t\tassertEquals(\"\\\\Qa\\\\E(.+?)\\\\Qa\\\\E\", htmlExtractor.htmlToRegexConverter(\"KEY\",\n+\t\t\t\t\"baKEYaKEYaa\"));\n+\t}\n+\t@Test\n+\tpublic void testTemperatureTimeAndDateDotCom() {\n+\t\tString htmlTimeAndDateDotCom = \n+\t\t\t\t\"</script><nav class=nav-3><div class=fixed><a href='/weather/germany/hildesheim'\"", "originalCommit": "43ed69cbfd8bbec0739d091b42977c00dfea824f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NzEyNQ==", "url": "https://github.com/Catrobat/Catroid/pull/3836#discussion_r506557125", "bodyText": "The problem occurred only with long inputs, that's why I wanted a more realistic example. It is still only an excerpt of the full page.\nAnd I deleted testCreateRegexWhereTextOnlyKeywords() because it was a trivial case that would never occur in reality (the keyword == html text) and for which we would have to increase the complexity of the code, because of my code changes. I deemed it not worth to increase the complexity for this anyway unrealistic case.", "author": "wslany", "createdAt": "2020-10-16T15:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MTAwNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "07bd2834df258a08402c42744511af7c7d04a2bc", "url": "https://github.com/Catrobat/Catroid/commit/07bd2834df258a08402c42744511af7c7d04a2bc", "message": "Easier to read.", "committedDate": "2020-10-16T15:59:07Z", "type": "commit"}]}