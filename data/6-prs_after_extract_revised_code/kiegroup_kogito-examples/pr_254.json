{"pr_number": 254, "pr_title": "KOGITO-2111 - Serverless Workflow - create event-based kogito example (quarkus)", "pr_createdAt": "2020-05-06T21:07:35Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/254", "timeline": [{"oid": "ba7dd8aa86d865db754af9dde0128bebcf26e227", "url": "https://github.com/kiegroup/kogito-examples/commit/ba7dd8aa86d865db754af9dde0128bebcf26e227", "message": "KOGITO-2111 - Serverless Workflow - create event-based kogito example (quarkus)", "committedDate": "2020-05-15T14:01:31Z", "type": "commit"}, {"oid": "8a13aa54686af1c0b957fab428c8bbb22c8cc3c7", "url": "https://github.com/kiegroup/kogito-examples/commit/8a13aa54686af1c0b957fab428c8bbb22c8cc3c7", "message": "rebasing and adding headers", "committedDate": "2020-05-15T14:01:31Z", "type": "commit"}, {"oid": "025d7d67d67cec103608e31059054d363405de45", "url": "https://github.com/kiegroup/kogito-examples/commit/025d7d67d67cec103608e31059054d363405de45", "message": "fixing readme", "committedDate": "2020-05-15T14:01:31Z", "type": "commit"}, {"oid": "1a2958f7931f5f2a5702a895b373085825ffb3a4", "url": "https://github.com/kiegroup/kogito-examples/commit/1a2958f7931f5f2a5702a895b373085825ffb3a4", "message": "update json according to the spec produceevent update", "committedDate": "2020-05-15T14:01:31Z", "type": "commit"}, {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385", "url": "https://github.com/kiegroup/kogito-examples/commit/794b00e48a6c2f34a1a2dc4320990e7367495385", "message": "small update to readme", "committedDate": "2020-05-15T14:01:31Z", "type": "commit"}, {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385", "url": "https://github.com/kiegroup/kogito-examples/commit/794b00e48a6c2f34a1a2dc4320990e7367495385", "message": "small update to readme", "committedDate": "2020-05-15T14:01:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MzMyMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r426343323", "bodyText": "you can return the kafka.bootstrap.servers here and inject in the tests instead of using the system property, see https://github.com/kiegroup/kogito-examples/blob/master/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTestResource.java#L43", "author": "cristianonicolai", "createdAt": "2020-05-18T02:38:54Z", "path": "serverless-workflow-events-quarkus/src/test/java/org/kogito/serverless/examples/KafkaResource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+public class KafkaResource implements QuarkusTestResourceLifecycleManager {\n+\n+    private KafkaContainer kafka;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        kafka = new KafkaContainer();\n+        kafka.start();\n+        System.setProperty(\"kafka.bootstrap.servers\", kafka.getBootstrapServers());\n+        return Collections.emptyMap();", "originalCommit": "794b00e48a6c2f34a1a2dc4320990e7367495385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM1OTU0Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r426359546", "bodyText": "Thanks for review @cristianonicolai!\nI think regarding this comment, I like the way its now better honestly, and its the same way as used in quarkus quickstarts: https://github.com/quarkusio/quarkus-quickstarts/blob/master/kafka-quickstart/src/test/java/org/acme/kafka/KafkaResource.java\nThe sys prop gets cleaned up so imo it makes no difference really. Is this a must-have change?", "author": "tsurdilo", "createdAt": "2020-05-18T04:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MzMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NDMyNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r426374327", "bodyText": "not a blocker @tsurdilo, its approved anyway", "author": "cristianonicolai", "createdAt": "2020-05-18T05:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MzMyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408", "url": "https://github.com/kiegroup/kogito-examples/commit/34f28f523c8184a01fd8ed26ba931780c955e408", "message": "updates per zanini review", "committedDate": "2020-05-21T23:44:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNjE3OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430026178", "bodyText": "You can use the interface CloudEvent instead of impl.", "author": "tiagodolphine", "createdAt": "2020-05-25T17:24:11Z", "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventBuilder;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import java.net.URI;\n+import java.util.Random;\n+\n+@Path(\"/newapplicant\")\n+public class ApplicantResource {\n+\n+    Random rand = new Random();\n+\n+    @Inject\n+    @Channel(\"out-applicants\")\n+    Emitter<String> newApplicantEmitter;\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public void submitApplicant(JsonNode newApplicant) {\n+        CloudEventImpl<JsonNode> applicantEvent =", "originalCommit": "34f28f523c8184a01fd8ed26ba931780c955e408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzk4Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430033986", "bodyText": "I was using the i guess \"recommended\" way in the docs https://github.com/cloudevents/sdk-java/blob/master/README_v1.md. Think thats ok", "author": "tsurdilo", "createdAt": "2020-05-25T17:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNjE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "003b40586ac1bcd98bd5a1ef8760fa9be5c3d120", "chunk": "diff --git a/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java b/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\nindex f0e60c9a..e7d73807 100644\n--- a/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\n+++ b/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\n\n@@ -30,6 +30,7 @@ import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import java.net.URI;\n import java.util.Random;\n+import java.util.UUID;\n \n @Path(\"/newapplicant\")\n public class ApplicantResource {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNjk0Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430026943", "bodyText": "what about UUID.randomUUID()  ?", "author": "tiagodolphine", "createdAt": "2020-05-25T17:27:35Z", "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventBuilder;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import java.net.URI;\n+import java.util.Random;\n+\n+@Path(\"/newapplicant\")\n+public class ApplicantResource {\n+\n+    Random rand = new Random();\n+\n+    @Inject\n+    @Channel(\"out-applicants\")\n+    Emitter<String> newApplicantEmitter;\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public void submitApplicant(JsonNode newApplicant) {\n+        CloudEventImpl<JsonNode> applicantEvent =\n+                CloudEventBuilder.<JsonNode>builder()\n+                        .withId(String.valueOf(rand.nextInt(1000)))", "originalCommit": "34f28f523c8184a01fd8ed26ba931780c955e408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNTY4NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430035684", "bodyText": "great idea. updating", "author": "tsurdilo", "createdAt": "2020-05-25T18:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNjk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "003b40586ac1bcd98bd5a1ef8760fa9be5c3d120", "chunk": "diff --git a/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java b/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\nindex f0e60c9a..e7d73807 100644\n--- a/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\n+++ b/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\n\n@@ -30,6 +30,7 @@ import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import java.net.URI;\n import java.util.Random;\n+import java.util.UUID;\n \n @Path(\"/newapplicant\")\n public class ApplicantResource {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNzYzMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430027630", "bodyText": "Can't it be a Publisher<String>? I mean to avoid using Jackson JsonNode?", "author": "tiagodolphine", "createdAt": "2020-05-25T17:30:27Z", "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/DecisionResource.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.jboss.resteasy.annotations.SseElementType;\n+import org.reactivestreams.Publisher;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/decisions\")\n+public class DecisionResource {\n+\n+    @Inject\n+    @Channel(\"out-decisions\")\n+    Publisher<JsonNode> decisions;", "originalCommit": "34f28f523c8184a01fd8ed26ba931780c955e408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNjM3Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430036376", "bodyText": "Its like this so it can easier be consumed by the workflow instance where the workflow data is JsonNode type.", "author": "tsurdilo", "createdAt": "2020-05-25T18:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNzYzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyODg5OQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430028899", "bodyText": "Can't you use the CloudEvent here, like mapper.readValue(received.get(0), CloudEvent.class)?", "author": "tiagodolphine", "createdAt": "2020-05-25T17:35:46Z", "path": "serverless-workflow-events-quarkus/src/test/java/org/kogito/serverless/examples/ApplicantWorkflowTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.sse.SseEventSource;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.Test;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaResource.class)\n+public class ApplicantWorkflowTest {\n+    private static final String DECISION_SSE_ENDPOINT = \"http://localhost:8081/decisions/stream\";\n+\n+    @Test\n+    public void testApplicantProcess() throws Exception {\n+\n+        Client client = ClientBuilder.newClient();\n+        WebTarget target = client.target(DECISION_SSE_ENDPOINT);\n+\n+        List<String> received = new CopyOnWriteArrayList<>();\n+\n+        SseEventSource source = SseEventSource.target(target).build();\n+        source.register(inboundSseEvent -> received.add(String.valueOf(inboundSseEvent.readData())));\n+        source.open();\n+\n+        given()\n+                .body(\"{\\\"name\\\":\\\"Cristiano\\\",\\\"position\\\":\\\"iOS Engineer\\\",\\\"office\\\":\\\"Berlin\\\",\\\"salary\\\":\\\"20000\\\"}\")\n+                .header(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                .when()\n+                .post(\"/newapplicant\")\n+                .then()\n+                .statusCode(204);\n+        await().atMost(10000, MILLISECONDS).until(() -> received.size() == 1);\n+        source.close();\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode decisionObj = mapper.readTree(received.get(0));", "originalCommit": "34f28f523c8184a01fd8ed26ba931780c955e408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzODAxOQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430038019", "bodyText": "Can't do that mapping it seems unfortunately.", "author": "tsurdilo", "createdAt": "2020-05-25T18:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyODg5OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "003b40586ac1bcd98bd5a1ef8760fa9be5c3d120", "url": "https://github.com/kiegroup/kogito-examples/commit/003b40586ac1bcd98bd5a1ef8760fa9be5c3d120", "message": "update to use uuid", "committedDate": "2020-05-25T18:13:50Z", "type": "commit"}]}