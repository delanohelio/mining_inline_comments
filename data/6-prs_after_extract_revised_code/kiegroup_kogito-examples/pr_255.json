{"pr_number": 255, "pr_title": "[KOGITO-2055] [KOGITO-2056] Integration tests for process-kafka-quickstart-quarkus/springboot", "pr_createdAt": "2020-05-07T14:40:59Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/255", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTI2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421911260", "bodyText": "@tiagodolphine maybe use a timeout to not wait forever\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        shutdownLatch.await();\n          \n          \n            \n                        shutdownLatch.await(1, TimeUnit.MINUTES);\n          \n      \n    \n    \n  \n\nand maybe move consumer and produce to a separated block as the latch can still throw an exception.", "author": "cristianonicolai", "createdAt": "2020-05-08T03:08:15Z", "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KafkaTester {\n+\n+    private KafkaProducer<String, String> producer;\n+    private KafkaConsumer<String, String> consumer;\n+    private CountDownLatch shutdownLatch = new CountDownLatch(1);\n+    private AtomicBoolean shutdown = new AtomicBoolean(false);\n+    private static Logger LOGGER = LoggerFactory.getLogger(KafkaTester.class);\n+\n+    public KafkaTester(String hosts) {\n+        Properties producerConfig = new Properties();\n+        producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, hosts);\n+        producerConfig.put(ProducerConfig.CLIENT_ID_CONFIG, this.getClass().getName() + \"Producer\");\n+        producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class.getName());\n+        producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        producer = new KafkaProducer<>(producerConfig);\n+\n+        Properties consumerConfig = new Properties();\n+        consumerConfig.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"true\");\n+        consumerConfig.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        consumerConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, hosts);\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, IntegerDeserializer.class.getName());\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n+        consumerConfig.put(ConsumerConfig.GROUP_ID_CONFIG, this.getClass().getName() + \"Consumer\");\n+        consumer = new KafkaConsumer<>(consumerConfig);\n+    }\n+\n+    public void consume(String topic, Consumer<String> callback) {\n+        consumer.subscribe(Collections.singletonList(topic));\n+\n+        CompletableFuture.runAsync(() -> {\n+            while (!shutdown.get()) {\n+                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(500));\n+\n+                StreamSupport.stream(records.spliterator(), true)\n+                        .map(ConsumerRecord::value)\n+                        .forEach(callback::accept);\n+\n+                consumer.commitSync();\n+            }\n+            shutdownLatch.countDown();\n+        });\n+    }\n+\n+    public void produce(String data, String topic) {\n+        producer.send(new ProducerRecord<>(topic, data), (m, ex) -> {\n+            Optional.ofNullable(ex).ifPresent(e -> LOGGER.error(\"Error publishing message {}\", m, ex));\n+        });\n+    }\n+\n+    public void shutdown() {\n+        try {\n+            shutdown.set(true);\n+            shutdownLatch.await();", "originalCommit": "36641d6398c4166d293ede827863f085b6bd1135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExNDMyNg==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422114326", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-05-08T12:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTkyMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422249921", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-05-08T16:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "chunk": "diff --git a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java\nindex 2b4e52fc..ec9d47e1 100644\n--- a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java\n+++ b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java\n\n@@ -21,6 +21,7 @@ import java.util.Optional;\n import java.util.Properties;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n import java.util.stream.StreamSupport;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTk0OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421911948", "bodyText": "already handled in the After, maybe can be removed from here", "author": "cristianonicolai", "createdAt": "2020-05-08T03:10:39Z", "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();", "originalCommit": "36641d6398c4166d293ede827863f085b6bd1135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExMzAyNQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422113025", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-05-08T12:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTg1NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422249855", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-05-08T16:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "chunk": "diff --git a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\nindex 049511fe..f8629568 100644\n--- a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n+++ b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n\n@@ -15,6 +15,7 @@\n  */\n package org.acme.travel;\n \n+import java.net.URI;\n import java.time.ZonedDateTime;\n import java.util.Optional;\n import java.util.UUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjExNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421912117", "bodyText": "not sure how this annotation will the used, if we really need it.", "author": "cristianonicolai", "createdAt": "2020-05-08T03:11:14Z", "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();\n+    }\n+\n+    @NotNull", "originalCommit": "36641d6398c4166d293ede827863f085b6bd1135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExMjg2Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422112867", "bodyText": "I'll remove it, it was added by the IDE.", "author": "tiagodolphine", "createdAt": "2020-05-08T12:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTgwOA==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422249808", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-05-08T16:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjExNw=="}], "type": "inlineReview", "revised_code": {"commit": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "chunk": "diff --git a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\nindex 049511fe..f8629568 100644\n--- a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n+++ b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n\n@@ -15,6 +15,7 @@\n  */\n package org.acme.travel;\n \n+import java.net.URI;\n import java.time.ZonedDateTime;\n import java.util.Optional;\n import java.util.UUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjUzNA==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421912534", "bodyText": "perhaps it should propagate the exception to let the test fail?", "author": "cristianonicolai", "createdAt": "2020-05-08T03:12:57Z", "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();\n+    }\n+\n+    @NotNull\n+    public String generateCloudEvent(Traveller traveller) {\n+        assertFalse(traveller.isProcessed());\n+        try {\n+            return JsonNodeFactory.instance\n+                    .objectNode()\n+                    .put(\"specversion\", \"0.3\")\n+                    .put(\"id\", UUID.randomUUID().toString())\n+                    .put(\"source\", \"\")\n+                    .put(\"type\", \"TravelersMessageDataEvent_3\")\n+                    .put(\"time\", ZonedDateTime.now().toString())\n+                    .set(\"data\", JsonNodeFactory.instance.pojoNode(traveller))\n+                    .toPrettyString();\n+        } catch (Exception e) {\n+            return null;", "originalCommit": "36641d6398c4166d293ede827863f085b6bd1135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTY4Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422249687", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-05-08T16:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "chunk": "diff --git a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\nindex 049511fe..f8629568 100644\n--- a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n+++ b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n\n@@ -15,6 +15,7 @@\n  */\n package org.acme.travel;\n \n+import java.net.URI;\n import java.time.ZonedDateTime;\n import java.util.Optional;\n import java.util.UUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMDQ2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421930460", "bodyText": "I added the proper cloudevents api in this pr - https://github.com/kiegroup/kogito-examples/pull/254/files\nand think we could use it here as well, there is example in pr how to use that api.", "author": "tsurdilo", "createdAt": "2020-05-08T04:26:41Z", "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();\n+    }\n+\n+    @NotNull\n+    public String generateCloudEvent(Traveller traveller) {", "originalCommit": "36641d6398c4166d293ede827863f085b6bd1135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExMjM1MQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422112351", "bodyText": "great, I'll add and apply the modification.", "author": "tiagodolphine", "createdAt": "2020-05-08T12:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMDQ2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTU5NQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422249595", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-05-08T16:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMDQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "chunk": "diff --git a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\nindex 049511fe..f8629568 100644\n--- a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n+++ b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java\n\n@@ -15,6 +15,7 @@\n  */\n package org.acme.travel;\n \n+import java.net.URI;\n import java.time.ZonedDateTime;\n import java.util.Optional;\n import java.util.UUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA0Ng==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421932046", "bodyText": "To me it seems easier maybe to write a small Emitter and Publisher if needed  and use application.properties than having to define one of these types of classes for every test that might test different messages.\nWould be useful if it was generic (reusable) but serializer and deserializer definitions make it specific.", "author": "tsurdilo", "createdAt": "2020-05-08T04:33:13Z", "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KafkaTester {", "originalCommit": "36641d6398c4166d293ede827863f085b6bd1135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTI5NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421935294", "bodyText": "btw, vertx provides that, see https://github.com/kiegroup/kogito-apps/blob/master/data-index/data-index-service/src/test/java/org/kie/kogito/index/messaging/ReactiveMessagingEventConsumerKafkaIT.java#L66", "author": "cristianonicolai", "createdAt": "2020-05-08T04:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExMjAyMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422112022", "bodyText": "The idea here is to rely purely on the Apache Kafka Client (that at the end is the same used by Vertx Kafka client), in this way we can use the same Test classes on SpringBoot (and allow us to possibly have a shared module for integration tests), I prefer to keep the integration test code more generic not coupling with frameworks unless it is necessary.", "author": "tiagodolphine", "createdAt": "2020-05-08T12:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MDQyMA==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422170420", "bodyText": "I didn't think of reusability between quarkus and spring boot tests - sorry. Thats a valid point. Would there be some way to write a more generic KafkaTester tho so it can be reused between examples?", "author": "tsurdilo", "createdAt": "2020-05-08T14:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTUxMw==", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r422249513", "bodyText": "the idea of this KafkaTester class is to be a helper class, to produce and consume events from kafka to be used on the integration tests in a simple way. It is already quite generic but we can improve it once it is moved to a shared module (that was my idea at least), for now since we don't have this module I inserted it on the same package.", "author": "tiagodolphine", "createdAt": "2020-05-08T16:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "chunk": "diff --git a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java\nindex 2b4e52fc..ec9d47e1 100644\n--- a/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java\n+++ b/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java\n\n@@ -21,6 +21,7 @@ import java.util.Optional;\n import java.util.Properties;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n import java.util.stream.StreamSupport;\n"}}, {"oid": "d9807b013cfce8f67a493f4673e81893504de24a", "url": "https://github.com/kiegroup/kogito-examples/commit/d9807b013cfce8f67a493f4673e81893504de24a", "message": "KOGITO-2055 Create integration tests for process-kafka-quickstart-quarkus check\n\nRefactoring MessagingIntegrationTest", "committedDate": "2020-05-08T12:30:03Z", "type": "commit"}, {"oid": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "url": "https://github.com/kiegroup/kogito-examples/commit/e8f5ba1ed34b2d218f712480b61469c4a9510d81", "message": "Add cloud events api and apply comments on the PR", "committedDate": "2020-05-08T14:22:40Z", "type": "commit"}, {"oid": "dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "url": "https://github.com/kiegroup/kogito-examples/commit/dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "message": "Removing unecessary dependency", "committedDate": "2020-05-08T14:28:39Z", "type": "commit"}, {"oid": "dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "url": "https://github.com/kiegroup/kogito-examples/commit/dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "message": "Removing unecessary dependency", "committedDate": "2020-05-08T14:28:39Z", "type": "forcePushed"}, {"oid": "2191b316753d2739e21698d930c2e7d6537eba97", "url": "https://github.com/kiegroup/kogito-examples/commit/2191b316753d2739e21698d930c2e7d6537eba97", "message": "KOGITO-2056 adding integration tests to process-kafka-quickstart-springboot", "committedDate": "2020-05-08T20:08:12Z", "type": "commit"}, {"oid": "21e4e9e48a474e1d73b09382e97c366ae6a621fe", "url": "https://github.com/kiegroup/kogito-examples/commit/21e4e9e48a474e1d73b09382e97c366ae6a621fe", "message": "Removing duplicated dependency", "committedDate": "2020-05-13T16:37:28Z", "type": "commit"}]}