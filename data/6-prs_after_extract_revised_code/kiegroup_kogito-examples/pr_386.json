{"pr_number": 386, "pr_title": "KOGITO-3408  CloudEvent Kafka Publisher (Quarkus) ", "pr_createdAt": "2020-10-08T14:51:43Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/386", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA==", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504147168", "bodyText": "We would need to revert back to the name of the node. The entire SW implementation and the addon were created around that.\nThis event would be consumed / published in a Kubernetes cluster. So would make sense to have the message id from BPMN or the event type from SW spec in this field.\nPlus source means the actual source of the event, like in the GitHub demo: the source is the repository URL.", "author": "ricardozanini", "createdAt": "2020-10-13T17:52:16Z", "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -115,7 +115,7 @@ void checkStartNewProcessInstanceWithSourceField() throws JsonProcessingExceptio\n         given()\n                 .header(\"ce-specversion\", \"1.0\")\n                 .header(\"ce-id\", \"000\")\n-                .header(\"ce-source\", \"travellers\")\n+                .header(\"ce-source\", \"TravelersMessageDataEvent_3\")", "originalCommit": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzNDg3Nw==", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504434877", "bodyText": "+1\nTBF the implementation will be totally different for knative. I expect the knative addon to provide an ad-hoc Publisher implementation overriding the usual behavior", "author": "evacchi", "createdAt": "2020-10-14T06:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMzUyNw==", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504533527", "bodyText": "I am adding an additional accepting filter that lets messages pass if their type/source == trigger. Would that work?", "author": "evacchi", "createdAt": "2020-10-14T09:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5NzQ2Mw==", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504697463", "bodyText": "If this would help the CloudEventListener to route and consume the messages based on the type/source from CE to the internal Kogito channel, I'm ok with that. I mean, the behavior we have today must not change.", "author": "ricardozanini", "createdAt": "2020-10-14T13:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "74d83134ab77e5b3123abf91f1989ad0eb962aa0", "chunk": "diff --git a/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java b/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java\nindex 0c0c1c5a..e67c1c9f 100644\n--- a/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java\n+++ b/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java\n\n@@ -115,7 +114,7 @@ import static io.restassured.RestAssured.given;\n         given()\n                 .header(\"ce-specversion\", \"1.0\")\n                 .header(\"ce-id\", \"000\")\n-                .header(\"ce-source\", \"TravelersMessageDataEvent_3\")\n+                .header(\"ce-source\", \"travellers\")\n                 .header(\"ce-type\", \"whatevertype\")\n                 .contentType(MediaType.APPLICATION_JSON)\n                 .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzgxMg==", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504147812", "bodyText": "Same here.", "author": "ricardozanini", "createdAt": "2020-10-13T17:53:15Z", "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java", "diffHunk": "@@ -61,7 +61,7 @@ public void submitApplicant(JsonNode newApplicant) {\n         try {\n             CloudEvent applicantEvent = CloudEventBuilder.v1()\n                     .withId(UUID.randomUUID().toString())\n-                    .withType(\"newApplicantEvent\")\n+                    .withType(\"ApplicantworkflowMessageDataEvent_1\")", "originalCommit": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74d83134ab77e5b3123abf91f1989ad0eb962aa0", "chunk": "diff --git a/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java b/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\nindex 69c32160..a834010e 100644\n--- a/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\n+++ b/serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java\n\n@@ -61,7 +61,7 @@ public class ApplicantResource {\n         try {\n             CloudEvent applicantEvent = CloudEventBuilder.v1()\n                     .withId(UUID.randomUUID().toString())\n-                    .withType(\"ApplicantworkflowMessageDataEvent_1\")\n+                    .withType(\"newApplicantEvent\")\n                     .withSource(URI.create(\"http://localhost:8080\"))\n                     .withData(mapper.writeValueAsString(newApplicant).getBytes())\n                     .build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNzY4NA==", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504207684", "bodyText": "Fix formatting", "author": "danielezonca", "createdAt": "2020-10-13T19:36:20Z", "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -38,7 +38,7 @@\n import static io.restassured.RestAssured.given;\n \n @QuarkusTest\n-public class CloudEventListenerTest {\n+    public class CloudEventListenerTest {", "originalCommit": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74d83134ab77e5b3123abf91f1989ad0eb962aa0", "chunk": "diff --git a/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java b/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java\nindex 0c0c1c5a..e67c1c9f 100644\n--- a/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java\n+++ b/process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java\n\n@@ -38,11 +38,10 @@ import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options\n import static io.restassured.RestAssured.given;\n \n @QuarkusTest\n-    public class CloudEventListenerTest {\n-\n-    private static WireMockServer sink;\n+public class CloudEventListenerTest {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CloudEventListenerTest.class);\n+    private static WireMockServer sink;\n \n     static {\n         RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n"}}, {"oid": "74d83134ab77e5b3123abf91f1989ad0eb962aa0", "url": "https://github.com/kiegroup/kogito-examples/commit/74d83134ab77e5b3123abf91f1989ad0eb962aa0", "message": "CloudEvent Kafka Publisher (Quarkus)", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "170497511e7c449009c5d1a5ba9f3352a4e35e74", "url": "https://github.com/kiegroup/kogito-examples/commit/170497511e7c449009c5d1a5ba9f3352a4e35e74", "message": "use cloud events topic config", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "b8e0dadf51cdf1f7dfbf3c6f5bd7ad236985ad16", "url": "https://github.com/kiegroup/kogito-examples/commit/b8e0dadf51cdf1f7dfbf3c6f5bd7ad236985ad16", "message": "add dependency on spring", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "c48ce7479f5b7171712e20bfbfb167081a08a1d7", "url": "https://github.com/kiegroup/kogito-examples/commit/c48ce7479f5b7171712e20bfbfb167081a08a1d7", "message": "wip: serverless events", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "5cdf6cf20fb96791430a2dac7a41f65234190e0f", "url": "https://github.com/kiegroup/kogito-examples/commit/5cdf6cf20fb96791430a2dac7a41f65234190e0f", "message": "adjust kafka topic names", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "f842cbb02f30d5ca034e71122ee52667764d8c27", "url": "https://github.com/kiegroup/kogito-examples/commit/f842cbb02f30d5ca034e71122ee52667764d8c27", "message": "adjust serverless wf example", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "d0b1772baac87124de8f78db80cb4e27fdeaaaea", "url": "https://github.com/kiegroup/kogito-examples/commit/d0b1772baac87124de8f78db80cb4e27fdeaaaea", "message": "fix stream names", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "b5b63b3ea7040c54fb9fb6373034534d34b9fc63", "url": "https://github.com/kiegroup/kogito-examples/commit/b5b63b3ea7040c54fb9fb6373034534d34b9fc63", "message": "wip", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "edd1b208c00f34e66eec99aaf895f00dca7c10f9", "url": "https://github.com/kiegroup/kogito-examples/commit/edd1b208c00f34e66eec99aaf895f00dca7c10f9", "message": "temporarily disable knative test", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "fd7a9597b0bb45898a2037327692cd9da9c9fc51", "url": "https://github.com/kiegroup/kogito-examples/commit/fd7a9597b0bb45898a2037327692cd9da9c9fc51", "message": "wip", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "c93b53ca2138d8737775eef29df11a25bdc800f2", "url": "https://github.com/kiegroup/kogito-examples/commit/c93b53ca2138d8737775eef29df11a25bdc800f2", "message": "wip", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "ab3a2574333135b47d6169f9ff4a5d05c68e55de", "url": "https://github.com/kiegroup/kogito-examples/commit/ab3a2574333135b47d6169f9ff4a5d05c68e55de", "message": "wip", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "0d9a03d7e3455b220be710bb13bf1f1ef13b9587", "url": "https://github.com/kiegroup/kogito-examples/commit/0d9a03d7e3455b220be710bb13bf1f1ef13b9587", "message": "fix tests", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "e3a3fbf4cd9e66e26cfc71e5badba7399583f7b1", "url": "https://github.com/kiegroup/kogito-examples/commit/e3a3fbf4cd9e66e26cfc71e5badba7399583f7b1", "message": "use trigger name instead of class name (both are accepted)", "committedDate": "2020-10-27T07:22:45Z", "type": "commit"}, {"oid": "f41ae60d98e8815f6c1eaa7b1bc3f05645f77026", "url": "https://github.com/kiegroup/kogito-examples/commit/f41ae60d98e8815f6c1eaa7b1bc3f05645f77026", "message": "renaming modules to addons", "committedDate": "2020-10-27T07:22:46Z", "type": "commit"}, {"oid": "f41ae60d98e8815f6c1eaa7b1bc3f05645f77026", "url": "https://github.com/kiegroup/kogito-examples/commit/f41ae60d98e8815f6c1eaa7b1bc3f05645f77026", "message": "renaming modules to addons", "committedDate": "2020-10-27T07:22:46Z", "type": "forcePushed"}, {"oid": "5e15e393d76e7f6dde9d22c590daccd96ee91533", "url": "https://github.com/kiegroup/kogito-examples/commit/5e15e393d76e7f6dde9d22c590daccd96ee91533", "message": "add cloudevents addon", "committedDate": "2020-10-27T07:44:22Z", "type": "commit"}]}