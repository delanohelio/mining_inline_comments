{"pr_number": 448, "pr_title": "[KOGITO-3642] - SW Example with Events, REST Functions and RuleUnits", "pr_createdAt": "2020-11-10T21:41:43Z", "pr_url": "https://github.com/kiegroup/kogito-examples/pull/448", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDgwMQ==", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r524814801", "bodyText": "On a local test I got the following error:\nAppointmentResourceTest.verifySchedulePatientAppointment:75  Expected: a value equal to or greater than <Tue Nov 17 10:50:11 AEST 2020> but: <Tue Nov 17 01:50:00 AEST 2020> was less than <Tue Nov 17 10:50:11 AEST 2020>\nI would suggest to use java.time API, ex LocalDateTime instead of plain Dates as it makes this calculations a lot more consistent.", "author": "cristianonicolai", "createdAt": "2020-11-17T00:56:13Z", "path": "serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/services/ScheduleService.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.sw.onboarding.services;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.acme.sw.onboarding.model.Appointment;\n+import org.acme.sw.onboarding.model.Patient;\n+\n+@ApplicationScoped\n+public class ScheduleService {\n+\n+    public final static int FIRST_HOUR_MORNING = 9;\n+\n+    /*\n+    Our doctors can attend one patient per day only :)\n+    */\n+    private final Map<String, List<Date>> schedule;\n+\n+    public ScheduleService() {\n+        this.schedule = new ConcurrentHashMap<>();\n+    }\n+\n+    /*\n+    In a real world scenario this can get far more complex, we should have a transactions and sync access to the schedule.\n+    We don't want to mess with our doctors schedule, right? :)\n+    To make it simple and less error prone, we are using a simple Map to hold our data.\n+     */\n+    public Appointment createAppointment(final Patient patient) {\n+        final Appointment appointment = new Appointment();\n+        final String doctorId = patient.getAssignedDoctor().getId();\n+        appointment.setPatient(patient);\n+        // better case scenario we set an appointment today an hour from now :)\n+        appointment.setDate(this.addOneHour(new Date()));\n+        appointment.setDoctor(patient.getAssignedDoctor());\n+\n+        // let's find room for our patient\n+        if (this.schedule.get(doctorId) != null) {\n+            final Optional<Date> lastDate = this.schedule.get(doctorId).stream().max(Comparator.nullsFirst(Comparator.naturalOrder()));\n+            appointment.setDate(this.addOneDayFirstHourInMorning(lastDate.orElseThrow(IllegalStateException::new)));\n+        } else { // this doctor hasn't been set an appointment yet\n+            this.schedule.put(doctorId, new ArrayList<>());\n+        }\n+        this.schedule.get(doctorId).add(appointment.getDate());\n+\n+        return appointment;\n+    }\n+\n+    private Date addOneHour(final Date targetDate) {\n+        final Calendar calendar = Calendar.getInstance();", "originalCommit": "c89b5e510f01b8c29fc24a59478ff53584683746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2Mzk5MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r525263990", "bodyText": "LOL, why did I use Calendar? Brain farts...", "author": "ricardozanini", "createdAt": "2020-11-17T15:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5260b5a21b23c76ca89dc5f1a22d690d2db605a8", "chunk": "diff --git a/serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/services/ScheduleService.java b/serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/services/ScheduleService.java\ndeleted file mode 100644\nindex 6291024e..00000000\n--- a/serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/services/ScheduleService.java\n+++ /dev/null\n\n@@ -1,86 +0,0 @@\n-/**\n- *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *        http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package org.acme.sw.onboarding.services;\n-\n-import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.Comparator;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-\n-import org.acme.sw.onboarding.model.Appointment;\n-import org.acme.sw.onboarding.model.Patient;\n-\n-@ApplicationScoped\n-public class ScheduleService {\n-\n-    public final static int FIRST_HOUR_MORNING = 9;\n-\n-    /*\n-    Our doctors can attend one patient per day only :)\n-    */\n-    private final Map<String, List<Date>> schedule;\n-\n-    public ScheduleService() {\n-        this.schedule = new ConcurrentHashMap<>();\n-    }\n-\n-    /*\n-    In a real world scenario this can get far more complex, we should have a transactions and sync access to the schedule.\n-    We don't want to mess with our doctors schedule, right? :)\n-    To make it simple and less error prone, we are using a simple Map to hold our data.\n-     */\n-    public Appointment createAppointment(final Patient patient) {\n-        final Appointment appointment = new Appointment();\n-        final String doctorId = patient.getAssignedDoctor().getId();\n-        appointment.setPatient(patient);\n-        // better case scenario we set an appointment today an hour from now :)\n-        appointment.setDate(this.addOneHour(new Date()));\n-        appointment.setDoctor(patient.getAssignedDoctor());\n-\n-        // let's find room for our patient\n-        if (this.schedule.get(doctorId) != null) {\n-            final Optional<Date> lastDate = this.schedule.get(doctorId).stream().max(Comparator.nullsFirst(Comparator.naturalOrder()));\n-            appointment.setDate(this.addOneDayFirstHourInMorning(lastDate.orElseThrow(IllegalStateException::new)));\n-        } else { // this doctor hasn't been set an appointment yet\n-            this.schedule.put(doctorId, new ArrayList<>());\n-        }\n-        this.schedule.get(doctorId).add(appointment.getDate());\n-\n-        return appointment;\n-    }\n-\n-    private Date addOneHour(final Date targetDate) {\n-        final Calendar calendar = Calendar.getInstance();\n-        calendar.setTime(targetDate);\n-        calendar.add(Calendar.HOUR, 1);\n-        return calendar.getTime();\n-    }\n-\n-    private Date addOneDayFirstHourInMorning(final Date targetDate) {\n-        final Calendar calendar = Calendar.getInstance();\n-        calendar.setTime(targetDate);\n-        calendar.add(Calendar.DATE, 1);\n-        calendar.set(Calendar.HOUR_OF_DAY, FIRST_HOUR_MORNING);\n-        calendar.set(Calendar.MINUTE, 0);\n-        return calendar.getTime();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0ODk2MA==", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r525048960", "bodyText": "This is just an extreme nitpick, but I'd leave out any reference to the gender here: it doesn't seem relevant for the example and it's a slippery topic.", "author": "mariofusco", "createdAt": "2020-11-17T10:32:44Z", "path": "serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/model/Gender.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.sw.onboarding.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+public enum Gender {", "originalCommit": "c89b5e510f01b8c29fc24a59478ff53584683746", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5260b5a21b23c76ca89dc5f1a22d690d2db605a8", "chunk": "diff --git a/serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/model/Gender.java b/serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/model/Gender.java\nindex eb23b972..6b98c0d5 100644\n--- a/serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/model/Gender.java\n+++ b/serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/model/Gender.java\n\n@@ -1,18 +1,3 @@\n-/**\n- *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *        http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n package org.acme.sw.onboarding.model;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n"}}, {"oid": "5260b5a21b23c76ca89dc5f1a22d690d2db605a8", "url": "https://github.com/kiegroup/kogito-examples/commit/5260b5a21b23c76ca89dc5f1a22d690d2db605a8", "message": "[KOGITO-3642] - SW Example with Events, REST Functions and RuleUnits\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "917787600e183af38d6e3ffc61dfdff67623dc03", "url": "https://github.com/kiegroup/kogito-examples/commit/917787600e183af38d6e3ffc61dfdff67623dc03", "message": "modified example", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "c1ad1d9345ea1dcee487da8a0be0255390bda31f", "url": "https://github.com/kiegroup/kogito-examples/commit/c1ad1d9345ea1dcee487da8a0be0255390bda31f", "message": "proper assertion in plain test", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "c7e05138910e20edeebf47ec5284abc5a6ec7bff", "url": "https://github.com/kiegroup/kogito-examples/commit/c7e05138910e20edeebf47ec5284abc5a6ec7bff", "message": "Merging everything together\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "326529c126244f7b141aff3d0ee65c2f31f67701", "url": "https://github.com/kiegroup/kogito-examples/commit/326529c126244f7b141aff3d0ee65c2f31f67701", "message": "Wrapping up and finishing the example implementation\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "c0bac48cd772ed7b9c3a826441ecb3accf8e5a57", "url": "https://github.com/kiegroup/kogito-examples/commit/c0bac48cd772ed7b9c3a826441ecb3accf8e5a57", "message": "Fixing license header", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "dc625ce19a2c9e7de31009ab540fc7b16cf35efb", "url": "https://github.com/kiegroup/kogito-examples/commit/dc625ce19a2c9e7de31009ab540fc7b16cf35efb", "message": "Documenting like a boss\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "d67dad6eff8e708fc30348c6beccf4056127e6a9", "url": "https://github.com/kiegroup/kogito-examples/commit/d67dad6eff8e708fc30348c6beccf4056127e6a9", "message": "Incorporating rules suggestions\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-17T15:27:42Z", "type": "commit"}, {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09", "url": "https://github.com/kiegroup/kogito-examples/commit/bca0879b8314d5d5923a24a50e0d9c8a23853d09", "message": "Fixing dates, updating documentation\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-17T16:01:35Z", "type": "commit"}, {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09", "url": "https://github.com/kiegroup/kogito-examples/commit/bca0879b8314d5d5923a24a50e0d9c8a23853d09", "message": "Fixing dates, updating documentation\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-17T16:01:35Z", "type": "forcePushed"}, {"oid": "c4ff49e03222ed7dbac01e7183dac994d7cd1fd1", "url": "https://github.com/kiegroup/kogito-examples/commit/c4ff49e03222ed7dbac01e7183dac994d7cd1fd1", "message": "Apply suggestions from code review\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>", "committedDate": "2020-11-18T18:17:21Z", "type": "commit"}, {"oid": "5468ee2785ee755f9a8b6fd3ed91ea6f8c2e30e4", "url": "https://github.com/kiegroup/kogito-examples/commit/5468ee2785ee755f9a8b6fd3ed91ea6f8c2e30e4", "message": "removing nosense", "committedDate": "2020-11-18T18:19:26Z", "type": "commit"}]}