{"pr_number": 1763, "pr_title": "Fix for issue 1280:  Notification of Newer Opencast Version in Admin UI", "pr_createdAt": "2020-08-12T14:20:41Z", "pr_url": "https://github.com/opencast/opencast/pull/1763", "timeline": [{"oid": "7dc7cd77e58ba238717bcaf3ca44de63283283e2", "url": "https://github.com/opencast/opencast/commit/7dc7cd77e58ba238717bcaf3ca44de63283283e2", "message": "Fix for issue 1280:  Notification of Newer Opencast Version in Admin UI\n\nThis patch adds a notification in the admin UI behind the bell, if there is a newer version of Opencast available.\nThe notification shows:\n- if there is a new minor release (e.g. 8.4 -> 8.5)\n- if there is a new major release (e.g. 7.4 -> 8.1)\n- if your version is no longer supported (older than two major releases)\n\nAdded service in restServiceMonitor.js :\n- compares your version to the latest version and adds notification accordingly.\n- adds link in the notification to https://docs.opencast.org/r/<LATEST VERSION>/admin/ to enable the user to update if neccesary.\n\nAdded new endpoint at VersionEndpoint.java :\n- retrieves latest version from https://api.github.com/repos/opencast/opencast/releases/latest .\n- updates every hour.\n- provides version via /admin-ng/oc-version/version.json .\n\nThis fixes #1280", "committedDate": "2020-08-12T13:53:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NTk1OQ==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469355959", "bodyText": "I would make this a warning since it's not something an admin would (or most likely even could) fix.\nAnd use the logger's functionality to handle exceptions:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.error(\"Error while parsing the version: \" + e.toString());\n          \n          \n            \n                  logger.error(\"Error while parsing the Opencast version from GitHub\", e);", "author": "lkiesow", "createdAt": "2020-08-12T15:42:26Z", "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {\n+      updateVersion();\n+    }\n+    return gson.toJson(version);\n+  }\n+\n+  private synchronized void updateVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated < 3600) {\n+      return;\n+    }\n+    try {\n+      HttpClient client = HttpClientBuilder.create().build();\n+      HttpGet request = new HttpGet(url);\n+      HttpResponse response = client.execute(request);\n+      String responseString = IOUtils.toString(response.getEntity().getContent(), \"utf-8\");\n+      Map data = gson.fromJson(responseString, Map.class);\n+      version = (String) data.get(\"tag_name\");\n+      lastUpdated = System.currentTimeMillis() / 1000L;\n+    } catch (Exception e) {\n+      logger.error(\"Error while parsing the version: \" + e.toString());", "originalCommit": "7dc7cd77e58ba238717bcaf3ca44de63283283e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0OTg2Ng==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469849866", "bodyText": "How do I make this a warning?\nDoes the logger.error() function handle the Exception in a way such that it will create a warning?", "author": "mheyen", "createdAt": "2020-08-13T10:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NTk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1NTczNA==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r469855734", "bodyText": "logger.warn(\u2026)", "author": "lkiesow", "createdAt": "2020-08-13T10:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1NTk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3fdb7810b96b34d598db8b06142a99f8eda80a98", "chunk": "diff --git a/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java b/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\nindex 7db875ae78..61ed39a32c 100644\n--- a/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\n+++ b/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\n\n@@ -107,7 +107,7 @@ public class VersionEndpoint {\n       version = (String) data.get(\"tag_name\");\n       lastUpdated = System.currentTimeMillis() / 1000L;\n     } catch (Exception e) {\n-      logger.error(\"Error while parsing the version: \" + e.toString());\n+      logger.warn(\"Error while parsing the Opencast version from GitHub\", e);\n     }\n   }\n }\n"}}, {"oid": "034bd78c3d239a47335a415855a5cf62bdf2ff83", "url": "https://github.com/opencast/opencast/commit/034bd78c3d239a47335a415855a5cf62bdf2ff83", "message": "Update modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js\r\n\r\nremoved minor mistake in version control.\n\nCo-authored-by: Lars Kiesow <lkiesow@uos.de>", "committedDate": "2020-08-13T10:11:47Z", "type": "commit"}, {"oid": "04d8d47c35e50aeb86e12595d27fa12e57159503", "url": "https://github.com/opencast/opencast/commit/04d8d47c35e50aeb86e12595d27fa12e57159503", "message": "Update modules/admin-ui-frontend/app/scripts/shared/services/restServiceMonitor.js\r\n\r\nOlder versions including 'SNAPSHOT' are now identified.\n\nCo-authored-by: Lars Kiesow <lkiesow@uos.de>", "committedDate": "2020-08-13T10:16:38Z", "type": "commit"}, {"oid": "3fdb7810b96b34d598db8b06142a99f8eda80a98", "url": "https://github.com/opencast/opencast/commit/3fdb7810b96b34d598db8b06142a99f8eda80a98", "message": "Update modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\n\nchanged error to warning message.", "committedDate": "2020-08-13T13:40:53Z", "type": "commit"}, {"oid": "f621ec0286481e59c7459177a102d1c8c1e3b41c", "url": "https://github.com/opencast/opencast/commit/f621ec0286481e59c7459177a102d1c8c1e3b41c", "message": "Merge remote-tracking branch 'origin/fix-1280' into fix-1280", "committedDate": "2020-08-13T13:54:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzQ3OQ==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470017479", "bodyText": "This should be re**s**ponses, especially since I'm looking at #1766 too :)", "author": "gregorydlogan", "createdAt": "2020-08-13T15:00:09Z", "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })", "originalCommit": "f621ec0286481e59c7459177a102d1c8c1e3b41c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTEwNA==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470505104", "bodyText": "That is absolutely correct ;)", "author": "mheyen", "createdAt": "2020-08-14T09:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2257e7eabaa8ef6426da2e3db39417fc9cdd2417", "chunk": "diff --git a/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java b/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\nindex 61ed39a32c..a9078b49ac 100644\n--- a/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\n+++ b/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\n\n@@ -86,7 +86,7 @@ public class VersionEndpoint {\n   @Produces(MediaType.APPLICATION_JSON)\n   @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n           returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n-          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+          responses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n   public String getVersion() {\n     if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {\n       updateVersion();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjAwNw==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470022007", "bodyText": "Probably only need to check this once, either here, or in updateVersion", "author": "gregorydlogan", "createdAt": "2020-08-13T15:06:12Z", "path": "modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adminui.endpoint;\n+\n+import static org.apache.http.HttpStatus.SC_OK;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/\")\n+@RestService(name = \"VersionService\", title = \"Version service\",\n+  abstractText = \"Provides latest opencast version\",\n+  notes = { \"This service offers the GET method to retrieve the latest opencast version from https://api.github.com .\"})\n+@Component(\n+  immediate = true,\n+  service = VersionEndpoint.class,\n+  property = {\n+    \"service.description=Admin UI - Latest Version Endpoint\",\n+    \"opencast.service.type=org.opencastproject.adminui.endpoint.VersionEndpoint\",\n+    \"opencast.service.path=/admin-ng/oc-version\"\n+  }\n+)\n+public class VersionEndpoint {\n+\n+  /** The logging facility */\n+  private static final Logger logger = LoggerFactory.getLogger(VersionEndpoint.class);\n+\n+  /** The version */\n+  private String version = \"\";\n+\n+  /** GitHub URL */\n+  private String url = \"https://api.github.com/repos/opencast/opencast/releases/latest\";\n+\n+  /** The date */\n+  private long lastUpdated = 0;\n+\n+  private static final Gson gson = new Gson();\n+\n+  /** OSGi callback. */\n+  @Activate\n+  protected void activate() {\n+    logger.info(\"Activate the Admin ui - Latest version endpoint\");\n+  }\n+\n+  @GET\n+  @Path(\"version.json\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n+          returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n+          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+  public String getVersion() {\n+    if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {", "originalCommit": "f621ec0286481e59c7459177a102d1c8c1e3b41c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyOTA2NA==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470029064", "bodyText": "It does make sense to check this twice. If you check it just in updateVersion you have basically a single-threaded web server for this endpoint since that function is synchronized. If you have it just here, you can have multiple updates triggered at once which could cause GitHub temporarily blocking you.", "author": "lkiesow", "createdAt": "2020-08-13T15:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzNzU0Ng==", "url": "https://github.com/opencast/opencast/pull/1763#discussion_r470037546", "bodyText": "Ah, I see what you're saying.  I'm not sure that avoiding the single thread matters, but you're correct in that this approach will scale better.", "author": "gregorydlogan", "createdAt": "2020-08-13T15:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "2257e7eabaa8ef6426da2e3db39417fc9cdd2417", "chunk": "diff --git a/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java b/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\nindex 61ed39a32c..a9078b49ac 100644\n--- a/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\n+++ b/modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java\n\n@@ -86,7 +86,7 @@ public class VersionEndpoint {\n   @Produces(MediaType.APPLICATION_JSON)\n   @RestQuery(name = \"latestversion\", description = \"Returns the latest Opencast version\",\n           returnDescription = \"Returns the latest Opencast version retrieved from GitHub\",\n-          reponses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n+          responses = { @RestResponse(responseCode = SC_OK, description = \"The latest Opencast version.\") })\n   public String getVersion() {\n     if (System.currentTimeMillis() / 1000L - lastUpdated >= 3600) {\n       updateVersion();\n"}}, {"oid": "2257e7eabaa8ef6426da2e3db39417fc9cdd2417", "url": "https://github.com/opencast/opencast/commit/2257e7eabaa8ef6426da2e3db39417fc9cdd2417", "message": "Update modules/admin-ui/src/main/java/org/opencastproject/adminui/endpoint/VersionEndpoint.java", "committedDate": "2020-08-14T09:14:43Z", "type": "commit"}, {"oid": "7e0ba6193be6b15bf3af185f5a303a73ef7c24a3", "url": "https://github.com/opencast/opencast/commit/7e0ba6193be6b15bf3af185f5a303a73ef7c24a3", "message": "Update restServiceMonitor.js and VersionEndpoint\n\nrestServiceMonitor.js can now handle versions >= 10.0\n\nfixed a mistake in VersionEndpoint.java .\nIt now searches in the list of latest releases for the highest version.\npreviously it received only the latest release, which could have been a minor release for an older version.", "committedDate": "2020-08-19T06:27:24Z", "type": "commit"}]}