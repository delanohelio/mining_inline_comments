{"pr_number": 1414, "pr_title": "Gracefully crash if there is no password stored", "pr_createdAt": "2020-02-18T16:07:12Z", "pr_url": "https://github.com/opencast/opencast/pull/1414", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380791225", "bodyText": "I guess this is caused by .charAt(0)?\nIf yes, instead of catching the exception, my suggestion would be to use StringUtils#startsWith instead which will gracefully handle this in the first place and also handle null.", "author": "lkiesow", "createdAt": "2020-02-18T16:35:39Z", "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -78,6 +78,8 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n       return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n     } catch (IllegalArgumentException e) {\n       logger.debug(\"bcrypt hash verification failed\", e);\n+    } catch (StringIndexOutOfBoundsException e) {", "originalCommit": "726c9830741c6a484ed87d247d32315d4129cc48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NTIxMQ==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380795211", "bodyText": "Seems my guess was correct. The cause is charAt and switching to startsWith should fix the underlying problem.", "author": "lkiesow", "createdAt": "2020-02-18T16:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNjY5NQ==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380806695", "bodyText": "Yep, my concern exactly.  I haven't had a chance to dig deeper into this, but this logic appears to check if there is an old md5'd password, and failing that checks for a bcrypt'd one.  If neither of these things are true, shouldn't this throw an exception?  A user without a valid form of password seems like a bug to me.", "author": "gregorydlogan", "createdAt": "2020-02-18T16:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwODY4OQ==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r380808689", "bodyText": "No. You really don't want to throw an exception here if possible since this will cause Opencast to return an internal server error on login and may even disclose internal log-in credentials which is why I would also be careful with logging here. That's also part of why the logging for the IllegalArgumentException is just debug.", "author": "lkiesow", "createdAt": "2020-02-18T17:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "848b224f003fbe04555b957468583248fac2658e", "chunk": "diff --git a/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java b/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java\nindex 846a68cd41..23d074172d 100644\n--- a/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java\n+++ b/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java\n\n@@ -75,15 +75,14 @@ public class CustomPasswordEncoder implements PasswordEncoder {\n     // Test BCrypt encoded hash\n     logger.debug(\"Verifying bcrypt hash {}\", encodedPassword);\n     try {\n-      return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n+      return encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword);\n     } catch (IllegalArgumentException e) {\n       logger.debug(\"bcrypt hash verification failed\", e);\n-    } catch (StringIndexOutOfBoundsException e) {\n-      logger.debug(\"No bcrypt hash stored\");\n     }\n     return false;\n   }\n \n+\n   /**\n    * Encode a clear text password using Opencast's legacy MD5 based hashing with salt.\n    * The username was used as salt for this.\n"}}, {"oid": "848b224f003fbe04555b957468583248fac2658e", "url": "https://github.com/opencast/opencast/commit/848b224f003fbe04555b957468583248fac2658e", "message": "Modified with a \"StartsWith\" instead of an exception", "committedDate": "2020-02-19T11:27:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r381260476", "bodyText": "This will indeed handle more cases but will still fail if encodedPassword is null. Can we switch to using StringUtils#startsWith? That will handle that as well.", "author": "lkiesow", "createdAt": "2020-02-19T12:29:52Z", "path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java", "diffHunk": "@@ -75,13 +75,14 @@ public boolean isPasswordValid(String encodedPassword, String rawPassword, Objec\n     // Test BCrypt encoded hash\n     logger.debug(\"Verifying bcrypt hash {}\", encodedPassword);\n     try {\n-      return encodedPassword.charAt(0) == '$' && BCrypt.checkpw(rawPassword, encodedPassword);\n+      return encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword);", "originalCommit": "1cc8d0db0b6cdaf133c55fe1c78d9ddacced07ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0MDQwMA==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r381840400", "bodyText": "I don't understand you, I changed yesterday to use startsWith", "author": "mliradelc", "createdAt": "2020-02-20T08:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzMzczMw==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r381933733", "bodyText": "You used String#startsWith but I suggested StringUtils#startsWith.\nThe difference is basically that StringUtils#startsWith works as if you had an additional check for null:\nreturn StringUtils.startsWith(encodedPassword, \"$\") && BCrypt.checkpw(rawPassword, encodedPassword); \n\u2026roughly equals\u2026\nreturn encodedPassword != null && encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword); \n\u2026which is both just fine btb :)", "author": "lkiesow", "createdAt": "2020-02-20T11:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNjUxNQ==", "url": "https://github.com/opencast/opencast/pull/1414#discussion_r382436515", "bodyText": "Aha!, I thought that it was StringUtils, I will change that ASAP!", "author": "mliradelc", "createdAt": "2020-02-21T07:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MDQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "72033d7d1d0dcbb922371107066ec667355a36c7", "chunk": "diff --git a/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java b/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java\nindex 23d074172d..583c6d0581 100644\n--- a/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java\n+++ b/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java\n\n@@ -75,14 +75,13 @@ public class CustomPasswordEncoder implements PasswordEncoder {\n     // Test BCrypt encoded hash\n     logger.debug(\"Verifying bcrypt hash {}\", encodedPassword);\n     try {\n-      return encodedPassword.startsWith(\"$\") && BCrypt.checkpw(rawPassword, encodedPassword);\n+      return StringUtils.startsWith(encodedPassword, \"$\") && BCrypt.checkpw(rawPassword, encodedPassword);\n     } catch (IllegalArgumentException e) {\n       logger.debug(\"bcrypt hash verification failed\", e);\n     }\n     return false;\n   }\n \n-\n   /**\n    * Encode a clear text password using Opencast's legacy MD5 based hashing with salt.\n    * The username was used as salt for this.\n"}}, {"oid": "72033d7d1d0dcbb922371107066ec667355a36c7", "url": "https://github.com/opencast/opencast/commit/72033d7d1d0dcbb922371107066ec667355a36c7", "message": "Gracefully crash if there is no password stored\n\nThis is a follow up of  #1399 where in the case that there are\nno password stored in the local database. Now will fail with bad\ncredentials error and not with a java crash page.", "committedDate": "2020-02-21T07:54:52Z", "type": "forcePushed"}, {"oid": "3f57a5036df562ccd559da133ffda6a77bcac7fc", "url": "https://github.com/opencast/opencast/commit/3f57a5036df562ccd559da133ffda6a77bcac7fc", "message": "Gracefully crash if there is no password stored\n\nThis is a follow up of  #1399 where in the case that there are\nno password stored in the local database. Now will fail with bad\ncredentials error and not with a java crash page.", "committedDate": "2020-02-27T08:29:32Z", "type": "forcePushed"}, {"oid": "b4f70b9fd8e032d634773059469ca02e3830dd00", "url": "https://github.com/opencast/opencast/commit/b4f70b9fd8e032d634773059469ca02e3830dd00", "message": "Gracefully crash if there is no password stored\n\nThis is a follow up of  #1399 where in the case that there are\nno password stored in the local database. Now will fail with bad\ncredentials error and not with a java crash page.", "committedDate": "2020-02-27T08:31:02Z", "type": "commit"}, {"oid": "b4f70b9fd8e032d634773059469ca02e3830dd00", "url": "https://github.com/opencast/opencast/commit/b4f70b9fd8e032d634773059469ca02e3830dd00", "message": "Gracefully crash if there is no password stored\n\nThis is a follow up of  #1399 where in the case that there are\nno password stored in the local database. Now will fail with bad\ncredentials error and not with a java crash page.", "committedDate": "2020-02-27T08:31:02Z", "type": "forcePushed"}]}