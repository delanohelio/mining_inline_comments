{"pr_number": 1615, "pr_title": "Aditive Filter for Api/events endpoint", "pr_createdAt": "2020-05-29T15:32:08Z", "pr_url": "https://github.com/opencast/opencast/pull/1615", "timeline": [{"oid": "8478fdb43211d8adae6d805e47f25f347decedc0", "url": "https://github.com/opencast/opencast/commit/8478fdb43211d8adae6d805e47f25f347decedc0", "message": "Aditive Filter for Api/events endpoint\nAdd documentation  change api version to 1.5.0", "committedDate": "2020-06-04T12:04:05Z", "type": "forcePushed"}, {"oid": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c", "url": "https://github.com/opencast/opencast/commit/a6dcbaf352840e5d0d8fbc68ac90134a1607344c", "message": "Aditive Filter for Api/events endpoint\nAdd documentation  change api version to 1.5.0", "committedDate": "2020-06-08T08:04:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwMzQ0Nw==", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r437003447", "bodyText": "I would move this to debug since your server admin probably doesn't care what random junk their users are dropping into the filter :)", "author": "gregorydlogan", "createdAt": "2020-06-08T21:11:22Z", "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "diffHunk": "@@ -642,177 +646,265 @@ public Response getEvents(@HeaderParam(\"Accept\") String acceptHeader, @QueryPara\n       optLimit = Option.none();\n     }\n \n-    // Parse the filters\n-    if (StringUtils.isNotBlank(filter)) {\n-      for (String f : filter.split(\",\")) {\n-        String[] filterTuple = f.split(\":\");\n-        if (filterTuple.length < 2) {\n-          logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n-          continue;\n-        }\n+    //List of all events from the filters\n+    List<IndexObject> allEvents = new ArrayList<>();\n \n-        String name = filterTuple[0];\n-        String value;\n+    if (!isNullOrEmpty(filter)) {\n+      // API version 1.5.0: Additive filter\n+      if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_5_0)) {\n+        filter = filter.subList(0,1);\n+      }\n+      for (String filterPart : filter) {\n+        // Parse the filters\n+\n+        for (String f : filterPart.split(\",\")) {\n+          String[] filterTuple = f.split(\":\");\n+          if (filterTuple.length < 2) {\n+            logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);", "originalCommit": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzgyMQ==", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r437033821", "bodyText": "I would move the sorting logic into a helper function rather than duplicating code.", "author": "gregorydlogan", "createdAt": "2020-06-08T22:22:28Z", "path": "modules/external-api/src/main/java/org/opencastproject/external/endpoint/EventsEndpoint.java", "diffHunk": "@@ -642,177 +646,265 @@ public Response getEvents(@HeaderParam(\"Accept\") String acceptHeader, @QueryPara\n       optLimit = Option.none();\n     }\n \n-    // Parse the filters\n-    if (StringUtils.isNotBlank(filter)) {\n-      for (String f : filter.split(\",\")) {\n-        String[] filterTuple = f.split(\":\");\n-        if (filterTuple.length < 2) {\n-          logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n-          continue;\n-        }\n+    //List of all events from the filters\n+    List<IndexObject> allEvents = new ArrayList<>();\n \n-        String name = filterTuple[0];\n-        String value;\n+    if (!isNullOrEmpty(filter)) {\n+      // API version 1.5.0: Additive filter\n+      if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_5_0)) {\n+        filter = filter.subList(0,1);\n+      }\n+      for (String filterPart : filter) {\n+        // Parse the filters\n+\n+        for (String f : filterPart.split(\",\")) {\n+          String[] filterTuple = f.split(\":\");\n+          if (filterTuple.length < 2) {\n+            logger.info(\"No value for filter {} in filters list: {}\", filterTuple[0], filter);\n+            continue;\n+          }\n \n-        if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // MH-13038 - 1.1.0 and higher support colons in values\n-          value = f.substring(name.length() + 1);\n-        } else {\n-          value = filterTuple[1];\n-        }\n+          String name = filterTuple[0];\n+          String value;\n \n-        if (\"presenters\".equals(name)) {\n-          query.withPresenter(value);\n-        } else if (\"contributors\".equals(name)) {\n-          query.withContributor(value);\n-        } else if (\"location\".equals(name)) {\n-          query.withLocation(value);\n-        } else if (\"textFilter\".equals(name)) {\n-          query.withText(\"*\" + value + \"*\");\n-        } else if (\"series\".equals(name)) {\n-          query.withSeriesId(value);\n-        } else if (\"subject\".equals(name)) {\n-          query.withSubject(value);\n-        } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n-          // additional filters only available with Version 1.1.0 or higher\n-          if (\"identifier\".equals(name)) {\n-            query.withIdentifier(value);\n-          } else if (\"title\".equals(name)) {\n-            query.withTitle(value);\n-          } else if (\"description\".equals(name)) {\n-            query.withDescription(value);\n-          } else if (\"series_name\".equals(name)) {\n-            query.withSeriesName(value);\n-          } else if (\"language\".equals(name)) {\n-            query.withLanguage(value);\n-          } else if (\"created\".equals(name)) {\n-            query.withCreated(value);\n-          } else if (\"license\".equals(name)) {\n-            query.withLicense(value);\n-          } else if (\"rightsholder\".equals(name)) {\n-            query.withRights(value);\n-          } else if (\"is_part_of\".equals(name)) {\n+          if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // MH-13038 - 1.1.0 and higher support colons in values\n+            value = f.substring(name.length() + 1);\n+          } else {\n+            value = filterTuple[1];\n+          }\n+\n+          if (\"presenters\".equals(name)) {\n+            query.withPresenter(value);\n+          } else if (\"contributors\".equals(name)) {\n+            query.withContributor(value);\n+          } else if (\"location\".equals(name)) {\n+            query.withLocation(value);\n+          } else if (\"textFilter\".equals(name)) {\n+            query.withText(\"*\" + value + \"*\");\n+          } else if (\"series\".equals(name)) {\n             query.withSeriesId(value);\n-          } else if (\"source\".equals(name)) {\n-            query.withSource(value);\n-          } else if (\"status\".equals(name)) {\n-            query.withEventStatus(value);\n-          } else if (\"agent_id\".equals(name)) {\n-            query.withAgentId(value);\n-          } else if (\"start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withStartFrom(fromAndToCreationRange.getA());\n-              query.withStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+          } else if (\"subject\".equals(name)) {\n+            query.withSubject(value);\n+          } else if (!requestedVersion.isSmallerThan(ApiVersion.VERSION_1_1_0)) {\n+            // additional filters only available with Version 1.1.0 or higher\n+            if (\"identifier\".equals(name)) {\n+              query.withIdentifier(value);\n+            } else if (\"title\".equals(name)) {\n+              query.withTitle(value);\n+            } else if (\"description\".equals(name)) {\n+              query.withDescription(value);\n+            } else if (\"series_name\".equals(name)) {\n+              query.withSeriesName(value);\n+            } else if (\"language\".equals(name)) {\n+              query.withLanguage(value);\n+            } else if (\"created\".equals(name)) {\n+              query.withCreated(value);\n+            } else if (\"license\".equals(name)) {\n+              query.withLicense(value);\n+            } else if (\"rightsholder\".equals(name)) {\n+              query.withRights(value);\n+            } else if (\"is_part_of\".equals(name)) {\n+              query.withSeriesId(value);\n+            } else if (\"source\".equals(name)) {\n+              query.withSource(value);\n+            } else if (\"status\".equals(name)) {\n+              query.withEventStatus(value);\n+            } else if (\"agent_id\".equals(name)) {\n+              query.withAgentId(value);\n+            } else if (\"start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withStartFrom(fromAndToCreationRange.getA());\n+                query.withStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else if (\"technical_start\".equals(name)) {\n+              try {\n+                Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n+                query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n+                query.withTechnicalStartTo(fromAndToCreationRange.getB());\n+              } catch (Exception e) {\n+                return RestUtil.R\n+                        .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+\n+              }\n+            } else {\n+              logger.warn(\"Unknown filter criteria {}\", name);\n+              return RestUtil.R.badRequest(String.format(\"Unknown filter criterion in request: %s\", name));\n \n             }\n-          } else if (\"technical_start\".equals(name)) {\n-            try {\n-              Tuple<Date, Date> fromAndToCreationRange = RestUtils.getFromAndToDateRange(value);\n-              query.withTechnicalStartFrom(fromAndToCreationRange.getA());\n-              query.withTechnicalStartTo(fromAndToCreationRange.getB());\n-            } catch (Exception e) {\n-              return RestUtil.R\n-                      .badRequest(String.format(\"Filter 'technical_start' could not be parsed: %s\", e.getMessage()));\n+          }\n+        }\n \n+        if (optSort.isSome()) {", "originalCommit": "a6dcbaf352840e5d0d8fbc68ac90134a1607344c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMjM0Mg==", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r438222342", "bodyText": "You are right!. How I didn't see that!\nIt was bothering me a lot have to duplicate the code. Creates a new point of failure. I will create the helper function to do that.", "author": "mliradelc", "createdAt": "2020-06-10T15:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzgyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5NzgzMw==", "url": "https://github.com/opencast/opencast/pull/1615#discussion_r451697833", "bodyText": "Sounds good.  Please ping me when this is done!", "author": "gregorydlogan", "createdAt": "2020-07-08T17:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzgyMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2fe4456907e4d7671bec708dc43b69754ba29976", "url": "https://github.com/opencast/opencast/commit/2fe4456907e4d7671bec708dc43b69754ba29976", "message": "Docs typos and sentences fix.", "committedDate": "2020-10-02T16:02:05Z", "type": "forcePushed"}, {"oid": "3e0e69402ae87337403a9fb66b07f8d09bf2fbba", "url": "https://github.com/opencast/opencast/commit/3e0e69402ae87337403a9fb66b07f8d09bf2fbba", "message": "Aditive Filter for Api/events endpoint\nAdd documentation  change api version to 1.5.0", "committedDate": "2020-10-02T16:44:32Z", "type": "commit"}, {"oid": "3e0e69402ae87337403a9fb66b07f8d09bf2fbba", "url": "https://github.com/opencast/opencast/commit/3e0e69402ae87337403a9fb66b07f8d09bf2fbba", "message": "Aditive Filter for Api/events endpoint\nAdd documentation  change api version to 1.5.0", "committedDate": "2020-10-02T16:44:32Z", "type": "forcePushed"}]}