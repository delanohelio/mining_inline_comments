{"pr_number": 1800, "pr_title": "Adopter Registration", "pr_createdAt": "2020-08-26T09:46:07Z", "pr_url": "https://github.com/opencast/opencast/pull/1800", "timeline": [{"oid": "362179515ccfc13baed1992f40498205cb0b8a3c", "url": "https://github.com/opencast/opencast/commit/362179515ccfc13baed1992f40498205cb0b8a3c", "message": "Adopter Registration", "committedDate": "2020-08-26T10:10:12Z", "type": "forcePushed"}, {"oid": "566f7d733621dba65da47d0b01cc857e62d827b8", "url": "https://github.com/opencast/opencast/commit/566f7d733621dba65da47d0b01cc857e62d827b8", "message": "Adopter Registration", "committedDate": "2020-08-26T12:53:27Z", "type": "commit"}, {"oid": "566f7d733621dba65da47d0b01cc857e62d827b8", "url": "https://github.com/opencast/opencast/commit/566f7d733621dba65da47d0b01cc857e62d827b8", "message": "Adopter Registration", "committedDate": "2020-08-26T12:53:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4OTc2OQ==", "url": "https://github.com/opencast/opencast/pull/1800#discussion_r495289769", "bodyText": "Since this is new code we should use the new style DI bits.  Take a look at #1771 for an example.  I'll omit further comments on this.", "author": "gregorydlogan", "createdAt": "2020-09-25T22:40:43Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopter/registration/AdopterRegistrationServiceImpl.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopter.registration;\n+\n+import org.opencastproject.security.api.SecurityService;\n+\n+/**\n+ * This service is used for registration and retrieving form data for\n+ * the logged in user in the context of adopter statistics.\n+ */\n+public class AdopterRegistrationServiceImpl implements Service {", "originalCommit": "566f7d733621dba65da47d0b01cc857e62d827b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5MDEwNw==", "url": "https://github.com/opencast/opencast/pull/1800#discussion_r495290107", "bodyText": "This should be named something like AdopterStatisticsRegistrationEndpoint to align with the rest of the code.", "author": "gregorydlogan", "createdAt": "2020-09-25T22:41:25Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopter/registration/Controller.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopter.registration;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.opencastproject.util.RestUtil.R.ok;\n+import static org.opencastproject.util.RestUtil.R.serverError;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * The REST endpoint for the adopter statistics service.\n+ */\n+@Path(\"/\")\n+@RestService(name = \"registrationController\",\n+        title = \"Adopter Statistics Registration Service Endpoint\",\n+        abstractText = \"Rest Endpoint for the registration form.\",\n+        notes = {\"Provides operations regarding the adopter registration form\"})\n+public class Controller {", "originalCommit": "566f7d733621dba65da47d0b01cc857e62d827b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5MTY4Nw==", "url": "https://github.com/opencast/opencast/pull/1800#discussion_r495291687", "bodyText": "I don't see a setter for docs, does this work?", "author": "gregorydlogan", "createdAt": "2020-09-25T22:44:11Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopter/registration/Controller.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopter.registration;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.opencastproject.util.RestUtil.R.ok;\n+import static org.opencastproject.util.RestUtil.R.serverError;\n+\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.google.gson.Gson;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * The REST endpoint for the adopter statistics service.\n+ */\n+@Path(\"/\")\n+@RestService(name = \"registrationController\",\n+        title = \"Adopter Statistics Registration Service Endpoint\",\n+        abstractText = \"Rest Endpoint for the registration form.\",\n+        notes = {\"Provides operations regarding the adopter registration form\"})\n+public class Controller {\n+\n+  /** The logger */\n+  private static final Logger logger = LoggerFactory.getLogger(Controller.class);\n+\n+  /** The JSON parser */\n+  private static final Gson gson = new Gson();\n+\n+  /** The rest docs */\n+  protected String docs;\n+\n+  /** The service that provides methods for the registration */\n+  protected Service registrationService;\n+\n+  /** OSGi setter for the registration service */\n+  public void setRegistrationService(Service registrationService) {\n+    this.registrationService = registrationService;\n+  }\n+\n+\n+  @GET\n+  @Path(\"registration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"getregistrationform\", description = \"GETs the adopter registration data.\", responses = {\n+          @RestResponse(description = \"Retrieved registration data.\",\n+                        responseCode = HttpServletResponse.SC_OK),\n+          @RestResponse(description = \"Error while retrieving adopter registration data.\",\n+                        responseCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR) },\n+                        returnDescription = \"GETs the adopter registration data.\")\n+  public String getRegistrationForm() {\n+    logger.info(\"Retrieving adopter registration data.\");\n+    return gson.toJson(registrationService.retrieveFormData());\n+  }\n+\n+\n+  @POST\n+  @Path(\"registration\")\n+  @Consumes({MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON})\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"saveregistrationform\", description = \"Saves the adopter registration data.\",\n+             returnDescription = \"Status\", responses = {\n+          @RestResponse(responseCode = SC_OK,\n+                  description = \"Adopter registration data saved.\"),\n+          @RestResponse(responseCode = SC_BAD_REQUEST,\n+                  description = \"Couldn't save adopter registration data.\")})\n+  public Response register(String data) {\n+    logger.info(\"Saving adopter registration data.\");\n+    Form form = gson.fromJson(data, Form.class);\n+    try {\n+      registrationService.saveFormData(form);\n+    } catch (Exception e) {\n+      logger.error(\"Error while saving adopter registration data.\", e);\n+      return Response.serverError().build();\n+    }\n+    return Response.ok().build();\n+  }\n+\n+\n+  @DELETE\n+  @Path(\"registration\")\n+  @RestQuery(name = \"deleteregistrationform\", description = \"Deletes the adopter registration data\", responses = {\n+          @RestResponse(description = \"Successful deleted form data.\",\n+                  responseCode = HttpServletResponse.SC_OK),\n+          @RestResponse(description = \"Error while deleting adopter registration data.\",\n+                  responseCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR) },\n+          returnDescription = \"DELETEs the adopter registration data.\")\n+  public Response deleteRegistrationData() {\n+    logger.info(\"Deleting adopter registration data.\");\n+    try {\n+      registrationService.deleteFormData();\n+      return ok();\n+    } catch (Exception e) {\n+      logger.error(\"Error while deleting adopter registration data.\", e);\n+      return serverError();\n+    }\n+  }\n+\n+\n+  @GET\n+  @Produces(MediaType.TEXT_HTML)\n+  @Path(\"docs\")\n+  public String getDocs() {\n+    return docs;", "originalCommit": "566f7d733621dba65da47d0b01cc857e62d827b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Mjg5OA==", "url": "https://github.com/opencast/opencast/pull/1800#discussion_r495292898", "bodyText": "These should have their lengths specified explicitly IMO.", "author": "gregorydlogan", "createdAt": "2020-09-25T22:46:08Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopter/registration/Form.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopter.registration;\n+\n+import org.opencastproject.security.api.Organization;\n+import org.opencastproject.util.EqualsUtil;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+/**\n+ * JPA-annotated registration form object.\n+ */\n+@Entity\n+@Access(AccessType.FIELD)\n+@Table(name = \"oc_adopter_registration\")\n+@NamedQueries({\n+        @NamedQuery(name = \"Form.findAll\", query = \"SELECT f FROM Form f\"),\n+        @NamedQuery(name = \"Form.deleteAll\", query = \"DELETE FROM Form f\")\n+})\n+public class Form implements IForm {\n+\n+\n+  //================================================================================\n+  // Properties\n+  //================================================================================\n+\n+  @Id\n+  @Column(name = \"adopter_key\")", "originalCommit": "566f7d733621dba65da47d0b01cc857e62d827b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NDgwMA==", "url": "https://github.com/opencast/opencast/pull/1800#discussion_r495294800", "bodyText": "tx can be null at this point.", "author": "gregorydlogan", "createdAt": "2020-09-25T22:49:20Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopter/registration/FormRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopter.registration;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+\n+/**\n+ * Repository that handles registration forms for the adopter statistics.\n+ */\n+public class FormRepositoryImpl implements FormRepository {\n+\n+  /** The logger */\n+  private static final Logger logger = LoggerFactory.getLogger(FormRepository.class);\n+\n+  /** The factory for creating the entity manager. */\n+  protected EntityManagerFactory emf = null;\n+\n+  /** OSGi setter for the entity manager factory. */\n+  void setEntityManagerFactory(EntityManagerFactory emf) {\n+    this.emf = emf;\n+  }\n+\n+\n+  //================================================================================\n+  // Methods\n+  //================================================================================\n+\n+  @Override\n+  public void save(IForm f) throws FormRepositoryException {\n+    Form form = (Form) f;\n+    EntityManager em = null;\n+    EntityTransaction tx = null;\n+    try {\n+      em = emf.createEntityManager();\n+      tx = em.getTransaction();\n+      tx.begin();\n+      Form dbForm = getForm(em);\n+      if (dbForm == null) {\n+        // Null means, that there is no entry in the DB yet, so we create UUIDs for the keys.\n+        form.setAdopterKey(UUID.randomUUID().toString());\n+        form.setStatisticKey(UUID.randomUUID().toString());\n+        form.setDateCreated(new Date());\n+        form.setDateModified(new Date());\n+        em.persist(form);\n+      } else {\n+        dbForm.merge(form);\n+        em.merge(dbForm);\n+      }\n+      tx.commit();\n+    } catch (Exception e) {\n+      logger.error(\"Couldn't update the adopter statistics registration form: {}\", e.getMessage());\n+      if (tx.isActive()) {", "originalCommit": "566f7d733621dba65da47d0b01cc857e62d827b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwMjE1Ng==", "url": "https://github.com/opencast/opencast/pull/1800#discussion_r495302156", "bodyText": "I would encourage the use of UrlSupport for this kind of thing.", "author": "gregorydlogan", "createdAt": "2020-09-25T23:01:32Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopter/statistic/Sender.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopter.statistic;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * Contains methods for sending statistic data via rest.\n+ */\n+public class Sender {\n+\n+  /** The logger */\n+  private static final Logger logger = LoggerFactory.getLogger(Sender.class);\n+\n+  /** The base URL for the external server where the data will be send to */\n+  private String baseUrl;\n+\n+  // The suffixes for the base statistic server URL\n+  // they determine to which REST endpoint the data will be sent\n+  private static final String GENERAL_DATA_URL_SUFFIX = \"adopter\";\n+  private static final String STATISTIC_URL_SUFFIX = \"statistic\";\n+\n+  //================================================================================\n+  // Constructor\n+  //================================================================================\n+\n+  /**\n+   * Simple Constructor that requires the URL of the statistic server.\n+   * @param statisticServerBaseUrl The URL prefix of the statistic server.\n+   */\n+  public Sender(String statisticServerBaseUrl) {\n+    if (!statisticServerBaseUrl.endsWith(\"/\")) {", "originalCommit": "566f7d733621dba65da47d0b01cc857e62d827b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwMjc5NA==", "url": "https://github.com/opencast/opencast/pull/1800#discussion_r495302794", "bodyText": "Let's replace this logic with something like\nboolean errorOccurred = con.getResponseCode() < 200 || con.getResponseCode() >= 300", "author": "gregorydlogan", "createdAt": "2020-09-25T23:02:35Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopter/statistic/Sender.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopter.statistic;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * Contains methods for sending statistic data via rest.\n+ */\n+public class Sender {\n+\n+  /** The logger */\n+  private static final Logger logger = LoggerFactory.getLogger(Sender.class);\n+\n+  /** The base URL for the external server where the data will be send to */\n+  private String baseUrl;\n+\n+  // The suffixes for the base statistic server URL\n+  // they determine to which REST endpoint the data will be sent\n+  private static final String GENERAL_DATA_URL_SUFFIX = \"adopter\";\n+  private static final String STATISTIC_URL_SUFFIX = \"statistic\";\n+\n+  //================================================================================\n+  // Constructor\n+  //================================================================================\n+\n+  /**\n+   * Simple Constructor that requires the URL of the statistic server.\n+   * @param statisticServerBaseUrl The URL prefix of the statistic server.\n+   */\n+  public Sender(String statisticServerBaseUrl) {\n+    if (!statisticServerBaseUrl.endsWith(\"/\")) {\n+      statisticServerBaseUrl += \"/\";\n+    }\n+    this.baseUrl = statisticServerBaseUrl;\n+  }\n+\n+  //================================================================================\n+  // Methods\n+  //================================================================================\n+\n+  /**\n+   * Executes the 'send' method with the proper REST URL suffix.\n+   * @param json The data which shall be sent.\n+   * @throws Exception General exception that can occur while sending the data.\n+   */\n+  public void sendGeneralData(String json) throws Exception {\n+    send(json, GENERAL_DATA_URL_SUFFIX);\n+  }\n+\n+  /**\n+   * Executes the 'send' method with the proper REST URL suffix.\n+   * @param json The data which shall be sent.\n+   * @throws Exception General exception that can occur while sending the data.\n+   */\n+  public void sendStatistics(String json) throws Exception {\n+    send(json, STATISTIC_URL_SUFFIX);\n+  }\n+\n+  /**\n+   * Sends the JSON string via post request.\n+   * @param json The JSON string that has to be send.\n+   * @param urlSuffix The url suffix determines to which rest endpoint the data will be send.\n+   * @throws Exception General exception that can occur while processing the POST request.\n+   */\n+  private void send(String json, String urlSuffix) throws Exception {\n+    try {\n+      URL url = new URL(baseUrl + urlSuffix);\n+      HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+      con.setRequestMethod(\"POST\");\n+      con.setRequestProperty(\"Content-Type\", \"application/json; utf-8\");\n+      con.setRequestProperty(\"Accept\", \"application/json\");\n+      con.setDoOutput(true);\n+\n+      try (OutputStream os = con.getOutputStream()) {\n+        byte[] input = json.getBytes(StandardCharsets.UTF_8);\n+        os.write(input, 0, input.length);\n+      }\n+\n+      String httpStatus = con.getResponseCode() + \"\";", "originalCommit": "566f7d733621dba65da47d0b01cc857e62d827b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}