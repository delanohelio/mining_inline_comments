{"pr_number": 8928, "pr_title": "KAFKA-10192: Wait for REST API to become available before testing blocked connectors in integration tests", "pr_createdAt": "2020-06-25T17:24:42Z", "pr_url": "https://github.com/apache/kafka/pull/8928", "timeline": [{"oid": "bc1fd02f3beb9aa7e9ee957f0e08263491b7a9fe", "url": "https://github.com/apache/kafka/commit/bc1fd02f3beb9aa7e9ee957f0e08263491b7a9fe", "message": "KAFKA-10192: Wait for REST API to become available before testing blocked connectors", "committedDate": "2020-06-25T17:19:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ0MQ==", "url": "https://github.com/apache/kafka/pull/8928#discussion_r449787441", "bodyText": "We have EmbeddedConnectClusterAssertions#assertExactlyNumWorkersAreUp\nShould we use this high level assertion to confirm that the workers are up?", "author": "kkonstantine", "createdAt": "2020-07-04T16:42:53Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/BlockingConnectorTest.java", "diffHunk": "@@ -76,6 +78,15 @@ public void setup() {\n \n         // start the clusters\n         connect.start();\n+\n+        // wait for the Connect REST API to become available. necessary because of the reduced REST\n+        // request timeout; otherwise, we may get an unexpected 500 with our first real REST request\n+        // if the worker is still getting on its feet.\n+        waitForCondition(", "originalCommit": "bc1fd02f3beb9aa7e9ee957f0e08263491b7a9fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4OTA5MQ==", "url": "https://github.com/apache/kafka/pull/8928#discussion_r449789091", "bodyText": "That won't quite buy us what we need. The litmus test for a worker being available with that call is that its root resource returns a valid ServerInfo response, but this doesn't guarantee that the worker has completed startup (reading to the end of internal topics, specifically) and so calls to the REST API that have to be handled in the DistributedHerder::tick method may still block and, because of the reduced timeouts for this test, fail.\nThis isn't a great solution but as far as I can tell there's no official way to determine if a worker has completed startup or not via the REST API, so issuing an info request for a non-existent connector is used instead.", "author": "C0urante", "createdAt": "2020-07-04T17:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4OTQ3NQ==", "url": "https://github.com/apache/kafka/pull/8928#discussion_r449789475", "bodyText": "Should we change the assertions then? I'd assume this will be useful to other tests as well.", "author": "kkonstantine", "createdAt": "2020-07-04T17:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NzAxMA==", "url": "https://github.com/apache/kafka/pull/8928#discussion_r449797010", "bodyText": "I didn't change the assertions initially for two reasons:\n\n\nThis test is the only one that artificially reduces the REST request timeout from the usual 90 seconds to just 5 seconds; it seemed fairly unlikely that the distinction between \"any REST request is ready to be handled by the herder\" and \"all REST requests are ready to be handled by the herder\" would matter in any test that still uses the normal 90 second timeout. Herders not starting in 5 seconds isn't too surprising; herders not starting in 90 seconds is probably a sign of something going wrong.\n\n\nThe solution here, while valid for this test, is a little hacky. Issuing a request for info of a non-existent connector and waiting for the response status to transition from 500 to 404 works if you know that the connector doesn't exist, but not necessarily if you aren't certain that that connector shouldn't exist. We'd probably want to wait for the status to become either 404 (herder has completed startup and connector doesn't exist) or 200 (herder has completed startup and connector does exist) and use some obscure name like \"test-for-herder-startup\", but even then, it's possible that there may be unexpected side effects to these requests if they're used for all integration tests instead of just ones where the conditions are more controlled.\n\n\nLMK what you think; I'm willing to add this logic to the embedded cluster assertions if there's a case to be made for how it'd benefit more than just this test.", "author": "C0urante", "createdAt": "2020-07-04T18:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5MjY4OA==", "url": "https://github.com/apache/kafka/pull/8928#discussion_r450292688", "bodyText": "Should we just hit the endpoint that lists connectors to verify that the worker is ready to serve REST requests?\nThat's what we've been doing in system tests:\nhttps://github.com/apache/kafka/blob/trunk/tests/kafkatest/services/connect.py#L110\nGiven that this is a valid endpoint and doesn't need an artificial connector name seems less hacky and we could include this condition overall in the utils. Wdyt?", "author": "kkonstantine", "createdAt": "2020-07-06T15:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwODIwNw==", "url": "https://github.com/apache/kafka/pull/8928#discussion_r451008207", "bodyText": "That hits the in-memory config state and doesn't require a herder request, so the availability of that endpoint doesn't guarantee that the herder has finished startup unfortunately.", "author": "C0urante", "createdAt": "2020-07-07T16:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMjY1Nw==", "url": "https://github.com/apache/kafka/pull/8928#discussion_r451832657", "bodyText": "Interesting observation. Of course, hitting the leader with a request doesn't tell you that other workers have started, so that's applicable in tests like this one, which start only one worker here, etc. This doesn't seem to be a race condition we encounter often, so I'm fine with an ad hoc specific fix here given the reduced timeout. I'd be surprised if it took noticeable time to load the services after the herder is submitted to its executor.", "author": "kkonstantine", "createdAt": "2020-07-08T21:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NzQ0MQ=="}], "type": "inlineReview", "revised_code": null}]}