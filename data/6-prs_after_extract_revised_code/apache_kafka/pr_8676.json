{"pr_number": 8676, "pr_title": "KAFKA-10005: Decouple RestoreListener from RestoreCallback", "pr_createdAt": "2020-05-15T19:38:35Z", "pr_url": "https://github.com/apache/kafka/pull/8676", "timeline": [{"oid": "3e082c423f40e96b352916b775003011d616072c", "url": "https://github.com/apache/kafka/commit/3e082c423f40e96b352916b775003011d616072c", "message": "should trigger store specific callback if it is also a listener", "committedDate": "2020-05-15T00:42:27Z", "type": "commit"}, {"oid": "b5f42343c58c188f70a2cb95ea6aa2d69238220a", "url": "https://github.com/apache/kafka/commit/b5f42343c58c188f70a2cb95ea6aa2d69238220a", "message": "add unit tests; address comments", "committedDate": "2020-05-15T18:12:37Z", "type": "commit"}, {"oid": "575d975587531ee17769033b376d5247bafe38bc", "url": "https://github.com/apache/kafka/commit/575d975587531ee17769033b376d5247bafe38bc", "message": "remove unused imports", "committedDate": "2020-05-15T18:18:46Z", "type": "commit"}, {"oid": "b444b7c8cf1c0faa3bda45db56e5a3f01f667d30", "url": "https://github.com/apache/kafka/commit/b444b7c8cf1c0faa3bda45db56e5a3f01f667d30", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KXXX-remove-state-store-listener", "committedDate": "2020-05-15T18:30:25Z", "type": "commit"}, {"oid": "2aeb9cee81a8d38530932cb6b10e5d91ba08c69b", "url": "https://github.com/apache/kafka/commit/2aeb9cee81a8d38530932cb6b10e5d91ba08c69b", "message": "first pass", "committedDate": "2020-05-15T19:03:37Z", "type": "commit"}, {"oid": "f8a90e650be4000e28a579c5b3a60221f39018a5", "url": "https://github.com/apache/kafka/commit/f8a90e650be4000e28a579c5b3a60221f39018a5", "message": "further pass", "committedDate": "2020-05-15T19:18:22Z", "type": "commit"}, {"oid": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9", "url": "https://github.com/apache/kafka/commit/8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9", "message": "fix unit tests", "committedDate": "2020-05-15T19:36:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTU3OA==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426011578", "bodyText": "This field is not used anywhere in tests.", "author": "guozhangwang", "createdAt": "2020-05-15T19:42:53Z", "path": "streams/src/test/java/org/apache/kafka/test/MockStateRestoreListener.java", "diffHunk": "@@ -18,19 +18,15 @@\n package org.apache.kafka.test;\n \n import org.apache.kafka.common.TopicPartition;\n-import org.apache.kafka.streams.KeyValue;\n-import org.apache.kafka.streams.processor.AbstractNotifyingRestoreCallback;\n+import org.apache.kafka.streams.processor.StateRestoreListener;\n \n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n-public class MockStateRestoreListener extends AbstractNotifyingRestoreCallback {\n+public class MockStateRestoreListener implements StateRestoreListener {\n \n     // verifies store name called for each state\n     public final Map<String, String> storeNameCalledStates = new HashMap<>();\n-    public final List<KeyValue<byte[], byte[]>> restored = new ArrayList<>();", "originalCommit": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTk2OQ==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426011969", "bodyText": "This class is actually not used anywhere except unit tests: it is only a by-product of the coupling.", "author": "guozhangwang", "createdAt": "2020-05-15T19:43:43Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java", "diffHunk": "@@ -1,116 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more", "originalCommit": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMjI1Mw==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436212253", "bodyText": "awesome", "author": "vvcephei", "createdAt": "2020-06-06T00:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTk2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjI2OQ==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426012269", "bodyText": "Minor improvement such that any impls of the batching interface do not have to restore the per-entry restore func.", "author": "guozhangwang", "createdAt": "2020-05-15T19:44:28Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/BatchingStateRestoreCallback.java", "diffHunk": "@@ -38,4 +38,8 @@\n      */\n     void restoreAll(Collection<KeyValue<byte[], byte[]>> records);\n \n+    @Override\n+    default void restore(byte[] key, byte[] value) {", "originalCommit": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjg2MA==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426012860", "bodyText": "This mock can now be replaced by other existing ones.", "author": "guozhangwang", "createdAt": "2020-05-15T19:45:42Z", "path": "streams/src/test/java/org/apache/kafka/test/MockBatchingStateRestoreListener.java", "diffHunk": "@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.kafka.test;\n-\n-import org.apache.kafka.streams.KeyValue;\n-import org.apache.kafka.streams.processor.BatchingStateRestoreCallback;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-public class MockBatchingStateRestoreListener extends MockStateRestoreListener implements BatchingStateRestoreCallback {", "originalCommit": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "57ba780436babcac923bd68cbb83e59851ef7f34", "url": "https://github.com/apache/kafka/commit/57ba780436babcac923bd68cbb83e59851ef7f34", "message": "rebase from trunk", "committedDate": "2020-05-22T19:15:02Z", "type": "commit"}, {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd", "url": "https://github.com/apache/kafka/commit/54a527b4a07e0b71cb254aba1ba9ad0e68c584fd", "message": "rebase from trunk", "committedDate": "2020-06-05T21:39:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMTk3Mw==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436211973", "bodyText": "weird that the import became unused, even though there were no other code changes...", "author": "vvcephei", "createdAt": "2020-06-06T00:06:04Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -38,7 +38,6 @@\n import org.apache.kafka.streams.processor.internals.ProcessorNode;\n import org.apache.kafka.streams.processor.internals.SourceNode;\n import org.apache.kafka.streams.state.KeyValueStore;\n-import org.apache.kafka.streams.state.ReadOnlyKeyValueStore;", "originalCommit": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDY2Mg==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436240662", "bodyText": "They are used but only in javadocs; when I rebase from trunk checkstyle failed complaining about them, but when I rebased again it stopped complaining, so I guess there's some rules changed here. I will revert them back.", "author": "guozhangwang", "createdAt": "2020-06-06T05:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMTk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7dccc0f15bd970fc0650181e5341dace13ff327a", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java b/streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java\nindex 6534be2e73..60157c36e5 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java\n\n@@ -38,6 +38,7 @@ import org.apache.kafka.streams.processor.internals.InternalTopologyBuilder;\n import org.apache.kafka.streams.processor.internals.ProcessorNode;\n import org.apache.kafka.streams.processor.internals.SourceNode;\n import org.apache.kafka.streams.state.KeyValueStore;\n+import org.apache.kafka.streams.state.ReadOnlyKeyValueStore;\n import org.apache.kafka.streams.state.StoreBuilder;\n \n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzA1MA==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436213050", "bodyText": "It doesn't look like this was related to the bulk loading, but I'm guessing it was.", "author": "vvcephei", "createdAt": "2020-06-06T00:13:10Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java", "diffHunk": "@@ -210,30 +207,6 @@ public void shouldFindSingleStoreForChangelog() {\n         );\n     }\n \n-    @Test\n-    public void shouldRestoreStoreWithRestoreCallback() {", "originalCommit": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjE1Nw==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436242157", "bodyText": "Ah good catch, I should not remove this test; instead I'd just replace the removed MockBatchingStateRestoreListener with MockStateStoreCallback.", "author": "guozhangwang", "createdAt": "2020-06-06T06:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjUzMA==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436756530", "bodyText": "Thanks!", "author": "vvcephei", "createdAt": "2020-06-08T14:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "7dccc0f15bd970fc0650181e5341dace13ff327a", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java\nindex 5cb93a2a6a..77ed3a42c3 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java\n\n@@ -207,6 +209,30 @@ public class ProcessorStateManagerTest {\n         );\n     }\n \n+    @Test\n+    public void shouldRestoreStoreWithRestoreCallback() {\n+        final MockRestoreCallback restoreCallback = new MockRestoreCallback();\n+\n+        final KeyValue<byte[], byte[]> expectedKeyValue = KeyValue.pair(keyBytes, valueBytes);\n+\n+        final ProcessorStateManager stateMgr = getStateManager(Task.TaskType.ACTIVE);\n+\n+        try {\n+            stateMgr.registerStore(persistentStore, restoreCallback);\n+            final StateStoreMetadata storeMetadata = stateMgr.storeMetadata(persistentStorePartition);\n+            assertThat(storeMetadata, notNullValue());\n+\n+            stateMgr.restore(storeMetadata, singletonList(consumerRecord));\n+\n+            assertThat(restoreCallback.restored.size(), is(1));\n+            assertTrue(restoreCallback.restored.contains(expectedKeyValue));\n+\n+            assertEquals(Collections.singletonMap(persistentStorePartition, 101L), stateMgr.changelogOffsets());\n+        } finally {\n+            stateMgr.close();\n+        }\n+    }\n+\n     @Test\n     public void shouldRestoreNonTimestampedStoreWithNoConverter() {\n         final ProcessorStateManager stateMgr = getStateManager(Task.TaskType.ACTIVE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzQ3Mg==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436213472", "bodyText": "Were the bulk loading options a public interface? It doesn't seem like ignoring them would be a \"breakage\", so I don't think it hinders the removal, but it does seem worth documenting, and maybe trying to detect and warn?", "author": "vvcephei", "createdAt": "2020-06-06T00:15:49Z", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java", "diffHunk": "@@ -237,25 +236,6 @@ public void shouldNotRemoveStatisticsFromInjectedMetricsRecorderOnCloseWhenUserP\n         verify(metricsRecorder);\n     }\n \n-    @Test\n-    public void shouldRespectBulkloadOptionsDuringInit() {\n-        rocksDBStore.init(context, rocksDBStore);\n-\n-        final StateRestoreListener restoreListener = context.getRestoreListener(rocksDBStore.name());\n-\n-        restoreListener.onRestoreStart(null, rocksDBStore.name(), 0L, 0L);\n-\n-        assertThat(rocksDBStore.getOptions().level0FileNumCompactionTrigger(), equalTo(1 << 30));", "originalCommit": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MTQ5OA==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436241498", "bodyText": "Bulk loading was not a public interface, however we did have documents before about compounding listener and callback. Thinking about this, I will add a warn when detected that the registered callback is also a listener.", "author": "guozhangwang", "createdAt": "2020-06-06T05:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NTMzMg==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436755332", "bodyText": "Sounds good. I was thrown off by userSpecifiedOptions.prepareForBulkLoad() because it looks like the user could have specified some bulk loading options, but I took another look, and I see that that's just the variable name. The actual method is internal, and there's no way to configure bulk-loading options specifically as a user. So, I'm satisfied. Thanks!", "author": "vvcephei", "createdAt": "2020-06-08T14:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzQ3Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "60ea4bfafd1e68f65eca9f59dd999755c464a8ab", "url": "https://github.com/apache/kafka/commit/60ea4bfafd1e68f65eca9f59dd999755c464a8ab", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KXXX-remove-state-store-listener", "committedDate": "2020-06-06T05:28:54Z", "type": "commit"}, {"oid": "7dccc0f15bd970fc0650181e5341dace13ff327a", "url": "https://github.com/apache/kafka/commit/7dccc0f15bd970fc0650181e5341dace13ff327a", "message": "github comments", "committedDate": "2020-06-06T06:04:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjMxNQ==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436242315", "bodyText": "Updated the javadoc to emphasize one should not compound the two interfaces, cc @vvcephei .", "author": "guozhangwang", "createdAt": "2020-06-06T06:05:40Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java", "diffHunk": "@@ -29,9 +29,12 @@\n  * Users desiring stateful operations will need to provide synchronization internally in\n  * the {@code StateRestorerListener} implementation.\n  *\n- * When used for monitoring a single {@link StateStore} using either {@link AbstractNotifyingRestoreCallback} or\n- * {@link AbstractNotifyingBatchingRestoreCallback} no synchronization is necessary\n- * as each StreamThread has its own StateStore instance.\n+ * Note that this listener is only registered at the per-client level and users can base on the {@code storeName}", "originalCommit": "7dccc0f15bd970fc0650181e5341dace13ff327a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjEyNw==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436756127", "bodyText": "Thanks!", "author": "vvcephei", "createdAt": "2020-06-08T14:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjMxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjM0Ng==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436242346", "bodyText": "This is the warn log I added, lmk wdyt @vvcephei", "author": "guozhangwang", "createdAt": "2020-06-06T06:06:05Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorStateManager.java", "diffHunk": "@@ -303,6 +300,11 @@ public void registerStore(final StateStore store, final StateRestoreCallback sta\n             throw new IllegalArgumentException(format(\"%sStore %s has already been registered.\", logPrefix, storeName));\n         }\n \n+        if (stateRestoreCallback instanceof StateRestoreListener) {", "originalCommit": "7dccc0f15bd970fc0650181e5341dace13ff327a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1ODkxNg==", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436858916", "bodyText": "Nice, this was kind of an ugly hack to being with so I'm happy to see it go", "author": "ableegoldman", "createdAt": "2020-06-08T17:04:41Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ChangelogRegister.java", "diffHunk": "@@ -34,7 +34,6 @@\n     /**\n      * Unregisters and removes the passed in partitions from the set of changelogs\n      * @param removedPartitions the set of partitions to remove\n-     * @param triggerOnRestoreEnd whether to trigger the onRestoreEnd callback\n      */\n-    void unregister(final Collection<TopicPartition> removedPartitions, final boolean triggerOnRestoreEnd);\n+    void unregister(final Collection<TopicPartition> removedPartitions);", "originalCommit": "7dccc0f15bd970fc0650181e5341dace13ff327a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}