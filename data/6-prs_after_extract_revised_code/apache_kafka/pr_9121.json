{"pr_number": 9121, "pr_title": "KAFKA-10351: add tests for IOExceptions for GlobalStateManagerImpl/OffsetCheckpoint", "pr_createdAt": "2020-08-04T10:06:41Z", "pr_url": "https://github.com/apache/kafka/pull/9121", "timeline": [{"oid": "12c6987b1ca8529ea7c3cdfd81debd89e2abec8e", "url": "https://github.com/apache/kafka/commit/12c6987b1ca8529ea7c3cdfd81debd89e2abec8e", "message": "KAFKA-10351: add tests for IOExceptions for GlobalStateManagerImpl", "committedDate": "2020-08-04T10:01:43Z", "type": "commit"}, {"oid": "1249c2ff447c79ac4845e84cef28e4a26b230405", "url": "https://github.com/apache/kafka/commit/1249c2ff447c79ac4845e84cef28e4a26b230405", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-10351", "committedDate": "2020-08-19T03:12:43Z", "type": "commit"}, {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "url": "https://github.com/apache/kafka/commit/8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "message": "KAFKA-10351: update test case after merging the latest trunk", "committedDate": "2020-08-19T03:50:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NjkxMA==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474876910", "bodyText": "Subjective: Might be \"better\" to do the assertion after the try-block.", "author": "mjsax", "createdAt": "2020-08-21T19:08:29Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation\n+        file.setWritable(false);\n+\n+        try (final LogCaptureAppender appender =\n+                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n+\n+            // checkpoint should fail due to the file is readonly\n+            stateManager.checkpoint();\n+            assertThat(appender.getMessages(), hasItem(containsString(\n+                \"Failed to write offset checkpoint file to \" + checkpointFile.getPath() + \" for global stores\")));", "originalCommit": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MjMxNg==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r475362316", "bodyText": "I agree it'll be better to do the assertion after the try-block. But no, we can't move the assert out of the try-block because the appender is declared within try block. We can move the assert out of try-block if we don't use the try resource auto-close pattern, but I don't think it would be better.\nAlso, we assert within try-block for the appender tests in other places. I think they are all for the same reason as I mentioned above.\nThanks.", "author": "showuon", "createdAt": "2020-08-24T06:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NjkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNjIwNw==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r477606207", "bodyText": "Ah. Good point. We can leave as-is.", "author": "mjsax", "createdAt": "2020-08-26T21:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NjkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "12d3826a87a5b21033e2f81c6a486353e79d8591", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\nindex ba0de41dcf..afa381c6e5 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n\n@@ -189,15 +189,13 @@ public class GlobalStateManagerImplTest {\n         stateManager.initialize();\n         stateManager.updateChangelogOffsets(offsets);\n \n+        // set readonly to the CHECKPOINT_FILE_NAME.tmp file because we will write data to the .tmp file first\n+        // and then swap to CHECKPOINT_FILE_NAME by replacing it\n         final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n         file.createNewFile();\n-        // set the checkpoint tmp file to read-only to simulate the IOException situation\n         file.setWritable(false);\n \n-        try (final LogCaptureAppender appender =\n-                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n-\n-            // checkpoint should fail due to the file is readonly\n+        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n             stateManager.checkpoint();\n             assertThat(appender.getMessages(), hasItem(containsString(\n                 \"Failed to write offset checkpoint file to \" + checkpointFile.getPath() + \" for global stores\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzEwNQ==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877105", "bodyText": "Nit: no need to line-break", "author": "mjsax", "createdAt": "2020-08-21T19:08:53Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation\n+        file.setWritable(false);\n+\n+        try (final LogCaptureAppender appender =\n+                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {", "originalCommit": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12d3826a87a5b21033e2f81c6a486353e79d8591", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\nindex ba0de41dcf..afa381c6e5 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n\n@@ -189,15 +189,13 @@ public class GlobalStateManagerImplTest {\n         stateManager.initialize();\n         stateManager.updateChangelogOffsets(offsets);\n \n+        // set readonly to the CHECKPOINT_FILE_NAME.tmp file because we will write data to the .tmp file first\n+        // and then swap to CHECKPOINT_FILE_NAME by replacing it\n         final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n         file.createNewFile();\n-        // set the checkpoint tmp file to read-only to simulate the IOException situation\n         file.setWritable(false);\n \n-        try (final LogCaptureAppender appender =\n-                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n-\n-            // checkpoint should fail due to the file is readonly\n+        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n             stateManager.checkpoint();\n             assertThat(appender.getMessages(), hasItem(containsString(\n                 \"Failed to write offset checkpoint file to \" + checkpointFile.getPath() + \" for global stores\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzM1Mg==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877352", "bodyText": "The test seems to be self-explaining and thus we don't really need this comment", "author": "mjsax", "createdAt": "2020-08-21T19:09:25Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation", "originalCommit": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12d3826a87a5b21033e2f81c6a486353e79d8591", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\nindex ba0de41dcf..afa381c6e5 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n\n@@ -189,15 +189,13 @@ public class GlobalStateManagerImplTest {\n         stateManager.initialize();\n         stateManager.updateChangelogOffsets(offsets);\n \n+        // set readonly to the CHECKPOINT_FILE_NAME.tmp file because we will write data to the .tmp file first\n+        // and then swap to CHECKPOINT_FILE_NAME by replacing it\n         final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n         file.createNewFile();\n-        // set the checkpoint tmp file to read-only to simulate the IOException situation\n         file.setWritable(false);\n \n-        try (final LogCaptureAppender appender =\n-                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n-\n-            // checkpoint should fail due to the file is readonly\n+        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n             stateManager.checkpoint();\n             assertThat(appender.getMessages(), hasItem(containsString(\n                 \"Failed to write offset checkpoint file to \" + checkpointFile.getPath() + \" for global stores\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzQyOA==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877428", "bodyText": "Why do we need to add .tmp ?", "author": "mjsax", "createdAt": "2020-08-21T19:09:36Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");", "originalCommit": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5Mzc0Nw==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r475393747", "bodyText": "It's because we we will write data to the .tmp file first and then swap to the CHECKPOINT_FILE. And in the swap action, we use Files.move with ATOMIC_MOVE option, which will try to replace the target file if exists. I cannot create IOException with this case. I added comments for this line to explain the reason. Thank you.\nref: https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#move-java.nio.file.Path-java.nio.file.Path-java.nio.file.CopyOption...-", "author": "showuon", "createdAt": "2020-08-24T07:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNjI0MQ==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r477616241", "bodyText": "Interesting... Thanks for clarification.", "author": "mjsax", "createdAt": "2020-08-26T22:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "12d3826a87a5b21033e2f81c6a486353e79d8591", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\nindex ba0de41dcf..afa381c6e5 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n\n@@ -189,15 +189,13 @@ public class GlobalStateManagerImplTest {\n         stateManager.initialize();\n         stateManager.updateChangelogOffsets(offsets);\n \n+        // set readonly to the CHECKPOINT_FILE_NAME.tmp file because we will write data to the .tmp file first\n+        // and then swap to CHECKPOINT_FILE_NAME by replacing it\n         final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n         file.createNewFile();\n-        // set the checkpoint tmp file to read-only to simulate the IOException situation\n         file.setWritable(false);\n \n-        try (final LogCaptureAppender appender =\n-                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n-\n-            // checkpoint should fail due to the file is readonly\n+        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n             stateManager.checkpoint();\n             assertThat(appender.getMessages(), hasItem(containsString(\n                 \"Failed to write offset checkpoint file to \" + checkpointFile.getPath() + \" for global stores\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzUyNg==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877526", "bodyText": "as above; comment is not really needed", "author": "mjsax", "createdAt": "2020-08-21T19:09:51Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation\n+        file.setWritable(false);\n+\n+        try (final LogCaptureAppender appender =\n+                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n+\n+            // checkpoint should fail due to the file is readonly", "originalCommit": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12d3826a87a5b21033e2f81c6a486353e79d8591", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\nindex ba0de41dcf..afa381c6e5 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java\n\n@@ -189,15 +189,13 @@ public class GlobalStateManagerImplTest {\n         stateManager.initialize();\n         stateManager.updateChangelogOffsets(offsets);\n \n+        // set readonly to the CHECKPOINT_FILE_NAME.tmp file because we will write data to the .tmp file first\n+        // and then swap to CHECKPOINT_FILE_NAME by replacing it\n         final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n         file.createNewFile();\n-        // set the checkpoint tmp file to read-only to simulate the IOException situation\n         file.setWritable(false);\n \n-        try (final LogCaptureAppender appender =\n-                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n-\n-            // checkpoint should fail due to the file is readonly\n+        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n             stateManager.checkpoint();\n             assertThat(appender.getMessages(), hasItem(containsString(\n                 \"Failed to write offset checkpoint file to \" + checkpointFile.getPath() + \" for global stores\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzY4OQ==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877689", "bodyText": "nit: no need to line break", "author": "mjsax", "createdAt": "2020-08-21T19:10:11Z", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "diffHunk": "@@ -135,6 +136,20 @@ public void shouldThrowOnInvalidOffsetInWrite() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void shouldThrowIOExceptionWhenWritingToNotExistedFile() {\n+        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(\n+            new TopicPartition(topic, 0), 0L);", "originalCommit": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12d3826a87a5b21033e2f81c6a486353e79d8591", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java b/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java\nindex 6291b48477..dafc21a1a6 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java\n\n@@ -138,14 +138,11 @@ public class OffsetCheckpointTest {\n \n     @Test\n     public void shouldThrowIOExceptionWhenWritingToNotExistedFile() {\n-        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(\n-            new TopicPartition(topic, 0), 0L);\n+        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(new TopicPartition(topic, 0), 0L);\n \n-        // create a file with not existed path, and feed into OffsetCheckpoint\n         final File notExistedFile = new File(\"/not_existed_dir/not_existed_file\");\n         final OffsetCheckpoint checkpoint = new OffsetCheckpoint(notExistedFile);\n-\n-        // should throw IOException while writing the offset into the file\n+        \n         final IOException e = assertThrows(IOException.class, () -> checkpoint.write(offsetsToWrite));\n         assertThat(e.getMessage(), containsString(\"No such file or directory\"));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3ODM3NA==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474878374", "bodyText": "that the pass is \"not existing\" is already clear from File(\"not_existing_dir/not_existing_file\") and thus not necessary", "author": "mjsax", "createdAt": "2020-08-21T19:11:07Z", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "diffHunk": "@@ -135,6 +136,20 @@ public void shouldThrowOnInvalidOffsetInWrite() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void shouldThrowIOExceptionWhenWritingToNotExistedFile() {\n+        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(\n+            new TopicPartition(topic, 0), 0L);\n+\n+        // create a file with not existed path, and feed into OffsetCheckpoint", "originalCommit": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1ODY5Mg==", "url": "https://github.com/apache/kafka/pull/9121#discussion_r475358692", "bodyText": "agree!", "author": "showuon", "createdAt": "2020-08-24T05:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3ODM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "12d3826a87a5b21033e2f81c6a486353e79d8591", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java b/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java\nindex 6291b48477..dafc21a1a6 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java\n\n@@ -138,14 +138,11 @@ public class OffsetCheckpointTest {\n \n     @Test\n     public void shouldThrowIOExceptionWhenWritingToNotExistedFile() {\n-        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(\n-            new TopicPartition(topic, 0), 0L);\n+        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(new TopicPartition(topic, 0), 0L);\n \n-        // create a file with not existed path, and feed into OffsetCheckpoint\n         final File notExistedFile = new File(\"/not_existed_dir/not_existed_file\");\n         final OffsetCheckpoint checkpoint = new OffsetCheckpoint(notExistedFile);\n-\n-        // should throw IOException while writing the offset into the file\n+        \n         final IOException e = assertThrows(IOException.class, () -> checkpoint.write(offsetsToWrite));\n         assertThat(e.getMessage(), containsString(\"No such file or directory\"));\n     }\n"}}, {"oid": "12d3826a87a5b21033e2f81c6a486353e79d8591", "url": "https://github.com/apache/kafka/commit/12d3826a87a5b21033e2f81c6a486353e79d8591", "message": "KAFKA-10351: address reveiwer's comments to refactor tests", "committedDate": "2020-08-24T07:37:01Z", "type": "commit"}, {"oid": "12d3826a87a5b21033e2f81c6a486353e79d8591", "url": "https://github.com/apache/kafka/commit/12d3826a87a5b21033e2f81c6a486353e79d8591", "message": "KAFKA-10351: address reveiwer's comments to refactor tests", "committedDate": "2020-08-24T07:37:01Z", "type": "forcePushed"}, {"oid": "252cc9124c3ec76fb678a5d01755bd9c71e640ae", "url": "https://github.com/apache/kafka/commit/252cc9124c3ec76fb678a5d01755bd9c71e640ae", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-10351", "committedDate": "2020-09-03T08:39:46Z", "type": "commit"}]}