{"pr_number": 9485, "pr_title": "KAKFA-10619: Idempotent producer will get authorized once it has a WRITE access to at least one topic", "pr_createdAt": "2020-10-23T05:23:25Z", "pr_url": "https://github.com/apache/kafka/pull/9485", "timeline": [{"oid": "2c3065f2ead155ab488df38e0a7dd254120f7f30", "url": "https://github.com/apache/kafka/commit/2c3065f2ead155ab488df38e0a7dd254120f7f30", "message": "initial", "committedDate": "2020-10-23T05:22:15Z", "type": "commit"}, {"oid": "a91a5bc32f614b09c65cb416df4e23f73aa9dbe8", "url": "https://github.com/apache/kafka/commit/a91a5bc32f614b09c65cb416df4e23f73aa9dbe8", "message": "Added tests", "committedDate": "2020-10-27T01:53:44Z", "type": "commit"}, {"oid": "f85601011c482e32d103462734a4af358e2560b1", "url": "https://github.com/apache/kafka/commit/f85601011c482e32d103462734a4af358e2560b1", "message": "implement the interface default", "committedDate": "2020-10-28T06:17:28Z", "type": "commit"}, {"oid": "dc9fa33dea8d5764a1bdb20d62d9e160ce9f64ae", "url": "https://github.com/apache/kafka/commit/dc9fa33dea8d5764a1bdb20d62d9e160ce9f64ae", "message": "handle wildcard ace", "committedDate": "2020-10-28T08:45:19Z", "type": "commit"}, {"oid": "bcfe3532800108b8f33822432a01b45e2ceaec33", "url": "https://github.com/apache/kafka/commit/bcfe3532800108b8f33822432a01b45e2ceaec33", "message": "Fix authorizeAny deny on cluster", "committedDate": "2020-10-28T17:34:36Z", "type": "commit"}, {"oid": "05da2bd3eb0d7bd37fccf977a5215513c6974b29", "url": "https://github.com/apache/kafka/commit/05da2bd3eb0d7bd37fccf977a5215513c6974b29", "message": "Add more tests", "committedDate": "2020-10-29T00:58:29Z", "type": "commit"}, {"oid": "45dc8a212d6f71d22536c5d1e14f8a57d2b03014", "url": "https://github.com/apache/kafka/commit/45dc8a212d6f71d22536c5d1e14f8a57d2b03014", "message": "bug fix", "committedDate": "2020-10-29T01:00:18Z", "type": "commit"}, {"oid": "68dc6bf1713f62977f2b2cf0f47d50f1a720c00f", "url": "https://github.com/apache/kafka/commit/68dc6bf1713f62977f2b2cf0f47d50f1a720c00f", "message": "added tests for wildcard principle, host, and operation", "committedDate": "2020-10-29T05:06:20Z", "type": "commit"}, {"oid": "a886be27f7cb7488e899fa1c54477c83aa0fdef1", "url": "https://github.com/apache/kafka/commit/a886be27f7cb7488e899fa1c54477c83aa0fdef1", "message": "Support Wildcard ACES by default", "committedDate": "2020-11-03T01:18:55Z", "type": "commit"}, {"oid": "955c78d9331c0fa6ca752bc5f9e2b199b123ed2f", "url": "https://github.com/apache/kafka/commit/955c78d9331c0fa6ca752bc5f9e2b199b123ed2f", "message": "move the acl removal logic from @before to @after, in order to pass all the tests", "committedDate": "2020-11-03T01:28:12Z", "type": "commit"}, {"oid": "5c9feff96744804c543ecec370e60c4bd07708b0", "url": "https://github.com/apache/kafka/commit/5c9feff96744804c543ecec370e60c4bd07708b0", "message": "Implement the new API for AuthorizerWrapper", "committedDate": "2020-11-03T20:40:38Z", "type": "commit"}, {"oid": "ec900c3ed2e66bdbe17679fe8451d0badc439e8c", "url": "https://github.com/apache/kafka/commit/ec900c3ed2e66bdbe17679fe8451d0badc439e8c", "message": "refactor the test", "committedDate": "2020-11-03T20:42:04Z", "type": "commit"}, {"oid": "163f6cf54dde86679dab18cc4e003f879585d590", "url": "https://github.com/apache/kafka/commit/163f6cf54dde86679dab18cc4e003f879585d590", "message": "remove a) cluster special handling b) empty prefix check", "committedDate": "2020-11-03T23:46:28Z", "type": "commit"}, {"oid": "7b99fdce1987c0248353fa053b2d00254cf5827f", "url": "https://github.com/apache/kafka/commit/7b99fdce1987c0248353fa053b2d00254cf5827f", "message": "optimize the interface default, checking literals in the default instead of calling authorize", "committedDate": "2020-11-04T00:30:39Z", "type": "commit"}, {"oid": "b7f63fe1a2cfc122af5cd0d678ada4ed0fd0ff04", "url": "https://github.com/apache/kafka/commit/b7f63fe1a2cfc122af5cd0d678ada4ed0fd0ff04", "message": "rename the authorizeAny to authorizeByResourceType", "committedDate": "2020-11-04T20:09:02Z", "type": "commit"}, {"oid": "b28637e57c7c3779795cae48ffc851f7c7f99080", "url": "https://github.com/apache/kafka/commit/b28637e57c7c3779795cae48ffc851f7c7f99080", "message": "clean up AclAuthorizer", "committedDate": "2020-11-04T22:07:16Z", "type": "commit"}, {"oid": "594e35099c6af000503f99d1028375a3f2da0014", "url": "https://github.com/apache/kafka/commit/594e35099c6af000503f99d1028375a3f2da0014", "message": "added integration tests", "committedDate": "2020-11-07T10:08:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTQ3Mw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r526479473", "bodyText": "We should document what this default implementation does and why a custom implementation may want to override this default.", "author": "rajinisivaram", "createdAt": "2020-11-18T22:58:26Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +150,129 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.", "originalCommit": "594e35099c6af000503f99d1028375a3f2da0014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM0NjIxMw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r532346213", "bodyText": "Yes. Let's document this after we finally settle down all the implementations.", "author": "ctan888", "createdAt": "2020-11-30T04:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNTIxOQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r536305219", "bodyText": "commit 7af4a7f", "author": "ctan888", "createdAt": "2020-12-04T18:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "89df4d7600cad4e3785d0d95624d0918efce1f44", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 734ef9aa7e..ff5351fba1 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -199,7 +201,11 @@ public interface Authorizer extends Configurable, Closeable {\n                     && !binding.entry().host().equals(\"*\"))\n                 continue;\n \n-            if (!binding.entry().principal().equals(requestContext.principal().toString())\n+            KafkaPrincipal principal = new KafkaPrincipal(\n+                requestContext.principal().getPrincipalType(),\n+                requestContext.principal().getName());\n+\n+            if (!SecurityUtils.parseKafkaPrincipal(binding.entry().principal()).equals(principal)\n                     && !binding.entry().principal().equals(\"User:*\"))\n                 continue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTQ3OA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r526479478", "bodyText": "We should document what this default implementation does and why a custom implementation may want to override this default.", "author": "rajinisivaram", "createdAt": "2020-11-18T22:58:26Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +150,129 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.", "originalCommit": "594e35099c6af000503f99d1028375a3f2da0014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89df4d7600cad4e3785d0d95624d0918efce1f44", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 734ef9aa7e..ff5351fba1 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -199,7 +201,11 @@ public interface Authorizer extends Configurable, Closeable {\n                     && !binding.entry().host().equals(\"*\"))\n                 continue;\n \n-            if (!binding.entry().principal().equals(requestContext.principal().toString())\n+            KafkaPrincipal principal = new KafkaPrincipal(\n+                requestContext.principal().getPrincipalType(),\n+                requestContext.principal().getName());\n+\n+            if (!SecurityUtils.parseKafkaPrincipal(binding.entry().principal()).equals(principal)\n                     && !binding.entry().principal().equals(\"User:*\"))\n                 continue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MTU3Mw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r526481573", "bodyText": "nit: indentation", "author": "rajinisivaram", "createdAt": "2020-11-18T23:03:40Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +150,129 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        if (resourceType == ResourceType.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter resource type for authorizeByResourceType\");\n+        }\n+\n+        if (resourceType == ResourceType.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown resource type\");\n+        }\n+\n+        if (op == AclOperation.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter operation type for authorizeByResourceType\");\n+        }\n+\n+        if (op == AclOperation.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown operation type\");\n+        }\n+\n+        ResourcePatternFilter resourceTypeFilter = new ResourcePatternFilter(\n+            resourceType, null, PatternType.ANY);\n+        AclBindingFilter aclFilter = new AclBindingFilter(\n+            resourceTypeFilter, AccessControlEntryFilter.ANY);\n+\n+        Set<String> denyLiterals = new HashSet<>();\n+        Set<String> denyPrefixes = new HashSet<>();\n+        Set<String> allowLiterals = new HashSet<>();\n+        Set<String> allowPrefixes = new HashSet<>();\n+        boolean hasWildCardAllow = false;\n+\n+        for (AclBinding binding : acls(aclFilter)) {\n+            if (!binding.entry().host().equals(requestContext.clientAddress().getHostAddress())\n+                    && !binding.entry().host().equals(\"*\"))\n+                continue;\n+\n+            if (!binding.entry().principal().equals(requestContext.principal().toString())\n+                    && !binding.entry().principal().equals(\"User:*\"))\n+                continue;\n+\n+            if (binding.entry().operation() != op\n+                    && binding.entry().operation() != AclOperation.ALL)\n+                continue;\n+\n+            if (binding.entry().permissionType() == AclPermissionType.DENY) {\n+                switch (binding.pattern().patternType()) {\n+                    case LITERAL:\n+                        if (binding.pattern().name().equals(ResourcePattern.WILDCARD_RESOURCE))\n+                            return AuthorizationResult.DENIED;\n+                            denyLiterals.add(binding.pattern().name());", "originalCommit": "594e35099c6af000503f99d1028375a3f2da0014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89df4d7600cad4e3785d0d95624d0918efce1f44", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 734ef9aa7e..ff5351fba1 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -199,7 +201,11 @@ public interface Authorizer extends Configurable, Closeable {\n                     && !binding.entry().host().equals(\"*\"))\n                 continue;\n \n-            if (!binding.entry().principal().equals(requestContext.principal().toString())\n+            KafkaPrincipal principal = new KafkaPrincipal(\n+                requestContext.principal().getPrincipalType(),\n+                requestContext.principal().getName());\n+\n+            if (!SecurityUtils.parseKafkaPrincipal(binding.entry().principal()).equals(principal)\n                     && !binding.entry().principal().equals(\"User:*\"))\n                 continue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4Mjg5OQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r526482899", "bodyText": "This looks identical to the code block above for prefix, we could just run the same code in a loop that checks both allow literals and prefixes.", "author": "rajinisivaram", "createdAt": "2020-11-18T23:07:07Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +150,129 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        if (resourceType == ResourceType.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter resource type for authorizeByResourceType\");\n+        }\n+\n+        if (resourceType == ResourceType.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown resource type\");\n+        }\n+\n+        if (op == AclOperation.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter operation type for authorizeByResourceType\");\n+        }\n+\n+        if (op == AclOperation.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown operation type\");\n+        }\n+\n+        ResourcePatternFilter resourceTypeFilter = new ResourcePatternFilter(\n+            resourceType, null, PatternType.ANY);\n+        AclBindingFilter aclFilter = new AclBindingFilter(\n+            resourceTypeFilter, AccessControlEntryFilter.ANY);\n+\n+        Set<String> denyLiterals = new HashSet<>();\n+        Set<String> denyPrefixes = new HashSet<>();\n+        Set<String> allowLiterals = new HashSet<>();\n+        Set<String> allowPrefixes = new HashSet<>();\n+        boolean hasWildCardAllow = false;\n+\n+        for (AclBinding binding : acls(aclFilter)) {\n+            if (!binding.entry().host().equals(requestContext.clientAddress().getHostAddress())\n+                    && !binding.entry().host().equals(\"*\"))\n+                continue;\n+\n+            if (!binding.entry().principal().equals(requestContext.principal().toString())\n+                    && !binding.entry().principal().equals(\"User:*\"))\n+                continue;\n+\n+            if (binding.entry().operation() != op\n+                    && binding.entry().operation() != AclOperation.ALL)\n+                continue;\n+\n+            if (binding.entry().permissionType() == AclPermissionType.DENY) {\n+                switch (binding.pattern().patternType()) {\n+                    case LITERAL:\n+                        if (binding.pattern().name().equals(ResourcePattern.WILDCARD_RESOURCE))\n+                            return AuthorizationResult.DENIED;\n+                            denyLiterals.add(binding.pattern().name());\n+                        break;\n+                    case PREFIXED:\n+                        denyPrefixes.add(binding.pattern().name());\n+                        break;\n+                }\n+                continue;\n+            }\n+\n+            if (binding.entry().permissionType() != AclPermissionType.ALLOW)\n+                continue;\n+\n+            switch (binding.pattern().patternType()) {\n+                case LITERAL:\n+                    if (binding.pattern().name().equals(ResourcePattern.WILDCARD_RESOURCE)) {\n+                        hasWildCardAllow = true;\n+                        continue;\n+                    }\n+                    allowLiterals.add(binding.pattern().name());\n+                    break;\n+                case PREFIXED:\n+                    allowPrefixes.add(binding.pattern().name());\n+                    break;\n+            }\n+        }\n+\n+        if (hasWildCardAllow) {\n+            return AuthorizationResult.ALLOWED;\n+        }\n+\n+        for (String allowPrefix : allowPrefixes) {\n+            StringBuilder sb = new StringBuilder();\n+            boolean hasDominatedDeny = false;\n+            for (char ch : allowPrefix.toCharArray()) {\n+                sb.append(ch);\n+                if (denyPrefixes.contains(sb.toString())) {\n+                    hasDominatedDeny = true;\n+                    break;\n+                }\n+            }\n+            if (!hasDominatedDeny)\n+                return AuthorizationResult.ALLOWED;\n+        }\n+\n+        for (String allowLiteral : allowLiterals) {\n+            if (denyLiterals.contains(allowLiteral))\n+                continue;\n+            StringBuilder sb = new StringBuilder();\n+            boolean hasDominatedDeny = false;\n+            for (char ch : allowLiteral.toCharArray()) {", "originalCommit": "594e35099c6af000503f99d1028375a3f2da0014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAzMTA0Mw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r529031043", "bodyText": "Yes. Using an ArrayList to group allow-literals & allow-prefixes in order to deduplicate the logic using a loop\ncommit 188536a", "author": "ctan888", "createdAt": "2020-11-23T22:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4Mjg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "89df4d7600cad4e3785d0d95624d0918efce1f44", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 734ef9aa7e..ff5351fba1 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -199,7 +201,11 @@ public interface Authorizer extends Configurable, Closeable {\n                     && !binding.entry().host().equals(\"*\"))\n                 continue;\n \n-            if (!binding.entry().principal().equals(requestContext.principal().toString())\n+            KafkaPrincipal principal = new KafkaPrincipal(\n+                requestContext.principal().getPrincipalType(),\n+                requestContext.principal().getName());\n+\n+            if (!SecurityUtils.parseKafkaPrincipal(binding.entry().principal()).equals(principal)\n                     && !binding.entry().principal().equals(\"User:*\"))\n                 continue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NjAyOA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r526486028", "bodyText": "request.principal can be a custom extension of KafkaPrincipal, we cannot use toString for comparison", "author": "rajinisivaram", "createdAt": "2020-11-18T23:15:24Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +150,129 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        if (resourceType == ResourceType.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter resource type for authorizeByResourceType\");\n+        }\n+\n+        if (resourceType == ResourceType.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown resource type\");\n+        }\n+\n+        if (op == AclOperation.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter operation type for authorizeByResourceType\");\n+        }\n+\n+        if (op == AclOperation.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown operation type\");\n+        }\n+\n+        ResourcePatternFilter resourceTypeFilter = new ResourcePatternFilter(\n+            resourceType, null, PatternType.ANY);\n+        AclBindingFilter aclFilter = new AclBindingFilter(\n+            resourceTypeFilter, AccessControlEntryFilter.ANY);\n+\n+        Set<String> denyLiterals = new HashSet<>();\n+        Set<String> denyPrefixes = new HashSet<>();\n+        Set<String> allowLiterals = new HashSet<>();\n+        Set<String> allowPrefixes = new HashSet<>();\n+        boolean hasWildCardAllow = false;\n+\n+        for (AclBinding binding : acls(aclFilter)) {\n+            if (!binding.entry().host().equals(requestContext.clientAddress().getHostAddress())\n+                    && !binding.entry().host().equals(\"*\"))\n+                continue;\n+\n+            if (!binding.entry().principal().equals(requestContext.principal().toString())", "originalCommit": "594e35099c6af000503f99d1028375a3f2da0014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwODMwNw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r529008307", "bodyText": "Yeah, that's right. Construct a KafkaPrinciple instance with params referred from principal.getType() and getName()\ncommit 89df4d7", "author": "ctan888", "createdAt": "2020-11-23T21:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NjAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "89df4d7600cad4e3785d0d95624d0918efce1f44", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 734ef9aa7e..ff5351fba1 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -199,7 +201,11 @@ public interface Authorizer extends Configurable, Closeable {\n                     && !binding.entry().host().equals(\"*\"))\n                 continue;\n \n-            if (!binding.entry().principal().equals(requestContext.principal().toString())\n+            KafkaPrincipal principal = new KafkaPrincipal(\n+                requestContext.principal().getPrincipalType(),\n+                requestContext.principal().getName());\n+\n+            if (!SecurityUtils.parseKafkaPrincipal(binding.entry().principal()).equals(principal)\n                     && !binding.entry().principal().equals(\"User:*\"))\n                 continue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMDY4OA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r526500688", "bodyText": "Are we going to add tests here?", "author": "rajinisivaram", "createdAt": "2020-11-18T23:54:50Z", "path": "core/src/test/scala/unit/kafka/security/authorizer/AuthorizerInterfaceDefaultTest.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package unit.kafka.security.authorizer;\n+\n+public class AuthorizerInterfaceDefaultTest {", "originalCommit": "594e35099c6af000503f99d1028375a3f2da0014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM0Mzc1NA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r532343754", "bodyText": "No. I was going to but that would add tons of duplicated codes. So I added the interface default test logic into AclAuthorizerTest. File deleted.", "author": "ctan888", "createdAt": "2020-11-30T04:36:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMDY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b0aa305d8c043075ef0bb7b41d2c37e0072284c5", "chunk": "diff --git a/core/src/test/scala/unit/kafka/security/authorizer/AuthorizerInterfaceDefaultTest.java b/core/src/test/scala/unit/kafka/security/authorizer/AuthorizerInterfaceDefaultTest.java\ndeleted file mode 100644\nindex 439938bafa..0000000000\n--- a/core/src/test/scala/unit/kafka/security/authorizer/AuthorizerInterfaceDefaultTest.java\n+++ /dev/null\n\n@@ -1,4 +0,0 @@\n-package unit.kafka.security.authorizer;\n-\n-public class AuthorizerInterfaceDefaultTest {\n-}\n"}}, {"oid": "89df4d7600cad4e3785d0d95624d0918efce1f44", "url": "https://github.com/apache/kafka/commit/89df4d7600cad4e3785d0d95624d0918efce1f44", "message": "convert session principle to Kafka principle in case that the subclass override the toString() method", "committedDate": "2020-11-23T21:27:51Z", "type": "commit"}, {"oid": "188536ad8df13fc327008e59c9787ad2230a7186", "url": "https://github.com/apache/kafka/commit/188536ad8df13fc327008e59c9787ad2230a7186", "message": "Deduplicate allow literal & prefix's prefix checking logic in interface default", "committedDate": "2020-11-23T22:13:39Z", "type": "commit"}, {"oid": "3906f978e62255ff266f081bf646a4b3c6b896ad", "url": "https://github.com/apache/kafka/commit/3906f978e62255ff266f081bf646a4b3c6b896ad", "message": "enhance performance", "committedDate": "2020-11-24T00:43:26Z", "type": "commit"}, {"oid": "230ee36b9147a11d7ce299aa9fcbb590324faf68", "url": "https://github.com/apache/kafka/commit/230ee36b9147a11d7ce299aa9fcbb590324faf68", "message": "add the API to aclBenchmark", "committedDate": "2020-11-30T01:02:21Z", "type": "commit"}, {"oid": "230ee36b9147a11d7ce299aa9fcbb590324faf68", "url": "https://github.com/apache/kafka/commit/230ee36b9147a11d7ce299aa9fcbb590324faf68", "message": "add the API to aclBenchmark", "committedDate": "2020-11-30T01:02:21Z", "type": "forcePushed"}, {"oid": "254af37df5e2d6ec462e7b70497ceb655edea596", "url": "https://github.com/apache/kafka/commit/254af37df5e2d6ec462e7b70497ceb655edea596", "message": "optimize the API performance, add the audit log", "committedDate": "2020-11-30T04:02:17Z", "type": "commit"}, {"oid": "b0aa305d8c043075ef0bb7b41d2c37e0072284c5", "url": "https://github.com/apache/kafka/commit/b0aa305d8c043075ef0bb7b41d2c37e0072284c5", "message": "test changes", "committedDate": "2020-11-30T04:32:26Z", "type": "commit"}, {"oid": "4504b181bba4675fa8b8967e59860c6817c6e709", "url": "https://github.com/apache/kafka/commit/4504b181bba4675fa8b8967e59860c6817c6e709", "message": "resolve conflicts", "committedDate": "2020-11-30T04:46:11Z", "type": "commit"}, {"oid": "eb8acb6b0e6a62b3ea29ed22a112b7ee0b07a749", "url": "https://github.com/apache/kafka/commit/eb8acb6b0e6a62b3ea29ed22a112b7ee0b07a749", "message": "fix checkstyle", "committedDate": "2020-11-30T20:39:52Z", "type": "commit"}, {"oid": "f9979f3681e1c6374cb693b17f8440d874169ef5", "url": "https://github.com/apache/kafka/commit/f9979f3681e1c6374cb693b17f8440d874169ef5", "message": "fix syntax err", "committedDate": "2020-12-01T17:07:30Z", "type": "commit"}, {"oid": "f9979f3681e1c6374cb693b17f8440d874169ef5", "url": "https://github.com/apache/kafka/commit/f9979f3681e1c6374cb693b17f8440d874169ef5", "message": "fix syntax err", "committedDate": "2020-12-01T17:07:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMDk3MQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r533720971", "bodyText": "I am not sure why we would make this change. If we need the change because we have become slower, we need to understand why.", "author": "rajinisivaram", "createdAt": "2020-12-01T21:05:42Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -69,33 +70,39 @@\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"10000\", \"50000\", \"200000\"})\n+    @Param({\"10000\", \"40000\", \"80000\"})", "originalCommit": "f9979f3681e1c6374cb693b17f8440d874169ef5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2NTkwOQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r533765909", "bodyText": "The underlying algorithm of AuthorizeByResourceType() implementation in AclAuthorizer has several characteristics:\n\nIf any \"allow resource\" of the given ACE does not have a dominant \"deny resource\", the API will return immediately\nThe complexity is O(n*m) where n is the number of \"allow resources\" of the given ACE, 'm' is the number of \"deny resources\" of the given ACE, but not related to the number of \"ACE\" in the cluster.\n\n$1 means that, given an ACE,  suppose p% of its \"allow resource\" does not have a dominant \"deny resource\", if resourceCount is r, on average, after checking r * p * 0.01 \"allow resources\", the API will return.\na) if we are let the \"dominant deny resource\" distribute evenly, like use the (loop index % something) to determine which \"allow resource\" should have a dominant \"deny resource\", we end up iterating the same amount of the \"allow resource\" and returning from the API call every time, which is r*p*0.01\nb) if we are determine which \"allow resource\" should have a dominant \"deny resource\", the result will be too noisy. We may iterate only 1 resource or iterate all resources based on the randomize algorithm and seed.\n$2 means that, the API time cost is not related to the number of \"ACE\" but is hyperbolically increasing when resourceCount is increasing. Under the assumption in (1), the actual complexity would be (r * r * p * 0.01)\nAs a result, we should get an insight into how long does the worst case takes, as t.  Then we can estimate some reasonable values of p and then estimate the API cost by t * p.\nSo I was directly testing the worst case, where p = 1, which means 100% of the \"allow resource\" will have a dominant \"deny resource. The complexity hence would be (r^2). It's rare that a cluster can have 200k \"allow resources\" and 200k corresponding \"dominant deny resources\" for each user, and it's not fair to have a relatively smaller aclCount and huger resourceCount, as the API is optimizing the performance by indexing on ACE.", "author": "ctan888", "createdAt": "2020-12-01T22:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMDk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3NzYzMQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r534477631", "bodyText": "I just realized that, in order to check the dominant denies, my AclAuthorizer implementation is calling String::startWith which also has an O(d) complexity where d is the length of the \"deny pattern\" string of the given ACL. So the complexity would be O(n * m * d).\nSo given all \"allow pattern\" and \"deny pattern\" of a given ACE, we have 2 algorithms now\n\nIterate through all the prefixes of the allow pattern string and check if any prefix is contained in the set of deny pattern, which has a complexity of O(n * a), where a is the length of the \"allow pattern\" string. My interface default is using this approach.\nIterate through all the \"deny patterns\", which has a complexity of O(n * m * d), where d is the length of the deny pattern string. My AclAuthorizer is using this approach.\n\nComparasion: Since the average of the allow pattern string length should be close to that of the deny pattern, we can say a = d. So O(n * a) = O(n * d) > O(n * m * d), which means approach 1 is much better.\nConclusion: I'll change AclAuthorizer to use approach 1.", "author": "ctan888", "createdAt": "2020-12-02T20:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMDk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "dcdc415dce0bfe98754a887d635e4e4681df2c71", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 492b0210ef..4c9d5825ac 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -70,7 +71,7 @@ import java.util.concurrent.TimeUnit;\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"10000\", \"40000\", \"80000\"})\n+    @Param({\"10000\", \"50000\", \"200000\"})\n     private int resourceCount;\n     //no. of. rules per resource\n     @Param({\"20\", \"100\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMjM0OQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r533722349", "bodyText": "spelling: principal", "author": "rajinisivaram", "createdAt": "2020-12-01T21:08:29Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -115,45 +122,62 @@ private void setFieldValue(Object obj, String fieldName, Object value) throws Ex\n \n             Set<AclEntry> entries = aclEntries.computeIfAbsent(resource, k -> new HashSet<>());\n \n-            for (int aclId = 0; aclId < aclCount; aclId++) {\n-                AccessControlEntry ace = new AccessControlEntry(principal.toString() + aclId,\n-                    \"*\", AclOperation.READ, AclPermissionType.ALLOW);\n-                entries.add(new AclEntry(ace));\n+            for (int aclId = 0; aclId < aclCount / 2; aclId++) {\n+                String acePrinciple = principal.toString() + (aclId == 0 ? \"\" : aclId);\n+                AccessControlEntry allowAce = new AccessControlEntry(\n+                    acePrinciple,", "originalCommit": "f9979f3681e1c6374cb693b17f8440d874169ef5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyMjUyNg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r533922526", "bodyText": "commit 6ab95d3", "author": "ctan888", "createdAt": "2020-12-02T06:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMjM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ab95d3668b3de27a7f6f58fc171a1e2e8925f69", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 492b0210ef..0f9eb3f167 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -123,12 +123,12 @@ public class AclAuthorizerBenchmark {\n             Set<AclEntry> entries = aclEntries.computeIfAbsent(resource, k -> new HashSet<>());\n \n             for (int aclId = 0; aclId < aclCount / 2; aclId++) {\n-                String acePrinciple = principal.toString() + (aclId == 0 ? \"\" : aclId);\n+                String acePrincipal = principal.toString() + (aclId == 0 ? \"\" : aclId);\n                 AccessControlEntry allowAce = new AccessControlEntry(\n-                    acePrinciple,\n+                    acePrincipal,\n                     \"*\", AclOperation.WRITE, AclPermissionType.ALLOW);\n                 AccessControlEntry denyAce = new AccessControlEntry(\n-                    acePrinciple,\n+                    acePrincipal,\n                     \"*\", AclOperation.WRITE, AclPermissionType.DENY);\n                 entries.add(new AclEntry(allowAce));\n                 // dominantly deny all the literal resource\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMzgzNg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r533723836", "bodyText": "We probably want to retain the old benchmark as-is and add a different one for authorizeByResourceType. We were testing a common pattern before, but now we seem to be testing a very unlikely scenario. While this may be useful for testing authorizeByResourceType, it is not what we want for regression testing the authorizer.", "author": "rajinisivaram", "createdAt": "2020-12-01T21:11:24Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -115,45 +122,62 @@ private void setFieldValue(Object obj, String fieldName, Object value) throws Ex\n \n             Set<AclEntry> entries = aclEntries.computeIfAbsent(resource, k -> new HashSet<>());\n \n-            for (int aclId = 0; aclId < aclCount; aclId++) {\n-                AccessControlEntry ace = new AccessControlEntry(principal.toString() + aclId,\n-                    \"*\", AclOperation.READ, AclPermissionType.ALLOW);\n-                entries.add(new AclEntry(ace));\n+            for (int aclId = 0; aclId < aclCount / 2; aclId++) {\n+                String acePrinciple = principal.toString() + (aclId == 0 ? \"\" : aclId);\n+                AccessControlEntry allowAce = new AccessControlEntry(\n+                    acePrinciple,\n+                    \"*\", AclOperation.WRITE, AclPermissionType.ALLOW);\n+                AccessControlEntry denyAce = new AccessControlEntry(\n+                    acePrinciple,\n+                    \"*\", AclOperation.WRITE, AclPermissionType.DENY);", "originalCommit": "f9979f3681e1c6374cb693b17f8440d874169ef5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MzgxNw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r534763817", "bodyText": "I think adding some dominant denies won't change the performance pattern of AclAuthorizer::acls and AclAuthorizer::authorize.\n\nAclAuthorizer::acls just return all the matching acls by the filter rule.  The portion btw \"allow\" and \"deny\" resources doesn't matter.\nAclAuthorizer::authorize will iterate the and filter out the allow and deny ACEs respectively. Since it's using ResourcePattern as its indexing method, the portion btw \"allow\" and \"deny\" resources doesn't matter as well.", "author": "ctan888", "createdAt": "2020-12-03T06:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMzgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6ab95d3668b3de27a7f6f58fc171a1e2e8925f69", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 492b0210ef..0f9eb3f167 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -123,12 +123,12 @@ public class AclAuthorizerBenchmark {\n             Set<AclEntry> entries = aclEntries.computeIfAbsent(resource, k -> new HashSet<>());\n \n             for (int aclId = 0; aclId < aclCount / 2; aclId++) {\n-                String acePrinciple = principal.toString() + (aclId == 0 ? \"\" : aclId);\n+                String acePrincipal = principal.toString() + (aclId == 0 ? \"\" : aclId);\n                 AccessControlEntry allowAce = new AccessControlEntry(\n-                    acePrinciple,\n+                    acePrincipal,\n                     \"*\", AclOperation.WRITE, AclPermissionType.ALLOW);\n                 AccessControlEntry denyAce = new AccessControlEntry(\n-                    acePrinciple,\n+                    acePrincipal,\n                     \"*\", AclOperation.WRITE, AclPermissionType.DENY);\n                 entries.add(new AclEntry(allowAce));\n                 // dominantly deny all the literal resource\n"}}, {"oid": "1a139ce744a279e4424188008ee5158186b0fcbe", "url": "https://github.com/apache/kafka/commit/1a139ce744a279e4424188008ee5158186b0fcbe", "message": "Use EnumMap for looping in interface default", "committedDate": "2020-12-02T05:56:34Z", "type": "commit"}, {"oid": "29ac8628089ddf1210072bbf52e01a41e123a718", "url": "https://github.com/apache/kafka/commit/29ac8628089ddf1210072bbf52e01a41e123a718", "message": "interface default NIT", "committedDate": "2020-12-02T06:02:58Z", "type": "commit"}, {"oid": "f6d2a39706998160ebe77a854b8bf64268eec68a", "url": "https://github.com/apache/kafka/commit/f6d2a39706998160ebe77a854b8bf64268eec68a", "message": "move checkArgs to SecurityUtils", "committedDate": "2020-12-02T06:09:40Z", "type": "commit"}, {"oid": "f6d2a39706998160ebe77a854b8bf64268eec68a", "url": "https://github.com/apache/kafka/commit/f6d2a39706998160ebe77a854b8bf64268eec68a", "message": "move checkArgs to SecurityUtils", "committedDate": "2020-12-02T06:09:40Z", "type": "forcePushed"}, {"oid": "6ab95d3668b3de27a7f6f58fc171a1e2e8925f69", "url": "https://github.com/apache/kafka/commit/6ab95d3668b3de27a7f6f58fc171a1e2e8925f69", "message": "Change typo principle to principal", "committedDate": "2020-12-02T06:19:20Z", "type": "commit"}, {"oid": "cebbbd47a8e7d318e327e3a279072c718b535abd", "url": "https://github.com/apache/kafka/commit/cebbbd47a8e7d318e327e3a279072c718b535abd", "message": "preserve the audit log format", "committedDate": "2020-12-02T20:04:41Z", "type": "commit"}, {"oid": "18c5c04ad4d8c98dc3cdaa6d15bf70b9991a6b88", "url": "https://github.com/apache/kafka/commit/18c5c04ad4d8c98dc3cdaa6d15bf70b9991a6b88", "message": "return directly if denyAll in AuthorizerWrapper", "committedDate": "2020-12-03T01:05:31Z", "type": "commit"}, {"oid": "30899c45ac50b70625baa2e5f12f58cfe9d79404", "url": "https://github.com/apache/kafka/commit/30899c45ac50b70625baa2e5f12f58cfe9d79404", "message": "Optimize the AuthorizerWrapper", "committedDate": "2020-12-03T03:17:50Z", "type": "commit"}, {"oid": "30899c45ac50b70625baa2e5f12f58cfe9d79404", "url": "https://github.com/apache/kafka/commit/30899c45ac50b70625baa2e5f12f58cfe9d79404", "message": "Optimize the AuthorizerWrapper", "committedDate": "2020-12-03T03:17:50Z", "type": "forcePushed"}, {"oid": "6c550fd04a0c1912e669bf18d60dee27dd03e53c", "url": "https://github.com/apache/kafka/commit/6c550fd04a0c1912e669bf18d60dee27dd03e53c", "message": "seperate the interfac default tests", "committedDate": "2020-12-03T09:11:14Z", "type": "commit"}, {"oid": "dcdc415dce0bfe98754a887d635e4e4681df2c71", "url": "https://github.com/apache/kafka/commit/dcdc415dce0bfe98754a887d635e4e4681df2c71", "message": "Add resourceIndex to further optimize the perf", "committedDate": "2020-12-04T03:24:29Z", "type": "commit"}, {"oid": "dcdc415dce0bfe98754a887d635e4e4681df2c71", "url": "https://github.com/apache/kafka/commit/dcdc415dce0bfe98754a887d635e4e4681df2c71", "message": "Add resourceIndex to further optimize the perf", "committedDate": "2020-12-04T03:24:29Z", "type": "forcePushed"}, {"oid": "7af4a7ff7ed2dddc06cf11ab7ff2d4b9fee5fb56", "url": "https://github.com/apache/kafka/commit/7af4a7ff7ed2dddc06cf11ab7ff2d4b9fee5fb56", "message": "add description in interface default, and rename the MockAuthorizer to DelegateAuthorizer", "committedDate": "2020-12-04T18:46:31Z", "type": "commit"}, {"oid": "331cd13887dd1238211c48c13ccc734d0a05483b", "url": "https://github.com/apache/kafka/commit/331cd13887dd1238211c48c13ccc734d0a05483b", "message": "fix checkstyle", "committedDate": "2020-12-04T19:17:53Z", "type": "commit"}, {"oid": "957f3b212f8471ef208490d7ed9e996f5b94eed5", "url": "https://github.com/apache/kafka/commit/957f3b212f8471ef208490d7ed9e996f5b94eed5", "message": "add benchmark for updateCache", "committedDate": "2020-12-04T23:29:15Z", "type": "forcePushed"}, {"oid": "5c79a1a075ec008a640f71513adf29eddfd46f12", "url": "https://github.com/apache/kafka/commit/5c79a1a075ec008a640f71513adf29eddfd46f12", "message": "add benchmark for updateCache", "committedDate": "2020-12-07T16:27:09Z", "type": "commit"}, {"oid": "5c79a1a075ec008a640f71513adf29eddfd46f12", "url": "https://github.com/apache/kafka/commit/5c79a1a075ec008a640f71513adf29eddfd46f12", "message": "add benchmark for updateCache", "committedDate": "2020-12-07T16:27:09Z", "type": "forcePushed"}, {"oid": "031c2f41e6611df3d18ef9b709c7d98c91b93326", "url": "https://github.com/apache/kafka/commit/031c2f41e6611df3d18ef9b709c7d98c91b93326", "message": "fix Api issue", "committedDate": "2020-12-07T16:45:43Z", "type": "commit"}, {"oid": "a591ef42912d5ce59eb18ec45ed8b95901b72a88", "url": "https://github.com/apache/kafka/commit/a591ef42912d5ce59eb18ec45ed8b95901b72a88", "message": "add deny percentage to jmh-benchmark", "committedDate": "2020-12-08T09:39:19Z", "type": "commit"}, {"oid": "a591ef42912d5ce59eb18ec45ed8b95901b72a88", "url": "https://github.com/apache/kafka/commit/a591ef42912d5ce59eb18ec45ed8b95901b72a88", "message": "add deny percentage to jmh-benchmark", "committedDate": "2020-12-08T09:39:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMjE3Mw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538522173", "bodyText": "nit, unnecessary whitespace in i++.", "author": "lbradstreet", "createdAt": "2020-12-08T15:49:08Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -164,4 +206,28 @@ public void testAclsIterator() {\n     public void testAuthorizer() {\n         aclAuthorizer.authorize(context, actions);\n     }\n+\n+    @Benchmark\n+    public void testAuthorizeByResourceType() {\n+        aclAuthorizer.authorizeByResourceType(context, AclOperation.WRITE, ResourceType.TOPIC);\n+    }\n+\n+    @Benchmark\n+    public void testUpdateCache() {\n+        AclAuthorizer aclAuthorizer = new AclAuthorizer();\n+        scala.collection.mutable.Set<AclEntry> entries = new scala.collection.mutable.HashSet<>();\n+        for (int i = 0; i < resourceCount; i ++){", "originalCommit": "a591ef42912d5ce59eb18ec45ed8b95901b72a88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2ODU1NA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538768554", "bodyText": "Thanks. Fixed.", "author": "ctan888", "createdAt": "2020-12-08T20:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMjE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 0e6aa73f4a..13339386fb 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -216,7 +216,7 @@ public class AclAuthorizerBenchmark {\n     public void testUpdateCache() {\n         AclAuthorizer aclAuthorizer = new AclAuthorizer();\n         scala.collection.mutable.Set<AclEntry> entries = new scala.collection.mutable.HashSet<>();\n-        for (int i = 0; i < resourceCount; i ++){\n+        for (int i = 0; i < resourceCount; i++) {\n             scala.collection.immutable.Set<AclEntry> immutable = new scala.collection.immutable.HashSet<>();\n             for (int j = 0; j < aclCount; j++) {\n                 entries.add(new AclEntry(new AccessControlEntry(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyNDExNw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538524117", "bodyText": "I think it's useful to understand how the cache performs at smaller sizes as well as larger sizes. Is there a reason we went with a fixed size and fixed number of resources now?", "author": "lbradstreet", "createdAt": "2020-12-08T15:50:45Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -69,33 +73,44 @@\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"10000\", \"50000\", \"200000\"})\n+    @Param({\"200000\"})", "originalCommit": "a591ef42912d5ce59eb18ec45ed8b95901b72a88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMzc2OQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538613769", "bodyText": "Oh, I'm just demonstrating the chart 3 I uploaded. I'll change them back.", "author": "ctan888", "createdAt": "2020-12-08T17:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyNDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzMjQyNg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539632426", "bodyText": "looks like this hasn't been reverted?", "author": "rajinisivaram", "createdAt": "2020-12-09T20:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyNDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwNjY0OA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r541206648", "bodyText": "Yes", "author": "ctan888", "createdAt": "2020-12-11T19:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyNDExNw=="}], "type": "inlineReview", "revised_code": {"commit": "b90763947d4d7d6a3f42e12a7a440a7a212a73de", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 0e6aa73f4a..6c4c0c5d17 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -73,19 +72,16 @@ import java.util.concurrent.TimeUnit;\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"200000\"})\n+    @Param({\"10000\", \"50000\", \"200000\"})\n     private int resourceCount;\n     //no. of. rules per resource\n-    @Param({\"50\"})\n+    @Param({\"10\", \"50\"})\n     private int aclCount;\n \n     @Param({\"0\", \"20\", \"50\", \"90\", \"99\", \"99.9\", \"99.99\", \"100\"})\n     private double denyPercentage;\n \n-    private final int hostPreCount = 1000;\n     private final String resourceNamePrefix = \"foo-bar35_resource-\";\n-    private final String resourceName = resourceNamePrefix + 95;\n-\n     private final AclAuthorizer aclAuthorizer = new AclAuthorizer();\n     private final KafkaPrincipal principal = new KafkaPrincipal(KafkaPrincipal.USER_TYPE, \"test-user\");\n     private List<Action> actions = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyODAxNQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538528015", "bodyText": "It might be better for the purpose of this microbenchmark to setup the cache with the desired size ahead of the time and then measure the time to update the cache with one entry. Otherwise you risk measuring a lot of the setup costs rather than the cost of the typical usage.", "author": "lbradstreet", "createdAt": "2020-12-08T15:54:15Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -164,4 +206,28 @@ public void testAclsIterator() {\n     public void testAuthorizer() {\n         aclAuthorizer.authorize(context, actions);\n     }\n+\n+    @Benchmark\n+    public void testAuthorizeByResourceType() {\n+        aclAuthorizer.authorizeByResourceType(context, AclOperation.WRITE, ResourceType.TOPIC);\n+    }\n+\n+    @Benchmark\n+    public void testUpdateCache() {\n+        AclAuthorizer aclAuthorizer = new AclAuthorizer();\n+        scala.collection.mutable.Set<AclEntry> entries = new scala.collection.mutable.HashSet<>();\n+        for (int i = 0; i < resourceCount; i ++){\n+            scala.collection.immutable.Set<AclEntry> immutable = new scala.collection.immutable.HashSet<>();\n+            for (int j = 0; j < aclCount; j++) {\n+                entries.add(new AclEntry(new AccessControlEntry(\n+                    principal.toString(), \"127.0.0\" + j, AclOperation.WRITE, AclPermissionType.ALLOW)));\n+                immutable = entries.toSet();\n+            }\n+            aclAuthorizer.updateCache(", "originalCommit": "a591ef42912d5ce59eb18ec45ed8b95901b72a88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxODE0OQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538618149", "bodyText": "@rajinisivaram Do you think we'll keep this testUpdateCache and merge it into trunk? If so, let's setup the cache ahead of time. But I think this benchmark is mainly for comparing the trunk with my branch, which means that we probably won't merge this testUpdateCache into master, which also means the same procedure constructing some memory records are acceptable since we are taking the time cost difference.", "author": "ctan888", "createdAt": "2020-12-08T17:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyODAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzODg3Mg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539638872", "bodyText": "It makes sense to merge the benchmarks to trunk. Let's make sure it measures just updateCache.", "author": "rajinisivaram", "createdAt": "2020-12-09T20:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyODAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNzI4Nw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539737287", "bodyText": "Sure", "author": "ctan888", "createdAt": "2020-12-09T23:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyODAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 0e6aa73f4a..13339386fb 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -216,7 +216,7 @@ public class AclAuthorizerBenchmark {\n     public void testUpdateCache() {\n         AclAuthorizer aclAuthorizer = new AclAuthorizer();\n         scala.collection.mutable.Set<AclEntry> entries = new scala.collection.mutable.HashSet<>();\n-        for (int i = 0; i < resourceCount; i ++){\n+        for (int i = 0; i < resourceCount; i++) {\n             scala.collection.immutable.Set<AclEntry> immutable = new scala.collection.immutable.HashSet<>();\n             for (int j = 0; j < aclCount; j++) {\n                 entries.add(new AclEntry(new AccessControlEntry(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1Mzg1MQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538553851", "bodyText": "If you take an async profile of this benchmark method you end up spending most of the time in building the entries and immutable set, and barely any time on AclAuthorizer#updateCache.", "author": "lbradstreet", "createdAt": "2020-12-08T16:16:33Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -164,4 +206,28 @@ public void testAclsIterator() {\n     public void testAuthorizer() {\n         aclAuthorizer.authorize(context, actions);\n     }\n+\n+    @Benchmark\n+    public void testAuthorizeByResourceType() {\n+        aclAuthorizer.authorizeByResourceType(context, AclOperation.WRITE, ResourceType.TOPIC);\n+    }\n+\n+    @Benchmark\n+    public void testUpdateCache() {", "originalCommit": "a591ef42912d5ce59eb18ec45ed8b95901b72a88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxODgxNw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r538618817", "bodyText": "Yeah. Agree. Let's see what @rajinisivaram think about the above discussion", "author": "ctan888", "createdAt": "2020-12-08T17:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1Mzg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 0e6aa73f4a..13339386fb 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -216,7 +216,7 @@ public class AclAuthorizerBenchmark {\n     public void testUpdateCache() {\n         AclAuthorizer aclAuthorizer = new AclAuthorizer();\n         scala.collection.mutable.Set<AclEntry> entries = new scala.collection.mutable.HashSet<>();\n-        for (int i = 0; i < resourceCount; i ++){\n+        for (int i = 0; i < resourceCount; i++) {\n             scala.collection.immutable.Set<AclEntry> immutable = new scala.collection.immutable.HashSet<>();\n             for (int j = 0; j < aclCount; j++) {\n                 entries.add(new AclEntry(new AccessControlEntry(\n"}}, {"oid": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "url": "https://github.com/apache/kafka/commit/40c0cad01590e137eac4ad1bb859f3d97b62a245", "message": "checkstyle & NIT", "committedDate": "2020-12-08T20:03:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NDM4Mg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539594382", "bodyText": "This package is part of the public API, but the class looks like it should be internal?", "author": "rajinisivaram", "createdAt": "2020-12-09T19:42:17Z", "path": "clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.acl;", "originalCommit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczMDg4NA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539730884", "bodyText": "Shall we make the class constructor package-private or make this class an inner class of AclAuthorizer?", "author": "ctan888", "createdAt": "2020-12-09T23:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc5MDUxMA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r542790510", "bodyText": "We have to move the class outside of the public package, so putting it alongside AclAuthorizer makes sense.", "author": "rajinisivaram", "createdAt": "2020-12-14T21:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNDU2Mw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r543814563", "bodyText": "Make ResourceTypeKey an inner class of AclAuthorizer\ncommit 7fe92c6", "author": "ctan888", "createdAt": "2020-12-16T01:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NDM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7fe92c6436432760adf9465c3f0bcf3c91104b10", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java b/clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java\ndeleted file mode 100644\nindex d055012ea1..0000000000\n--- a/clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.kafka.common.acl;\n-\n-import org.apache.kafka.common.resource.PatternType;\n-import org.apache.kafka.common.resource.ResourceType;\n-\n-import java.util.Objects;\n-\n-public class ResourceIndex {\n-    private final AccessControlEntry ace;\n-    private final ResourceType rtype;\n-    private final PatternType ptype;\n-\n-    public ResourceIndex(AccessControlEntry ace,\n-                         ResourceType rtype,\n-                         PatternType ptype) {\n-        this.ace = ace;\n-        this.rtype = rtype;\n-        this.ptype = ptype;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-        ResourceIndex that = (ResourceIndex) o;\n-        return ace.equals(that.ace) &&\n-            rtype == that.rtype &&\n-            ptype == that.ptype;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(ace, rtype, ptype);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"ResourceIndex{\" +\n-            \"ace=\" + ace +\n-            \", rtype=\" + rtype +\n-            \", ptype=\" + ptype +\n-            '}';\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTU4NA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539595584", "bodyText": "Perhaps ResourceAclEntry or something along those lines would be better than ResourceIndex since this class has no notion of index.", "author": "rajinisivaram", "createdAt": "2020-12-09T19:44:19Z", "path": "clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.acl;\n+\n+import org.apache.kafka.common.resource.PatternType;\n+import org.apache.kafka.common.resource.ResourceType;\n+\n+import java.util.Objects;\n+\n+public class ResourceIndex {", "originalCommit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNDMxNQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539734315", "bodyText": "I used index as it's used as the index of the hashmap. What about something like ResourceNameFilter?", "author": "ctan888", "createdAt": "2020-12-09T23:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwNjAwOA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r542906008", "bodyText": "For Map, you would say key rather than index. But this is not a resource or resourceName - it has no resource name, it is not a filter, but it includes AccessControlEntry. Maybe just ResourceTypeKey is sufficient, but you could also include something to indicate it includes the AccessControlEntry if you want. Either way, putting it along with AclAuthorizer would make naming less critical.", "author": "rajinisivaram", "createdAt": "2020-12-14T23:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNDI5NQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r543814295", "bodyText": "ResourceTypeKey sounds good:\ncommit 7fe92c6", "author": "ctan888", "createdAt": "2020-12-16T01:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5NTU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "7fe92c6436432760adf9465c3f0bcf3c91104b10", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java b/clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java\ndeleted file mode 100644\nindex d055012ea1..0000000000\n--- a/clients/src/main/java/org/apache/kafka/common/acl/ResourceIndex.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.kafka.common.acl;\n-\n-import org.apache.kafka.common.resource.PatternType;\n-import org.apache.kafka.common.resource.ResourceType;\n-\n-import java.util.Objects;\n-\n-public class ResourceIndex {\n-    private final AccessControlEntry ace;\n-    private final ResourceType rtype;\n-    private final PatternType ptype;\n-\n-    public ResourceIndex(AccessControlEntry ace,\n-                         ResourceType rtype,\n-                         PatternType ptype) {\n-        this.ace = ace;\n-        this.rtype = rtype;\n-        this.ptype = ptype;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-        ResourceIndex that = (ResourceIndex) o;\n-        return ace.equals(that.ace) &&\n-            rtype == that.rtype &&\n-            ptype == that.ptype;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(ace, rtype, ptype);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"ResourceIndex{\" +\n-            \"ace=\" + ace +\n-            \", rtype=\" + rtype +\n-            \", ptype=\" + ptype +\n-            '}';\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzMjY1Mw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539632653", "bodyText": "revert?", "author": "rajinisivaram", "createdAt": "2020-12-09T20:42:14Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -69,33 +73,44 @@\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"10000\", \"50000\", \"200000\"})\n+    @Param({\"200000\"})\n     private int resourceCount;\n     //no. of. rules per resource\n-    @Param({\"10\", \"50\"})\n+    @Param({\"50\"})", "originalCommit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwNjA0OA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r541206048", "bodyText": "Yes.", "author": "ctan888", "createdAt": "2020-12-11T19:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzMjY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b90763947d4d7d6a3f42e12a7a440a7a212a73de", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 13339386fb..6c4c0c5d17 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -73,19 +72,16 @@ import java.util.concurrent.TimeUnit;\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"200000\"})\n+    @Param({\"10000\", \"50000\", \"200000\"})\n     private int resourceCount;\n     //no. of. rules per resource\n-    @Param({\"50\"})\n+    @Param({\"10\", \"50\"})\n     private int aclCount;\n \n     @Param({\"0\", \"20\", \"50\", \"90\", \"99\", \"99.9\", \"99.99\", \"100\"})\n     private double denyPercentage;\n \n-    private final int hostPreCount = 1000;\n     private final String resourceNamePrefix = \"foo-bar35_resource-\";\n-    private final String resourceName = resourceNamePrefix + 95;\n-\n     private final AclAuthorizer aclAuthorizer = new AclAuthorizer();\n     private final KafkaPrincipal principal = new KafkaPrincipal(KafkaPrincipal.USER_TYPE, \"test-user\");\n     private List<Action> actions = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNDc4OQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539634789", "bodyText": "why? This no longer reflects the comment above. Can we revert?", "author": "rajinisivaram", "createdAt": "2020-12-09T20:45:38Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -69,33 +73,44 @@\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"10000\", \"50000\", \"200000\"})\n+    @Param({\"200000\"})\n     private int resourceCount;\n     //no. of. rules per resource\n-    @Param({\"10\", \"50\"})\n+    @Param({\"50\"})\n     private int aclCount;\n \n+    @Param({\"0\", \"20\", \"50\", \"90\", \"99\", \"99.9\", \"99.99\", \"100\"})\n+    private double denyPercentage;\n+\n     private final int hostPreCount = 1000;\n     private final String resourceNamePrefix = \"foo-bar35_resource-\";\n+    private final String resourceName = resourceNamePrefix + 95;\n \n     private final AclAuthorizer aclAuthorizer = new AclAuthorizer();\n     private final KafkaPrincipal principal = new KafkaPrincipal(KafkaPrincipal.USER_TYPE, \"test-user\");\n     private List<Action> actions = new ArrayList<>();\n     private RequestContext context;\n \n+    private TreeMap<ResourcePattern, VersionedAcls> aclCache = new TreeMap<>(new AclAuthorizer.ResourceOrdering());\n+    private scala.collection.mutable.HashMap<ResourceIndex, scala.collection.mutable.HashSet<String>> resourceCache =\n+        new scala.collection.mutable.HashMap<>();\n+    Random rand = new Random(System.currentTimeMillis());\n+    double eps = 1e-9;\n+\n     @Setup(Level.Trial)\n     public void setup() throws Exception {\n-        setFieldValue(aclAuthorizer, AclAuthorizer.class.getDeclaredField(\"aclCache\").getName(),\n-            prepareAclCache());\n+        prepareAclCache();\n+        setFieldValue(aclAuthorizer, AclAuthorizer.class.getDeclaredField(\"aclCache\").getName(), aclCache);\n+        setFieldValue(aclAuthorizer, AclAuthorizer.class.getDeclaredField(\"resourceCache\").getName(), resourceCache);\n         // By adding `-95` to the resource name prefix, we cause the `TreeMap.from/to` call to return\n         // most map entries. In such cases, we rely on the filtering based on `String.startsWith`\n         // to return the matching ACLs. Using a more efficient data structure (e.g. a prefix\n         // tree) should improve performance significantly).\n         actions = Collections.singletonList(new Action(AclOperation.WRITE,\n-            new ResourcePattern(ResourceType.TOPIC, resourceNamePrefix + 95, PatternType.LITERAL),\n+            new ResourcePattern(ResourceType.TOPIC, resourceName, PatternType.LITERAL),", "originalCommit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMjU3Mg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r541202572", "bodyText": "Yeah. I was doing resourceName = resourceName + 95 to re-use this variable. We can revert it.", "author": "ctan888", "createdAt": "2020-12-11T19:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNDc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b90763947d4d7d6a3f42e12a7a440a7a212a73de", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 13339386fb..6c4c0c5d17 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -73,19 +72,16 @@ import java.util.concurrent.TimeUnit;\n @BenchmarkMode(Mode.AverageTime)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n public class AclAuthorizerBenchmark {\n-    @Param({\"200000\"})\n+    @Param({\"10000\", \"50000\", \"200000\"})\n     private int resourceCount;\n     //no. of. rules per resource\n-    @Param({\"50\"})\n+    @Param({\"10\", \"50\"})\n     private int aclCount;\n \n     @Param({\"0\", \"20\", \"50\", \"90\", \"99\", \"99.9\", \"99.99\", \"100\"})\n     private double denyPercentage;\n \n-    private final int hostPreCount = 1000;\n     private final String resourceNamePrefix = \"foo-bar35_resource-\";\n-    private final String resourceName = resourceNamePrefix + 95;\n-\n     private final AclAuthorizer aclAuthorizer = new AclAuthorizer();\n     private final KafkaPrincipal principal = new KafkaPrincipal(KafkaPrincipal.USER_TYPE, \"test-user\");\n     private List<Action> actions = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNTQyNg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r539635426", "bodyText": "We should revert changes to existing benchmark because it hard to tell why these changes were made and what impact it has on the original benchmark.", "author": "rajinisivaram", "createdAt": "2020-12-09T20:46:42Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -105,49 +120,76 @@ private void setFieldValue(Object obj, String fieldName, Object value) throws Ex\n         field.set(obj, value);\n     }\n \n-    private TreeMap<ResourcePattern, VersionedAcls> prepareAclCache() {\n+    private void prepareAclCache() throws UnknownHostException {\n         Map<ResourcePattern, Set<AclEntry>> aclEntries = new HashMap<>();\n         for (int resourceId = 0; resourceId < resourceCount; resourceId++) {\n             ResourcePattern resource = new ResourcePattern(\n                 (resourceId % 10 == 0) ? ResourceType.GROUP : ResourceType.TOPIC,\n-                resourceNamePrefix + resourceId,\n+                resourceName(resourceNamePrefix),", "originalCommit": "40c0cad01590e137eac4ad1bb859f3d97b62a245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxMjE5MA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r541212190", "bodyText": "The existing benchmark does not have any DENY resource in it. Adding some DENY bindings whose percentage is controlled by parameters will be an improvement to the existing benchmark and help us understand the performance better.\nI've reverted all changes other than adding some DENY bindings. Also, I moved those memory intense operations into the @setup phase so now the benchmark just measures updateCache(). Does the benchmark look good to you now?\ncommit 6536cea\n@rajinisivaram", "author": "ctan888", "createdAt": "2020-12-11T19:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAzOTMyMg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r542039322", "bodyText": "Benchmark result: https://paste.ubuntu.com/p/zvjZC4QkMM/\nPerformance pattern doesn't change, except testUpdateCache runs much faster now.", "author": "ctan888", "createdAt": "2020-12-14T00:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNTQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "b90763947d4d7d6a3f42e12a7a440a7a212a73de", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 13339386fb..6c4c0c5d17 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -120,12 +119,12 @@ public class AclAuthorizerBenchmark {\n         field.set(obj, value);\n     }\n \n-    private void prepareAclCache() throws UnknownHostException {\n+    private void prepareAclCache() {\n         Map<ResourcePattern, Set<AclEntry>> aclEntries = new HashMap<>();\n         for (int resourceId = 0; resourceId < resourceCount; resourceId++) {\n             ResourcePattern resource = new ResourcePattern(\n                 (resourceId % 10 == 0) ? ResourceType.GROUP : ResourceType.TOPIC,\n-                resourceName(resourceNamePrefix),\n+                resourceNamePrefix + resourceId,\n                 (resourceId % 5 == 0) ? PatternType.PREFIXED : PatternType.LITERAL);\n \n             Set<AclEntry> entries = aclEntries.computeIfAbsent(resource, k -> new HashSet<>());\n"}}, {"oid": "2fd4babe2c27ee0723fa1cd720ca35d2bbefe57b", "url": "https://github.com/apache/kafka/commit/2fd4babe2c27ee0723fa1cd720ca35d2bbefe57b", "message": "NIT", "committedDate": "2020-12-09T23:52:34Z", "type": "commit"}, {"oid": "1dc143fc78a3b9927189751255346ef0b6cafd90", "url": "https://github.com/apache/kafka/commit/1dc143fc78a3b9927189751255346ef0b6cafd90", "message": "handle the special case where no deny resources exists, improve the performance", "committedDate": "2020-12-10T00:24:56Z", "type": "commit"}, {"oid": "1e139df0ba64cb86507d9ec742214054791a45fe", "url": "https://github.com/apache/kafka/commit/1e139df0ba64cb86507d9ec742214054791a45fe", "message": "improve the allowEveryoneIfNoAclFound checking logic", "committedDate": "2020-12-10T18:57:09Z", "type": "commit"}, {"oid": "1e139df0ba64cb86507d9ec742214054791a45fe", "url": "https://github.com/apache/kafka/commit/1e139df0ba64cb86507d9ec742214054791a45fe", "message": "improve the allowEveryoneIfNoAclFound checking logic", "committedDate": "2020-12-10T18:57:09Z", "type": "forcePushed"}, {"oid": "67b3163bbf6562bdad1ba054b813a454f9be2363", "url": "https://github.com/apache/kafka/commit/67b3163bbf6562bdad1ba054b813a454f9be2363", "message": "rename authorizeAny to authorizeByResourcetype in tests", "committedDate": "2020-12-10T21:20:49Z", "type": "commit"}, {"oid": "8263bd319f63d39808f90129db55427b98385dd4", "url": "https://github.com/apache/kafka/commit/8263bd319f63d39808f90129db55427b98385dd4", "message": "Fix the issue that the wildcard host and principle didn't work in AuthorizerWrapper", "committedDate": "2020-12-11T03:05:23Z", "type": "commit"}, {"oid": "8263bd319f63d39808f90129db55427b98385dd4", "url": "https://github.com/apache/kafka/commit/8263bd319f63d39808f90129db55427b98385dd4", "message": "Fix the issue that the wildcard host and principle didn't work in AuthorizerWrapper", "committedDate": "2020-12-11T03:05:23Z", "type": "forcePushed"}, {"oid": "b90763947d4d7d6a3f42e12a7a440a7a212a73de", "url": "https://github.com/apache/kafka/commit/b90763947d4d7d6a3f42e12a7a440a7a212a73de", "message": "Revert benchmark changes", "committedDate": "2020-12-11T19:51:51Z", "type": "forcePushed"}, {"oid": "dea46b04516382285dc42f088f3f896b7c10cc64", "url": "https://github.com/apache/kafka/commit/dea46b04516382285dc42f088f3f896b7c10cc64", "message": "Revert benchmark changes", "committedDate": "2020-12-12T06:29:25Z", "type": "forcePushed"}, {"oid": "6536cea788210860a764f3f0a6901244e8d974fe", "url": "https://github.com/apache/kafka/commit/6536cea788210860a764f3f0a6901244e8d974fe", "message": "Revert benchmark changes", "committedDate": "2020-12-12T20:01:42Z", "type": "commit"}, {"oid": "6536cea788210860a764f3f0a6901244e8d974fe", "url": "https://github.com/apache/kafka/commit/6536cea788210860a764f3f0a6901244e8d974fe", "message": "Revert benchmark changes", "committedDate": "2020-12-12T20:01:42Z", "type": "forcePushed"}, {"oid": "4f9b79a810c4da3030fe262d4bfdc97df4945e8c", "url": "https://github.com/apache/kafka/commit/4f9b79a810c4da3030fe262d4bfdc97df4945e8c", "message": "revert unnecessary test re-writes", "committedDate": "2020-12-12T21:01:46Z", "type": "commit"}, {"oid": "4f9b79a810c4da3030fe262d4bfdc97df4945e8c", "url": "https://github.com/apache/kafka/commit/4f9b79a810c4da3030fe262d4bfdc97df4945e8c", "message": "revert unnecessary test re-writes", "committedDate": "2020-12-12T21:01:46Z", "type": "forcePushed"}, {"oid": "dd48b22aff2802c191fd555fa894a5d1081f68ca", "url": "https://github.com/apache/kafka/commit/dd48b22aff2802c191fd555fa894a5d1081f68ca", "message": "fix checkstyle", "committedDate": "2020-12-14T04:40:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDA5OA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r542830098", "bodyText": "Since this is the javadoc of a public API, we should move the details on how the default implementation works outside of the javadoc. We can move this list of comments inside the method.", "author": "rajinisivaram", "createdAt": "2020-12-14T21:47:04Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +151,126 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * 1. Filter out all the resource pattern corresponding to the requestContext, AclOperation,\n+     *    and ResourceType\n+     * 2. If wildcard deny exists, return deny directly\n+     * 3. For any literal allowed resource, if there's no dominant literal denied resource, and\n+     *    no dominant prefixed denied resource, return allow\n+     * 4. For any prefixed allowed resource, if there's no dominant denied resource, return allow\n+     * 5. For any other cases, return deny", "originalCommit": "dd48b22aff2802c191fd555fa894a5d1081f68ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4MDYxMg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r543080612", "bodyText": "Sure. commit 25e0bfc", "author": "ctan888", "createdAt": "2020-12-15T06:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "25e0bfcc97f956ceb4254ab8c457fe5d8d250e82", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex d464c890b5..f8486fc4b1 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -156,14 +156,6 @@ public interface Authorizer extends Configurable, Closeable {\n      * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n      * resource of the given type.\n      *\n-     * 1. Filter out all the resource pattern corresponding to the requestContext, AclOperation,\n-     *    and ResourceType\n-     * 2. If wildcard deny exists, return deny directly\n-     * 3. For any literal allowed resource, if there's no dominant literal denied resource, and\n-     *    no dominant prefixed denied resource, return allow\n-     * 4. For any prefixed allowed resource, if there's no dominant denied resource, return allow\n-     * 5. For any other cases, return deny\n-     *\n      * It is important to override this interface default in implementations because\n      * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n      *    which is a CPU intense work.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg1MTU1MQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r542851551", "bodyText": "We don't currently have anything in the default implementation to support super.users right? Unlike allow.everyone.if.no.acl.found which is not particularly suitable for production use, super.users is a commonly used config that is likely to be in use in a lot of deployments. The simplest fix may be to authorize() with a hard-coded name and return ALLOWED if authorize() returns ALLOWED before any of the logic below is executed.", "author": "rajinisivaram", "createdAt": "2020-12-14T22:07:06Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +151,126 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * 1. Filter out all the resource pattern corresponding to the requestContext, AclOperation,\n+     *    and ResourceType\n+     * 2. If wildcard deny exists, return deny directly\n+     * 3. For any literal allowed resource, if there's no dominant literal denied resource, and\n+     *    no dominant prefixed denied resource, return allow\n+     * 4. For any prefixed allowed resource, if there's no dominant denied resource, return allow\n+     * 5. For any other cases, return deny\n+     *\n+     * It is important to override this interface default in implementations because\n+     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n+     *    which is a CPU intense work.\n+     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);", "originalCommit": "dd48b22aff2802c191fd555fa894a5d1081f68ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNDY4MQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r543814681", "bodyText": "Good catch. This is super important.\ncommit dae1a78", "author": "ctan888", "createdAt": "2020-12-16T01:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg1MTU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "25e0bfcc97f956ceb4254ab8c457fe5d8d250e82", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex d464c890b5..f8486fc4b1 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -156,14 +156,6 @@ public interface Authorizer extends Configurable, Closeable {\n      * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n      * resource of the given type.\n      *\n-     * 1. Filter out all the resource pattern corresponding to the requestContext, AclOperation,\n-     *    and ResourceType\n-     * 2. If wildcard deny exists, return deny directly\n-     * 3. For any literal allowed resource, if there's no dominant literal denied resource, and\n-     *    no dominant prefixed denied resource, return allow\n-     * 4. For any prefixed allowed resource, if there's no dominant denied resource, return allow\n-     * 5. For any other cases, return deny\n-     *\n      * It is important to override this interface default in implementations because\n      * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n      *    which is a CPU intense work.\n"}}, {"oid": "25e0bfcc97f956ceb4254ab8c457fe5d8d250e82", "url": "https://github.com/apache/kafka/commit/25e0bfcc97f956ceb4254ab8c457fe5d8d250e82", "message": "move the step by step comments into the method", "committedDate": "2020-12-15T06:28:49Z", "type": "commit"}, {"oid": "1217394c0c3767ac11df958c02a681c8cbc8382b", "url": "https://github.com/apache/kafka/commit/1217394c0c3767ac11df958c02a681c8cbc8382b", "message": "change the no acl found logic in AuthorizerWrapper", "committedDate": "2020-12-15T06:59:47Z", "type": "commit"}, {"oid": "cfe7dbbd0d3b495041dc89c51cb8f5b8d3258710", "url": "https://github.com/apache/kafka/commit/cfe7dbbd0d3b495041dc89c51cb8f5b8d3258710", "message": "optimize principle.toString", "committedDate": "2020-12-15T07:18:44Z", "type": "commit"}, {"oid": "cfe7dbbd0d3b495041dc89c51cb8f5b8d3258710", "url": "https://github.com/apache/kafka/commit/cfe7dbbd0d3b495041dc89c51cb8f5b8d3258710", "message": "optimize principle.toString", "committedDate": "2020-12-15T07:18:44Z", "type": "forcePushed"}, {"oid": "825a8ba77ad1766f998a71a9a15f21e73daad84a", "url": "https://github.com/apache/kafka/commit/825a8ba77ad1766f998a71a9a15f21e73daad84a", "message": "remove the removeAcl related logic since ZK will re-instantiate before every test case", "committedDate": "2020-12-15T07:37:25Z", "type": "commit"}, {"oid": "184944c78ec1a0f3061dabba9b1c638a4f86d99a", "url": "https://github.com/apache/kafka/commit/184944c78ec1a0f3061dabba9b1c638a4f86d99a", "message": "rename the ZK client metricType name", "committedDate": "2020-12-15T07:43:49Z", "type": "commit"}, {"oid": "e31f157eaac1213445dd284fd2209a29f4fa18fd", "url": "https://github.com/apache/kafka/commit/e31f157eaac1213445dd284fd2209a29f4fa18fd", "message": "move the DelegateAuthorizer into AuthorizerInterfaceDefaultTest", "committedDate": "2020-12-15T07:53:26Z", "type": "commit"}, {"oid": "dae1a788b70ebc03eab265b1027a4b43ad8e773b", "url": "https://github.com/apache/kafka/commit/dae1a788b70ebc03eab265b1027a4b43ad8e773b", "message": "added super user case and tests", "committedDate": "2020-12-15T22:48:27Z", "type": "commit"}, {"oid": "7fe92c6436432760adf9465c3f0bcf3c91104b10", "url": "https://github.com/apache/kafka/commit/7fe92c6436432760adf9465c3f0bcf3c91104b10", "message": "Maket ResourceIndex an Inner class of AclAuthorizer, and decouple the jmh benchmark with it", "committedDate": "2020-12-16T01:40:44Z", "type": "commit"}, {"oid": "62c44ade550a90671ff41bfb847e2bc28adc7baa", "url": "https://github.com/apache/kafka/commit/62c44ade550a90671ff41bfb847e2bc28adc7baa", "message": "change the mutable map to volatile immutable map for thread safety", "committedDate": "2020-12-16T01:50:47Z", "type": "commit"}, {"oid": "b22ecd69c0001046d62e6236e768422cbf1df0a0", "url": "https://github.com/apache/kafka/commit/b22ecd69c0001046d62e6236e768422cbf1df0a0", "message": "NIT", "committedDate": "2020-12-16T04:36:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMzEyNw==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r544223127", "bodyText": "Use op rather than READ since that fits with why we are allowing access. We also need a test that verifies that permission to READ everything doesn't imply authorizeByResourceType for WRITE.", "author": "rajinisivaram", "createdAt": "2020-12-16T11:29:11Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +152,134 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * It is important to override this interface default in implementations because\n+     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n+     *    which is a CPU intense work.\n+     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n+     * 3. The interface default cannot perform the audit logging properly\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n+\n+        if (authorize(requestContext, Collections.singletonList(new Action(\n+                AclOperation.READ,", "originalCommit": "b22ecd69c0001046d62e6236e768422cbf1df0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NTkzOA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r544545938", "bodyText": "commit ec80dc4", "author": "ctan888", "createdAt": "2020-12-16T18:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMzEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "ec80dc4e55758d83835f3ecde381a988d6dd4779", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex cdbfc7ad04..55b7463126 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -174,10 +174,9 @@ public interface Authorizer extends Configurable, Closeable {\n         SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n \n         if (authorize(requestContext, Collections.singletonList(new Action(\n-                AclOperation.READ,\n-                new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n-                0, false, false)))\n-            .get(0) == AuthorizationResult.ALLOWED) {\n+                op, new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n+                0, true, false)))\n+                .get(0) == AuthorizationResult.ALLOWED) {\n             return AuthorizationResult.ALLOWED;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMzYzMA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r544223630", "bodyText": "Use logIfAllowed=true since we are granting access in that case.", "author": "rajinisivaram", "createdAt": "2020-12-16T11:29:58Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +152,134 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * It is important to override this interface default in implementations because\n+     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n+     *    which is a CPU intense work.\n+     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n+     * 3. The interface default cannot perform the audit logging properly\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n+\n+        if (authorize(requestContext, Collections.singletonList(new Action(\n+                AclOperation.READ,\n+                new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n+                0, false, false)))", "originalCommit": "b22ecd69c0001046d62e6236e768422cbf1df0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NTk0OA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r544545948", "bodyText": "commit ec80dc4", "author": "ctan888", "createdAt": "2020-12-16T18:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMzYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "ec80dc4e55758d83835f3ecde381a988d6dd4779", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex cdbfc7ad04..55b7463126 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -174,10 +174,9 @@ public interface Authorizer extends Configurable, Closeable {\n         SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n \n         if (authorize(requestContext, Collections.singletonList(new Action(\n-                AclOperation.READ,\n-                new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n-                0, false, false)))\n-            .get(0) == AuthorizationResult.ALLOWED) {\n+                op, new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n+                0, true, false)))\n+                .get(0) == AuthorizationResult.ALLOWED) {\n             return AuthorizationResult.ALLOWED;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0NjI1Mg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r544246252", "bodyText": "nit: principle => principal", "author": "rajinisivaram", "createdAt": "2020-12-16T12:07:37Z", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java", "diffHunk": "@@ -116,38 +122,88 @@ private void setFieldValue(Object obj, String fieldName, Object value) throws Ex\n             Set<AclEntry> entries = aclEntries.computeIfAbsent(resource, k -> new HashSet<>());\n \n             for (int aclId = 0; aclId < aclCount; aclId++) {\n-                AccessControlEntry ace = new AccessControlEntry(principal.toString() + aclId,\n-                    \"*\", AclOperation.READ, AclPermissionType.ALLOW);\n-                entries.add(new AclEntry(ace));\n+                // The principle in the request context we are using", "originalCommit": "b22ecd69c0001046d62e6236e768422cbf1df0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NzA4MQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r544547081", "bodyText": "commit ec80dc4", "author": "ctan888", "createdAt": "2020-12-16T18:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0NjI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ec80dc4e55758d83835f3ecde381a988d6dd4779", "chunk": "diff --git a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\nindex 2c6c53c297..65aa2a1f8d 100644\n--- a/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n+++ b/jmh-benchmarks/src/main/java/org/apache/kafka/jmh/acl/AclAuthorizerBenchmark.java\n\n@@ -122,7 +122,7 @@ public class AclAuthorizerBenchmark {\n             Set<AclEntry> entries = aclEntries.computeIfAbsent(resource, k -> new HashSet<>());\n \n             for (int aclId = 0; aclId < aclCount; aclId++) {\n-                // The principle in the request context we are using\n+                // The principal in the request context we are using\n                 // is principal.toString without any suffix\n                 String principalName = principal.toString() + (aclId == 0 ? \"\" : aclId);\n                 AccessControlEntry allowAce = new AccessControlEntry(\n"}}, {"oid": "ec80dc4e55758d83835f3ecde381a988d6dd4779", "url": "https://github.com/apache/kafka/commit/ec80dc4e55758d83835f3ecde381a988d6dd4779", "message": "NIT", "committedDate": "2020-12-16T18:57:33Z", "type": "commit"}, {"oid": "e5e3d18f57ab22df20133f9841905af384d9b641", "url": "https://github.com/apache/kafka/commit/e5e3d18f57ab22df20133f9841905af384d9b641", "message": "Make a base authorizer class for code sharing", "committedDate": "2020-12-16T23:18:46Z", "type": "commit"}, {"oid": "092fec70a9547ec07cba999e77be1c0cf79fa275", "url": "https://github.com/apache/kafka/commit/092fec70a9547ec07cba999e77be1c0cf79fa275", "message": "condense methods and class members for sharing", "committedDate": "2020-12-16T23:54:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3MzU2MQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545273561", "bodyText": "canDenyAll => denyAll since can doesn't fit with deny", "author": "rajinisivaram", "createdAt": "2020-12-17T17:35:05Z", "path": "clients/src/main/java/org/apache/kafka/common/utils/SecurityUtils.java", "diffHunk": "@@ -146,4 +148,32 @@ else if (capitalizeNext) {\n         }\n         return builder.toString();\n     }\n+\n+    public static void authorizeByResourceTypeCheckArgs(AclOperation op,\n+                                                        ResourceType type) {\n+        if (type == ResourceType.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter resource type for authorizeByResourceType\");\n+        }\n+\n+        if (type == ResourceType.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown resource type\");\n+        }\n+\n+        if (op == AclOperation.ANY) {\n+            throw new IllegalArgumentException(\n+                \"Must specify a non-filter operation type for authorizeByResourceType\");\n+        }\n+\n+        if (op == AclOperation.UNKNOWN) {\n+            throw new IllegalArgumentException(\n+                \"Unknown operation type\");\n+        }\n+    }\n+\n+    public static boolean canDenyAll(ResourcePattern pattern) {", "originalCommit": "092fec70a9547ec07cba999e77be1c0cf79fa275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3NjcwMA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545576700", "bodyText": "commit b6a766b", "author": "ctan888", "createdAt": "2020-12-18T05:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3MzU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6a766b228034a442e3a6e8b71ecee78eefdbfd3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/utils/SecurityUtils.java b/clients/src/main/java/org/apache/kafka/common/utils/SecurityUtils.java\nindex 3ab76d1a46..88a4cfc592 100644\n--- a/clients/src/main/java/org/apache/kafka/common/utils/SecurityUtils.java\n+++ b/clients/src/main/java/org/apache/kafka/common/utils/SecurityUtils.java\n\n@@ -172,7 +172,7 @@ public class SecurityUtils {\n         }\n     }\n \n-    public static boolean canDenyAll(ResourcePattern pattern) {\n+    public static boolean denyAll(ResourcePattern pattern) {\n         return pattern.patternType() == PatternType.LITERAL\n             && pattern.name().equals(ResourcePattern.WILDCARD_RESOURCE);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MDY1NA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545280654", "bodyText": "Suggestions to improve this (feel free to ignore/update):\nCustom authorizer implementations should consider overriding this default implementation because:\n1) The default implementation iterates all AclBindings multiple times, without any caching for resource types. More efficient implementations may be added in custom authorizers that directly access cached entries.\n2) The default implementation cannot integrate with any audit logging included in the authorizer implementation.\n3) The default implementation does not support any custom authorizer configs or other access rules apart from ACLs.", "author": "rajinisivaram", "createdAt": "2020-12-17T17:45:19Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +152,133 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * It is important to override this interface default in implementations because", "originalCommit": "092fec70a9547ec07cba999e77be1c0cf79fa275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3NjgwOA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545576808", "bodyText": "commit b6a766b", "author": "ctan888", "createdAt": "2020-12-18T05:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MDY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "b6a766b228034a442e3a6e8b71ecee78eefdbfd3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 55b7463126..61f169b17d 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -157,22 +157,27 @@ public interface Authorizer extends Configurable, Closeable {\n      * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n      * resource of the given type.\n      *\n-     * It is important to override this interface default in implementations because\n-     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n-     *    which is a CPU intense work.\n-     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n-     * 3. The interface default cannot perform the audit logging properly\n+     * Custom authorizer implementations should consider overriding this default implementation because:\n+     * 1. The default implementation iterates all AclBindings multiple times, without any caching\n+     *    by principle, host, operation, permission types, and resource types. More efficient\n+     *    implementations may be added in custom authorizers that directly access cached entries.\n+     * 2. The default implementation cannot integrate with any audit logging included in the\n+     *    authorizer implementation.\n+     * 3. The default implementation does not support any custom authorizer configs or other access\n+     *    rules apart from ACLs.\n      *\n      * @param requestContext Request context including request resourceType, security protocol, and listener name\n      * @param op             The ACL operation to check\n      * @param resourceType   The resource type to check\n-     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n-     *                      \u00a0given ACL operation on at least one resource of the given type.\n-     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized\n+     *                       to perform the given ACL operation on at least one resource of the\n+     *                       given type. Return {@link AuthorizationResult#DENIED} otherwise.\n      */\n     default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n         SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n \n+        // Check a hard-coded name to ensure that super users are granted\n+        // access regardless of DENY ACLs.\n         if (authorize(requestContext, Collections.singletonList(new Action(\n                 op, new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n                 0, true, false)))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MjM3NA==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545282374", "bodyText": "Add a comment to say that we check for one hard-coded name to ensure that super users are granted access regardless of DENY acls.", "author": "rajinisivaram", "createdAt": "2020-12-17T17:47:45Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +152,133 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * It is important to override this interface default in implementations because\n+     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n+     *    which is a CPU intense work.\n+     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n+     * 3. The interface default cannot perform the audit logging properly\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n+\n+        if (authorize(requestContext, Collections.singletonList(new Action(", "originalCommit": "092fec70a9547ec07cba999e77be1c0cf79fa275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3Nzc3Mg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545577772", "bodyText": "// Check a hard-coded name to ensure that super users are granted\n    // access regardless of DENY ACLs.", "author": "ctan888", "createdAt": "2020-12-18T05:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3NzgzMg==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545577832", "bodyText": "commit b6a766b", "author": "ctan888", "createdAt": "2020-12-18T05:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MjM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b6a766b228034a442e3a6e8b71ecee78eefdbfd3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 55b7463126..61f169b17d 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -157,22 +157,27 @@ public interface Authorizer extends Configurable, Closeable {\n      * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n      * resource of the given type.\n      *\n-     * It is important to override this interface default in implementations because\n-     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n-     *    which is a CPU intense work.\n-     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n-     * 3. The interface default cannot perform the audit logging properly\n+     * Custom authorizer implementations should consider overriding this default implementation because:\n+     * 1. The default implementation iterates all AclBindings multiple times, without any caching\n+     *    by principle, host, operation, permission types, and resource types. More efficient\n+     *    implementations may be added in custom authorizers that directly access cached entries.\n+     * 2. The default implementation cannot integrate with any audit logging included in the\n+     *    authorizer implementation.\n+     * 3. The default implementation does not support any custom authorizer configs or other access\n+     *    rules apart from ACLs.\n      *\n      * @param requestContext Request context including request resourceType, security protocol, and listener name\n      * @param op             The ACL operation to check\n      * @param resourceType   The resource type to check\n-     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n-     *                      \u00a0given ACL operation on at least one resource of the given type.\n-     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized\n+     *                       to perform the given ACL operation on at least one resource of the\n+     *                       given type. Return {@link AuthorizationResult#DENIED} otherwise.\n      */\n     default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n         SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n \n+        // Check a hard-coded name to ensure that super users are granted\n+        // access regardless of DENY ACLs.\n         if (authorize(requestContext, Collections.singletonList(new Action(\n                 op, new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n                 0, true, false)))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NzQxOQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545287419", "bodyText": "Can we make this comment two lines instead of 4 since each sentence seems short enough to fit into a line?", "author": "rajinisivaram", "createdAt": "2020-12-17T17:55:22Z", "path": "clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java", "diffHunk": "@@ -139,4 +152,133 @@\n      * @return Iterator for ACL bindings, which may be populated lazily.\n      */\n     Iterable<AclBinding> acls(AclBindingFilter filter);\n+\n+    /**\n+     * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n+     * resource of the given type.\n+     *\n+     * It is important to override this interface default in implementations because\n+     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n+     *    which is a CPU intense work.\n+     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n+     * 3. The interface default cannot perform the audit logging properly\n+     *\n+     * @param requestContext Request context including request resourceType, security protocol, and listener name\n+     * @param op             The ACL operation to check\n+     * @param resourceType   The resource type to check\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n+     *                      \u00a0given ACL operation on at least one resource of the given type.\n+     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     */\n+    default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n+        SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n+\n+        if (authorize(requestContext, Collections.singletonList(new Action(\n+                op, new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n+                0, true, false)))\n+                .get(0) == AuthorizationResult.ALLOWED) {\n+            return AuthorizationResult.ALLOWED;\n+        }\n+\n+        // Filter out all the resource pattern corresponding to the RequestContext,\n+        // AclOperation, and ResourceType\n+        ResourcePatternFilter resourceTypeFilter = new ResourcePatternFilter(\n+            resourceType, null, PatternType.ANY);\n+        AclBindingFilter aclFilter = new AclBindingFilter(\n+            resourceTypeFilter, AccessControlEntryFilter.ANY);\n+\n+        EnumMap<PatternType, Set<String>> denyPatterns =\n+            new EnumMap<PatternType, Set<String>>(PatternType.class) {{\n+                put(PatternType.LITERAL, new HashSet<>());\n+                put(PatternType.PREFIXED, new HashSet<>());\n+            }};\n+        EnumMap<PatternType, Set<String>> allowPatterns =\n+            new EnumMap<PatternType, Set<String>>(PatternType.class) {{\n+                put(PatternType.LITERAL, new HashSet<>());\n+                put(PatternType.PREFIXED, new HashSet<>());\n+            }};\n+\n+        boolean hasWildCardAllow = false;\n+\n+        KafkaPrincipal principal = new KafkaPrincipal(\n+            requestContext.principal().getPrincipalType(),\n+            requestContext.principal().getName());\n+        String hostAddr = requestContext.clientAddress().getHostAddress();\n+\n+        for (AclBinding binding : acls(aclFilter)) {\n+            if (!binding.entry().host().equals(hostAddr) && !binding.entry().host().equals(\"*\"))\n+                continue;\n+\n+            if (!SecurityUtils.parseKafkaPrincipal(binding.entry().principal()).equals(principal)\n+                    && !binding.entry().principal().equals(\"User:*\"))\n+                continue;\n+\n+            if (binding.entry().operation() != op\n+                    && binding.entry().operation() != AclOperation.ALL)\n+                continue;\n+\n+            if (binding.entry().permissionType() == AclPermissionType.DENY) {\n+                switch (binding.pattern().patternType()) {\n+                    case LITERAL:\n+                        // If wildcard deny exists, return deny directly\n+                        if (binding.pattern().name().equals(ResourcePattern.WILDCARD_RESOURCE))\n+                            return AuthorizationResult.DENIED;\n+                        denyPatterns.get(PatternType.LITERAL).add(binding.pattern().name());\n+                        break;\n+                    case PREFIXED:\n+                        denyPatterns.get(PatternType.PREFIXED).add(binding.pattern().name());\n+                        break;\n+                    default:\n+                }\n+                continue;\n+            }\n+\n+            if (binding.entry().permissionType() != AclPermissionType.ALLOW)\n+                continue;\n+\n+            switch (binding.pattern().patternType()) {\n+                case LITERAL:\n+                    if (binding.pattern().name().equals(ResourcePattern.WILDCARD_RESOURCE)) {\n+                        hasWildCardAllow = true;\n+                        continue;\n+                    }\n+                    allowPatterns.get(PatternType.LITERAL).add(binding.pattern().name());\n+                    break;\n+                case PREFIXED:\n+                    allowPatterns.get(PatternType.PREFIXED).add(binding.pattern().name());\n+                    break;\n+                default:\n+            }\n+        }\n+\n+        if (hasWildCardAllow) {\n+            return AuthorizationResult.ALLOWED;\n+        }\n+\n+        // For any literal allowed, if there's no dominant literal\n+        // and prefix denied, return allow.\n+        // For any prefix allowed, if there's no dominant prefix\n+        // denied, return allow.", "originalCommit": "092fec70a9547ec07cba999e77be1c0cf79fa275", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU3Nzg2NQ==", "url": "https://github.com/apache/kafka/pull/9485#discussion_r545577865", "bodyText": "commit b6a766b", "author": "ctan888", "createdAt": "2020-12-18T05:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6a766b228034a442e3a6e8b71ecee78eefdbfd3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\nindex 55b7463126..61f169b17d 100644\n--- a/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n+++ b/clients/src/main/java/org/apache/kafka/server/authorizer/Authorizer.java\n\n@@ -157,22 +157,27 @@ public interface Authorizer extends Configurable, Closeable {\n      * Check if the caller is authorized to perform the\u00a0given ACL operation on at least one\n      * resource of the given type.\n      *\n-     * It is important to override this interface default in implementations because\n-     * 1. The interface default iterates all AclBindings multiple times, without any indexing,\n-     *    which is a CPU intense work.\n-     * 2. The interface default rebuild several sets of strings, which is a memory intense work.\n-     * 3. The interface default cannot perform the audit logging properly\n+     * Custom authorizer implementations should consider overriding this default implementation because:\n+     * 1. The default implementation iterates all AclBindings multiple times, without any caching\n+     *    by principle, host, operation, permission types, and resource types. More efficient\n+     *    implementations may be added in custom authorizers that directly access cached entries.\n+     * 2. The default implementation cannot integrate with any audit logging included in the\n+     *    authorizer implementation.\n+     * 3. The default implementation does not support any custom authorizer configs or other access\n+     *    rules apart from ACLs.\n      *\n      * @param requestContext Request context including request resourceType, security protocol, and listener name\n      * @param op             The ACL operation to check\n      * @param resourceType   The resource type to check\n-     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized to perform the\n-     *                      \u00a0given ACL operation on at least one resource of the given type.\n-     *                       Return {@link AuthorizationResult#DENIED} otherwise.\n+     * @return               Return {@link AuthorizationResult#ALLOWED} if the caller is authorized\n+     *                       to perform the given ACL operation on at least one resource of the\n+     *                       given type. Return {@link AuthorizationResult#DENIED} otherwise.\n      */\n     default AuthorizationResult authorizeByResourceType(AuthorizableRequestContext requestContext, AclOperation op, ResourceType resourceType) {\n         SecurityUtils.authorizeByResourceTypeCheckArgs(op, resourceType);\n \n+        // Check a hard-coded name to ensure that super users are granted\n+        // access regardless of DENY ACLs.\n         if (authorize(requestContext, Collections.singletonList(new Action(\n                 op, new ResourcePattern(resourceType, \"hardcode\", PatternType.LITERAL),\n                 0, true, false)))\n"}}, {"oid": "b6a766b228034a442e3a6e8b71ecee78eefdbfd3", "url": "https://github.com/apache/kafka/commit/b6a766b228034a442e3a6e8b71ecee78eefdbfd3", "message": "Another NIT", "committedDate": "2020-12-18T02:15:31Z", "type": "commit"}, {"oid": "9407b1697d976fc6cff90703573a64f7a3c9f348", "url": "https://github.com/apache/kafka/commit/9407b1697d976fc6cff90703573a64f7a3c9f348", "message": "address the missing comments", "committedDate": "2020-12-18T05:31:12Z", "type": "commit"}, {"oid": "9407b1697d976fc6cff90703573a64f7a3c9f348", "url": "https://github.com/apache/kafka/commit/9407b1697d976fc6cff90703573a64f7a3c9f348", "message": "address the missing comments", "committedDate": "2020-12-18T05:31:12Z", "type": "forcePushed"}, {"oid": "85231ec69bdf59be7853424dbe3c946addc8ec2b", "url": "https://github.com/apache/kafka/commit/85231ec69bdf59be7853424dbe3c946addc8ec2b", "message": "A few minor updates", "committedDate": "2020-12-18T10:03:59Z", "type": "commit"}, {"oid": "dd620f4cc70d09def9304904e7fcf020fd1c406e", "url": "https://github.com/apache/kafka/commit/dd620f4cc70d09def9304904e7fcf020fd1c406e", "message": "Fix Scala 2.12 build", "committedDate": "2020-12-18T13:57:02Z", "type": "commit"}]}