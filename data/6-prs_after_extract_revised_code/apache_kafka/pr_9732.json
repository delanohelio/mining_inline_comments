{"pr_number": 9732, "pr_title": "KAFKA-10842; Use `InterBrokerSendThread` for raft's outbound network channel", "pr_createdAt": "2020-12-11T05:45:43Z", "pr_url": "https://github.com/apache/kafka/pull/9732", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NzAyMw==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541147023", "bodyText": "It seems like there are many classes where direct access to data is not actually needed. How do you feel about having a public method in RequestUtils that exposes data for the raft layer instead? Something like:\npublic static ApiMessage requestData(AbstractRequest req)\npublic static ApiMessage responseData(AbstractResponse resp)\nOr is it not worth it?", "author": "ijuma", "createdAt": "2020-12-11T18:33:43Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/AddOffsetsToTxnRequest.java", "diffHunk": "@@ -53,7 +53,7 @@ public AddOffsetsToTxnRequest(AddOffsetsToTxnRequestData data, short version) {\n     }\n \n     @Override\n-    protected AddOffsetsToTxnRequestData data() {\n+    public AddOffsetsToTxnRequestData data() {", "originalCommit": "6533921245e4f7d858dd186b77e4130703fa2de1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1ODc0NA==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541158744", "bodyText": "Yeah, not sure it's worth it, though I don't feel strongly. I think ultimately we're going to start relying more on the generated classes to avoid unnecessary conversions. We're now entering \"phase 2\" of the request overhaul which means we can start figuring out how to remove the AbstractRequest/AbstractResponse layer. I think it will take more smarts in the generated classes to make a dent here, but if we are agreed on the goal (?), then I do not think preserving the encapsulation here is worthwhile.", "author": "hachikuji", "createdAt": "2020-12-11T18:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NzAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE3MjU2NQ==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541172565", "bodyText": "I don't quite understand how we would handle versioning well if we only have data classes. Do you have thoughts on that?", "author": "ijuma", "createdAt": "2020-12-11T19:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NzAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5OTQyMg==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541199422", "bodyText": "Support for optional fields would go a long way I think. I am not sure it will be possible to remove all intermediate representations, but perhaps they can be the exception and not the rule. Some version checks in KafkaApis are probably inevitable.", "author": "hachikuji", "createdAt": "2020-12-11T19:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NzAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3ODY1Mw==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541378653", "bodyText": "I can see this:\n\nAbstractRequest/AbstractResponse methods become part of the ApiMessage hierarchy.\nFooRequest/FooResponse extends FooDataRequest/FooDataResponse (like Colin suggested before)\n\nBut I don't think you want to eliminate FooRequest/FooResponse in the example above. You don't need to perform conversions for the inner classes, but it's a place where you can normalize the representation. We do that for many of the existing request/response classes.", "author": "ijuma", "createdAt": "2020-12-11T22:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NzAyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0a8358916e73fdf07a8c79a71956e7905a1f96f0", "url": "https://github.com/apache/kafka/commit/0a8358916e73fdf07a8c79a71956e7905a1f96f0", "message": "Add batch send api to `InterBrokerSendThread`", "committedDate": "2020-12-11T19:38:29Z", "type": "forcePushed"}, {"oid": "b5e476b1a144aa8582b2738260c8ea32c89f71e9", "url": "https://github.com/apache/kafka/commit/b5e476b1a144aa8582b2738260c8ea32c89f71e9", "message": "Add batch send api to `InterBrokerSendThread`", "committedDate": "2020-12-11T19:41:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNzg0OQ==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541227849", "bodyText": "nit: should add something like \"timeout was reached or #wakeup() was called\"", "author": "mumrah", "createdAt": "2020-12-11T20:02:20Z", "path": "raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.raft;\n+\n+/**\n+ * This class is used to serialize inbound requests or responses to outbound requests.\n+ * It basically just allows us to wrap a blocking queue so that we can have a mocked\n+ * implementation which does not depend on system time.\n+ *\n+ * See {@link org.apache.kafka.raft.internals.BlockingMessageQueue}.\n+ */\n+public interface RaftMessageQueue {\n+\n+    /**\n+     * Block for the arrival of a new message.\n+     *\n+     * @param timeoutMs timeout in milliseconds to wait for a new event\n+     * @return the event or null if the timeout was reached", "originalCommit": "b5e476b1a144aa8582b2738260c8ea32c89f71e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74cbbf86e4b8f1d35c1ae380d63841677db9d6ad", "chunk": "diff --git a/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java b/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java\nindex ea46f5ed0c..7d1e4b7598 100644\n--- a/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java\n+++ b/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java\n\n@@ -29,17 +29,18 @@ public interface RaftMessageQueue {\n      * Block for the arrival of a new message.\n      *\n      * @param timeoutMs timeout in milliseconds to wait for a new event\n-     * @return the event or null if the timeout was reached\n+     * @return the event or null if either the timeout was reached or there was\n+     *     a call to {@link #wakeup()} before any events became available\n      */\n     RaftMessage poll(long timeoutMs);\n \n     /**\n-     * Offer a new message to the queue.\n+     * Add a new message to the queue.\n      *\n      * @param message the message to deliver\n      * @throws IllegalStateException if the queue cannot accept the message\n      */\n-    void offer(RaftMessage message);\n+    void add(RaftMessage message);\n \n     /**\n      * Check whether there are pending messages awaiting delivery.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzg0Nw==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541233847", "bodyText": "Could you use a sentinel RaftMessage object here instead? Might simplify this class a bit. Not a big deal either way", "author": "mumrah", "createdAt": "2020-12-11T20:08:50Z", "path": "raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.raft.internals;\n+\n+import org.apache.kafka.common.errors.InterruptException;\n+import org.apache.kafka.raft.RaftMessage;\n+import org.apache.kafka.raft.RaftMessageQueue;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class BlockingMessageQueue implements RaftMessageQueue {\n+    private final BlockingQueue<RaftEvent> queue = new LinkedBlockingQueue<>();\n+    private final AtomicInteger size = new AtomicInteger(0);\n+\n+    @Override\n+    public RaftMessage poll(long timeoutMs) {\n+        try {\n+            RaftEvent event = queue.poll(timeoutMs, TimeUnit.MILLISECONDS);\n+            if (event instanceof MessageReceived) {\n+                size.decrementAndGet();\n+                return ((MessageReceived) event).message;\n+            } else {\n+                return null;\n+            }\n+        } catch (InterruptedException e) {\n+            throw new InterruptException(e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void offer(RaftMessage message) {\n+        queue.add(new MessageReceived(message));\n+        size.incrementAndGet();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return size.get() == 0;\n+    }\n+\n+    @Override\n+    public void wakeup() {\n+        queue.add(Wakeup.INSTANCE);\n+    }\n+\n+    public interface RaftEvent {", "originalCommit": "b5e476b1a144aa8582b2738260c8ea32c89f71e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MTM1OQ==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r541291359", "bodyText": "That's a good idea.", "author": "hachikuji", "createdAt": "2020-12-11T21:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "74cbbf86e4b8f1d35c1ae380d63841677db9d6ad", "chunk": "diff --git a/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java b/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java\nindex 9fe99f8208..9343cca8d4 100644\n--- a/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java\n+++ b/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java\n\n@@ -17,6 +17,7 @@\n package org.apache.kafka.raft.internals;\n \n import org.apache.kafka.common.errors.InterruptException;\n+import org.apache.kafka.common.protocol.ApiMessage;\n import org.apache.kafka.raft.RaftMessage;\n import org.apache.kafka.raft.RaftMessageQueue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1NjM2OQ==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r543556369", "bodyText": "nit: Maybe name this add so it aligns with the java.util.Queue method?", "author": "mumrah", "createdAt": "2020-12-15T17:48:20Z", "path": "raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.raft;\n+\n+/**\n+ * This class is used to serialize inbound requests or responses to outbound requests.\n+ * It basically just allows us to wrap a blocking queue so that we can have a mocked\n+ * implementation which does not depend on system time.\n+ *\n+ * See {@link org.apache.kafka.raft.internals.BlockingMessageQueue}.\n+ */\n+public interface RaftMessageQueue {\n+\n+    /**\n+     * Block for the arrival of a new message.\n+     *\n+     * @param timeoutMs timeout in milliseconds to wait for a new event\n+     * @return the event or null if either the timeout was reached or there was\n+     *     a call to {@link #wakeup()} before any events became available\n+     */\n+    RaftMessage poll(long timeoutMs);\n+\n+    /**\n+     * Offer a new message to the queue.\n+     *\n+     * @param message the message to deliver\n+     * @throws IllegalStateException if the queue cannot accept the message\n+     */\n+    void offer(RaftMessage message);", "originalCommit": "2e36873c2ab9850cde03c0e2c6a1dea3f10293dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74cbbf86e4b8f1d35c1ae380d63841677db9d6ad", "chunk": "diff --git a/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java b/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java\nindex dee765570d..7d1e4b7598 100644\n--- a/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java\n+++ b/raft/src/main/java/org/apache/kafka/raft/RaftMessageQueue.java\n\n@@ -35,12 +35,12 @@ public interface RaftMessageQueue {\n     RaftMessage poll(long timeoutMs);\n \n     /**\n-     * Offer a new message to the queue.\n+     * Add a new message to the queue.\n      *\n      * @param message the message to deliver\n      * @throws IllegalStateException if the queue cannot accept the message\n      */\n-    void offer(RaftMessage message);\n+    void add(RaftMessage message);\n \n     /**\n      * Check whether there are pending messages awaiting delivery.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1NjU4OQ==", "url": "https://github.com/apache/kafka/pull/9732#discussion_r543556589", "bodyText": "\ud83d\udc4d", "author": "mumrah", "createdAt": "2020-12-15T17:48:38Z", "path": "raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.raft.internals;\n+\n+import org.apache.kafka.common.errors.InterruptException;\n+import org.apache.kafka.common.protocol.ApiMessage;\n+import org.apache.kafka.raft.RaftMessage;\n+import org.apache.kafka.raft.RaftMessageQueue;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class BlockingMessageQueue implements RaftMessageQueue {\n+    private static final RaftMessage WAKEUP_MESSAGE = new RaftMessage() {", "originalCommit": "2e36873c2ab9850cde03c0e2c6a1dea3f10293dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74cbbf86e4b8f1d35c1ae380d63841677db9d6ad", "chunk": "diff --git a/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java b/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java\nindex 5d8f384a10..9343cca8d4 100644\n--- a/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java\n+++ b/raft/src/main/java/org/apache/kafka/raft/internals/BlockingMessageQueue.java\n\n@@ -58,7 +58,7 @@ public class BlockingMessageQueue implements RaftMessageQueue {\n     }\n \n     @Override\n-    public void offer(RaftMessage message) {\n+    public void add(RaftMessage message) {\n         queue.add(message);\n         size.incrementAndGet();\n     }\n"}}, {"oid": "74cbbf86e4b8f1d35c1ae380d63841677db9d6ad", "url": "https://github.com/apache/kafka/commit/74cbbf86e4b8f1d35c1ae380d63841677db9d6ad", "message": "Factor retry deadline out of `sendRequest`", "committedDate": "2020-12-15T22:22:51Z", "type": "forcePushed"}, {"oid": "9ac6bb0650d4570ac052215297ab90a08bf8e7ea", "url": "https://github.com/apache/kafka/commit/9ac6bb0650d4570ac052215297ab90a08bf8e7ea", "message": "KAFKA-10842; Use `InterBrokerSendThread` for raft's outbound network channel", "committedDate": "2020-12-21T20:05:28Z", "type": "commit"}, {"oid": "065514e8e0caa9a5203a8364be11fde766b6ff0b", "url": "https://github.com/apache/kafka/commit/065514e8e0caa9a5203a8364be11fde766b6ff0b", "message": "Add batch send api to `InterBrokerSendThread`", "committedDate": "2020-12-21T20:05:28Z", "type": "commit"}, {"oid": "6eb4ef252cb271b89563f78b4de64bb649094d02", "url": "https://github.com/apache/kafka/commit/6eb4ef252cb271b89563f78b4de64bb649094d02", "message": "Walk back addition of queue in `InterBrokerSendThread`", "committedDate": "2020-12-21T20:07:48Z", "type": "commit"}, {"oid": "d0fd77f98411e1e28e113b04155c16ab42847879", "url": "https://github.com/apache/kafka/commit/d0fd77f98411e1e28e113b04155c16ab42847879", "message": "Use sentinel `RaftMessage` for wakeup", "committedDate": "2020-12-21T20:07:48Z", "type": "commit"}, {"oid": "53cf918db43b1178751fed1eaae20378c89dd289", "url": "https://github.com/apache/kafka/commit/53cf918db43b1178751fed1eaae20378c89dd289", "message": "Fix timeout logic in `BrokerToControllerChannelManager`", "committedDate": "2020-12-21T20:07:48Z", "type": "commit"}, {"oid": "2999fc7d174d24df9041ce86f1d599c2333a04b1", "url": "https://github.com/apache/kafka/commit/2999fc7d174d24df9041ce86f1d599c2333a04b1", "message": "Factor retry deadline out of `sendRequest`", "committedDate": "2020-12-21T20:16:28Z", "type": "commit"}, {"oid": "67633d5b4a9b5aaa99e390e242f3139d27220d25", "url": "https://github.com/apache/kafka/commit/67633d5b4a9b5aaa99e390e242f3139d27220d25", "message": "We should use `disconnect` so that we get responses", "committedDate": "2020-12-21T20:16:28Z", "type": "commit"}, {"oid": "e113993296e77b12fe0fcbd17ec73ba4ddff52ba", "url": "https://github.com/apache/kafka/commit/e113993296e77b12fe0fcbd17ec73ba4ddff52ba", "message": "Fix startup/send bugs", "committedDate": "2020-12-21T20:19:27Z", "type": "commit"}, {"oid": "e9574f3b1170653348a3d8f403d3b6a996ae91a3", "url": "https://github.com/apache/kafka/commit/e9574f3b1170653348a3d8f403d3b6a996ae91a3", "message": "Fix broken channel name", "committedDate": "2020-12-21T20:19:27Z", "type": "commit"}, {"oid": "c31ba33f2ffb1144e0acbe975ddf45cc5d4065bc", "url": "https://github.com/apache/kafka/commit/c31ba33f2ffb1144e0acbe975ddf45cc5d4065bc", "message": "Remove start() call in ReplicaManager", "committedDate": "2020-12-21T20:43:34Z", "type": "commit"}, {"oid": "c31ba33f2ffb1144e0acbe975ddf45cc5d4065bc", "url": "https://github.com/apache/kafka/commit/c31ba33f2ffb1144e0acbe975ddf45cc5d4065bc", "message": "Remove start() call in ReplicaManager", "committedDate": "2020-12-21T20:43:34Z", "type": "forcePushed"}]}