{"pr_number": 8063, "pr_title": "HOTFIX: Fix two test failures in JDK11", "pr_createdAt": "2020-02-07T21:15:33Z", "pr_url": "https://github.com/apache/kafka/pull/8063", "timeline": [{"oid": "12724dc650bd53fea3f985fc819cf93a4012ffcc", "url": "https://github.com/apache/kafka/commit/12724dc650bd53fea3f985fc819cf93a4012ffcc", "message": "fix two failures in JDK11", "committedDate": "2020-02-07T21:10:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTYwOQ==", "url": "https://github.com/apache/kafka/pull/8063#discussion_r376619609", "bodyText": "Did you mean to remove this println?", "author": "vvcephei", "createdAt": "2020-02-07T21:38:17Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2935,29 +2935,32 @@ public void shouldSupportTriggerMaterializedWithKTableFromKStream() {\n             inputTopic.pipeInput(\"C\", \"yellow\", 15L);\n             inputTopic.pipeInput(\"D\", \"green\", 11L);\n \n-            final Map<String, Integer> expectedStore = new HashMap<>();\n-            expectedStore.putIfAbsent(\"A\", 1);\n-            expectedStore.putIfAbsent(\"B\", 6);\n-            expectedStore.putIfAbsent(\"C\", 24);\n-            expectedStore.putIfAbsent(\"D\", 6);\n+            final Map<String, String> expectedStore = new HashMap<>();\n+            expectedStore.putIfAbsent(\"A\", \"1\");\n+            expectedStore.putIfAbsent(\"B\", \"6\");\n+            expectedStore.putIfAbsent(\"C\", \"24\");\n+            expectedStore.putIfAbsent(\"D\", \"6\");\n \n             assertEquals(expectedStore, asMap(store));\n \n             assertEquals(\n                 asList(\n-                    new TestRecord<>(\"A\", 6, Instant.ofEpochMilli(10)),\n-                    new TestRecord<>(\"B\", 6, Instant.ofEpochMilli(9)),\n-                    new TestRecord<>(\"A\", 1, Instant.ofEpochMilli(12)),\n-                    new TestRecord<>(\"C\", 24, Instant.ofEpochMilli(15)),\n-                    new TestRecord<>(\"D\", 6, Instant.ofEpochMilli(11))),\n+                    new TestRecord<>(\"A\", \"6\", Instant.ofEpochMilli(10)),\n+                    new TestRecord<>(\"B\", \"6\", Instant.ofEpochMilli(9)),\n+                    new TestRecord<>(\"A\", \"1\", Instant.ofEpochMilli(12)),\n+                    new TestRecord<>(\"C\", \"24\", Instant.ofEpochMilli(15)),\n+                    new TestRecord<>(\"D\", \"6\", Instant.ofEpochMilli(11))),\n                 outputTopic.readRecordsToList());\n \n         }\n     }\n \n     private static Map<String, String> asMap(final KeyValueStore<String, String> store) {\n         final HashMap<String, String> result = new HashMap<>();\n-        store.all().forEachRemaining(kv -> result.put(kv.key, kv.value));\n+        store.all().forEachRemaining(kv -> {\n+            System.out.println(kv);", "originalCommit": "12724dc650bd53fea3f985fc819cf93a4012ffcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyMzUxMg==", "url": "https://github.com/apache/kafka/pull/8063#discussion_r376623512", "bodyText": "Ah yes! thanks.", "author": "guozhangwang", "createdAt": "2020-02-07T21:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1d11d5be1b71cdea3a64702c5749c1bc5a879eb", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java b/streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java\nindex ee8a158e07..7cfe510814 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java\n\n@@ -2957,10 +2957,7 @@ public class KStreamImplTest {\n \n     private static Map<String, String> asMap(final KeyValueStore<String, String> store) {\n         final HashMap<String, String> result = new HashMap<>();\n-        store.all().forEachRemaining(kv -> {\n-            System.out.println(kv);\n-            result.put(kv.key, kv.value);\n-        });\n+        store.all().forEachRemaining(kv -> result.put(kv.key, kv.value));\n         return result;\n     }\n }\n"}}, {"oid": "d1d11d5be1b71cdea3a64702c5749c1bc5a879eb", "url": "https://github.com/apache/kafka/commit/d1d11d5be1b71cdea3a64702c5749c1bc5a879eb", "message": "github comments", "committedDate": "2020-02-07T21:49:52Z", "type": "commit"}]}