{"pr_number": 9506, "pr_title": "KAFKA-10647; Only serialize owned partitions when consumer protocol version >= 1", "pr_createdAt": "2020-10-26T20:42:04Z", "pr_url": "https://github.com/apache/kafka/pull/9506", "timeline": [{"oid": "e8b70d04e1b600e14dec888b3000626074630703", "url": "https://github.com/apache/kafka/commit/e8b70d04e1b600e14dec888b3000626074630703", "message": "KAFKA-10647; Only serialize owned partition when consumer protocol version >= 0", "committedDate": "2020-10-26T20:41:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0NDM3Mw==", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512344373", "bodyText": "nit: A better general pattern is to use assertEquals comparing against empty list. Then if the assertion fails, the message will show what was in the collection.", "author": "hachikuji", "createdAt": "2020-10-27T00:20:17Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -46,6 +46,30 @@\n     private final TopicPartition tp2 = new TopicPartition(\"bar\", 2);\n     private final Optional<String> groupInstanceId = Optional.of(\"instance.id\");\n \n+    @Test\n+    public void serializeDeserializeSubscriptionAllVersions() {\n+        List<TopicPartition> ownedPartitions = Arrays.asList(\n+            new TopicPartition(\"foo\", 0),\n+            new TopicPartition(\"bar\", 0));\n+        Subscription subscription = new Subscription(Arrays.asList(\"foo\", \"bar\"),\n+            ByteBuffer.wrap(\"hello\".getBytes()), ownedPartitions);\n+\n+        for (short version = ConsumerProtocolSubscription.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolSubscription.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeSubscription(subscription, version);\n+            Subscription parsedSubscription = ConsumerProtocol.deserializeSubscription(buffer);\n+\n+            assertEquals(subscription.topics(), parsedSubscription.topics());\n+            assertEquals(subscription.userData(), parsedSubscription.userData());\n+            assertFalse(parsedSubscription.groupInstanceId().isPresent());\n+\n+            if (version >= 1) {\n+                assertEquals(toSet(subscription.ownedPartitions()), toSet(parsedSubscription.ownedPartitions()));\n+            } else {\n+                assertTrue(parsedSubscription.ownedPartitions().isEmpty());", "originalCommit": "e8b70d04e1b600e14dec888b3000626074630703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1ODA3OA==", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512458078", "bodyText": "Good point.", "author": "dajac", "createdAt": "2020-10-27T07:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0NDM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bd83e0ee10e0d7f64c7e82d7fc7bad331db9c869", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java b/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java\nindex 7895999082..5fc5f83826 100644\n--- a/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java\n+++ b/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java\n\n@@ -65,7 +65,7 @@ public class ConsumerProtocolTest {\n             if (version >= 1) {\n                 assertEquals(toSet(subscription.ownedPartitions()), toSet(parsedSubscription.ownedPartitions()));\n             } else {\n-                assertTrue(parsedSubscription.ownedPartitions().isEmpty());\n+                assertEquals(Collections.emptyList(), parsedSubscription.ownedPartitions());\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzYwNw==", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512397607", "bodyText": "Does it compare to incorrect object (maybe assignment.userData())?", "author": "chia7712", "createdAt": "2020-10-27T03:38:09Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -137,6 +161,19 @@ public void deserializeFutureSubscriptionVersion() {\n         assertEquals(groupInstanceId, subscription.groupInstanceId());\n     }\n \n+    @Test\n+    public void serializeDeserializeAssignmentAllVersions() {\n+        List<TopicPartition> partitions = Arrays.asList(tp1, tp2);\n+        Assignment assignment = new Assignment(partitions, ByteBuffer.wrap(\"hello\".getBytes()));\n+\n+        for (short version = ConsumerProtocolAssignment.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolAssignment.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeAssignment(assignment, version);\n+            Assignment parsedAssignment = ConsumerProtocol.deserializeAssignment(buffer);\n+            assertEquals(toSet(partitions), toSet(parsedAssignment.partitions()));\n+            assertEquals(parsedAssignment.userData(), parsedAssignment.userData());", "originalCommit": "e8b70d04e1b600e14dec888b3000626074630703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1ODE1MQ==", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512458151", "bodyText": "Good catch!", "author": "dajac", "createdAt": "2020-10-27T07:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "bd83e0ee10e0d7f64c7e82d7fc7bad331db9c869", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java b/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java\nindex 7895999082..5fc5f83826 100644\n--- a/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java\n+++ b/clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java\n\n@@ -170,7 +170,7 @@ public class ConsumerProtocolTest {\n             ByteBuffer buffer = ConsumerProtocol.serializeAssignment(assignment, version);\n             Assignment parsedAssignment = ConsumerProtocol.deserializeAssignment(buffer);\n             assertEquals(toSet(partitions), toSet(parsedAssignment.partitions()));\n-            assertEquals(parsedAssignment.userData(), parsedAssignment.userData());\n+            assertEquals(assignment.userData(), parsedAssignment.userData());\n         }\n     }\n \n"}}, {"oid": "bd83e0ee10e0d7f64c7e82d7fc7bad331db9c869", "url": "https://github.com/apache/kafka/commit/bd83e0ee10e0d7f64c7e82d7fc7bad331db9c869", "message": "address reviews", "committedDate": "2020-10-27T07:19:17Z", "type": "commit"}]}