{"pr_number": 8357, "pr_title": "KAFKA-9767: Add logging to basic auth rest extension", "pr_createdAt": "2020-03-26T00:27:48Z", "pr_url": "https://github.com/apache/kafka/pull/8357", "timeline": [{"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "url": "https://github.com/apache/kafka/commit/3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "message": "KAFKA-9767: Add logging to basic auth rest extension", "committedDate": "2020-03-26T00:25:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0NzMyOQ==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404447329", "bodyText": "This log is likely a duplicate of the one that we have in the initialize. Should we log this for every login?", "author": "mageshn", "createdAt": "2020-04-06T23:24:56Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n         String username = ((NameCallback) callbacks[0]).getName();\n         char[] passwordChars = ((PasswordCallback) callbacks[1]).getPassword();\n         String password = passwordChars != null ? new String(passwordChars) : null;\n         Properties credentialProperties = credentialPropertiesMap.get(fileName);\n-        authenticated = credentialProperties.isEmpty() ||\n-                        (password != null && password.equals(credentialProperties.get(username)));\n+\n+        if (credentialProperties.isEmpty()) {\n+            log.trace(\"Not validating credentials for user '{}' as credential properties file '{}' is empty\",", "originalCommit": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzk5MA==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404453990", "bodyText": "I think it's alright if it's at TRACE level. My thinking was that since some Connect clusters are left running for a long time, the original log line in initialize may be lost by the time someone wants to investigate the behavior of the extension.", "author": "C0urante", "createdAt": "2020-04-06T23:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0NzMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODUxMw==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r405718513", "bodyText": "Typically, most users push logs to something like elastic/splunk and should be able to lookup the logs from the archive. I'm not too concerned about this since properties file based credentials store shouldn't typically be used in a production environment. So,I'm fine leaving the log statement in here. But let's see what the committers have to say fro this :).", "author": "mageshn", "createdAt": "2020-04-08T18:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0NzMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzYyNg==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r405757626", "bodyText": "I think it's a pretty big assumption that users will have infinite (or at least very forgiving) log retention, though, and banking on that leaves ones who have more conservative policies out on their own.\nAdditionally, the log message in initialize would be sufficient for anyone who knew to look for it, but for anyone else, a log message that happens whenever a REST request that gets authenticated would be easier to spot.", "author": "C0urante", "createdAt": "2020-04-08T19:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0NzMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\nindex e59157d59f..c6b181e501 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n\n@@ -93,7 +93,7 @@ public class PropertyFileLoginModule implements LoginModule {\n             log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n-            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n+            log.warn(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODAwMg==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404448002", "bodyText": "do we really need that we matched it? Can't we do all all of this is a single log statement? We can include size of credentials map and authenticated boolean. This will help keep the old structure.", "author": "mageshn", "createdAt": "2020-04-06T23:26:53Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n         String username = ((NameCallback) callbacks[0]).getName();\n         char[] passwordChars = ((PasswordCallback) callbacks[1]).getPassword();\n         String password = passwordChars != null ? new String(passwordChars) : null;\n         Properties credentialProperties = credentialPropertiesMap.get(fileName);\n-        authenticated = credentialProperties.isEmpty() ||\n-                        (password != null && password.equals(credentialProperties.get(username)));\n+\n+        if (credentialProperties.isEmpty()) {\n+            log.trace(\"Not validating credentials for user '{}' as credential properties file '{}' is empty\",\n+                username,\n+                fileName);\n+            authenticated = true;\n+        } else if (password != null && password.equals(credentialProperties.get(username))) {\n+            log.trace(\"Credentials provided for user '{}' match those present in the credential properties file '{}'\",", "originalCommit": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NjAxMw==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404456013", "bodyText": "I think at TRACE level it makes sense to be more generous with logging; if the structure is unreadable because of the changes here I guess we can modify things but it still seems legible to me and might save someone a headache down the road when trying to debug issues with the extension.", "author": "C0urante", "createdAt": "2020-04-06T23:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\nindex e59157d59f..c6b181e501 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n\n@@ -93,7 +93,7 @@ public class PropertyFileLoginModule implements LoginModule {\n             log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n-            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n+            log.warn(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODQ1Mw==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404448453", "bodyText": "Any reason why we want to iterate all the call backs and then throw an exception?", "author": "mageshn", "createdAt": "2020-04-06T23:28:23Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            Callback unsupportedCallback = null;\n             for (Callback callback : callbacks) {\n                 if (callback instanceof NameCallback) {\n                     ((NameCallback) callback).setName(username);\n                 } else if (callback instanceof PasswordCallback) {\n                     ((PasswordCallback) callback).setPassword(password.toCharArray());\n                 } else {\n-                    throw new UnsupportedCallbackException(callback, \"Supports only NameCallback \"\n-                                                                     + \"and PasswordCallback\");\n+                    // Log at WARN level here as this indicates incompatibility between the Connect basic auth\n+                    // extension and the JAAS login module that the user has configured and it is likely that the\n+                    // worker will need to be reconfigured and restarted\n+                    log.warn(\n+                        \"Asked to handle unsupported callback '{}' of type {}; request authentication will fail\",\n+                        callback,\n+                        callback.getClass()\n+                    );\n+                    if (unsupportedCallback == null)", "originalCommit": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1MDQxNw==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404450417", "bodyText": "Yes, this adds additional logging to let us see a complete list of the invalid callbacks.", "author": "C0urante", "createdAt": "2020-04-06T23:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7728d3ca1862b836b22fee4b1c73d6566a7becb6", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\nindex 35838a538f..611887951a 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n\n@@ -97,7 +97,7 @@ public class JaasBasicAuthFilter implements ContainerRequestFilter {\n \n             String method = credentials.substring(0, space);\n             if (!BASIC.equalsIgnoreCase(method)) {\n-                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", BASIC, method);\n                 return;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNjIxNw==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r405716217", "bodyText": "Should this be warn. Its likely an incorrect set up that can potentially cause this and might be useful to know it by default.", "author": "mageshn", "createdAt": "2020-04-08T18:08:44Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.trace(\"Authentication failed while invoking JAAS login callbacks\");", "originalCommit": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MTgyNA==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r405761824", "bodyText": "Sure, will do.", "author": "C0urante", "createdAt": "2020-04-08T19:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\nindex e59157d59f..c6b181e501 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n\n@@ -93,7 +93,7 @@ public class PropertyFileLoginModule implements LoginModule {\n             log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n-            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n+            log.warn(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n"}}, {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "url": "https://github.com/apache/kafka/commit/cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "message": "Bump authentication failure log level to WARN", "committedDate": "2020-04-08T19:29:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MTczMg==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421841732", "bodyText": "Would it help to actually list the method that was used, in case somebody thought they were using basic?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.trace(\"Request credentials did not use basic authentication; ignoring\");\n          \n          \n            \n                            log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", BASIC, method);", "author": "rhauch", "createdAt": "2020-05-07T23:00:06Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");", "originalCommit": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7728d3ca1862b836b22fee4b1c73d6566a7becb6", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\nindex 35838a538f..611887951a 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n\n@@ -97,7 +97,7 @@ public class JaasBasicAuthFilter implements ContainerRequestFilter {\n \n             String method = credentials.substring(0, space);\n             if (!BASIC.equalsIgnoreCase(method)) {\n-                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", BASIC, method);\n                 return;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MzE0Nw==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421843147", "bodyText": "The comment above says:\n\nand it is likely that the worker will need to be reconfigured and restarted\n\nShould the log message say this? Something more like:\n\nUnsupported callback '{}' of type {}; request authentication will fail. This indicates the Connect worker was configured incorrectly, and will need to be corrected and restarted.\n\nThe more specific we could be about what might have been misconfigured, the better.", "author": "rhauch", "createdAt": "2020-05-07T23:04:35Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            Callback unsupportedCallback = null;\n             for (Callback callback : callbacks) {\n                 if (callback instanceof NameCallback) {\n                     ((NameCallback) callback).setName(username);\n                 } else if (callback instanceof PasswordCallback) {\n                     ((PasswordCallback) callback).setPassword(password.toCharArray());\n                 } else {\n-                    throw new UnsupportedCallbackException(callback, \"Supports only NameCallback \"\n-                                                                     + \"and PasswordCallback\");\n+                    // Log at WARN level here as this indicates incompatibility between the Connect basic auth\n+                    // extension and the JAAS login module that the user has configured and it is likely that the\n+                    // worker will need to be reconfigured and restarted\n+                    log.warn(\n+                        \"Asked to handle unsupported callback '{}' of type {}; request authentication will fail\",", "originalCommit": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7728d3ca1862b836b22fee4b1c73d6566a7becb6", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\nindex 35838a538f..611887951a 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n\n@@ -97,7 +97,7 @@ public class JaasBasicAuthFilter implements ContainerRequestFilter {\n \n             String method = credentials.substring(0, space);\n             if (!BASIC.equalsIgnoreCase(method)) {\n-                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", BASIC, method);\n                 return;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NTIwNA==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421855204", "bodyText": "Here we're only reporting the last of potentially multiple unsupported callbacks, right? Should we be generating a list of unsupported callbacks here if we're waiting to throw the exception?", "author": "rhauch", "createdAt": "2020-05-07T23:41:49Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            Callback unsupportedCallback = null;\n             for (Callback callback : callbacks) {\n                 if (callback instanceof NameCallback) {\n                     ((NameCallback) callback).setName(username);\n                 } else if (callback instanceof PasswordCallback) {\n                     ((PasswordCallback) callback).setPassword(password.toCharArray());\n                 } else {\n-                    throw new UnsupportedCallbackException(callback, \"Supports only NameCallback \"\n-                                                                     + \"and PasswordCallback\");\n+                    // Log at WARN level here as this indicates incompatibility between the Connect basic auth\n+                    // extension and the JAAS login module that the user has configured and it is likely that the\n+                    // worker will need to be reconfigured and restarted\n+                    log.warn(\n+                        \"Asked to handle unsupported callback '{}' of type {}; request authentication will fail\",\n+                        callback,\n+                        callback.getClass()\n+                    );\n+                    if (unsupportedCallback == null)\n+                        unsupportedCallback = callback;\n                 }\n             }\n+            if (unsupportedCallback != null)\n+                throw new UnsupportedCallbackException(\n+                    unsupportedCallback,\n+                    \"Supports only NameCallback and PasswordCallback\");", "originalCommit": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1OTM4Ng==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421859386", "bodyText": "I wanted to preserve the content of the original exception message here. If it's fine to change it, then yes, it'd definitely be an improvement to include the whole list here.", "author": "C0urante", "createdAt": "2020-05-07T23:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "7728d3ca1862b836b22fee4b1c73d6566a7becb6", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\nindex 35838a538f..611887951a 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java\n\n@@ -97,7 +97,7 @@ public class JaasBasicAuthFilter implements ContainerRequestFilter {\n \n             String method = credentials.substring(0, space);\n             if (!BASIC.equalsIgnoreCase(method)) {\n-                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", BASIC, method);\n                 return;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NTcwNA==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421855704", "bodyText": "Doesn't this catch handle all exceptions, including authentication failures? Do we really want to log all of those auth failures at WARN?", "author": "rhauch", "createdAt": "2020-05-07T23:43:35Z", "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.warn(\"Authentication failed while invoking JAAS login callbacks\");", "originalCommit": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NjE5Nw==", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421866197", "bodyText": "I don't think this is going to get logged for auth failures (assuming you mean things like incorrect username/password, bad auth header, etc.).\nYou can see the code for callbackHandler::handle in the JaasBasicAuthFilter.BasicAuthCallBackHandler class; the only expected exception would be an UnsupportedCallbackException, which probably does warrant logging at WARN level.\nI'd like to refactor this slightly to take into account your feedback about the logging/exception logic in JaasBasicAuthFilter.BasicAuthCallBackHandler::handle; I think we can keep this log message here, and use it in lieu of the WARN-level messages in the other file.", "author": "C0urante", "createdAt": "2020-05-08T00:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NTcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "1303f8eec1e7ae53f341e24711b9168234c4ebe1", "chunk": "diff --git a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\nindex c6b181e501..8a26dc3524 100644\n--- a/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n+++ b/connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java\n\n@@ -93,7 +93,7 @@ public class PropertyFileLoginModule implements LoginModule {\n             log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n-            log.warn(\"Authentication failed while invoking JAAS login callbacks\");\n+            log.warn(\"Authentication failed while invoking JAAS login callbacks\", e);\n             throw new LoginException(e.getMessage());\n         }\n \n"}}, {"oid": "7728d3ca1862b836b22fee4b1c73d6566a7becb6", "url": "https://github.com/apache/kafka/commit/7728d3ca1862b836b22fee4b1c73d6566a7becb6", "message": "KAFKA-9767: Apply suggestions from code review\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>", "committedDate": "2020-05-08T00:20:04Z", "type": "commit"}, {"oid": "1303f8eec1e7ae53f341e24711b9168234c4ebe1", "url": "https://github.com/apache/kafka/commit/1303f8eec1e7ae53f341e24711b9168234c4ebe1", "message": "KAFKA-9767: Address review comments, remove unnecessary logging when credentials are malformed or not provided", "committedDate": "2020-05-20T19:35:12Z", "type": "commit"}, {"oid": "1303f8eec1e7ae53f341e24711b9168234c4ebe1", "url": "https://github.com/apache/kafka/commit/1303f8eec1e7ae53f341e24711b9168234c4ebe1", "message": "KAFKA-9767: Address review comments, remove unnecessary logging when credentials are malformed or not provided", "committedDate": "2020-05-20T19:35:12Z", "type": "forcePushed"}]}