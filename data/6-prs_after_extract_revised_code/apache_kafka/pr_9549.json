{"pr_number": 9549, "pr_title": "KIP-145: Add SMTs, HeaderFrom, DropHeaders and InsertHeader", "pr_createdAt": "2020-11-03T16:09:55Z", "pr_url": "https://github.com/apache/kafka/pull/9549", "timeline": [{"oid": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "url": "https://github.com/apache/kafka/commit/1a79ffde1159c709dd1b7563c1ed6359a762685b", "message": "Docs", "committedDate": "2020-11-26T17:39:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODI2MTA3MA==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r588261070", "bodyText": "Unused import", "author": "mimaison", "createdAt": "2021-03-05T12:31:05Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.transforms;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;", "originalCommit": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "chunk": "diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java\nindex 162ac75a58..88b20020eb 100644\n--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java\n+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java\n\n@@ -18,7 +18,6 @@ package org.apache.kafka.connect.transforms;\n \n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.connect.connector.ConnectRecord;\n-import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.SchemaAndValue;\n import org.apache.kafka.connect.data.Values;\n import org.apache.kafka.connect.header.Headers;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODI2Mjg4OA==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r588262888", "bodyText": "We don't have this transformation!", "author": "mimaison", "createdAt": "2021-03-05T12:34:55Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/tools/TransformationDoc.java", "diffHunk": "@@ -18,11 +18,15 @@\n \n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.connect.transforms.Cast;\n+import org.apache.kafka.connect.transforms.DropHeaders;\n import org.apache.kafka.connect.transforms.ExtractField;\n import org.apache.kafka.connect.transforms.Filter;\n import org.apache.kafka.connect.transforms.Flatten;\n+import org.apache.kafka.connect.transforms.HeaderFrom;\n+import org.apache.kafka.connect.transforms.HeaderTo;", "originalCommit": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/tools/TransformationDoc.java b/connect/runtime/src/main/java/org/apache/kafka/connect/tools/TransformationDoc.java\nindex e29a7c6c3a..5771a6b0ed 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/tools/TransformationDoc.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/tools/TransformationDoc.java\n\n@@ -23,7 +23,6 @@ import org.apache.kafka.connect.transforms.ExtractField;\n import org.apache.kafka.connect.transforms.Filter;\n import org.apache.kafka.connect.transforms.Flatten;\n import org.apache.kafka.connect.transforms.HeaderFrom;\n-import org.apache.kafka.connect.transforms.HeaderTo;\n import org.apache.kafka.connect.transforms.HoistField;\n import org.apache.kafka.connect.transforms.InsertField;\n import org.apache.kafka.connect.transforms.InsertHeader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODMyMTY1Mw==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r588321653", "bodyText": "Because Headers is a LinkedList, remove() has to iterate the whole list each time. I wonder if we could instead start from an empty headers list and add the headers not being removed?", "author": "mimaison", "createdAt": "2021-03-05T14:09:33Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.transforms;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.SimpleConfig;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DropHeaders<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    public static final String OVERVIEW_DOC =\n+            \"Removes one or more headers from each record.\";\n+\n+    public static final String HEADERS_FIELD = \"headers\";\n+\n+    public static final ConfigDef CONFIG_DEF = new ConfigDef()\n+            .define(HEADERS_FIELD, ConfigDef.Type.LIST, ConfigDef.Importance.HIGH,\n+                    \"The name of the headers to be removed.\");\n+\n+    private List<String> headers;\n+\n+    @Override\n+    public R apply(R record) {\n+        Headers updatedHeaders = record.headers().duplicate();\n+        for (String name : headers) {\n+            updatedHeaders.remove(name);", "originalCommit": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "chunk": "diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\nindex c92c80c446..6d1e1a4981 100644\n--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\n+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\n\n@@ -18,11 +18,17 @@ package org.apache.kafka.connect.transforms;\n \n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.header.ConnectHeaders;\n+import org.apache.kafka.connect.header.Header;\n import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.NonEmptyListValidator;\n import org.apache.kafka.connect.transforms.util.SimpleConfig;\n \n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n+\n+import static org.apache.kafka.common.config.ConfigDef.NO_DEFAULT_VALUE;\n \n public class DropHeaders<R extends ConnectRecord<R>> implements Transformation<R> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODMyMTc0Mw==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r588321743", "bodyText": "nit, extra line", "author": "mimaison", "createdAt": "2021-03-05T14:09:42Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.transforms;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.SimpleConfig;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DropHeaders<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    public static final String OVERVIEW_DOC =\n+            \"Removes one or more headers from each record.\";\n+\n+    public static final String HEADERS_FIELD = \"headers\";\n+\n+    public static final ConfigDef CONFIG_DEF = new ConfigDef()\n+            .define(HEADERS_FIELD, ConfigDef.Type.LIST, ConfigDef.Importance.HIGH,\n+                    \"The name of the headers to be removed.\");\n+\n+    private List<String> headers;\n+\n+    @Override\n+    public R apply(R record) {\n+        Headers updatedHeaders = record.headers().duplicate();\n+        for (String name : headers) {\n+            updatedHeaders.remove(name);\n+        }\n+        return record.newRecord(record.topic(), record.kafkaPartition(), record.keySchema(), record.key(),\n+                record.valueSchema(), record.value(), record.timestamp(), updatedHeaders);\n+    }\n+", "originalCommit": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "chunk": "diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\nindex c92c80c446..6d1e1a4981 100644\n--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\n+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\n\n@@ -18,11 +18,17 @@ package org.apache.kafka.connect.transforms;\n \n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.header.ConnectHeaders;\n+import org.apache.kafka.connect.header.Header;\n import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.NonEmptyListValidator;\n import org.apache.kafka.connect.transforms.util.SimpleConfig;\n \n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n+\n+import static org.apache.kafka.common.config.ConfigDef.NO_DEFAULT_VALUE;\n \n public class DropHeaders<R extends ConnectRecord<R>> implements Transformation<R> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODMyMTc5Ng==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r588321796", "bodyText": "nit, extra line", "author": "mimaison", "createdAt": "2021-03-05T14:09:48Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.transforms;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.SimpleConfig;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DropHeaders<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    public static final String OVERVIEW_DOC =\n+            \"Removes one or more headers from each record.\";\n+\n+    public static final String HEADERS_FIELD = \"headers\";\n+\n+    public static final ConfigDef CONFIG_DEF = new ConfigDef()\n+            .define(HEADERS_FIELD, ConfigDef.Type.LIST, ConfigDef.Importance.HIGH,\n+                    \"The name of the headers to be removed.\");\n+\n+    private List<String> headers;\n+\n+    @Override\n+    public R apply(R record) {\n+        Headers updatedHeaders = record.headers().duplicate();\n+        for (String name : headers) {\n+            updatedHeaders.remove(name);\n+        }\n+        return record.newRecord(record.topic(), record.kafkaPartition(), record.keySchema(), record.key(),\n+                record.valueSchema(), record.value(), record.timestamp(), updatedHeaders);\n+    }\n+\n+\n+    @Override\n+    public ConfigDef config() {\n+        return CONFIG_DEF;\n+    }\n+\n+    @Override\n+    public void close() {\n+", "originalCommit": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "chunk": "diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\nindex c92c80c446..6d1e1a4981 100644\n--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\n+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/DropHeaders.java\n\n@@ -18,11 +18,17 @@ package org.apache.kafka.connect.transforms;\n \n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.header.ConnectHeaders;\n+import org.apache.kafka.connect.header.Header;\n import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.NonEmptyListValidator;\n import org.apache.kafka.connect.transforms.util.SimpleConfig;\n \n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n+\n+import static org.apache.kafka.common.config.ConfigDef.NO_DEFAULT_VALUE;\n \n public class DropHeaders<R extends ConnectRecord<R>> implements Transformation<R> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODMzNjIyNw==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r588336227", "bodyText": "Should we enforce these fields are not null?", "author": "mimaison", "createdAt": "2021-03-05T14:29:55Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.transforms;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaAndValue;\n+import org.apache.kafka.connect.data.Values;\n+import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.SimpleConfig;\n+\n+import java.util.Map;\n+\n+public class InsertHeader<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    public static final String OVERVIEW_DOC =\n+            \"Add a header to each record.\";\n+\n+    public static final String HEADER_FIELD = \"header\";\n+    public static final String VALUE_LITERAL_FIELD = \"value.literal\";\n+\n+    public static final ConfigDef CONFIG_DEF = new ConfigDef()\n+            .define(HEADER_FIELD, ConfigDef.Type.STRING, ConfigDef.Importance.HIGH,\n+                    \"The name of the header.\")\n+            .define(VALUE_LITERAL_FIELD, ConfigDef.Type.STRING, ConfigDef.Importance.HIGH,", "originalCommit": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODU0NjIxNw==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r608546217", "bodyText": "I guess that makes sense @mimaison, but then for consistency shouldn't we make DropHeaders.headers, HeaderFrom.headers and HeaderFrom.fields reject empty lists?", "author": "tombentley", "createdAt": "2021-04-07T10:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODMzNjIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "chunk": "diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java\nindex 162ac75a58..88b20020eb 100644\n--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java\n+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertHeader.java\n\n@@ -18,7 +18,6 @@ package org.apache.kafka.connect.transforms;\n \n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.connect.connector.ConnectRecord;\n-import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.SchemaAndValue;\n import org.apache.kafka.connect.data.Values;\n import org.apache.kafka.connect.header.Headers;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODMzODI4MA==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r588338280", "bodyText": "Should we reuse MOVE_OPERATION and COPY_OPERATION here?", "author": "mimaison", "createdAt": "2021-03-05T14:32:51Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.transforms;\n+\n+import org.apache.kafka.common.cache.Cache;\n+import org.apache.kafka.common.cache.LRUCache;\n+import org.apache.kafka.common.cache.SynchronizedCache;\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.header.Header;\n+import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.Requirements;\n+import org.apache.kafka.connect.transforms.util.SchemaUtil;\n+import org.apache.kafka.connect.transforms.util.SimpleConfig;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.lang.String.format;\n+import static org.apache.kafka.common.config.ConfigDef.NO_DEFAULT_VALUE;\n+\n+public abstract class HeaderFrom<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    public static final String FIELDS_FIELD = \"fields\";\n+    public static final String HEADERS_FIELD = \"headers\";\n+    public static final String OPERATION_FIELD = \"operation\";\n+    private static final String MOVE_OPERATION = \"move\";\n+    private static final String COPY_OPERATION = \"copy\";\n+\n+    public static final String OVERVIEW_DOC =\n+            \"Moves or copies fields in the key/value of a record into that record's headers. \" +\n+                    \"Corresponding elements of <code>\" + FIELDS_FIELD + \"</code> and \" +\n+                    \"<code>\" + HEADERS_FIELD + \"</code> together identify a field and the header it should be \" +\n+                    \"moved or copied to. \" +\n+                    \"Use the concrete transformation type designed for the record \" +\n+                    \"key (<code>\" + Key.class.getName() + \"</code>) or value (<code>\" + Value.class.getName() + \"</code>).\";\n+\n+    public static final ConfigDef CONFIG_DEF = new ConfigDef()\n+            .define(FIELDS_FIELD, ConfigDef.Type.LIST, ConfigDef.Importance.HIGH,\n+                    \"Field names in the record whose values are to be copied or moved to headers.\")\n+            .define(HEADERS_FIELD, ConfigDef.Type.LIST, ConfigDef.Importance.HIGH,\n+                    \"Header names, in the same order as the field names listed in the fields configuration property.\")\n+            .define(OPERATION_FIELD, ConfigDef.Type.STRING, NO_DEFAULT_VALUE,\n+                    ConfigDef.ValidString.in(\"move\", \"copy\"), ConfigDef.Importance.HIGH,", "originalCommit": "1a79ffde1159c709dd1b7563c1ed6359a762685b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "chunk": "diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java\nindex 40033f89f7..b32ad567e8 100644\n--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java\n+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java\n\n@@ -28,6 +28,7 @@ import org.apache.kafka.connect.data.SchemaBuilder;\n import org.apache.kafka.connect.data.Struct;\n import org.apache.kafka.connect.header.Header;\n import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.NonEmptyListValidator;\n import org.apache.kafka.connect.transforms.util.Requirements;\n import org.apache.kafka.connect.transforms.util.SchemaUtil;\n import org.apache.kafka.connect.transforms.util.SimpleConfig;\n"}}, {"oid": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "url": "https://github.com/apache/kafka/commit/a211f1e5003d31c87c678f50e6b56fb0ffc84388", "message": "Convert tests to junit5", "committedDate": "2021-04-07T11:21:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzkxMzkwMQ==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r613913901", "bodyText": "Even though I don't think it's reachable by users, should we have a message here?", "author": "mimaison", "createdAt": "2021-04-15T09:32:50Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.transforms;\n+\n+import org.apache.kafka.common.cache.Cache;\n+import org.apache.kafka.common.cache.LRUCache;\n+import org.apache.kafka.common.cache.SynchronizedCache;\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.header.Header;\n+import org.apache.kafka.connect.header.Headers;\n+import org.apache.kafka.connect.transforms.util.NonEmptyListValidator;\n+import org.apache.kafka.connect.transforms.util.Requirements;\n+import org.apache.kafka.connect.transforms.util.SchemaUtil;\n+import org.apache.kafka.connect.transforms.util.SimpleConfig;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.lang.String.format;\n+import static org.apache.kafka.common.config.ConfigDef.NO_DEFAULT_VALUE;\n+\n+public abstract class HeaderFrom<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    public static final String FIELDS_FIELD = \"fields\";\n+    public static final String HEADERS_FIELD = \"headers\";\n+    public static final String OPERATION_FIELD = \"operation\";\n+    private static final String MOVE_OPERATION = \"move\";\n+    private static final String COPY_OPERATION = \"copy\";\n+\n+    public static final String OVERVIEW_DOC =\n+            \"Moves or copies fields in the key/value of a record into that record's headers. \" +\n+                    \"Corresponding elements of <code>\" + FIELDS_FIELD + \"</code> and \" +\n+                    \"<code>\" + HEADERS_FIELD + \"</code> together identify a field and the header it should be \" +\n+                    \"moved or copied to. \" +\n+                    \"Use the concrete transformation type designed for the record \" +\n+                    \"key (<code>\" + Key.class.getName() + \"</code>) or value (<code>\" + Value.class.getName() + \"</code>).\";\n+\n+    public static final ConfigDef CONFIG_DEF = new ConfigDef()\n+            .define(FIELDS_FIELD, ConfigDef.Type.LIST,\n+                    NO_DEFAULT_VALUE, new NonEmptyListValidator(),\n+                    ConfigDef.Importance.HIGH,\n+                    \"Field names in the record whose values are to be copied or moved to headers.\")\n+            .define(HEADERS_FIELD, ConfigDef.Type.LIST,\n+                    NO_DEFAULT_VALUE, new NonEmptyListValidator(),\n+                    ConfigDef.Importance.HIGH,\n+                    \"Header names, in the same order as the field names listed in the fields configuration property.\")\n+            .define(OPERATION_FIELD, ConfigDef.Type.STRING, NO_DEFAULT_VALUE,\n+                    ConfigDef.ValidString.in(MOVE_OPERATION, COPY_OPERATION), ConfigDef.Importance.HIGH,\n+                    \"Either <code>move</code> if the fields are to be moved to the headers (removed from the key/value), \" +\n+                            \"or <code>copy</code> if the fields are to be copied to the headers (retained in the key/value).\");\n+\n+    enum Operation {\n+        MOVE(MOVE_OPERATION),\n+        COPY(COPY_OPERATION);\n+\n+        private final String name;\n+\n+        Operation(String name) {\n+            this.name = name;\n+        }\n+\n+        static Operation fromName(String name) {\n+            switch (name) {\n+                case MOVE_OPERATION:\n+                    return MOVE;\n+                case COPY_OPERATION:\n+                    return COPY;\n+                default:\n+                    throw new IllegalArgumentException();", "originalCommit": "a211f1e5003d31c87c678f50e6b56fb0ffc84388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzkyNjEwNw==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r613926107", "bodyText": "It is impossible due to the ConfigDef.ValidString.in(MOVE_OPERATION, COPY_OPERATION), so this is really an assertion failure. The line number in the stacktrace would be enough to track it down if it ever did happen due to a later refactoring, so imho an error message is of no value. But I'm happy to add one if you like.", "author": "tombentley", "createdAt": "2021-04-15T09:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzkxMzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzkzMTk1NQ==", "url": "https://github.com/apache/kafka/pull/9549#discussion_r613931955", "bodyText": "Ok, that's fair enough. Thanks", "author": "mimaison", "createdAt": "2021-04-15T09:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzkxMzkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1af2b4c8686b03225af7e62f29a9f53f46ae2d4", "chunk": "diff --git a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java\nindex b32ad567e8..94a8edb239 100644\n--- a/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java\n+++ b/connect/transforms/src/main/java/org/apache/kafka/connect/transforms/HeaderFrom.java\n\n@@ -16,9 +16,6 @@\n  */\n package org.apache.kafka.connect.transforms;\n \n-import org.apache.kafka.common.cache.Cache;\n-import org.apache.kafka.common.cache.LRUCache;\n-import org.apache.kafka.common.cache.SynchronizedCache;\n import org.apache.kafka.common.config.ConfigDef;\n import org.apache.kafka.common.config.ConfigException;\n import org.apache.kafka.connect.connector.ConnectRecord;\n"}}, {"oid": "d1af2b4c8686b03225af7e62f29a9f53f46ae2d4", "url": "https://github.com/apache/kafka/commit/d1af2b4c8686b03225af7e62f29a9f53f46ae2d4", "message": "KIP-145: Add unimplementated SMTs, HeaderFrom, DropHeaders and InsertHeader\n\nThese SMTs were originally specified in KIP-145 but never implemented\nat the time.\n\nHeaderTo is not included since its original specification doesn't deal with\nthe fact that there can be >1 header with the same name, but a field can only\nhave a single value (which could be an array, but not if the headers for\nthe given name had different schemas).", "committedDate": "2021-04-16T08:14:48Z", "type": "commit"}, {"oid": "3233c5954d3a7dd0c3be50f3d02fc6f95acee799", "url": "https://github.com/apache/kafka/commit/3233c5954d3a7dd0c3be50f3d02fc6f95acee799", "message": "Review comments", "committedDate": "2021-04-16T08:14:48Z", "type": "commit"}, {"oid": "9e8ef0b30ff27329ed68650d5b0c899b8c6a0201", "url": "https://github.com/apache/kafka/commit/9e8ef0b30ff27329ed68650d5b0c899b8c6a0201", "message": "Docs", "committedDate": "2021-04-16T08:14:48Z", "type": "commit"}, {"oid": "6e75b8cf48611d253ea513795ab6f7a79ffee069", "url": "https://github.com/apache/kafka/commit/6e75b8cf48611d253ea513795ab6f7a79ffee069", "message": "Review comments", "committedDate": "2021-04-16T08:14:48Z", "type": "commit"}, {"oid": "c7ef2dc934db78512a5192b1450edb38f9e4461f", "url": "https://github.com/apache/kafka/commit/c7ef2dc934db78512a5192b1450edb38f9e4461f", "message": "Convert tests to junit5", "committedDate": "2021-04-16T08:14:48Z", "type": "commit"}, {"oid": "c7ef2dc934db78512a5192b1450edb38f9e4461f", "url": "https://github.com/apache/kafka/commit/c7ef2dc934db78512a5192b1450edb38f9e4461f", "message": "Convert tests to junit5", "committedDate": "2021-04-16T08:14:48Z", "type": "forcePushed"}]}