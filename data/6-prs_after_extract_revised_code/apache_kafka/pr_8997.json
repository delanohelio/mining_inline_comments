{"pr_number": 8997, "pr_title": "MINOR: Improve log4j for per-consumer assignment", "pr_createdAt": "2020-07-09T01:27:29Z", "pr_url": "https://github.com/apache/kafka/pull/8997", "timeline": [{"oid": "763aa52a4658848e69345e3e5708d36ccb2439c4", "url": "https://github.com/apache/kafka/commit/763aa52a4658848e69345e3e5708d36ccb2439c4", "message": "improve log4j for per-consumer assignment", "committedDate": "2020-07-09T00:54:45Z", "type": "commit"}, {"oid": "3ae2df4f211dc247e3f71587ab9ec8dec3599e61", "url": "https://github.com/apache/kafka/commit/3ae2df4f211dc247e3f71587ab9ec8dec3599e61", "message": "add log4j for revoking active too", "committedDate": "2020-07-09T01:26:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxMjI5OA==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r451912298", "bodyText": "This is not used anywhere.", "author": "guozhangwang", "createdAt": "2020-07-09T01:28:24Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java", "diffHunk": "@@ -66,32 +72,17 @@ public ClientState() {\n         prevActiveTasks = new TreeSet<>();\n         prevStandbyTasks = new TreeSet<>();\n         consumerToPreviousStatefulTaskIds = new TreeMap<>();\n+        consumerToPreviousActiveTaskIds = new TreeMap<>();\n+        consumerToAssignedActiveTaskIds = new TreeMap<>();\n+        consumerToAssignedStandbyTaskIds = new TreeMap<>();\n+        consumerToRevokingActiveTaskIds = new TreeMap<>();\n         ownedPartitions = new TreeMap<>(TOPIC_PARTITION_COMPARATOR);\n         taskOffsetSums = new TreeMap<>();\n         taskLagTotals = new TreeMap<>();\n         this.capacity = capacity;\n     }\n \n-    private ClientState(final Set<TaskId> activeTasks,", "originalCommit": "3ae2df4f211dc247e3f71587ab9ec8dec3599e61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "581980bfe301fa6f09a6fa8f7375d78955a09bbf", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\nindex 58f2574e28..9be0b24c17 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n\n@@ -67,16 +68,8 @@ public class ClientState {\n     }\n \n     ClientState(final int capacity) {\n-        activeTasks = new TreeSet<>();\n-        standbyTasks = new TreeSet<>();\n         prevActiveTasks = new TreeSet<>();\n         prevStandbyTasks = new TreeSet<>();\n-        consumerToPreviousStatefulTaskIds = new TreeMap<>();\n-        consumerToPreviousActiveTaskIds = new TreeMap<>();\n-        consumerToAssignedActiveTaskIds = new TreeMap<>();\n-        consumerToAssignedStandbyTaskIds = new TreeMap<>();\n-        consumerToRevokingActiveTaskIds = new TreeMap<>();\n-        ownedPartitions = new TreeMap<>(TOPIC_PARTITION_COMPARATOR);\n         taskOffsetSums = new TreeMap<>();\n         taskLagTotals = new TreeMap<>();\n         this.capacity = capacity;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxMjQ3Mg==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r451912472", "bodyText": "This is unnecessarily verbose, plus part of it is replaced by line 960 below, so I trimmed a bit here.", "author": "guozhangwang", "createdAt": "2020-07-09T01:29:11Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -725,8 +725,10 @@ private boolean assignTasksToClients(final Set<String> allSourceTopics,\n                                                                    statefulTasks,\n                                                                    assignmentConfigs);\n \n-        log.info(\"Assigned tasks to clients as {}{}.\",\n-            Utils.NL, clientStates.entrySet().stream().map(Map.Entry::toString).collect(Collectors.joining(Utils.NL)));\n+        log.info(\"Assigned tasks to clients as: {}{}.\", Utils.NL,", "originalCommit": "3ae2df4f211dc247e3f71587ab9ec8dec3599e61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNTU5OA==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r451915598", "bodyText": "Thanks, this one has always made my head spin when reading the logs", "author": "ableegoldman", "createdAt": "2020-07-09T01:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxMjQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "be0d18c701ffaca095e4404565aaa309b3200525", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\nindex 2afec9bdab..b6bda28a2f 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n\n@@ -725,8 +725,8 @@ public class StreamsPartitionAssignor implements ConsumerPartitionAssignor, Conf\n                                                                    statefulTasks,\n                                                                    assignmentConfigs);\n \n-        log.info(\"Assigned tasks to clients as: {}{}.\", Utils.NL,\n-                clientStates.entrySet().stream()\n+        log.info(\"Assigned tasks {} including stateful {} to clients as: \\n{}.\",\n+                allTasks, statefulTasks, clientStates.entrySet().stream()\n                         .map(entry -> entry.getKey() + \"=\" + entry.getValue().currentAssignment())\n                         .collect(Collectors.joining(Utils.NL)));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNTgxOQ==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r451915819", "bodyText": "super nit: processor --> process (or bet yet, 'client')", "author": "ableegoldman", "createdAt": "2020-07-09T01:41:31Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -931,7 +933,9 @@ private void populatePartitionsByHostMaps(final Map<HostInfo, Set<TopicPartition\n                 state\n             );\n \n-            // Arbitrarily choose the leader's client to be responsible for triggering the probing rebalance\n+            // Arbitrarily choose the leader's client to be responsible for triggering the probing rebalance,\n+            // note once we pick the first consumer of the processor to trigger probing rebalance, other threads", "originalCommit": "3ae2df4f211dc247e3f71587ab9ec8dec3599e61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be0d18c701ffaca095e4404565aaa309b3200525", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\nindex 2afec9bdab..b6bda28a2f 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n\n@@ -934,7 +934,7 @@ public class StreamsPartitionAssignor implements ConsumerPartitionAssignor, Conf\n             );\n \n             // Arbitrarily choose the leader's client to be responsible for triggering the probing rebalance,\n-            // note once we pick the first consumer of the processor to trigger probing rebalance, other threads\n+            // note once we pick the first consumer within the process to trigger probing rebalance, other consumer\n             // would not set to trigger any more.\n             final boolean encodeNextProbingRebalanceTime = shouldTriggerProbingRebalance && clientId.equals(taskManager.processId());\n \n"}}, {"oid": "37c57d567427b9cf9effd1ef44ea7ac99606bb94", "url": "https://github.com/apache/kafka/commit/37c57d567427b9cf9effd1ef44ea7ac99606bb94", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-improve-assignor-log4j", "committedDate": "2020-07-10T17:38:44Z", "type": "commit"}, {"oid": "be0d18c701ffaca095e4404565aaa309b3200525", "url": "https://github.com/apache/kafka/commit/be0d18c701ffaca095e4404565aaa309b3200525", "message": "github comments", "committedDate": "2020-07-10T17:46:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDY5OQ==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r453144699", "bodyText": "Is this a logic change?", "author": "abbccdda", "createdAt": "2020-07-11T02:36:11Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -1078,6 +1098,8 @@ private boolean addClientAssignments(final Map<String, Assignment> assignment,\n                     );\n                     removedActiveTasks.add(taskId);\n \n+                    clientState.revokeActiveFromConsumer(taskId, consumer);", "originalCommit": "be0d18c701ffaca095e4404565aaa309b3200525", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1MzA4MA==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r453353080", "bodyText": "No, the added functions are only for logging purposes.", "author": "guozhangwang", "createdAt": "2020-07-12T19:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDY5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDc1Ng==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r453144756", "bodyText": "Similar here, if we have logical change, probably we need to add more tests.", "author": "abbccdda", "createdAt": "2020-07-11T02:36:59Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -1113,6 +1135,7 @@ private boolean addClientAssignments(final Map<String, Assignment> assignment,\n                                                                  final ClientState clientState) {\n         final Map<TaskId, Set<TopicPartition>> standbyTaskMap = new HashMap<>();\n         for (final TaskId task : standbys) {\n+            clientState.assignStandbyToConsumer(task, consumer);", "originalCommit": "be0d18c701ffaca095e4404565aaa309b3200525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3e5746c7e464f8f0f537bae421196c631e117b7", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\nindex b6bda28a2f..8581dbc1a1 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n\n@@ -1129,28 +1142,30 @@ public class StreamsPartitionAssignor implements ConsumerPartitionAssignor, Conf\n      * @return map from task id to its assigned partitions for all standby tasks\n      */\n     private Map<TaskId, Set<TopicPartition>> buildStandbyTaskMap(final String consumer,\n-                                                                 final Iterable<TaskId> standbys,\n-                                                                 final Iterable<TaskId> tasksRevoked,\n+                                                                 final Iterable<TaskId> standbyTasks,\n+                                                                 final Iterable<TaskId> revokedTasks,\n+                                                                 final Set<TaskId> allStatefulTasks,\n                                                                  final Map<TaskId, Set<TopicPartition>> partitionsForTask,\n                                                                  final ClientState clientState) {\n         final Map<TaskId, Set<TopicPartition>> standbyTaskMap = new HashMap<>();\n-        for (final TaskId task : standbys) {\n-            clientState.assignStandbyToConsumer(task, consumer);\n-            standbyTaskMap.put(task, partitionsForTask.get(task));\n-        }\n-        for (final TaskId task : tasksRevoked) {\n-            log.info(\n-                \"Adding removed active task {} as a standby for {} until it is safely revoked in followup rebalance\",\n-                task,\n-                consumer\n-            );\n \n+        for (final TaskId task : standbyTasks) {\n             clientState.assignStandbyToConsumer(task, consumer);\n             standbyTaskMap.put(task, partitionsForTask.get(task));\n+        }\n \n-            // This has no effect on the assignment, as we'll never consult the ClientState again, but\n-            // it does perform a useful assertion that the it's legal to assign this task as a standby to this instance\n-            clientState.assignStandby(task);\n+        for (final TaskId task : revokedTasks) {\n+            if (allStatefulTasks.contains(task)) {\n+                log.info(\"Adding removed stateful active task {} as a standby for {} before it is revoked in followup rebalance\",\n+                        task, consumer);\n+                \n+                // This has no effect on the assignment, as we'll never consult the ClientState again, but\n+                // it does perform a useful assertion that the it's legal to assign this task as a standby to this instance\n+                clientState.assignStandbyToConsumer(task, consumer);\n+                clientState.assignStandby(task);\n+\n+                standbyTaskMap.put(task, partitionsForTask.get(task));\n+            }\n         }\n         return standbyTaskMap;\n     }\n"}}, {"oid": "a3e5746c7e464f8f0f537bae421196c631e117b7", "url": "https://github.com/apache/kafka/commit/a3e5746c7e464f8f0f537bae421196c631e117b7", "message": "rebase from trunk", "committedDate": "2020-07-12T19:16:03Z", "type": "commit"}, {"oid": "3c4885e1289253d8c104b13925900d67296ee4f8", "url": "https://github.com/apache/kafka/commit/3c4885e1289253d8c104b13925900d67296ee4f8", "message": "add unit tests", "committedDate": "2020-07-12T23:34:52Z", "type": "commit"}, {"oid": "d7e54ddb17ec093f619ed5f89d97a23cdfb36b3e", "url": "https://github.com/apache/kafka/commit/d7e54ddb17ec093f619ed5f89d97a23cdfb36b3e", "message": "checkstyle unit tests", "committedDate": "2020-07-14T21:26:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0NzI4MA==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r454747280", "bodyText": "This alignment looks weird.", "author": "abbccdda", "createdAt": "2020-07-15T02:08:42Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -963,6 +967,18 @@ private void populatePartitionsByHostMaps(final Map<HostInfo, Set<TopicPartition\n                 rebalanceRequired = true;\n                 log.debug(\"Requested client {} to schedule a followup rebalance\", clientId);\n             }\n+\n+            log.info(\"Client {} per-consumer assignment:\\n\" +\n+                            \"\\tprev owned active {}\\n\" +", "originalCommit": "d7e54ddb17ec093f619ed5f89d97a23cdfb36b3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "581980bfe301fa6f09a6fa8f7375d78955a09bbf", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\nindex 9b8b501e2a..aed7d96895 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java\n\n@@ -969,16 +969,17 @@ public class StreamsPartitionAssignor implements ConsumerPartitionAssignor, Conf\n             }\n \n             log.info(\"Client {} per-consumer assignment:\\n\" +\n-                            \"\\tprev owned active {}\\n\" +\n-                            \"\\tprev owned standby {}\\n\" +\n-                            \"\\tassigned active {}\\n\" +\n-                            \"\\trevoking active {}\" +\n-                            \"\\tassigned standby {}\\n\", clientId,\n-                    clientMetadata.state.prevOwnedActiveTasksByConsumer(),\n-                    clientMetadata.state.prevOwnedStandbyByConsumer(),\n-                    clientMetadata.state.assignedActiveTasksByConsumer(),\n-                    clientMetadata.state.revokingActiveTasksByConsumer(),\n-                    clientMetadata.state.assignedStandbyTasksByConsumer());\n+                \"\\tprev owned active {}\\n\" +\n+                \"\\tprev owned standby {}\\n\" +\n+                \"\\tassigned active {}\\n\" +\n+                \"\\trevoking active {}\" +\n+                \"\\tassigned standby {}\\n\",\n+                clientId,\n+                clientMetadata.state.prevOwnedActiveTasksByConsumer(),\n+                clientMetadata.state.prevOwnedStandbyByConsumer(),\n+                clientMetadata.state.assignedActiveTasksByConsumer(),\n+                clientMetadata.state.revokingActiveTasksByConsumer(),\n+                clientMetadata.state.assignedStandbyTasksByConsumer());\n         }\n \n         if (rebalanceRequired) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0NzYyMQ==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r454747621", "bodyText": "nit: we could initialize on the parameter definition.", "author": "abbccdda", "createdAt": "2020-07-15T02:09:53Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java", "diffHunk": "@@ -66,32 +72,17 @@ public ClientState() {\n         prevActiveTasks = new TreeSet<>();\n         prevStandbyTasks = new TreeSet<>();\n         consumerToPreviousStatefulTaskIds = new TreeMap<>();\n+        consumerToPreviousActiveTaskIds = new TreeMap<>();", "originalCommit": "d7e54ddb17ec093f619ed5f89d97a23cdfb36b3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "581980bfe301fa6f09a6fa8f7375d78955a09bbf", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\nindex 1c248e56bb..9be0b24c17 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n\n@@ -67,16 +68,8 @@ public class ClientState {\n     }\n \n     ClientState(final int capacity) {\n-        activeTasks = new TreeSet<>();\n-        standbyTasks = new TreeSet<>();\n         prevActiveTasks = new TreeSet<>();\n         prevStandbyTasks = new TreeSet<>();\n-        consumerToPreviousStatefulTaskIds = new TreeMap<>();\n-        consumerToPreviousActiveTaskIds = new TreeMap<>();\n-        consumerToAssignedActiveTaskIds = new TreeMap<>();\n-        consumerToAssignedStandbyTaskIds = new TreeMap<>();\n-        consumerToRevokingActiveTaskIds = new TreeMap<>();\n-        ownedPartitions = new TreeMap<>(TOPIC_PARTITION_COMPARATOR);\n         taskOffsetSums = new TreeMap<>();\n         taskLagTotals = new TreeMap<>();\n         this.capacity = capacity;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0ODI2OQ==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r454748269", "bodyText": "We should add an empty line here to avoid mixing with the other maps with production use cases.", "author": "abbccdda", "createdAt": "2020-07-15T02:12:25Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java", "diffHunk": "@@ -50,10 +49,17 @@\n     private final Set<TaskId> prevStandbyTasks;\n \n     private final Map<String, Set<TaskId>> consumerToPreviousStatefulTaskIds;\n+    // the following four maps are used only for logging purposes;\n+    // TODO: we could consider merging them with other book-keeping maps\n+    private final Map<String, Set<TaskId>> consumerToPreviousActiveTaskIds;\n+    private final Map<String, Set<TaskId>> consumerToAssignedActiveTaskIds;\n+    private final Map<String, Set<TaskId>> consumerToAssignedStandbyTaskIds;\n+    private final Map<String, Set<TaskId>> consumerToRevokingActiveTaskIds;", "originalCommit": "d7e54ddb17ec093f619ed5f89d97a23cdfb36b3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "581980bfe301fa6f09a6fa8f7375d78955a09bbf", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\nindex 1c248e56bb..9be0b24c17 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n\n@@ -43,22 +43,23 @@ public class ClientState {\n     private static final Logger LOG = LoggerFactory.getLogger(ClientState.class);\n     public static final Comparator<TopicPartition> TOPIC_PARTITION_COMPARATOR = comparing(TopicPartition::topic).thenComparing(TopicPartition::partition);\n \n-    private final Set<TaskId> activeTasks;\n-    private final Set<TaskId> standbyTasks;\n+    private final Set<TaskId> activeTasks = new TreeSet<>();\n+    private final Set<TaskId> standbyTasks = new TreeSet<>();\n     private final Set<TaskId> prevActiveTasks;\n     private final Set<TaskId> prevStandbyTasks;\n \n-    private final Map<String, Set<TaskId>> consumerToPreviousStatefulTaskIds;\n-    // the following four maps are used only for logging purposes;\n-    // TODO: we could consider merging them with other book-keeping maps\n-    private final Map<String, Set<TaskId>> consumerToPreviousActiveTaskIds;\n-    private final Map<String, Set<TaskId>> consumerToAssignedActiveTaskIds;\n-    private final Map<String, Set<TaskId>> consumerToAssignedStandbyTaskIds;\n-    private final Map<String, Set<TaskId>> consumerToRevokingActiveTaskIds;\n-    private final Map<TopicPartition, String> ownedPartitions;\n     private final Map<TaskId, Long> taskOffsetSums; // contains only stateful tasks we previously owned\n     private final Map<TaskId, Long> taskLagTotals;  // contains lag for all stateful tasks in the app topology\n+    private final Map<TopicPartition, String> ownedPartitions = new TreeMap<>(TOPIC_PARTITION_COMPARATOR);\n+    private final Map<String, Set<TaskId>> consumerToPreviousStatefulTaskIds = new TreeMap<>();\n \n+    // the following four maps are used only for logging purposes;\n+    // TODO KAFKA-10283: we could consider merging them with other book-keeping maps at client-levels\n+    //                   so that they would not be inconsistent\n+    private final Map<String, Set<TaskId>> consumerToPreviousActiveTaskIds = new TreeMap<>();\n+    private final Map<String, Set<TaskId>> consumerToAssignedActiveTaskIds = new TreeMap<>();\n+    private final Map<String, Set<TaskId>> consumerToAssignedStandbyTaskIds = new TreeMap<>();\n+    private final Map<String, Set<TaskId>> consumerToRevokingActiveTaskIds = new TreeMap<>();\n \n     private int capacity;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0ODkyNg==", "url": "https://github.com/apache/kafka/pull/8997#discussion_r454748926", "bodyText": "Could we add a follow-up ticket instead? Someone in the community could pick it up.", "author": "abbccdda", "createdAt": "2020-07-15T02:14:52Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java", "diffHunk": "@@ -50,10 +49,17 @@\n     private final Set<TaskId> prevStandbyTasks;\n \n     private final Map<String, Set<TaskId>> consumerToPreviousStatefulTaskIds;\n+    // the following four maps are used only for logging purposes;\n+    // TODO: we could consider merging them with other book-keeping maps", "originalCommit": "d7e54ddb17ec093f619ed5f89d97a23cdfb36b3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "581980bfe301fa6f09a6fa8f7375d78955a09bbf", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\nindex 1c248e56bb..9be0b24c17 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java\n\n@@ -43,22 +43,23 @@ public class ClientState {\n     private static final Logger LOG = LoggerFactory.getLogger(ClientState.class);\n     public static final Comparator<TopicPartition> TOPIC_PARTITION_COMPARATOR = comparing(TopicPartition::topic).thenComparing(TopicPartition::partition);\n \n-    private final Set<TaskId> activeTasks;\n-    private final Set<TaskId> standbyTasks;\n+    private final Set<TaskId> activeTasks = new TreeSet<>();\n+    private final Set<TaskId> standbyTasks = new TreeSet<>();\n     private final Set<TaskId> prevActiveTasks;\n     private final Set<TaskId> prevStandbyTasks;\n \n-    private final Map<String, Set<TaskId>> consumerToPreviousStatefulTaskIds;\n-    // the following four maps are used only for logging purposes;\n-    // TODO: we could consider merging them with other book-keeping maps\n-    private final Map<String, Set<TaskId>> consumerToPreviousActiveTaskIds;\n-    private final Map<String, Set<TaskId>> consumerToAssignedActiveTaskIds;\n-    private final Map<String, Set<TaskId>> consumerToAssignedStandbyTaskIds;\n-    private final Map<String, Set<TaskId>> consumerToRevokingActiveTaskIds;\n-    private final Map<TopicPartition, String> ownedPartitions;\n     private final Map<TaskId, Long> taskOffsetSums; // contains only stateful tasks we previously owned\n     private final Map<TaskId, Long> taskLagTotals;  // contains lag for all stateful tasks in the app topology\n+    private final Map<TopicPartition, String> ownedPartitions = new TreeMap<>(TOPIC_PARTITION_COMPARATOR);\n+    private final Map<String, Set<TaskId>> consumerToPreviousStatefulTaskIds = new TreeMap<>();\n \n+    // the following four maps are used only for logging purposes;\n+    // TODO KAFKA-10283: we could consider merging them with other book-keeping maps at client-levels\n+    //                   so that they would not be inconsistent\n+    private final Map<String, Set<TaskId>> consumerToPreviousActiveTaskIds = new TreeMap<>();\n+    private final Map<String, Set<TaskId>> consumerToAssignedActiveTaskIds = new TreeMap<>();\n+    private final Map<String, Set<TaskId>> consumerToAssignedStandbyTaskIds = new TreeMap<>();\n+    private final Map<String, Set<TaskId>> consumerToRevokingActiveTaskIds = new TreeMap<>();\n \n     private int capacity;\n \n"}}, {"oid": "2a0c09ebd82fbbf69f575083f3ee8afef01174b2", "url": "https://github.com/apache/kafka/commit/2a0c09ebd82fbbf69f575083f3ee8afef01174b2", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-improve-assigt nor-log4j", "committedDate": "2020-07-17T01:09:07Z", "type": "commit"}, {"oid": "581980bfe301fa6f09a6fa8f7375d78955a09bbf", "url": "https://github.com/apache/kafka/commit/581980bfe301fa6f09a6fa8f7375d78955a09bbf", "message": "github comments", "committedDate": "2020-07-17T01:29:01Z", "type": "commit"}]}