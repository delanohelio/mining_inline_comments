{"pr_number": 9746, "pr_title": "MINOR: Replace ApiVersion by auto-generated protocol", "pr_createdAt": "2020-12-14T12:12:30Z", "pr_url": "https://github.com/apache/kafka/pull/9746", "timeline": [{"oid": "9732583ba265ec15a2993bc90bf6272b73219b00", "url": "https://github.com/apache/kafka/commit/9732583ba265ec15a2993bc90bf6272b73219b00", "message": "MINOR: substitue ApiVersionsResponseKey for ApiVersion", "committedDate": "2020-12-16T04:02:56Z", "type": "forcePushed"}, {"oid": "fc66801595cde68ab73a0db9427af801655d17ac", "url": "https://github.com/apache/kafka/commit/fc66801595cde68ab73a0db9427af801655d17ac", "message": "MINOR: substitue ApiVersionsResponseKey for ApiVersion", "committedDate": "2020-12-16T15:33:25Z", "type": "forcePushed"}, {"oid": "a2d90e4647535f6a70717608013430fccfa70588", "url": "https://github.com/apache/kafka/commit/a2d90e4647535f6a70717608013430fccfa70588", "message": "MINOR: substitue ApiVersionsResponseKey for ApiVersion", "committedDate": "2021-01-04T17:40:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552688026", "bodyText": "Should we rename the generated class to have a more concise name? It seems unnecessarily verbose.", "author": "ijuma", "createdAt": "2021-01-06T14:56:25Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -37,18 +36,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseKey> supportedVersions = new EnumMap<>(ApiKeys.class);", "originalCommit": "a2d90e4647535f6a70717608013430fccfa70588", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY5MTA2Mw==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552691063", "bodyText": "How about renaming ApiVersionsResponseKey to ApiVersion?", "author": "chia7712", "createdAt": "2021-01-06T15:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcwNTMzNg==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552705336", "bodyText": "Using ApiVersion sounds reasonable to me.", "author": "dajac", "createdAt": "2021-01-06T15:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcyOTk4MA==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552729980", "bodyText": "Sounds good if there are no name conflicts as a result of that change.", "author": "ijuma", "createdAt": "2021-01-06T15:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjczMjEwOA==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552732108", "bodyText": "I have renamed it in the latest commit.", "author": "chia7712", "createdAt": "2021-01-06T15:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "58cf3a6925f63259aac315c4097aa8dde85c0eb3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java b/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\nindex 1d94930368..7bcff77469 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\n\n@@ -36,10 +36,10 @@ import java.util.TreeMap;\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersionsResponseKey> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n \n     // List of APIs which the broker supports, but which are unknown to the client\n-    private final List<ApiVersionsResponseKey> unknownApis = new ArrayList<>();\n+    private final List<ApiVersion> unknownApis = new ArrayList<>();\n \n     /**\n      * Create a NodeApiVersions object with the current ApiVersions.\n"}}, {"oid": "58cf3a6925f63259aac315c4097aa8dde85c0eb3", "url": "https://github.com/apache/kafka/commit/58cf3a6925f63259aac315c4097aa8dde85c0eb3", "message": "raname ApiVersionsResponseKey to ApiVersion", "committedDate": "2021-01-06T15:36:30Z", "type": "forcePushed"}, {"oid": "c79c29c466a951db682dd1beec3bd9eecd2ade09", "url": "https://github.com/apache/kafka/commit/c79c29c466a951db682dd1beec3bd9eecd2ade09", "message": "fix style", "committedDate": "2021-01-11T13:59:15Z", "type": "forcePushed"}, {"oid": "81dd7d62549e42ff72e6b6305eeb89b3220c4735", "url": "https://github.com/apache/kafka/commit/81dd7d62549e42ff72e6b6305eeb89b3220c4735", "message": "MINOR: Replace ApiVersion by auto-generated protocol", "committedDate": "2021-01-16T19:05:53Z", "type": "forcePushed"}, {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "url": "https://github.com/apache/kafka/commit/d2cd983d263746fa57731b5cfab6d5de40a75ae2", "message": "MINOR: Replace ApiVersion by auto-generated protocol", "committedDate": "2021-01-16T19:09:16Z", "type": "commit"}, {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "url": "https://github.com/apache/kafka/commit/d2cd983d263746fa57731b5cfab6d5de40a75ae2", "message": "MINOR: Replace ApiVersion by auto-generated protocol", "committedDate": "2021-01-16T19:09:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1MzU5Nw==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559853597", "bodyText": "Can we import ApiVersion directly? I don't think ApiVersionsResponseData adds any value here and other similar places.", "author": "ijuma", "createdAt": "2021-01-19T00:58:06Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -39,18 +38,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseData.ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "364f4de7dd7eac01d3ead065106903afad30f0e1", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java b/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\nindex 6f094787aa..7588dee312 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\n\n@@ -38,10 +39,10 @@ import java.util.TreeMap;\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersionsResponseData.ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n \n     // List of APIs which the broker supports, but which are unknown to the client\n-    private final List<ApiVersionsResponseData.ApiVersion> unknownApis = new ArrayList<>();\n+    private final List<ApiVersion> unknownApis = new ArrayList<>();\n \n     /**\n      * Create a NodeApiVersions object with the current ApiVersions.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1MzgwNQ==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559853805", "bodyText": "It would be good to have a helper method somewhere that converts ApiKeys to ApiVersion.", "author": "ijuma", "createdAt": "2021-01-19T00:58:59Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -60,18 +59,21 @@ public static NodeApiVersions create() {\n      *                  value.\n      * @return A new NodeApiVersions object.\n      */\n-    public static NodeApiVersions create(Collection<ApiVersion> overrides) {\n-        List<ApiVersion> apiVersions = new LinkedList<>(overrides);\n+    public static NodeApiVersions create(Collection<ApiVersionsResponseData.ApiVersion> overrides) {\n+        List<ApiVersionsResponseData.ApiVersion> apiVersions = new LinkedList<>(overrides);\n         for (ApiKeys apiKey : ApiKeys.enabledApis()) {\n             boolean exists = false;\n-            for (ApiVersion apiVersion : apiVersions) {\n-                if (apiVersion.apiKey == apiKey.id) {\n+            for (ApiVersionsResponseData.ApiVersion apiVersion : apiVersions) {\n+                if (apiVersion.apiKey() == apiKey.id) {\n                     exists = true;\n                     break;\n                 }\n             }\n             if (!exists) {\n-                apiVersions.add(new ApiVersion(apiKey));\n+                apiVersions.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion(apiKey.oldestVersion())\n+                        .setMaxVersion(apiKey.latestVersion()));", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "364f4de7dd7eac01d3ead065106903afad30f0e1", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java b/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\nindex 6f094787aa..7588dee312 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java\n\n@@ -59,22 +60,17 @@ public class NodeApiVersions {\n      *                  value.\n      * @return A new NodeApiVersions object.\n      */\n-    public static NodeApiVersions create(Collection<ApiVersionsResponseData.ApiVersion> overrides) {\n-        List<ApiVersionsResponseData.ApiVersion> apiVersions = new LinkedList<>(overrides);\n+    public static NodeApiVersions create(Collection<ApiVersion> overrides) {\n+        List<ApiVersion> apiVersions = new LinkedList<>(overrides);\n         for (ApiKeys apiKey : ApiKeys.enabledApis()) {\n             boolean exists = false;\n-            for (ApiVersionsResponseData.ApiVersion apiVersion : apiVersions) {\n+            for (ApiVersion apiVersion : apiVersions) {\n                 if (apiVersion.apiKey() == apiKey.id) {\n                     exists = true;\n                     break;\n                 }\n             }\n-            if (!exists) {\n-                apiVersions.add(new ApiVersionsResponseData.ApiVersion()\n-                        .setApiKey(apiKey.id)\n-                        .setMinVersion(apiKey.oldestVersion())\n-                        .setMaxVersion(apiKey.latestVersion()));\n-            }\n+            if (!exists) apiVersions.add(ApiVersionsResponse.toApiVersion(apiKey));\n         }\n         return new NodeApiVersions(apiVersions);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559854542", "bodyText": "It's a bit weird that we only check if other is null. Do we need this check at all?", "author": "ijuma", "createdAt": "2021-01-19T01:02:29Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -220,4 +217,16 @@ private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n \n         return converted;\n     }\n+\n+    public static Optional<ApiVersionsResponseData.ApiVersion> intersect(ApiVersionsResponseData.ApiVersion thisVersion,\n+                                                                         ApiVersionsResponseData.ApiVersion other) {\n+        if (other == null) return Optional.empty();", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkxMjc1Mg==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559912752", "bodyText": "From the usage of this method, only other can be null. So current check is enough.", "author": "chia7712", "createdAt": "2021-01-19T04:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkxNjU3MA==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559916570", "bodyText": "That's not a good way to design apis, right? This kind of thing should be symmetric. Why is other sometimes null?", "author": "ijuma", "createdAt": "2021-01-19T05:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkyMDg3OQ==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559920879", "bodyText": "Why is other sometimes null?\n\nThe api key is supported by client-side but Controller doesn't.\n\nThat's not a good way to design apis, right? This kind of thing should be symmetric.\n\nmake sense. will address it and add unit tests.", "author": "chia7712", "createdAt": "2021-01-19T05:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "364f4de7dd7eac01d3ead065106903afad30f0e1", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java b/clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java\nindex 2d7ac64559..3a6ff2fe9c 100644\n--- a/clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java\n+++ b/clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java\n\n@@ -218,15 +210,26 @@ public class ApiVersionsResponse extends AbstractResponse {\n         return converted;\n     }\n \n-    public static Optional<ApiVersionsResponseData.ApiVersion> intersect(ApiVersionsResponseData.ApiVersion thisVersion,\n-                                                                         ApiVersionsResponseData.ApiVersion other) {\n-        if (other == null) return Optional.empty();\n+    public static Optional<ApiVersion> intersect(ApiVersion thisVersion,\n+                                                 ApiVersion other) {\n+        if (thisVersion == null || other == null) return Optional.empty();\n+        if (thisVersion.apiKey() != other.apiKey())\n+            throw new IllegalArgumentException(\"thisVersion.apiKey: \" + thisVersion.apiKey()\n+                + \" must be equal to other.apiKey: \" + other.apiKey());\n         short minVersion = (short) Math.max(thisVersion.minVersion(), other.minVersion());\n         short maxVersion = (short) Math.min(thisVersion.maxVersion(), other.maxVersion());\n-        return minVersion > maxVersion ? Optional.empty() :\n-                Optional.of(new ApiVersionsResponseData.ApiVersion()\n-                        .setApiKey(thisVersion.apiKey())\n-                        .setMinVersion(minVersion)\n-                        .setMaxVersion(maxVersion));\n+        return minVersion > maxVersion\n+                ? Optional.empty()\n+                : Optional.of(new ApiVersion()\n+                    .setApiKey(thisVersion.apiKey())\n+                    .setMinVersion(minVersion)\n+                    .setMaxVersion(maxVersion));\n+    }\n+\n+    public static ApiVersion toApiVersion(ApiKeys apiKey) {\n+        return new ApiVersion()\n+            .setApiKey(apiKey.id)\n+            .setMinVersion(apiKey.oldestVersion())\n+            .setMaxVersion(apiKey.latestVersion());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDY2OA==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559854668", "bodyText": "We can use the helper that converts from ApiKey to ApiVersion here too.", "author": "ijuma", "createdAt": "2021-01-19T01:03:09Z", "path": "clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java", "diffHunk": "@@ -56,12 +54,18 @@ public void testUnknownApiVersionsToString() {\n \n     @Test\n     public void testVersionsToString() {\n-        List<ApiVersion> versionList = new ArrayList<>();\n+        List<ApiVersionsResponseData.ApiVersion> versionList = new ArrayList<>();\n         for (ApiKeys apiKey : ApiKeys.values()) {\n             if (apiKey == ApiKeys.DELETE_TOPICS) {\n-                versionList.add(new ApiVersion(apiKey.id, (short) 10000, (short) 10001));\n+                versionList.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion((short) 10000)\n+                        .setMaxVersion((short) 10001));\n             } else {\n-                versionList.add(new ApiVersion(apiKey));\n+                versionList.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion(apiKey.oldestVersion())\n+                        .setMaxVersion(apiKey.latestVersion()));", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "364f4de7dd7eac01d3ead065106903afad30f0e1", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java b/clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java\nindex fcec987e4b..01d8cf6bdc 100644\n--- a/clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java\n+++ b/clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java\n\n@@ -54,19 +55,14 @@ public class NodeApiVersionsTest {\n \n     @Test\n     public void testVersionsToString() {\n-        List<ApiVersionsResponseData.ApiVersion> versionList = new ArrayList<>();\n+        List<ApiVersion> versionList = new ArrayList<>();\n         for (ApiKeys apiKey : ApiKeys.values()) {\n             if (apiKey == ApiKeys.DELETE_TOPICS) {\n-                versionList.add(new ApiVersionsResponseData.ApiVersion()\n+                versionList.add(new ApiVersion()\n                         .setApiKey(apiKey.id)\n                         .setMinVersion((short) 10000)\n                         .setMaxVersion((short) 10001));\n-            } else {\n-                versionList.add(new ApiVersionsResponseData.ApiVersion()\n-                        .setApiKey(apiKey.id)\n-                        .setMinVersion(apiKey.oldestVersion())\n-                        .setMaxVersion(apiKey.latestVersion()));\n-            }\n+            } else versionList.add(ApiVersionsResponse.toApiVersion(apiKey));\n         }\n         NodeApiVersions versions = new NodeApiVersions(versionList);\n         StringBuilder bld = new StringBuilder();\n"}}, {"oid": "7da8093e7f5fade3707f3349789d3bbad4c76689", "url": "https://github.com/apache/kafka/commit/7da8093e7f5fade3707f3349789d3bbad4c76689", "message": "Merge branch 'trunk' into MINOR-9746", "committedDate": "2021-01-19T04:30:00Z", "type": "commit"}, {"oid": "364f4de7dd7eac01d3ead065106903afad30f0e1", "url": "https://github.com/apache/kafka/commit/364f4de7dd7eac01d3ead065106903afad30f0e1", "message": "import inner classes; improve ApiVersionsResponse.intersect", "committedDate": "2021-01-19T05:36:17Z", "type": "commit"}, {"oid": "4584d0dbc769428c2712734f42e84692f9832e42", "url": "https://github.com/apache/kafka/commit/4584d0dbc769428c2712734f42e84692f9832e42", "message": "Merge branch 'trunk' into MINOR-9746", "committedDate": "2021-01-19T10:19:46Z", "type": "commit"}]}