{"pr_number": 8902, "pr_title": "KAFKA-10179: Pass correct changelog topic to state serdes", "pr_createdAt": "2020-06-19T15:04:12Z", "pr_url": "https://github.com/apache/kafka/pull/8902", "timeline": [{"oid": "8e7ef6a57f836920be219dd360241319e03b0417", "url": "https://github.com/apache/kafka/commit/8e7ef6a57f836920be219dd360241319e03b0417", "message": "KAFKA-10179: Pass correct changelog topic to state serdes\n\nUntil now we always passed the default changelog topic name\nto the state serdes. However, for optimized source tables\nand global tables the changelog topic is the source topic.\n\nMost serdes do not use the topic name passed to them.\nHowever, if the serdes actually use the topic name for\n(de)serialization, e.g., when Kafka Streams is used with\nConfluent's Schema Registry, a\norg.apache.kafka.common.errors.SerializationException is thrown.\n\nThis commits passed the correct changelog topic to the state\nserdes of the metered state stores.", "committedDate": "2020-07-07T09:29:27Z", "type": "commit"}, {"oid": "e068389cabf31cc9cf7c30b36841fa9717b01733", "url": "https://github.com/apache/kafka/commit/e068389cabf31cc9cf7c30b36841fa9717b01733", "message": "Added exception for changelogging of not registered stores", "committedDate": "2020-07-07T09:31:57Z", "type": "commit"}, {"oid": "ccf3abc7ecae74658a9b6c963a812518499bba94", "url": "https://github.com/apache/kafka/commit/ccf3abc7ecae74658a9b6c963a812518499bba94", "message": "Add unit test for non-optimized case", "committedDate": "2020-07-07T09:31:57Z", "type": "commit"}, {"oid": "33eadcbc781df36839f1017b00f60899b62b7eeb", "url": "https://github.com/apache/kafka/commit/33eadcbc781df36839f1017b00f60899b62b7eeb", "message": "Include feedback", "committedDate": "2020-07-07T09:32:07Z", "type": "commit"}, {"oid": "dbc23fa59e993949198bf2271d8eef0f0c047bdc", "url": "https://github.com/apache/kafka/commit/dbc23fa59e993949198bf2271d8eef0f0c047bdc", "message": "Add exceptions to registeredChangelogPartitionFor()", "committedDate": "2020-07-07T09:32:07Z", "type": "commit"}, {"oid": "1302e2577eee582b143ae0adad74a9f7e09d989e", "url": "https://github.com/apache/kafka/commit/1302e2577eee582b143ae0adad74a9f7e09d989e", "message": "Include feedback", "committedDate": "2020-07-07T09:33:39Z", "type": "commit"}, {"oid": "1302e2577eee582b143ae0adad74a9f7e09d989e", "url": "https://github.com/apache/kafka/commit/1302e2577eee582b143ae0adad74a9f7e09d989e", "message": "Include feedback", "committedDate": "2020-07-07T09:33:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3OTg3NQ==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r450979875", "bodyText": "Should this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected StateManagerStub stateManager() {\n          \n          \n            \n                protected StateManager stateManager() {\n          \n      \n    \n    \n  \n\n?", "author": "vvcephei", "createdAt": "2020-07-07T16:08:34Z", "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -193,6 +194,11 @@ public InternalMockProcessorContext(final File stateDir,\n         this.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger(new SystemTime()));\n     }\n \n+    @Override\n+    protected StateManagerStub stateManager() {", "originalCommit": "1302e2577eee582b143ae0adad74a9f7e09d989e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b34c1750c216f252e7e18d01a657f61f224de18", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java b/streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java\nindex 0b5b444d7c..1870ecf0ab 100644\n--- a/streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java\n+++ b/streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java\n\n@@ -195,7 +195,7 @@ public class InternalMockProcessorContext\n     }\n \n     @Override\n-    protected StateManagerStub stateManager() {\n+    protected StateManager stateManager() {\n         return new StateManagerStub();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MDM1Nw==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r450980357", "bodyText": "and here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected StateManagerStub stateManager() {\n          \n          \n            \n                protected StateManager stateManager() {", "author": "vvcephei", "createdAt": "2020-07-07T16:09:16Z", "path": "streams/src/test/java/org/apache/kafka/test/NoOpProcessorContext.java", "diffHunk": "@@ -55,6 +58,11 @@ private static StreamsConfig streamsConfig() {\n         return new StreamsConfig(props);\n     }\n \n+    @Override\n+    protected StateManagerStub stateManager() {", "originalCommit": "1302e2577eee582b143ae0adad74a9f7e09d989e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b34c1750c216f252e7e18d01a657f61f224de18", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/test/NoOpProcessorContext.java b/streams/src/test/java/org/apache/kafka/test/NoOpProcessorContext.java\nindex 401ef03c72..39dd611ac2 100644\n--- a/streams/src/test/java/org/apache/kafka/test/NoOpProcessorContext.java\n+++ b/streams/src/test/java/org/apache/kafka/test/NoOpProcessorContext.java\n\n@@ -59,7 +59,7 @@ public class NoOpProcessorContext extends AbstractProcessorContext {\n     }\n \n     @Override\n-    protected StateManagerStub stateManager() {\n+    protected StateManager stateManager() {\n         return new StateManagerStub();\n     }\n \n"}}, {"oid": "6b34c1750c216f252e7e18d01a657f61f224de18", "url": "https://github.com/apache/kafka/commit/6b34c1750c216f252e7e18d01a657f61f224de18", "message": "Apply suggestions from code review\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-07-07T16:20:26Z", "type": "commit"}, {"oid": "c741f2f88c5f619259ad8e5a2a3b5a32567c07da", "url": "https://github.com/apache/kafka/commit/c741f2f88c5f619259ad8e5a2a3b5a32567c07da", "message": "Revert last change", "committedDate": "2020-07-07T19:32:42Z", "type": "commit"}, {"oid": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4", "url": "https://github.com/apache/kafka/commit/948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4", "message": "Re-apply suggestion from code review", "committedDate": "2020-07-08T10:15:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzEyNg==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r451903126", "bodyText": "Not sure why we need to move this from the abstract class into the child classes?", "author": "mjsax", "createdAt": "2020-07-09T00:52:21Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "diffHunk": "@@ -45,24 +45,23 @@\n     protected ProcessorNode<?, ?> currentNode;\n     private long currentSystemTimeMs;\n \n-    final StateManager stateManager;", "originalCommit": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExOTk5OA==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r452119998", "bodyText": "This is basically to avoid the explicit cast from StateManager to ProcessorStateManager in ProcessorContextImpl. ProcessorStateManager has method registeredChangelogPartitionFor() that does only exist in the ProessorStateManager, because it is only used in ProcessorContextImpl. Hence, I moved the state manager field to the respective children and introduced the abstract method stateManager() in AbstractProcessorContext. Method stateManager() returns a ProcessorStateManager in ProcessorContextImpl but a StateManager in all other places.", "author": "cadonna", "createdAt": "2020-07-09T10:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MTk0MQ==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r452391941", "bodyText": "I see. Would it not be sufficient to just keep a (\"duplicate\") reference of ProcessorStateManager within ProcessorContextImpl?\nJust to clarify: I am ok with the proposed changes. Just wondering if it's really the best structure.", "author": "mjsax", "createdAt": "2020-07-09T17:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNTQ3Mg==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r452425472", "bodyText": "If I understand you correctly, you propose to have a processor state manager reference in the AbstractProcessorContext and in ProcessorContextImpl instead of in the GlobalProcessorContextImpl and in ProcessorContextImpl. Moreover, you want to have a method stateManager() in AbstractProcessorContext that is overridden only in ProcessorContextImpl.\nFWIW, I think it is cleaner to have the references in each child and an abstract method stateManager() in AbstractProcessorContext that is overridden in both children. My reasoning  is that both children have a state manager that is used in AbstractProcessorContext (i.e., both should provide a method stateManager()) but each child uses a different type of state manager internally.", "author": "cadonna", "createdAt": "2020-07-09T18:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzEyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNDExNA==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r451904114", "bodyText": "It seems we don't need this if-then-else any longer as it's already taken care of within ProcessorContextUtils.changelogFor? (Similar for other classes.)", "author": "mjsax", "createdAt": "2020-07-09T00:56:41Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -103,8 +104,12 @@ public void init(final ProcessorContext context,\n \n     @SuppressWarnings(\"unchecked\")\n     void initStoreSerde(final ProcessorContext context) {\n+        final String storeName = name();\n+        final String changelogTopic = ProcessorContextUtils.changelogFor(context, storeName);\n         serdes = new StateSerdes<>(\n-            ProcessorStateManager.storeChangelogTopic(context.applicationId(), name()),\n+             changelogTopic != null ?\n+                changelogTopic :\n+                ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName),", "originalCommit": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0ODg3NA==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r452148874", "bodyText": "I think we still need the if-then-else. ProcessorContextUtils.changelogFor() checks that the processor context is of type InternalProcessorContext to be able to call changelogFor() on it. It does not consider the case where no changelog exists (i.e., changelogFor() returns null). The null check is done here. Fallback is in both cases ProcessorStateManager.storeChangelogTopic().", "author": "cadonna", "createdAt": "2020-07-09T11:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNDExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NDUxMA==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r452394510", "bodyText": "Ah thanks. I missed this case.\nHowever, should we move both null checks into ProcessorContextUtils.changelogFor() for this case? It seem, we do the same \"outer\" null-check each time we call the method, so why not do it at a single place in the code?", "author": "mjsax", "createdAt": "2020-07-09T17:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNDExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNTg1MA==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r452415850", "bodyText": "I would not put any code that is not related to casts of ProcessorContext into ProessorContextUtils. I think the goal of ProessorContextUtils is to contain all code of which we want to get rid of in the future once the casts are fixed.\nWe could move the null check into the constructor of StateSerde since we do also there a null check.", "author": "cadonna", "createdAt": "2020-07-09T18:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNDExNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTExMg==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r451905112", "bodyText": "Wondering if we should pass storeToChangelogTopic() and .globalStateStores() into the constructor instead of ProcessorTopology ?", "author": "mjsax", "createdAt": "2020-07-09T01:00:51Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "diffHunk": "@@ -73,22 +73,23 @@\n     private final Set<String> globalNonPersistentStoresTopics = new HashSet<>();\n     private final OffsetCheckpoint checkpointFile;\n     private final Map<TopicPartition, Long> checkpointFileCache;\n+    private final Map<String, String> storeToChangelogTopic;\n \n     public GlobalStateManagerImpl(final LogContext logContext,\n                                   final ProcessorTopology topology,\n                                   final Consumer<byte[], byte[]> globalConsumer,\n                                   final StateDirectory stateDirectory,\n                                   final StateRestoreListener stateRestoreListener,\n                                   final StreamsConfig config) {\n+        storeToChangelogTopic = topology.storeToChangelogTopic();", "originalCommit": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTA2MQ==", "url": "https://github.com/apache/kafka/pull/8902#discussion_r452165061", "bodyText": "I would still pass ProcessorTopology into the constructor because it might make the signature of the constructor more stable. I removed the field for the topology and now we store only globalStateStores and storeChangelogTopics in GlobalStateManagerImpl.", "author": "cadonna", "createdAt": "2020-07-09T12:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "bfacb69b8895b4c72874942d37faa9a36ca357e9", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java\nindex d97d1c83a6..0779dcf5b1 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java\n\n@@ -74,6 +73,7 @@ public class GlobalStateManagerImpl implements GlobalStateManager {\n     private final OffsetCheckpoint checkpointFile;\n     private final Map<TopicPartition, Long> checkpointFileCache;\n     private final Map<String, String> storeToChangelogTopic;\n+    private final List<StateStore> globalStateStores;\n \n     public GlobalStateManagerImpl(final LogContext logContext,\n                                   final ProcessorTopology topology,\n"}}, {"oid": "bfacb69b8895b4c72874942d37faa9a36ca357e9", "url": "https://github.com/apache/kafka/commit/bfacb69b8895b4c72874942d37faa9a36ca357e9", "message": "Include feedback", "committedDate": "2020-07-09T12:00:18Z", "type": "commit"}]}