{"pr_number": 8230, "pr_title": "KAFKA-9667: Connect JSON serde strip trailing zeros", "pr_createdAt": "2020-03-05T17:40:40Z", "pr_url": "https://github.com/apache/kafka/pull/8230", "timeline": [{"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd", "url": "https://github.com/apache/kafka/commit/9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd", "message": "KAFKA-9667: Connect JSON serde strip trailing zeros\n\nThis change turns on exact decimal processing in Jackson for decimals, meaning trailing zeros are maintained. This means a value of `1.2300` can be deserialized and re-serialized to JSON without any loss of information.", "committedDate": "2020-03-05T17:37:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388458564", "bodyText": "what about exposing a JsonNodeFactory as an argument to make this more extensible?", "author": "agavra", "createdAt": "2020-03-05T17:48:47Z", "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);\n     }\n \n     /**\n      * A constructor that additionally specifies some {@link DeserializationFeature}\n      * for the deserializer\n      *\n      * @param deserializationFeatures the specified deserialization features\n+     * @param exactDecimals {@code true} if trailing zeros on decimals should be maintained.\n      */\n-    JsonDeserializer(final Set<DeserializationFeature> deserializationFeatures) {\n+    JsonDeserializer(\n+        final Set<DeserializationFeature> deserializationFeatures,\n+        final boolean exactDecimals", "originalCommit": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NTM0Ng==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388475346", "bodyText": "Can do, but is there any point for a package local constructor? We can change as we need to anyway, right?", "author": "big-andy-coates", "createdAt": "2020-03-05T18:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NTkyNQ==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388485925", "bodyText": "\ud83d\ude08 I \"have a friend\" who sometimes puts new classes in the same package so that they can use package private methods. This friend understands that such code is brittle.", "author": "agavra", "createdAt": "2020-03-05T18:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2OTAyNw==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388969027", "bodyText": "lol. I don't know what you're talking about!\nChanged...", "author": "big-andy-coates", "createdAt": "2020-03-06T15:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "d20bf6bf2e3976b75efabb34bf482617643e855b", "chunk": "diff --git a/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java b/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java\nindex e2d20dbf3c..2e6e821b2d 100644\n--- a/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java\n+++ b/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java\n\n@@ -30,13 +30,13 @@ import org.apache.kafka.common.serialization.Deserializer;\n  * structured data without having associated Java classes. This deserializer also supports Connect schemas.\n  */\n public class JsonDeserializer implements Deserializer<JsonNode> {\n-    private ObjectMapper objectMapper = new ObjectMapper();\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n \n     /**\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet(), false);\n+        this(Collections.emptySet(), JsonNodeFactory.withExactBigDecimals(true));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjkxMg==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388462912", "bodyText": "Why is false (inexact decimals) the default for the no-arg constructor? If this is an attempt to maintain backward compatibility, we should consider whether this bug, when fixed, compatible. Seems like it would be, since having the deserializer use the trailing zeros would be fine/better than not using them.", "author": "rhauch", "createdAt": "2020-03-05T17:56:50Z", "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);", "originalCommit": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2MzEyNg==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388963126", "bodyText": "Happy to flip it.\nDo we want to make the other constructor public so that others can control these things?", "author": "big-andy-coates", "createdAt": "2020-03-06T15:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NTQ3OQ==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388975479", "bodyText": "Flipped", "author": "big-andy-coates", "createdAt": "2020-03-06T15:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d20bf6bf2e3976b75efabb34bf482617643e855b", "chunk": "diff --git a/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java b/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java\nindex e2d20dbf3c..2e6e821b2d 100644\n--- a/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java\n+++ b/connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java\n\n@@ -30,13 +30,13 @@ import org.apache.kafka.common.serialization.Deserializer;\n  * structured data without having associated Java classes. This deserializer also supports Connect schemas.\n  */\n public class JsonDeserializer implements Deserializer<JsonNode> {\n-    private ObjectMapper objectMapper = new ObjectMapper();\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n \n     /**\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet(), false);\n+        this(Collections.emptySet(), JsonNodeFactory.withExactBigDecimals(true));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388491480", "bodyText": "Passing in a JsonNodeFactory instance might be better here, because then the JsonConverter instances and JsonDeserializer in each converter will all use the same JsonNodeFactory.\nAs it currently stands, the JsonDeserializer has it's own instance of the JsonNodeFactory, and it's possible that they could be set up differently in the future and not caught.", "author": "rhauch", "createdAt": "2020-03-05T18:50:38Z", "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java", "diffHunk": "@@ -285,7 +288,7 @@ public JsonConverter() {\n         // floating point numbers that cannot fit into float64\n         final Set<DeserializationFeature> deserializationFeatures = new HashSet<>();\n         deserializationFeatures.add(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n-        deserializer = new JsonDeserializer(deserializationFeatures);\n+        deserializer = new JsonDeserializer(deserializationFeatures, true);", "originalCommit": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2MzE4Ng==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388963186", "bodyText": "On it...", "author": "big-andy-coates", "createdAt": "2020-03-06T15:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2Nzc1MQ==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388967751", "bodyText": "What do you think about also enabling SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN?\nThis would mean serialiser won't write numbers using scientific notation, e.g. 100 , to 1E+2.  Both are valid JSON, and the later takes up less space, but can confuse some users and maybe some downstream systems.", "author": "big-andy-coates", "createdAt": "2020-03-06T15:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0Mjk2MQ==", "url": "https://github.com/apache/kafka/pull/8230#discussion_r389642961", "bodyText": "Discussion offline - not going with none SN as this woudl require a KIP", "author": "big-andy-coates", "createdAt": "2020-03-09T12:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "d20bf6bf2e3976b75efabb34bf482617643e855b", "chunk": "diff --git a/connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java b/connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java\nindex a4948a3c79..8a2d6768cc 100644\n--- a/connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java\n+++ b/connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java\n\n@@ -280,15 +280,23 @@ public class JsonConverter implements Converter, HeaderConverter {\n     private Cache<Schema, ObjectNode> fromConnectSchemaCache;\n     private Cache<JsonNode, Schema> toConnectSchemaCache;\n \n-    private final JsonSerializer serializer = new JsonSerializer();\n+    private final JsonSerializer serializer;\n     private final JsonDeserializer deserializer;\n \n     public JsonConverter() {\n-        // this ensures that the JsonDeserializer maintains full precision on\n-        // floating point numbers that cannot fit into float64\n-        final Set<DeserializationFeature> deserializationFeatures = new HashSet<>();\n-        deserializationFeatures.add(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n-        deserializer = new JsonDeserializer(deserializationFeatures, true);\n+        serializer = new JsonSerializer(\n+            mkSet(),\n+            JSON_NODE_FACTORY\n+        );\n+\n+        deserializer = new JsonDeserializer(\n+            mkSet(\n+                // this ensures that the JsonDeserializer maintains full precision on\n+                // floating point numbers that cannot fit into float64\n+                DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS\n+            ),\n+            JSON_NODE_FACTORY\n+        );\n     }\n \n     @Override\n"}}, {"oid": "d20bf6bf2e3976b75efabb34bf482617643e855b", "url": "https://github.com/apache/kafka/commit/d20bf6bf2e3976b75efabb34bf482617643e855b", "message": "requested changes", "committedDate": "2020-03-06T15:30:37Z", "type": "commit"}]}