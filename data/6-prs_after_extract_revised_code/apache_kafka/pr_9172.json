{"pr_number": 9172, "pr_title": "KAFKA-10387: Fix inclusion of transformation configs when topic creation is enabled in Connect", "pr_createdAt": "2020-08-12T19:27:29Z", "pr_url": "https://github.com/apache/kafka/pull/9172", "timeline": [{"oid": "5560bd4bb093449bb13b354fb35e192ee2d25f7e", "url": "https://github.com/apache/kafka/commit/5560bd4bb093449bb13b354fb35e192ee2d25f7e", "message": "KAFKA-10387: Fix inclusion of transformation configs when topic creation is enabled in Connect", "committedDate": "2020-08-12T19:19:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MjY1MQ==", "url": "https://github.com/apache/kafka/pull/9172#discussion_r469572651", "bodyText": "Super tiny nit: the wrapping even from the original was confusing, and maybe it's worth changing one more line and cleaning up the wrapping:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        enrichedSourceConfig = new EnrichedSourceConnectorConfig(plugins,\n          \n          \n            \n                                enrich(defaultConfigDef, props,\n          \n          \n            \n                                defaultGroup), propsWithoutRegexForDefaultGroup);\n          \n          \n            \n                        enrichedSourceConfig = new EnrichedSourceConnectorConfig(plugins,\n          \n          \n            \n                                enrich(defaultConfigDef, props, defaultGroup), \n          \n          \n            \n                                propsWithoutRegexForDefaultGroup);\n          \n      \n    \n    \n  \n\nWDYT?", "author": "rhauch", "createdAt": "2020-08-12T22:04:20Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SourceConnectorConfig.java", "diffHunk": "@@ -129,7 +129,8 @@ public SourceConnectorConfig(Plugins plugins, Map<String, String> props, boolean\n             propsWithoutRegexForDefaultGroup.entrySet()\n                     .removeIf(e -> e.getKey().equals(DEFAULT_TOPIC_CREATION_PREFIX + INCLUDE_REGEX_CONFIG)\n                             || e.getKey().equals(DEFAULT_TOPIC_CREATION_PREFIX + EXCLUDE_REGEX_CONFIG));\n-            enrichedSourceConfig = new EnrichedSourceConnectorConfig(enrich(defaultConfigDef, props,\n+            enrichedSourceConfig = new EnrichedSourceConnectorConfig(plugins,\n+                    enrich(defaultConfigDef, props,\n                     defaultGroup), propsWithoutRegexForDefaultGroup);", "originalCommit": "5560bd4bb093449bb13b354fb35e192ee2d25f7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NzM3MQ==", "url": "https://github.com/apache/kafka/pull/9172#discussion_r469577371", "bodyText": "Good catch. The break was added by accident there.", "author": "kkonstantine", "createdAt": "2020-08-12T22:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MjY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1261ce93fad2f5d834d423edc645579d2de75145", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SourceConnectorConfig.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SourceConnectorConfig.java\nindex 8b310d040a..fc5832ad9d 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SourceConnectorConfig.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SourceConnectorConfig.java\n\n@@ -130,8 +130,8 @@ public class SourceConnectorConfig extends ConnectorConfig {\n                     .removeIf(e -> e.getKey().equals(DEFAULT_TOPIC_CREATION_PREFIX + INCLUDE_REGEX_CONFIG)\n                             || e.getKey().equals(DEFAULT_TOPIC_CREATION_PREFIX + EXCLUDE_REGEX_CONFIG));\n             enrichedSourceConfig = new EnrichedSourceConnectorConfig(plugins,\n-                    enrich(defaultConfigDef, props,\n-                    defaultGroup), propsWithoutRegexForDefaultGroup);\n+                    enrich(defaultConfigDef, props, defaultGroup),\n+                    propsWithoutRegexForDefaultGroup);\n         } else {\n             enrichedSourceConfig = null;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDEzMA==", "url": "https://github.com/apache/kafka/pull/9172#discussion_r469574130", "bodyText": "Do we need another test here, or could we essentially replace the previous test with this one?\nEither way, the test that uses topic creation should probably have a comment (either in the method JavaDoc or in a line comment below) that explicitly mentions enabling topic creation. We don't want someone removing the topic creation configs at a later time.\nWDYT?", "author": "rhauch", "createdAt": "2020-08-12T22:08:10Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/TransformationIntegrationTest.java", "diffHunk": "@@ -318,4 +323,61 @@ public void testFilterOnHasHeaderKeyWithSourceConnector() throws Exception {\n         // delete connector\n         connect.deleteConnector(CONNECTOR_NAME);\n     }\n+\n+    /**\n+     * Test the {@link Filter} transformer with a\n+     * {@link HasHeaderKey} predicate on a source connector.\n+     */\n+    @Test\n+    public void testFilterOnHasHeaderKeyWithSourceConnectorAndTopicCreation() throws Exception {", "originalCommit": "5560bd4bb093449bb13b354fb35e192ee2d25f7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3ODE5NQ==", "url": "https://github.com/apache/kafka/pull/9172#discussion_r469578195", "bodyText": "Since we have a few other tests replacing should be fine.\nI'll add comments. But also, the test will fail if we don't create it (I removed the admin command) because we disable auto topic creation at the broker.", "author": "kkonstantine", "createdAt": "2020-08-12T22:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4Njc2NA==", "url": "https://github.com/apache/kafka/pull/9172#discussion_r469586764", "bodyText": "Sounds good. I just want to avoid someone trying to simplify the tests in the future without understanding that this test is verifying both features work together.", "author": "rhauch", "createdAt": "2020-08-12T22:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MzY5OA==", "url": "https://github.com/apache/kafka/pull/9172#discussion_r470183698", "bodyText": "I added the logic to the previous test.\nAdded another unit test to test 2 groups with 2 transformations.", "author": "kkonstantine", "createdAt": "2020-08-13T19:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "1261ce93fad2f5d834d423edc645579d2de75145", "chunk": "diff --git a/connect/runtime/src/test/java/org/apache/kafka/connect/integration/TransformationIntegrationTest.java b/connect/runtime/src/test/java/org/apache/kafka/connect/integration/TransformationIntegrationTest.java\nindex 66522b4780..379172ad16 100644\n--- a/connect/runtime/src/test/java/org/apache/kafka/connect/integration/TransformationIntegrationTest.java\n+++ b/connect/runtime/src/test/java/org/apache/kafka/connect/integration/TransformationIntegrationTest.java\n\n@@ -267,66 +266,10 @@ public class TransformationIntegrationTest {\n     }\n \n     /**\n-     * Test the {@link Filter} transformer with a\n-     * {@link HasHeaderKey} predicate on a source connector.\n-     */\n-    @Test\n-    public void testFilterOnHasHeaderKeyWithSourceConnector() throws Exception {\n-        assertConnectReady();\n-\n-        // create test topic\n-        connect.kafka().createTopic(\"test-topic\", NUM_TOPIC_PARTITIONS);\n-\n-        // setup up props for the sink connector\n-        Map<String, String> props = new HashMap<>();\n-        props.put(\"name\", CONNECTOR_NAME);\n-        props.put(CONNECTOR_CLASS_CONFIG, SOURCE_CONNECTOR_CLASS_NAME);\n-        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));\n-        props.put(\"topic\", \"test-topic\");\n-        props.put(\"throughput\", String.valueOf(500));\n-        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n-        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n-        props.put(TRANSFORMS_CONFIG, \"filter\");\n-        props.put(TRANSFORMS_CONFIG + \".filter.type\", Filter.class.getSimpleName());\n-        props.put(TRANSFORMS_CONFIG + \".filter.predicate\", \"headerPredicate\");\n-        props.put(TRANSFORMS_CONFIG + \".filter.negate\", \"true\");\n-        props.put(PREDICATES_CONFIG, \"headerPredicate\");\n-        props.put(PREDICATES_CONFIG + \".headerPredicate.type\", HasHeaderKey.class.getSimpleName());\n-        props.put(PREDICATES_CONFIG + \".headerPredicate.name\", \"header-8\");\n-\n-        // expect all records to be produced by the connector\n-        connectorHandle.expectedRecords(NUM_RECORDS_PRODUCED);\n-\n-        // expect all records to be produced by the connector\n-        connectorHandle.expectedCommits(NUM_RECORDS_PRODUCED);\n-\n-        // validate the intended connector configuration, a valid config\n-        connect.assertions().assertExactlyNumErrorsOnConnectorConfigValidation(SOURCE_CONNECTOR_CLASS_NAME, props, 0,\n-                \"Validating connector configuration produced an unexpected number or errors.\");\n-\n-        // start a source connector\n-        connect.configureConnector(CONNECTOR_NAME, props);\n-        assertConnectorRunning();\n-\n-        // wait for the connector tasks to produce enough records\n-        connectorHandle.awaitRecords(RECORD_TRANSFER_DURATION_MS);\n-\n-        // wait for the connector tasks to commit enough records\n-        connectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);\n-\n-        // consume all records from the source topic or fail, to ensure that they were correctly produced\n-        for (ConsumerRecord<byte[], byte[]> record : connect.kafka().consume(1, RECORD_TRANSFER_DURATION_MS, \"test-topic\")) {\n-            assertNotNull(\"Expected header to exist\",\n-                    record.headers().lastHeader(\"header-8\"));\n-        }\n-\n-        // delete connector\n-        connect.deleteConnector(CONNECTOR_NAME);\n-    }\n-\n-    /**\n-     * Test the {@link Filter} transformer with a\n-     * {@link HasHeaderKey} predicate on a source connector.\n+     * Test the {@link Filter} transformer with a {@link HasHeaderKey} predicate on a source connector.\n+     * Note that this test uses topic creation configs to allow the source connector to create\n+     * the topic when it tries to produce the first source record, instead of requiring the topic\n+     * to exist before the connector starts.\n      */\n     @Test\n     public void testFilterOnHasHeaderKeyWithSourceConnectorAndTopicCreation() throws Exception {\n"}}, {"oid": "1261ce93fad2f5d834d423edc645579d2de75145", "url": "https://github.com/apache/kafka/commit/1261ce93fad2f5d834d423edc645579d2de75145", "message": "KAFKA-10387: Adress comments and add another test", "committedDate": "2020-08-13T19:01:22Z", "type": "commit"}]}