{"pr_number": 9000, "pr_title": "KAFKA-10036 Improve handling and documentation of Suppliers", "pr_createdAt": "2020-07-09T09:59:17Z", "pr_url": "https://github.com/apache/kafka/pull/9000", "timeline": [{"oid": "20ba02a727b6af3bcdc059f54375f458fccaf889", "url": "https://github.com/apache/kafka/commit/20ba02a727b6af3bcdc059f54375f458fccaf889", "message": "KAFKA-10036 Detect singleton suppliers", "committedDate": "2020-10-22T09:21:38Z", "type": "commit"}, {"oid": "20ba02a727b6af3bcdc059f54375f458fccaf889", "url": "https://github.com/apache/kafka/commit/20ba02a727b6af3bcdc059f54375f458fccaf889", "message": "KAFKA-10036 Detect singleton suppliers", "committedDate": "2020-10-22T09:21:38Z", "type": "forcePushed"}, {"oid": "041c51a5c3a70dde7be18a006a3b14b63d2f9199", "url": "https://github.com/apache/kafka/commit/041c51a5c3a70dde7be18a006a3b14b63d2f9199", "message": "Missed compilation error", "committedDate": "2020-10-22T20:35:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzOTkzNQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516239935", "bodyText": "This seems to be a public API change that we cannot do without a KIP. Seem you added it so you can pass the different suppliers into checkSupplier ? Also not sure if checkSupplier must be as \"complicated\" as proposed.", "author": "mjsax", "createdAt": "2020-11-02T20:37:33Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformerSupplier.java", "diffHunk": "@@ -33,12 +38,17 @@\n  * @see TransformerSupplier\n  * @see KStream#transform(TransformerSupplier, String...)\n  */\n-public interface ValueTransformerSupplier<V, VR> extends ConnectedStoreProvider {\n+public interface ValueTransformerSupplier<V, VR> extends ConnectedStoreProvider, Supplier<ValueTransformer<V, VR>> {", "originalCommit": "041c51a5c3a70dde7be18a006a3b14b63d2f9199", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MDIxMA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516680210", "bodyText": "Indeed, that was why. Since it already conforms to the interface, I didn't realize this would be a public API change. Will revert and overload checkSupplier instead.", "author": "soarez", "createdAt": "2020-11-03T13:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0ODE0OA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r517048148", "bodyText": "Yeah. Even if it's \"compatible\" and does not break anything, it's still fall into the \"public api change\" category...", "author": "mjsax", "createdAt": "2020-11-04T01:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzOTkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa8c9c1077c147f43ea4fb2346d56530cb0c7be1", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformerSupplier.java b/streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformerSupplier.java\nindex 9b4f6f6fc7..b0c18db437 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformerSupplier.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformerSupplier.java\n\n@@ -38,7 +36,7 @@ import java.util.function.Supplier;\n  * @see TransformerSupplier\n  * @see KStream#transform(TransformerSupplier, String...)\n  */\n-public interface ValueTransformerSupplier<V, VR> extends ConnectedStoreProvider, Supplier<ValueTransformer<V, VR>> {\n+public interface ValueTransformerSupplier<V, VR> extends ConnectedStoreProvider {\n \n     /**\n      * Return a newly constructed {@link ValueTransformer} instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MDc2OQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516240769", "bodyText": "Do we really need to try to extract the concrete interface name?", "author": "mjsax", "createdAt": "2020-11-02T20:39:23Z", "path": "streams/src/main/java/org/apache/kafka/streams/internals/ApiUtils.java", "diffHunk": "@@ -75,4 +81,31 @@ public static long validateMillisecondInstant(final Instant instant, final Strin\n     public static String prepareMillisCheckFailMsgPrefix(final Object value, final String name) {\n         return format(MILLISECOND_VALIDATION_FAIL_MSG_FRMT, name, value);\n     }\n+\n+    /**\n+     * @throws IllegalArgumentException if the same instance is obtained each time\n+     */\n+    public static void checkSupplier(final Supplier<?> supplier) {\n+        if (supplier.get() == supplier.get()) {\n+            final String supplierClass = getAllImplementedInterfaces(supplier.getClass()).stream()", "originalCommit": "041c51a5c3a70dde7be18a006a3b14b63d2f9199", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MTc2MQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516681761", "bodyText": "We don't really need to. I thought it could make for a better, and also predictable, error message. But maybe just using the implementing class name is fine.", "author": "soarez", "createdAt": "2020-11-03T13:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MDc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0ODI2NA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r517048264", "bodyText": "But maybe just using the implementing class name is fine.\n\nThat was my though, too.", "author": "mjsax", "createdAt": "2020-11-04T01:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MDc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa8c9c1077c147f43ea4fb2346d56530cb0c7be1", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/internals/ApiUtils.java b/streams/src/main/java/org/apache/kafka/streams/internals/ApiUtils.java\nindex 57f41c3928..c62de23bed 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/internals/ApiUtils.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/internals/ApiUtils.java\n\n@@ -87,25 +84,20 @@ public final class ApiUtils {\n      */\n     public static void checkSupplier(final Supplier<?> supplier) {\n         if (supplier.get() == supplier.get()) {\n-            final String supplierClass = getAllImplementedInterfaces(supplier.getClass()).stream()\n-                    .map(Class::getSimpleName)\n-                    .filter(name -> name.contains(\"Supplier\") && !name.equals(\"Supplier\"))\n-                    .findFirst().orElse(\"Supplier\");\n+            final String supplierClass = supplier.getClass().getName();\n             throw new IllegalArgumentException(String.format(\"%s generates single reference.\" +\n                     \" %s#get() must return a new object each time it is called.\", supplierClass, supplierClass));\n         }\n     }\n \n-    private static Set<Class<?>> getAllImplementedInterfaces(final Class<?> clazz) {\n-        final Set<Class<?>> set = new LinkedHashSet<>();\n-        final Queue<Class<?>> queue = new LinkedList<>(Collections.singleton(clazz));\n-        while (!queue.isEmpty()) {\n-            for (final Class<?> iface: queue.remove().getInterfaces()) {\n-                if (set.add(iface)) {\n-                    queue.add(iface);\n-                }\n-            }\n+    /**\n+     * @throws IllegalArgumentException if the same instance is obtained each time\n+     */\n+    public static <VR, V> void checkSupplier(final ValueTransformerSupplier<V, VR> supplier) {\n+        if (supplier.get() == supplier.get()) {\n+            final String supplierClass = supplier.getClass().getName();\n+            throw new IllegalArgumentException(String.format(\"%s generates single reference.\" +\n+                    \" %s#get() must return a new object each time it is called.\", supplierClass, supplierClass));\n         }\n-        return set;\n     }\n }\n"}}, {"oid": "fa8c9c1077c147f43ea4fb2346d56530cb0c7be1", "url": "https://github.com/apache/kafka/commit/fa8c9c1077c147f43ea4fb2346d56530cb0c7be1", "message": "Overload and simplify checkSupplier", "committedDate": "2020-11-03T13:49:41Z", "type": "commit"}]}