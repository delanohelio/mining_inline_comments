{"pr_number": 8156, "pr_title": "MINOR: fix ClassCastException handling", "pr_createdAt": "2020-02-22T08:35:55Z", "pr_url": "https://github.com/apache/kafka/pull/8156", "timeline": [{"oid": "ce09e32997c06f18ac3d7750001b27828fad8678", "url": "https://github.com/apache/kafka/commit/ce09e32997c06f18ac3d7750001b27828fad8678", "message": "MINOR: fix ClassCastException handling", "committedDate": "2020-02-22T08:33:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NzQ5Ng==", "url": "https://github.com/apache/kafka/pull/8156#discussion_r382897496", "bodyText": "Moved this from SinkNode to here -- otherwise, we wrap the ClassCastException with a StreamsException and the SinkNode would not add the correct error message.", "author": "mjsax", "createdAt": "2020-02-22T08:36:58Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.java", "diffHunk": "@@ -152,6 +152,22 @@ public void initialize() {\n         try {\n             keyBytes = keySerializer.serialize(topic, headers, key);\n             valBytes = valueSerializer.serialize(topic, headers, value);\n+        } catch (final ClassCastException exception) {", "originalCommit": "ce09e32997c06f18ac3d7750001b27828fad8678", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f0b68338e1674311fad31e3304573fea834693f", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.java\nindex c89cdff063..db08d8963f 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.java\n\n@@ -157,12 +157,13 @@ public class RecordCollectorImpl implements RecordCollector {\n             final String valueClass = value == null ? \"unknown because value is null\" : value.getClass().getName();\n             throw new StreamsException(\n                 String.format(\n-                    \"ClassCastException while producing data to a sink topic. \" +\n+                    \"ClassCastException while producing data to topic %s. \" +\n                         \"A serializer (key: %s / value: %s) is not compatible to the actual key or value type \" +\n                         \"(key type: %s / value type: %s). \" +\n                         \"Change the default Serdes in StreamConfig or provide correct Serdes via method parameters \" +\n                         \"(for example if using the DSL, `#to(String topic, Produced<K, V> produced)` with \" +\n                         \"`Produced.keySerde(WindowedSerdes.timeWindowedSerdeFrom(String.class))`).\",\n+                    topic,\n                     keySerializer.getClass().getName(),\n                     valueSerializer.getClass().getName(),\n                     keyClass,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NzUzOQ==", "url": "https://github.com/apache/kafka/pull/8156#discussion_r382897539", "bodyText": "This test was not correct -- if we get a ClassCastExeption in RecordCollectorImpl#send() it would be wrapped by a StreamsException and not be thrown directly. Hence, the test setup a wrong condition and thus did not \"catch\" the bug.", "author": "mjsax", "createdAt": "2020-02-22T08:38:22Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/SinkNodeTest.java", "diffHunk": "@@ -16,40 +16,22 @@\n  */\n package org.apache.kafka.streams.processor.internals;\n \n-import org.apache.kafka.common.header.Headers;\n import org.apache.kafka.common.serialization.Serdes;\n import org.apache.kafka.common.serialization.Serializer;\n import org.apache.kafka.common.utils.Bytes;\n import org.apache.kafka.streams.errors.StreamsException;\n-import org.apache.kafka.streams.processor.StreamPartitioner;\n import org.apache.kafka.streams.state.StateSerdes;\n import org.apache.kafka.test.InternalMockProcessorContext;\n import org.apache.kafka.test.MockRecordCollector;\n import org.junit.Before;\n import org.junit.Test;\n \n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.CoreMatchers.instanceOf;\n-import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.fail;\n \n public class SinkNodeTest {\n     private final StateSerdes<Bytes, Bytes> anyStateSerde = StateSerdes.withBuiltinTypes(\"anyName\", Bytes.class, Bytes.class);\n     private final Serializer<byte[]> anySerializer = Serdes.ByteArray().serializer();\n-    private final RecordCollector recordCollector = new MockRecordCollector() {\n-        @Override\n-        public <K, V> void send(final String topic,\n-                                final K key,\n-                                final V value,\n-                                final Headers headers,\n-                                final Long timestamp,\n-                                final Serializer<K> keySerializer,\n-                                final Serializer<V> valueSerializer,\n-                                final StreamPartitioner<? super K, ? super V> partitioner) {\n-            throw new ClassCastException(\"boom\");", "originalCommit": "ce09e32997c06f18ac3d7750001b27828fad8678", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "3f0b68338e1674311fad31e3304573fea834693f", "url": "https://github.com/apache/kafka/commit/3f0b68338e1674311fad31e3304573fea834693f", "message": "Improve error message", "committedDate": "2020-02-22T08:39:51Z", "type": "commit"}]}