{"pr_number": 8689, "pr_title": "KAFKA-6145: Add unit tests to verify fix of bug KAFKA-9173", "pr_createdAt": "2020-05-18T22:22:12Z", "pr_url": "https://github.com/apache/kafka/pull/8689", "timeline": [{"oid": "58ac3c1eb20f867eb10e4b7a089f6ee026010e86", "url": "https://github.com/apache/kafka/commit/58ac3c1eb20f867eb10e4b7a089f6ee026010e86", "message": "KAFKA-6145: Add unit tests to verify fix of bug KAFKA-9173\n\nUnit tests\n- shouldAssignActiveStatefulTasksEvenlyOverClientsAndStreamThreadsWithMoreStreamThreadsThanTasks()\n- shouldAssignWarmUpTasksIfStatefulActiveTasksBalancedOverStreamThreadsButNotOverClients()\n- shouldEvenlyAssignActiveStatefulTasksIfClientsAreWarmedUpToBalanceTaskOverClients()\nverify that bug KAFKA-9173 is fixed with the new HighAvailabilityTaskAssignor.\n\nshouldAssignActiveStatefulTasksEvenlyOverClientsAndStreamThreadsWithMoreStreamThreadsThanTasks()\nensures that tasks are evenly assigned over clients when all overprovisioned clients join\nsimultaneously.\n\nshouldAssignWarmUpTasksIfStatefulActiveTasksBalancedOverStreamThreadsButNotOverClients()\nensures that warm-up tasks are assigned to two new clients that join the group\nalthough the assignment is already balanced over stream threads.\n\nshouldEvenlyAssignActiveStatefulTasksIfClientsAreWarmedUpToBalanceTaskOverClients()\nensures that stateful active tasks are balanced over previous and warmed-up client\nalthough it the previous assignment is balanced over stream threads.", "committedDate": "2020-05-18T22:21:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNDY2OQ==", "url": "https://github.com/apache/kafka/pull/8689#discussion_r426924669", "bodyText": "This name seemed not correct.", "author": "cadonna", "createdAt": "2020-05-18T22:23:32Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java", "diffHunk": "@@ -170,7 +171,7 @@ public void shouldAssignActiveStatefulTasksEvenlyOverUnevenlyDistributedStreamTh\n     }\n \n     @Test\n-    public void shouldAssignActiveStatefulTasksEvenlyOverClientsWithLessClientsThanTasks() {\n+    public void shouldAssignActiveStatefulTasksEvenlyOverClientsWithMoreClientsThanTasks() {", "originalCommit": "58ac3c1eb20f867eb10e4b7a089f6ee026010e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2NTgzMQ==", "url": "https://github.com/apache/kafka/pull/8689#discussion_r427365831", "bodyText": "Huh, good catch!", "author": "vvcephei", "createdAt": "2020-05-19T14:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNDY2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MDY5MQ==", "url": "https://github.com/apache/kafka/pull/8689#discussion_r427370691", "bodyText": "If we expect no warmups, we can assert it here with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertValidAssignment(0, allTaskIds.size() / 3 + 1, allTaskIds, emptySet(), clientStates, new StringBuilder());\n          \n          \n            \n                    assertValidAssignment(0, allTaskIds, emptySet(), clientStates, new StringBuilder());", "author": "vvcephei", "createdAt": "2020-05-19T14:57:55Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java", "diffHunk": "@@ -213,6 +214,61 @@ public void shouldAssignActiveStatefulTasksEvenlyOverClientsAndStreamThreadsWith\n         assertBalancedTasks(clientStates);\n     }\n \n+    @Test\n+    public void shouldAssignWarmUpTasksIfStatefulActiveTasksBalancedOverStreamThreadsButNotOverClients() {\n+        final Set<TaskId> allTaskIds = mkSet(TASK_0_0, TASK_0_1, TASK_1_0, TASK_1_1);\n+        final Map<TaskId, Long> lagsForCaughtUpClient = allTaskIds.stream().collect(Collectors.toMap(k -> k, k -> 0L));\n+        final Map<TaskId, Long> lagsForNotCaughtUpClient =\n+            allTaskIds.stream().collect(Collectors.toMap(k -> k, k -> Long.MAX_VALUE));\n+        final ClientState caughtUpClientState = new ClientState(allTaskIds, emptySet(), lagsForCaughtUpClient, 5);\n+        final ClientState notCaughtUpClientState1 = new ClientState(emptySet(), emptySet(), lagsForNotCaughtUpClient, 5);\n+        final ClientState notCaughtUpClientState2 = new ClientState(emptySet(), emptySet(), lagsForNotCaughtUpClient, 5);\n+        final Map<UUID, ClientState> clientStates =\n+            getClientStatesMap(caughtUpClientState, notCaughtUpClientState1, notCaughtUpClientState2);\n+        final boolean unstable = new HighAvailabilityTaskAssignor().assign(\n+            clientStates,\n+            allTaskIds,\n+            allTaskIds,\n+            new AssignmentConfigs(0L, allTaskIds.size() / 3 + 1, 0, 0L)\n+        );\n+\n+        assertThat(unstable, is(true));\n+        assertThat(notCaughtUpClientState1.standbyTaskCount(), greaterThanOrEqualTo(allTaskIds.size() / 3));\n+        assertThat(notCaughtUpClientState2.standbyTaskCount(), greaterThanOrEqualTo(allTaskIds.size() / 3));\n+        assertValidAssignment(0, allTaskIds.size() / 3 + 1, allTaskIds, emptySet(), clientStates, new StringBuilder());\n+    }\n+\n+    @Test\n+    public void shouldEvenlyAssignActiveStatefulTasksIfClientsAreWarmedUpToBalanceTaskOverClients() {\n+        final Set<TaskId> allTaskIds = mkSet(TASK_0_0, TASK_0_1, TASK_1_0, TASK_1_1);\n+        final Set<TaskId> warmedUpTaskIds1 = mkSet(TASK_0_1);\n+        final Set<TaskId> warmedUpTaskIds2 = mkSet(TASK_1_0);\n+        final Map<TaskId, Long> lagsForCaughtUpClient = allTaskIds.stream().collect(Collectors.toMap(k -> k, k -> 0L));\n+        final Map<TaskId, Long> lagsForWarmedUpClient1 =\n+            allTaskIds.stream().collect(Collectors.toMap(k -> k, k -> Long.MAX_VALUE));\n+        lagsForWarmedUpClient1.put(TASK_0_1, 0L);\n+        final Map<TaskId, Long> lagsForWarmedUpClient2 =\n+            allTaskIds.stream().collect(Collectors.toMap(k -> k, k -> Long.MAX_VALUE));\n+        lagsForWarmedUpClient2.put(TASK_1_0, 0L);\n+        final ClientState caughtUpClientState = new ClientState(allTaskIds, emptySet(), lagsForCaughtUpClient, 5);\n+        final ClientState warmedUpClientState1 = new ClientState(emptySet(), warmedUpTaskIds1, lagsForWarmedUpClient1, 5);\n+        final ClientState warmedUpClientState2 = new ClientState(emptySet(), warmedUpTaskIds2, lagsForWarmedUpClient2, 5);\n+        final Map<UUID, ClientState> clientStates =\n+            getClientStatesMap(caughtUpClientState, warmedUpClientState1, warmedUpClientState2);\n+        final boolean unstable = new HighAvailabilityTaskAssignor().assign(\n+            clientStates,\n+            allTaskIds,\n+            allTaskIds,\n+            new AssignmentConfigs(0L, allTaskIds.size() / 3 + 1, 0, 0L)\n+        );\n+\n+        assertThat(unstable, is(false));\n+        assertValidAssignment(0, allTaskIds.size() / 3 + 1, allTaskIds, emptySet(), clientStates, new StringBuilder());", "originalCommit": "58ac3c1eb20f867eb10e4b7a089f6ee026010e86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13557fd371589b97ee40f8f957f5192054559671", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java\nindex 0b66dfed2f..fa9e17b704 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java\n\n@@ -263,7 +263,7 @@ public class HighAvailabilityTaskAssignorTest {\n         );\n \n         assertThat(unstable, is(false));\n-        assertValidAssignment(0, allTaskIds.size() / 3 + 1, allTaskIds, emptySet(), clientStates, new StringBuilder());\n+        assertValidAssignment(0, allTaskIds, emptySet(), clientStates, new StringBuilder());\n         assertBalancedActiveAssignment(clientStates, new StringBuilder());\n         assertBalancedStatefulAssignment(allTaskIds, clientStates, new StringBuilder());\n         assertBalancedTasks(clientStates);\n"}}, {"oid": "13557fd371589b97ee40f8f957f5192054559671", "url": "https://github.com/apache/kafka/commit/13557fd371589b97ee40f8f957f5192054559671", "message": "Include feedback", "committedDate": "2020-05-19T15:52:33Z", "type": "commit"}]}