{"pr_number": 8161, "pr_title": "KAFKA-9047: Making AdminClient group operations respect retries and backoff", "pr_createdAt": "2020-02-24T21:10:22Z", "pr_url": "https://github.com/apache/kafka/pull/8161", "timeline": [{"oid": "4437f754643b9e7340f3cc6701ed118f37b44631", "url": "https://github.com/apache/kafka/commit/4437f754643b9e7340f3cc6701ed118f37b44631", "message": "added new constructor with optional arguments", "committedDate": "2020-02-14T01:24:43Z", "type": "commit"}, {"oid": "8e83d27427ef9d22cc10cc50823113f913a10452", "url": "https://github.com/apache/kafka/commit/8e83d27427ef9d22cc10cc50823113f913a10452", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-02-14T17:16:12Z", "type": "commit"}, {"oid": "6d52a8982b2540cc56d9b2c62a734feb01b5633c", "url": "https://github.com/apache/kafka/commit/6d52a8982b2540cc56d9b2c62a734feb01b5633c", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-02-15T01:17:24Z", "type": "commit"}, {"oid": "44a5f9d01de29e464f8d716de31abfafad0bf345", "url": "https://github.com/apache/kafka/commit/44a5f9d01de29e464f8d716de31abfafad0bf345", "message": "wrote initial test to test retrybackoff", "committedDate": "2020-02-15T03:16:47Z", "type": "commit"}, {"oid": "5b34e14ee3bbd23eea55b58de424553cad786519", "url": "https://github.com/apache/kafka/commit/5b34e14ee3bbd23eea55b58de424553cad786519", "message": "made changes to get retry ms logic", "committedDate": "2020-02-15T03:17:26Z", "type": "commit"}, {"oid": "2dee84f2d2cea1d654f9fec53bfc099aa03bb974", "url": "https://github.com/apache/kafka/commit/2dee84f2d2cea1d654f9fec53bfc099aa03bb974", "message": "made changes to deadline logic", "committedDate": "2020-02-15T03:21:14Z", "type": "commit"}, {"oid": "c9f21e78f56c7a50b32d46fc36bcbc08a0fd92be", "url": "https://github.com/apache/kafka/commit/c9f21e78f56c7a50b32d46fc36bcbc08a0fd92be", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-02-15T03:22:31Z", "type": "commit"}, {"oid": "ef4de60a1c87407aba2f291240e401e2e70184a4", "url": "https://github.com/apache/kafka/commit/ef4de60a1c87407aba2f291240e401e2e70184a4", "message": "added another condition to retry backoff for offset commit test", "committedDate": "2020-02-15T03:53:02Z", "type": "commit"}, {"oid": "64154dda901189d094deccfd73543df177821775", "url": "https://github.com/apache/kafka/commit/64154dda901189d094deccfd73543df177821775", "message": "initial version of retry test and logic", "committedDate": "2020-02-15T07:54:21Z", "type": "commit"}, {"oid": "5c72165a242783a4248f0cfe0c58d39500035cab", "url": "https://github.com/apache/kafka/commit/5c72165a242783a4248f0cfe0c58d39500035cab", "message": "better placement of num retry logic", "committedDate": "2020-02-15T08:03:21Z", "type": "commit"}, {"oid": "032617676afc3f34f6b849248aa92087824f05b1", "url": "https://github.com/apache/kafka/commit/032617676afc3f34f6b849248aa92087824f05b1", "message": "adding updated logic to other calls", "committedDate": "2020-02-15T08:11:50Z", "type": "commit"}, {"oid": "a4d62866793e9d2c82646419503d20ddba098dcb", "url": "https://github.com/apache/kafka/commit/a4d62866793e9d2c82646419503d20ddba098dcb", "message": "added tests for DescribeConsumerGroup", "committedDate": "2020-02-15T08:41:36Z", "type": "commit"}, {"oid": "35b9f0d867c82e61dbe26cd45d58288990362816", "url": "https://github.com/apache/kafka/commit/35b9f0d867c82e61dbe26cd45d58288990362816", "message": "small tweak to test", "committedDate": "2020-02-15T08:53:12Z", "type": "commit"}, {"oid": "46d494c12b456117e74f08411913ef42c15412c1", "url": "https://github.com/apache/kafka/commit/46d494c12b456117e74f08411913ef42c15412c1", "message": "added tests for ListConsumerGroupOffsets", "committedDate": "2020-02-15T09:14:16Z", "type": "commit"}, {"oid": "883461c41f9cb0c95449b341a25444d766de5dab", "url": "https://github.com/apache/kafka/commit/883461c41f9cb0c95449b341a25444d766de5dab", "message": "fixing testOffsetCommitRetryBackoff test", "committedDate": "2020-02-15T23:57:22Z", "type": "commit"}, {"oid": "0a5c2d81fa1155fb3c5d4a8adca2ef1d20d694eb", "url": "https://github.com/apache/kafka/commit/0a5c2d81fa1155fb3c5d4a8adca2ef1d20d694eb", "message": "fixing testDescribeConsumerGroupRetryBackoff", "committedDate": "2020-02-16T00:02:52Z", "type": "commit"}, {"oid": "2e1387a9f7289b979ea9053c35ff08c41eb4e8ad", "url": "https://github.com/apache/kafka/commit/2e1387a9f7289b979ea9053c35ff08c41eb4e8ad", "message": "fixing ListConsumerGroupOffsetsRetryBackoff", "committedDate": "2020-02-16T00:06:00Z", "type": "commit"}, {"oid": "b5d033e4fe8adcf7e718986154d8e4b5e62ea946", "url": "https://github.com/apache/kafka/commit/b5d033e4fe8adcf7e718986154d8e4b5e62ea946", "message": "fixing testDeleteConsumerGroupsRetryBackoff", "committedDate": "2020-02-16T00:10:34Z", "type": "commit"}, {"oid": "591f5234490d0d6488cfb68de60bcf46186ea18e", "url": "https://github.com/apache/kafka/commit/591f5234490d0d6488cfb68de60bcf46186ea18e", "message": "adding tests for DeleteConsumerGroupOffsets", "committedDate": "2020-02-16T01:37:38Z", "type": "commit"}, {"oid": "4b7641a17593bfb3341d9414b38cd5eccbdc3aba", "url": "https://github.com/apache/kafka/commit/4b7641a17593bfb3341d9414b38cd5eccbdc3aba", "message": "adding tests for RemoveMembersFromGroupRetry", "committedDate": "2020-02-16T03:15:20Z", "type": "commit"}, {"oid": "deecd5137807e0ed79d57439eeae9cf46ab54a0d", "url": "https://github.com/apache/kafka/commit/deecd5137807e0ed79d57439eeae9cf46ab54a0d", "message": "removed changes for listOffsets", "committedDate": "2020-02-16T05:27:21Z", "type": "commit"}, {"oid": "f37c8144321a33455620d7982dc715f9c2319bc1", "url": "https://github.com/apache/kafka/commit/f37c8144321a33455620d7982dc715f9c2319bc1", "message": "added new max retries reached exception", "committedDate": "2020-02-16T05:33:01Z", "type": "commit"}, {"oid": "d2bbd7900fb6ec5300f61529cc589a3e96c23cc2", "url": "https://github.com/apache/kafka/commit/d2bbd7900fb6ec5300f61529cc589a3e96c23cc2", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-02-16T09:12:08Z", "type": "commit"}, {"oid": "b5a01b18e8441e82a82ac83c785d535e54f3a8a3", "url": "https://github.com/apache/kafka/commit/b5a01b18e8441e82a82ac83c785d535e54f3a8a3", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-02-19T06:34:24Z", "type": "commit"}, {"oid": "5a1512dbc4181f75281cc84e96e1aa48d270b272", "url": "https://github.com/apache/kafka/commit/5a1512dbc4181f75281cc84e96e1aa48d270b272", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-02-19T18:18:03Z", "type": "commit"}, {"oid": "a150d8fc8841a546e6099865f4be4ddf1e2a3549", "url": "https://github.com/apache/kafka/commit/a150d8fc8841a546e6099865f4be4ddf1e2a3549", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-02-24T20:30:05Z", "type": "commit"}, {"oid": "ac825b58b5d9406dfe3040cf127c3b109b7830a9", "url": "https://github.com/apache/kafka/commit/ac825b58b5d9406dfe3040cf127c3b109b7830a9", "message": "changed naming error", "committedDate": "2020-02-24T20:38:04Z", "type": "commit"}, {"oid": "3d96bb55568492bac861b8a584b5ab3bdaf7570d", "url": "https://github.com/apache/kafka/commit/3d96bb55568492bac861b8a584b5ab3bdaf7570d", "message": "removed stray comma", "committedDate": "2020-02-24T20:41:46Z", "type": "commit"}, {"oid": "52b1346e5fd7ab53cb4c0d698f90e6e2f8686b99", "url": "https://github.com/apache/kafka/commit/52b1346e5fd7ab53cb4c0d698f90e6e2f8686b99", "message": "fixed misnaming", "committedDate": "2020-02-24T21:03:15Z", "type": "commit"}, {"oid": "97258b1de3e1b9dcdeed97f454dbd9f7700e1e45", "url": "https://github.com/apache/kafka/commit/97258b1de3e1b9dcdeed97f454dbd9f7700e1e45", "message": "fixed misnaming", "committedDate": "2020-02-24T21:07:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzY5NQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r383517695", "bodyText": "I think we can just use TimeoutException. We would need a KIP to expose a new exception type.", "author": "hachikuji", "createdAt": "2020-02-24T21:13:57Z", "path": "clients/src/main/java/org/apache/kafka/common/errors/MaxRetriesReachedException.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.errors;\n+\n+import org.apache.kafka.common.KafkaException;\n+/**\n+ * Indicates that a request has reached the maximum number of tries.\n+ */\n+public class MaxRetriesReachedException extends KafkaException {", "originalCommit": "97258b1de3e1b9dcdeed97f454dbd9f7700e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMjQyNg==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r383602426", "bodyText": "Ah okay wasn't aware of that. Will make the change to TimeoutException.", "author": "skaundinya15", "createdAt": "2020-02-25T00:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "48a445c7e561ac717d4b39382b98acc40bc0766b", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/errors/MaxRetriesReachedException.java b/clients/src/main/java/org/apache/kafka/common/errors/MaxRetriesReachedException.java\ndeleted file mode 100644\nindex 51ac9834bd..0000000000\n--- a/clients/src/main/java/org/apache/kafka/common/errors/MaxRetriesReachedException.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.common.errors;\n-\n-import org.apache.kafka.common.KafkaException;\n-/**\n- * Indicates that a request has reached the maximum number of tries.\n- */\n-public class MaxRetriesReachedException extends KafkaException {\n-  private final static long serialVersionUID = 1L;\n-\n-  public MaxRetriesReachedException(String message, Throwable cause) {\n-    super(message, cause);\n-  }\n-\n-  public MaxRetriesReachedException(String message) {\n-    super(message);\n-  }\n-\n-  public MaxRetriesReachedException(Throwable cause) {\n-    super(cause);\n-  }\n-\n-  public MaxRetriesReachedException() {\n-    super();\n-  }\n-\n-}\n"}}, {"oid": "48a445c7e561ac717d4b39382b98acc40bc0766b", "url": "https://github.com/apache/kafka/commit/48a445c7e561ac717d4b39382b98acc40bc0766b", "message": "removed exception and fixed checkstlye issues", "committedDate": "2020-02-25T01:12:18Z", "type": "commit"}, {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738", "url": "https://github.com/apache/kafka/commit/93d9dadd50d9b51414301001b7ce9be42a83b738", "message": "fixing checkstyle issues", "committedDate": "2020-03-01T04:33:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODUwMA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386478500", "bodyText": "I'm just curious if we can call Call::fail to push the call instance into the queue again?", "author": "ctan888", "createdAt": "2020-03-02T15:53:36Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2813,7 +2838,10 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                 // If coordinator changed since we fetched it, retry\n                 if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n-                    rescheduleFindCoordinatorTask(context, () -> getDescribeConsumerGroupsCall(context));\n+                    long nextAllowedTryMs = calculateNextAllowedRetryMs(this.nextAllowedTryMs());\n+                    Call call = getDescribeConsumerGroupsCall(context, Optional.of(this.tries() + 1),", "originalCommit": "93d9dadd50d9b51414301001b7ce9be42a83b738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNjE4Nw==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386636187", "bodyText": "We won't be able to do this because we need to be able to reschedule the findCoordinator call and then subsequently schedule the call. It's easier to pass the state across a new construction of the call and have the fail logic when we are in the findCoordinator logic.", "author": "skaundinya15", "createdAt": "2020-03-02T20:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "bbc4321e249169c1668357de528a422da44a4c8b", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 634d37c5a7..47b8dcc9a5 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -2838,9 +2837,9 @@ public class KafkaAdminClient extends AdminClient {\n \n                 // If coordinator changed since we fetched it, retry\n                 if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n-                    long nextAllowedTryMs = calculateNextAllowedRetryMs(this.nextAllowedTryMs());\n-                    Call call = getDescribeConsumerGroupsCall(context, Optional.of(this.tries() + 1),\n-                        Optional.of(nextAllowedTryMs));\n+                    long nextAllowedTryMs = calculateNextAllowedRetryMs(time.milliseconds());\n+                    Call call = getDescribeConsumerGroupsCall(context, this.tries() + 1,\n+                        nextAllowedTryMs);\n                     rescheduleFindCoordinatorTask(context, () -> call);\n                     return;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NTk2OQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386665969", "bodyText": "nit: add some sanity check on these numbers (like should be non-negative etc).\nAlso update toString method to include this information.", "author": "soondenana", "createdAt": "2020-03-02T21:38:40Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,13 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {\n+            this(false, callName, deadlineMs, nodeProvider);\n+            this.tries = numTries.orElse(0);\n+            this.nextAllowedTryMs = nextAllowedTryMs.orElse(0L);", "originalCommit": "93d9dadd50d9b51414301001b7ce9be42a83b738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxOTE3OA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386719178", "bodyText": "Done.", "author": "skaundinya15", "createdAt": "2020-03-02T23:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NTk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbc4321e249169c1668357de528a422da44a4c8b", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 634d37c5a7..47b8dcc9a5 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -691,10 +691,12 @@ public class KafkaAdminClient extends AdminClient {\n         }\n \n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n-            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {\n+            int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n-            this.tries = numTries.orElse(0);\n-            this.nextAllowedTryMs = nextAllowedTryMs.orElse(0L);\n+            assert numTries >= 0;\n+            assert nextAllowedTryMs >= 0;\n+            this.tries = numTries;\n+            this.nextAllowedTryMs = nextAllowedTryMs;\n         }\n \n         protected Node curNode() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2ODM0MA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386668340", "bodyText": "nit: Maybe update the message to \"Max retries maxRetries for  reached.\"", "author": "soondenana", "createdAt": "2020-03-02T21:43:16Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2683,6 +2698,14 @@ private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> c\n                 context.node().orElse(null));\n         // Requeue the task so that we can try with new coordinator\n         context.setNode(null);\n+\n+        Call call = nextCall.get();\n+\n+        if (call.tries() > maxRetries) {\n+            log.debug(\"Max retries for {} reached\", call);", "originalCommit": "93d9dadd50d9b51414301001b7ce9be42a83b738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxOTE4OQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386719189", "bodyText": "Done.", "author": "skaundinya15", "createdAt": "2020-03-02T23:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2ODM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "bbc4321e249169c1668357de528a422da44a4c8b", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 634d37c5a7..47b8dcc9a5 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -2702,7 +2701,7 @@ public class KafkaAdminClient extends AdminClient {\n         Call call = nextCall.get();\n \n         if (call.tries() > maxRetries) {\n-            log.debug(\"Max retries for {} reached\", call);\n+            log.debug(\"Max retries {} for {} reached\", maxRetries, call);\n             call.fail(time.milliseconds(), new TimeoutException());\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4OTM0NQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386689345", "bodyText": "Not sure if we need to make these Optional. 0 seems to be a good default value for these.", "author": "soondenana", "createdAt": "2020-03-02T22:27:28Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,13 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {", "originalCommit": "93d9dadd50d9b51414301001b7ce9be42a83b738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxOTM5NA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386719394", "bodyText": "I initially thought that we might need one, because we wouldn't know, but after thinking about your comment that 0 is a good default value, I have changed it to reflect as such.", "author": "skaundinya15", "createdAt": "2020-03-02T23:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4OTM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbc4321e249169c1668357de528a422da44a4c8b", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 634d37c5a7..47b8dcc9a5 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -691,10 +691,12 @@ public class KafkaAdminClient extends AdminClient {\n         }\n \n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n-            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {\n+            int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n-            this.tries = numTries.orElse(0);\n-            this.nextAllowedTryMs = nextAllowedTryMs.orElse(0L);\n+            assert numTries >= 0;\n+            assert nextAllowedTryMs >= 0;\n+            this.tries = numTries;\n+            this.nextAllowedTryMs = nextAllowedTryMs;\n         }\n \n         protected Node curNode() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5Mjk3NQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386692975", "bodyText": "To keep this logic same as one in Call::fail method, lets set the new time as:\n\nnextAllowedTryMs = now + retryBackoffMs", "author": "soondenana", "createdAt": "2020-03-02T22:35:50Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3535,6 +3576,12 @@ void handleFailure(Throwable throwable) {\n         return new ListPartitionReassignmentsResult(partitionReassignmentsFuture);\n     }\n \n+    private long calculateNextAllowedRetryMs(long currNextAllowedRetryMs) {\n+        return (currNextAllowedRetryMs == 0) ?\n+            time.milliseconds() + retryBackoffMs :\n+            currNextAllowedRetryMs + retryBackoffMs;", "originalCommit": "93d9dadd50d9b51414301001b7ce9be42a83b738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxOTIwNw==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386719207", "bodyText": "Done.", "author": "skaundinya15", "createdAt": "2020-03-02T23:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5Mjk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbc4321e249169c1668357de528a422da44a4c8b", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 634d37c5a7..47b8dcc9a5 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -3576,10 +3574,8 @@ public class KafkaAdminClient extends AdminClient {\n         return new ListPartitionReassignmentsResult(partitionReassignmentsFuture);\n     }\n \n-    private long calculateNextAllowedRetryMs(long currNextAllowedRetryMs) {\n-        return (currNextAllowedRetryMs == 0) ?\n-            time.milliseconds() + retryBackoffMs :\n-            currNextAllowedRetryMs + retryBackoffMs;\n+    private long calculateNextAllowedRetryMs(long now) {\n+        return now + retryBackoffMs;\n     }\n \n     private void handleNotControllerError(Errors error) throws ApiException {\n"}}, {"oid": "df244bc71c445cd59e679362c12932c82a16e930", "url": "https://github.com/apache/kafka/commit/df244bc71c445cd59e679362c12932c82a16e930", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-03-02T23:23:52Z", "type": "commit"}, {"oid": "bbc4321e249169c1668357de528a422da44a4c8b", "url": "https://github.com/apache/kafka/commit/bbc4321e249169c1668357de528a422da44a4c8b", "message": "addressing PR comments", "committedDate": "2020-03-02T23:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyNzYxOA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386727618", "bodyText": "I am not sure we enable java asserts when running Kafka server. Lets check the condition and throw IllegalArgumentException instead.", "author": "soondenana", "createdAt": "2020-03-03T00:11:20Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -691,10 +691,12 @@ public Node provide() {\n         }\n \n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n-            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {\n+            int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n-            this.tries = numTries.orElse(0);\n-            this.nextAllowedTryMs = nextAllowedTryMs.orElse(0L);\n+            assert numTries >= 0;\n+            assert nextAllowedTryMs >= 0;", "originalCommit": "bbc4321e249169c1668357de528a422da44a4c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNDI1NA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386734254", "bodyText": "Done.", "author": "skaundinya15", "createdAt": "2020-03-03T00:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyNzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "981cf4cde67b7636a42efcf4f0f0c3cd64bcbd05", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 47b8dcc9a5..e7b59cd5f2 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -693,8 +693,13 @@ public class KafkaAdminClient extends AdminClient {\n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n             int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n-            assert numTries >= 0;\n-            assert nextAllowedTryMs >= 0;\n+            if (numTries < 0) {\n+                throw new IllegalStateException(\"Number of tries for a call cannot be negative!\");\n+            }\n+            if (nextAllowedTryMs < 0) {\n+                throw new IllegalStateException(\"Next allowed time for a try for a call cannot\"\n+                    + \" be negative!\");\n+            }\n             this.tries = numTries;\n             this.nextAllowedTryMs = nextAllowedTryMs;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODc4Ng==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386728786", "bodyText": "nit: As we always pass same value to this method, we can drop the parameter and use time.milliseconds within this method.", "author": "soondenana", "createdAt": "2020-03-03T00:15:05Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3576,10 +3574,8 @@ void handleFailure(Throwable throwable) {\n         return new ListPartitionReassignmentsResult(partitionReassignmentsFuture);\n     }\n \n-    private long calculateNextAllowedRetryMs(long currNextAllowedRetryMs) {\n-        return (currNextAllowedRetryMs == 0) ?\n-            time.milliseconds() + retryBackoffMs :\n-            currNextAllowedRetryMs + retryBackoffMs;\n+    private long calculateNextAllowedRetryMs(long now) {", "originalCommit": "bbc4321e249169c1668357de528a422da44a4c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNDIxNw==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386734217", "bodyText": "Done.", "author": "skaundinya15", "createdAt": "2020-03-03T00:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "981cf4cde67b7636a42efcf4f0f0c3cd64bcbd05", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 47b8dcc9a5..e7b59cd5f2 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -3574,8 +3579,8 @@ public class KafkaAdminClient extends AdminClient {\n         return new ListPartitionReassignmentsResult(partitionReassignmentsFuture);\n     }\n \n-    private long calculateNextAllowedRetryMs(long now) {\n-        return now + retryBackoffMs;\n+    private long calculateNextAllowedRetryMs() {\n+        return time.milliseconds() + retryBackoffMs;\n     }\n \n     private void handleNotControllerError(Errors error) throws ApiException {\n"}}, {"oid": "981cf4cde67b7636a42efcf4f0f0c3cd64bcbd05", "url": "https://github.com/apache/kafka/commit/981cf4cde67b7636a42efcf4f0f0c3cd64bcbd05", "message": "addressing PR comments", "committedDate": "2020-03-03T00:32:33Z", "type": "commit"}, {"oid": "24c32a005a007f2950cffcf8366d68eef13c7486", "url": "https://github.com/apache/kafka/commit/24c32a005a007f2950cffcf8366d68eef13c7486", "message": "fixing type of exception thrown", "committedDate": "2020-03-03T00:42:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTE3NQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r387189175", "bodyText": "Is it possible to move the check to the AdminClientRunnable::call / enqueue to make this code pieces reusable?", "author": "ctan888", "createdAt": "2020-03-03T17:48:49Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2683,6 +2702,14 @@ private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> c\n                 context.node().orElse(null));\n         // Requeue the task so that we can try with new coordinator\n         context.setNode(null);\n+\n+        Call call = nextCall.get();\n+\n+        if (call.tries() > maxRetries) {", "originalCommit": "24c32a005a007f2950cffcf8366d68eef13c7486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODg5OA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r387208898", "bodyText": "What about adding a new class method in Call?", "author": "ctan888", "createdAt": "2020-03-03T18:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzgyMQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r387223821", "bodyText": "We could but we still have to do a check as to whether or not we failed the call to make sure we return from the method. It would still produce the same amount of code and I'm not sure if it would be any more efficient.", "author": "skaundinya15", "createdAt": "2020-03-03T18:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyNDM3Ng==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r387224376", "bodyText": "And I'm not sure if we should move the check to AdminClientRunnable::call/enqueue because this is pretty specific to the consumer groups API. However if we see there's a potential reuse of code elsewhere we can definitely consider doing so.", "author": "skaundinya15", "createdAt": "2020-03-03T18:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a17d56fca676c70579222b1fbe5d1dd501c9297", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex ae6fccb81d..fec787ec7e 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -2705,7 +2705,7 @@ public class KafkaAdminClient extends AdminClient {\n \n         Call call = nextCall.get();\n \n-        if (call.tries() > maxRetries) {\n+        if (call.tries > maxRetries) {\n             log.debug(\"Max retries {} for {} reached\", maxRetries, call);\n             call.fail(time.milliseconds(), new TimeoutException());\n             return;\n"}}, {"oid": "5ed478dc4934e96583b25cbf03956ffc9cb60490", "url": "https://github.com/apache/kafka/commit/5ed478dc4934e96583b25cbf03956ffc9cb60490", "message": "Merge branch 'trunk' into KAFKA-9047", "committedDate": "2020-03-10T02:00:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMzgwOQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386723809", "bodyText": "nit: this alignment is a little weird. Typically we would align with the arg above", "author": "hachikuji", "createdAt": "2020-03-03T00:00:13Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,15 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            int numTries, long nextAllowedTryMs) {", "originalCommit": "bbc4321e249169c1668357de528a422da44a4c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MDc0NQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390750745", "bodyText": "Ack, will fix.", "author": "skaundinya15", "createdAt": "2020-03-11T05:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMzgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "981cf4cde67b7636a42efcf4f0f0c3cd64bcbd05", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex 47b8dcc9a5..e7b59cd5f2 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -693,8 +693,13 @@ public class KafkaAdminClient extends AdminClient {\n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n             int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n-            assert numTries >= 0;\n-            assert nextAllowedTryMs >= 0;\n+            if (numTries < 0) {\n+                throw new IllegalStateException(\"Number of tries for a call cannot be negative!\");\n+            }\n+            if (nextAllowedTryMs < 0) {\n+                throw new IllegalStateException(\"Next allowed time for a try for a call cannot\"\n+                    + \" be negative!\");\n+            }\n             this.tries = numTries;\n             this.nextAllowedTryMs = nextAllowedTryMs;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTA0MQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390695041", "bodyText": "nit: I feel like a jerk for saying this, but can we avoid the exclamation points? The enthusiasm can be a bit vexing for an operator who hits this error.", "author": "hachikuji", "createdAt": "2020-03-11T01:07:26Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,20 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            int numTries, long nextAllowedTryMs) {\n+            this(false, callName, deadlineMs, nodeProvider);\n+            if (numTries < 0) {\n+                throw new IllegalArgumentException(\"Number of tries for a call cannot be negative!\");", "originalCommit": "5ed478dc4934e96583b25cbf03956ffc9cb60490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MDgxOQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390750819", "bodyText": "Fair point, will remove the exclamation mark.", "author": "skaundinya15", "createdAt": "2020-03-11T05:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a17d56fca676c70579222b1fbe5d1dd501c9297", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex ae6fccb81d..fec787ec7e 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -691,14 +691,14 @@ public class KafkaAdminClient extends AdminClient {\n         }\n \n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n-            int numTries, long nextAllowedTryMs) {\n+             int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n             if (numTries < 0) {\n-                throw new IllegalArgumentException(\"Number of tries for a call cannot be negative!\");\n+                throw new IllegalArgumentException(\"Number of tries for a call cannot be negative\");\n             }\n             if (nextAllowedTryMs < 0) {\n                 throw new IllegalArgumentException(\"Next allowed time for a try for a call cannot\"\n-                    + \" be negative!\");\n+                    + \" be negative\");\n             }\n             this.tries = numTries;\n             this.nextAllowedTryMs = nextAllowedTryMs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5OTk3MA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390699970", "bodyText": "nit: I think technically we don't need this. For internal classes, I tend to favor accessing fields directly when the class is nested. I don't feel strongly, so up to you.", "author": "hachikuji", "createdAt": "2020-03-11T01:28:44Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -799,12 +813,17 @@ boolean handleUnsupportedVersionException(UnsupportedVersionException exception)\n \n         @Override\n         public String toString() {\n-            return \"Call(callName=\" + callName + \", deadlineMs=\" + deadlineMs + \")\";\n+            return \"Call(callName=\" + callName + \", deadlineMs=\" + deadlineMs +\n+                \", tries=\" + tries + \", nextAllowedTryMs=\" + nextAllowedTryMs + \")\";\n         }\n \n         public boolean isInternal() {\n             return internal;\n         }\n+\n+        public int tries() {", "originalCommit": "5ed478dc4934e96583b25cbf03956ffc9cb60490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MDkzMg==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390750932", "bodyText": "I do have a preference towards setters and getters, but in this case since it is a nested class as you said, I'll remove it.", "author": "skaundinya15", "createdAt": "2020-03-11T05:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5OTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NzAwNw==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393877007", "bodyText": "Actually, since tries is a private field inside Call, I have the tries() getter method in order to pass the state of the number of tries across calls. In a future PR we could remove this when we have a better CallContext object as part of the exponential backoff KIP.", "author": "skaundinya15", "createdAt": "2020-03-17T18:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5OTk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "44260508da1ddbeebff4e389ee5ba84d8c506fa5", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex ae6fccb81d..db00ce87e9 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -820,10 +806,6 @@ public class KafkaAdminClient extends AdminClient {\n         public boolean isInternal() {\n             return internal;\n         }\n-\n-        public int tries() {\n-            return tries;\n-        }\n     }\n \n     static class TimeoutProcessorFactory {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390702711", "bodyText": "One of the annoying aspects of the code below is that we have a lot of redundant logic for constructing a call in the context of a previously failed call. I wonder if it would simplify the logic if we added a constructor which accepts the failed call as an argument and then adjusts tries etc accordingly.", "author": "hachikuji", "createdAt": "2020-03-11T01:40:48Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,20 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,", "originalCommit": "5ed478dc4934e96583b25cbf03956ffc9cb60490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1NDUyNw==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390754527", "bodyText": "Yeah that was something that was bothering me as well. However when I tried to create a constructor that would take the failed call, it wasn't working as to use the constructor I also had to implement the methods in the Call class. That's why I think we get the call normally from the method that is returning the call. Taking the getDescribeConsumerGroupsCall example, it could get a bit more messy if wanted to implement the methods within the new constructor:\n                if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n                    Call call = this.call();\n                    Call call2 = new Call(call) {\n                        @Override\n                        Builder createRequest(final int timeoutMs) {\n                            return call.createRequest(timeoutMs);\n                        }\n\n                        @Override\n                        void handleResponse(final AbstractResponse abstractResponse) {\n                            call.handleResponse(abstractResponse);\n                        }\n\n                        @Override\n                        void handleFailure(final Throwable throwable) {\n                            call.handleFailure(throwable);\n                        }\n                    };\n                    rescheduleFindCoordinatorTask(context, () -> call2);\n                    return;\n                }\nWith a new constructor in Call looking like this:\n        Call(Call call) {\n            this.internal = call.internal;\n            this.callName = call.callName;\n            this.deadlineMs = call.deadlineMs;\n            this.nodeProvider = call.nodeProvider;\n            this.aborted = call.aborted;\n            this.curNode = call.curNode;\n            this.tries += 1;\n            this.nextAllowedTryMs = calculateNextAllowedRetryMs();\n        }\nThinking about this a bit more though, another way I was thinking we could simplify the logic without having to reimplement the methods for the constructor was like this (taking the same example of the getDescribeConsumerGroupsCall:\n// in the handleResponse section\nif (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n     Call call = getDescribeConsumerGroupsCall(context);\n     call.updateTriesAndNextAllowedTryMs();\n     rescheduleFindCoordinatorTask(context, () -> call);\n     return;\n}\nand the Call class would get this new method:\nvoid updateTriesAndNextAllowedTryMs() {\n            this.tries += 1;\n            this.nextAllowedTryMs = calculateNextAllowedRetryMs();\n}\nPersonally, I prefer to keep the code more readable by getting the call from the method and simply using the internal method to update it - however if you prefer we use the constructor way, I can change it to that.", "author": "skaundinya15", "createdAt": "2020-03-11T05:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3MDE4OQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r391270189", "bodyText": "Hmm.. I see. Yeah, it seems a bit awkward. Let me offer one more suggestion before I give up. I think the awkwardness is a result of the fact that we cannot easily chain the retry context from one call to another. Suppose that we create a separate object for this:\nclass CallContext {\n  long deadlineMs;\n  int tries;\n  long nextAllowedTryMs;\n\n  CallContext retry(long now) {\n    return new CallContext(\n      deadlineMs,\n      tries + 1,\n      now + backoffMs);\n  }\n}\nThen inside Call, we would have a reference to the context rather than the individual properties. Would that work?", "author": "hachikuji", "createdAt": "2020-03-11T21:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NDE3MQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r391354171", "bodyText": "That could work, but is there a reason we don't want to directly modify the properties in the call upon retry by having a method inside Call as suggested above? Something I was thinking about with   having a CallContext across calls is that would it be restricted to these individual properties? Or do we expect that the properties that might have to be chained across calls could increase in the future? Just trying to better understand how much scope the CallContext would have, considering there's already a ConsumerGroupOperationContext object passed across calls.", "author": "skaundinya15", "createdAt": "2020-03-12T01:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNDAzNQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r391824035", "bodyText": "Mainly just trying to consolidate the logic for updating the retry state so that we don't have to remember to do it for new APIs. Also, eventually we want to have exponential backoff logic. I was thinking CallContext would be a good way to encapsulate any additional state that we would need.", "author": "hachikuji", "createdAt": "2020-03-12T18:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0Njc0Nw==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r391946747", "bodyText": "Yeah that's a fair point, the only thing is that those properties are directly accessed in a lot of places (when it comes to failure and retry logic) and I'm thinking that changing the way those properties are encapsulated would require refactoring that could possibly be beyond the scope of this PR.\nFor example, in the fail method of the Call class, these attributes are directly accessed many times to determine whether or not to actually fail the call or retry it. Also, I'm considering how changing the encapsulation would affect all other calls outside of the consumer groups operations, as those would also have to be updated to use the CallContext object instead.\nThe other option I'm thinking (to reduce the amount of refactoring) would be to have both CallContext and the properties at play, but that would be a lot of redundant information and I'm not quite sure if we'd want that.\nI can change it to be either way, but I personally think having a context for the Call is something that should be done so we can more easily chain it across calls, but perhaps is out of scope for this PR and could be picked up in a future PR.", "author": "skaundinya15", "createdAt": "2020-03-12T22:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2MzgzMA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393863830", "bodyText": "Ok, let's leave this as a potential future improvement (perhaps as part of the the exponential backoff kip).", "author": "hachikuji", "createdAt": "2020-03-17T17:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a17d56fca676c70579222b1fbe5d1dd501c9297", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex ae6fccb81d..fec787ec7e 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -691,14 +691,14 @@ public class KafkaAdminClient extends AdminClient {\n         }\n \n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n-            int numTries, long nextAllowedTryMs) {\n+             int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n             if (numTries < 0) {\n-                throw new IllegalArgumentException(\"Number of tries for a call cannot be negative!\");\n+                throw new IllegalArgumentException(\"Number of tries for a call cannot be negative\");\n             }\n             if (nextAllowedTryMs < 0) {\n                 throw new IllegalArgumentException(\"Next allowed time for a try for a call cannot\"\n-                    + \" be negative!\");\n+                    + \" be negative\");\n             }\n             this.tries = numTries;\n             this.nextAllowedTryMs = nextAllowedTryMs;\n"}}, {"oid": "5a17d56fca676c70579222b1fbe5d1dd501c9297", "url": "https://github.com/apache/kafka/commit/5a17d56fca676c70579222b1fbe5d1dd501c9297", "message": "addressing PR comments", "committedDate": "2020-03-17T18:10:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxOTAyOQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393919029", "bodyText": "I missed this on the first pass, but would there be any harm moving this call to enqueue? That way we do not need to repeat this check for other scenarios involving chaining or partial failures. (For example, I assume we'd end up doing the same thing in rescheduleMetadataTask).\nWe should probably also try to reuse failWithTimeout for a consistent exception message.", "author": "hachikuji", "createdAt": "2020-03-17T19:29:09Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2683,6 +2702,14 @@ private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> c\n                 context.node().orElse(null));\n         // Requeue the task so that we can try with new coordinator\n         context.setNode(null);\n+\n+        Call call = nextCall.get();\n+\n+        if (call.tries > maxRetries) {", "originalCommit": "5a17d56fca676c70579222b1fbe5d1dd501c9297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0NTIxNA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393945214", "bodyText": "I can't think of any issues with moving this logic to enqueue, the only reason I put this inside the rescheduleFindCoordinatorTask was so that we could avoid making a call to find the coordinator if the call had maxed out on retries. I will try it with this logic to see if there are any issues with moving it to enqueue.\nAlso the fail method already calls failWithTimeout when a call has maxed out the retries: \n  \n    \n      kafka/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n    \n    \n        Lines 757 to 759\n      in\n      5a17d56\n    \n    \n    \n    \n\n        \n          \n           if (tries > maxRetries) { \n        \n\n        \n          \n               failWithTimeout(now, throwable); \n        \n\n        \n          \n               return;", "author": "skaundinya15", "createdAt": "2020-03-17T20:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxOTAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ec933bceff4143bb73495353ee656545819a66e3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex fec787ec7e..9949dbcb05 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -2697,19 +2702,16 @@ public class KafkaAdminClient extends AdminClient {\n         return new DescribeDelegationTokenResult(tokensFuture);\n     }\n \n-    private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> context, Supplier<Call> nextCall) {\n+    private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> context, Supplier<Call> nextCall, Call failedCall) {\n         log.info(\"Node {} is no longer the Coordinator. Retrying with new coordinator.\",\n                 context.node().orElse(null));\n         // Requeue the task so that we can try with new coordinator\n         context.setNode(null);\n \n         Call call = nextCall.get();\n+        call.tries = failedCall.tries + 1;\n+        call.nextAllowedTryMs = calculateNextAllowedRetryMs();\n \n-        if (call.tries > maxRetries) {\n-            log.debug(\"Max retries {} for {} reached\", maxRetries, call);\n-            call.fail(time.milliseconds(), new TimeoutException());\n-            return;\n-        }\n         Call findCoordinatorCall = getFindCoordinatorCall(context, nextCall);\n         runnable.call(findCoordinatorCall, time.milliseconds());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyODk5MA==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393928990", "bodyText": "I think there's a reasonable way to consolidate the bookkeeping in rescheduleFindCoordinatorTask. If we add the failed call to the argument list, then we can do something like this:\n    private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> context,\n                                               Call failedCall,\n                                               Supplier<Call> nextCall) {\n        log.info(\"Node {} is no longer the Coordinator. Retrying with new coordinator.\",\n                context.node().orElse(null));\n        // Requeue the task so that we can try with new coordinator\n        context.setNode(null);\n\n        Call call = nextCall.get();\n        call.tries = failedCall.tries + 1;\n        call.nextAllowedTryMs = calculateNextAllowedRetryMs();\n\n        if (call.tries > maxRetries) {\n            log.debug(\"Max retries {} for {} reached\", maxRetries, call);\n            call.fail(time.milliseconds(), new TimeoutException());\n            return;\n        }\n        Call findCoordinatorCall = getFindCoordinatorCall(context, nextCall);\n        runnable.call(findCoordinatorCall, time.milliseconds());\n    }\nThen the caller changes to this (for example):\n                    Call call = getDescribeConsumerGroupsCall(context);\n                    rescheduleFindCoordinatorTask(context, this, () -> call);\nWhat do you think?", "author": "hachikuji", "createdAt": "2020-03-17T19:48:29Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3584,7 +3633,10 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                 // If coordinator changed since we fetched it, retry\n                 if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n-                    rescheduleFindCoordinatorTask(context, () -> getRemoveMembersFromGroupCall(context));\n+                    long nextAllowedTryMs = calculateNextAllowedRetryMs();\n+                    Call call = getRemoveMembersFromGroupCall(context, this.tries() + 1,\n+                        nextAllowedTryMs);\n+                    rescheduleFindCoordinatorTask(context, () -> call);", "originalCommit": "5a17d56fca676c70579222b1fbe5d1dd501c9297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0NjcwNQ==", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393946705", "bodyText": "Yeah I think this does make it a lot cleaner and easier to read. I will refactor to change it to this, and experiment with checking the max tries in enqueue as well.", "author": "skaundinya15", "createdAt": "2020-03-17T20:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyODk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "ec933bceff4143bb73495353ee656545819a66e3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\nindex fec787ec7e..9949dbcb05 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java\n\n@@ -3633,10 +3621,8 @@ public class KafkaAdminClient extends AdminClient {\n \n                 // If coordinator changed since we fetched it, retry\n                 if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n-                    long nextAllowedTryMs = calculateNextAllowedRetryMs();\n-                    Call call = getRemoveMembersFromGroupCall(context, this.tries() + 1,\n-                        nextAllowedTryMs);\n-                    rescheduleFindCoordinatorTask(context, () -> call);\n+                    Call call = getRemoveMembersFromGroupCall(context);\n+                    rescheduleFindCoordinatorTask(context, () -> call, this);\n                     return;\n                 }\n \n"}}, {"oid": "ec933bceff4143bb73495353ee656545819a66e3", "url": "https://github.com/apache/kafka/commit/ec933bceff4143bb73495353ee656545819a66e3", "message": "addressing PR comments", "committedDate": "2020-03-17T20:49:19Z", "type": "commit"}, {"oid": "44260508da1ddbeebff4e389ee5ba84d8c506fa5", "url": "https://github.com/apache/kafka/commit/44260508da1ddbeebff4e389ee5ba84d8c506fa5", "message": "removing unnecessary code", "committedDate": "2020-03-17T20:50:30Z", "type": "commit"}]}