{"pr_number": 8090, "pr_title": "KAFKA-9537 - Cleanup error messages for abstract transformations", "pr_createdAt": "2020-02-11T18:45:41Z", "pr_url": "https://github.com/apache/kafka/pull/8090", "timeline": [{"oid": "969496603859b8a9ed25ff4186e2e108d3107ab0", "url": "https://github.com/apache/kafka/commit/969496603859b8a9ed25ff4186e2e108d3107ab0", "message": "Added check if the transformation is abstract. If so throw an error message with guidance for the user. Fixes KAFKA-9537.", "committedDate": "2020-02-11T18:42:01Z", "type": "commit"}, {"oid": "a0f3608465cbb1ba2ef0dc5f8d67606f867fda3e", "url": "https://github.com/apache/kafka/commit/a0f3608465cbb1ba2ef0dc5f8d67606f867fda3e", "message": "Ensure that the child classes are also not abstract.", "committedDate": "2020-02-11T18:47:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTY1Nw==", "url": "https://github.com/apache/kafka/pull/8090#discussion_r384065657", "bodyText": "What about just making childClasses a Set<String>, since String.join(...) takes an Iterable? Arguably it's not much different, but it's more in line with other uses of String.join.\nOr, maybe better yet, what about just joining with the stream? Something like:\n            String childClassNames = Stream.of(transformationCls.getClasses())\n                                           .filter(transformationCls::isAssignableFrom)\n                                           .filter(c -> !Modifier.isAbstract(c.getModifiers()))\n                                           .filter(c -> Modifier.isPublic(c.getModifiers()))\n                                           .map(Class::getName)\n                                           .collect(Collectors.joining(\", \"));\n            String message = childClassNames.trim().isEmpty() ?\n                             \"Transformation is abstract and cannot be created.\" :\n                             \"Transformation is abstract and cannot be created. Did you mean \" + childClassNames + \"?\";", "author": "rhauch", "createdAt": "2020-02-25T19:06:43Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/ConnectorConfig.java", "diffHunk": "@@ -329,11 +331,25 @@ static ConfigDef getConfigDefFromTransformation(String key, Class<?> transformat\n         if (transformationCls == null || !Transformation.class.isAssignableFrom(transformationCls)) {\n             throw new ConfigException(key, String.valueOf(transformationCls), \"Not a Transformation\");\n         }\n+        if (Modifier.isAbstract(transformationCls.getModifiers())) {\n+            String[] childClasses = Stream.of(transformationCls.getClasses())\n+                .filter(transformationCls::isAssignableFrom)\n+                .filter(c -> !Modifier.isAbstract(c.getModifiers()))\n+                .filter(c -> Modifier.isPublic(c.getModifiers()))\n+                .map(Class::getName)\n+                .toArray(String[]::new);", "originalCommit": "a0f3608465cbb1ba2ef0dc5f8d67606f867fda3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4MDg4Ng==", "url": "https://github.com/apache/kafka/pull/8090#discussion_r384080886", "bodyText": "That works for me. I'll change it.", "author": "jcustenborder", "createdAt": "2020-02-25T19:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "90cf24e59374d157ca0efd7997f5c1d048a3b9e6", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/ConnectorConfig.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/ConnectorConfig.java\nindex 3e34396930..b7340ae1e8 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/ConnectorConfig.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/ConnectorConfig.java\n\n@@ -332,15 +333,15 @@ public class ConnectorConfig extends AbstractConfig {\n             throw new ConfigException(key, String.valueOf(transformationCls), \"Not a Transformation\");\n         }\n         if (Modifier.isAbstract(transformationCls.getModifiers())) {\n-            String[] childClasses = Stream.of(transformationCls.getClasses())\n+            String childClassNames = Stream.of(transformationCls.getClasses())\n                 .filter(transformationCls::isAssignableFrom)\n                 .filter(c -> !Modifier.isAbstract(c.getModifiers()))\n                 .filter(c -> Modifier.isPublic(c.getModifiers()))\n                 .map(Class::getName)\n-                .toArray(String[]::new);\n-            String message = childClasses.length > 0 ?\n-                \"Transformation is abstract and cannot be created. Did you mean \" + String.join(\", \", childClasses) + \"?\" :\n-                \"Transformation is abstract and cannot be created.\";\n+                .collect(Collectors.joining(\", \"));\n+            String message = childClassNames.trim().isEmpty() ?\n+                \"Transformation is abstract and cannot be created.\" :\n+                \"Transformation is abstract and cannot be created. Did you mean \" + childClassNames + \"?\";\n             throw new ConfigException(key, String.valueOf(transformationCls), message);\n         }\n         Transformation transformation;\n"}}, {"oid": "90cf24e59374d157ca0efd7997f5c1d048a3b9e6", "url": "https://github.com/apache/kafka/commit/90cf24e59374d157ca0efd7997f5c1d048a3b9e6", "message": "Refactored per suggestion of Randall to straight to a string.", "committedDate": "2020-02-25T21:23:36Z", "type": "commit"}]}