{"pr_number": 7972, "pr_title": "KAFKA-9435: DescribeLogDirs automated protocol", "pr_createdAt": "2020-01-16T12:12:56Z", "pr_url": "https://github.com/apache/kafka/pull/7972", "timeline": [{"oid": "4f5c42f5778eb705fc197f518de7dd4b209b5a5b", "url": "https://github.com/apache/kafka/commit/4f5c42f5778eb705fc197f518de7dd4b209b5a5b", "message": "Fix KAFKA-9435, using automated protocol for DescribeLogDirs", "committedDate": "2020-03-17T14:33:51Z", "type": "commit"}, {"oid": "5214f4bde000e4f009f8f4f02d291ff1e967e91c", "url": "https://github.com/apache/kafka/commit/5214f4bde000e4f009f8f4f02d291ff1e967e91c", "message": "Per KIP-482, use flexible versions for DescribeLogDirs", "committedDate": "2020-03-17T14:33:51Z", "type": "commit"}, {"oid": "b81c6c62f63aac64c40cee1fc7af438c1763d2ce", "url": "https://github.com/apache/kafka/commit/b81c6c62f63aac64c40cee1fc7af438c1763d2ce", "message": "Review comments", "committedDate": "2020-03-17T14:33:51Z", "type": "commit"}, {"oid": "39fb997f0032ee425e92a8dba97a561b36427931", "url": "https://github.com/apache/kafka/commit/39fb997f0032ee425e92a8dba97a561b36427931", "message": "Review comments", "committedDate": "2020-03-17T14:33:51Z", "type": "commit"}, {"oid": "39fb997f0032ee425e92a8dba97a561b36427931", "url": "https://github.com/apache/kafka/commit/39fb997f0032ee425e92a8dba97a561b36427931", "message": "Review comments", "committedDate": "2020-03-17T14:33:51Z", "type": "forcePushed"}, {"oid": "a7f72cba6def206c04a6ca5b1ba547faf85058cf", "url": "https://github.com/apache/kafka/commit/a7f72cba6def206c04a6ca5b1ba547faf85058cf", "message": "More minor improvements", "committedDate": "2020-03-17T16:16:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDczNw==", "url": "https://github.com/apache/kafka/pull/7972#discussion_r395040737", "bodyText": "This comment can now be removed", "author": "mimaison", "createdAt": "2020-03-19T13:52:36Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java", "diffHunk": "@@ -49,105 +43,55 @@\n                     TOPIC_NAME,\n                     new Field(PARTITIONS_KEY_NAME, new ArrayOf(INT32), \"List of partition ids of the topic.\")))));\n \n-    /**\n-     * The version number is bumped to indicate that on quota violation brokers send out responses before throttling.\n-     */\n-    private static final Schema DESCRIBE_LOG_DIRS_REQUEST_V1 = DESCRIBE_LOG_DIRS_REQUEST_V0;\n-\n-    public static Schema[] schemaVersions() {\n-        return new Schema[]{DESCRIBE_LOG_DIRS_REQUEST_V0, DESCRIBE_LOG_DIRS_REQUEST_V1};\n-    }\n-\n-    private final Set<TopicPartition> topicPartitions;\n+    private final DescribeLogDirsRequestData data;\n \n     public static class Builder extends AbstractRequest.Builder<DescribeLogDirsRequest> {\n-        private final Set<TopicPartition> topicPartitions;\n+        private final DescribeLogDirsRequestData data;\n \n         // topicPartitions == null indicates requesting all partitions, and an empty list indicates requesting no partitions.\n-        public Builder(Set<TopicPartition> partitions) {\n+        public Builder(DescribeLogDirsRequestData data) {\n             super(ApiKeys.DESCRIBE_LOG_DIRS);\n-            this.topicPartitions = partitions;\n+            this.data = data;\n         }\n \n         @Override\n         public DescribeLogDirsRequest build(short version) {\n-            return new DescribeLogDirsRequest(topicPartitions, version);\n+            return new DescribeLogDirsRequest(data, version);\n         }\n \n         @Override\n         public String toString() {\n-            StringBuilder builder = new StringBuilder();\n-            builder.append(\"(type=DescribeLogDirsRequest\")\n-                .append(\", topicPartitions=\")\n-                .append(topicPartitions)\n-                .append(\")\");\n-            return builder.toString();\n+            return data.toString();\n         }\n     }\n \n     public DescribeLogDirsRequest(Struct struct, short version) {\n         super(ApiKeys.DESCRIBE_LOG_DIRS, version);\n-\n-        if (struct.getArray(TOPICS_KEY_NAME) == null) {\n-            topicPartitions = null;\n-        } else {\n-            topicPartitions = new HashSet<>();\n-            for (Object topicStructObj : struct.getArray(TOPICS_KEY_NAME)) {\n-                Struct topicStruct = (Struct) topicStructObj;\n-                String topic = topicStruct.get(TOPIC_NAME);\n-                for (Object partitionObj : topicStruct.getArray(PARTITIONS_KEY_NAME)) {\n-                    int partition = (Integer) partitionObj;\n-                    topicPartitions.add(new TopicPartition(topic, partition));\n-                }\n-            }\n-        }\n+        this.data = new DescribeLogDirsRequestData(struct, version);\n     }\n \n     // topicPartitions == null indicates requesting all partitions, and an empty list indicates requesting no partitions.", "originalCommit": "a7f72cba6def206c04a6ca5b1ba547faf85058cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f72902e6c772f5254004d408b747cbe57824668c", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java b/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\nindex f421f28aa0..b90a4476a8 100644\n--- a/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\n+++ b/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\n\n@@ -48,7 +48,6 @@ public class DescribeLogDirsRequest extends AbstractRequest {\n     public static class Builder extends AbstractRequest.Builder<DescribeLogDirsRequest> {\n         private final DescribeLogDirsRequestData data;\n \n-        // topicPartitions == null indicates requesting all partitions, and an empty list indicates requesting no partitions.\n         public Builder(DescribeLogDirsRequestData data) {\n             super(ApiKeys.DESCRIBE_LOG_DIRS);\n             this.data = data;\n"}}, {"oid": "f72902e6c772f5254004d408b747cbe57824668c", "url": "https://github.com/apache/kafka/commit/f72902e6c772f5254004d408b747cbe57824668c", "message": "Review comments", "committedDate": "2020-03-19T14:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5Mjk4MQ==", "url": "https://github.com/apache/kafka/pull/7972#discussion_r395092981", "bodyText": "This V0 schema should be deleted too", "author": "mimaison", "createdAt": "2020-03-19T15:01:07Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java", "diffHunk": "@@ -49,105 +43,54 @@\n                     TOPIC_NAME,", "originalCommit": "f72902e6c772f5254004d408b747cbe57824668c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7564337cf56338735a5e4e3c18c3c0b7751e1db", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java b/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\nindex b90a4476a8..a58ef1fedb 100644\n--- a/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\n+++ b/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\n\n@@ -20,29 +20,12 @@ package org.apache.kafka.common.requests;\n import org.apache.kafka.common.message.DescribeLogDirsRequestData;\n import org.apache.kafka.common.message.DescribeLogDirsResponseData;\n import org.apache.kafka.common.protocol.ApiKeys;\n-import org.apache.kafka.common.protocol.types.ArrayOf;\n-import org.apache.kafka.common.protocol.types.Field;\n-import org.apache.kafka.common.protocol.types.Schema;\n import org.apache.kafka.common.protocol.types.Struct;\n \n import java.nio.ByteBuffer;\n \n-import static org.apache.kafka.common.protocol.CommonFields.TOPIC_NAME;\n-import static org.apache.kafka.common.protocol.types.Type.INT32;\n-\n public class DescribeLogDirsRequest extends AbstractRequest {\n \n-    // request level key names\n-    private static final String TOPICS_KEY_NAME = \"topics\";\n-\n-    // topic level key names\n-    private static final String PARTITIONS_KEY_NAME = \"partitions\";\n-\n-    private static final Schema DESCRIBE_LOG_DIRS_REQUEST_V0 = new Schema(\n-            new Field(TOPICS_KEY_NAME, ArrayOf.nullable(new Schema(\n-                    TOPIC_NAME,\n-                    new Field(PARTITIONS_KEY_NAME, new ArrayOf(INT32), \"List of partition ids of the topic.\")))));\n-\n     private final DescribeLogDirsRequestData data;\n \n     public static class Builder extends AbstractRequest.Builder<DescribeLogDirsRequest> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NDExOA==", "url": "https://github.com/apache/kafka/pull/7972#discussion_r395094118", "bodyText": "The comment above is out of date", "author": "mimaison", "createdAt": "2020-03-19T15:02:35Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java", "diffHunk": "@@ -49,105 +43,54 @@\n                     TOPIC_NAME,\n                     new Field(PARTITIONS_KEY_NAME, new ArrayOf(INT32), \"List of partition ids of the topic.\")))));\n \n-    /**\n-     * The version number is bumped to indicate that on quota violation brokers send out responses before throttling.\n-     */\n-    private static final Schema DESCRIBE_LOG_DIRS_REQUEST_V1 = DESCRIBE_LOG_DIRS_REQUEST_V0;\n-\n-    public static Schema[] schemaVersions() {\n-        return new Schema[]{DESCRIBE_LOG_DIRS_REQUEST_V0, DESCRIBE_LOG_DIRS_REQUEST_V1};\n-    }\n-\n-    private final Set<TopicPartition> topicPartitions;\n+    private final DescribeLogDirsRequestData data;\n \n     public static class Builder extends AbstractRequest.Builder<DescribeLogDirsRequest> {\n-        private final Set<TopicPartition> topicPartitions;\n+        private final DescribeLogDirsRequestData data;\n \n-        // topicPartitions == null indicates requesting all partitions, and an empty list indicates requesting no partitions.\n-        public Builder(Set<TopicPartition> partitions) {\n+        public Builder(DescribeLogDirsRequestData data) {\n             super(ApiKeys.DESCRIBE_LOG_DIRS);\n-            this.topicPartitions = partitions;\n+            this.data = data;\n         }\n \n         @Override\n         public DescribeLogDirsRequest build(short version) {\n-            return new DescribeLogDirsRequest(topicPartitions, version);\n+            return new DescribeLogDirsRequest(data, version);\n         }\n \n         @Override\n         public String toString() {\n-            StringBuilder builder = new StringBuilder();\n-            builder.append(\"(type=DescribeLogDirsRequest\")\n-                .append(\", topicPartitions=\")\n-                .append(topicPartitions)\n-                .append(\")\");\n-            return builder.toString();\n+            return data.toString();\n         }\n     }\n \n     public DescribeLogDirsRequest(Struct struct, short version) {\n         super(ApiKeys.DESCRIBE_LOG_DIRS, version);\n-\n-        if (struct.getArray(TOPICS_KEY_NAME) == null) {\n-            topicPartitions = null;\n-        } else {\n-            topicPartitions = new HashSet<>();\n-            for (Object topicStructObj : struct.getArray(TOPICS_KEY_NAME)) {\n-                Struct topicStruct = (Struct) topicStructObj;\n-                String topic = topicStruct.get(TOPIC_NAME);\n-                for (Object partitionObj : topicStruct.getArray(PARTITIONS_KEY_NAME)) {\n-                    int partition = (Integer) partitionObj;\n-                    topicPartitions.add(new TopicPartition(topic, partition));\n-                }\n-            }\n-        }\n+        this.data = new DescribeLogDirsRequestData(struct, version);\n     }\n \n     // topicPartitions == null indicates requesting all partitions, and an empty list indicates requesting no partitions.\n-    public DescribeLogDirsRequest(Set<TopicPartition> topicPartitions, short version) {\n+    public DescribeLogDirsRequest(DescribeLogDirsRequestData data, short version) {", "originalCommit": "f72902e6c772f5254004d408b747cbe57824668c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7564337cf56338735a5e4e3c18c3c0b7751e1db", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java b/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\nindex b90a4476a8..a58ef1fedb 100644\n--- a/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\n+++ b/clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsRequest.java\n\n@@ -20,29 +20,12 @@ package org.apache.kafka.common.requests;\n import org.apache.kafka.common.message.DescribeLogDirsRequestData;\n import org.apache.kafka.common.message.DescribeLogDirsResponseData;\n import org.apache.kafka.common.protocol.ApiKeys;\n-import org.apache.kafka.common.protocol.types.ArrayOf;\n-import org.apache.kafka.common.protocol.types.Field;\n-import org.apache.kafka.common.protocol.types.Schema;\n import org.apache.kafka.common.protocol.types.Struct;\n \n import java.nio.ByteBuffer;\n \n-import static org.apache.kafka.common.protocol.CommonFields.TOPIC_NAME;\n-import static org.apache.kafka.common.protocol.types.Type.INT32;\n-\n public class DescribeLogDirsRequest extends AbstractRequest {\n \n-    // request level key names\n-    private static final String TOPICS_KEY_NAME = \"topics\";\n-\n-    // topic level key names\n-    private static final String PARTITIONS_KEY_NAME = \"partitions\";\n-\n-    private static final Schema DESCRIBE_LOG_DIRS_REQUEST_V0 = new Schema(\n-            new Field(TOPICS_KEY_NAME, ArrayOf.nullable(new Schema(\n-                    TOPIC_NAME,\n-                    new Field(PARTITIONS_KEY_NAME, new ArrayOf(INT32), \"List of partition ids of the topic.\")))));\n-\n     private final DescribeLogDirsRequestData data;\n \n     public static class Builder extends AbstractRequest.Builder<DescribeLogDirsRequest> {\n"}}, {"oid": "e7564337cf56338735a5e4e3c18c3c0b7751e1db", "url": "https://github.com/apache/kafka/commit/e7564337cf56338735a5e4e3c18c3c0b7751e1db", "message": "Review comments", "committedDate": "2020-03-19T15:21:13Z", "type": "commit"}]}