{"pr_number": 9639, "pr_title": "KAFKA-10677; Complete fetches in purgatory immediately after resigning", "pr_createdAt": "2020-11-22T14:36:20Z", "pr_url": "https://github.com/apache/kafka/pull/9639", "timeline": [{"oid": "d476599a6a674a812f508aaaff9a5b8cc2d7ee1a", "url": "https://github.com/apache/kafka/commit/d476599a6a674a812f508aaaff9a5b8cc2d7ee1a", "message": "KAFKA-10677; Complete fetches in purgatory immediately after raft leader resigns", "committedDate": "2020-11-22T14:29:04Z", "type": "commit"}, {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e", "url": "https://github.com/apache/kafka/commit/d822329dae031bbb63b0e59b8ce69424020fbf6e", "message": "KAFKA-10677; Complete fetches in purgatory immediately after raft leader resigns", "committedDate": "2020-11-22T14:50:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwOTczMA==", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538909730", "bodyText": "I wonder if we need this. Is it not good enough to verify the response was received?", "author": "hachikuji", "createdAt": "2020-12-09T00:23:14Z", "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());\n+        assertEquals(context.client.numWaitingFetch(), 0);", "originalCommit": "d822329dae031bbb63b0e59b8ce69424020fbf6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk4OTM3Nw==", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538989377", "bodyText": "This is just a double-check, it's better to be removed.", "author": "dengziming", "createdAt": "2020-12-09T04:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwOTczMA=="}], "type": "inlineReview", "revised_code": {"commit": "c85ab2470e7871fabcd9033dca09d24da779b7fb", "chunk": "diff --git a/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java b/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\nindex 8dbd85cd8a..2c7e7c2185 100644\n--- a/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\n+++ b/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\n\n@@ -224,7 +224,6 @@ public class KafkaRaftClientTest {\n         int epoch = context.currentEpoch();\n         context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n         context.client.poll();\n-        assertEquals(context.client.numWaitingFetch(), 1);\n \n         // append some record, but the fetch in purgatory will still fail\n         context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMDIxNw==", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538910217", "bodyText": "Maybe we can add a helper to RaftClientTestContext similar to assertElectedLeader and get rid of quorumState()?", "author": "hachikuji", "createdAt": "2020-12-09T00:24:34Z", "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());", "originalCommit": "d822329dae031bbb63b0e59b8ce69424020fbf6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwMDI2Nw==", "url": "https://github.com/apache/kafka/pull/9639#discussion_r539000267", "bodyText": "Thank you for your suggestion, I added a method to RaftClientTestContext.", "author": "dengziming", "createdAt": "2020-12-09T04:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMDIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "c85ab2470e7871fabcd9033dca09d24da779b7fb", "chunk": "diff --git a/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java b/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\nindex 8dbd85cd8a..2c7e7c2185 100644\n--- a/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\n+++ b/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\n\n@@ -224,7 +224,6 @@ public class KafkaRaftClientTest {\n         int epoch = context.currentEpoch();\n         context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n         context.client.poll();\n-        assertEquals(context.client.numWaitingFetch(), 1);\n \n         // append some record, but the fetch in purgatory will still fail\n         context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n"}}, {"oid": "c85ab2470e7871fabcd9033dca09d24da779b7fb", "url": "https://github.com/apache/kafka/commit/c85ab2470e7871fabcd9033dca09d24da779b7fb", "message": "KAFKA-10677; Resolve comments", "committedDate": "2020-12-09T03:59:01Z", "type": "commit"}, {"oid": "19464f111b90aa5efc1984b6798391dec86496b3", "url": "https://github.com/apache/kafka/commit/19464f111b90aa5efc1984b6798391dec86496b3", "message": "Fix argument alignment in `RaftClientTestContext`", "committedDate": "2020-12-09T22:23:17Z", "type": "commit"}]}