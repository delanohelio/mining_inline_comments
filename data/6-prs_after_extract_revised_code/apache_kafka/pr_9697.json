{"pr_number": 9697, "pr_title": "KAFKA-10810: Replace stream threads", "pr_createdAt": "2020-12-04T22:17:21Z", "pr_url": "https://github.com/apache/kafka/pull/9697", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzIxMg==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r536417212", "bodyText": "We need to throw the error or the task gets lost and we drop records", "author": "wcarlson5", "createdAt": "2020-12-04T22:19:21Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,18 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();\n+                if (throwable instanceof RuntimeException) {", "originalCommit": "608d87670e997a9c0a114615fb3e713a9a19f2d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79b743ad94a76abc0ede2444998cc9c3b44b70c0", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\nindex 02d69a2169..931051ad31 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n\n@@ -445,7 +445,16 @@ public class KafkaStreams implements AutoCloseable {\n         }\n         switch (action) {\n             case REPLACE_THREAD:\n-                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");\n+\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n                 threads.remove(deadThread);\n                 addStreamThread();\n                 deadThread.shutdown();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzc1Mg==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r536417752", "bodyText": "removing from the thread list does 2 things\n\nkeeps DEAD threads out of the list as kip-663 dictates\nensures the next thread has the same name", "author": "wcarlson5", "createdAt": "2020-12-04T22:20:41Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,18 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                threads.remove(deadThread);", "originalCommit": "608d87670e997a9c0a114615fb3e713a9a19f2d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4NDM3MQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539584371", "bodyText": "To ensure #2 holds, do we need to have a mutex on thread creation? Or does it not matter?", "author": "vvcephei", "createdAt": "2020-12-09T19:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNjAxMQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539636011", "bodyText": "It won't matter. Ensures is too strong of a word. IF there has been other threads removed before this it may have a different name. However this ensures that the replacement thread will never have a thread index larger than the number of threads", "author": "wcarlson5", "createdAt": "2020-12-09T20:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "79b743ad94a76abc0ede2444998cc9c3b44b70c0", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\nindex 02d69a2169..931051ad31 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n\n@@ -445,7 +445,16 @@ public class KafkaStreams implements AutoCloseable {\n         }\n         switch (action) {\n             case REPLACE_THREAD:\n-                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");\n+\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n                 threads.remove(deadThread);\n                 addStreamThread();\n                 deadThread.shutdown();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTM4Mw==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r537899383", "bodyText": "nit: \"can not\" -> \"cannot\", same below", "author": "lct45", "createdAt": "2020-12-07T23:02:57Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,27 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");", "originalCommit": "7dc157ebc253d32831424a43f13b614f41a54d36", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "61cdbef2d04f624eb7d4d7b799272bd2ed5a0ff8", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\nindex 931051ad31..02d69a2169 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n\n@@ -445,16 +445,7 @@ public class KafkaStreams implements AutoCloseable {\n         }\n         switch (action) {\n             case REPLACE_THREAD:\n-                log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");\n-\n-                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n-                    log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");\n-                    log.error(\"Encountered the following exception during processing \" +\n-                            \"and the registered exception handler opted to \" + action + \".\" +\n-                            \" The streams client is going to shut down now. \", throwable);\n-                    close(Duration.ZERO);\n-                }\n-                final StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n                 threads.remove(deadThread);\n                 addStreamThread();\n                 deadThread.shutdown();\n"}}, {"oid": "61cdbef2d04f624eb7d4d7b799272bd2ed5a0ff8", "url": "https://github.com/apache/kafka/commit/61cdbef2d04f624eb7d4d7b799272bd2ed5a0ff8", "message": "init commit", "committedDate": "2020-12-09T16:57:13Z", "type": "commit"}, {"oid": "79b743ad94a76abc0ede2444998cc9c3b44b70c0", "url": "https://github.com/apache/kafka/commit/79b743ad94a76abc0ede2444998cc9c3b44b70c0", "message": "global thread case", "committedDate": "2020-12-09T16:57:14Z", "type": "commit"}, {"oid": "d05ef97a8cdecd3248e6e0206e8b662ba07056c0", "url": "https://github.com/apache/kafka/commit/d05ef97a8cdecd3248e6e0206e8b662ba07056c0", "message": "undo", "committedDate": "2020-12-09T16:57:14Z", "type": "commit"}, {"oid": "0bd4aaf4c026ddbb8fd538c9a5f9b5a808d5a496", "url": "https://github.com/apache/kafka/commit/0bd4aaf4c026ddbb8fd538c9a5f9b5a808d5a496", "message": "undo", "committedDate": "2020-12-09T16:57:14Z", "type": "commit"}, {"oid": "060a0a494a89fd97feb6f3c0ee0c9ccf23770707", "url": "https://github.com/apache/kafka/commit/060a0a494a89fd97feb6f3c0ee0c9ccf23770707", "message": "Leah's comments", "committedDate": "2020-12-09T16:57:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzUzOA==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539583538", "bodyText": "Is this equivalent to Thread.currentThead()?", "author": "vvcephei", "createdAt": "2020-12-09T19:25:55Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];", "originalCommit": "060a0a494a89fd97feb6f3c0ee0c9ccf23770707", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODM0Ng==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539678346", "bodyText": "Yep, it is now :)", "author": "wcarlson5", "createdAt": "2020-12-09T21:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\nindex ece18b1018..97ed094bde 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n\n@@ -452,7 +452,7 @@ public class KafkaStreams implements AutoCloseable {\n                             \" The streams client is going to shut down now. \", throwable);\n                     close(Duration.ZERO);\n                 }\n-                final StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n                 threads.remove(deadThread);\n                 addStreamThread();\n                 deadThread.shutdown();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYxNTY3OA==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539615678", "bodyText": "It's not obvious to me how this verifies that the thread actually got replaced. Maybe an explanatory comment is in order?", "author": "vvcephei", "createdAt": "2020-12-09T20:16:13Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,28 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));", "originalCommit": "060a0a494a89fd97feb6f3c0ee0c9ccf23770707", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODQwNQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539678405", "bodyText": "good idea", "author": "wcarlson5", "createdAt": "2020-12-09T21:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYxNTY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\nindex 2852a26eaa..dd7ab44e50 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n\n@@ -233,6 +233,7 @@ public class StreamsUncaughtExceptionHandlerIntegrationTest {\n             waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n \n             assertThat(processorValueCollector.size(), equalTo(3));\n+            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads\n         }\n     }\n }\n"}}, {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "url": "https://github.com/apache/kafka/commit/d211da9b3a4ec6983586e3d3d9323db24b88cc18", "message": "John's comments", "committedDate": "2020-12-09T22:04:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0ODM0Nw==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540248347", "bodyText": "Do we need to shutdown the dead stream thread? completeShutDown() will be called anyways.", "author": "cadonna", "createdAt": "2020-12-10T15:12:51Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();", "originalCommit": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwODc1Mg==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540308752", "bodyText": "I don't think it matters, it just set the thread state earlier, but we can delete it", "author": "wcarlson5", "createdAt": "2020-12-10T16:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0ODM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0708ca0c4f945c7d61c2e25daa55cf13cede8fc4", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\nindex 97ed094bde..62f09f0cf0 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n\n@@ -445,24 +465,8 @@ public class KafkaStreams implements AutoCloseable {\n         }\n         switch (action) {\n             case REPLACE_THREAD:\n-                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n-                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n-                    log.error(\"Encountered the following exception during processing \" +\n-                            \"and the registered exception handler opted to \" + action + \".\" +\n-                            \" The streams client is going to shut down now. \", throwable);\n-                    close(Duration.ZERO);\n-                }\n-                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n-                threads.remove(deadThread);\n-                addStreamThread();\n-                deadThread.shutdown();\n-                if (throwable instanceof RuntimeException) {\n-                    throw (RuntimeException) throwable;\n-                } else if (throwable instanceof Error) {\n-                    throw (Error) throwable;\n-                } else {\n-                    throw new RuntimeException(\"Unexpected checked exception caught in the uncaught exception handler\", throwable);\n-                }\n+                replaceThreadHelper(throwable);\n+                break;\n             case SHUTDOWN_CLIENT:\n                 log.error(\"Encountered the following exception during processing \" +\n                         \"and the registered exception handler opted to \" + action + \".\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0OTQ2NQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540249465", "bodyText": "I think it would be cleaner to extract this code to a separate method.", "author": "cadonna", "createdAt": "2020-12-10T15:14:15Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();\n+                if (throwable instanceof RuntimeException) {\n+                    throw (RuntimeException) throwable;\n+                } else if (throwable instanceof Error) {\n+                    throw (Error) throwable;\n+                } else {\n+                    throw new RuntimeException(\"Unexpected checked exception caught in the uncaught exception handler\", throwable);\n+                }", "originalCommit": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxMTQzNw==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540311437", "bodyText": "we can do that", "author": "wcarlson5", "createdAt": "2020-12-10T16:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0OTQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0708ca0c4f945c7d61c2e25daa55cf13cede8fc4", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\nindex 97ed094bde..62f09f0cf0 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n\n@@ -445,24 +465,8 @@ public class KafkaStreams implements AutoCloseable {\n         }\n         switch (action) {\n             case REPLACE_THREAD:\n-                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n-                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n-                    log.error(\"Encountered the following exception during processing \" +\n-                            \"and the registered exception handler opted to \" + action + \".\" +\n-                            \" The streams client is going to shut down now. \", throwable);\n-                    close(Duration.ZERO);\n-                }\n-                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n-                threads.remove(deadThread);\n-                addStreamThread();\n-                deadThread.shutdown();\n-                if (throwable instanceof RuntimeException) {\n-                    throw (RuntimeException) throwable;\n-                } else if (throwable instanceof Error) {\n-                    throw (Error) throwable;\n-                } else {\n-                    throw new RuntimeException(\"Unexpected checked exception caught in the uncaught exception handler\", throwable);\n-                }\n+                replaceThreadHelper(throwable);\n+                break;\n             case SHUTDOWN_CLIENT:\n                 log.error(\"Encountered the following exception during processing \" +\n                         \"and the registered exception handler opted to \" + action + \".\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NjQ2MQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540276461", "bodyText": "Could you please be a bit clearer in the explanatory comment? BTW, we execute this test also once with just one stream thread so the 2 stream threads in the comment are not correct. Also, wouldn't it be better to explain the verification in the call to assertThat() instead of in a comment? You can pass a reason to the method.", "author": "cadonna", "createdAt": "2020-12-10T15:46:26Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));\n+            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads", "originalCommit": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxODc1NA==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540318754", "bodyText": "I edited the test to be based on the number of thread instead of hard coding. And gave a reason", "author": "wcarlson5", "createdAt": "2020-12-10T16:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NjQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0708ca0c4f945c7d61c2e25daa55cf13cede8fc4", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\nindex dd7ab44e50..b4db4a58f0 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n\n@@ -221,21 +226,21 @@ public class StreamsUncaughtExceptionHandlerIntegrationTest {\n \n             final AtomicInteger count = new AtomicInteger();\n             kafkaStreams.setUncaughtExceptionHandler(exception -> {\n-                count.getAndIncrement();\n-                if (count.get() > 2) {\n-                    return SHUTDOWN_CLIENT;\n+                if (count.incrementAndGet() == numThreads) {\n+                    throwError.set(false);\n                 }\n                 return REPLACE_THREAD;\n             });\n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n \n             produceMessages(0L, inputTopic, \"A\");\n+            TestUtils.waitForCondition(() -> count.get() == numThreads, \"finished replacing threads\");\n+            TestUtils.waitForCondition(() -> throwError.get(), \"finished replacing threads\");\n+            kafkaStreams.close();\n             waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n \n-            assertThat(processorValueCollector.size(), equalTo(3));\n-            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads\n+            assertThat(\"All initial threads have failed and the replacement thread had processed on record\",\n+                        processorValueCollector.size(), equalTo(numThreads + 1));\n         }\n     }\n }\n-\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NzgxOQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540277819", "bodyText": "A test is missing for a global stream thread that calls the uncaught exception handler.", "author": "cadonna", "createdAt": "2020-12-10T15:48:03Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));\n+            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads\n+        }\n+    }\n }", "originalCommit": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY2MTU4NQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540661585", "bodyText": "added", "author": "wcarlson5", "createdAt": "2020-12-11T03:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NzgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0708ca0c4f945c7d61c2e25daa55cf13cede8fc4", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\nindex dd7ab44e50..b4db4a58f0 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n\n@@ -221,21 +226,21 @@ public class StreamsUncaughtExceptionHandlerIntegrationTest {\n \n             final AtomicInteger count = new AtomicInteger();\n             kafkaStreams.setUncaughtExceptionHandler(exception -> {\n-                count.getAndIncrement();\n-                if (count.get() > 2) {\n-                    return SHUTDOWN_CLIENT;\n+                if (count.incrementAndGet() == numThreads) {\n+                    throwError.set(false);\n                 }\n                 return REPLACE_THREAD;\n             });\n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n \n             produceMessages(0L, inputTopic, \"A\");\n+            TestUtils.waitForCondition(() -> count.get() == numThreads, \"finished replacing threads\");\n+            TestUtils.waitForCondition(() -> throwError.get(), \"finished replacing threads\");\n+            kafkaStreams.close();\n             waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n \n-            assertThat(processorValueCollector.size(), equalTo(3));\n-            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads\n+            assertThat(\"All initial threads have failed and the replacement thread had processed on record\",\n+                        processorValueCollector.size(), equalTo(numThreads + 1));\n         }\n     }\n }\n-\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4MjYwMA==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540282600", "bodyText": "I think it would be better to have a test that shows that a new thread that replaced a failed one, actually is able to process records. So, I would let the new thread process some records and then shutdown the client with a normal close.\nMaybe similar applies to the shutdown tests. First let the client/application process some records and then throw an exception that shuts down the client/application. I guess, this last paragraph is something for a separate PR.", "author": "cadonna", "createdAt": "2020-12-10T15:53:58Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });", "originalCommit": "d211da9b3a4ec6983586e3d3d9323db24b88cc18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzMTYzMg==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540331632", "bodyText": "We can change the test so that we verify the replaced threads can process records.\nI am not sure that is necessary for the shutdown as testing if streams can process some records once started should be tested elsewhere, but in any case I think that the PR is not the place for this discussion", "author": "wcarlson5", "createdAt": "2020-12-10T16:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4MjYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "0708ca0c4f945c7d61c2e25daa55cf13cede8fc4", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\nindex dd7ab44e50..b4db4a58f0 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n\n@@ -221,21 +226,21 @@ public class StreamsUncaughtExceptionHandlerIntegrationTest {\n \n             final AtomicInteger count = new AtomicInteger();\n             kafkaStreams.setUncaughtExceptionHandler(exception -> {\n-                count.getAndIncrement();\n-                if (count.get() > 2) {\n-                    return SHUTDOWN_CLIENT;\n+                if (count.incrementAndGet() == numThreads) {\n+                    throwError.set(false);\n                 }\n                 return REPLACE_THREAD;\n             });\n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n \n             produceMessages(0L, inputTopic, \"A\");\n+            TestUtils.waitForCondition(() -> count.get() == numThreads, \"finished replacing threads\");\n+            TestUtils.waitForCondition(() -> throwError.get(), \"finished replacing threads\");\n+            kafkaStreams.close();\n             waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n \n-            assertThat(processorValueCollector.size(), equalTo(3));\n-            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads\n+            assertThat(\"All initial threads have failed and the replacement thread had processed on record\",\n+                        processorValueCollector.size(), equalTo(numThreads + 1));\n         }\n     }\n }\n-\n-\n"}}, {"oid": "0708ca0c4f945c7d61c2e25daa55cf13cede8fc4", "url": "https://github.com/apache/kafka/commit/0708ca0c4f945c7d61c2e25daa55cf13cede8fc4", "message": "Bruno's comments", "committedDate": "2020-12-10T17:16:10Z", "type": "commit"}, {"oid": "29fa8c0c0f2750eb47a2b02310876ad69ea280a8", "url": "https://github.com/apache/kafka/commit/29fa8c0c0f2750eb47a2b02310876ad69ea280a8", "message": "Bruno's comments", "committedDate": "2020-12-10T18:49:58Z", "type": "commit"}, {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5", "url": "https://github.com/apache/kafka/commit/d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5", "message": "add test for the global thread having an error", "committedDate": "2020-12-11T03:21:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NTA0Mw==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540865043", "bodyText": "Please rename to replaceStreamThread().", "author": "cadonna", "createdAt": "2020-12-11T10:59:41Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -436,6 +436,26 @@ private void defaultStreamsUncaughtExceptionHandler(final Throwable throwable) {\n         }\n     }\n \n+    private void replaceThreadHelper(final Throwable throwable) {", "originalCommit": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e96114cf6a213ba4424958a049e846d44b14107", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\nindex ea7f7a5d37..bd3e60d601 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n\n@@ -436,12 +436,12 @@ public class KafkaStreams implements AutoCloseable {\n         }\n     }\n \n-    private void replaceThreadHelper(final Throwable throwable) {\n+    private void replaceStreamThread(final Throwable throwable) {\n         if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n             log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n             log.error(\"Encountered the following exception during processing \" +\n                     \" The streams client is going to shut down now. \", throwable);\n-            closeToError();\n+            close(Duration.ZERO);\n         }\n         final StreamThread deadThread = (StreamThread) Thread.currentThread();\n         threads.remove(deadThread);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NzMxNg==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540867316", "bodyText": "The point of this test should be that a global stream thread is not replaced but the client is shutdown instead. Hence, the uncaught exception handler should return REPLACE_THREAD, not SHUTDOWN_CLIENT.", "author": "cadonna", "createdAt": "2020-12-11T11:03:38Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -155,16 +171,46 @@ public void shouldShutdownSingleThreadApplication() throws InterruptedException\n         testShutdownApplication(1);\n     }\n \n+    @Test\n+    public void testGlobalThreadException() throws InterruptedException {\n+        builder  = new StreamsBuilder();\n+        builder.addGlobalStore(\n+            new KeyValueStoreBuilder<>(\n+                Stores.persistentKeyValueStore(\"globalStore\"),\n+                Serdes.String(),\n+                Serdes.String(),\n+                CLUSTER.time\n+            ),\n+            inputTopic,\n+            Consumed.with(Serdes.String(), Serdes.String()),\n+            () -> new ShutdownProcessor(processorValueCollector)\n+        );\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 0);\n+\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> SHUTDOWN_CLIENT);", "originalCommit": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3MTUxNQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541071515", "bodyText": "I guess we can test that here at the same time", "author": "wcarlson5", "createdAt": "2020-12-11T16:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NzMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "6e96114cf6a213ba4424958a049e846d44b14107", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\nindex 98fcfea29d..73f90f8653 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n\n@@ -172,7 +172,7 @@ public class StreamsUncaughtExceptionHandlerIntegrationTest {\n     }\n \n     @Test\n-    public void testGlobalThreadException() throws InterruptedException {\n+    public void shouldShutDownClientIfGlobalStreamThreadWantsToReplaceThread() throws InterruptedException {\n         builder  = new StreamsBuilder();\n         builder.addGlobalStore(\n             new KeyValueStoreBuilder<>(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2ODY2MA==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540868660", "bodyText": "Please rename to something like shouldShutDownClientIfGlobalStreamThreadWantsToReplaceThread().", "author": "cadonna", "createdAt": "2020-12-11T11:05:53Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -155,16 +171,46 @@ public void shouldShutdownSingleThreadApplication() throws InterruptedException\n         testShutdownApplication(1);\n     }\n \n+    @Test\n+    public void testGlobalThreadException() throws InterruptedException {", "originalCommit": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e96114cf6a213ba4424958a049e846d44b14107", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\nindex 98fcfea29d..73f90f8653 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java\n\n@@ -172,7 +172,7 @@ public class StreamsUncaughtExceptionHandlerIntegrationTest {\n     }\n \n     @Test\n-    public void testGlobalThreadException() throws InterruptedException {\n+    public void shouldShutDownClientIfGlobalStreamThreadWantsToReplaceThread() throws InterruptedException {\n         builder  = new StreamsBuilder();\n         builder.addGlobalStore(\n             new KeyValueStoreBuilder<>(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540869115", "bodyText": "I would rename it to REPLACE_STREAM_THREAD.", "author": "cadonna", "createdAt": "2020-12-11T11:06:38Z", "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n+        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),", "originalCommit": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODM1NQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541028355", "bodyText": "Oh, good catch.\nJust a quick question: did we misname this option in the KIP? A StreamThread is a specific kind of thread. What I mean is that a GlobalStreamThread is not a StreamThread. Perhaps REPLACE_THREAD and SHUTDOWN_THREAD would have been better, more general names, for these. If you agree, I think we can just amend the KIP and fix it in this PR.", "author": "vvcephei", "createdAt": "2020-12-11T15:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3MDUyNw==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541070527", "bodyText": "It should be the string is REPLACE_THREAD. Ill just fix that, its just left over from a period of time where we thought of calling it REPLACE_STREAM_THREAD", "author": "wcarlson5", "createdAt": "2020-12-11T16:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5OTU0Nw==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541099547", "bodyText": "I actually would be in favor of calling the enum value REPLACE_STREAM_THREAD. A stream thread is a stream thread and a global stream thread is a global stream thread. I am aware that the KIP calls the enum value differently, but we also have a config that is called 'NUM_STREAM_THREADS_CONFIG' and we have also 'addStreamThread()' and removeStreamThread(). So I guess, the name to the outside of this is stream thread and not thread. We have also other threads in Kafka Streams like the state directory cleaner thread and the RocksDB metrics recording thread.", "author": "cadonna", "createdAt": "2020-12-11T17:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExNDYwOQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541114609", "bodyText": "What if we add an option to replace the global thread?", "author": "wcarlson5", "createdAt": "2020-12-11T17:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExOTY3MQ==", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541119671", "bodyText": "Ah, now I got it! Sorry! Makes sense! In that case we can reuse REPLACE_THREAD also for the global stream thread. Forgot about that!", "author": "cadonna", "createdAt": "2020-12-11T17:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e96114cf6a213ba4424958a049e846d44b14107", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java b/streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java\nindex 0b0dc9c5ab..5502b35bc2 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java\n\n@@ -27,7 +27,7 @@ public interface StreamsUncaughtExceptionHandler {\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n-        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),\n+        REPLACE_THREAD(0, \"REPLACE_THREAD\"),\n         SHUTDOWN_CLIENT(1, \"SHUTDOWN_KAFKA_STREAMS_CLIENT\"),\n         SHUTDOWN_APPLICATION(2, \"SHUTDOWN_KAFKA_STREAMS_APPLICATION\");\n \n"}}, {"oid": "6e96114cf6a213ba4424958a049e846d44b14107", "url": "https://github.com/apache/kafka/commit/6e96114cf6a213ba4424958a049e846d44b14107", "message": "cleanup", "committedDate": "2020-12-11T16:43:22Z", "type": "commit"}]}