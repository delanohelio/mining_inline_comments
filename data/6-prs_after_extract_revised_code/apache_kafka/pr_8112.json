{"pr_number": 8112, "pr_title": "KAFKA-9557: correct thread process-rate sensor to measure throughput", "pr_createdAt": "2020-02-13T22:10:46Z", "pr_url": "https://github.com/apache/kafka/pull/8112", "timeline": [{"oid": "4faebf6bbe0143159d14f37da7dc092994f9a425", "url": "https://github.com/apache/kafka/commit/4faebf6bbe0143159d14f37da7dc092994f9a425", "message": "MINOR: correct thread process-rate sensor to measure throughput", "committedDate": "2020-02-13T22:09:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxNzA2MA==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379217060", "bodyText": "We can still leverage on addInvocationRateToSensor here?", "author": "guozhangwang", "createdAt": "2020-02-14T01:58:58Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -146,18 +151,46 @@ public static Sensor pollSensor(final String threadId,\n         );\n     }\n \n-    public static Sensor processSensor(final String threadId,\n-                                       final StreamsMetricsImpl streamsMetrics) {\n-        return invocationRateAndCountAndAvgAndMaxLatencySensor(\n-            threadId,\n-            PROCESS,\n-            PROCESS_RATE_DESCRIPTION,\n-            PROCESS_TOTAL_DESCRIPTION,\n+    public static Sensor processLatencySensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, PROCESS, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        addAvgAndMaxToSensor(\n+            sensor,\n+            threadLevelGroup,\n+            tagMap,\n+            PROCESS + LATENCY_SUFFIX,\n             PROCESS_AVG_LATENCY_DESCRIPTION,\n-            PROCESS_MAX_LATENCY_DESCRIPTION,\n-            Sensor.RecordingLevel.INFO,\n-            streamsMetrics\n+            PROCESS_MAX_LATENCY_DESCRIPTION\n+        );\n+        return sensor;\n+    }\n+\n+    public static Sensor processRateSensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, PROCESS, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        sensor.add(", "originalCommit": "4faebf6bbe0143159d14f37da7dc092994f9a425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwMTc2OQ==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379501769", "bodyText": "No, because we're specifically not measuring the rate of sensor.record(quantity) invocations, which means to count each record event as 1, regardless of quantity. Instead, we actually record the quantity now.\nThat sounds clear as mud to me, so here's an example:\nSensor S\n* Metric A := invocation rate sensor\n* Metric B := \"plain\" rate sensor\n\nExecute: S.record(2) once in a second\nState:\nA.rate == 1/sec\nA.total == 1\nB.rate == 2/sec\nB.total == 2\n\nIn this example, B is the definition we are aiming for.", "author": "vvcephei", "createdAt": "2020-02-14T15:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxNzA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyMjk3MA==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379522970", "bodyText": "Yeah I know that :) I was referring to the one with SUM not COUNT too but I copied the wrong name. We already have a public addRateOfSumMetricToSensor which is only used for rocksDB today, and I was wondering if we can leverage that.", "author": "guozhangwang", "createdAt": "2020-02-14T16:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxNzA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NzkyOQ==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379567929", "bodyText": "Ah, sorry :)\nI saw that metric, but had no idea what a \"rate of sum\" is... I fixed it now.", "author": "vvcephei", "createdAt": "2020-02-14T18:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxNzA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java\nindex 1cace1efda..2eb7808013 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java\n\n@@ -153,7 +154,9 @@ public class ThreadMetrics {\n \n     public static Sensor processLatencySensor(final String threadId,\n                                               final StreamsMetricsImpl streamsMetrics) {\n-        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, PROCESS, RecordingLevel.INFO);\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId,\n+                                                               PROCESS + LATENCY_SUFFIX,\n+                                                               RecordingLevel.INFO);\n         final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n         final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n         addAvgAndMaxToSensor(\n"}}, {"oid": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf", "url": "https://github.com/apache/kafka/commit/0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf", "message": "fix sensor names and tests and add comments", "committedDate": "2020-02-14T17:50:57Z", "type": "commit"}, {"oid": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf", "url": "https://github.com/apache/kafka/commit/65733c1d76583d727dc6d5a7b6b2dd3d773993bf", "message": "switch to addRateOfSumAndSumMetricsToSensor", "committedDate": "2020-02-14T18:06:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NzQ0NQ==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379567445", "bodyText": "I've updated this PR to give the two different sensors unique names.", "author": "vvcephei", "createdAt": "2020-02-14T17:59:24Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -146,18 +152,50 @@ public static Sensor pollSensor(final String threadId,\n         );\n     }\n \n-    public static Sensor processSensor(final String threadId,\n-                                       final StreamsMetricsImpl streamsMetrics) {\n-        return invocationRateAndCountAndAvgAndMaxLatencySensor(\n-            threadId,\n-            PROCESS,\n-            PROCESS_RATE_DESCRIPTION,\n-            PROCESS_TOTAL_DESCRIPTION,\n+    public static Sensor processLatencySensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId,\n+                                                               PROCESS + LATENCY_SUFFIX,", "originalCommit": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java\nindex 2eb7808013..be813bed2d 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java\n\n@@ -177,23 +173,13 @@ public class ThreadMetrics {\n                                                                RecordingLevel.INFO);\n         final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n         final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n-        sensor.add(\n-            new MetricName(\n-                PROCESS + RATE_SUFFIX,\n-                threadLevelGroup,\n-                PROCESS_RATE_DESCRIPTION,\n-                tagMap\n-            ),\n-            new Rate(TimeUnit.SECONDS, new WindowedSum())\n-        );\n-        sensor.add(\n-            new MetricName(\n-                PROCESS + StreamsMetricsImpl.TOTAL_SUFFIX,\n-                threadLevelGroup,\n-                PROCESS_TOTAL_DESCRIPTION,\n-                tagMap\n-            ),\n-            new CumulativeCount()\n+        addRateOfSumAndSumMetricsToSensor(\n+            sensor,\n+            threadLevelGroup,\n+            tagMap,\n+            PROCESS,\n+            PROCESS_RATE_DESCRIPTION,\n+            PROCESS_TOTAL_DESCRIPTION\n         );\n         return sensor;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2ODk4NQ==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379568985", "bodyText": "I moved this into the tests where it was needed because it was interfering with the new tests, in which we specifically need the static method not to be mocked so that we can make sure that we are actually adding the desired metrics. The tests with this thing mocked only verify that ThreadMetrics invokes the static method on StreamsMetricsImpl, not that it actually creates the right metrics, but I don't have the ambition to fix the rest of the tests right now.", "author": "vvcephei", "createdAt": "2020-02-14T18:02:52Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java", "diffHunk": "@@ -75,7 +78,6 @@\n     @Before\n     public void setUp() {\n         expect(streamsMetrics.version()).andReturn(builtInMetricsVersion).anyTimes();\n-        mockStatic(StreamsMetricsImpl.class);", "originalCommit": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MTEzOQ==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379571139", "bodyText": "I moved this into the block here because it makes no difference to the result, and it's a little more efficient.", "author": "vvcephei", "createdAt": "2020-02-14T18:08:00Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -851,11 +853,19 @@ void runOnce() {\n \n             do {\n                 for (int i = 0; i < numIterations; i++) {\n+                    advanceNowAndComputeLatency();\n                     processed = taskManager.process(now);\n \n                     if (processed > 0) {\n+                        // It makes no difference to the outcome of these metrics when we record \"0\",\n+                        // so we can just avoid the method call when we didn't process anything.\n+                        processRateSensor.record(processed, now);", "originalCommit": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3Nzk3Mg==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379577972", "bodyText": "not a suggestion: We have a new metrics proposed in KIP-444 to report the ratio of processing each task within a thread (CPU wise), hopefully that helps with the debugging purposes.", "author": "guozhangwang", "createdAt": "2020-02-14T18:24:38Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -851,11 +853,19 @@ void runOnce() {\n \n             do {\n                 for (int i = 0; i < numIterations; i++) {\n+                    advanceNowAndComputeLatency();\n                     processed = taskManager.process(now);\n \n                     if (processed > 0) {\n+                        // It makes no difference to the outcome of these metrics when we record \"0\",\n+                        // so we can just avoid the method call when we didn't process anything.\n+                        processRateSensor.record(processed, now);\n+\n+                        // This metric is scaled to represent the _average_ processing time of _each_\n+                        // task. Note, it's hard to interpret this as defined, but we would need a KIP\n+                        // to change it to simply report the overall time spent processing all tasks.", "originalCommit": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTg4Mg==", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379635882", "bodyText": "Yeah, I think the task-level latency metric would be the most useful. At the thread-level, it seems better to just report the total latency of all processing, so you could help debug the sources of poll latency or whatever, but it didn't seem like a good idea to just change it with no KIP.", "author": "vvcephei", "createdAt": "2020-02-14T20:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3Nzk3Mg=="}], "type": "inlineReview", "revised_code": null}]}