{"pr_number": 9388, "pr_title": "KAFKA-10562: Properly invoke new StateStoreContext init", "pr_createdAt": "2020-10-07T03:23:35Z", "pr_url": "https://github.com/apache/kafka/pull/9388", "timeline": [{"oid": "59e3e34b44a68627718a7f76ae39b08906e97ef5", "url": "https://github.com/apache/kafka/commit/59e3e34b44a68627718a7f76ae39b08906e97ef5", "message": "KAFKA-10562: Delegate store wrappers to new init method", "committedDate": "2020-10-05T20:47:57Z", "type": "commit"}, {"oid": "e53cdf44111b9ca2a38424452bdb6f57b88498ff", "url": "https://github.com/apache/kafka/commit/e53cdf44111b9ca2a38424452bdb6f57b88498ff", "message": "wip", "committedDate": "2020-10-05T21:13:51Z", "type": "commit"}, {"oid": "af662e15bdea5688b49d489ca8c2ce087dcaa2d6", "url": "https://github.com/apache/kafka/commit/af662e15bdea5688b49d489ca8c2ce087dcaa2d6", "message": "asdf", "committedDate": "2020-10-06T14:36:39Z", "type": "commit"}, {"oid": "f4448fd066d2839e8f15c29a7f91015023eb06f0", "url": "https://github.com/apache/kafka/commit/f4448fd066d2839e8f15c29a7f91015023eb06f0", "message": "wip", "committedDate": "2020-10-06T16:58:05Z", "type": "commit"}, {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "url": "https://github.com/apache/kafka/commit/4452d1b9337249d2cc6c801a9e08675425cdcbcf", "message": "done", "committedDate": "2020-10-07T03:19:03Z", "type": "commit"}, {"oid": "430ca223ae45388809d6a258292aebfdd94a83ab", "url": "https://github.com/apache/kafka/commit/430ca223ae45388809d6a258292aebfdd94a83ab", "message": "remove redundant check", "committedDate": "2020-10-07T03:32:10Z", "type": "commit"}, {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "url": "https://github.com/apache/kafka/commit/ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "message": "use shared init method", "committedDate": "2020-10-07T03:33:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNTcwMg==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500715702", "bodyText": "This ticket needs to go in to 2.7.0 also, but I split it out for reviewability.", "author": "vvcephei", "createdAt": "2020-10-07T03:24:19Z", "path": "streams/examples/src/test/java/org/apache/kafka/streams/examples/wordcount/WordCountProcessorTest.java", "diffHunk": "@@ -34,6 +34,7 @@\n  * Demonstrate the use of {@link MockProcessorContext} for testing the {@link Processor} in the {@link WordCountProcessorDemo}.\n  */\n public class WordCountProcessorTest {\n+    @SuppressWarnings(\"deprecation\") // TODO will be fixed in KAFKA-10437", "originalCommit": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNTg1Mg==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500715852", "bodyText": "Adding the deprecation tag right now lets us be sure we encountered all places this method appears in the codebase.", "author": "vvcephei", "createdAt": "2020-10-07T03:24:57Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateStore.java", "diffHunk": "@@ -65,7 +65,11 @@\n      *\n      * @throws IllegalStateException If store gets registered after initialized is already finished\n      * @throws StreamsException if the store's change log does not contain the partition\n+     * @deprecated Since 2.7.0. Callers should invoke {@link this#init(StateStoreContext, StateStore)} instead.\n+     *             Implementers may choose to implement this method for backward compatibility or to throw an\n+     *             informative exception instead.\n      */\n+    @Deprecated", "originalCommit": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjMyNg==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716326", "bodyText": "There are going to be a lot of duplicated init methods. It's not great, but hopefully we can drop the old API before too long.", "author": "vvcephei", "createdAt": "2020-10-07T03:27:01Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractReadOnlyDecorator.java", "diffHunk": "@@ -45,12 +46,19 @@ public void flush() {\n         throw new UnsupportedOperationException(ERROR_MESSAGE);\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n         throw new UnsupportedOperationException(ERROR_MESSAGE);\n     }\n \n+    @Override\n+    public void init(final StateStoreContext context,\n+                     final StateStore root) {\n+        throw new UnsupportedOperationException(ERROR_MESSAGE);", "originalCommit": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjQ3Mg==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716472", "bodyText": "Added a bunch of duplicated extractors here to help keep the implementation classes clean.", "author": "vvcephei", "createdAt": "2020-10-07T03:27:45Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java", "diffHunk": "@@ -47,9 +48,42 @@ public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context)\n         return (StreamsMetricsImpl) context.metrics();\n     }\n \n+    /**\n+     * Should be removed as part of KAFKA-10217\n+     */\n+    public static StreamsMetricsImpl getMetricsImpl(final StateStoreContext context) {\n+        return (StreamsMetricsImpl) context.metrics();\n+    }", "originalCommit": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjYzNw==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716637", "bodyText": "I replaced a lot of casts with this checked-cast method, which also lets us get rid of a lot of similar cast-checking blocks, which were inconsistently applied.", "author": "vvcephei", "createdAt": "2020-10-07T03:28:28Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java", "diffHunk": "@@ -47,9 +48,42 @@ public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context)\n         return (StreamsMetricsImpl) context.metrics();\n     }\n \n+    /**\n+     * Should be removed as part of KAFKA-10217\n+     */\n+    public static StreamsMetricsImpl getMetricsImpl(final StateStoreContext context) {\n+        return (StreamsMetricsImpl) context.metrics();\n+    }\n+\n     public static String changelogFor(final ProcessorContext context, final String storeName) {\n         return context instanceof InternalProcessorContext\n             ? ((InternalProcessorContext) context).changelogFor(storeName)\n             : ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n     }\n+\n+    public static String changelogFor(final StateStoreContext context, final String storeName) {\n+        return context instanceof InternalProcessorContext\n+            ? ((InternalProcessorContext) context).changelogFor(storeName)\n+            : ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n+    }\n+\n+    public static InternalProcessorContext asInternalProcessorContext(final ProcessorContext context) {\n+        if (context instanceof InternalProcessorContext) {\n+            return (InternalProcessorContext) context;\n+        } else {\n+            throw new IllegalArgumentException(\n+                \"This component requires internal features of Kafka Streams and must be disabled for unit tests.\"\n+            );\n+        }\n+    }", "originalCommit": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNjE5NQ==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501226195", "bodyText": "Thanks!", "author": "guozhangwang", "createdAt": "2020-10-07T18:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjYzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjczMg==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716732", "bodyText": "There are a handful of these also, just passing the deprecation on to the callers.", "author": "vvcephei", "createdAt": "2020-10-07T03:28:59Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/AbstractRocksDBSegmentedBytesStore.java", "diffHunk": "@@ -225,6 +225,7 @@ public String name() {\n         return name;\n     }\n \n+    @Deprecated", "originalCommit": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODg3MQ==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500718871", "bodyText": "I was able to remove the type-dependency of the context by re-specifying the interface in terms of the only two properties it needed.", "author": "vvcephei", "createdAt": "2020-10-07T03:38:37Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/KeyValueSegment.java", "diffHunk": "@@ -45,10 +46,9 @@ public int compareTo(final KeyValueSegment segment) {\n     }\n \n     @Override\n-    public void openDB(final ProcessorContext context) {\n-        super.openDB(context);\n+    public void openDB(final Map<String, Object> configs, final File stateDir) {\n+        super.openDB(configs, stateDir);", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTE5NQ==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500719195", "bodyText": "I wasn't able to extract out quite as much common code in the Metered implementations because they need to work regardless of whether the context is an InternalProcessorContext or whether it's a straight mock (for unit tests).", "author": "vvcephei", "createdAt": "2020-10-07T03:40:11Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -83,14 +85,40 @@\n         this.valueSerde = valueSerde;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         taskId = context.taskId().toString();\n         initStoreSerde(context);\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n+        registerMetrics();", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NDUyOA==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501344528", "bodyText": "this.context seems only used in the e2e latency as\nfinal long e2eLatency =  currentTime - context.timestamp();\n\nAnd in that case we may throw a NPE. Should we augment the condition as\nif (e2eLatencySensor.shouldRecord() && context != null)", "author": "guozhangwang", "createdAt": "2020-10-07T22:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0ODY3MQ==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501348671", "bodyText": "NVM, I saw you already did this :)", "author": "guozhangwang", "createdAt": "2020-10-07T22:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTE5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTMxNg==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500719316", "bodyText": "Here's the interface change that saved us from needing two openDB methods.", "author": "vvcephei", "createdAt": "2020-10-07T03:40:44Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java", "diffHunk": "@@ -122,7 +122,7 @@\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    void openDB(final ProcessorContext context) {\n+    void openDB(final Map<String, Object> configs, final File stateDir) {", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTcyMQ==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500719721", "bodyText": "This was actually a bug before, which this PR fixes: the wrapping layers should transmit the init call straight down, rather than translating it. There are a whole set of new unit tests making sure that this works properly for both the new and old init methods.", "author": "vvcephei", "createdAt": "2020-10-07T03:42:32Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalProcessorContextImplTest.java", "diffHunk": "@@ -147,7 +147,7 @@ public void shouldNotAllowToSchedulePunctuations() {\n     public void shouldNotAllowInitForKeyValueStore() {\n         final StateStore store = globalContext.getStateStore(GLOBAL_KEY_VALUE_STORE_NAME);\n         try {\n-            store.init((ProcessorContext) null, null);\n+            store.init((StateStoreContext) null, null);", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMDc4Mg==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500720782", "bodyText": "These are the new unit tests I added to make sure that all the store builder wrappers transmit init calls correctly. They are frustratingly similar, but not exactly the same across different test classes because the test classes follow different idioms.\nI think it'd be nice to follow up with a general store-verification test that's parameterized by the exact store types so we can specify this test logic once and apply it to all the stores. That would also be handy for most of the rest of these tests. But I don't think we need to distract this PR with that concern.", "author": "vvcephei", "createdAt": "2020-10-07T03:46:52Z", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/CachingKeyValueStoreTest.java", "diffHunk": "@@ -100,6 +100,31 @@ public void after() {\n         return store;\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void shouldDelegateDeprecatedInit() {", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjQ0Ng==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501322446", "bodyText": "Why not import static the function directly like in other classes?", "author": "guozhangwang", "createdAt": "2020-10-07T21:32:50Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -29,7 +29,9 @@\n import org.apache.kafka.streams.kstream.internals.FullChangeSerde;\n import org.apache.kafka.streams.processor.ProcessorContext;\n import org.apache.kafka.streams.processor.StateStore;\n+import org.apache.kafka.streams.processor.StateStoreContext;\n import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.ProcessorContextUtils;", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMjg2Ng==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501432866", "bodyText": "Oh, probably just overlooked it.", "author": "vvcephei", "createdAt": "2020-10-08T03:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjQ0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NzIyOA==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501347228", "bodyText": "Actually I think we should remove the restoreSensor since we no longer restore the state upon init any more? In KIP-444 we no longer have it as a state-store level metric.", "author": "guozhangwang", "createdAt": "2020-10-07T22:32:16Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -83,14 +85,40 @@\n         this.valueSerde = valueSerde;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         taskId = context.taskId().toString();\n         initStoreSerde(context);\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n+        registerMetrics();\n+        final Sensor restoreSensor =\n+            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n+\n+        // register and possibly restore the state from the logs\n+        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n+    }\n+\n+    @Override\n+    public void init(final StateStoreContext context,\n+                     final StateStore root) {\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n+        taskId = context.taskId().toString();\n+        initStoreSerde(context);\n+        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n+\n+        registerMetrics();\n+        final Sensor restoreSensor =", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMjk2Nw==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501432967", "bodyText": "huh. I'll double-check and take it out.", "author": "vvcephei", "createdAt": "2020-10-08T03:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMzkyMw==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501433923", "bodyText": "Actually, I'll do that in a quick follow-up PR, so I can go ahead and merge this.", "author": "vvcephei", "createdAt": "2020-10-08T03:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NzIyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0ODc0MA==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501348740", "bodyText": "Ditto here.", "author": "guozhangwang", "createdAt": "2020-10-07T22:36:07Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java", "diffHunk": "@@ -68,26 +70,47 @@\n         this.time = time;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         initStoreSerde(context);\n         taskId = context.taskId().toString();\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n-        putSensor = StateStoreMetrics.putSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        fetchSensor = StateStoreMetrics.fetchSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        flushSensor = StateStoreMetrics.flushSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        removeSensor = StateStoreMetrics.removeSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        e2eLatencySensor = StateStoreMetrics.e2ELatencySensor(taskId, metricsScope, name(), streamsMetrics);\n+        registerMetrics();\n         final Sensor restoreSensor =\n             StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n \n         // register and possibly restore the state from the logs\n         maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n     }\n \n+    @Override\n+    public void init(final StateStoreContext context,\n+                     final StateStore root) {\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n+        initStoreSerde(context);\n+        taskId = context.taskId().toString();\n+        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n+\n+        registerMetrics();\n+        final Sensor restoreSensor =", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0OTQ0NA==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501349444", "bodyText": "Thinking about this a bit more: is this.context only null in unit tests? It seems a bit overkill to let non-testing code to cope with testing code if yes..\nCould we let the mock class to extend from InternalProcessorContext as well?", "author": "guozhangwang", "createdAt": "2020-10-07T22:37:58Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "diffHunk": "@@ -122,7 +158,7 @@ public boolean setFlushListener(final CacheFlushListener<Windowed<K>, V> listene\n     @Override\n     public void put(final K key,\n                     final V value) {\n-        put(key, value, context.timestamp());\n+        put(key, value, context != null ? context.timestamp() : 0L);", "originalCommit": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTYxMw==", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501435613", "bodyText": "Yeah, it's not something I normally like to do, either. In this case, though, it's necessary. The thing is that all our internal StateStoreContexts are InternalProcessorContext implementations, and therefore, they are also ProcessorContext implementations, so they have a timestamp() method.\nThe thing that makes this unavoidable is that it's ok for users to init a state store using the MockProcessorContext we provide for them in test-utils. This is a bit of a bleed-over from the next pr, which I'm still finishing up, but it's better if we keep their context \"pure\". I.e., I'm going to propose to add a new context that's just an api.ProcessorContext and a separate implementation that just a StateStoreContext. We should discuss on that PR whether that's really the best way to present it, but if you ultimately agree, then it means we have to expect a null context here.\nNote that the only functionality it affects is the recording of metrics that probably don't matter in unit tests and this stub behavior for a deprecated method that people shouldn't be using.\nIf after reviewing the next PR, we do wind up converging the implementations, I'll come back and undo these checks here.", "author": "vvcephei", "createdAt": "2020-10-08T04:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0OTQ0NA=="}], "type": "inlineReview", "revised_code": null}]}