{"pr_number": 7996, "pr_title": "KAFKA-9355: Fix bug that removed RocksDB metrics after failure in EOS", "pr_createdAt": "2020-01-22T02:43:31Z", "pr_url": "https://github.com/apache/kafka/pull/7996", "timeline": [{"oid": "e852b1c876e5b365f1a574b10ca730eb8141fbc4", "url": "https://github.com/apache/kafka/commit/e852b1c876e5b365f1a574b10ca730eb8141fbc4", "message": "KAFKA-9355: Fix bug that removed RocksDB metrics after failure in EOS\n\n- Added `init()` method to `RocksDBMetricsRecorder`\n- Added call to `init()` of `RocksDBMetricsRecorder` to `init()` of RocksDB store\n- Added call to `init()` of `RocksDBMetricsRecorder` to `openExisting()` of segmented state stores\n- Adapted unit tests\n- Added integration test that reproduces the situation in which the bug occurred", "committedDate": "2020-01-22T02:37:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0Njg5OQ==", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369346899", "bodyText": "The metrics recorder is initialised for a segmented key-value store.", "author": "cadonna", "createdAt": "2020-01-22T02:44:40Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/KeyValueSegments.java", "diffHunk": "@@ -51,4 +51,10 @@ public KeyValueSegment getOrCreateSegment(final long segmentId,\n             return newSegment;\n         }\n     }\n-}\n+\n+    @Override\n+    public void openExisting(final InternalProcessorContext context, final long streamTime) {\n+        metricsRecorder.init(context.metrics(), context.taskId());\n+        super.openExisting(context, streamTime);\n+    }\n+}", "originalCommit": "e852b1c876e5b365f1a574b10ca730eb8141fbc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0Njk2OQ==", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369346969", "bodyText": "The metrics recorder is initialised for a non-segmented key-value store.", "author": "cadonna", "createdAt": "2020-01-22T02:45:07Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java", "diffHunk": "@@ -225,6 +225,7 @@ public void init(final ProcessorContext context,\n                      final StateStore root) {\n         // open the DB dir\n         internalProcessorContext = context;\n+        metricsRecorder.init((StreamsMetricsImpl) context.metrics(), context.taskId());", "originalCommit": "e852b1c876e5b365f1a574b10ca730eb8141fbc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzAxMQ==", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369347011", "bodyText": "The metrics recorder is initialised for a segmented timestamped key-value store.", "author": "cadonna", "createdAt": "2020-01-22T02:45:23Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/TimestampedSegments.java", "diffHunk": "@@ -51,4 +51,10 @@ public TimestampedSegment getOrCreateSegment(final long segmentId,\n             return newSegment;\n         }\n     }\n+\n+    @Override\n+    public void openExisting(final InternalProcessorContext context, final long streamTime) {\n+        metricsRecorder.init(context.metrics(), context.taskId());\n+        super.openExisting(context, streamTime);\n+    }\n }", "originalCommit": "e852b1c876e5b365f1a574b10ca730eb8141fbc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzEyOA==", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369347128", "bodyText": "This initialisation is moved to the init() method.", "author": "cadonna", "createdAt": "2020-01-22T02:46:02Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java", "diffHunk": "@@ -71,20 +70,15 @@ public TaskId taskId() {\n         return taskId;\n     }\n \n+    public void init(final StreamsMetricsImpl streamsMetrics,\n+                     final TaskId taskId) {\n+        initSensors(streamsMetrics, taskId);\n+        this.taskId = taskId;\n+        this.streamsMetrics = streamsMetrics;\n+    }\n+\n     public void addStatistics(final String segmentName,\n-                              final Statistics statistics,\n-                              final StreamsMetricsImpl streamsMetrics,\n-                              final TaskId taskId) {\n-        if (!isInitialized) {\n-            initSensors(streamsMetrics, taskId);\n-            this.taskId = taskId;\n-            this.streamsMetrics = streamsMetrics;\n-            isInitialized = true;\n-        }\n-        if (this.taskId != taskId) {\n-            throw new IllegalStateException(\"Statistics of store \\\"\" + segmentName + \"\\\" for task \" + taskId\n-                + \" cannot be added to metrics recorder for task \" + this.taskId + \". This is a bug in Kafka Streams.\");\n-        }", "originalCommit": "e852b1c876e5b365f1a574b10ca730eb8141fbc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98ddcec73417ca13452626d13ca0b8471e86453d", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java\nindex e82b7f919d..b5d603c903 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java\n\n@@ -70,8 +70,19 @@ public class RocksDBMetricsRecorder {\n         return taskId;\n     }\n \n+    /**\n+     * The initialisation of the metrics recorder is idempotent.\n+     */\n     public void init(final StreamsMetricsImpl streamsMetrics,\n                      final TaskId taskId) {\n+        if (this.taskId != null && !this.taskId.equals(taskId)) {\n+            throw new IllegalStateException(\"Metrics recorder is re-initialised with different task: previous task is \" +\n+                this.taskId + \" whereas current task is \" + taskId + \". This is a bug in Kafka Streams.\");\n+        }\n+        if (this.streamsMetrics != null && this.streamsMetrics != streamsMetrics) {\n+            throw new IllegalStateException(\"Metrics recorder is re-initialised with different Streams metrics. \"\n+                + \"This is a bug in Kafka Streams.\");\n+        }\n         initSensors(streamsMetrics, taskId);\n         this.taskId = taskId;\n         this.streamsMetrics = streamsMetrics;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzQ0Mg==", "url": "https://github.com/apache/kafka/pull/7996#discussion_r369347442", "bodyText": "I moved the integration test verifications for RocksDB metrics into a new integration test.", "author": "cadonna", "createdAt": "2020-01-22T02:47:12Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "diffHunk": "@@ -393,10 +392,6 @@ private void shouldAddMetricsOnAllLevels(final String builtInMetricsVersion) thr\n             IN_MEMORY_LRUCACHE_TAG_KEY,\n             builtInMetricsVersion\n         );\n-        checkRocksDBMetricsByTag(\n-            \"rocksdb-state-id\",\n-            RecordingLevel.valueOf(streamsConfiguration.getProperty(StreamsConfig.METRICS_RECORDING_LEVEL_CONFIG))\n-        );", "originalCommit": "e852b1c876e5b365f1a574b10ca730eb8141fbc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b5b435ff6cb29251e66dadc2223e8ba9b2c96eb4", "url": "https://github.com/apache/kafka/commit/b5b435ff6cb29251e66dadc2223e8ba9b2c96eb4", "message": "Rename some methods", "committedDate": "2020-01-23T18:31:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzODAwNg==", "url": "https://github.com/apache/kafka/pull/7996#discussion_r376038006", "bodyText": "nit: maybe add a comment that this function is idempotent?\nAlso is it ever possible that this function is triggered multi-times for different taskId / streamsMetrics objects? If not should we throw an IllegalStateException if the taskId / streamsMetrics are not null and are different from the passed in values.", "author": "guozhangwang", "createdAt": "2020-02-06T19:32:02Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java", "diffHunk": "@@ -71,20 +70,15 @@ public TaskId taskId() {\n         return taskId;\n     }\n \n+    public void init(final StreamsMetricsImpl streamsMetrics,", "originalCommit": "b5b435ff6cb29251e66dadc2223e8ba9b2c96eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNTAxOA==", "url": "https://github.com/apache/kafka/pull/7996#discussion_r377625018", "bodyText": "Good point! I added checks for the parameters.", "author": "cadonna", "createdAt": "2020-02-11T13:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzODAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "98ddcec73417ca13452626d13ca0b8471e86453d", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java\nindex e82b7f919d..b5d603c903 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.java\n\n@@ -70,8 +70,19 @@ public class RocksDBMetricsRecorder {\n         return taskId;\n     }\n \n+    /**\n+     * The initialisation of the metrics recorder is idempotent.\n+     */\n     public void init(final StreamsMetricsImpl streamsMetrics,\n                      final TaskId taskId) {\n+        if (this.taskId != null && !this.taskId.equals(taskId)) {\n+            throw new IllegalStateException(\"Metrics recorder is re-initialised with different task: previous task is \" +\n+                this.taskId + \" whereas current task is \" + taskId + \". This is a bug in Kafka Streams.\");\n+        }\n+        if (this.streamsMetrics != null && this.streamsMetrics != streamsMetrics) {\n+            throw new IllegalStateException(\"Metrics recorder is re-initialised with different Streams metrics. \"\n+                + \"This is a bug in Kafka Streams.\");\n+        }\n         initSensors(streamsMetrics, taskId);\n         this.taskId = taskId;\n         this.streamsMetrics = streamsMetrics;\n"}}, {"oid": "98ddcec73417ca13452626d13ca0b8471e86453d", "url": "https://github.com/apache/kafka/commit/98ddcec73417ca13452626d13ca0b8471e86453d", "message": "Add checks for metrics recorder init parameters", "committedDate": "2020-02-11T13:10:55Z", "type": "commit"}]}