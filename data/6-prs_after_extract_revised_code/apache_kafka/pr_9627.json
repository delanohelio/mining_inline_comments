{"pr_number": 9627, "pr_title": "KAFKA-10746: Change to Warn logs when necessary to notify users", "pr_createdAt": "2020-11-20T06:22:01Z", "pr_url": "https://github.com/apache/kafka/pull/9627", "timeline": [{"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc", "url": "https://github.com/apache/kafka/commit/d4247e13798b3e56f0e2838ce1f9870de74c44cc", "message": "KAFKA-10746: change to Warn logs when necessary to notice users", "committedDate": "2020-11-25T06:30:52Z", "type": "commit"}, {"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc", "url": "https://github.com/apache/kafka/commit/d4247e13798b3e56f0e2838ce1f9870de74c44cc", "message": "KAFKA-10746: change to Warn logs when necessary to notice users", "committedDate": "2020-11-25T06:30:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODExNjg1MA==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618116850", "bodyText": "It seems the shouldWarn is always true in production. Maybe we can remove the input argument from this method?", "author": "chia7712", "createdAt": "2021-04-22T06:33:39Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java", "diffHunk": "@@ -203,8 +203,8 @@ public void requestRejoin() {\n         coordinator.requestRejoin();\n     }\n \n-    public void maybeLeaveGroup(String leaveReason) {\n-        coordinator.maybeLeaveGroup(leaveReason);\n+    public void maybeLeaveGroup(String leaveReason, boolean shouldWarn) {", "originalCommit": "d4247e13798b3e56f0e2838ce1f9870de74c44cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE1ODkyMQ==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618158921", "bodyText": "Nice suggestion!", "author": "showuon", "createdAt": "2021-04-22T07:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODExNjg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "87e12238b1476d195ae14d011f85326d3587196d", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java\nindex 2a91a19f8a..54f9b245e2 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java\n\n@@ -200,7 +198,7 @@ public class WorkerGroupMember {\n     }\n \n     public void requestRejoin() {\n-        coordinator.requestRejoin();\n+        coordinator.requestRejoin(\"connect worker requested rejoin\");\n     }\n \n     public void maybeLeaveGroup(String leaveReason, boolean shouldWarn) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyMTg0Nw==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618121847", "bodyText": "'final' is unnecessary here :)", "author": "chia7712", "createdAt": "2021-04-22T06:43:38Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1013,8 +1018,13 @@ protected void close(Timer timer) {\n             state != MemberState.UNJOINED && generation.hasMemberId()) {\n             // this is a minimal effort attempt to leave the group. we do not\n             // attempt any resending if the request fails or times out.\n-            log.info(\"Member {} sending LeaveGroup request to coordinator {} due to {}\",\n+            final String logMessage = String.format(\"Member %s sending LeaveGroup request to coordinator %s due to %s\",", "originalCommit": "d4247e13798b3e56f0e2838ce1f9870de74c44cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\nindex e843478d5d..517bb0221a 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\n@@ -1018,7 +1040,7 @@ public abstract class AbstractCoordinator implements Closeable {\n             state != MemberState.UNJOINED && generation.hasMemberId()) {\n             // this is a minimal effort attempt to leave the group. we do not\n             // attempt any resending if the request fails or times out.\n-            final String logMessage = String.format(\"Member %s sending LeaveGroup request to coordinator %s due to %s\",\n+            String logMessage = String.format(\"Member %s sending LeaveGroup request to coordinator %s due to %s\",\n                 generation.memberId, coordinator, leaveReason);\n             if (shouldWarn) {\n                 log.warn(logMessage);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyMzA2Mw==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618123063", "bodyText": "Did you revise the content? Or it is just about decoration?", "author": "chia7712", "createdAt": "2021-04-22T06:45:54Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1353,12 +1363,13 @@ public void run() {\n                         } else if (heartbeat.pollTimeoutExpired(now)) {\n                             // the poll timeout has expired, which means that the foreground thread has stalled\n                             // in between calls to poll().\n-                            String leaveReason = \"consumer poll timeout has expired. This means the time between subsequent calls to poll() \" +\n-                                                    \"was longer than the configured max.poll.interval.ms, which typically implies that \" +\n+                            final String leaveReason = \"consumer poll timeout has expired. This means the time between \" +", "originalCommit": "d4247e13798b3e56f0e2838ce1f9870de74c44cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e12238b1476d195ae14d011f85326d3587196d", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\nindex e843478d5d..bfb5d42b42 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\n@@ -1352,14 +1373,21 @@ public abstract class AbstractCoordinator implements Closeable {\n                         long now = time.milliseconds();\n \n                         if (coordinatorUnknown()) {\n-                            if (findCoordinatorFuture != null || lookupCoordinator().failed())\n-                                // the immediate future check ensures that we backoff properly in the case that no\n-                                // brokers are available to connect to.\n+                            if (findCoordinatorFuture != null) {\n+                                // clear the future so that after the backoff, if the hb still sees coordinator unknown in\n+                                // the next iteration it will try to re-discover the coordinator in case the main thread cannot\n+                                clearFindCoordinatorFuture();\n+\n+                                // backoff properly\n                                 AbstractCoordinator.this.wait(rebalanceConfig.retryBackoffMs);\n+                            } else {\n+                                lookupCoordinator();\n+                            }\n                         } else if (heartbeat.sessionTimeoutExpired(now)) {\n                             // the session timeout has expired without seeing a successful heartbeat, so we should\n                             // probably make sure the coordinator is still healthy.\n-                            markCoordinatorUnknown();\n+                            markCoordinatorUnknown(\"session timed out without receiving a \"\n+                                    + \"heartbeat response\");\n                         } else if (heartbeat.pollTimeoutExpired(now)) {\n                             // the poll timeout has expired, which means that the foreground thread has stalled\n                             // in between calls to poll().\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyNTQ1NA==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618125454", "bodyText": "Most cases pass false so an override method  maybeLeaveGroup(String) can reduce the code changes. Also, maybeLeaveGroup(String, boolean) can be declared as a protected method. WDYT?", "author": "chia7712", "createdAt": "2021-04-22T06:50:20Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1001,9 +1001,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leave the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     *\n+     * @param leaveReason the reason to leave the group for logging\n+     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {", "originalCommit": "d4247e13798b3e56f0e2838ce1f9870de74c44cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE1OTgyNw==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618159827", "bodyText": "Cool! And, it cannot change to protected method since we used this method in KafkaConsumer, which is in different package.", "author": "showuon", "createdAt": "2021-04-22T07:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyNTQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\nindex e843478d5d..517bb0221a 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\n@@ -1001,7 +1023,7 @@ public abstract class AbstractCoordinator implements Closeable {\n     }\n \n     /**\n-     * Leave the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n      * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n      *\n      * @param leaveReason the reason to leave the group for logging\n"}}, {"oid": "87e12238b1476d195ae14d011f85326d3587196d", "url": "https://github.com/apache/kafka/commit/87e12238b1476d195ae14d011f85326d3587196d", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-10746", "committedDate": "2021-04-22T07:17:46Z", "type": "commit"}, {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "url": "https://github.com/apache/kafka/commit/d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "message": "KAFKA-10746: refactor codes", "committedDate": "2021-04-22T07:40:23Z", "type": "commit"}, {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "url": "https://github.com/apache/kafka/commit/d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "message": "KAFKA-10746: refactor codes", "committedDate": "2021-04-22T07:40:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUyMTgyNQ==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618521825", "bodyText": "KafkaException is a runtime exception and therefore should only be included in the javadoc. In the method signature we include checked exceptions.", "author": "kkonstantine", "createdAt": "2021-04-22T15:46:59Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1023,9 +1023,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     *\n+     * @param leaveReason the reason to leave the group for logging\n+     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {", "originalCommit": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODg5Mzk4Ng==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618893986", "bodyText": "Thanks, updated.", "author": "showuon", "createdAt": "2021-04-23T02:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUyMTgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff588293d1ec3af78912332205001432323e9819", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\nindex 517bb0221a..cd1daa84c8 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\n@@ -1023,14 +1023,13 @@ public abstract class AbstractCoordinator implements Closeable {\n     }\n \n     /**\n-     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n-     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     * Sends LeaveGroupRequest and logs the {@code leaveReason}, unless this member is using static membership or is already\n+     * not part of the group (ie does not have a valid member id, is in the UNJOINED state, or the coordinator is unknown).\n      *\n      * @param leaveReason the reason to leave the group for logging\n-     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n         RequestFuture<Void> future = null;\n \n         // Starting from 2.3, only dynamic members will send LeaveGroupRequest to the broker,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUyMzcyMA==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618523720", "bodyText": "same here", "author": "kkonstantine", "createdAt": "2021-04-22T15:49:09Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1051,6 +1061,10 @@ protected void close(Timer timer) {\n         return future;\n     }\n \n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) throws KafkaException {", "originalCommit": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff588293d1ec3af78912332205001432323e9819", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\nindex 517bb0221a..cd1daa84c8 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\n@@ -1061,10 +1055,6 @@ public abstract class AbstractCoordinator implements Closeable {\n         return future;\n     }\n \n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) throws KafkaException {\n-        return maybeLeaveGroup(leaveReason, false);\n-    }\n-\n     protected boolean isDynamicMember() {\n         return !rebalanceConfig.groupInstanceId.isPresent();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxODA1OQ==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618818059", "bodyText": "I think it may be more useful to describe the cases where it will not send a LeaveGroup and describe what this actually means (also it should have been 'and' not 'or' in the original):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n          \n          \n            \n                 * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n          \n          \n            \n                 * Sends LeaveGroupRequest and logs the {@code leaveReason}, unless this member is using \n          \n          \n            \n                 * static  membership or is already not part of the group (ie does not have a valid member id, \n          \n          \n            \n                 * is in the UNJOINED state, or the coordinator is unknown).", "author": "ableegoldman", "createdAt": "2021-04-22T23:35:01Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1023,9 +1023,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.", "originalCommit": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff588293d1ec3af78912332205001432323e9819", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\nindex 517bb0221a..cd1daa84c8 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\n@@ -1023,14 +1023,13 @@ public abstract class AbstractCoordinator implements Closeable {\n     }\n \n     /**\n-     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n-     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     * Sends LeaveGroupRequest and logs the {@code leaveReason}, unless this member is using static membership or is already\n+     * not part of the group (ie does not have a valid member id, is in the UNJOINED state, or the coordinator is unknown).\n      *\n      * @param leaveReason the reason to leave the group for logging\n-     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n         RequestFuture<Void> future = null;\n \n         // Starting from 2.3, only dynamic members will send LeaveGroupRequest to the broker,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyMDQyNA==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618820424", "bodyText": "I think it would be simpler to just log the current leaveReason right here at the warn level, and then pass in a more brief description to maybeLeaveGroup rather than add a flag to that method just for this one case", "author": "ableegoldman", "createdAt": "2021-04-22T23:42:06Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1386,7 +1400,7 @@ public void run() {\n                                                     \"the poll loop is spending too much time processing messages. \" +\n                                                     \"You can address this either by increasing max.poll.interval.ms or by reducing \" +\n                                                     \"the maximum size of batches returned in poll() with max.poll.records.\";\n-                            maybeLeaveGroup(leaveReason);\n+                            maybeLeaveGroup(leaveReason, true);", "originalCommit": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODg5NDMwMg==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618894302", "bodyText": "Good suggestion!", "author": "showuon", "createdAt": "2021-04-23T02:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyMDQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "ff588293d1ec3af78912332205001432323e9819", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\nindex 517bb0221a..cd1daa84c8 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\n@@ -1395,12 +1385,13 @@ public abstract class AbstractCoordinator implements Closeable {\n                         } else if (heartbeat.pollTimeoutExpired(now)) {\n                             // the poll timeout has expired, which means that the foreground thread has stalled\n                             // in between calls to poll().\n-                            String leaveReason = \"consumer poll timeout has expired. This means the time between subsequent calls to poll() \" +\n-                                                    \"was longer than the configured max.poll.interval.ms, which typically implies that \" +\n-                                                    \"the poll loop is spending too much time processing messages. \" +\n-                                                    \"You can address this either by increasing max.poll.interval.ms or by reducing \" +\n-                                                    \"the maximum size of batches returned in poll() with max.poll.records.\";\n-                            maybeLeaveGroup(leaveReason, true);\n+                            log.warn(\"consumer poll timeout has expired. This means the time between subsequent calls to poll() \" +\n+                                \"was longer than the configured max.poll.interval.ms, which typically implies that \" +\n+                                \"the poll loop is spending too much time processing messages. You can address this \" +\n+                                \"either by increasing max.poll.interval.ms or by reducing the maximum size of batches \" +\n+                                \"returned in poll() with max.poll.records.\");\n+\n+                            maybeLeaveGroup(\"consumer poll timeout has expired.\");\n                         } else if (!heartbeat.shouldHeartbeat(now)) {\n                             // poll again after waiting for the retry backoff in case the heartbeat failed or the\n                             // coordinator disconnected\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyMTA3OQ==", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618821079", "bodyText": "The only invocation of WorkerGroupMember#maybeLeaveGroup in fact already does log a warning as to why instead of relying on maybeLeaveGroup to do so. Imo we should do something similar for the \"consumer poll timeout has expired\" case", "author": "ableegoldman", "createdAt": "2021-04-22T23:44:08Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java", "diffHunk": "@@ -202,7 +202,7 @@ public void requestRejoin() {\n     }\n \n     public void maybeLeaveGroup(String leaveReason) {\n-        coordinator.maybeLeaveGroup(leaveReason);\n+        coordinator.maybeLeaveGroup(leaveReason, true);", "originalCommit": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff588293d1ec3af78912332205001432323e9819", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java\nindex fcc9f946b0..4c1d6a5b9e 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java\n\n@@ -202,7 +202,7 @@ public class WorkerGroupMember {\n     }\n \n     public void maybeLeaveGroup(String leaveReason) {\n-        coordinator.maybeLeaveGroup(leaveReason, true);\n+        coordinator.maybeLeaveGroup(leaveReason);\n     }\n \n     public String ownerUrl(String connector) {\n"}}, {"oid": "ff588293d1ec3af78912332205001432323e9819", "url": "https://github.com/apache/kafka/commit/ff588293d1ec3af78912332205001432323e9819", "message": "KAFKA-10746: address reviewer's comment to log warn before leaving group", "committedDate": "2021-04-23T02:16:36Z", "type": "commit"}]}