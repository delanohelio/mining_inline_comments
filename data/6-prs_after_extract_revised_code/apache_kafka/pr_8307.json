{"pr_number": 8307, "pr_title": "KAFKA-9727: cleanup the state store for standby task dirty close and check null for changelogs", "pr_createdAt": "2020-03-17T04:20:08Z", "pr_url": "https://github.com/apache/kafka/pull/8307", "timeline": [{"oid": "e06dfb1bbcbe8f315a73a0811b30565e9c2af791", "url": "https://github.com/apache/kafka/commit/e06dfb1bbcbe8f315a73a0811b30565e9c2af791", "message": "add fixes", "committedDate": "2020-03-19T22:44:18Z", "type": "commit"}, {"oid": "e06dfb1bbcbe8f315a73a0811b30565e9c2af791", "url": "https://github.com/apache/kafka/commit/e06dfb1bbcbe8f315a73a0811b30565e9c2af791", "message": "add fixes", "committedDate": "2020-03-19T22:44:18Z", "type": "forcePushed"}, {"oid": "65bba1270b878a42f0e1666b44ef8509e6513a04", "url": "https://github.com/apache/kafka/commit/65bba1270b878a42f0e1666b44ef8509e6513a04", "message": "standby task fix", "committedDate": "2020-03-19T22:54:34Z", "type": "commit"}, {"oid": "e4b254ced498c71573c6171dc2634d0f0d303552", "url": "https://github.com/apache/kafka/commit/e4b254ced498c71573c6171dc2634d0f0d303552", "message": "unclean close test", "committedDate": "2020-03-20T01:55:15Z", "type": "commit"}, {"oid": "e4b254ced498c71573c6171dc2634d0f0d303552", "url": "https://github.com/apache/kafka/commit/e4b254ced498c71573c6171dc2634d0f0d303552", "message": "unclean close test", "committedDate": "2020-03-20T01:55:15Z", "type": "forcePushed"}, {"oid": "3245b2dad1504926206039d989f9c7ea05480a03", "url": "https://github.com/apache/kafka/commit/3245b2dad1504926206039d989f9c7ea05480a03", "message": "integration test?", "committedDate": "2020-03-20T03:00:50Z", "type": "commit"}, {"oid": "3f4cfd7503c0959ed2453e88ee9f1c98d280ca71", "url": "https://github.com/apache/kafka/commit/3f4cfd7503c0959ed2453e88ee9f1c98d280ca71", "message": "add standby tasks integration", "committedDate": "2020-03-20T18:29:45Z", "type": "commit"}, {"oid": "3f4cfd7503c0959ed2453e88ee9f1c98d280ca71", "url": "https://github.com/apache/kafka/commit/3f4cfd7503c0959ed2453e88ee9f1c98d280ca71", "message": "add standby tasks integration", "committedDate": "2020-03-20T18:29:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMzM4OA==", "url": "https://github.com/apache/kafka/pull/8307#discussion_r395833388", "bodyText": "Not for this PR: we can clean up the task-manager code to not pass in the checkpoint at all.", "author": "guozhangwang", "createdAt": "2020-03-20T18:56:23Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java", "diffHunk": "@@ -187,50 +189,41 @@ private void prepareClose(final boolean clean) {\n     @Override\n     public void closeClean(final Map<TopicPartition, Long> checkpoint) {\n         Objects.requireNonNull(checkpoint);\n-        close(true, checkpoint);\n+        close(true);", "originalCommit": "3f4cfd7503c0959ed2453e88ee9f1c98d280ca71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNDE4OQ==", "url": "https://github.com/apache/kafka/pull/8307#discussion_r395834189", "bodyText": "This part will have some conflicts with @mjsax 's PR, just a note.", "author": "guozhangwang", "createdAt": "2020-03-20T18:57:54Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -120,7 +120,7 @@ public StreamTask(final TaskId id,\n \n         this.time = time;\n         this.recordCollector = recordCollector;\n-        eosDisabled = !StreamsConfig.EXACTLY_ONCE.equals(config.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG));\n+        eosEnabled = StreamsConfig.EXACTLY_ONCE.equals(config.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG));", "originalCommit": "3f4cfd7503c0959ed2453e88ee9f1c98d280ca71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NzEzMA==", "url": "https://github.com/apache/kafka/pull/8307#discussion_r395867130", "bodyText": "Yea, one of us probably needs to rebase", "author": "abbccdda", "createdAt": "2020-03-20T20:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNDE4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNjIzNA==", "url": "https://github.com/apache/kafka/pull/8307#discussion_r395836234", "bodyText": "For my own education: before the fix, this integration test will fail when instance-2 is started?", "author": "guozhangwang", "createdAt": "2020-03-20T19:02:00Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.integration;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.integration.utils.EmbeddedKafkaCluster;\n+import org.apache.kafka.streams.integration.utils.IntegrationTestUtils;\n+import org.apache.kafka.streams.kstream.Consumed;\n+import org.apache.kafka.streams.processor.TaskId;\n+import org.apache.kafka.streams.processor.internals.StateDirectory;\n+import org.apache.kafka.streams.state.internals.OffsetCheckpoint;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.kafka.test.TestUtils.waitForCondition;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * An integration test to verify the conversion of a dirty-closed EOS\n+ * task towards a standby task is safe across restarts of the application.\n+ */\n+public class StandbyTaskEOSIntegrationTest {\n+\n+    private final String inputTopic = \"input\";\n+\n+    @ClassRule\n+    public static final EmbeddedKafkaCluster CLUSTER = new EmbeddedKafkaCluster(3);\n+\n+    @Before\n+    public void createTopics() throws Exception {\n+        CLUSTER.createTopic(inputTopic, 1, 3);\n+    }\n+\n+    @Test\n+    public void surviveWithOneTaskAsStandby() throws ExecutionException, InterruptedException, IOException {\n+        IntegrationTestUtils.produceKeyValuesSynchronouslyWithTimestamp(\n+            inputTopic,\n+            Collections.singletonList(\n+                new KeyValue<>(0, 0)),\n+            TestUtils.producerConfig(\n+                CLUSTER.bootstrapServers(),\n+                IntegerSerializer.class,\n+                IntegerSerializer.class,\n+                new Properties()),\n+            10L);\n+\n+        final String appId = \"eos-test-app\";\n+        final String stateDirPath = TestUtils.tempDirectory(appId).getPath();\n+\n+        final CountDownLatch instanceLatch = new CountDownLatch(1);\n+\n+        final String stateDirPathOne = stateDirPath + \"/\" + appId + \"-1/\";\n+        final KafkaStreams streamInstanceOne =\n+            buildStreamWithDirtyStateDir(appId, stateDirPathOne, instanceLatch);\n+\n+        final String stateDirPathTwo = stateDirPath + \"/\" + appId + \"-2/\";\n+        final KafkaStreams streamInstanceTwo =\n+            buildStreamWithDirtyStateDir(appId, stateDirPathTwo, instanceLatch);\n+\n+        streamInstanceOne.start();\n+\n+        streamInstanceTwo.start();\n+\n+        // Wait for the record to be processed\n+        assertTrue(instanceLatch.await(15, TimeUnit.SECONDS));\n+\n+        waitForCondition(() -> streamInstanceOne.state().equals(KafkaStreams.State.RUNNING),\n+            \"Stream instance one should be up and running by now\");\n+        waitForCondition(() -> streamInstanceTwo.state().equals(KafkaStreams.State.RUNNING),\n+            \"Stream instance one should be up and running by now\");\n+\n+        streamInstanceOne.close(Duration.ofSeconds(30));", "originalCommit": "3f4cfd7503c0959ed2453e88ee9f1c98d280ca71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2Njk5Mw==", "url": "https://github.com/apache/kafka/pull/8307#discussion_r395866993", "bodyText": "Yes, actually either instance-1 or instance-2 would fail, depending on which box gets standby assignment. There would be a IllegalState + NPE exception sequence happening.", "author": "abbccdda", "createdAt": "2020-03-20T20:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNjIzNA=="}], "type": "inlineReview", "revised_code": null}]}