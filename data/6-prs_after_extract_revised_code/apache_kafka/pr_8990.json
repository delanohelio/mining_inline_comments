{"pr_number": 8990, "pr_title": "KAFKA-10243; ConcurrentModificationException while processing connection setup timeouts", "pr_createdAt": "2020-07-07T09:54:32Z", "pr_url": "https://github.com/apache/kafka/pull/8990", "timeline": [{"oid": "f6afda2a66fa8c852007c529227cb61f6c1ab29a", "url": "https://github.com/apache/kafka/commit/f6afda2a66fa8c852007c529227cb61f6c1ab29a", "message": "KAFKA-10243; ConcurrentModificationException while processing connection setup timeouts", "committedDate": "2020-07-07T09:46:46Z", "type": "commit"}, {"oid": "479a681be259332804dde4d65082b56c531be4d1", "url": "https://github.com/apache/kafka/commit/479a681be259332804dde4d65082b56c531be4d1", "message": "cleanup", "committedDate": "2020-07-07T09:54:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MTY2OQ==", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450751669", "bodyText": "We can use connectingNodes.stream().filter?", "author": "rajinisivaram", "createdAt": "2020-07-07T10:02:43Z", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -440,6 +441,20 @@ public boolean isConnectionSetupTimeout(String id, long now) {\n         return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);\n     }\n \n+    /**\n+     * Return the Set of nodes whose connection setup has timed out.\n+     * @param now the current time in ms\n+     */\n+    public Set<String> nodesWithConnectionSetupTimeout(long now) {\n+        Set<String> nodes = new HashSet<>();\n+        for (String nodeId : connectingNodes) {", "originalCommit": "479a681be259332804dde4d65082b56c531be4d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NjY3Mg==", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450756672", "bodyText": "Sure thing.", "author": "dajac", "createdAt": "2020-07-07T10:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MTY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c1e7b165894495282f0fa1decd7239ea42a6f7ec", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java b/clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java\nindex b57c460419..39d8b16455 100644\n--- a/clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java\n+++ b/clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java\n\n@@ -446,13 +447,9 @@ final class ClusterConnectionStates {\n      * @param now the current time in ms\n      */\n     public Set<String> nodesWithConnectionSetupTimeout(long now) {\n-        Set<String> nodes = new HashSet<>();\n-        for (String nodeId : connectingNodes) {\n-            if (isConnectionSetupTimeout(nodeId, now)) {\n-                nodes.add(nodeId);\n-            }\n-        }\n-        return nodes;\n+        return connectingNodes.stream()\n+            .filter(id -> isConnectionSetupTimeout(id, now))\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MjAyMQ==", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752021", "bodyText": "nit: connections => connection", "author": "rajinisivaram", "createdAt": "2020-07-07T10:03:24Z", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+\n+        // Advance time by half of the connection setup timeout\n+        time.sleep(connectionSetupTimeoutMs / 2);\n+\n+        // Initiate a third connections", "originalCommit": "479a681be259332804dde4d65082b56c531be4d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1e7b165894495282f0fa1decd7239ea42a6f7ec", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\nindex 09742bbd2f..12bb88e68e 100644\n--- a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n+++ b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n\n@@ -375,12 +375,12 @@ public class ClusterConnectionStatesTest {\n         connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Expect no timed out connections\n-        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+        assertEquals(0, connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).size());\n \n         // Advance time by half of the connection setup timeout\n         time.sleep(connectionSetupTimeoutMs / 2);\n \n-        // Initiate a third connections\n+        // Initiate a third connection\n         connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MjIxOA==", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752218", "bodyText": "typo: for for", "author": "rajinisivaram", "createdAt": "2020-07-07T10:03:50Z", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+\n+        // Advance time by half of the connection setup timeout\n+        time.sleep(connectionSetupTimeoutMs / 2);\n+\n+        // Initiate a third connections\n+        connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n+        time.sleep((long) (connectionSetupTimeoutMs / 2 + connectionSetupTimeoutMs * connectionSetupTimeoutJitter));\n+\n+        // Expect two timed out connections.\n+        Set<String> timedOutConnections = connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds());\n+        assertEquals(2, timedOutConnections.size());\n+        assertTrue(timedOutConnections.contains(nodeId1));\n+        assertTrue(timedOutConnections.contains(nodeId2));\n+\n+        // Disconnect the first two connections\n+        connectionStates.disconnected(nodeId1, time.milliseconds());\n+        connectionStates.disconnected(nodeId2, time.milliseconds());\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for for the third connections", "originalCommit": "479a681be259332804dde4d65082b56c531be4d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1e7b165894495282f0fa1decd7239ea42a6f7ec", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\nindex 09742bbd2f..12bb88e68e 100644\n--- a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n+++ b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n\n@@ -375,12 +375,12 @@ public class ClusterConnectionStatesTest {\n         connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Expect no timed out connections\n-        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+        assertEquals(0, connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).size());\n \n         // Advance time by half of the connection setup timeout\n         time.sleep(connectionSetupTimeoutMs / 2);\n \n-        // Initiate a third connections\n+        // Initiate a third connection\n         connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MjI5NQ==", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752295", "bodyText": "one?", "author": "rajinisivaram", "createdAt": "2020-07-07T10:03:58Z", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+\n+        // Advance time by half of the connection setup timeout\n+        time.sleep(connectionSetupTimeoutMs / 2);\n+\n+        // Initiate a third connections\n+        connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n+        time.sleep((long) (connectionSetupTimeoutMs / 2 + connectionSetupTimeoutMs * connectionSetupTimeoutJitter));\n+\n+        // Expect two timed out connections.\n+        Set<String> timedOutConnections = connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds());\n+        assertEquals(2, timedOutConnections.size());\n+        assertTrue(timedOutConnections.contains(nodeId1));\n+        assertTrue(timedOutConnections.contains(nodeId2));\n+\n+        // Disconnect the first two connections\n+        connectionStates.disconnected(nodeId1, time.milliseconds());\n+        connectionStates.disconnected(nodeId2, time.milliseconds());\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for for the third connections\n+        time.sleep((long) (connectionSetupTimeoutMs / 2 + connectionSetupTimeoutMs * connectionSetupTimeoutJitter));\n+\n+        // Expect two timed out connections.", "originalCommit": "479a681be259332804dde4d65082b56c531be4d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1e7b165894495282f0fa1decd7239ea42a6f7ec", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\nindex 09742bbd2f..12bb88e68e 100644\n--- a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n+++ b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n\n@@ -375,12 +375,12 @@ public class ClusterConnectionStatesTest {\n         connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Expect no timed out connections\n-        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+        assertEquals(0, connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).size());\n \n         // Advance time by half of the connection setup timeout\n         time.sleep(connectionSetupTimeoutMs / 2);\n \n-        // Initiate a third connections\n+        // Initiate a third connection\n         connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1Mjg1Mg==", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752852", "bodyText": "nit: assertEquals(0, ...) may be better here so we know how many in the case of failure?", "author": "rajinisivaram", "createdAt": "2020-07-07T10:04:58Z", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());", "originalCommit": "479a681be259332804dde4d65082b56c531be4d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1e7b165894495282f0fa1decd7239ea42a6f7ec", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\nindex 09742bbd2f..12bb88e68e 100644\n--- a/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n+++ b/clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java\n\n@@ -375,12 +375,12 @@ public class ClusterConnectionStatesTest {\n         connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Expect no timed out connections\n-        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+        assertEquals(0, connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).size());\n \n         // Advance time by half of the connection setup timeout\n         time.sleep(connectionSetupTimeoutMs / 2);\n \n-        // Initiate a third connections\n+        // Initiate a third connection\n         connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n \n         // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n"}}, {"oid": "c1e7b165894495282f0fa1decd7239ea42a6f7ec", "url": "https://github.com/apache/kafka/commit/c1e7b165894495282f0fa1decd7239ea42a6f7ec", "message": "Address Rajini's feedback", "committedDate": "2020-07-07T10:16:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1OTg3Ng==", "url": "https://github.com/apache/kafka/pull/8990#discussion_r451059876", "bodyText": "Do we need a Set here? Not sure we need to pay the cost of creating the HashSet, etc.", "author": "ijuma", "createdAt": "2020-07-07T18:24:33Z", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -440,6 +442,16 @@ public boolean isConnectionSetupTimeout(String id, long now) {\n         return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);\n     }\n \n+    /**\n+     * Return the Set of nodes whose connection setup has timed out.\n+     * @param now the current time in ms\n+     */\n+    public Set<String> nodesWithConnectionSetupTimeout(long now) {", "originalCommit": "c1e7b165894495282f0fa1decd7239ea42a6f7ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}