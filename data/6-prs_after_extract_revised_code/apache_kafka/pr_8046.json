{"pr_number": 8046, "pr_title": "MINOR: further InternalTopologyBuilder cleanup ", "pr_createdAt": "2020-02-05T20:45:15Z", "pr_url": "https://github.com/apache/kafka/pull/8046", "timeline": [{"oid": "28bc575784ed3bf2d42364dee3eeced02ab7d985", "url": "https://github.com/apache/kafka/commit/28bc575784ed3bf2d42364dee3eeced02ab7d985", "message": "dont do no-op subscription update if not using pattern subscription\nmove log to initialization only\ncleanup #build weirdness\nexplicitly initialize subscription", "committedDate": "2020-02-05T20:38:57Z", "type": "commit"}, {"oid": "fbd9fcf496284dc74d2a673e759455e9a289cf62", "url": "https://github.com/apache/kafka/commit/fbd9fcf496284dc74d2a673e759455e9a289cf62", "message": "fix up tests", "committedDate": "2020-02-05T21:10:04Z", "type": "commit"}, {"oid": "39a82243d9959bc189405dea8c7d25393fc8fdd9", "url": "https://github.com/apache/kafka/commit/39a82243d9959bc189405dea8c7d25393fc8fdd9", "message": "fix type in test", "committedDate": "2020-02-05T21:11:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTY5Mw==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376041693", "bodyText": "Should we check that topicGroupId is not null?", "author": "guozhangwang", "createdAt": "2020-02-06T19:39:47Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -790,23 +790,18 @@ private int putNodeGroupName(final String nodeName,\n     }\n \n     public synchronized ProcessorTopology build() {\n-        return build((Integer) null);\n+        final Set<String> nodeGroup = new HashSet<>();\n+        for (final Set<String> value : nodeGroups().values()) {\n+            nodeGroup.addAll(value);\n+        }\n+        nodeGroup.removeAll(globalNodeGroups());\n+\n+        initializeSubscription();\n+        return build(nodeGroup);\n     }\n \n     public synchronized ProcessorTopology build(final Integer topicGroupId) {\n-        final Set<String> nodeGroup;\n-        if (topicGroupId != null) {\n-            nodeGroup = nodeGroups().get(topicGroupId);\n-        } else {\n-            // when topicGroupId is null, we build the full topology minus the global groups\n-            final Set<String> globalNodeGroups = globalNodeGroups();\n-            final Collection<Set<String>> values = nodeGroups().values();\n-            nodeGroup = new HashSet<>();\n-            for (final Set<String> value : values) {\n-                nodeGroup.addAll(value);\n-            }\n-            nodeGroup.removeAll(globalNodeGroups);\n-        }\n+        final Set<String> nodeGroup = nodeGroups().get(topicGroupId);", "originalCommit": "39a82243d9959bc189405dea8c7d25393fc8fdd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NTM2OQ==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376155369", "bodyText": "I moved all calls  where topicGroupId would be null to now call the parameterless build() instead. We can actually make topicGroupId just a regular int now", "author": "ableegoldman", "createdAt": "2020-02-07T00:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1OTU5Mg==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376159592", "bodyText": "Sounds good.", "author": "guozhangwang", "createdAt": "2020-02-07T00:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MTY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4a42c57c4de7017b768e95b3ee9f0d605822a0b4", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java\nindex cc52e58c97..ac3194536b 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java\n\n@@ -800,7 +800,7 @@ public class InternalTopologyBuilder {\n         return build(nodeGroup);\n     }\n \n-    public synchronized ProcessorTopology build(final Integer topicGroupId) {\n+    public synchronized ProcessorTopology build(final int topicGroupId) {\n         final Set<String> nodeGroup = nodeGroups().get(topicGroupId);\n         return build(nodeGroup);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mjg4Mg==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376042882", "bodyText": "Hmm.. inside StreamThread do we guarantee we always call initializeSubscription before calling these two functions?", "author": "guozhangwang", "createdAt": "2020-02-06T19:42:15Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1210,32 +1205,29 @@ private String decorateTopic(final String topic) {\n         return applicationId + \"-\" + topic;\n     }\n \n+    void initializeSubscription() {\n+        if (usesPatternSubscription()) {\n+            log.debug(\"Found pattern subscribed source topics, initializing consumer's subscription pattern.\");\n+            final List<String> allSourceTopics = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(allSourceTopics);\n+            sourceTopicPattern = buildPattern(allSourceTopics, nodeToSourcePatterns.values());\n+        } else {\n+            log.debug(\"No source topics using pattern subscription found, initializing consumer's subscription collection.\");\n+            sourceTopicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n+            Collections.sort(sourceTopicCollection);\n+        }\n+    }\n+\n     boolean usesPatternSubscription() {\n         return !nodeToSourcePatterns.isEmpty();\n     }\n \n     synchronized Collection<String> sourceTopicCollection() {\n-        log.debug(\"No source topics using pattern subscription found, using regular subscription for the main consumer.\");\n-\n-        if (topicCollection == null) {\n-            topicCollection = maybeDecorateInternalSourceTopics(sourceTopicNames);\n-            Collections.sort(topicCollection);\n-        }\n-\n-        return topicCollection;\n+        return sourceTopicCollection;", "originalCommit": "39a82243d9959bc189405dea8c7d25393fc8fdd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MzA3Mg==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376043072", "bodyText": "If not we should call initializeSubscription inside these two as well.", "author": "guozhangwang", "createdAt": "2020-02-06T19:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mjg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1Nzc5MQ==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376157791", "bodyText": "I put this initialization inside build(), which gets called in the KafkaStreams constructor before any StreamThreads get created, so the InternalTopologyBuilder should always have an initialized subscription by the time it gets passed to a thread.", "author": "ableegoldman", "createdAt": "2020-02-07T00:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mjg4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MzgyNw==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376043827", "bodyText": "Seems the callers are conditioned on usesPatternSubscription() already?", "author": "guozhangwang", "createdAt": "2020-02-06T19:44:12Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1872,37 +1864,35 @@ private boolean hasSubscriptionUpdates() {\n     }\n \n     synchronized void addSubscribedTopicsFromAssignment(final List<TopicPartition> partitions, final String logPrefix) {\n-        if (sourceTopicPattern() != null) {\n+        if (usesPatternSubscription()) {\n             final Set<String> assignedTopics = new HashSet<>();\n             for (final TopicPartition topicPartition : partitions) {\n                 assignedTopics.add(topicPartition.topic());\n             }\n-\n-            final Collection<String> existingTopics = subscriptionUpdates();\n-            if (!existingTopics.containsAll(assignedTopics)) {\n-                assignedTopics.addAll(existingTopics);\n-                updateSubscribedTopics(assignedTopics, logPrefix);\n-            }\n+            updateSubscribedTopics(assignedTopics, logPrefix);\n         }\n     }\n \n     synchronized void addSubscribedTopicsFromMetadata(final Set<String> topics, final String logPrefix) {\n-        if (sourceTopicPattern() != null) {\n-            final Collection<String> existingTopics = subscriptionUpdates();\n-            if (!existingTopics.equals(topics)) {\n-                topics.addAll(existingTopics);\n-                updateSubscribedTopics(topics, logPrefix);\n-            }\n+        if (usesPatternSubscription()) {\n+            updateSubscribedTopics(topics, logPrefix);\n         }\n     }\n \n     private void updateSubscribedTopics(final Set<String> topics, final String logPrefix) {\n-        log.debug(\"{}found {} topics possibly matching subscription\", logPrefix, topics.size());\n-        subscriptionUpdates.clear();\n-        subscriptionUpdates.addAll(topics);\n+        final Collection<String> existingTopics = subscriptionUpdates();\n+\n+        if  (usesPatternSubscription() && !existingTopics.equals(topics)) {", "originalCommit": "39a82243d9959bc189405dea8c7d25393fc8fdd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1ODAzNw==", "url": "https://github.com/apache/kafka/pull/8046#discussion_r376158037", "bodyText": "Good catch", "author": "ableegoldman", "createdAt": "2020-02-07T00:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MzgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "4a42c57c4de7017b768e95b3ee9f0d605822a0b4", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java\nindex cc52e58c97..ac3194536b 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java\n\n@@ -1882,7 +1882,7 @@ public class InternalTopologyBuilder {\n     private void updateSubscribedTopics(final Set<String> topics, final String logPrefix) {\n         final Collection<String> existingTopics = subscriptionUpdates();\n \n-        if  (usesPatternSubscription() && !existingTopics.equals(topics)) {\n+        if  (!existingTopics.equals(topics)) {\n             topics.addAll(existingTopics);\n \n             subscriptionUpdates.clear();\n"}}, {"oid": "4a42c57c4de7017b768e95b3ee9f0d605822a0b4", "url": "https://github.com/apache/kafka/commit/4a42c57c4de7017b768e95b3ee9f0d605822a0b4", "message": "github comments", "committedDate": "2020-02-07T00:32:27Z", "type": "commit"}, {"oid": "d61a5f732f0b4116bfd91277ed66ef0a9da17ed5", "url": "https://github.com/apache/kafka/commit/d61a5f732f0b4116bfd91277ed66ef0a9da17ed5", "message": "call build in StreamThreadTest", "committedDate": "2020-02-07T02:06:09Z", "type": "commit"}]}