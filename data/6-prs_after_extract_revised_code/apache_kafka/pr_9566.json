{"pr_number": 9566, "pr_title": "KAFKA-10618: Update to Uuid class", "pr_createdAt": "2020-11-05T20:56:44Z", "pr_url": "https://github.com/apache/kafka/pull/9566", "timeline": [{"oid": "1328f6e7cea5a4ad31fa0c0e2068d363c7cf2312", "url": "https://github.com/apache/kafka/commit/1328f6e7cea5a4ad31fa0c0e2068d363c7cf2312", "message": "Updated Uuid class.", "committedDate": "2020-11-05T20:49:34Z", "type": "commit"}, {"oid": "cbca0c17dc5e49918396dadb2797cdc7b4ceed3c", "url": "https://github.com/apache/kafka/commit/cbca0c17dc5e49918396dadb2797cdc7b4ceed3c", "message": "Fix checkstyle issue.", "committedDate": "2020-11-06T00:59:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNjU5NQ==", "url": "https://github.com/apache/kafka/pull/9566#discussion_r523336595", "bodyText": "Should we update the method name too?", "author": "ijuma", "createdAt": "2020-11-14T01:47:36Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Struct.java", "diffHunk": "@@ -266,12 +266,12 @@ public Long getLong(String name) {\n         return (Long) get(name);\n     }\n \n-    public UUID getUUID(BoundField field) {\n-        return (UUID) get(field);\n+    public Uuid getUUID(BoundField field) {\n+        return (Uuid) get(field);\n     }\n \n-    public UUID getUUID(String name) {\n-        return (UUID) get(name);\n+    public Uuid getUUID(String name) {", "originalCommit": "cbca0c17dc5e49918396dadb2797cdc7b4ceed3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a57ebc29297e84f0158160b5c2c857ab2ca474d7", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/protocol/types/Struct.java b/clients/src/main/java/org/apache/kafka/common/protocol/types/Struct.java\nindex 6c41cbba6d..e6e4a6fdc2 100644\n--- a/clients/src/main/java/org/apache/kafka/common/protocol/types/Struct.java\n+++ b/clients/src/main/java/org/apache/kafka/common/protocol/types/Struct.java\n\n@@ -266,11 +266,11 @@ public class Struct {\n         return (Long) get(name);\n     }\n \n-    public Uuid getUUID(BoundField field) {\n+    public Uuid getUuid(BoundField field) {\n         return (Uuid) get(field);\n     }\n \n-    public Uuid getUUID(String name) {\n+    public Uuid getUuid(String name) {\n         return (Uuid) get(name);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNjY5OQ==", "url": "https://github.com/apache/kafka/pull/9566#discussion_r523336699", "bodyText": "Isn't it better to keep UUID in javadoc when we're referring to the concept?", "author": "ijuma", "createdAt": "2020-11-14T01:48:40Z", "path": "clients/src/main/java/org/apache/kafka/common/Uuid.java", "diffHunk": "@@ -20,101 +20,100 @@\n import java.util.Base64;\n \n /**\n- * This class defines an immutable universally unique identifier (UUID). It represents a 128-bit value.\n- * More specifically, the random UUIDs generated by this class are variant 2 (Leach-Salz) version 4 UUIDs.\n- * This is the same type of UUID as the ones generated by java.util.UUID except that the toString() method prints\n+ * This class defines an immutable universally unique identifier (Uuid). It represents a 128-bit value.\n+ * More specifically, the random Uuids generated by this class are variant 2 (Leach-Salz) version 4 Uuids.\n+ * This is the same type of Uuid as the ones generated by java.util.UUID. The toString() method prints\n  * using the base64 string encoding. Likewise, the fromString method expects a base64 string encoding.\n  */\n-public class UUID {\n+public class Uuid {\n \n     private static final java.util.UUID SENTINEL_ID_INTERNAL = new java.util.UUID(0L, 1L);\n \n     /**\n-     * A UUID that represents a null or empty UUID. Will never be returned by the randomUUID method\n+     * A Uuid that represents a null or empty Uuid. Will never be returned by the randomUuid method.\n      */\n-    public static final UUID ZERO_UUID = new UUID(new java.util.UUID(0L, 0L));\n+    public static final Uuid ZERO_UUID = new Uuid(0L, 0L);\n     private static final java.util.UUID ZERO_ID_INTERNAL = new java.util.UUID(0L, 0L);\n \n-    private final java.util.UUID uuid;\n+    private final long mostSignificantBits;\n+    private final long leastSignificantBits;\n \n     /**\n-     * Constructs a 128-bit type 4 UUID where the first long represents the the most significant 64 bits\n+     * Constructs a 128-bit type 4 Uuid where the first long represents the the most significant 64 bits\n      * and the second long represents the least significant 64 bits.\n      */\n-    public UUID(long mostSigBits, long leastSigBits) {\n-        this.uuid = new java.util.UUID(mostSigBits, leastSigBits);\n-    }\n-\n-    private UUID(java.util.UUID uuid) {\n-        this.uuid = uuid;\n+    public Uuid(long mostSigBits, long leastSigBits) {\n+        this.mostSignificantBits = mostSigBits;\n+        this.leastSignificantBits = leastSigBits;\n     }\n \n     /**\n-     * Static factory to retrieve a type 4 (pseudo randomly generated) UUID.\n+     * Static factory to retrieve a type 4 (pseudo randomly generated) Uuid.\n      */\n-    public static UUID randomUUID() {\n+    public static Uuid randomUuid() {\n         java.util.UUID uuid = java.util.UUID.randomUUID();\n         while (uuid.equals(SENTINEL_ID_INTERNAL) || uuid.equals(ZERO_ID_INTERNAL)) {\n             uuid = java.util.UUID.randomUUID();\n         }\n-        return new UUID(uuid);\n+        return new Uuid(uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());\n     }\n \n     /**\n-     * Returns the most significant bits of the UUID's 128 value.\n+     * Returns the most significant bits of the Uuid's 128 value.\n      */\n     public long getMostSignificantBits() {\n-        return uuid.getMostSignificantBits();\n+        return this.mostSignificantBits;\n     }\n \n     /**\n-     * Returns the least significant bits of the UUID's 128 value.\n+     * Returns the least significant bits of the Uuid's 128 value.\n      */\n     public long getLeastSignificantBits() {\n-        return uuid.getLeastSignificantBits();\n+        return this.leastSignificantBits;\n     }\n \n     /**\n-     * Returns true iff obj is another UUID represented by the same two long values.\n+     * Returns true iff obj is another Uuid represented by the same two long values.\n      */\n     @Override\n     public boolean equals(Object obj) {\n         if ((null == obj) || (obj.getClass() != this.getClass()))\n             return false;\n-        UUID id = (UUID) obj;\n-        return this.getMostSignificantBits() == id.getMostSignificantBits() &&\n-                this.getLeastSignificantBits() == id.getLeastSignificantBits();\n+        Uuid id = (Uuid) obj;\n+        return this.mostSignificantBits == id.mostSignificantBits &&\n+                this.leastSignificantBits == id.leastSignificantBits;\n     }\n \n     /**\n-     * Returns a hash code for this UUID\n+     * Returns a hash code for this Uuid\n      */\n     @Override\n     public int hashCode() {\n-        return uuid.hashCode();\n+        long xor = mostSignificantBits ^ leastSignificantBits;\n+        return (int) (xor >> 32) ^ (int) xor;\n     }\n \n     /**\n-     * Returns a base64 string encoding of the UUID.\n+     * Returns a base64 string encoding of the Uuid.\n      */\n     @Override\n     public String toString() {\n-        return Base64.getUrlEncoder().withoutPadding().encodeToString(getBytesFromUuid(uuid));\n+        return Base64.getUrlEncoder().withoutPadding().encodeToString(getBytesFromUuid());\n     }\n \n     /**\n-     * Creates a UUID based on a base64 string encoding used in the toString() method.\n+     * Creates a Uuid based on a base64 string encoding used in the toString() method.", "originalCommit": "cbca0c17dc5e49918396dadb2797cdc7b4ceed3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a57ebc29297e84f0158160b5c2c857ab2ca474d7", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/Uuid.java b/clients/src/main/java/org/apache/kafka/common/Uuid.java\nindex 13f6e27dd7..65f56a24ab 100644\n--- a/clients/src/main/java/org/apache/kafka/common/Uuid.java\n+++ b/clients/src/main/java/org/apache/kafka/common/Uuid.java\n\n@@ -20,9 +20,9 @@ import java.nio.ByteBuffer;\n import java.util.Base64;\n \n /**\n- * This class defines an immutable universally unique identifier (Uuid). It represents a 128-bit value.\n- * More specifically, the random Uuids generated by this class are variant 2 (Leach-Salz) version 4 Uuids.\n- * This is the same type of Uuid as the ones generated by java.util.UUID. The toString() method prints\n+ * This class defines an immutable universally unique identifier (UUID). It represents a 128-bit value.\n+ * More specifically, the random UUIDs generated by this class are variant 2 (Leach-Salz) version 4 UUIDs.\n+ * This is the same type of UUID as the ones generated by java.util.UUID. The toString() method prints\n  * using the base64 string encoding. Likewise, the fromString method expects a base64 string encoding.\n  */\n public class Uuid {\n"}}, {"oid": "a57ebc29297e84f0158160b5c2c857ab2ca474d7", "url": "https://github.com/apache/kafka/commit/a57ebc29297e84f0158160b5c2c857ab2ca474d7", "message": "Updated javadocs, changed a few more methods from (get,read,write)UUID to (get,read,write)Uuid", "committedDate": "2020-11-16T16:48:52Z", "type": "commit"}, {"oid": "792434a5532c4b7a474975787c6027df8b28ac1b", "url": "https://github.com/apache/kafka/commit/792434a5532c4b7a474975787c6027df8b28ac1b", "message": "Merge branch 'trunk' into KAFKA-10618", "committedDate": "2020-11-16T16:53:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcyMjMwMg==", "url": "https://github.com/apache/kafka/pull/9566#discussion_r524722302", "bodyText": "Can we add a test that verifies that the hashCode is the same for our Uuid and Java's UUID? Or do we have that already?", "author": "ijuma", "createdAt": "2020-11-16T23:08:32Z", "path": "clients/src/test/java/org/apache/kafka/common/UuidTest.java", "diffHunk": "@@ -21,50 +21,50 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n \n-public class UUIDTest {\n+public class UuidTest {\n \n     @Test\n     public void testSignificantBits() {\n-        UUID id = new UUID(34L, 98L);\n+        Uuid id = new Uuid(34L, 98L);\n \n         assertEquals(id.getMostSignificantBits(), 34L);\n         assertEquals(id.getLeastSignificantBits(), 98L);\n     }\n \n     @Test\n-    public void testUUIDEquality() {\n-        UUID id1 = new UUID(12L, 13L);\n-        UUID id2 = new UUID(12L, 13L);\n-        UUID id3 = new UUID(24L, 38L);\n+    public void testUuidEquality() {", "originalCommit": "792434a5532c4b7a474975787c6027df8b28ac1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcyNzE1MQ==", "url": "https://github.com/apache/kafka/pull/9566#discussion_r524727151", "bodyText": "We don't have that yet. I also didn't specify this behavior. Should I?", "author": "jolshan", "createdAt": "2020-11-16T23:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcyMjMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczODk2Nw==", "url": "https://github.com/apache/kafka/pull/9566#discussion_r524738967", "bodyText": "We don't have to specify it, but it would be good to ensure we have a test for the actual hashCode we're implementing. At the moment, we are only verifying that the hashCode is the same for two equal UUIDs and different for two unequal UUIDs. One option would be to have a few tests where we verify that the result is what we expect it to be.", "author": "ijuma", "createdAt": "2020-11-16T23:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcyMjMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "23cb2eb02e7a18c24f617678a33441cad64cc5de", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/common/UuidTest.java b/clients/src/test/java/org/apache/kafka/common/UuidTest.java\nindex ed0d65cf1e..99e85bfe68 100644\n--- a/clients/src/test/java/org/apache/kafka/common/UuidTest.java\n+++ b/clients/src/test/java/org/apache/kafka/common/UuidTest.java\n\n@@ -45,6 +45,17 @@ public class UuidTest {\n         assertEquals(id1.hashCode(), id2.hashCode());\n         assertNotEquals(id1.hashCode(), id3.hashCode());\n     }\n+    \n+    @Test\n+    public void testHashCode() {\n+        Uuid id1 = new Uuid(16L, 7L);\n+        Uuid id2 = new Uuid(1043L, 20075L);\n+        Uuid id3 = new Uuid(104312423523523L, 200732425676585L);\n+        \n+        assertEquals(23, id1.hashCode());\n+        assertEquals(19064, id2.hashCode());\n+        assertEquals(-2011255899, id3.hashCode());\n+    }\n \n     @Test\n     public void testStringConversion() {\n"}}, {"oid": "23cb2eb02e7a18c24f617678a33441cad64cc5de", "url": "https://github.com/apache/kafka/commit/23cb2eb02e7a18c24f617678a33441cad64cc5de", "message": "Added tests for hashCode", "committedDate": "2020-11-17T00:55:13Z", "type": "commit"}, {"oid": "19dc50dd3208abf424c6fc8645c73c2e5597f8ab", "url": "https://github.com/apache/kafka/commit/19dc50dd3208abf424c6fc8645c73c2e5597f8ab", "message": "Merge branch 'KAFKA-10618' of github.com:jolshan/kafka into KAFKA-10618", "committedDate": "2020-11-17T00:58:21Z", "type": "commit"}]}