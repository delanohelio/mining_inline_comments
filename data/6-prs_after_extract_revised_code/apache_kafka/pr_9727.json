{"pr_number": 9727, "pr_title": "[KAFKA-10417] Update Cogrouped processor to work with suppress() and joins", "pr_createdAt": "2020-12-10T16:20:38Z", "pr_url": "https://github.com/apache/kafka/pull/9727", "timeline": [{"oid": "45148a92067eaec24e43958f711fbfe77b35568d", "url": "https://github.com/apache/kafka/commit/45148a92067eaec24e43958f711fbfe77b35568d", "message": "Initial changes to cogrouped processor", "committedDate": "2020-12-10T16:19:45Z", "type": "commit"}, {"oid": "60e888d9e6b35aeb9f28945142d09091b946a648", "url": "https://github.com/apache/kafka/commit/60e888d9e6b35aeb9f28945142d09091b946a648", "message": "adding view", "committedDate": "2020-12-10T16:19:45Z", "type": "commit"}, {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb", "url": "https://github.com/apache/kafka/commit/1fee1fd79eb5df5d0b63d7619a815351eb5165eb", "message": "adding testing", "committedDate": "2020-12-10T16:19:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxODYxOA==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r540618618", "bodyText": "I believe PassThrough is only used for the cogroup but now I think you can remove it completely.", "author": "wcarlson5", "createdAt": "2020-12-11T01:17:49Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +219,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();", "originalCommit": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNjY1NQ==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r541026655", "bodyText": "It's still used for some of the kstream ksteam internals so I think it's gotta stay for now", "author": "lct45", "createdAt": "2020-12-11T15:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxODYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2NTMyMw==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r541065323", "bodyText": "Ok. then LGTM", "author": "wcarlson5", "createdAt": "2020-12-11T16:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxODYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "ae1fc836bdc1aa26a8d11f6477ff1299fbc56822", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\nindex 895cafa04e..c7585263a7 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\n\n@@ -213,13 +230,14 @@ class CogroupedStreamAggregateBuilder<K, VOut> {\n                                            final NamedInternal named,\n                                            final Serde<KR> keySerde,\n                                            final Serde<VOut> valueSerde,\n-                                           final String queryableName) {\n+                                           final String queryableName,\n+                                           final String storeName) {\n \n         final String mergeProcessorName = named.suffixWithOrElseGet(\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, queryableName);\n+        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, storeName);\n         final ProcessorParameters<K, VOut, ?, ?> processorParameters = new ProcessorParameters(passThrough, mergeProcessorName);\n         final ProcessorGraphNode<K, VOut> mergeNode =\n             new ProcessorGraphNode<>(mergeProcessorName, processorParameters);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxOTE5OA==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r540619198", "bodyText": "I think these lines are too long. The ones in the other methods too", "author": "wcarlson5", "createdAt": "2020-12-11T01:19:08Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -115,24 +124,28 @@\n                                 final Merger<? super K, VOut> sessionMerger) {\n         processRepartitions(groupPatterns, storeBuilder);\n         final Collection<GraphNode> processors = new ArrayList<>();\n+        final Collection<KStreamAggProcessorSupplier> parentProcessors = new ArrayList<>();\n         boolean stateCreated = false;\n         int counter = 0;\n         for (final Entry<KGroupedStreamImpl<K, ?>, Aggregator<? super K, Object, VOut>> kGroupedStream : groupPatterns.entrySet()) {\n+            final KStreamAggProcessorSupplier<K, K, ?, ?> parentProcessor = (KStreamAggProcessorSupplier<K, K, ?, ?>) new KStreamSessionWindowAggregate<K, K, VOut>(sessionWindows, storeBuilder.name(), initializer, kGroupedStream.getValue(), sessionMerger);", "originalCommit": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\nindex 895cafa04e..7d514faa42 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\n\n@@ -128,7 +134,13 @@ class CogroupedStreamAggregateBuilder<K, VOut> {\n         boolean stateCreated = false;\n         int counter = 0;\n         for (final Entry<KGroupedStreamImpl<K, ?>, Aggregator<? super K, Object, VOut>> kGroupedStream : groupPatterns.entrySet()) {\n-            final KStreamAggProcessorSupplier<K, K, ?, ?> parentProcessor = (KStreamAggProcessorSupplier<K, K, ?, ?>) new KStreamSessionWindowAggregate<K, K, VOut>(sessionWindows, storeBuilder.name(), initializer, kGroupedStream.getValue(), sessionMerger);\n+            final KStreamAggProcessorSupplier<K, K, ?, ?> parentProcessor =\n+                (KStreamAggProcessorSupplier<K, K, ?, ?>) new KStreamSessionWindowAggregate<K, K, VOut>(\n+                    sessionWindows,\n+                    storeBuilder.name(),\n+                    initializer,\n+                    kGroupedStream.getValue(),\n+                    sessionMerger);\n             parentProcessors.add(parentProcessor);\n             final StatefulProcessorNode<K, ?> statefulProcessorNode = getStatefulProcessorNode(\n                 named.suffixWithOrElseGet(\n"}}, {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "url": "https://github.com/apache/kafka/commit/dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "message": "Walker's comments", "committedDate": "2020-12-11T15:29:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcyNzg2NQ==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542727865", "bodyText": "It looks like the parameter is ignored. Is that correct? If so, it might be nice to add an explanatory comment.", "author": "vvcephei", "createdAt": "2020-12-14T20:11:02Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.state.TimestampedKeyValueStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+\n+import java.util.Collection;\n+\n+public class KTablePassThrough<K, V> implements KTableProcessorSupplier<K, V, V> {\n+    private final Collection<KStreamAggProcessorSupplier> parents;\n+    private final String storeName;\n+\n+\n+    KTablePassThrough(final Collection<KStreamAggProcessorSupplier> parents, final String storeName) {\n+        this.parents = parents;\n+        this.storeName = storeName;\n+    }\n+\n+    @Override\n+    public Processor<K, Change<V>> get() {\n+        return new KTablePassThroughProcessor();\n+    }\n+\n+    @Override\n+    public boolean enableSendingOldValues(final boolean forceMaterialization) {", "originalCommit": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ffa819ce6a24fb9b7dda0ec8bb176df983b50b7", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java\nindex cdf602e332..a3e1eca17c 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java\n\n@@ -41,6 +41,7 @@ public class KTablePassThrough<K, V> implements KTableProcessorSupplier<K, V, V>\n \n     @Override\n     public boolean enableSendingOldValues(final boolean forceMaterialization) {\n+        // We require sending old values for joins and suppression, will always be materialized\n         for (final KStreamAggProcessorSupplier parent : parents) {\n             parent.enableSendingOldValues();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMTY2Mg==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542731662", "bodyText": "I noticed that queryableName is a different parameter than the one we actually build the parent processors with (storeBuilder.name()). It wouldn't surprise me if there's a subtle difference between them.", "author": "vvcephei", "createdAt": "2020-12-14T20:14:18Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +236,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();\n+        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, queryableName);", "originalCommit": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMjI3Mw==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543432273", "bodyText": "Looks like they're the same when cogroup is materialized, but if it's not the storeBuilder.name() is auto generated and queryableName is null. With that said, it seems sto me that it would be better to pass storeBuilder.name() to the passThrough, to be safe. WDYT?", "author": "lct45", "createdAt": "2020-12-15T15:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MTYwMg==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543441602", "bodyText": "Yes, that sounds like the right thing to do. Thanks!", "author": "vvcephei", "createdAt": "2020-12-15T15:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMTY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ae1fc836bdc1aa26a8d11f6477ff1299fbc56822", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\nindex 7d514faa42..c7585263a7 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java\n\n@@ -230,13 +230,14 @@ class CogroupedStreamAggregateBuilder<K, VOut> {\n                                            final NamedInternal named,\n                                            final Serde<KR> keySerde,\n                                            final Serde<VOut> valueSerde,\n-                                           final String queryableName) {\n+                                           final String queryableName,\n+                                           final String storeName) {\n \n         final String mergeProcessorName = named.suffixWithOrElseGet(\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, queryableName);\n+        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, storeName);\n         final ProcessorParameters<K, VOut, ?, ?> processorParameters = new ProcessorParameters(passThrough, mergeProcessorName);\n         final ProcessorGraphNode<K, VOut> mergeNode =\n             new ProcessorGraphNode<>(mergeProcessorName, processorParameters);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjI2OQ==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542732269", "bodyText": "Just checking: does this fail on trunk?", "author": "vvcephei", "createdAt": "2020-12-14T20:14:51Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/CogroupedKStreamImplTest.java", "diffHunk": "@@ -1202,6 +1204,46 @@ public void testCogroupWithThreeGroupedStreams() {\n         }\n     }\n \n+    @Test\n+    public void testCogroupWithKTableKTableInnerJoin() {", "originalCommit": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg2MDEyNQ==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542860125", "bodyText": "It does", "author": "lct45", "createdAt": "2020-12-14T22:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MjgxOQ==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543442819", "bodyText": "Thank you!", "author": "vvcephei", "createdAt": "2020-12-15T15:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjI2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjcxMQ==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542732711", "bodyText": "And this one too?", "author": "vvcephei", "createdAt": "2020-12-14T20:15:19Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SuppressScenarioTest.java", "diffHunk": "@@ -803,6 +808,18 @@ public void shouldWorkBeforeJoinLeft() {\n \n     }\n \n+    @Test\n+    public void shouldWorkWithCogrouped() {", "originalCommit": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg2MDIwMg==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542860202", "bodyText": "Also fails (:", "author": "lct45", "createdAt": "2020-12-14T22:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0Mjg5OQ==", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543442899", "bodyText": "Thank you!", "author": "vvcephei", "createdAt": "2020-12-15T15:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjcxMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8ffa819ce6a24fb9b7dda0ec8bb176df983b50b7", "url": "https://github.com/apache/kafka/commit/8ffa819ce6a24fb9b7dda0ec8bb176df983b50b7", "message": "Added comment", "committedDate": "2020-12-15T15:14:34Z", "type": "commit"}, {"oid": "ae1fc836bdc1aa26a8d11f6477ff1299fbc56822", "url": "https://github.com/apache/kafka/commit/ae1fc836bdc1aa26a8d11f6477ff1299fbc56822", "message": "John's comments", "committedDate": "2020-12-15T16:44:54Z", "type": "commit"}]}