{"pr_number": 7901, "pr_title": "KAFKA-9375 Add thread names to kafka connect", "pr_createdAt": "2020-01-07T10:16:35Z", "pr_url": "https://github.com/apache/kafka/pull/7901", "timeline": [{"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "url": "https://github.com/apache/kafka/commit/afd9beb05ed5f818da5e50c3aad380c5343786ac", "message": "KAFKA-9375 Add thread names to kafka connect", "committedDate": "2020-01-13T08:39:22Z", "type": "commit"}, {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "url": "https://github.com/apache/kafka/commit/afd9beb05ed5f818da5e50c3aad380c5343786ac", "message": "KAFKA-9375 Add thread names to kafka connect", "committedDate": "2020-01-13T08:39:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MzIwMQ==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371343201", "bodyText": "In all assert method, the first argument is the \"expected\" value while the second one is the \"actual\" value. Can you swap them in this file to match that definition?", "author": "mimaison", "createdAt": "2020-01-27T16:26:53Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+public class ThreadUtilsTest {\n+\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n+        @Override\n+        public void run() {\n+        }\n+    };\n+    private static final String THREAD_NAME = \"ThreadName\";\n+    private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n+\n+\n+    @Test\n+    public void testThreadNameWithoutNumberNoDemon() {\n+        Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false).", "originalCommit": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1NTQxNg==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r372955416", "bodyText": "acked", "author": "cryptoe", "createdAt": "2020-01-30T13:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MzIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java b/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\nindex 2001a5cc1b..c49447c17d 100644\n--- a/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\n+++ b/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\n\n@@ -16,17 +16,16 @@\n  */\n package org.apache.kafka.common.utils;\n \n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.concurrent.ThreadFactory;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n public class ThreadUtilsTest {\n \n-    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n-        @Override\n-        public void run() {\n-        }\n+    private static final Runnable EMPTY_RUNNABLE = () -> {\n     };\n     private static final String THREAD_NAME = \"ThreadName\";\n     private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MzYzNw==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371343637", "bodyText": "Maybe we don't need to print the stack trace if we can ignore it", "author": "mimaison", "createdAt": "2020-01-27T16:27:34Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+public class ThreadUtilsTest {\n+\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n+        @Override\n+        public void run() {\n+        }\n+    };\n+    private static final String THREAD_NAME = \"ThreadName\";\n+    private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n+\n+\n+    @Test\n+    public void testThreadNameWithoutNumberNoDemon() {\n+        Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false).\n+                newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME);\n+    }\n+\n+    @Test\n+    public void testThreadNameWithoutNumberDemon() {\n+        Thread daemonThread = ThreadUtils.createThreadFactory(THREAD_NAME, true).newThread(EMPTY_RUNNABLE);\n+        try {\n+            Assert.assertEquals(daemonThread.getName(), THREAD_NAME);\n+            Assert.assertTrue(daemonThread.isDaemon());\n+        } finally {\n+            try {\n+                daemonThread.join();\n+            } catch (InterruptedException e) {\n+                // can be ignored\n+                e.printStackTrace();", "originalCommit": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1NTI0OQ==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r372955249", "bodyText": "Sure. Will do that", "author": "cryptoe", "createdAt": "2020-01-30T13:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MzYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java b/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\nindex 2001a5cc1b..c49447c17d 100644\n--- a/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\n+++ b/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\n\n@@ -16,17 +16,16 @@\n  */\n package org.apache.kafka.common.utils;\n \n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.concurrent.ThreadFactory;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n public class ThreadUtilsTest {\n \n-    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n-        @Override\n-        public void run() {\n-        }\n+    private static final Runnable EMPTY_RUNNABLE = () -> {\n     };\n     private static final String THREAD_NAME = \"ThreadName\";\n     private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NDEyMg==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371344122", "bodyText": "Do we need daemonThread2 in this test?", "author": "mimaison", "createdAt": "2020-01-27T16:28:20Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+public class ThreadUtilsTest {\n+\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n+        @Override\n+        public void run() {\n+        }\n+    };\n+    private static final String THREAD_NAME = \"ThreadName\";\n+    private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n+\n+\n+    @Test\n+    public void testThreadNameWithoutNumberNoDemon() {\n+        Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false).\n+                newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME);\n+    }\n+\n+    @Test\n+    public void testThreadNameWithoutNumberDemon() {\n+        Thread daemonThread = ThreadUtils.createThreadFactory(THREAD_NAME, true).newThread(EMPTY_RUNNABLE);\n+        try {\n+            Assert.assertEquals(daemonThread.getName(), THREAD_NAME);\n+            Assert.assertTrue(daemonThread.isDaemon());\n+        } finally {\n+            try {\n+                daemonThread.join();\n+            } catch (InterruptedException e) {\n+                // can be ignored\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testThreadNameWithNumberNoDemon() {\n+        ThreadFactory localThreadFactory = ThreadUtils.createThreadFactory(THREAD_NAME_WITH_NUMBER, false);\n+        Assert.assertEquals(localThreadFactory.newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME + \"1\");\n+        Assert.assertEquals(localThreadFactory.newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME + \"2\");\n+    }\n+\n+    @Test\n+    public void testThreadNameWithNumberDemon() {\n+        ThreadFactory localThreadFactory = ThreadUtils.createThreadFactory(THREAD_NAME_WITH_NUMBER, true);\n+        Thread daemonThread1 = localThreadFactory.newThread(EMPTY_RUNNABLE);\n+        Thread daemonThread2 = localThreadFactory.newThread(EMPTY_RUNNABLE);", "originalCommit": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1ODYzMA==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r372958630", "bodyText": "I wanted to check if 2 daemonThreads are appropriately numbered.", "author": "cryptoe", "createdAt": "2020-01-30T13:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NDEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java b/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\nindex 2001a5cc1b..c49447c17d 100644\n--- a/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\n+++ b/clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java\n\n@@ -16,17 +16,16 @@\n  */\n package org.apache.kafka.common.utils;\n \n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.concurrent.ThreadFactory;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n public class ThreadUtilsTest {\n \n-    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n-        @Override\n-        public void run() {\n-        }\n+    private static final Runnable EMPTY_RUNNABLE = () -> {\n     };\n     private static final String THREAD_NAME = \"ThreadName\";\n     private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0ODQ0MA==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371348440", "bodyText": "Can we import static like assertEquals?", "author": "mimaison", "createdAt": "2020-01-27T16:35:32Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java", "diffHunk": "@@ -20,6 +20,7 @@\n import org.apache.kafka.connect.util.Callback;\n import org.easymock.EasyMock;\n import org.junit.After;\n+import org.junit.Assert;", "originalCommit": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2MDY3OQ==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r372960679", "bodyText": "Done", "author": "cryptoe", "createdAt": "2020-01-30T13:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0ODQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "chunk": "diff --git a/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java b/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java\nindex cc0ccc2120..aac7cb0c3b 100644\n--- a/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java\n+++ b/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java\n\n@@ -20,7 +20,6 @@ import org.apache.kafka.connect.runtime.standalone.StandaloneConfig;\n import org.apache.kafka.connect.util.Callback;\n import org.easymock.EasyMock;\n import org.junit.After;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n import org.powermock.api.easymock.PowerMock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0OTY4NA==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371349684", "bodyText": "I believe you can use the Java 8 syntax: Runnable runnable = () -> {};. This also appears in another file", "author": "mimaison", "createdAt": "2020-01-27T16:37:35Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java", "diffHunk": "@@ -41,6 +43,11 @@\n     File tempFile;\n \n     private static Map<ByteBuffer, ByteBuffer> firstSet = new HashMap<>();\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {", "originalCommit": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1NzY0Ng==", "url": "https://github.com/apache/kafka/pull/7901#discussion_r372957646", "bodyText": "Will do that", "author": "cryptoe", "createdAt": "2020-01-30T13:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0OTY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "chunk": "diff --git a/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java b/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java\nindex cc0ccc2120..aac7cb0c3b 100644\n--- a/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java\n+++ b/connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java\n\n@@ -43,10 +43,7 @@ public class FileOffsetBackingStoreTest {\n     File tempFile;\n \n     private static Map<ByteBuffer, ByteBuffer> firstSet = new HashMap<>();\n-    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n-        @Override\n-        public void run() {\n-        }\n+    private static final Runnable EMPTY_RUNNABLE = () -> {\n     };\n \n     static {\n"}}, {"oid": "54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "url": "https://github.com/apache/kafka/commit/54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "message": "KAFKA-9375: review comments", "committedDate": "2020-01-30T14:09:44Z", "type": "commit"}, {"oid": "87a3815d121bed3bc85168fc9619d2f5acf1621e", "url": "https://github.com/apache/kafka/commit/87a3815d121bed3bc85168fc9619d2f5acf1621e", "message": "Merge branch 'trunk' of github.com:apache/kafka into apache/trunk2", "committedDate": "2020-01-30T14:10:24Z", "type": "commit"}]}