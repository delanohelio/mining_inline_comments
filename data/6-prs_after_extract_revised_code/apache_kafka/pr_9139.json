{"pr_number": 9139, "pr_title": "KAFKA-9929: Support backward iterator on SessionStore", "pr_createdAt": "2020-08-07T16:24:09Z", "pr_url": "https://github.com/apache/kafka/pull/9139", "timeline": [{"oid": "9d4327cbadb408c8134e5ac09592d41719f772e5", "url": "https://github.com/apache/kafka/commit/9d4327cbadb408c8134e5ac09592d41719f772e5", "message": "key/value reverse operation", "committedDate": "2020-10-07T08:21:08Z", "type": "commit"}, {"oid": "6761c71e41040883634c8b664cdac9b3250a778c", "url": "https://github.com/apache/kafka/commit/6761c71e41040883634c8b664cdac9b3250a778c", "message": "window backward operations", "committedDate": "2020-10-07T08:21:08Z", "type": "commit"}, {"oid": "000c7b79009d24f61a97e562d8cdf5fb2bbef637", "url": "https://github.com/apache/kafka/commit/000c7b79009d24f61a97e562d8cdf5fb2bbef637", "message": "session backward operations", "committedDate": "2020-10-07T08:21:09Z", "type": "commit"}, {"oid": "1811b577b027506d6249e1d71690bc82107ef2bf", "url": "https://github.com/apache/kafka/commit/1811b577b027506d6249e1d71690bc82107ef2bf", "message": "improve time range comments", "committedDate": "2020-10-07T08:21:09Z", "type": "commit"}, {"oid": "8c26756dac79c2e5f1574c8057aeef3e163c71ea", "url": "https://github.com/apache/kafka/commit/8c26756dac79c2e5f1574c8057aeef3e163c71ea", "message": "fix bytes range validator not needed", "committedDate": "2020-10-07T08:21:09Z", "type": "commit"}, {"oid": "e0d160bc3ebf65a02fd995ea59e191a8db90b171", "url": "https://github.com/apache/kafka/commit/e0d160bc3ebf65a02fd995ea59e191a8db90b171", "message": "fix cache iterator", "committedDate": "2020-10-07T08:21:09Z", "type": "commit"}, {"oid": "ae7e3edcc426a98d61572686c4f884085f49e80c", "url": "https://github.com/apache/kafka/commit/ae7e3edcc426a98d61572686c4f884085f49e80c", "message": "fix session store to support backward queries", "committedDate": "2020-10-07T08:21:10Z", "type": "commit"}, {"oid": "64a95c01658f1281e6e7b8986b9678dcbf456ffc", "url": "https://github.com/apache/kafka/commit/64a95c01658f1281e6e7b8986b9678dcbf456ffc", "message": "improve format based on feedback", "committedDate": "2020-10-07T08:21:10Z", "type": "commit"}, {"oid": "a875cf1237a75eed6ccf3e00321768623aa8af11", "url": "https://github.com/apache/kafka/commit/a875cf1237a75eed6ccf3e00321768623aa8af11", "message": "test caching store across segments", "committedDate": "2020-10-07T08:21:10Z", "type": "commit"}, {"oid": "a875cf1237a75eed6ccf3e00321768623aa8af11", "url": "https://github.com/apache/kafka/commit/a875cf1237a75eed6ccf3e00321768623aa8af11", "message": "test caching store across segments", "committedDate": "2020-10-07T08:21:10Z", "type": "forcePushed"}, {"oid": "76bb9a27fd7a5e58bcfb74c8eca70c295f573d20", "url": "https://github.com/apache/kafka/commit/76bb9a27fd7a5e58bcfb74c8eca70c295f573d20", "message": "improve testing names and scenarios", "committedDate": "2020-10-07T09:40:10Z", "type": "commit"}, {"oid": "e49f258ad78bb75f23481f030d5e7be1db12ce00", "url": "https://github.com/apache/kafka/commit/e49f258ad78bb75f23481f030d5e7be1db12ce00", "message": "expand caching store tests per backing store", "committedDate": "2020-10-07T22:00:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNzcyMg==", "url": "https://github.com/apache/kafka/pull/9139#discussion_r501107722", "bodyText": "It won't matter to users whether this method was moved from another interface or not. They just need to know why they're getting the exception. I.e., we just need to tell them that the store implementation they selected didn't implement the method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new UnsupportedOperationException(\"Moved from SessionStore\");\n          \n          \n            \n                    throw new UnsupportedOperationException(\"This API is not supported by this implementation of ReadOnlySessionStore.\");\n          \n      \n    \n    \n  \n\nWe should say the exact same thing in all default implementations. Right now, they're a bit inconsistent.", "author": "vvcephei", "createdAt": "2020-10-07T15:30:42Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/ReadOnlySessionStore.java", "diffHunk": "@@ -24,35 +24,156 @@\n  * Implementations should be thread-safe as concurrent reads and writes\n  * are expected.\n  *\n- * @param <K> the key type\n+ * @param <K>   the key type\n  * @param <AGG> the aggregated value type\n  */\n public interface ReadOnlySessionStore<K, AGG> {\n+\n     /**\n-     * Retrieve all aggregated sessions for the provided key.\n+     * Fetch any sessions with the matching key and the sessions end is &ge; earliestSessionEndTime and the sessions\n+     * start is &le; latestSessionStartTime iterating from earliest to latest.\n+     * <p>\n      * This iterator must be closed after use.\n      *\n+     * @param key                    the key to return sessions for\n+     * @param earliestSessionEndTime the end timestamp of the earliest session to search for, where iteration starts.\n+     * @param latestSessionStartTime the end timestamp of the latest session to search for, where iteration ends.\n+     * @return iterator of sessions with the matching key and aggregated values, from earliest to latest session time.\n+     * @throws NullPointerException If null is used for key.\n+     */\n+    default KeyValueIterator<Windowed<K>, AGG> findSessions(final K key,\n+                                                            final long earliestSessionEndTime,\n+                                                            final long latestSessionStartTime) {\n+        throw new UnsupportedOperationException(\"Moved from SessionStore\");", "originalCommit": "76bb9a27fd7a5e58bcfb74c8eca70c295f573d20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8562422783d83ad5d334155d1bcc6c56cea47d2", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/state/ReadOnlySessionStore.java b/streams/src/main/java/org/apache/kafka/streams/state/ReadOnlySessionStore.java\nindex 5f7654ca20..8874908d18 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/state/ReadOnlySessionStore.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/state/ReadOnlySessionStore.java\n\n@@ -24,7 +24,7 @@ import org.apache.kafka.streams.kstream.Windowed;\n  * Implementations should be thread-safe as concurrent reads and writes\n  * are expected.\n  *\n- * @param <K>   the key type\n+ * @param <K> the key type\n  * @param <AGG> the aggregated value type\n  */\n public interface ReadOnlySessionStore<K, AGG> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwOTY2Ng==", "url": "https://github.com/apache/kafka/pull/9139#discussion_r501109666", "bodyText": "There are a lot of unnecessary whitespace changes in this PR. You don't need to back them all out right now, but in the future, please clean up the diff before submitting a PR. These extra changes make it harder to review.", "author": "vvcephei", "createdAt": "2020-10-07T15:33:29Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/CachingSessionStore.java", "diffHunk": "@@ -150,22 +149,44 @@ public void remove(final Windowed<Bytes> sessionKey) {\n         validateStoreOpen();\n \n         final PeekingKeyValueIterator<Bytes, LRUCacheEntry> cacheIterator = wrapped().persistent() ?\n-            new CacheIteratorWrapper(key, earliestSessionEndTime, latestSessionStartTime) :\n+            new CacheIteratorWrapper(key, earliestSessionEndTime, latestSessionStartTime, true) :\n             context.cache().range(cacheName,\n-                        cacheFunction.cacheKey(keySchema.lowerRangeFixedSize(key, earliestSessionEndTime)),\n-                        cacheFunction.cacheKey(keySchema.upperRangeFixedSize(key, latestSessionStartTime))\n+                cacheFunction.cacheKey(keySchema.lowerRangeFixedSize(key, earliestSessionEndTime)),\n+                cacheFunction.cacheKey(keySchema.upperRangeFixedSize(key, latestSessionStartTime))", "originalCommit": "76bb9a27fd7a5e58bcfb74c8eca70c295f573d20", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8562422783d83ad5d334155d1bcc6c56cea47d2", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingSessionStore.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingSessionStore.java\nindex 31589aa03f..64230fb46d 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingSessionStore.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingSessionStore.java\n\n@@ -151,14 +151,17 @@ class CachingSessionStore\n         final PeekingKeyValueIterator<Bytes, LRUCacheEntry> cacheIterator = wrapped().persistent() ?\n             new CacheIteratorWrapper(key, earliestSessionEndTime, latestSessionStartTime, true) :\n             context.cache().range(cacheName,\n-                cacheFunction.cacheKey(keySchema.lowerRangeFixedSize(key, earliestSessionEndTime)),\n-                cacheFunction.cacheKey(keySchema.upperRangeFixedSize(key, latestSessionStartTime))\n+                        cacheFunction.cacheKey(keySchema.lowerRangeFixedSize(key, earliestSessionEndTime)),\n+                        cacheFunction.cacheKey(keySchema.upperRangeFixedSize(key, latestSessionStartTime))\n             );\n \n-        final KeyValueIterator<Windowed<Bytes>, byte[]> storeIterator =\n-            wrapped().findSessions(key, earliestSessionEndTime, latestSessionStartTime);\n-        final HasNextCondition hasNextCondition =\n-            keySchema.hasNextCondition(key, key, earliestSessionEndTime, latestSessionStartTime);\n+        final KeyValueIterator<Windowed<Bytes>, byte[]> storeIterator = wrapped().findSessions(key,\n+                                                                                               earliestSessionEndTime,\n+                                                                                               latestSessionStartTime);\n+        final HasNextCondition hasNextCondition = keySchema.hasNextCondition(key,\n+                                                                             key,\n+                                                                             earliestSessionEndTime,\n+                                                                             latestSessionStartTime);\n         final PeekingKeyValueIterator<Bytes, LRUCacheEntry> filteredCacheIterator =\n             new FilteredCacheIterator(cacheIterator, hasNextCondition, cacheFunction);\n         return new MergedSortedCacheSessionStoreIterator(filteredCacheIterator, storeIterator, cacheFunction, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MTQ1Nw==", "url": "https://github.com/apache/kafka/pull/9139#discussion_r501351457", "bodyText": "The code style discourages inline conditionals. It's more maintainable to always use blocks.", "author": "vvcephei", "createdAt": "2020-10-07T22:43:26Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java", "diffHunk": "@@ -382,9 +479,23 @@ private boolean setInnerIterators() {\n                 currentKey = nextKeyEntry.getKey();\n \n                 if (latestSessionStartTime == Long.MAX_VALUE) {\n-                    recordIterator = nextKeyEntry.getValue().entrySet().iterator();\n+                    final Set<Entry<Long, byte[]>> entries;\n+                    if (forward) entries = nextKeyEntry.getValue().descendingMap().entrySet();\n+                    else entries = nextKeyEntry.getValue().entrySet();", "originalCommit": "e49f258ad78bb75f23481f030d5e7be1db12ce00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8562422783d83ad5d334155d1bcc6c56cea47d2", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java\nindex 3aad2d1e04..913432eabf 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/InMemorySessionStore.java\n\n@@ -479,23 +472,22 @@ public class InMemorySessionStore implements SessionStore<Bytes, byte[]> {\n                 currentKey = nextKeyEntry.getKey();\n \n                 if (latestSessionStartTime == Long.MAX_VALUE) {\n-                    final Set<Entry<Long, byte[]>> entries;\n-                    if (forward) entries = nextKeyEntry.getValue().descendingMap().entrySet();\n-                    else entries = nextKeyEntry.getValue().entrySet();\n-                    recordIterator = entries.iterator();\n+                    if (forward) {\n+                        recordIterator = nextKeyEntry.getValue().descendingMap().entrySet().iterator();\n+                    } else {\n+                        recordIterator = nextKeyEntry.getValue().entrySet().iterator();\n+                    }\n                 } else {\n-                    final Set<Entry<Long, byte[]>> entries;\n                     if (forward) {\n-                        entries = nextKeyEntry.getValue()\n-                            .headMap(latestSessionStartTime, true)\n-                            .descendingMap()\n-                            .entrySet();\n+                        recordIterator = nextKeyEntry.getValue()\n+                                                     .headMap(latestSessionStartTime, true)\n+                                                     .descendingMap()\n+                                                     .entrySet().iterator();\n                     } else {\n-                        entries = nextKeyEntry.getValue()\n-                            .headMap(latestSessionStartTime, true)\n-                            .entrySet();\n+                        recordIterator = nextKeyEntry.getValue()\n+                                                     .headMap(latestSessionStartTime, true)\n+                                                     .entrySet().iterator();\n                     }\n-                    recordIterator = entries.iterator();\n                 }\n \n                 if (recordIterator.hasNext()) {\n"}}, {"oid": "b8562422783d83ad5d334155d1bcc6c56cea47d2", "url": "https://github.com/apache/kafka/commit/b8562422783d83ad5d334155d1bcc6c56cea47d2", "message": "fix formatting", "committedDate": "2020-10-08T03:36:49Z", "type": "commit"}, {"oid": "19324130d62a482b001c0e85b8fe51a0160d10fd", "url": "https://github.com/apache/kafka/commit/19324130d62a482b001c0e85b8fe51a0160d10fd", "message": "fix formatting", "committedDate": "2020-10-08T03:41:58Z", "type": "commit"}, {"oid": "70484e4a1ffc29f5effc822d1aea54c24730b603", "url": "https://github.com/apache/kafka/commit/70484e4a1ffc29f5effc822d1aea54c24730b603", "message": "Merge branch 'trunk' into backward-sessionstore", "committedDate": "2020-10-08T04:12:56Z", "type": "commit"}, {"oid": "14fce521346b290407c971e42bd684f55b512785", "url": "https://github.com/apache/kafka/commit/14fce521346b290407c971e42bd684f55b512785", "message": "fix conflict with trunk", "committedDate": "2020-10-08T04:17:59Z", "type": "commit"}]}