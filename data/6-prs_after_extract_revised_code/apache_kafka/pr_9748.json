{"pr_number": 9748, "pr_title": "MINOR: Simplify ApiKeys by relying on ApiMessageType", "pr_createdAt": "2020-12-14T15:42:17Z", "pr_url": "https://github.com/apache/kafka/pull/9748", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2MjMwNg==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542962306", "bodyText": "It is a bit weird that messageType.name and messageType.name() return different string.", "author": "chia7712", "createdAt": "2020-12-15T00:55:24Z", "path": "generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java", "diffHunk": "@@ -169,7 +169,7 @@ private void generateEnumValues() {\n     }\n \n     private void generateInstanceVariables() {\n-        buffer.printf(\"private final String name;%n\");\n+        buffer.printf(\"public final String name;%n\");", "originalCommit": "18eec5b2f609f546a55dd06999b64b1176841322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NzA2NQ==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542987065", "bodyText": "Yeah, that's an existing problem with ApiKeys too. The enum method cannot be overridden. I think it should be tackled separately.", "author": "ijuma", "createdAt": "2020-12-15T02:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2MjMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "dd7e8ea3d303e33b7af4cac3744680f666876024", "chunk": "diff --git a/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java b/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java\nindex 2f137129e1..075ee48555 100644\n--- a/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java\n+++ b/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java\n\n@@ -158,12 +162,14 @@ public final class ApiMessageTypeGenerator implements TypeClassGenerator {\n             ApiData apiData = entry.getValue();\n             String name = apiData.name();\n             numProcessed++;\n-            buffer.printf(\"%s(\\\"%s\\\", (short) %d, %s, %s)%s%n\",\n+            buffer.printf(\"%s(\\\"%s\\\", (short) %d, %s, %s, (short) %d, (short) %d)%s%n\",\n                 MessageGenerator.toSnakeCase(name).toUpperCase(Locale.ROOT),\n                 MessageGenerator.capitalizeFirst(name),\n                 entry.getKey(),\n                 apiData.requestSchema(),\n                 apiData.responseSchema(),\n+                apiData.requestSpec.struct().versions().lowest(),\n+                apiData.requestSpec.struct().versions().highest(),\n                 (numProcessed == apis.size()) ? \";\" : \",\");\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NjM5Nw==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542966397", "bodyText": "Could we fix the comment about \"name\" as it is used to be a part of metrics name (see https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/network/RequestChannel.scala#L239). The origin comment is stale.", "author": "chia7712", "createdAt": "2020-12-15T01:05:47Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java", "diffHunk": "@@ -343,9 +174,15 @@ public Struct parseResponse(short version, ByteBuffer buffer) {\n                 throw new IllegalStateException(\"Response schema for api \" + name + \" for version \" + i + \" is null\");\n         }\n \n+        this.messageType = messageType;\n+        this.id = id;\n+        this.name = name;", "originalCommit": "18eec5b2f609f546a55dd06999b64b1176841322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwNzMzNA==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543407334", "bodyText": "Good catch.", "author": "ijuma", "createdAt": "2020-12-15T14:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NjM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dc67beabe5124ac903bd42d085af08da5d0e2d2c", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\nindex 2f5227717e..cf6e120ea0 100644\n--- a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n+++ b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n\n@@ -156,33 +149,14 @@ public enum ApiKeys {\n         boolean forwardable,\n         boolean isEnabled\n     ) {\n-        short id = messageType.apiKey();\n-        if (id < 0)\n-            throw new IllegalArgumentException(\"id must not be negative, id: \" + id);\n-\n-        Schema[] requestSchemas = messageType.requestSchemas();\n-        Schema[] responseSchemas = messageType.responseSchemas();\n-        String name = messageType.name;\n-        if (requestSchemas.length != responseSchemas.length)\n-            throw new IllegalStateException(requestSchemas.length + \" request versions for api \" + name\n-                    + \" but \" + responseSchemas.length + \" response versions.\");\n-\n-        for (int i = 0; i < requestSchemas.length; ++i) {\n-            if (requestSchemas[i] == null)\n-                throw new IllegalStateException(\"Request schema for api \" + name + \" for version \" + i + \" is null\");\n-            if (responseSchemas[i] == null)\n-                throw new IllegalStateException(\"Response schema for api \" + name + \" for version \" + i + \" is null\");\n-        }\n-\n         this.messageType = messageType;\n-        this.id = id;\n-        this.name = name;\n+        this.id = messageType.apiKey();\n+        this.name = messageType.name;\n         this.clusterAction = clusterAction;\n         this.minRequiredInterBrokerMagic = minRequiredInterBrokerMagic;\n         this.isEnabled = isEnabled;\n \n-\n-        this.requiresDelayedAllocation = forwardable || shouldRetainsBufferReference(requestSchemas);\n+        this.requiresDelayedAllocation = forwardable || shouldRetainsBufferReference(messageType.requestSchemas());\n         this.forwardable = forwardable;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NzAyOQ==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542967029", "bodyText": "this method is never used.", "author": "chia7712", "createdAt": "2020-12-15T01:07:25Z", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -952,40 +904,6 @@ public String toString() {\n         }\n     }\n \n-    private static void compareTypes(Schema schemaA, Schema schemaB) {\n-        compareTypes(new NamedType(\"schemaA\", schemaA),\n-                     new NamedType(\"schemaB\", schemaB));\n-    }\n-\n-    private static void compareTypes(NamedType typeA, NamedType typeB) {\n-        List<NamedType> listA = flatten(typeA);\n-        List<NamedType> listB = flatten(typeB);\n-        if (listA.size() != listB.size()) {\n-            throw new RuntimeException(\"Can't match up structures: typeA has \" +\n-                Utils.join(listA, \", \") + \", but typeB has \" +\n-                Utils.join(listB, \", \"));\n-        }\n-        for (int i = 0; i < listA.size(); i++) {\n-            NamedType entryA = listA.get(i);\n-            NamedType entryB = listB.get(i);\n-            if (!entryA.hasSimilarType(entryB)) {\n-                throw new RuntimeException(\"Type \" + entryA + \" in schema A \" +\n-                    \"does not match type \" + entryB + \" in schema B.\");\n-            }\n-            if (entryA.type.isNullable() != entryB.type.isNullable()) {\n-                throw new RuntimeException(String.format(\n-                    \"Type %s in Schema A is %s, but type %s in \" +\n-                        \"Schema B is %s\",\n-                    entryA, entryA.type.isNullable() ? \"nullable\" : \"non-nullable\",\n-                    entryB, entryB.type.isNullable() ? \"nullable\" : \"non-nullable\"));\n-            }\n-            if (entryA.type.isArray()) {\n-                compareTypes(new NamedType(entryA.name, entryA.type.arrayElementType().get()),\n-                             new NamedType(entryB.name, entryB.type.arrayElementType().get()));\n-            }\n-        }\n-    }\n-\n     /**", "originalCommit": "18eec5b2f609f546a55dd06999b64b1176841322", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69ae2114341290febe3d3360773b2ac25fd923d3", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/common/message/MessageTest.java b/clients/src/test/java/org/apache/kafka/common/message/MessageTest.java\nindex 197a675874..47ffb466bf 100644\n--- a/clients/src/test/java/org/apache/kafka/common/message/MessageTest.java\n+++ b/clients/src/test/java/org/apache/kafka/common/message/MessageTest.java\n\n@@ -904,25 +902,6 @@ public final class MessageTest {\n         }\n     }\n \n-    /**\n-     * We want to remove Schema nodes from the hierarchy before doing\n-     * our comparison.  The reason is because Schema nodes don't change what\n-     * is written to the wire.  Schema(STRING, Schema(INT, SHORT)) is equivalent to\n-     * Schema(STRING, INT, SHORT).  This function translates schema nodes into their\n-     * component types.\n-     */\n-    private static List<NamedType> flatten(NamedType type) {\n-        if (!(type.type instanceof Schema)) {\n-            return singletonList(type);\n-        }\n-        Schema schema = (Schema) type.type;\n-        ArrayList<NamedType> results = new ArrayList<>();\n-        for (BoundField field : schema.fields()) {\n-            results.addAll(flatten(new NamedType(field.def.name, field.def.type)));\n-        }\n-        return results;\n-    }\n-\n     @Test\n     public void testDefaultValues() {\n         verifyWriteRaisesUve((short) 0, \"validateOnly\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA3Mw==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542972073", "bodyText": "It seems to me this check should be moved to ApiMessageTypeGenerator as it is a generated code from json.", "author": "chia7712", "createdAt": "2020-12-15T01:20:41Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java", "diffHunk": "@@ -289,49 +129,40 @@ public Struct parseResponse(short version, ByteBuffer buffer) {\n     /** indicates whether the API is enabled for forwarding **/\n     public final boolean forwardable;\n \n-    public final Schema[] requestSchemas;\n-    public final Schema[] responseSchemas;\n     public final boolean requiresDelayedAllocation;\n \n-    ApiKeys(int id, String name, Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, false, requestSchemas, responseSchemas);\n-    }\n+    public final ApiMessageType messageType;\n \n-    ApiKeys(int id, String name, boolean clusterAction, Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, clusterAction, RecordBatch.MAGIC_VALUE_V0, requestSchemas, responseSchemas);\n+    ApiKeys(ApiMessageType messageType) {\n+        this(messageType, false);\n     }\n \n-    ApiKeys(int id, String name, Schema[] requestSchemas, Schema[] responseSchemas, boolean forwardable) {\n-        this(id, name, false, RecordBatch.MAGIC_VALUE_V0, true, requestSchemas, responseSchemas, forwardable);\n+    ApiKeys(ApiMessageType messageType, boolean clusterAction) {\n+        this(messageType, clusterAction, RecordBatch.MAGIC_VALUE_V0, false);\n     }\n \n-    ApiKeys(int id, String name, boolean clusterAction, boolean isEnabled, Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, clusterAction, RecordBatch.MAGIC_VALUE_V0, isEnabled, requestSchemas, responseSchemas, false);\n+    ApiKeys(ApiMessageType messageType, boolean clusterAction, boolean forwardable) {\n+        this(messageType, clusterAction, RecordBatch.MAGIC_VALUE_V0, forwardable);\n     }\n \n-    ApiKeys(int id, String name, boolean clusterAction, byte minRequiredInterBrokerMagic,\n-            Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, clusterAction, minRequiredInterBrokerMagic, true, requestSchemas, responseSchemas, false);\n+    ApiKeys(ApiMessageType messageType, boolean clusterAction, byte minRequiredInterBrokerMagic, boolean forwardable) {\n+        this(messageType, clusterAction, minRequiredInterBrokerMagic, forwardable, true);\n     }\n \n     ApiKeys(\n-        int id,\n-        String name,\n+        ApiMessageType messageType,\n         boolean clusterAction,\n         byte minRequiredInterBrokerMagic,\n-        boolean isEnabled,\n-        Schema[] requestSchemas,\n-        Schema[] responseSchemas,\n-        boolean forwardable\n+        boolean forwardable,\n+        boolean isEnabled\n     ) {\n+        short id = messageType.apiKey();", "originalCommit": "18eec5b2f609f546a55dd06999b64b1176841322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4ODQ5Nw==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542988497", "bodyText": "We can, but it doesn't seem particularly beneficial. It's important to generate code that is specific to each data class. Generic code is best written without generation.\nWe can move this code to a base class for ApiMessageType potentially, particularly if we decide to remove ApiKeys.", "author": "ijuma", "createdAt": "2020-12-15T02:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk5OTc2Mw==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542999763", "bodyText": "it doesn't seem particularly beneficial\n\nIt seems to me the benefit is the error happens from runtime/test_runtime to build time (generate message code).", "author": "chia7712", "createdAt": "2020-12-15T02:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAxMDMyNA==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543010324", "bodyText": "Oh, I see what you mean. You're suggesting to validate during generation, not to include the validation in the generated code.", "author": "ijuma", "createdAt": "2020-12-15T03:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3MjY4Nw==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543472687", "bodyText": "I took a look at this and not clear how to validate this in the generator. I added unit tests to ApiMessageTypeTest instead and I think that's good enough for now. What do you think?", "author": "ijuma", "createdAt": "2020-12-15T16:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4MzA0MA==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543483040", "bodyText": "That alternative looks good to me :)", "author": "chia7712", "createdAt": "2020-12-15T16:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MjA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "dc67beabe5124ac903bd42d085af08da5d0e2d2c", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\nindex 2f5227717e..cf6e120ea0 100644\n--- a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n+++ b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n\n@@ -156,33 +149,14 @@ public enum ApiKeys {\n         boolean forwardable,\n         boolean isEnabled\n     ) {\n-        short id = messageType.apiKey();\n-        if (id < 0)\n-            throw new IllegalArgumentException(\"id must not be negative, id: \" + id);\n-\n-        Schema[] requestSchemas = messageType.requestSchemas();\n-        Schema[] responseSchemas = messageType.responseSchemas();\n-        String name = messageType.name;\n-        if (requestSchemas.length != responseSchemas.length)\n-            throw new IllegalStateException(requestSchemas.length + \" request versions for api \" + name\n-                    + \" but \" + responseSchemas.length + \" response versions.\");\n-\n-        for (int i = 0; i < requestSchemas.length; ++i) {\n-            if (requestSchemas[i] == null)\n-                throw new IllegalStateException(\"Request schema for api \" + name + \" for version \" + i + \" is null\");\n-            if (responseSchemas[i] == null)\n-                throw new IllegalStateException(\"Response schema for api \" + name + \" for version \" + i + \" is null\");\n-        }\n-\n         this.messageType = messageType;\n-        this.id = id;\n-        this.name = name;\n+        this.id = messageType.apiKey();\n+        this.name = messageType.name;\n         this.clusterAction = clusterAction;\n         this.minRequiredInterBrokerMagic = minRequiredInterBrokerMagic;\n         this.isEnabled = isEnabled;\n \n-\n-        this.requiresDelayedAllocation = forwardable || shouldRetainsBufferReference(requestSchemas);\n+        this.requiresDelayedAllocation = forwardable || shouldRetainsBufferReference(messageType.requestSchemas());\n         this.forwardable = forwardable;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MzI3MA==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r542973270", "bodyText": "ditto", "author": "chia7712", "createdAt": "2020-12-15T01:23:49Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java", "diffHunk": "@@ -289,49 +129,40 @@ public Struct parseResponse(short version, ByteBuffer buffer) {\n     /** indicates whether the API is enabled for forwarding **/\n     public final boolean forwardable;\n \n-    public final Schema[] requestSchemas;\n-    public final Schema[] responseSchemas;\n     public final boolean requiresDelayedAllocation;\n \n-    ApiKeys(int id, String name, Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, false, requestSchemas, responseSchemas);\n-    }\n+    public final ApiMessageType messageType;\n \n-    ApiKeys(int id, String name, boolean clusterAction, Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, clusterAction, RecordBatch.MAGIC_VALUE_V0, requestSchemas, responseSchemas);\n+    ApiKeys(ApiMessageType messageType) {\n+        this(messageType, false);\n     }\n \n-    ApiKeys(int id, String name, Schema[] requestSchemas, Schema[] responseSchemas, boolean forwardable) {\n-        this(id, name, false, RecordBatch.MAGIC_VALUE_V0, true, requestSchemas, responseSchemas, forwardable);\n+    ApiKeys(ApiMessageType messageType, boolean clusterAction) {\n+        this(messageType, clusterAction, RecordBatch.MAGIC_VALUE_V0, false);\n     }\n \n-    ApiKeys(int id, String name, boolean clusterAction, boolean isEnabled, Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, clusterAction, RecordBatch.MAGIC_VALUE_V0, isEnabled, requestSchemas, responseSchemas, false);\n+    ApiKeys(ApiMessageType messageType, boolean clusterAction, boolean forwardable) {\n+        this(messageType, clusterAction, RecordBatch.MAGIC_VALUE_V0, forwardable);\n     }\n \n-    ApiKeys(int id, String name, boolean clusterAction, byte minRequiredInterBrokerMagic,\n-            Schema[] requestSchemas, Schema[] responseSchemas) {\n-        this(id, name, clusterAction, minRequiredInterBrokerMagic, true, requestSchemas, responseSchemas, false);\n+    ApiKeys(ApiMessageType messageType, boolean clusterAction, byte minRequiredInterBrokerMagic, boolean forwardable) {\n+        this(messageType, clusterAction, minRequiredInterBrokerMagic, forwardable, true);\n     }\n \n     ApiKeys(\n-        int id,\n-        String name,\n+        ApiMessageType messageType,\n         boolean clusterAction,\n         byte minRequiredInterBrokerMagic,\n-        boolean isEnabled,\n-        Schema[] requestSchemas,\n-        Schema[] responseSchemas,\n-        boolean forwardable\n+        boolean forwardable,\n+        boolean isEnabled\n     ) {\n+        short id = messageType.apiKey();\n         if (id < 0)\n             throw new IllegalArgumentException(\"id must not be negative, id: \" + id);\n-        this.id = (short) id;\n-        this.name = name;\n-        this.clusterAction = clusterAction;\n-        this.minRequiredInterBrokerMagic = minRequiredInterBrokerMagic;\n-        this.isEnabled = isEnabled;\n \n+        Schema[] requestSchemas = messageType.requestSchemas();\n+        Schema[] responseSchemas = messageType.responseSchemas();\n+        String name = messageType.name;\n         if (requestSchemas.length != responseSchemas.length)", "originalCommit": "18eec5b2f609f546a55dd06999b64b1176841322", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc67beabe5124ac903bd42d085af08da5d0e2d2c", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\nindex 2f5227717e..cf6e120ea0 100644\n--- a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n+++ b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n\n@@ -156,33 +149,14 @@ public enum ApiKeys {\n         boolean forwardable,\n         boolean isEnabled\n     ) {\n-        short id = messageType.apiKey();\n-        if (id < 0)\n-            throw new IllegalArgumentException(\"id must not be negative, id: \" + id);\n-\n-        Schema[] requestSchemas = messageType.requestSchemas();\n-        Schema[] responseSchemas = messageType.responseSchemas();\n-        String name = messageType.name;\n-        if (requestSchemas.length != responseSchemas.length)\n-            throw new IllegalStateException(requestSchemas.length + \" request versions for api \" + name\n-                    + \" but \" + responseSchemas.length + \" response versions.\");\n-\n-        for (int i = 0; i < requestSchemas.length; ++i) {\n-            if (requestSchemas[i] == null)\n-                throw new IllegalStateException(\"Request schema for api \" + name + \" for version \" + i + \" is null\");\n-            if (responseSchemas[i] == null)\n-                throw new IllegalStateException(\"Response schema for api \" + name + \" for version \" + i + \" is null\");\n-        }\n-\n         this.messageType = messageType;\n-        this.id = id;\n-        this.name = name;\n+        this.id = messageType.apiKey();\n+        this.name = messageType.name;\n         this.clusterAction = clusterAction;\n         this.minRequiredInterBrokerMagic = minRequiredInterBrokerMagic;\n         this.isEnabled = isEnabled;\n \n-\n-        this.requiresDelayedAllocation = forwardable || shouldRetainsBufferReference(requestSchemas);\n+        this.requiresDelayedAllocation = forwardable || shouldRetainsBufferReference(messageType.requestSchemas());\n         this.forwardable = forwardable;\n     }\n \n"}}, {"oid": "ddad298d011353a6d188e53e9bcf00a26eda9496", "url": "https://github.com/apache/kafka/commit/ddad298d011353a6d188e53e9bcf00a26eda9496", "message": "MINOR: Simplify ApiKeys by relying on ApiMessageType and removing unused methods", "committedDate": "2020-12-15T06:44:23Z", "type": "commit"}, {"oid": "ddad298d011353a6d188e53e9bcf00a26eda9496", "url": "https://github.com/apache/kafka/commit/ddad298d011353a6d188e53e9bcf00a26eda9496", "message": "MINOR: Simplify ApiKeys by relying on ApiMessageType and removing unused methods", "committedDate": "2020-12-15T06:44:23Z", "type": "forcePushed"}, {"oid": "89ee566e466cd58023c6a4cac64893bfcf38b570", "url": "https://github.com/apache/kafka/commit/89ee566e466cd58023c6a4cac64893bfcf38b570", "message": "ListOffset -> ListOffsets for consistency with the existing API name", "committedDate": "2020-12-15T15:03:54Z", "type": "commit"}, {"oid": "69ae2114341290febe3d3360773b2ac25fd923d3", "url": "https://github.com/apache/kafka/commit/69ae2114341290febe3d3360773b2ac25fd923d3", "message": "Remove unused method", "committedDate": "2020-12-15T15:07:32Z", "type": "commit"}, {"oid": "53b72a8c2099c3a2bd746490b20b0db3628f6737", "url": "https://github.com/apache/kafka/commit/53b72a8c2099c3a2bd746490b20b0db3628f6737", "message": "Fix OffsetFetchResponseTest failure", "committedDate": "2020-12-15T15:07:43Z", "type": "commit"}, {"oid": "0378e08bd0c802b50ba8b7857158ee0dfee95b63", "url": "https://github.com/apache/kafka/commit/0378e08bd0c802b50ba8b7857158ee0dfee95b63", "message": "Don't assume ids are dense in ApiKeys and simplify the code", "committedDate": "2020-12-15T15:24:26Z", "type": "commit"}, {"oid": "dd7e8ea3d303e33b7af4cac3744680f666876024", "url": "https://github.com/apache/kafka/commit/dd7e8ea3d303e33b7af4cac3744680f666876024", "message": "Generate `highestSupportedVersion` and `lowestSupportedVersion`", "committedDate": "2020-12-15T15:34:37Z", "type": "commit"}, {"oid": "dc67beabe5124ac903bd42d085af08da5d0e2d2c", "url": "https://github.com/apache/kafka/commit/dc67beabe5124ac903bd42d085af08da5d0e2d2c", "message": "Replace checks in ApiKeys with unit tests in ApiMessageTypeTest", "committedDate": "2020-12-15T15:58:39Z", "type": "commit"}, {"oid": "37a7778af304326d41df5c60f754cf62ff4876f9", "url": "https://github.com/apache/kafka/commit/37a7778af304326d41df5c60f754cf62ff4876f9", "message": "Merge remote-tracking branch 'apache-github/trunk' into simplify-api-keys\n\n* apache-github/trunk:\n  KAFKA-10776: Add version attribute in RequestsPerSec metrics documentation (#9661)\n  KAFKA-10854: fix flaky testConnectionRatePerIp test (#9752)\n  KAFKA-10525: Emit JSONs with new auto-generated schema (KIP-673) (#9526)", "committedDate": "2020-12-15T16:03:20Z", "type": "commit"}, {"oid": "e8dc54737c14d60069348f23e71499bdb01f11b5", "url": "https://github.com/apache/kafka/commit/e8dc54737c14d60069348f23e71499bdb01f11b5", "message": "Fix compilation errors due to merge", "committedDate": "2020-12-15T16:19:22Z", "type": "commit"}, {"oid": "e8dc54737c14d60069348f23e71499bdb01f11b5", "url": "https://github.com/apache/kafka/commit/e8dc54737c14d60069348f23e71499bdb01f11b5", "message": "Fix compilation errors due to merge", "committedDate": "2020-12-15T16:19:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5OTYwMg==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543799602", "bodyText": "Does it need to check duplicate id?", "author": "chia7712", "createdAt": "2020-12-16T01:02:07Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java", "diffHunk": "@@ -157,124 +38,76 @@\n  * Identifiers for all the Kafka APIs\n  */\n public enum ApiKeys {\n-    PRODUCE(0, \"Produce\", ProduceRequestData.SCHEMAS, ProduceResponseData.SCHEMAS),\n-    FETCH(1, \"Fetch\", FetchRequestData.SCHEMAS, FetchResponseData.SCHEMAS),\n-    LIST_OFFSETS(2, \"ListOffsets\", ListOffsetRequestData.SCHEMAS, ListOffsetResponseData.SCHEMAS),\n-    METADATA(3, \"Metadata\", MetadataRequestData.SCHEMAS, MetadataResponseData.SCHEMAS),\n-    LEADER_AND_ISR(4, \"LeaderAndIsr\", true, LeaderAndIsrRequestData.SCHEMAS, LeaderAndIsrResponseData.SCHEMAS),\n-    STOP_REPLICA(5, \"StopReplica\", true, StopReplicaRequestData.SCHEMAS, StopReplicaResponseData.SCHEMAS),\n-    UPDATE_METADATA(6, \"UpdateMetadata\", true, UpdateMetadataRequestData.SCHEMAS, UpdateMetadataResponseData.SCHEMAS),\n-    CONTROLLED_SHUTDOWN(7, \"ControlledShutdown\", true, ControlledShutdownRequestData.SCHEMAS,\n-            ControlledShutdownResponseData.SCHEMAS),\n-    OFFSET_COMMIT(8, \"OffsetCommit\", OffsetCommitRequestData.SCHEMAS, OffsetCommitResponseData.SCHEMAS),\n-    OFFSET_FETCH(9, \"OffsetFetch\", OffsetFetchRequestData.SCHEMAS, OffsetFetchResponseData.SCHEMAS),\n-    FIND_COORDINATOR(10, \"FindCoordinator\", FindCoordinatorRequestData.SCHEMAS,\n-            FindCoordinatorResponseData.SCHEMAS),\n-    JOIN_GROUP(11, \"JoinGroup\", JoinGroupRequestData.SCHEMAS, JoinGroupResponseData.SCHEMAS),\n-    HEARTBEAT(12, \"Heartbeat\", HeartbeatRequestData.SCHEMAS, HeartbeatResponseData.SCHEMAS),\n-    LEAVE_GROUP(13, \"LeaveGroup\", LeaveGroupRequestData.SCHEMAS, LeaveGroupResponseData.SCHEMAS),\n-    SYNC_GROUP(14, \"SyncGroup\", SyncGroupRequestData.SCHEMAS, SyncGroupResponseData.SCHEMAS),\n-    DESCRIBE_GROUPS(15, \"DescribeGroups\", DescribeGroupsRequestData.SCHEMAS,\n-            DescribeGroupsResponseData.SCHEMAS),\n-    LIST_GROUPS(16, \"ListGroups\", ListGroupsRequestData.SCHEMAS, ListGroupsResponseData.SCHEMAS),\n-    SASL_HANDSHAKE(17, \"SaslHandshake\", SaslHandshakeRequestData.SCHEMAS, SaslHandshakeResponseData.SCHEMAS),\n-    API_VERSIONS(18, \"ApiVersions\", ApiVersionsRequestData.SCHEMAS, ApiVersionsResponseData.SCHEMAS) {\n-        @Override\n-        public Struct parseResponse(short version, ByteBuffer buffer) {\n-            // Fallback to version 0 for ApiVersions response. If a client sends an ApiVersionsRequest\n-            // using a version higher than that supported by the broker, a version 0 response is sent\n-            // to the client indicating UNSUPPORTED_VERSION.\n-            return parseResponse(version, buffer, (short) 0);\n-        }\n-    },\n-    CREATE_TOPICS(19, \"CreateTopics\", CreateTopicsRequestData.SCHEMAS, CreateTopicsResponseData.SCHEMAS, true),\n-    DELETE_TOPICS(20, \"DeleteTopics\", DeleteTopicsRequestData.SCHEMAS, DeleteTopicsResponseData.SCHEMAS, true),\n-    DELETE_RECORDS(21, \"DeleteRecords\", DeleteRecordsRequestData.SCHEMAS, DeleteRecordsResponseData.SCHEMAS),\n-    INIT_PRODUCER_ID(22, \"InitProducerId\", InitProducerIdRequestData.SCHEMAS, InitProducerIdResponseData.SCHEMAS),\n-    OFFSET_FOR_LEADER_EPOCH(23, \"OffsetForLeaderEpoch\", false, OffsetForLeaderEpochRequestData.SCHEMAS,\n-        OffsetForLeaderEpochResponseData.SCHEMAS),\n-    ADD_PARTITIONS_TO_TXN(24, \"AddPartitionsToTxn\", false, RecordBatch.MAGIC_VALUE_V2,\n-            AddPartitionsToTxnRequestData.SCHEMAS, AddPartitionsToTxnResponseData.SCHEMAS),\n-    ADD_OFFSETS_TO_TXN(25, \"AddOffsetsToTxn\", false, RecordBatch.MAGIC_VALUE_V2, AddOffsetsToTxnRequestData.SCHEMAS,\n-            AddOffsetsToTxnResponseData.SCHEMAS),\n-    END_TXN(26, \"EndTxn\", false, RecordBatch.MAGIC_VALUE_V2, EndTxnRequestData.SCHEMAS, EndTxnResponseData.SCHEMAS),\n-    WRITE_TXN_MARKERS(27, \"WriteTxnMarkers\", true, RecordBatch.MAGIC_VALUE_V2, WriteTxnMarkersRequestData.SCHEMAS,\n-            WriteTxnMarkersResponseData.SCHEMAS),\n-    TXN_OFFSET_COMMIT(28, \"TxnOffsetCommit\", false, RecordBatch.MAGIC_VALUE_V2, TxnOffsetCommitRequestData.SCHEMAS,\n-            TxnOffsetCommitResponseData.SCHEMAS),\n-    DESCRIBE_ACLS(29, \"DescribeAcls\", DescribeAclsRequestData.SCHEMAS, DescribeAclsResponseData.SCHEMAS),\n-    CREATE_ACLS(30, \"CreateAcls\", CreateAclsRequestData.SCHEMAS, CreateAclsResponseData.SCHEMAS, true),\n-    DELETE_ACLS(31, \"DeleteAcls\", DeleteAclsRequestData.SCHEMAS, DeleteAclsResponseData.SCHEMAS, true),\n-    DESCRIBE_CONFIGS(32, \"DescribeConfigs\", DescribeConfigsRequestData.SCHEMAS,\n-             DescribeConfigsResponseData.SCHEMAS),\n-    ALTER_CONFIGS(33, \"AlterConfigs\", AlterConfigsRequestData.SCHEMAS,\n-            AlterConfigsResponseData.SCHEMAS, true),\n-    ALTER_REPLICA_LOG_DIRS(34, \"AlterReplicaLogDirs\", AlterReplicaLogDirsRequestData.SCHEMAS,\n-            AlterReplicaLogDirsResponseData.SCHEMAS),\n-    DESCRIBE_LOG_DIRS(35, \"DescribeLogDirs\", DescribeLogDirsRequestData.SCHEMAS,\n-            DescribeLogDirsResponseData.SCHEMAS),\n-    SASL_AUTHENTICATE(36, \"SaslAuthenticate\", SaslAuthenticateRequestData.SCHEMAS,\n-            SaslAuthenticateResponseData.SCHEMAS),\n-    CREATE_PARTITIONS(37, \"CreatePartitions\", CreatePartitionsRequestData.SCHEMAS,\n-            CreatePartitionsResponseData.SCHEMAS, true),\n-    CREATE_DELEGATION_TOKEN(38, \"CreateDelegationToken\", CreateDelegationTokenRequestData.SCHEMAS,\n-            CreateDelegationTokenResponseData.SCHEMAS, true),\n-    RENEW_DELEGATION_TOKEN(39, \"RenewDelegationToken\", RenewDelegationTokenRequestData.SCHEMAS,\n-            RenewDelegationTokenResponseData.SCHEMAS, true),\n-    EXPIRE_DELEGATION_TOKEN(40, \"ExpireDelegationToken\", ExpireDelegationTokenRequestData.SCHEMAS,\n-            ExpireDelegationTokenResponseData.SCHEMAS, true),\n-    DESCRIBE_DELEGATION_TOKEN(41, \"DescribeDelegationToken\", DescribeDelegationTokenRequestData.SCHEMAS,\n-            DescribeDelegationTokenResponseData.SCHEMAS),\n-    DELETE_GROUPS(42, \"DeleteGroups\", DeleteGroupsRequestData.SCHEMAS, DeleteGroupsResponseData.SCHEMAS),\n-    ELECT_LEADERS(43, \"ElectLeaders\", ElectLeadersRequestData.SCHEMAS,\n-            ElectLeadersResponseData.SCHEMAS),\n-    INCREMENTAL_ALTER_CONFIGS(44, \"IncrementalAlterConfigs\", IncrementalAlterConfigsRequestData.SCHEMAS,\n-            IncrementalAlterConfigsResponseData.SCHEMAS, true),\n-    ALTER_PARTITION_REASSIGNMENTS(45, \"AlterPartitionReassignments\", AlterPartitionReassignmentsRequestData.SCHEMAS,\n-            AlterPartitionReassignmentsResponseData.SCHEMAS, true),\n-    LIST_PARTITION_REASSIGNMENTS(46, \"ListPartitionReassignments\", ListPartitionReassignmentsRequestData.SCHEMAS,\n-            ListPartitionReassignmentsResponseData.SCHEMAS),\n-    OFFSET_DELETE(47, \"OffsetDelete\", OffsetDeleteRequestData.SCHEMAS, OffsetDeleteResponseData.SCHEMAS),\n-    DESCRIBE_CLIENT_QUOTAS(48, \"DescribeClientQuotas\", DescribeClientQuotasRequestData.SCHEMAS,\n-            DescribeClientQuotasResponseData.SCHEMAS),\n-    ALTER_CLIENT_QUOTAS(49, \"AlterClientQuotas\", AlterClientQuotasRequestData.SCHEMAS,\n-            AlterClientQuotasResponseData.SCHEMAS, true),\n-    DESCRIBE_USER_SCRAM_CREDENTIALS(50, \"DescribeUserScramCredentials\", DescribeUserScramCredentialsRequestData.SCHEMAS,\n-            DescribeUserScramCredentialsResponseData.SCHEMAS),\n-    ALTER_USER_SCRAM_CREDENTIALS(51, \"AlterUserScramCredentials\", AlterUserScramCredentialsRequestData.SCHEMAS,\n-            AlterUserScramCredentialsResponseData.SCHEMAS, true),\n-    VOTE(52, \"Vote\", true, false,\n-        VoteRequestData.SCHEMAS, VoteResponseData.SCHEMAS),\n-    BEGIN_QUORUM_EPOCH(53, \"BeginQuorumEpoch\", true, false,\n-        BeginQuorumEpochRequestData.SCHEMAS, BeginQuorumEpochResponseData.SCHEMAS),\n-    END_QUORUM_EPOCH(54, \"EndQuorumEpoch\", true, false,\n-        EndQuorumEpochRequestData.SCHEMAS, EndQuorumEpochResponseData.SCHEMAS),\n-    DESCRIBE_QUORUM(55, \"DescribeQuorum\", true, false,\n-        DescribeQuorumRequestData.SCHEMAS, DescribeQuorumResponseData.SCHEMAS),\n-    ALTER_ISR(56, \"AlterIsr\", true, AlterIsrRequestData.SCHEMAS, AlterIsrResponseData.SCHEMAS),\n-    UPDATE_FEATURES(57, \"UpdateFeatures\",\n-        UpdateFeaturesRequestData.SCHEMAS, UpdateFeaturesResponseData.SCHEMAS, true),\n-    ENVELOPE(58, \"Envelope\", true, false, EnvelopeRequestData.SCHEMAS, EnvelopeResponseData.SCHEMAS);\n-\n-    private static final ApiKeys[] ID_TO_TYPE;\n-    private static final int MIN_API_KEY = 0;\n-    public static final int MAX_API_KEY;\n-\n+    PRODUCE(ApiMessageType.PRODUCE),\n+    FETCH(ApiMessageType.FETCH),\n+    LIST_OFFSETS(ApiMessageType.LIST_OFFSETS),\n+    METADATA(ApiMessageType.METADATA),\n+    LEADER_AND_ISR(ApiMessageType.LEADER_AND_ISR, true),\n+    STOP_REPLICA(ApiMessageType.STOP_REPLICA, true),\n+    UPDATE_METADATA(ApiMessageType.UPDATE_METADATA, true),\n+    CONTROLLED_SHUTDOWN(ApiMessageType.CONTROLLED_SHUTDOWN, true),\n+    OFFSET_COMMIT(ApiMessageType.OFFSET_COMMIT),\n+    OFFSET_FETCH(ApiMessageType.OFFSET_FETCH),\n+    FIND_COORDINATOR(ApiMessageType.FIND_COORDINATOR),\n+    JOIN_GROUP(ApiMessageType.JOIN_GROUP),\n+    HEARTBEAT(ApiMessageType.HEARTBEAT),\n+    LEAVE_GROUP(ApiMessageType.LEAVE_GROUP),\n+    SYNC_GROUP(ApiMessageType.SYNC_GROUP),\n+    DESCRIBE_GROUPS(ApiMessageType.DESCRIBE_GROUPS),\n+    LIST_GROUPS(ApiMessageType.LIST_GROUPS),\n+    SASL_HANDSHAKE(ApiMessageType.SASL_HANDSHAKE),\n+    API_VERSIONS(ApiMessageType.API_VERSIONS),\n+    CREATE_TOPICS(ApiMessageType.CREATE_TOPICS, false, true),\n+    DELETE_TOPICS(ApiMessageType.DELETE_TOPICS, false, true),\n+    DELETE_RECORDS(ApiMessageType.DELETE_RECORDS),\n+    INIT_PRODUCER_ID(ApiMessageType.INIT_PRODUCER_ID),\n+    OFFSET_FOR_LEADER_EPOCH(ApiMessageType.OFFSET_FOR_LEADER_EPOCH),\n+    ADD_PARTITIONS_TO_TXN(ApiMessageType.ADD_PARTITIONS_TO_TXN, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    ADD_OFFSETS_TO_TXN(ApiMessageType.ADD_OFFSETS_TO_TXN, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    END_TXN(ApiMessageType.END_TXN, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    WRITE_TXN_MARKERS(ApiMessageType.WRITE_TXN_MARKERS, true, RecordBatch.MAGIC_VALUE_V2, false),\n+    TXN_OFFSET_COMMIT(ApiMessageType.TXN_OFFSET_COMMIT, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    DESCRIBE_ACLS(ApiMessageType.DESCRIBE_ACLS),\n+    CREATE_ACLS(ApiMessageType.CREATE_ACLS, false, true),\n+    DELETE_ACLS(ApiMessageType.DELETE_ACLS, false, true),\n+    DESCRIBE_CONFIGS(ApiMessageType.DESCRIBE_CONFIGS),\n+    ALTER_CONFIGS(ApiMessageType.ALTER_CONFIGS, false, true),\n+    ALTER_REPLICA_LOG_DIRS(ApiMessageType.ALTER_REPLICA_LOG_DIRS),\n+    DESCRIBE_LOG_DIRS(ApiMessageType.DESCRIBE_LOG_DIRS),\n+    SASL_AUTHENTICATE(ApiMessageType.SASL_AUTHENTICATE),\n+    CREATE_PARTITIONS(ApiMessageType.CREATE_PARTITIONS, false, true),\n+    CREATE_DELEGATION_TOKEN(ApiMessageType.CREATE_DELEGATION_TOKEN, false, true),\n+    RENEW_DELEGATION_TOKEN(ApiMessageType.RENEW_DELEGATION_TOKEN, false, true),\n+    EXPIRE_DELEGATION_TOKEN(ApiMessageType.EXPIRE_DELEGATION_TOKEN, false, true),\n+    DESCRIBE_DELEGATION_TOKEN(ApiMessageType.DESCRIBE_DELEGATION_TOKEN),\n+    DELETE_GROUPS(ApiMessageType.DELETE_GROUPS),\n+    ELECT_LEADERS(ApiMessageType.ELECT_LEADERS),\n+    INCREMENTAL_ALTER_CONFIGS(ApiMessageType.INCREMENTAL_ALTER_CONFIGS, false, true),\n+    ALTER_PARTITION_REASSIGNMENTS(ApiMessageType.ALTER_PARTITION_REASSIGNMENTS, false, true),\n+    LIST_PARTITION_REASSIGNMENTS(ApiMessageType.LIST_PARTITION_REASSIGNMENTS),\n+    OFFSET_DELETE(ApiMessageType.OFFSET_DELETE),\n+    DESCRIBE_CLIENT_QUOTAS(ApiMessageType.DESCRIBE_CLIENT_QUOTAS),\n+    ALTER_CLIENT_QUOTAS(ApiMessageType.ALTER_CLIENT_QUOTAS, false, true),\n+    DESCRIBE_USER_SCRAM_CREDENTIALS(ApiMessageType.DESCRIBE_USER_SCRAM_CREDENTIALS),\n+    ALTER_USER_SCRAM_CREDENTIALS(ApiMessageType.ALTER_USER_SCRAM_CREDENTIALS, false, true),\n+    VOTE(ApiMessageType.VOTE, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    BEGIN_QUORUM_EPOCH(ApiMessageType.BEGIN_QUORUM_EPOCH, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    END_QUORUM_EPOCH(ApiMessageType.END_QUORUM_EPOCH, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    DESCRIBE_QUORUM(ApiMessageType.DESCRIBE_QUORUM, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    ALTER_ISR(ApiMessageType.ALTER_ISR, true),\n+    UPDATE_FEATURES(ApiMessageType.UPDATE_FEATURES, false, true),\n+    ENVELOPE(ApiMessageType.ENVELOPE, true, RecordBatch.MAGIC_VALUE_V0, false, false);\n+\n+    private static final Map<Integer, ApiKeys> ID_TO_TYPE = new HashMap<>();\n     static {\n-        int maxKey = -1;\n-        for (ApiKeys key : ApiKeys.values())\n-            maxKey = Math.max(maxKey, key.id);\n-        ApiKeys[] idToType = new ApiKeys[maxKey + 1];\n         for (ApiKeys key : ApiKeys.values())\n-            idToType[key.id] = key;\n-        ID_TO_TYPE = idToType;\n-        MAX_API_KEY = maxKey;\n+            ID_TO_TYPE.put((int) key.id, key);", "originalCommit": "e8dc54737c14d60069348f23e71499bdb01f11b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNTQ2Nw==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543815467", "bodyText": "I think the generator checks for this. I will double check.", "author": "ijuma", "createdAt": "2020-12-16T01:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5OTYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2MTAwOQ==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543961009", "bodyText": "Yes, the generator checks it:\n\nCaused by: java.lang.RuntimeException: Found more than one response with API key 3\n\nThere's also ApiMessageTypeTest.testUniqueness that verifies it after the generation.\nI added a comment explaining that uniqueness is ensured.", "author": "ijuma", "createdAt": "2020-12-16T05:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5OTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "73099b47f0021b3ba7961cc491204b73d9aa5d86", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\nindex cf6e120ea0..e9e4f21eae 100644\n--- a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n+++ b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n\n@@ -100,8 +100,10 @@ public enum ApiKeys {\n \n     private static final Map<Integer, ApiKeys> ID_TO_TYPE = new HashMap<>();\n     static {\n-        for (ApiKeys key : ApiKeys.values())\n+        for (ApiKeys key : ApiKeys.values()) {\n+            // The generator ensures every `ApiMessageType` has a unique id\n             ID_TO_TYPE.put((int) key.id, key);\n+        }\n     }\n \n     /** the permanent and immutable id of an API - this can't change ever */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgwNDQ3NA==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543804474", "bodyText": "Is 'short' type more suitable?", "author": "chia7712", "createdAt": "2020-12-16T01:15:07Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java", "diffHunk": "@@ -361,69 +172,35 @@ private static boolean shouldRetainsBufferReference(Schema[] requestSchemas) {\n     }\n \n     public static ApiKeys forId(int id) {", "originalCommit": "e8dc54737c14d60069348f23e71499bdb01f11b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgwNDg1NA==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543804854", "bodyText": "If the above comment is valid, it can be addressed in separate PR :)", "author": "chia7712", "createdAt": "2020-12-16T01:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgwNDQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNjA5Nw==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543816097", "bodyText": "We used int here because short in Java is a second class citizen and casting is required in some cases. If we decide to change this, a separate PR (as you suggested) would be better.", "author": "ijuma", "createdAt": "2020-12-16T01:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgwNDQ3NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "73099b47f0021b3ba7961cc491204b73d9aa5d86", "url": "https://github.com/apache/kafka/commit/73099b47f0021b3ba7961cc491204b73d9aa5d86", "message": "Clarifying comment in ApiKeys", "committedDate": "2020-12-16T05:07:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk4NTg4Ng==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r543985886", "bodyText": "It seems to me this initialization can be rewrite by following code.\n    private static final Map<Integer, ApiKeys> ID_TO_TYPE = Arrays.stream(ApiKeys.values())\n            .collect(Collectors.toMap(key -> (int) key.id, Function.identity()));\n\nThe benefit is that he static block can be removed.", "author": "chia7712", "createdAt": "2020-12-16T05:40:08Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java", "diffHunk": "@@ -157,124 +38,78 @@\n  * Identifiers for all the Kafka APIs\n  */\n public enum ApiKeys {\n-    PRODUCE(0, \"Produce\", ProduceRequestData.SCHEMAS, ProduceResponseData.SCHEMAS),\n-    FETCH(1, \"Fetch\", FetchRequestData.SCHEMAS, FetchResponseData.SCHEMAS),\n-    LIST_OFFSETS(2, \"ListOffsets\", ListOffsetRequestData.SCHEMAS, ListOffsetResponseData.SCHEMAS),\n-    METADATA(3, \"Metadata\", MetadataRequestData.SCHEMAS, MetadataResponseData.SCHEMAS),\n-    LEADER_AND_ISR(4, \"LeaderAndIsr\", true, LeaderAndIsrRequestData.SCHEMAS, LeaderAndIsrResponseData.SCHEMAS),\n-    STOP_REPLICA(5, \"StopReplica\", true, StopReplicaRequestData.SCHEMAS, StopReplicaResponseData.SCHEMAS),\n-    UPDATE_METADATA(6, \"UpdateMetadata\", true, UpdateMetadataRequestData.SCHEMAS, UpdateMetadataResponseData.SCHEMAS),\n-    CONTROLLED_SHUTDOWN(7, \"ControlledShutdown\", true, ControlledShutdownRequestData.SCHEMAS,\n-            ControlledShutdownResponseData.SCHEMAS),\n-    OFFSET_COMMIT(8, \"OffsetCommit\", OffsetCommitRequestData.SCHEMAS, OffsetCommitResponseData.SCHEMAS),\n-    OFFSET_FETCH(9, \"OffsetFetch\", OffsetFetchRequestData.SCHEMAS, OffsetFetchResponseData.SCHEMAS),\n-    FIND_COORDINATOR(10, \"FindCoordinator\", FindCoordinatorRequestData.SCHEMAS,\n-            FindCoordinatorResponseData.SCHEMAS),\n-    JOIN_GROUP(11, \"JoinGroup\", JoinGroupRequestData.SCHEMAS, JoinGroupResponseData.SCHEMAS),\n-    HEARTBEAT(12, \"Heartbeat\", HeartbeatRequestData.SCHEMAS, HeartbeatResponseData.SCHEMAS),\n-    LEAVE_GROUP(13, \"LeaveGroup\", LeaveGroupRequestData.SCHEMAS, LeaveGroupResponseData.SCHEMAS),\n-    SYNC_GROUP(14, \"SyncGroup\", SyncGroupRequestData.SCHEMAS, SyncGroupResponseData.SCHEMAS),\n-    DESCRIBE_GROUPS(15, \"DescribeGroups\", DescribeGroupsRequestData.SCHEMAS,\n-            DescribeGroupsResponseData.SCHEMAS),\n-    LIST_GROUPS(16, \"ListGroups\", ListGroupsRequestData.SCHEMAS, ListGroupsResponseData.SCHEMAS),\n-    SASL_HANDSHAKE(17, \"SaslHandshake\", SaslHandshakeRequestData.SCHEMAS, SaslHandshakeResponseData.SCHEMAS),\n-    API_VERSIONS(18, \"ApiVersions\", ApiVersionsRequestData.SCHEMAS, ApiVersionsResponseData.SCHEMAS) {\n-        @Override\n-        public Struct parseResponse(short version, ByteBuffer buffer) {\n-            // Fallback to version 0 for ApiVersions response. If a client sends an ApiVersionsRequest\n-            // using a version higher than that supported by the broker, a version 0 response is sent\n-            // to the client indicating UNSUPPORTED_VERSION.\n-            return parseResponse(version, buffer, (short) 0);\n-        }\n-    },\n-    CREATE_TOPICS(19, \"CreateTopics\", CreateTopicsRequestData.SCHEMAS, CreateTopicsResponseData.SCHEMAS, true),\n-    DELETE_TOPICS(20, \"DeleteTopics\", DeleteTopicsRequestData.SCHEMAS, DeleteTopicsResponseData.SCHEMAS, true),\n-    DELETE_RECORDS(21, \"DeleteRecords\", DeleteRecordsRequestData.SCHEMAS, DeleteRecordsResponseData.SCHEMAS),\n-    INIT_PRODUCER_ID(22, \"InitProducerId\", InitProducerIdRequestData.SCHEMAS, InitProducerIdResponseData.SCHEMAS),\n-    OFFSET_FOR_LEADER_EPOCH(23, \"OffsetForLeaderEpoch\", false, OffsetForLeaderEpochRequestData.SCHEMAS,\n-        OffsetForLeaderEpochResponseData.SCHEMAS),\n-    ADD_PARTITIONS_TO_TXN(24, \"AddPartitionsToTxn\", false, RecordBatch.MAGIC_VALUE_V2,\n-            AddPartitionsToTxnRequestData.SCHEMAS, AddPartitionsToTxnResponseData.SCHEMAS),\n-    ADD_OFFSETS_TO_TXN(25, \"AddOffsetsToTxn\", false, RecordBatch.MAGIC_VALUE_V2, AddOffsetsToTxnRequestData.SCHEMAS,\n-            AddOffsetsToTxnResponseData.SCHEMAS),\n-    END_TXN(26, \"EndTxn\", false, RecordBatch.MAGIC_VALUE_V2, EndTxnRequestData.SCHEMAS, EndTxnResponseData.SCHEMAS),\n-    WRITE_TXN_MARKERS(27, \"WriteTxnMarkers\", true, RecordBatch.MAGIC_VALUE_V2, WriteTxnMarkersRequestData.SCHEMAS,\n-            WriteTxnMarkersResponseData.SCHEMAS),\n-    TXN_OFFSET_COMMIT(28, \"TxnOffsetCommit\", false, RecordBatch.MAGIC_VALUE_V2, TxnOffsetCommitRequestData.SCHEMAS,\n-            TxnOffsetCommitResponseData.SCHEMAS),\n-    DESCRIBE_ACLS(29, \"DescribeAcls\", DescribeAclsRequestData.SCHEMAS, DescribeAclsResponseData.SCHEMAS),\n-    CREATE_ACLS(30, \"CreateAcls\", CreateAclsRequestData.SCHEMAS, CreateAclsResponseData.SCHEMAS, true),\n-    DELETE_ACLS(31, \"DeleteAcls\", DeleteAclsRequestData.SCHEMAS, DeleteAclsResponseData.SCHEMAS, true),\n-    DESCRIBE_CONFIGS(32, \"DescribeConfigs\", DescribeConfigsRequestData.SCHEMAS,\n-             DescribeConfigsResponseData.SCHEMAS),\n-    ALTER_CONFIGS(33, \"AlterConfigs\", AlterConfigsRequestData.SCHEMAS,\n-            AlterConfigsResponseData.SCHEMAS, true),\n-    ALTER_REPLICA_LOG_DIRS(34, \"AlterReplicaLogDirs\", AlterReplicaLogDirsRequestData.SCHEMAS,\n-            AlterReplicaLogDirsResponseData.SCHEMAS),\n-    DESCRIBE_LOG_DIRS(35, \"DescribeLogDirs\", DescribeLogDirsRequestData.SCHEMAS,\n-            DescribeLogDirsResponseData.SCHEMAS),\n-    SASL_AUTHENTICATE(36, \"SaslAuthenticate\", SaslAuthenticateRequestData.SCHEMAS,\n-            SaslAuthenticateResponseData.SCHEMAS),\n-    CREATE_PARTITIONS(37, \"CreatePartitions\", CreatePartitionsRequestData.SCHEMAS,\n-            CreatePartitionsResponseData.SCHEMAS, true),\n-    CREATE_DELEGATION_TOKEN(38, \"CreateDelegationToken\", CreateDelegationTokenRequestData.SCHEMAS,\n-            CreateDelegationTokenResponseData.SCHEMAS, true),\n-    RENEW_DELEGATION_TOKEN(39, \"RenewDelegationToken\", RenewDelegationTokenRequestData.SCHEMAS,\n-            RenewDelegationTokenResponseData.SCHEMAS, true),\n-    EXPIRE_DELEGATION_TOKEN(40, \"ExpireDelegationToken\", ExpireDelegationTokenRequestData.SCHEMAS,\n-            ExpireDelegationTokenResponseData.SCHEMAS, true),\n-    DESCRIBE_DELEGATION_TOKEN(41, \"DescribeDelegationToken\", DescribeDelegationTokenRequestData.SCHEMAS,\n-            DescribeDelegationTokenResponseData.SCHEMAS),\n-    DELETE_GROUPS(42, \"DeleteGroups\", DeleteGroupsRequestData.SCHEMAS, DeleteGroupsResponseData.SCHEMAS),\n-    ELECT_LEADERS(43, \"ElectLeaders\", ElectLeadersRequestData.SCHEMAS,\n-            ElectLeadersResponseData.SCHEMAS),\n-    INCREMENTAL_ALTER_CONFIGS(44, \"IncrementalAlterConfigs\", IncrementalAlterConfigsRequestData.SCHEMAS,\n-            IncrementalAlterConfigsResponseData.SCHEMAS, true),\n-    ALTER_PARTITION_REASSIGNMENTS(45, \"AlterPartitionReassignments\", AlterPartitionReassignmentsRequestData.SCHEMAS,\n-            AlterPartitionReassignmentsResponseData.SCHEMAS, true),\n-    LIST_PARTITION_REASSIGNMENTS(46, \"ListPartitionReassignments\", ListPartitionReassignmentsRequestData.SCHEMAS,\n-            ListPartitionReassignmentsResponseData.SCHEMAS),\n-    OFFSET_DELETE(47, \"OffsetDelete\", OffsetDeleteRequestData.SCHEMAS, OffsetDeleteResponseData.SCHEMAS),\n-    DESCRIBE_CLIENT_QUOTAS(48, \"DescribeClientQuotas\", DescribeClientQuotasRequestData.SCHEMAS,\n-            DescribeClientQuotasResponseData.SCHEMAS),\n-    ALTER_CLIENT_QUOTAS(49, \"AlterClientQuotas\", AlterClientQuotasRequestData.SCHEMAS,\n-            AlterClientQuotasResponseData.SCHEMAS, true),\n-    DESCRIBE_USER_SCRAM_CREDENTIALS(50, \"DescribeUserScramCredentials\", DescribeUserScramCredentialsRequestData.SCHEMAS,\n-            DescribeUserScramCredentialsResponseData.SCHEMAS),\n-    ALTER_USER_SCRAM_CREDENTIALS(51, \"AlterUserScramCredentials\", AlterUserScramCredentialsRequestData.SCHEMAS,\n-            AlterUserScramCredentialsResponseData.SCHEMAS, true),\n-    VOTE(52, \"Vote\", true, false,\n-        VoteRequestData.SCHEMAS, VoteResponseData.SCHEMAS),\n-    BEGIN_QUORUM_EPOCH(53, \"BeginQuorumEpoch\", true, false,\n-        BeginQuorumEpochRequestData.SCHEMAS, BeginQuorumEpochResponseData.SCHEMAS),\n-    END_QUORUM_EPOCH(54, \"EndQuorumEpoch\", true, false,\n-        EndQuorumEpochRequestData.SCHEMAS, EndQuorumEpochResponseData.SCHEMAS),\n-    DESCRIBE_QUORUM(55, \"DescribeQuorum\", true, false,\n-        DescribeQuorumRequestData.SCHEMAS, DescribeQuorumResponseData.SCHEMAS),\n-    ALTER_ISR(56, \"AlterIsr\", true, AlterIsrRequestData.SCHEMAS, AlterIsrResponseData.SCHEMAS),\n-    UPDATE_FEATURES(57, \"UpdateFeatures\",\n-        UpdateFeaturesRequestData.SCHEMAS, UpdateFeaturesResponseData.SCHEMAS, true),\n-    ENVELOPE(58, \"Envelope\", true, false, EnvelopeRequestData.SCHEMAS, EnvelopeResponseData.SCHEMAS);\n-\n-    private static final ApiKeys[] ID_TO_TYPE;\n-    private static final int MIN_API_KEY = 0;\n-    public static final int MAX_API_KEY;\n-\n+    PRODUCE(ApiMessageType.PRODUCE),\n+    FETCH(ApiMessageType.FETCH),\n+    LIST_OFFSETS(ApiMessageType.LIST_OFFSETS),\n+    METADATA(ApiMessageType.METADATA),\n+    LEADER_AND_ISR(ApiMessageType.LEADER_AND_ISR, true),\n+    STOP_REPLICA(ApiMessageType.STOP_REPLICA, true),\n+    UPDATE_METADATA(ApiMessageType.UPDATE_METADATA, true),\n+    CONTROLLED_SHUTDOWN(ApiMessageType.CONTROLLED_SHUTDOWN, true),\n+    OFFSET_COMMIT(ApiMessageType.OFFSET_COMMIT),\n+    OFFSET_FETCH(ApiMessageType.OFFSET_FETCH),\n+    FIND_COORDINATOR(ApiMessageType.FIND_COORDINATOR),\n+    JOIN_GROUP(ApiMessageType.JOIN_GROUP),\n+    HEARTBEAT(ApiMessageType.HEARTBEAT),\n+    LEAVE_GROUP(ApiMessageType.LEAVE_GROUP),\n+    SYNC_GROUP(ApiMessageType.SYNC_GROUP),\n+    DESCRIBE_GROUPS(ApiMessageType.DESCRIBE_GROUPS),\n+    LIST_GROUPS(ApiMessageType.LIST_GROUPS),\n+    SASL_HANDSHAKE(ApiMessageType.SASL_HANDSHAKE),\n+    API_VERSIONS(ApiMessageType.API_VERSIONS),\n+    CREATE_TOPICS(ApiMessageType.CREATE_TOPICS, false, true),\n+    DELETE_TOPICS(ApiMessageType.DELETE_TOPICS, false, true),\n+    DELETE_RECORDS(ApiMessageType.DELETE_RECORDS),\n+    INIT_PRODUCER_ID(ApiMessageType.INIT_PRODUCER_ID),\n+    OFFSET_FOR_LEADER_EPOCH(ApiMessageType.OFFSET_FOR_LEADER_EPOCH),\n+    ADD_PARTITIONS_TO_TXN(ApiMessageType.ADD_PARTITIONS_TO_TXN, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    ADD_OFFSETS_TO_TXN(ApiMessageType.ADD_OFFSETS_TO_TXN, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    END_TXN(ApiMessageType.END_TXN, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    WRITE_TXN_MARKERS(ApiMessageType.WRITE_TXN_MARKERS, true, RecordBatch.MAGIC_VALUE_V2, false),\n+    TXN_OFFSET_COMMIT(ApiMessageType.TXN_OFFSET_COMMIT, false, RecordBatch.MAGIC_VALUE_V2, false),\n+    DESCRIBE_ACLS(ApiMessageType.DESCRIBE_ACLS),\n+    CREATE_ACLS(ApiMessageType.CREATE_ACLS, false, true),\n+    DELETE_ACLS(ApiMessageType.DELETE_ACLS, false, true),\n+    DESCRIBE_CONFIGS(ApiMessageType.DESCRIBE_CONFIGS),\n+    ALTER_CONFIGS(ApiMessageType.ALTER_CONFIGS, false, true),\n+    ALTER_REPLICA_LOG_DIRS(ApiMessageType.ALTER_REPLICA_LOG_DIRS),\n+    DESCRIBE_LOG_DIRS(ApiMessageType.DESCRIBE_LOG_DIRS),\n+    SASL_AUTHENTICATE(ApiMessageType.SASL_AUTHENTICATE),\n+    CREATE_PARTITIONS(ApiMessageType.CREATE_PARTITIONS, false, true),\n+    CREATE_DELEGATION_TOKEN(ApiMessageType.CREATE_DELEGATION_TOKEN, false, true),\n+    RENEW_DELEGATION_TOKEN(ApiMessageType.RENEW_DELEGATION_TOKEN, false, true),\n+    EXPIRE_DELEGATION_TOKEN(ApiMessageType.EXPIRE_DELEGATION_TOKEN, false, true),\n+    DESCRIBE_DELEGATION_TOKEN(ApiMessageType.DESCRIBE_DELEGATION_TOKEN),\n+    DELETE_GROUPS(ApiMessageType.DELETE_GROUPS),\n+    ELECT_LEADERS(ApiMessageType.ELECT_LEADERS),\n+    INCREMENTAL_ALTER_CONFIGS(ApiMessageType.INCREMENTAL_ALTER_CONFIGS, false, true),\n+    ALTER_PARTITION_REASSIGNMENTS(ApiMessageType.ALTER_PARTITION_REASSIGNMENTS, false, true),\n+    LIST_PARTITION_REASSIGNMENTS(ApiMessageType.LIST_PARTITION_REASSIGNMENTS),\n+    OFFSET_DELETE(ApiMessageType.OFFSET_DELETE),\n+    DESCRIBE_CLIENT_QUOTAS(ApiMessageType.DESCRIBE_CLIENT_QUOTAS),\n+    ALTER_CLIENT_QUOTAS(ApiMessageType.ALTER_CLIENT_QUOTAS, false, true),\n+    DESCRIBE_USER_SCRAM_CREDENTIALS(ApiMessageType.DESCRIBE_USER_SCRAM_CREDENTIALS),\n+    ALTER_USER_SCRAM_CREDENTIALS(ApiMessageType.ALTER_USER_SCRAM_CREDENTIALS, false, true),\n+    VOTE(ApiMessageType.VOTE, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    BEGIN_QUORUM_EPOCH(ApiMessageType.BEGIN_QUORUM_EPOCH, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    END_QUORUM_EPOCH(ApiMessageType.END_QUORUM_EPOCH, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    DESCRIBE_QUORUM(ApiMessageType.DESCRIBE_QUORUM, true, RecordBatch.MAGIC_VALUE_V0, false, false),\n+    ALTER_ISR(ApiMessageType.ALTER_ISR, true),\n+    UPDATE_FEATURES(ApiMessageType.UPDATE_FEATURES, false, true),\n+    ENVELOPE(ApiMessageType.ENVELOPE, true, RecordBatch.MAGIC_VALUE_V0, false, false);\n+\n+    private static final Map<Integer, ApiKeys> ID_TO_TYPE = new HashMap<>();", "originalCommit": "73099b47f0021b3ba7961cc491204b73d9aa5d86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAxMjA1MQ==", "url": "https://github.com/apache/kafka/pull/9748#discussion_r544012051", "bodyText": "Updated.", "author": "ijuma", "createdAt": "2020-12-16T06:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk4NTg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d6e0f72bfb6d16817228132c9825e4f24afa1bd3", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\nindex e9e4f21eae..3fe016e5f0 100644\n--- a/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n+++ b/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java\n\n@@ -98,13 +98,9 @@ public enum ApiKeys {\n     UPDATE_FEATURES(ApiMessageType.UPDATE_FEATURES, false, true),\n     ENVELOPE(ApiMessageType.ENVELOPE, true, RecordBatch.MAGIC_VALUE_V0, false, false);\n \n-    private static final Map<Integer, ApiKeys> ID_TO_TYPE = new HashMap<>();\n-    static {\n-        for (ApiKeys key : ApiKeys.values()) {\n-            // The generator ensures every `ApiMessageType` has a unique id\n-            ID_TO_TYPE.put((int) key.id, key);\n-        }\n-    }\n+    // The generator ensures every `ApiMessageType` has a unique id\n+    private static final Map<Integer, ApiKeys> ID_TO_TYPE = Arrays.stream(ApiKeys.values())\n+        .collect(Collectors.toMap(key -> (int) key.id, Function.identity()));\n \n     /** the permanent and immutable id of an API - this can't change ever */\n     public final short id;\n"}}, {"oid": "d6e0f72bfb6d16817228132c9825e4f24afa1bd3", "url": "https://github.com/apache/kafka/commit/d6e0f72bfb6d16817228132c9825e4f24afa1bd3", "message": "Simplify ID_TO_TYPE generation via stream API", "committedDate": "2020-12-16T06:14:35Z", "type": "commit"}]}