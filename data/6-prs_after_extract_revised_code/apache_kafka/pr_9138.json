{"pr_number": 9138, "pr_title": "KAFKA-9929: Support backward iterator on WindowStore", "pr_createdAt": "2020-08-07T16:22:27Z", "pr_url": "https://github.com/apache/kafka/pull/9138", "timeline": [{"oid": "900639bf632cb5dd9ca3568f312a3e6159014db1", "url": "https://github.com/apache/kafka/commit/900639bf632cb5dd9ca3568f312a3e6159014db1", "message": "key/value reverse operations", "committedDate": "2020-08-22T16:47:53Z", "type": "commit"}, {"oid": "37c340e81494e396fbf7d052654c3bd3f9aff580", "url": "https://github.com/apache/kafka/commit/37c340e81494e396fbf7d052654c3bd3f9aff580", "message": "improve ordering docs", "committedDate": "2020-08-22T16:49:31Z", "type": "commit"}, {"oid": "92dcec1b20248ef0647323471892f711ad5c7b71", "url": "https://github.com/apache/kafka/commit/92dcec1b20248ef0647323471892f711ad5c7b71", "message": "fix range validator not needed", "committedDate": "2020-08-22T16:53:15Z", "type": "commit"}, {"oid": "26048cf65d3f8f5552d774e3c735233c76462a90", "url": "https://github.com/apache/kafka/commit/26048cf65d3f8f5552d774e3c735233c76462a90", "message": "improve tests", "committedDate": "2020-08-22T17:00:06Z", "type": "commit"}, {"oid": "07530e91e9913e6ecc0fe9995a25594a4fbb3a26", "url": "https://github.com/apache/kafka/commit/07530e91e9913e6ecc0fe9995a25594a4fbb3a26", "message": "improve range wrong order warning", "committedDate": "2020-08-22T17:06:19Z", "type": "commit"}, {"oid": "a733d3fe6056c44e11c6e7a5a0b40873f570aca3", "url": "https://github.com/apache/kafka/commit/a733d3fe6056c44e11c6e7a5a0b40873f570aca3", "message": "key/value reverse operation", "committedDate": "2020-08-22T17:06:20Z", "type": "commit"}, {"oid": "843980ba4eb35e67409f759f8af3be3991e8e4c1", "url": "https://github.com/apache/kafka/commit/843980ba4eb35e67409f759f8af3be3991e8e4c1", "message": "window backward operations", "committedDate": "2020-08-22T17:06:20Z", "type": "commit"}, {"oid": "a8fc3a44eb0f225a40ae8a2f5385397285697253", "url": "https://github.com/apache/kafka/commit/a8fc3a44eb0f225a40ae8a2f5385397285697253", "message": "small additions", "committedDate": "2020-08-22T17:06:20Z", "type": "commit"}, {"oid": "39405c6adfc0d330ee80c2ac1659365ec411fb82", "url": "https://github.com/apache/kafka/commit/39405c6adfc0d330ee80c2ac1659365ec411fb82", "message": "rearrange code", "committedDate": "2020-08-22T17:06:21Z", "type": "commit"}, {"oid": "1893fc1eaaa8792478b5ef11e4fe2412e6e73dec", "url": "https://github.com/apache/kafka/commit/1893fc1eaaa8792478b5ef11e4fe2412e6e73dec", "message": "improve time range comments", "committedDate": "2020-08-22T17:06:21Z", "type": "commit"}, {"oid": "f24e38ba26b5fd945df04e36afba12df08005783", "url": "https://github.com/apache/kafka/commit/f24e38ba26b5fd945df04e36afba12df08005783", "message": "fix bytes range validator not needed", "committedDate": "2020-08-22T17:06:21Z", "type": "commit"}, {"oid": "2cf2297e96bed7d5af34983b5445fca9c7d7d35e", "url": "https://github.com/apache/kafka/commit/2cf2297e96bed7d5af34983b5445fca9c7d7d35e", "message": "fix cache iterator", "committedDate": "2020-08-22T17:06:21Z", "type": "commit"}, {"oid": "24b6e71cddcebb96645f7e7ba36f64403d9cc3fe", "url": "https://github.com/apache/kafka/commit/24b6e71cddcebb96645f7e7ba36f64403d9cc3fe", "message": "fix syntax", "committedDate": "2020-08-22T17:06:22Z", "type": "commit"}, {"oid": "56630d2a81cd4731382ebc1c12c971a3115c2620", "url": "https://github.com/apache/kafka/commit/56630d2a81cd4731382ebc1c12c971a3115c2620", "message": "improve tests exception handling", "committedDate": "2020-08-22T17:06:22Z", "type": "commit"}, {"oid": "92e39ff2375e0b4ebd7aca9eeacfb208b34ef0da", "url": "https://github.com/apache/kafka/commit/92e39ff2375e0b4ebd7aca9eeacfb208b34ef0da", "message": "fix ordered set", "committedDate": "2020-08-22T17:06:22Z", "type": "commit"}, {"oid": "2a428d3d6abc5c2bc4f8210950269cd3a1f65941", "url": "https://github.com/apache/kafka/commit/2a428d3d6abc5c2bc4f8210950269cd3a1f65941", "message": "replace reverse with forward", "committedDate": "2020-08-22T17:06:23Z", "type": "commit"}, {"oid": "0871d19e1ef14a5fd56a56c8ec9725cb8fcbd29a", "url": "https://github.com/apache/kafka/commit/0871d19e1ef14a5fd56a56c8ec9725cb8fcbd29a", "message": "replace backward with forward flag", "committedDate": "2020-08-22T17:06:23Z", "type": "commit"}, {"oid": "0871d19e1ef14a5fd56a56c8ec9725cb8fcbd29a", "url": "https://github.com/apache/kafka/commit/0871d19e1ef14a5fd56a56c8ec9725cb8fcbd29a", "message": "replace backward with forward flag", "committedDate": "2020-08-22T17:06:23Z", "type": "forcePushed"}, {"oid": "07557b40127cfbb457686dc1bc262492546bface", "url": "https://github.com/apache/kafka/commit/07557b40127cfbb457686dc1bc262492546bface", "message": "apply suggestions", "committedDate": "2020-08-24T21:18:01Z", "type": "commit"}, {"oid": "33ee2a1039d922fb91af8b9d75c94be8fdbbbb5e", "url": "https://github.com/apache/kafka/commit/33ee2a1039d922fb91af8b9d75c94be8fdbbbb5e", "message": "fix: iterate segments backwards", "committedDate": "2020-08-24T23:38:27Z", "type": "commit"}, {"oid": "8725a7ea27db07273e9c19ec196f5b66c2d69f83", "url": "https://github.com/apache/kafka/commit/8725a7ea27db07273e9c19ec196f5b66c2d69f83", "message": "fix iteration", "committedDate": "2020-08-25T08:50:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NjY0NA==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r476956644", "bodyText": "I guess we should use the long signature here too, and do the conversion from Instant to long in a default implementation on the WindowStore interface?", "author": "ableegoldman", "createdAt": "2020-08-26T01:36:07Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java", "diffHunk": "@@ -201,18 +203,48 @@ public synchronized void put(final Bytes key,\n         }\n \n         final PeekingKeyValueIterator<Bytes, LRUCacheEntry> cacheIterator = wrapped().persistent() ?\n-            new CacheIteratorWrapper(key, timeFrom, timeTo) :\n-            context.cache().range(cacheName,\n-                        cacheFunction.cacheKey(keySchema.lowerRangeFixedSize(key, timeFrom)),\n-                        cacheFunction.cacheKey(keySchema.upperRangeFixedSize(key, timeTo))\n+            new CacheIteratorWrapper(key, timeFrom, timeTo, true) :\n+            context.cache().range(\n+                cacheName,\n+                cacheFunction.cacheKey(keySchema.lowerRangeFixedSize(key, timeFrom)),\n+                cacheFunction.cacheKey(keySchema.upperRangeFixedSize(key, timeTo))\n             );\n \n         final HasNextCondition hasNextCondition = keySchema.hasNextCondition(key, key, timeFrom, timeTo);\n-        final PeekingKeyValueIterator<Bytes, LRUCacheEntry> filteredCacheIterator = new FilteredCacheIterator(\n-            cacheIterator, hasNextCondition, cacheFunction\n-        );\n+        final PeekingKeyValueIterator<Bytes, LRUCacheEntry> filteredCacheIterator =\n+            new FilteredCacheIterator(cacheIterator, hasNextCondition, cacheFunction);\n \n-        return new MergedSortedCacheWindowStoreIterator(filteredCacheIterator, underlyingIterator);\n+        return new MergedSortedCacheWindowStoreIterator(filteredCacheIterator, underlyingIterator, true);\n+    }\n+\n+    @Override\n+    public synchronized WindowStoreIterator<byte[]> backwardFetch(final Bytes key,\n+                                                                  final Instant from,\n+                                                                  final Instant to) {", "originalCommit": "8725a7ea27db07273e9c19ec196f5b66c2d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f81ba3985722efb1469dd653c44e8a2c17d1d8d", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java\nindex 8e0b274972..fbabfc2c61 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java\n\n@@ -219,15 +216,13 @@ class CachingWindowStore\n \n     @Override\n     public synchronized WindowStoreIterator<byte[]> backwardFetch(final Bytes key,\n-                                                                  final Instant from,\n-                                                                  final Instant to) {\n-        final long timeFrom = ApiUtils.validateMillisecondInstant(from, prepareMillisCheckFailMsgPrefix(from, \"from\"));\n-        final long timeTo = ApiUtils.validateMillisecondInstant(to, prepareMillisCheckFailMsgPrefix(to, \"to\"));\n+                                                                  final long timeFrom,\n+                                                                  final long timeTo) {\n         // since this function may not access the underlying inner store, we need to validate\n         // if store is open outside as well.\n         validateStoreOpen();\n \n-        final WindowStoreIterator<byte[]> underlyingIterator = wrapped().backwardFetch(key, from, to);\n+        final WindowStoreIterator<byte[]> underlyingIterator = wrapped().backwardFetch(key, timeFrom, timeTo);\n         if (context.cache() == null) {\n             return underlyingIterator;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk2MjA3NQ==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r476962075", "bodyText": "Guessing this is not actually meant to be commented out \ud83d\ude42", "author": "ableegoldman", "createdAt": "2020-08-26T01:44:13Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java", "diffHunk": "@@ -416,26 +552,43 @@ private long currentSegmentLastTime() {\n         }\n \n         private void getNextSegmentIterator() {\n-            ++currentSegmentId;\n-            lastSegmentId = cacheFunction.segmentId(Math.min(timeTo, maxObservedTimestamp.get()));\n+            if (forward) {\n+                ++currentSegmentId;\n+                lastSegmentId = cacheFunction.segmentId(Math.min(timeTo, maxObservedTimestamp.get()));\n \n-            if (currentSegmentId > lastSegmentId) {\n-                current = null;\n-                return;\n-            }\n+                if (currentSegmentId > lastSegmentId) {\n+                    current = null;\n+                    return;\n+                }\n \n-            setCacheKeyRange(currentSegmentBeginTime(), currentSegmentLastTime());\n+                setCacheKeyRange(currentSegmentBeginTime(), currentSegmentLastTime());\n \n-            current.close();\n-            current = context.cache().range(cacheName, cacheKeyFrom, cacheKeyTo);\n+                current.close();\n+\n+                current = context.cache().range(cacheName, cacheKeyFrom, cacheKeyTo);\n+            } else {\n+                --currentSegmentId;\n+//                lastSegmentId = cacheFunction.segmentId(Math.min(timeTo, maxObservedTimestamp.get()));", "originalCommit": "8725a7ea27db07273e9c19ec196f5b66c2d69f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjg4Mg==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r477436882", "bodyText": "actually it could be removed: lastSegmentId should be stable going backwards based on timeFrom.\nOn the if branch, I assume that lastSegmentId could change in between iterations if maxObservedTimestamp is updated right?", "author": "jeqo", "createdAt": "2020-08-26T16:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk2MjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MDAwOQ==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r478770009", "bodyText": "Ah, good catch. That sounds right, the ending segment shouldn't change when you iterate backwards", "author": "ableegoldman", "createdAt": "2020-08-28T00:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk2MjA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "86932775070f2c33eedacbb9341c5f819bdd0cf1", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java\nindex 8e0b274972..f04ebbde4c 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingWindowStore.java\n\n@@ -568,7 +568,6 @@ class CachingWindowStore\n                 current = context.cache().range(cacheName, cacheKeyFrom, cacheKeyTo);\n             } else {\n                 --currentSegmentId;\n-//                lastSegmentId = cacheFunction.segmentId(Math.min(timeTo, maxObservedTimestamp.get()));\n \n                 if (currentSegmentId < lastSegmentId) {\n                     current = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk2NTM5Nw==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r476965397", "bodyText": "It feels kind of ridiculous to convert this from a list to a set to an array all in one line. Maybe we can use assertThat(result, equalTo(expectedResult)) here like we've started to do elsewhere in Streams?", "author": "ableegoldman", "createdAt": "2020-08-26T01:49:05Z", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractWindowBytesStoreTest.java", "diffHunk": "@@ -287,17 +308,43 @@ public void shouldFetchAllInTimeRange() {\n         final KeyValue<Windowed<Integer>, String> four = windowedPair(4, \"four\", startTime + 4);\n         final KeyValue<Windowed<Integer>, String> five = windowedPair(5, \"five\", startTime + 5);\n \n-        assertEquals(\n-            new HashSet<>(asList(one, two, four)),\n-            toSet(windowStore.fetchAll(ofEpochMilli(startTime + 1), ofEpochMilli(startTime + 4)))\n+        assertArrayEquals(\n+            new LinkedHashSet<>(asList(one, two, four)).toArray(),\n+            toSet(windowStore.fetchAll(ofEpochMilli(startTime + 1), ofEpochMilli(startTime + 4))).toArray()\n         );\n-        assertEquals(\n-            new HashSet<>(asList(zero, one, two)),\n-            toSet(windowStore.fetchAll(ofEpochMilli(startTime + 0), ofEpochMilli(startTime + 3)))\n+        assertArrayEquals(\n+            new LinkedHashSet<>(asList(zero, one, two)).toArray(),\n+            toSet(windowStore.fetchAll(ofEpochMilli(startTime + 0), ofEpochMilli(startTime + 3))).toArray()\n         );\n-        assertEquals(\n-            new HashSet<>(asList(one, two, four, five)),\n-            toSet(windowStore.fetchAll(ofEpochMilli(startTime + 1), ofEpochMilli(startTime + 5)))\n+        assertArrayEquals(\n+            new LinkedHashSet<>(asList(one, two, four, five)).toArray(),", "originalCommit": "8725a7ea27db07273e9c19ec196f5b66c2d69f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0OTgwNA==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r478349804", "bodyText": "Wow this is embarrasing haha, looks like I was trying to get tests green without much thinking \ud83d\ude05", "author": "jeqo", "createdAt": "2020-08-27T11:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk2NTM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTQ5Mw==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r478769493", "bodyText": "Haha actually I think I was the one who added the initial conversion from list to set to begin with, so I was clearly asking for trouble", "author": "ableegoldman", "createdAt": "2020-08-28T00:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk2NTM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4f81ba3985722efb1469dd653c44e8a2c17d1d8d", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractWindowBytesStoreTest.java b/streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractWindowBytesStoreTest.java\nindex 84622150e5..0366fe57b6 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractWindowBytesStoreTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractWindowBytesStoreTest.java\n\n@@ -334,17 +335,17 @@ public abstract class AbstractWindowBytesStoreTest {\n         final KeyValue<Windowed<Integer>, String> four = windowedPair(4, \"four\", startTime + 4);\n         final KeyValue<Windowed<Integer>, String> five = windowedPair(5, \"five\", startTime + 5);\n \n-        assertArrayEquals(\n-            new LinkedHashSet<>(asList(four, two, one)).toArray(),\n-            toSet(windowStore.backwardFetchAll(ofEpochMilli(startTime + 1), ofEpochMilli(startTime + 4))).toArray()\n+        assertEquals(\n+            asList(four, two, one),\n+            toList(windowStore.backwardFetchAll(ofEpochMilli(startTime + 1), ofEpochMilli(startTime + 4)))\n         );\n-        assertArrayEquals(\n-            new LinkedHashSet<>(asList(two, one, zero)).toArray(),\n-            toSet(windowStore.backwardFetchAll(ofEpochMilli(startTime + 0), ofEpochMilli(startTime + 3))).toArray()\n+        assertEquals(\n+            asList(two, one, zero),\n+            toList(windowStore.backwardFetchAll(ofEpochMilli(startTime + 0), ofEpochMilli(startTime + 3)))\n         );\n-        assertArrayEquals(\n-            new LinkedHashSet<>(asList(five, four, two, one)).toArray(),\n-            toSet(windowStore.backwardFetchAll(ofEpochMilli(startTime + 1), ofEpochMilli(startTime + 5))).toArray()\n+        assertEquals(\n+            asList(five, four, two, one),\n+            toList(windowStore.backwardFetchAll(ofEpochMilli(startTime + 1), ofEpochMilli(startTime + 5)))\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk2OTg0Nw==", "url": "https://github.com/apache/kafka/pull/9138#discussion_r476969847", "bodyText": "Same here (and all the backwards ReadOnlyWindowStoreStub methods): I think we are kind of forced to invert the key ordering for the backwards fetch methods as well, even if we don't necessarily want to. Probably users shouldn't be relying on a strict ordering of the keys anyway but we do have to match the ordering of the cache", "author": "ableegoldman", "createdAt": "2020-08-26T01:55:18Z", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java", "diffHunk": "@@ -104,7 +121,47 @@ public V fetch(final K key, final long time) {\n \n         return new KeyValueIterator<Windowed<K>, V>() {\n             @Override\n-            public void close() {}\n+            public void close() {\n+            }\n+\n+            @Override\n+            public Windowed<K> peekNextKey() {\n+                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                return iterator.hasNext();\n+            }\n+\n+            @Override\n+            public KeyValue<Windowed<K>, V> next() {\n+                return iterator.next();\n+            }\n+\n+        };\n+    }\n+\n+    @Override\n+    public KeyValueIterator<Windowed<K>, V> backwardAll() {\n+        if (!open) {\n+            throw new InvalidStateStoreException(\"Store is not open\");\n+        }\n+        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n+        for (final long now : data.keySet()) {", "originalCommit": "8725a7ea27db07273e9c19ec196f5b66c2d69f83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a98827659a461e32641ea9781476b829f41e1c14", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java b/streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java\nindex 9407dab54c..f724047498 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java\n\n@@ -148,7 +155,7 @@ public class ReadOnlyWindowStoreStub<K, V> implements ReadOnlyWindowStore<K, V>,\n             throw new InvalidStateStoreException(\"Store is not open\");\n         }\n         final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n-        for (final long now : data.keySet()) {\n+        for (final long now : data.descendingKeySet()) {\n             final NavigableMap<K, V> kvMap = data.get(now);\n             if (kvMap != null) {\n                 for (final Entry<K, V> entry : kvMap.descendingMap().entrySet()) {\n"}}, {"oid": "86932775070f2c33eedacbb9341c5f819bdd0cf1", "url": "https://github.com/apache/kafka/commit/86932775070f2c33eedacbb9341c5f819bdd0cf1", "message": "remove commented code", "committedDate": "2020-08-26T16:32:07Z", "type": "commit"}, {"oid": "4f81ba3985722efb1469dd653c44e8a2c17d1d8d", "url": "https://github.com/apache/kafka/commit/4f81ba3985722efb1469dd653c44e8a2c17d1d8d", "message": "adding long variant to backward methods.", "committedDate": "2020-08-27T09:50:11Z", "type": "commit"}, {"oid": "a98827659a461e32641ea9781476b829f41e1c14", "url": "https://github.com/apache/kafka/commit/a98827659a461e32641ea9781476b829f41e1c14", "message": "fix: remove redundant array/set/list equals assertions", "committedDate": "2020-08-27T14:18:39Z", "type": "commit"}, {"oid": "4ec40063d629db053853b5c77caa535b5644edd9", "url": "https://github.com/apache/kafka/commit/4ec40063d629db053853b5c77caa535b5644edd9", "message": "fix exception comment case", "committedDate": "2020-09-01T18:13:40Z", "type": "commit"}, {"oid": "814ef3bcc82bc1241d5b732c2ce1e00c2308cb73", "url": "https://github.com/apache/kafka/commit/814ef3bcc82bc1241d5b732c2ce1e00c2308cb73", "message": "align var names and exceptions", "committedDate": "2020-09-02T08:59:18Z", "type": "commit"}, {"oid": "814ef3bcc82bc1241d5b732c2ce1e00c2308cb73", "url": "https://github.com/apache/kafka/commit/814ef3bcc82bc1241d5b732c2ce1e00c2308cb73", "message": "align var names and exceptions", "committedDate": "2020-09-02T08:59:18Z", "type": "forcePushed"}, {"oid": "58ce1d2d1eea3757548cd8975fe3213804d16b21", "url": "https://github.com/apache/kafka/commit/58ce1d2d1eea3757548cd8975fe3213804d16b21", "message": "fix check style", "committedDate": "2020-09-02T14:02:39Z", "type": "commit"}, {"oid": "f66f247a7e76907caebb44c33d1e562bd707f51a", "url": "https://github.com/apache/kafka/commit/f66f247a7e76907caebb44c33d1e562bd707f51a", "message": "fix check style", "committedDate": "2020-09-02T14:16:17Z", "type": "commit"}, {"oid": "1ccaa57d3e3e7953619c35933c257c416ecca01b", "url": "https://github.com/apache/kafka/commit/1ccaa57d3e3e7953619c35933c257c416ecca01b", "message": "range and all already available on kvstore", "committedDate": "2020-09-02T14:40:06Z", "type": "commit"}, {"oid": "273f612bfe98c58c40e77ec8a2d77e5eabdd2f18", "url": "https://github.com/apache/kafka/commit/273f612bfe98c58c40e77ec8a2d77e5eabdd2f18", "message": "add default impl", "committedDate": "2020-09-02T15:24:38Z", "type": "commit"}]}