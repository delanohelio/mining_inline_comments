{"pr_number": 9319, "pr_title": "KAFKA-10413: Allow for even distribution of lost/new tasks when multiple Connect workers join at the same time", "pr_createdAt": "2020-09-22T11:20:50Z", "pr_url": "https://github.com/apache/kafka/pull/9319", "timeline": [{"oid": "1cc99b1c13e1fae3b0fad687f6c4fb3f1008e5d6", "url": "https://github.com/apache/kafka/commit/1cc99b1c13e1fae3b0fad687f6c4fb3f1008e5d6", "message": "Allow even distribution of lost/new tasks when more than one worker joins the group at the same time", "committedDate": "2020-09-22T11:18:25Z", "type": "commit"}, {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "url": "https://github.com/apache/kafka/commit/7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "message": "fix code style and reduce NPath complexity", "committedDate": "2020-09-22T12:16:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjE4Mg==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496296182", "bodyText": "Can you please make this log message more readable?", "author": "rhauch", "createdAt": "2020-09-28T23:48:29Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assgn post lb calculation: {}\", toRevoke);", "originalCommit": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgwMzAxNw==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r506803017", "bodyText": "I have updated the message.", "author": "ramesh-muthusamy", "createdAt": "2020-10-17T05:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex aad443f777..a04cf8087d 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -259,7 +259,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-        log.debug(\"Connector and task to revoke assgn post lb calculation: {}\", toRevoke);\n+        log.debug(\"Connector and task to revoke assignment post load balancer calculation: {}\", toRevoke);\n         // Compute the connectors-and-tasks to be revoked for load balancing without taking into\n         // account the deleted ones.\n         log.debug(\"Can leader revoke tasks in this assignment? {} (delay: {})\", canRevoke, delay);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NzE5MQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496297191", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n          \n          \n            \n                            log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n          \n          \n            \n                                    candidateWorkerLoad.size(),\n          \n          \n            \n                                    candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));", "author": "rhauch", "createdAt": "2020-09-28T23:52:06Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));", "originalCommit": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3ec70e05dc4d2e29736b9c3167e87dd15767ba3", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex aad443f777..da26993963 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -450,7 +450,9 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n             }\n \n             if (!candidateWorkerLoad.isEmpty()) {\n-                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n+                        candidateWorkerLoad.size(),\n+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n                 Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n                 for (String connector : lostAssignments.connectors()) {\n                     // Loop over the the candidate workers as many times as it takes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODIwNg==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496298206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());\n          \n      \n    \n    \n  \n\nDo we need both of these debug messages? After all, worker.assign(...) is just adding a string to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.", "author": "rhauch", "createdAt": "2020-09-28T23:55:49Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning connector id {} to member {}\", connector, worker.worker());\n+                    worker.assign(connector);\n+                    log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());", "originalCommit": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3ec70e05dc4d2e29736b9c3167e87dd15767ba3", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex aad443f777..da26993963 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -450,7 +450,9 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n             }\n \n             if (!candidateWorkerLoad.isEmpty()) {\n-                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n+                        candidateWorkerLoad.size(),\n+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n                 Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n                 for (String connector : lostAssignments.connectors()) {\n                     // Loop over the the candidate workers as many times as it takes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODM3MA==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496298370", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Assigned task id {} to member {}\", task, worker.worker());\n          \n      \n    \n    \n  \n\nDo we need both of these debug messages? After all, worker.assign(...) is just adding a ConnectorTaskId to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.", "author": "rhauch", "createdAt": "2020-09-28T23:56:27Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning connector id {} to member {}\", connector, worker.worker());\n+                    worker.assign(connector);\n+                    log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());\n+                }\n+                candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (ConnectorTaskId task : lostAssignments.tasks()) {\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning task id {} to member {}\", task, worker.worker());\n+                    worker.assign(task);\n+                    log.debug(\"Assigned task id {} to member {}\", task, worker.worker());", "originalCommit": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3ec70e05dc4d2e29736b9c3167e87dd15767ba3", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex aad443f777..da26993963 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -450,7 +450,9 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n             }\n \n             if (!candidateWorkerLoad.isEmpty()) {\n-                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n+                        candidateWorkerLoad.size(),\n+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n                 Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n                 for (String connector : lostAssignments.connectors()) {\n                     // Loop over the the candidate workers as many times as it takes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTI0OA==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496299248", "bodyText": "What do you think about combining these log messages?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n          \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    log.debug(\"New rounded down (ceil) average number of tasks per worker {}\", ceilTasks);\n          \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    log.debug(\"New average number of tasks per worker: floor={}, ceiling={}\", floorTasks, ceilTasks);", "author": "rhauch", "createdAt": "2020-09-28T23:59:37Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -559,6 +576,8 @@ private void resetDelay() {\n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n         log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New rounded down (ceil) average number of tasks per worker {}\", ceilTasks);", "originalCommit": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "382e09e0a759a4069554561a3fcb415c8075bec1", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex aad443f777..180add8e31 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -575,9 +577,8 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n         int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n-        log.debug(\"New rounded down (ceil) average number of tasks per worker {}\", ceilTasks);\n+        log.debug(\"New average number of tasks per worker: floor={}, ceiling={}\", floorTasks, ceilTasks);\n \n         int numToRevoke = floorConnectors;\n         for (WorkerLoad existing : existingWorkers) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496300646", "bodyText": "Isn't it possible that numToRevoke might be negative?", "author": "rhauch", "createdAt": "2020-09-29T00:04:15Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "originalCommit": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgwMTY3OQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r506801679", "bodyText": "yes it can be and it is captured under the next for loop condition.", "author": "ramesh-muthusamy", "createdAt": "2020-10-17T05:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NzI1MQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512497251", "bodyText": "Can you explain a bit what you aim to achieve with this change here?", "author": "kkonstantine", "createdAt": "2020-10-27T08:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwMDE1OQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512500159", "bodyText": "Also, we apply this logic in tasks only. But why not in the connectors too, if it helps?", "author": "kkonstantine", "createdAt": "2020-10-27T08:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0NTY3Nw==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512945677", "bodyText": "@kkonstantine  we are trying to revoke the additional tasks assigned [if any] to a worker so that in the next stage the revoked tasks can be re assigned to the new workers that get added to the group.  Yes we need to apply this to connectors as well, I will update the PR for the changes .", "author": "ramesh-muthusamy", "createdAt": "2020-10-27T18:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9a4cc78247c2c0438592652bc4a0771cc29aac6c", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex aad443f777..af5226b909 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -597,7 +597,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n             numToRevoke = existing.tasksSize() - ceilTasks;\n-            log.debug(\"revoke number of tasks per worker {}\", numToRevoke);\n+            log.debug(\"Tasks on worker {} is higher than ceiling, so revoking {} tasks\", existing, numToRevoke);\n             for (int i = existing.tasksSize(); i > floorTasks && numToRevoke > 0; --i, --numToRevoke) {\n                 ConnectorsAndTasks resources = revoking.computeIfAbsent(\n                     existing.worker(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY5NA==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496300694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"revoke number of tasks per worker {}\", numToRevoke);\n          \n          \n            \n                        log.debug(\"Tasks on worker {} is higher than ceiling, so revoking {} tasks\", existing, numToRevoke);", "author": "rhauch", "createdAt": "2020-09-29T00:04:23Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;\n+            log.debug(\"revoke number of tasks per worker {}\", numToRevoke);", "originalCommit": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a4cc78247c2c0438592652bc4a0771cc29aac6c", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex aad443f777..af5226b909 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -597,7 +597,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n             numToRevoke = existing.tasksSize() - ceilTasks;\n-            log.debug(\"revoke number of tasks per worker {}\", numToRevoke);\n+            log.debug(\"Tasks on worker {} is higher than ceiling, so revoking {} tasks\", existing, numToRevoke);\n             for (int i = existing.tasksSize(); i > floorTasks && numToRevoke > 0; --i, --numToRevoke) {\n                 ConnectorsAndTasks resources = revoking.computeIfAbsent(\n                     existing.worker(),\n"}}, {"oid": "9a4cc78247c2c0438592652bc4a0771cc29aac6c", "url": "https://github.com/apache/kafka/commit/9a4cc78247c2c0438592652bc4a0771cc29aac6c", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>", "committedDate": "2020-10-17T05:18:59Z", "type": "commit"}, {"oid": "f3ec70e05dc4d2e29736b9c3167e87dd15767ba3", "url": "https://github.com/apache/kafka/commit/f3ec70e05dc4d2e29736b9c3167e87dd15767ba3", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>", "committedDate": "2020-10-17T05:19:22Z", "type": "commit"}, {"oid": "382e09e0a759a4069554561a3fcb415c8075bec1", "url": "https://github.com/apache/kafka/commit/382e09e0a759a4069554561a3fcb415c8075bec1", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>", "committedDate": "2020-10-17T05:19:33Z", "type": "commit"}, {"oid": "56d1f6dd01752ab0322b83ec9fd82d12e5fbf599", "url": "https://github.com/apache/kafka/commit/56d1f6dd01752ab0322b83ec9fd82d12e5fbf599", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>", "committedDate": "2020-10-17T05:19:53Z", "type": "commit"}, {"oid": "88335da4884139809f995e281c228f3ac6b9f374", "url": "https://github.com/apache/kafka/commit/88335da4884139809f995e281c228f3ac6b9f374", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>", "committedDate": "2020-10-17T05:20:02Z", "type": "commit"}, {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "url": "https://github.com/apache/kafka/commit/26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "message": "update log messages", "committedDate": "2020-10-17T05:21:14Z", "type": "commit"}, {"oid": "470d86bf0a67d0b156f8c792264f90fd56845a83", "url": "https://github.com/apache/kafka/commit/470d86bf0a67d0b156f8c792264f90fd56845a83", "message": "Check whether connectors and tasks are balanced in Connect integration test", "committedDate": "2020-10-27T07:59:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ4NzAzNg==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512487036", "bodyText": "Why do we print the assignment again here. They don't seem to change since we log them in line 249", "author": "kkonstantine", "createdAt": "2020-10-27T08:12:02Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assignment post load balancer calculation: {}\", toRevoke);", "originalCommit": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwNjMwNw==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r523906307", "bodyText": "This is resolved.", "author": "ramesh-muthusamy", "createdAt": "2020-11-16T05:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ4NzAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "66ab7c0e7e44ab6d427906f207ea1d2adf69eef7", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex a04cf8087d..93404be546 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -259,7 +259,6 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-        log.debug(\"Connector and task to revoke assignment post load balancer calculation: {}\", toRevoke);\n         // Compute the connectors-and-tasks to be revoked for load balancing without taking into\n         // account the deleted ones.\n         log.debug(\"Can leader revoke tasks in this assignment? {} (delay: {})\", canRevoke, delay);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MjU4Nw==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512492587", "bodyText": "So we balance the lost tasks among the new workers now. That balances the tasks but only among the new workers. Have you checked how this works with task revocation called right after?", "author": "kkonstantine", "createdAt": "2020-10-27T08:21:52Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n+                        candidateWorkerLoad.size(),\n+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes", "originalCommit": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzODYyMw==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512938623", "bodyText": "It not only balances the tasks for new workers it also does revocation if there is any overloaded worker.", "author": "ramesh-muthusamy", "createdAt": "2020-10-27T18:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MjU4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MzY4NA==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512493684", "bodyText": "This assignment is unused now.", "author": "kkonstantine", "createdAt": "2020-10-27T08:23:50Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +595,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;", "originalCommit": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzODAwNQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512938005", "bodyText": "yes , I will remove the same", "author": "ramesh-muthusamy", "createdAt": "2020-10-27T18:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MzY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwNjM1Ng==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r523906356", "bodyText": "this is resolved", "author": "ramesh-muthusamy", "createdAt": "2020-11-16T05:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MzY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "66ab7c0e7e44ab6d427906f207ea1d2adf69eef7", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex a04cf8087d..93404be546 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -592,7 +594,6 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n             }\n         }\n \n-        numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n             numToRevoke = existing.tasksSize() - ceilTasks;\n"}}, {"oid": "470d86bf0a67d0b156f8c792264f90fd56845a83", "url": "https://github.com/apache/kafka/commit/470d86bf0a67d0b156f8c792264f90fd56845a83", "message": "Check whether connectors and tasks are balanced in Connect integration test", "committedDate": "2020-10-27T07:59:51Z", "type": "forcePushed"}, {"oid": "66ab7c0e7e44ab6d427906f207ea1d2adf69eef7", "url": "https://github.com/apache/kafka/commit/66ab7c0e7e44ab6d427906f207ea1d2adf69eef7", "message": "remove unused variable assignment & remove redundant debug statement", "committedDate": "2020-11-16T05:34:46Z", "type": "commit"}, {"oid": "c3e6465ae872207873951427f1cfd9fae76f2de5", "url": "https://github.com/apache/kafka/commit/c3e6465ae872207873951427f1cfd9fae76f2de5", "message": "improve connector re assignment as new workers rejoin", "committedDate": "2020-11-16T05:38:30Z", "type": "commit"}, {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7", "url": "https://github.com/apache/kafka/commit/39b2311f297e72bc7add74d78abc899219d18ba7", "message": "update logs triggering UT", "committedDate": "2020-12-18T07:07:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODMzOTc1NA==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568339754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n          \n          \n            \n                    log.debug(\"New average number of connectors per worker rounded down (floor) {} and rounded up (ceil) {}\", floorConnectors, ceilConnectors);", "author": "kkonstantine", "createdAt": "2021-02-02T05:54:01Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);", "originalCommit": "39b2311f297e72bc7add74d78abc899219d18ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b23c646ca1caf7648f46f2bfdc811a363e283600", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex 3ef172819b..1300ff9fc1 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -576,7 +576,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);\n         log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n         int numToRevoke;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0MDAyOQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568340029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n          \n          \n            \n                    log.debug(\"New average number of tasks per worker rounded down (floor) {} and rounded up (ceil) {}\", floorTasks, ceilTasks);", "author": "kkonstantine", "createdAt": "2021-02-02T05:54:56Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);", "originalCommit": "39b2311f297e72bc7add74d78abc899219d18ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b23c646ca1caf7648f46f2bfdc811a363e283600", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex 3ef172819b..1300ff9fc1 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -576,7 +576,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);\n         log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n         int numToRevoke;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NDcyNQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568344725", "bodyText": "We can use the fact that these are non-negative integers.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);", "author": "kkonstantine", "createdAt": "2021-02-02T06:08:59Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);", "originalCommit": "39b2311f297e72bc7add74d78abc899219d18ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b23c646ca1caf7648f46f2bfdc811a363e283600", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex 3ef172819b..1300ff9fc1 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -576,7 +576,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);\n         log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n         int numToRevoke;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NDk4MA==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568344980", "bodyText": "We can use the fact that these are non-negative integers.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n          \n          \n            \n                    int ceilConnectors = floorConnectors + ((totalActiveConnectorsNum % totalWorkersNum == 0) ? 0 : 1);", "author": "kkonstantine", "createdAt": "2021-02-02T06:09:47Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);", "originalCommit": "39b2311f297e72bc7add74d78abc899219d18ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b23c646ca1caf7648f46f2bfdc811a363e283600", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex 3ef172819b..1300ff9fc1 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -576,7 +576,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);\n         log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n         int numToRevoke;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NTEzMg==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568345132", "bodyText": "nit: unneeded change", "author": "kkonstantine", "createdAt": "2021-02-02T06:10:11Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,6 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-", "originalCommit": "39b2311f297e72bc7add74d78abc899219d18ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1MTA4MQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568351081", "bodyText": "thanks resolved it", "author": "ramesh-muthusamy", "createdAt": "2021-02-02T06:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NTEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "f3f74e29a11e7746da23e6c917270644c15c1d83", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex 3ef172819b..c3f2f4bc44 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -259,6 +259,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n+\n         // Compute the connectors-and-tasks to be revoked for load balancing without taking into\n         // account the deleted ones.\n         log.debug(\"Can leader revoke tasks in this assignment? {} (delay: {})\", canRevoke, delay);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NjI4Mw==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568346283", "bodyText": "we should remove the if branch on the numToRevoke here too, right?", "author": "kkonstantine", "createdAt": "2021-02-02T06:13:55Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n+        int numToRevoke;\n \n-        int numToRevoke = floorConnectors;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<String> connectors = existing.connectors().iterator();\n+            numToRevoke = existing.connectorsSize() - ceilConnectors;", "originalCommit": "39b2311f297e72bc7add74d78abc899219d18ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1MDI2OQ==", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568350269", "bodyText": "removed the if block , thanks for pointing out.", "author": "ramesh-muthusamy", "createdAt": "2021-02-02T06:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NjI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b23c646ca1caf7648f46f2bfdc811a363e283600", "chunk": "diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\nindex 3ef172819b..1300ff9fc1 100644\n--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\n@@ -576,7 +576,7 @@ public class IncrementalCooperativeAssignor implements ConnectAssignor {\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);\n         log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n         int numToRevoke;\n \n"}}, {"oid": "b23c646ca1caf7648f46f2bfdc811a363e283600", "url": "https://github.com/apache/kafka/commit/b23c646ca1caf7648f46f2bfdc811a363e283600", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>", "committedDate": "2021-02-02T06:21:25Z", "type": "commit"}, {"oid": "b9c0b653ad09d8b13b85b4eb1cea840d533afe01", "url": "https://github.com/apache/kafka/commit/b9c0b653ad09d8b13b85b4eb1cea840d533afe01", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>", "committedDate": "2021-02-02T06:21:37Z", "type": "commit"}, {"oid": "fb7dd549e8d6cc5aaeb6e40d02d1257a34625b1e", "url": "https://github.com/apache/kafka/commit/fb7dd549e8d6cc5aaeb6e40d02d1257a34625b1e", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>", "committedDate": "2021-02-02T06:21:49Z", "type": "commit"}, {"oid": "a084f7391179c2ddb5b281eceff268af9c905f11", "url": "https://github.com/apache/kafka/commit/a084f7391179c2ddb5b281eceff268af9c905f11", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>", "committedDate": "2021-02-02T06:22:00Z", "type": "commit"}, {"oid": "0de00e654a84900660f945740b650e33afd55a30", "url": "https://github.com/apache/kafka/commit/0de00e654a84900660f945740b650e33afd55a30", "message": "incorporate review comments removing the if num to revoke block for connector rebalance", "committedDate": "2021-02-02T06:24:20Z", "type": "commit"}, {"oid": "f3f74e29a11e7746da23e6c917270644c15c1d83", "url": "https://github.com/apache/kafka/commit/f3f74e29a11e7746da23e6c917270644c15c1d83", "message": "removed unintedend change", "committedDate": "2021-02-02T06:26:43Z", "type": "commit"}]}