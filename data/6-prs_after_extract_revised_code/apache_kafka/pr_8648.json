{"pr_number": 8648, "pr_title": "KAFKA-9966: add internal assignment listener to stabilize eos-beta upgrade test", "pr_createdAt": "2020-05-12T02:07:06Z", "pr_url": "https://github.com/apache/kafka/pull/8648", "timeline": [{"oid": "37bf2a6bbd0f20837dcdfac2692667206b91b70e", "url": "https://github.com/apache/kafka/commit/37bf2a6bbd0f20837dcdfac2692667206b91b70e", "message": "refactor AssignorConfiguration some, add listener for callback", "committedDate": "2020-05-12T22:34:19Z", "type": "commit"}, {"oid": "37bf2a6bbd0f20837dcdfac2692667206b91b70e", "url": "https://github.com/apache/kafka/commit/37bf2a6bbd0f20837dcdfac2692667206b91b70e", "message": "refactor AssignorConfiguration some, add listener for callback", "committedDate": "2020-05-12T22:34:19Z", "type": "forcePushed"}, {"oid": "21e51d2535ac9c648de50e870f59e07bf9b61b13", "url": "https://github.com/apache/kafka/commit/21e51d2535ac9c648de50e870f59e07bf9b61b13", "message": "remove get prefix", "committedDate": "2020-05-12T22:37:51Z", "type": "commit"}, {"oid": "3654b4712eb6f8236f4bdf20bd58abddd7de6d97", "url": "https://github.com/apache/kafka/commit/3654b4712eb6f8236f4bdf20bd58abddd7de6d97", "message": "keep Ignore for now", "committedDate": "2020-05-12T22:40:08Z", "type": "commit"}, {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "url": "https://github.com/apache/kafka/commit/c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "message": "checkstyle", "committedDate": "2020-05-12T22:45:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NzgwOA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424077808", "bodyText": "This is the only non-cosmetic change in this class, along with the interface added below", "author": "ableegoldman", "createdAt": "2020-05-12T22:50:07Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -340,6 +319,27 @@ public TaskAssignor getTaskAssignor() {\n         }\n     }\n \n+    public AssignmentListener assignmentListener() {", "originalCommit": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk0Mw==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424078943", "bodyText": "Sorry for all the lines of changes here, but the inconsistent method signatures and object construction was making this class hard to follow. All I'm doing here is making the methods conform to the same style, and moving the construction of any config that isn't needed elsewhere to its getter method. This allows us to remove a lot of these class variables", "author": "ableegoldman", "createdAt": "2020-05-12T22:53:16Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -47,59 +47,21 @@\n \n     private final String logPrefix;\n     private final Logger log;\n-    private final AssignmentConfigs assignmentConfigs;\n-    @SuppressWarnings(\"deprecation\")\n-    private final org.apache.kafka.streams.processor.PartitionGrouper partitionGrouper;\n-    private final String userEndPoint;\n     private final TaskManager taskManager;\n-    private final StreamsMetadataState streamsMetadataState;", "originalCommit": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTA1NA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424091054", "bodyText": "Do we know if the corresponding \"getters\" are called often or not? I guess the main idea behind having those member variables was to \"parse\" the config once as it's immutable anyway instead of each time a getter is called?", "author": "mjsax", "createdAt": "2020-05-12T23:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTM1NA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424095354", "bodyText": "They are not. We construct the AssignorConfiguration object once in StreamsPartitionAssignor#configure and call the getters immediately afterwards, and only there", "author": "ableegoldman", "createdAt": "2020-05-12T23:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTczNQ==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424079735", "bodyText": "This one actually might not be necessary, but I thought it was useful as a sanity check especially since we're trying to access the stores in some places", "author": "ableegoldman", "createdAt": "2020-05-12T22:55:41Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -906,29 +912,22 @@ public void close() { }\n         return streams;\n     }\n \n-    private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n-                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)\n-            throws Exception {\n-\n+    private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {", "originalCommit": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjE3Nw==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424092177", "bodyText": "Agreed.", "author": "mjsax", "createdAt": "2020-05-12T23:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "959e2217b04157736fd729fa4109901d3ea08496", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\nindex dcf89441d2..aac9a8ac88 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n\n@@ -914,7 +913,7 @@ public class EosBetaUpgradeIntegrationTest {\n \n     private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {\n         waitForCondition(\n-            () -> observed.get(observed.size() - 1).equals(new KeyValue<>(State.REBALANCING, State.RUNNING)),\n+            () -> !observed.isEmpty() && observed.get(observed.size() - 1).value.equals(State.RUNNING),\n             MAX_WAIT_TIME_MS,\n             () -> \"Client did not startup on time. Observers transitions: \" + observed\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjM3MA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424092370", "bodyText": "Seems this could fail if observed is empty?\nAlso, could we simplify this? We are only interested in RUNNING  state, right? So no need to check the previous state?", "author": "mjsax", "createdAt": "2020-05-12T23:34:34Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -906,29 +912,22 @@ public void close() { }\n         return streams;\n     }\n \n-    private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n-                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)\n-            throws Exception {\n-\n+    private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {\n         waitForCondition(\n-            () -> observed.equals(expected),\n+            () -> observed.get(observed.size() - 1).equals(new KeyValue<>(State.REBALANCING, State.RUNNING)),", "originalCommit": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNDE5MA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424104190", "bodyText": "True, I'll fix this", "author": "ableegoldman", "createdAt": "2020-05-13T00:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "959e2217b04157736fd729fa4109901d3ea08496", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\nindex dcf89441d2..aac9a8ac88 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n\n@@ -914,7 +913,7 @@ public class EosBetaUpgradeIntegrationTest {\n \n     private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {\n         waitForCondition(\n-            () -> observed.get(observed.size() - 1).equals(new KeyValue<>(State.REBALANCING, State.RUNNING)),\n+            () -> !observed.isEmpty() && observed.get(observed.size() - 1).value.equals(State.RUNNING),\n             MAX_WAIT_TIME_MS,\n             () -> \"Client did not startup on time. Observers transitions: \" + observed\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjkzOA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424092938", "bodyText": "Why this change?", "author": "mjsax", "createdAt": "2020-05-12T23:36:24Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1274,6 +1274,7 @@ public void shouldThrowExceptionIfApplicationServerConfigIsNotHostPortPair() {\n \n     @Test\n     public void shouldThrowExceptionIfApplicationServerConfigPortIsNotAnInteger() {\n+        createDefaultMockTaskManager();", "originalCommit": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNTM0OA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424105348", "bodyText": "If we don't configure the TaskManager then we'll throw (the wrong kind of) exception during configure. Previously this test just happened to pass because we processed the user endpoint before we processed the TaskManager, so we never got to the TaskManager", "author": "ableegoldman", "createdAt": "2020-05-13T00:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjkzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzgwMQ==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424093801", "bodyText": "So far we always pass in assignmentListener.numStableAssignments() + 1 -- hence, I am wondering if we need to pass it at all?", "author": "mjsax", "createdAt": "2020-05-12T23:39:03Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -261,24 +241,24 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             streams1Alpha.setStateListener(\n                 (newState, oldState) -> stateTransitions1.add(KeyValue.pair(oldState, newState))\n             );\n+            int expectedNumStableAssignments = assignmentListener.numStableAssignments() + 1;\n             streams1Alpha.cleanUp();\n             streams1Alpha.start();\n-            waitForStateTransition(\n-                stateTransitions1,\n-                Arrays.asList(\n-                    KeyValue.pair(KafkaStreams.State.CREATED, KafkaStreams.State.REBALANCING),\n-                    KeyValue.pair(KafkaStreams.State.REBALANCING, KafkaStreams.State.RUNNING)\n-                )\n-            );\n+            assignmentListener.waitForNextStableAssignment(expectedNumStableAssignments, MAX_WAIT_TIME_MS);", "originalCommit": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzE3NA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424103174", "bodyText": "Well we need to record it before doing whatever action causes the group to rebalance. But maybe we can do something like prepareForRebalance if that seems easier?", "author": "ableegoldman", "createdAt": "2020-05-13T00:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNjcxNQ==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424106715", "bodyText": "I see. Guess it's good as-is.", "author": "mjsax", "createdAt": "2020-05-13T00:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "959e2217b04157736fd729fa4109901d3ea08496", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\nindex dcf89441d2..aac9a8ac88 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n\n@@ -241,10 +241,11 @@ public class EosBetaUpgradeIntegrationTest {\n             streams1Alpha.setStateListener(\n                 (newState, oldState) -> stateTransitions1.add(KeyValue.pair(oldState, newState))\n             );\n-            int expectedNumStableAssignments = assignmentListener.numStableAssignments() + 1;\n+\n+            assignmentListener.prepareForRebalance();\n             streams1Alpha.cleanUp();\n             streams1Alpha.start();\n-            assignmentListener.waitForNextStableAssignment(expectedNumStableAssignments, MAX_WAIT_TIME_MS);\n+            assignmentListener.waitForNextStableAssignment(MAX_WAIT_TIME_MS);\n             waitForRunning(stateTransitions1);\n \n             streams2Alpha = getKafkaStreams(\"appDir2\", StreamsConfig.EXACTLY_ONCE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NDUwOA==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424094508", "bodyText": "Why do we need this? If we don't inject an error, we start phase 6 in RUNNING state and it should not rebalance.", "author": "mjsax", "createdAt": "2020-05-12T23:41:26Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -466,6 +452,9 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 verifyCommitted(expectedCommittedResult);\n                 expectedUncommittedResult.addAll(expectedCommittedResult);\n             } else {\n+                waitForRunning(stateTransitions1);\n+                waitForRunning(stateTransitions2);", "originalCommit": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzY3Ng==", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424103676", "bodyText": "Good point", "author": "ableegoldman", "createdAt": "2020-05-13T00:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NDUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "959e2217b04157736fd729fa4109901d3ea08496", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\nindex dcf89441d2..aac9a8ac88 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java\n\n@@ -452,9 +453,6 @@ public class EosBetaUpgradeIntegrationTest {\n                 verifyCommitted(expectedCommittedResult);\n                 expectedUncommittedResult.addAll(expectedCommittedResult);\n             } else {\n-                waitForRunning(stateTransitions1);\n-                waitForRunning(stateTransitions2);\n-\n                 final Set<Long> keysFirstClient = keysFromInstance(streams1Beta);\n                 final Set<Long> keysSecondClient = keysFromInstance(streams2Alpha);\n \n"}}, {"oid": "959e2217b04157736fd729fa4109901d3ea08496", "url": "https://github.com/apache/kafka/commit/959e2217b04157736fd729fa4109901d3ea08496", "message": "github review changes", "committedDate": "2020-05-13T00:20:40Z", "type": "commit"}]}