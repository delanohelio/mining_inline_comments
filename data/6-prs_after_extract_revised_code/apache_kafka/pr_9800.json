{"pr_number": 9800, "pr_title": "KAFKA-9274: Fix commit-TimeoutException handling for EOS", "pr_createdAt": "2020-12-30T21:38:19Z", "pr_url": "https://github.com/apache/kafka/pull/9800", "timeline": [{"oid": "192c73d17df12280af4f477be68844522aa84b66", "url": "https://github.com/apache/kafka/commit/192c73d17df12280af4f477be68844522aa84b66", "message": "KAFKA-9274: Fix commit-TimeoutException handling for EOS\n\nIf EOS is enabled and the TX commit fails with a timeout,\nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful, we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead, we should retry the (idempotent) commit of the TX,\nand start a new TX afterwards.", "committedDate": "2020-12-30T21:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MjgxMg==", "url": "https://github.com/apache/kafka/pull/9800#discussion_r551462812", "bodyText": "Could we add a comment here to explain why a task is not processable under pending transaction?", "author": "abbccdda", "createdAt": "2021-01-04T17:36:03Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -633,6 +636,10 @@ public boolean isProcessable(final long wallClockTime) {\n             return false;\n         }\n \n+        if (hasPendingTransaction) {", "originalCommit": "192c73d17df12280af4f477be68844522aa84b66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NDI1Ng==", "url": "https://github.com/apache/kafka/pull/9800#discussion_r552274256", "bodyText": "Sure. Just realizing that the variable name is not ideal -- it actually about an \"pending TX commit\"...", "author": "mjsax", "createdAt": "2021-01-06T00:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MjgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "45f25525172d533e62015c00e9236a3656850c02", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java\nindex 965bcdbde1..2ebc1558b3 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java\n\n@@ -636,7 +636,9 @@ public class StreamTask extends AbstractTask implements ProcessorNodePunctuator,\n             return false;\n         }\n \n-        if (hasPendingTransaction) {\n+        if (hasPendingTxCommit) {\n+            // if the task has a pending TX commit, we should just retry the commit but not process any records\n+            // thus, the task is not processable, even if there is available data in the record queue\n             return false;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2Mzg3Mw==", "url": "https://github.com/apache/kafka/pull/9800#discussion_r551463873", "bodyText": "Why do we need to assert twice?", "author": "abbccdda", "createdAt": "2021-01-04T17:38:05Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -408,9 +417,74 @@ public void shouldProcessInOrder() {\n         assertEquals(3, source2.numReceived);\n     }\n \n+    @Test\n+    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n+        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);\n+\n+        assertFalse(task.process(time.milliseconds()));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20),\n+            getConsumerRecord(partition1, 30)\n+        ));\n+\n+        assertTrue(task.process(time.milliseconds()));\n+        task.prepareCommit();\n+        assertTrue(task.process(time.milliseconds()));\n+        task.postCommit(false);\n+        assertTrue(task.process(time.milliseconds()));\n+\n+        assertFalse(task.process(time.milliseconds()));\n+    }\n+\n+    @Test\n+    public void shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled() {\n+        task = createStatelessTask(createConfig(StreamsConfig.EXACTLY_ONCE, \"0\"), StreamsConfig.METRICS_LATEST);\n+\n+        assertFalse(task.process(time.milliseconds()));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20),\n+            getConsumerRecord(partition1, 30)\n+        ));\n+\n+        assertTrue(task.process(time.milliseconds()));\n+        task.prepareCommit();\n+        assertFalse(task.process(time.milliseconds()));\n+        task.postCommit(false);\n+        assertTrue(task.process(time.milliseconds()));\n+        assertTrue(task.process(time.milliseconds()));", "originalCommit": "192c73d17df12280af4f477be68844522aa84b66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NTYyNA==", "url": "https://github.com/apache/kafka/pull/9800#discussion_r552275624", "bodyText": "We need to call process() twice here. We have 3 input records, and want to confirm that all three are processed. If we don't call process() two times here, the assert in L460 below would not return false.", "author": "mjsax", "createdAt": "2021-01-06T00:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2Mzg3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NDQxNA==", "url": "https://github.com/apache/kafka/pull/9800#discussion_r551464414", "bodyText": "nit: we may extract the common test logic to be reused by all 3 process record tests.", "author": "abbccdda", "createdAt": "2021-01-04T17:39:07Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -408,9 +417,74 @@ public void shouldProcessInOrder() {\n         assertEquals(3, source2.numReceived);\n     }\n \n+    @Test\n+    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n+        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);", "originalCommit": "192c73d17df12280af4f477be68844522aa84b66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxOTg2NQ==", "url": "https://github.com/apache/kafka/pull/9800#discussion_r552319865", "bodyText": "Thinking about it, the common test logic is so small, it seems to make the test hard to read if we extract it?", "author": "mjsax", "createdAt": "2021-01-06T01:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NDQxNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "45f25525172d533e62015c00e9236a3656850c02", "url": "https://github.com/apache/kafka/commit/45f25525172d533e62015c00e9236a3656850c02", "message": "Github comments", "committedDate": "2021-01-06T01:54:27Z", "type": "commit"}]}