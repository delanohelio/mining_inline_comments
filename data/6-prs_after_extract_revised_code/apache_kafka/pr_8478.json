{"pr_number": 8478, "pr_title": "HOTFIX: don't close or wipe out someone else's state", "pr_createdAt": "2020-04-14T02:06:20Z", "pr_url": "https://github.com/apache/kafka/pull/8478", "timeline": [{"oid": "682c27f08da915b620743125e6d3e9ba9fddba7c", "url": "https://github.com/apache/kafka/commit/682c27f08da915b620743125e6d3e9ba9fddba7c", "message": "need to ensure lock", "committedDate": "2020-04-14T22:35:53Z", "type": "commit"}, {"oid": "dad39b7e03f0098a4f4e4620b388e87770452bed", "url": "https://github.com/apache/kafka/commit/dad39b7e03f0098a4f4e4620b388e87770452bed", "message": "fix up tests, add new ones", "committedDate": "2020-04-14T23:06:56Z", "type": "commit"}, {"oid": "dad39b7e03f0098a4f4e4620b388e87770452bed", "url": "https://github.com/apache/kafka/commit/dad39b7e03f0098a4f4e4620b388e87770452bed", "message": "fix up tests, add new ones", "committedDate": "2020-04-14T23:06:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4OTI0OA==", "url": "https://github.com/apache/kafka/pull/8478#discussion_r408489248", "bodyText": "We actually were already throwing some ProcessorStateExceptions up through  close even when unclean, which I think was the cause of a bug we resolved a few weeks ago. Now we just make no assumptions about whether this will throw or not, and catch any exceptions in StreamTask / StandbyTask if it's a dirty close.", "author": "ableegoldman", "createdAt": "2020-04-14T23:14:13Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java", "diffHunk": "@@ -249,32 +247,35 @@ public void testCloseStateManagerOnlyThrowsFirstExceptionWhenClean() throws IOEx\n     }\n \n     @Test\n-    public void testCloseStateManagerDirtyShallSwallowException() throws IOException {\n-        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n-\n+    public void testCloseStateManagerThrowsExceptionWhenDirty() throws IOException {", "originalCommit": "dad39b7e03f0098a4f4e4620b388e87770452bed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjU0Nw==", "url": "https://github.com/apache/kafka/pull/8478#discussion_r409022547", "bodyText": "Nice clean, now we catch the exception in the caller.", "author": "guozhangwang", "createdAt": "2020-04-15T17:45:45Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateManagerUtil.java", "diffHunk": "@@ -92,49 +93,46 @@ static void registerStateStores(final Logger log,\n     static void closeStateManager(final Logger log,\n                                   final String logPrefix,\n                                   final boolean closeClean,\n-                                  final boolean wipeStateStore,\n+                                  final boolean eosEnabled,\n                                   final ProcessorStateManager stateMgr,\n                                   final StateDirectory stateDirectory,\n                                   final TaskType taskType) {\n-        if (closeClean && wipeStateStore) {\n-            throw new IllegalArgumentException(\"State store could not be wiped out during clean close\");\n-        }\n-\n-        ProcessorStateException exception = null;\n+        // if EOS is enabled, wipe out the whole state store for unclean close since it is now invalid\n+        final boolean wipeStateStore = !closeClean && eosEnabled;\n \n         final TaskId id = stateMgr.taskId();\n-        log.trace(\"Closing state manager for {}\", id);\n+        log.trace(\"Closing state manager for {} task {}\", taskType, id);\n \n+        final AtomicReference<ProcessorStateException> firstException = new AtomicReference<>(null);\n         try {\n-            stateMgr.close();\n-\n-            if (wipeStateStore) {\n-                // we can just delete the whole dir of the task, including the state store images and the checkpoint files,\n-                // and then we write an empty checkpoint file indicating that the previous close is graceful and we just\n-                // need to re-bootstrap the restoration from the beginning\n-                Utils.delete(stateMgr.baseDir());\n-            }\n-        } catch (final ProcessorStateException e) {\n-            exception = e;\n-        } catch (final IOException e) {\n-            throw new ProcessorStateException(\"Failed to wiping state stores for task \" + id, e);\n-        } finally {\n-            try {\n-                stateDirectory.unlock(id);\n-            } catch (final IOException e) {\n-                if (exception == null) {\n-                    exception = new ProcessorStateException(\n-                        String.format(\"%sFailed to release state dir lock\", logPrefix), e);\n+            if (stateDirectory.lock(id)) {\n+                try {\n+                    stateMgr.close();\n+\n+                    if (wipeStateStore) {\n+                        log.debug(\"Wiping state stores for {} task {}\", taskType, id);\n+                        // we can just delete the whole dir of the task, including the state store images and the checkpoint files,\n+                        // and then we write an empty checkpoint file indicating that the previous close is graceful and we just\n+                        // need to re-bootstrap the restoration from the beginning\n+                        Utils.delete(stateMgr.baseDir());\n+                    }\n+                } catch (final ProcessorStateException e) {\n+                    firstException.compareAndSet(null, e);\n+                } finally {\n+                    stateDirectory.unlock(id);\n                 }\n             }\n+        } catch (final IOException e) {\n+            final ProcessorStateException exception = new ProcessorStateException(\n+                String.format(\"%sFatal error while trying to close the state manager for task %s\", logPrefix, id), e\n+            );\n+            firstException.compareAndSet(null, exception);\n+\n         }\n \n+        final ProcessorStateException exception = firstException.get();\n         if (exception != null) {\n-            if (closeClean) {\n-                throw exception;\n-            } else {\n-                log.warn(\"Closing {} task {} uncleanly and swallows an exception\", taskType, id, exception);\n-            }\n+            throw exception;", "originalCommit": "dad39b7e03f0098a4f4e4620b388e87770452bed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyODA3OA==", "url": "https://github.com/apache/kafka/pull/8478#discussion_r409028078", "bodyText": "nit: we can throw AssertionError here to indicate this should not happen.", "author": "guozhangwang", "createdAt": "2020-04-15T17:54:59Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java", "diffHunk": "@@ -319,9 +322,47 @@ public void testCloseStateManagerWithStateStoreWipeOutRethrowWrappedIOException(\n             ProcessorStateException.class, () -> StateManagerUtil.closeStateManager(logger,\n                 \"logPrefix:\", false, true, stateManager, stateDirectory, TaskType.ACTIVE));\n \n-        assertEquals(\"Failed to wiping state stores for task 0_0\", thrown.getMessage());\n         assertEquals(IOException.class, thrown.getCause().getClass());\n \n         ctrl.verify();\n     }\n+\n+    @Test\n+    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {\n+        expect(stateManager.taskId()).andReturn(taskId);\n+\n+        expect(stateDirectory.lock(taskId)).andReturn(false);\n+\n+        stateManager.close();\n+        expectLastCall().andThrow(new StreamsException(\"Should not be trying to close state you don't own!\"));", "originalCommit": "dad39b7e03f0098a4f4e4620b388e87770452bed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ad8282dd07d2d4b91647f7f94fe235536139227", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\nindex f1b8d8baad..c5de838375 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n\n@@ -328,13 +328,13 @@ public class StateManagerUtilTest {\n     }\n \n     @Test\n-    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {\n+    public void shouldNotCloseStateManagerIfUnableToLockTaskDirectory() throws IOException {\n         expect(stateManager.taskId()).andReturn(taskId);\n \n         expect(stateDirectory.lock(taskId)).andReturn(false);\n \n         stateManager.close();\n-        expectLastCall().andThrow(new StreamsException(\"Should not be trying to close state you don't own!\"));\n+        expectLastCall().andThrow(new AssertionError(\"Should not be trying to close state you don't own!\"));\n \n         ctrl.checkOrder(true);\n         ctrl.replay();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyODE4Nw==", "url": "https://github.com/apache/kafka/pull/8478#discussion_r409028187", "bodyText": "nit: shouldNotClose...?", "author": "guozhangwang", "createdAt": "2020-04-15T17:55:09Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java", "diffHunk": "@@ -319,9 +322,47 @@ public void testCloseStateManagerWithStateStoreWipeOutRethrowWrappedIOException(\n             ProcessorStateException.class, () -> StateManagerUtil.closeStateManager(logger,\n                 \"logPrefix:\", false, true, stateManager, stateDirectory, TaskType.ACTIVE));\n \n-        assertEquals(\"Failed to wiping state stores for task 0_0\", thrown.getMessage());\n         assertEquals(IOException.class, thrown.getCause().getClass());\n \n         ctrl.verify();\n     }\n+\n+    @Test\n+    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {", "originalCommit": "dad39b7e03f0098a4f4e4620b388e87770452bed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ad8282dd07d2d4b91647f7f94fe235536139227", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\nindex f1b8d8baad..c5de838375 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n\n@@ -328,13 +328,13 @@ public class StateManagerUtilTest {\n     }\n \n     @Test\n-    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {\n+    public void shouldNotCloseStateManagerIfUnableToLockTaskDirectory() throws IOException {\n         expect(stateManager.taskId()).andReturn(taskId);\n \n         expect(stateDirectory.lock(taskId)).andReturn(false);\n \n         stateManager.close();\n-        expectLastCall().andThrow(new StreamsException(\"Should not be trying to close state you don't own!\"));\n+        expectLastCall().andThrow(new AssertionError(\"Should not be trying to close state you don't own!\"));\n \n         ctrl.checkOrder(true);\n         ctrl.replay();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMDk3Mg==", "url": "https://github.com/apache/kafka/pull/8478#discussion_r409030972", "bodyText": "nit: we can set eosEnabled to false since we set it to true in the next test?", "author": "guozhangwang", "createdAt": "2020-04-15T17:59:52Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java", "diffHunk": "@@ -319,9 +322,47 @@ public void testCloseStateManagerWithStateStoreWipeOutRethrowWrappedIOException(\n             ProcessorStateException.class, () -> StateManagerUtil.closeStateManager(logger,\n                 \"logPrefix:\", false, true, stateManager, stateDirectory, TaskType.ACTIVE));\n \n-        assertEquals(\"Failed to wiping state stores for task 0_0\", thrown.getMessage());\n         assertEquals(IOException.class, thrown.getCause().getClass());\n \n         ctrl.verify();\n     }\n+\n+    @Test\n+    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {\n+        expect(stateManager.taskId()).andReturn(taskId);\n+\n+        expect(stateDirectory.lock(taskId)).andReturn(false);\n+\n+        stateManager.close();\n+        expectLastCall().andThrow(new StreamsException(\"Should not be trying to close state you don't own!\"));\n+\n+        ctrl.checkOrder(true);\n+        ctrl.replay();\n+\n+        replayAll();\n+\n+        StateManagerUtil.closeStateManager(\n+            logger, \"logPrefix:\", false, true, stateManager, stateDirectory, TaskType.ACTIVE);", "originalCommit": "dad39b7e03f0098a4f4e4620b388e87770452bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NzIzNQ==", "url": "https://github.com/apache/kafka/pull/8478#discussion_r409047235", "bodyText": "good call", "author": "ableegoldman", "createdAt": "2020-04-15T18:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMDk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1ad8282dd07d2d4b91647f7f94fe235536139227", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\nindex f1b8d8baad..c5de838375 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n\n@@ -328,13 +328,13 @@ public class StateManagerUtilTest {\n     }\n \n     @Test\n-    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {\n+    public void shouldNotCloseStateManagerIfUnableToLockTaskDirectory() throws IOException {\n         expect(stateManager.taskId()).andReturn(taskId);\n \n         expect(stateDirectory.lock(taskId)).andReturn(false);\n \n         stateManager.close();\n-        expectLastCall().andThrow(new StreamsException(\"Should not be trying to close state you don't own!\"));\n+        expectLastCall().andThrow(new AssertionError(\"Should not be trying to close state you don't own!\"));\n \n         ctrl.checkOrder(true);\n         ctrl.replay();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMTM3Mw==", "url": "https://github.com/apache/kafka/pull/8478#discussion_r409031373", "bodyText": "Ditto here, we can use AssertionError", "author": "guozhangwang", "createdAt": "2020-04-15T18:00:34Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java", "diffHunk": "@@ -319,9 +322,47 @@ public void testCloseStateManagerWithStateStoreWipeOutRethrowWrappedIOException(\n             ProcessorStateException.class, () -> StateManagerUtil.closeStateManager(logger,\n                 \"logPrefix:\", false, true, stateManager, stateDirectory, TaskType.ACTIVE));\n \n-        assertEquals(\"Failed to wiping state stores for task 0_0\", thrown.getMessage());\n         assertEquals(IOException.class, thrown.getCause().getClass());\n \n         ctrl.verify();\n     }\n+\n+    @Test\n+    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {\n+        expect(stateManager.taskId()).andReturn(taskId);\n+\n+        expect(stateDirectory.lock(taskId)).andReturn(false);\n+\n+        stateManager.close();\n+        expectLastCall().andThrow(new StreamsException(\"Should not be trying to close state you don't own!\"));\n+\n+        ctrl.checkOrder(true);\n+        ctrl.replay();\n+\n+        replayAll();\n+\n+        StateManagerUtil.closeStateManager(\n+            logger, \"logPrefix:\", false, true, stateManager, stateDirectory, TaskType.ACTIVE);\n+    }\n+\n+    @Test\n+    public void shouldNotWipeStateStoresIfUnableToLockTaskDirectory() throws IOException {\n+        final File unknownFile = new File(\"/unknown/path\");\n+        expect(stateManager.taskId()).andReturn(taskId);\n+\n+        expect(stateDirectory.lock(taskId)).andReturn(false);\n+\n+        expect(stateManager.baseDir()).andReturn(unknownFile);\n+\n+        Utils.delete(unknownFile);\n+        expectLastCall().andThrow(new StreamsException(\"Should not be trying to wipe state you don't own!\"));", "originalCommit": "dad39b7e03f0098a4f4e4620b388e87770452bed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ad8282dd07d2d4b91647f7f94fe235536139227", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\nindex f1b8d8baad..c5de838375 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateManagerUtilTest.java\n\n@@ -328,13 +328,13 @@ public class StateManagerUtilTest {\n     }\n \n     @Test\n-    public void shouldNotStateManagerIfUnableToLockTaskDirectory() throws IOException {\n+    public void shouldNotCloseStateManagerIfUnableToLockTaskDirectory() throws IOException {\n         expect(stateManager.taskId()).andReturn(taskId);\n \n         expect(stateDirectory.lock(taskId)).andReturn(false);\n \n         stateManager.close();\n-        expectLastCall().andThrow(new StreamsException(\"Should not be trying to close state you don't own!\"));\n+        expectLastCall().andThrow(new AssertionError(\"Should not be trying to close state you don't own!\"));\n \n         ctrl.checkOrder(true);\n         ctrl.replay();\n"}}, {"oid": "1ad8282dd07d2d4b91647f7f94fe235536139227", "url": "https://github.com/apache/kafka/commit/1ad8282dd07d2d4b91647f7f94fe235536139227", "message": "github review", "committedDate": "2020-04-15T18:28:24Z", "type": "commit"}]}