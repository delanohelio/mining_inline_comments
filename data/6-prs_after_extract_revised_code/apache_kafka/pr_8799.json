{"pr_number": 8799, "pr_title": "KAFKA-8011: Fix flaky RegexSourceIntegrationTest", "pr_createdAt": "2020-06-04T01:33:07Z", "pr_url": "https://github.com/apache/kafka/pull/8799", "timeline": [{"oid": "897c2003c11e0324660d1f3bd877e4c281725737", "url": "https://github.com/apache/kafka/commit/897c2003c11e0324660d1f3bd877e4c281725737", "message": "KAFKA-8011: Fix flaky RegexSourceIntegrationTest", "committedDate": "2020-06-04T01:30:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r434944897", "bodyText": "Should we call close in the finally block? Here and elsewhere", "author": "ableegoldman", "createdAt": "2020-06-04T01:40:02Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -142,83 +142,89 @@ public void tearDown() throws IOException {\n \n     @Test\n     public void testRegexMatchesTopicsAWhenCreated() throws Exception {\n+        try {\n+            final Serde<String> stringSerde = Serdes.String();\n \n-        final Serde<String> stringSerde = Serdes.String();\n-\n-        final List<String> expectedFirstAssignment = Collections.singletonList(\"TEST-TOPIC-1\");\n-        // we compare lists of subscribed topics and hence requiring the order as well; this is guaranteed\n-        // with KIP-429 since we would NOT revoke TEST-TOPIC-1 but only add TEST-TOPIC-2 so the list is always\n-        // in the order of \"TEST-TOPIC-1, TEST-TOPIC-2\". Note if KIP-429 behavior ever changed it may become a flaky test\n-        final List<String> expectedSecondAssignment = Arrays.asList(\"TEST-TOPIC-1\", \"TEST-TOPIC-2\");\n+            final List<String> expectedFirstAssignment = Collections.singletonList(\"TEST-TOPIC-1\");\n+            // we compare lists of subscribed topics and hence requiring the order as well; this is guaranteed\n+            // with KIP-429 since we would NOT revoke TEST-TOPIC-1 but only add TEST-TOPIC-2 so the list is always\n+            // in the order of \"TEST-TOPIC-1, TEST-TOPIC-2\". Note if KIP-429 behavior ever changed it may become a flaky test\n+            final List<String> expectedSecondAssignment = Arrays.asList(\"TEST-TOPIC-1\", \"TEST-TOPIC-2\");\n \n-        CLUSTER.createTopic(\"TEST-TOPIC-1\");\n+            CLUSTER.createTopic(\"TEST-TOPIC-1\");\n \n-        final StreamsBuilder builder = new StreamsBuilder();\n+            final StreamsBuilder builder = new StreamsBuilder();\n \n-        final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n+            final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n \n-        pattern1Stream.to(outputTopic, Produced.with(stringSerde, stringSerde));\n-        final List<String> assignedTopics = new CopyOnWriteArrayList<>();\n-        streams = new KafkaStreams(builder.build(), streamsConfiguration, new DefaultKafkaClientSupplier() {\n-            @Override\n-            public Consumer<byte[], byte[]> getConsumer(final Map<String, Object> config) {\n-                return new KafkaConsumer<byte[], byte[]>(config, new ByteArrayDeserializer(), new ByteArrayDeserializer()) {\n-                    @Override\n-                    public void subscribe(final Pattern topics, final ConsumerRebalanceListener listener) {\n-                        super.subscribe(topics, new TheConsumerRebalanceListener(assignedTopics, listener));\n-                    }\n-                };\n+            pattern1Stream.to(outputTopic, Produced.with(stringSerde, stringSerde));\n+            final List<String> assignedTopics = new CopyOnWriteArrayList<>();\n+            streams = new KafkaStreams(builder.build(), streamsConfiguration, new DefaultKafkaClientSupplier() {\n+                @Override\n+                public Consumer<byte[], byte[]> getConsumer(final Map<String, Object> config) {\n+                    return new KafkaConsumer<byte[], byte[]>(config, new ByteArrayDeserializer(), new ByteArrayDeserializer()) {\n+                        @Override\n+                        public void subscribe(final Pattern topics, final ConsumerRebalanceListener listener) {\n+                            super.subscribe(topics, new TheConsumerRebalanceListener(assignedTopics, listener));\n+                        }\n+                    };\n \n-            }\n-        });\n+                }\n+            });\n \n-        streams.start();\n-        TestUtils.waitForCondition(() -> assignedTopics.equals(expectedFirstAssignment), STREAM_TASKS_NOT_UPDATED);\n+            streams.start();\n+            TestUtils.waitForCondition(() -> assignedTopics.equals(expectedFirstAssignment), STREAM_TASKS_NOT_UPDATED);\n \n-        CLUSTER.createTopic(\"TEST-TOPIC-2\");\n+            CLUSTER.createTopic(\"TEST-TOPIC-2\");\n \n-        TestUtils.waitForCondition(() -> assignedTopics.equals(expectedSecondAssignment), STREAM_TASKS_NOT_UPDATED);\n+            TestUtils.waitForCondition(() -> assignedTopics.equals(expectedSecondAssignment), STREAM_TASKS_NOT_UPDATED);\n \n-        streams.close();\n-        CLUSTER.deleteTopicsAndWait(\"TEST-TOPIC-1\", \"TEST-TOPIC-2\");\n+            streams.close();", "originalCommit": "897c2003c11e0324660d1f3bd877e4c281725737", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MzY1MA==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r435583650", "bodyText": "I don't think that is necessary -- there is an @After method that closed the client for us.", "author": "mjsax", "createdAt": "2020-06-04T22:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDQzOA==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r435584438", "bodyText": "Then why close it here as well?", "author": "ableegoldman", "createdAt": "2020-06-04T22:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NzAxNw==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r435587017", "bodyText": "I think it's better to first close it before we delete the topics.", "author": "mjsax", "createdAt": "2020-06-04T22:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4ODg0Nw==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r435588847", "bodyText": "Well, won't we end up deleting the topics before closing it if we never reach the first streams.close ? Or does it not really matter in that case since something has already gone wrong (just curious, I'm fine with it as-is btw)", "author": "ableegoldman", "createdAt": "2020-06-04T22:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NzM5Nw==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r435597397", "bodyText": "Yes, that is my reasoning.", "author": "mjsax", "createdAt": "2020-06-04T22:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4NTI5NA==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r435685294", "bodyText": "Why we need to call streams.close() inside the function given they are always called in tearDown? Ditto below.", "author": "guozhangwang", "createdAt": "2020-06-05T04:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2NTE3Mg==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r436065172", "bodyText": "As mentioned above: we should close the client before we delete the input topics. -- Seems cleaner.", "author": "mjsax", "createdAt": "2020-06-05T17:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDg5Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8c2a6d56caed5b12cf7bc5bd030be305de754b35", "url": "https://github.com/apache/kafka/commit/8c2a6d56caed5b12cf7bc5bd030be305de754b35", "message": "Minor", "committedDate": "2020-06-04T22:20:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4NDc0Mw==", "url": "https://github.com/apache/kafka/pull/8799#discussion_r435684743", "bodyText": "Could we use\n    @Rule\n    public TestName testName = new TestName();\n\ninstead as the suffix?", "author": "guozhangwang", "createdAt": "2020-06-05T04:34:02Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -124,7 +124,7 @@ public void setUp() throws InterruptedException {\n         properties.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, \"1000\");\n         properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n \n-        streamsConfiguration = StreamsTestUtils.getStreamsConfig(\"regex-source-integration-test\",\n+        streamsConfiguration = StreamsTestUtils.getStreamsConfig(\"regex-source-integration-test-\" + topicSuffixGenerator.get(),", "originalCommit": "8c2a6d56caed5b12cf7bc5bd030be305de754b35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93f6343fd7fea3076e5b345fce4b33613744faae", "chunk": "diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java\nindex bce5e3af01..44cc7459ce 100644\n--- a/streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java\n+++ b/streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java\n\n@@ -124,11 +125,13 @@ public class RegexSourceIntegrationTest {\n         properties.put(ConsumerConfig.METADATA_MAX_AGE_CONFIG, \"1000\");\n         properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n \n-        streamsConfiguration = StreamsTestUtils.getStreamsConfig(\"regex-source-integration-test-\" + topicSuffixGenerator.get(),\n-                                                                 CLUSTER.bootstrapServers(),\n-                                                                 STRING_SERDE_CLASSNAME,\n-                                                                 STRING_SERDE_CLASSNAME,\n-                                                                 properties);\n+        streamsConfiguration = StreamsTestUtils.getStreamsConfig(\n+            IntegrationTestUtils.safeUniqueTestName(RegexSourceIntegrationTest.class, new TestName()),\n+            CLUSTER.bootstrapServers(),\n+            STRING_SERDE_CLASSNAME,\n+            STRING_SERDE_CLASSNAME,\n+            properties\n+        );\n     }\n \n     @After\n"}}, {"oid": "93f6343fd7fea3076e5b345fce4b33613744faae", "url": "https://github.com/apache/kafka/commit/93f6343fd7fea3076e5b345fce4b33613744faae", "message": "Github comments", "committedDate": "2020-06-05T17:38:54Z", "type": "commit"}]}