{"pr_number": 9516, "pr_title": "MINOR: make Send and Receive work with TransferableChannel rather than Gat\u2026", "pr_createdAt": "2020-10-28T06:19:54Z", "pr_url": "https://github.com/apache/kafka/pull/9516", "timeline": [{"oid": "9369c7a67a66f55e1f0a93d8414d03a6e10ea410", "url": "https://github.com/apache/kafka/commit/9369c7a67a66f55e1f0a93d8414d03a6e10ea410", "message": "ByteBufferChannel to ByteBufferTransportLayer", "committedDate": "2020-11-18T17:17:14Z", "type": "forcePushed"}, {"oid": "8d6c1f6b755b02047976188bbfb6be78a444ada1", "url": "https://github.com/apache/kafka/commit/8d6c1f6b755b02047976188bbfb6be78a444ada1", "message": "ByteBufferChannel to ByteBufferTransportLayer", "committedDate": "2020-12-09T16:06:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1ODkzMg==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r539458932", "bodyText": "Do we need to change this? It seems like what we had before was good enough.", "author": "ijuma", "createdAt": "2020-12-09T16:33:45Z", "path": "clients/src/main/java/org/apache/kafka/common/network/NetworkReceive.java", "diffHunk": "@@ -89,7 +88,8 @@ public boolean complete() {\n         return !size.hasRemaining() && buffer != null && !buffer.hasRemaining();\n     }\n \n-    public long readFrom(ScatteringByteChannel channel) throws IOException {\n+    @Override\n+    public long readFrom(TransportLayer channel) throws IOException {", "originalCommit": "8d6c1f6b755b02047976188bbfb6be78a444ada1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2b996ec11dcd30302ad352371df19ec0fcdd694", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/network/NetworkReceive.java b/clients/src/main/java/org/apache/kafka/common/network/NetworkReceive.java\nindex 36083b6227..5332c8109f 100644\n--- a/clients/src/main/java/org/apache/kafka/common/network/NetworkReceive.java\n+++ b/clients/src/main/java/org/apache/kafka/common/network/NetworkReceive.java\n\n@@ -88,8 +89,7 @@ public class NetworkReceive implements Receive {\n         return !size.hasRemaining() && buffer != null && !buffer.hasRemaining();\n     }\n \n-    @Override\n-    public long readFrom(TransportLayer channel) throws IOException {\n+    public long readFrom(ScatteringByteChannel channel) throws IOException {\n         int read = 0;\n         if (size.hasRemaining()) {\n             int bytesRead = channel.read(size);\n"}}, {"oid": "c2b996ec11dcd30302ad352371df19ec0fcdd694", "url": "https://github.com/apache/kafka/commit/c2b996ec11dcd30302ad352371df19ec0fcdd694", "message": "MINOR: make Send and Record work with WritableChannel rather than GatheringByteChannel", "committedDate": "2020-12-10T04:20:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjIwNA==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r539842204", "bodyText": "Maybe we should call it TransferableChannel since it adds a transferFrom method. And let's add some brief class javadoc explaining why we have this interface.", "author": "ijuma", "createdAt": "2020-12-10T04:46:56Z", "path": "clients/src/main/java/org/apache/kafka/common/network/WritableChannel.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+\n+public interface WritableChannel extends GatheringByteChannel {", "originalCommit": "c2b996ec11dcd30302ad352371df19ec0fcdd694", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MDM5NA==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r539850394", "bodyText": "will copy that", "author": "chia7712", "createdAt": "2020-12-10T05:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b59f50105a946960d73f2c644cdff49a26939ca6", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/network/WritableChannel.java b/clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java\nsimilarity index 71%\nrename from clients/src/main/java/org/apache/kafka/common/network/WritableChannel.java\nrename to clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java\nindex f01f24d0de..504cadcc23 100644\n--- a/clients/src/main/java/org/apache/kafka/common/network/WritableChannel.java\n+++ b/clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java\n\n@@ -20,15 +20,21 @@ import java.io.IOException;\n import java.nio.channels.FileChannel;\n import java.nio.channels.GatheringByteChannel;\n \n-public interface WritableChannel extends GatheringByteChannel {\n+/**\n+ * Extends GatheringByteChannel with the minimal set of methods required by the Send interface. Supporting TLS and\n+ * efficient zero copy transfers are the main reasons for the additional methods. (see SslTransportLayer)\n+ */\n+public interface TransferableChannel extends GatheringByteChannel {\n \n     /**\n-     * @return true if there are any pending writes\n+     * @return true if there are any pending writes. false if the implementation directly write all data to output.\n      */\n-    boolean hasPendingWrites();\n+    default boolean hasPendingWrites() {\n+        return false;\n+    }\n \n     /**\n-     * Transfers bytes from `fileChannel` to this `TransportLayer`.\n+     * Transfers bytes from `fileChannel` to this `TransferableChannel`.\n      *\n      * This method will delegate to {@link FileChannel#transferTo(long, long, java.nio.channels.WritableByteChannel)},\n      * but it will unwrap the destination channel, if possible, in order to benefit from zero copy. This is required\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MTY0Nw==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540191647", "bodyText": "I would replace this comment with:\n\nExtends GatheringByteChannel with the minimal set of methods required by the Send interface. Supporting TLS and efficient zero copy transfers are the main reasons for the additional methods.", "author": "ijuma", "createdAt": "2020-12-10T14:01:27Z", "path": "clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+\n+/**\n+ * TransportLayer is a fat interface so it is a bit weird to use TransportLayer in write-only path.\n+ * Hence, we extract all write-related methods from TransportLayer to be a new interface - TransferableChannel", "originalCommit": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzOTU3Nw==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540239577", "bodyText": "will copy that.", "author": "chia7712", "createdAt": "2020-12-10T15:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MTY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b59f50105a946960d73f2c644cdff49a26939ca6", "chunk": "diff --git a/clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java b/clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java\nindex d2ae4fffd4..504cadcc23 100644\n--- a/clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java\n+++ b/clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java\n\n@@ -21,18 +21,20 @@ import java.nio.channels.FileChannel;\n import java.nio.channels.GatheringByteChannel;\n \n /**\n- * TransportLayer is a fat interface so it is a bit weird to use TransportLayer in write-only path.\n- * Hence, we extract all write-related methods from TransportLayer to be a new interface - TransferableChannel\n+ * Extends GatheringByteChannel with the minimal set of methods required by the Send interface. Supporting TLS and\n+ * efficient zero copy transfers are the main reasons for the additional methods. (see SslTransportLayer)\n  */\n public interface TransferableChannel extends GatheringByteChannel {\n \n     /**\n-     * @return true if there are any pending writes\n+     * @return true if there are any pending writes. false if the implementation directly write all data to output.\n      */\n-    boolean hasPendingWrites();\n+    default boolean hasPendingWrites() {\n+        return false;\n+    }\n \n     /**\n-     * Transfers bytes from `fileChannel` to this `TransportLayer`.\n+     * Transfers bytes from `fileChannel` to this `TransferableChannel`.\n      *\n      * This method will delegate to {@link FileChannel#transferTo(long, long, java.nio.channels.WritableByteChannel)},\n      * but it will unwrap the destination channel, if possible, in order to benefit from zero copy. This is required\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540195130", "bodyText": "I don't think you can use this as a general class as it stands. A previous PR changed it to be non general, it seems:\n    @Override\n    public long write(ByteBuffer[] srcs, int offset, int length) {\n        int position = buf.position();\n        for (int i = 0; i < length; i++) {\n            ByteBuffer src = srcs[i].duplicate();\n            if (i == 0) {\n                src.position(src.position() + offset);\n            }\n            buf.put(src);\n        }\n        return buf.position() - position;\n    }", "author": "ijuma", "createdAt": "2020-12-10T14:06:22Z", "path": "clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java", "diffHunk": "@@ -160,20 +161,21 @@ private static MemoryRecords convertRecords(MemoryRecords recordsToConvert, byte\n                     inputRecords, toMagic, 0L, Time.SYSTEM);\n             LazyDownConversionRecordsSend lazySend = lazyRecords.toSend();\n             File outputFile = tempFile();\n-            FileChannel channel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);\n-\n-            int written = 0;\n-            while (written < bytesToConvert)\n-                written += lazySend.writeTo(channel, written, bytesToConvert - written);\n-\n-            FileRecords convertedRecords = FileRecords.open(outputFile, true, (int) channel.size(), false);\n-            ByteBuffer convertedRecordsBuffer = ByteBuffer.allocate(convertedRecords.sizeInBytes());\n-            convertedRecords.readInto(convertedRecordsBuffer, 0);\n-\n-            // cleanup\n-            convertedRecords.close();\n-            channel.close();\n-\n+            ByteBuffer convertedRecordsBuffer;\n+            try (FileChannel fileChannel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                ByteBuffer buf;\n+                try (org.apache.kafka.common.requests.ByteBufferChannel channel =\n+                             new org.apache.kafka.common.requests.ByteBufferChannel(bytesToConvert)) {", "originalCommit": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NzI5MA==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540197290", "bodyText": "One more thing: why we are using a fully qualified name instead of relying on imports?", "author": "ijuma", "createdAt": "2020-12-10T14:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzOTQ0Mw==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540239443", "bodyText": "IIRC, the import rule obstructs me from importing the class. Will check it later.", "author": "chia7712", "createdAt": "2020-12-10T15:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MjQwNw==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540262407", "bodyText": "We should fix the underlying case instead of working around it. :)", "author": "ijuma", "createdAt": "2020-12-10T15:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0ODU1NQ==", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540448555", "bodyText": "@ijuma Thanks for your comments. I have fixed the method write and add more tests for it. Also, the disallowed package is removed.", "author": "chia7712", "createdAt": "2020-12-10T19:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "b59f50105a946960d73f2c644cdff49a26939ca6", "chunk": "diff --git a/clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java b/clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java\nindex 0a92a5d407..f44c88471b 100644\n--- a/clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java\n+++ b/clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java\n\n@@ -162,16 +163,10 @@ public class LazyDownConversionRecordsTest {\n             LazyDownConversionRecordsSend lazySend = lazyRecords.toSend();\n             File outputFile = tempFile();\n             ByteBuffer convertedRecordsBuffer;\n-            try (FileChannel fileChannel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n-                ByteBuffer buf;\n-                try (org.apache.kafka.common.requests.ByteBufferChannel channel =\n-                             new org.apache.kafka.common.requests.ByteBufferChannel(bytesToConvert)) {\n-                    int written = 0;\n-                    while (written < bytesToConvert) written += lazySend.writeTo(channel, written, bytesToConvert - written);\n-                    buf = channel.buffer();\n-                }\n-                fileChannel.write(buf);\n-                try (FileRecords convertedRecords = FileRecords.open(outputFile, true, (int) fileChannel.size(), false)) {\n+            try (TransferableChannel channel = toTransferableChannel(FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE))) {\n+                int written = 0;\n+                while (written < bytesToConvert) written += lazySend.writeTo(channel, written, bytesToConvert - written);\n+                try (FileRecords convertedRecords = FileRecords.open(outputFile, true, written, false)) {\n                     convertedRecordsBuffer = ByteBuffer.allocate(convertedRecords.sizeInBytes());\n                     convertedRecords.readInto(convertedRecordsBuffer, 0);\n                 }\n"}}, {"oid": "b59f50105a946960d73f2c644cdff49a26939ca6", "url": "https://github.com/apache/kafka/commit/b59f50105a946960d73f2c644cdff49a26939ca6", "message": "address review comments; cleanup; fix bugs; more tests", "committedDate": "2020-12-10T19:33:44Z", "type": "forcePushed"}, {"oid": "6aa65b8f2939a7e466771de1dce350bbb74b0d35", "url": "https://github.com/apache/kafka/commit/6aa65b8f2939a7e466771de1dce350bbb74b0d35", "message": "MINOR: make Send and Record work with WritableChannel rather than GatheringByteChannel", "committedDate": "2020-12-14T09:16:31Z", "type": "commit"}, {"oid": "54cd485c23f10899a151c53f2c7d409f1d9c7217", "url": "https://github.com/apache/kafka/commit/54cd485c23f10899a151c53f2c7d409f1d9c7217", "message": "rename WritableChannel to TransferableChannel", "committedDate": "2020-12-14T09:16:31Z", "type": "commit"}, {"oid": "af22fa260294546b841d0c3532faeda99905c2a8", "url": "https://github.com/apache/kafka/commit/af22fa260294546b841d0c3532faeda99905c2a8", "message": "address review comments; cleanup; fix bugs; more tests", "committedDate": "2020-12-14T09:16:31Z", "type": "commit"}, {"oid": "36d223192a0a8105f812bf5765dd755d03c7a3c7", "url": "https://github.com/apache/kafka/commit/36d223192a0a8105f812bf5765dd755d03c7a3c7", "message": "revert cleanup", "committedDate": "2020-12-14T09:16:31Z", "type": "commit"}, {"oid": "36d223192a0a8105f812bf5765dd755d03c7a3c7", "url": "https://github.com/apache/kafka/commit/36d223192a0a8105f812bf5765dd755d03c7a3c7", "message": "revert cleanup", "committedDate": "2020-12-14T09:16:31Z", "type": "forcePushed"}, {"oid": "a9c14a9c8f913aebba7296eb40bcbbf8c806616a", "url": "https://github.com/apache/kafka/commit/a9c14a9c8f913aebba7296eb40bcbbf8c806616a", "message": "Use @see javadoc tag", "committedDate": "2020-12-15T13:34:55Z", "type": "commit"}]}