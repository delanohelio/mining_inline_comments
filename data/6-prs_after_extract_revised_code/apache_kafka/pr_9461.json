{"pr_number": 9461, "pr_title": "MINOR: Clean-up streams javadoc warnings", "pr_createdAt": "2020-10-20T15:09:18Z", "pr_url": "https://github.com/apache/kafka/pull/9461", "timeline": [{"oid": "77996719f8fb42798522165916712a614cdf2ae9", "url": "https://github.com/apache/kafka/commit/77996719f8fb42798522165916712a614cdf2ae9", "message": "MINOR: Clean-up javadoc warnings", "committedDate": "2020-10-20T15:06:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwNTM1MQ==", "url": "https://github.com/apache/kafka/pull/9461#discussion_r508705351", "bodyText": "I seem the right fix would be to add the missing {@code } annotation in L184?\n<pre>{@code\n\nThe closing } is already in L190.", "author": "mjsax", "createdAt": "2020-10-20T17:19:54Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java", "diffHunk": "@@ -184,9 +184,9 @@\n      * <pre>\n      * KafkaStreams streams = ... // some aggregation on value type double\n      * String queryableStoreName = \"storeName\" // the store name should be the name of the store as defined by the Materialized instance\n-     * ReadOnlyKeyValueStore<K, ValueAndTimestamp<VOut>> localStore = streams.store(queryableStoreName, QueryableStoreTypes.<K, ValueAndTimestamp<VOut>> timestampedKeyValueStore());\n+     * ReadOnlyKeyValueStore&gt;K, ValueAndTimestamp&gt;VOut&lt;&lt; localStore = streams.store(queryableStoreName, QueryableStoreTypes.&gt;K, ValueAndTimestamp&gt;VOut&lt;&lt; timestampedKeyValueStore());", "originalCommit": "77996719f8fb42798522165916712a614cdf2ae9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNjk4NQ==", "url": "https://github.com/apache/kafka/pull/9461#discussion_r508806985", "bodyText": "Ah, good catch I'll update this and the next.", "author": "bbejeck", "createdAt": "2020-10-20T20:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwNTM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7e70c48db901cda3f50cfbf495175189bea6499d", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java b/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java\nindex 5fcc8587e7..d219360d67 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java\n\n@@ -181,12 +181,12 @@ public interface CogroupedKStream<K, VOut> {\n      * <p>\n      * To query the local {@link ReadOnlyKeyValueStore} it must be obtained via\n      * {@link KafkaStreams#store(StoreQueryParameters) KafkaStreams#store(...)}:\n-     * <pre>\n+     * <pre>{@code\n      * KafkaStreams streams = ... // some aggregation on value type double\n      * String queryableStoreName = \"storeName\" // the store name should be the name of the store as defined by the Materialized instance\n-     * ReadOnlyKeyValueStore&gt;K, ValueAndTimestamp&gt;VOut&lt;&lt; localStore = streams.store(queryableStoreName, QueryableStoreTypes.&gt;K, ValueAndTimestamp&gt;VOut&lt;&lt; timestampedKeyValueStore());\n+     * ReadOnlyKeyValueStore<K, ValueAndTimestamp<VOut>> localStore = streams.store(queryableStoreName, QueryableStoreTypes.<K, ValueAndTimestamp<VOut>> timestampedKeyValueStore());\n      * K key = \"some-key\";\n-     * ValueAndTimestamp&gt;VOut&lt; aggForKey = localStore.get(key); // key must be local (application state is shared over all running Kafka Streams instances)\n+     * ValueAndTimestamp<VOut> aggForKey = localStore.get(key); // key must be local (application state is shared over all running Kafka Streams instances)\n      * }</pre>\n      * For non-local keys, a custom RPC mechanism must be implemented using {@link KafkaStreams#allMetadata()} to query\n      * the value of the key on a parallel running instance of your Kafka Streams application.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcwNTUxOA==", "url": "https://github.com/apache/kafka/pull/9461#discussion_r508705518", "bodyText": "As above.", "author": "mjsax", "createdAt": "2020-10-20T17:20:10Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java", "diffHunk": "@@ -236,9 +236,9 @@\n      * <pre>\n      * KafkaStreams streams = ... // some aggregation on value type double\n      * String queryableStoreName = \"storeName\" // the store name should be the name of the store as defined by the Materialized instance\n-     * ReadOnlyKeyValueStore<K, ValueAndTimestamp<VOut>> localStore = streams.store(queryableStoreName, QueryableStoreTypes.<K, ValueAndTimestamp<VOut>> timestampedKeyValueStore());", "originalCommit": "77996719f8fb42798522165916712a614cdf2ae9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e70c48db901cda3f50cfbf495175189bea6499d", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java b/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java\nindex 5fcc8587e7..d219360d67 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/CogroupedKStream.java\n\n@@ -233,12 +233,12 @@ public interface CogroupedKStream<K, VOut> {\n      * <p>\n      * To query the local {@link org.apache.kafka.streams.state.ReadOnlyKeyValueStore} it must be obtained via\n      * {@link KafkaStreams#store(StoreQueryParameters) KafkaStreams#store(...)}:\n-     * <pre>\n+     * <pre>{@code\n      * KafkaStreams streams = ... // some aggregation on value type double\n      * String queryableStoreName = \"storeName\" // the store name should be the name of the store as defined by the Materialized instance\n-     * ReadOnlyKeyValueStore&gt;K, ValueAndTimestamp&gt;VOut&lt;&lt; localStore = streams.store(queryableStoreName, QueryableStoreTypes.&gt;K, ValueAndTimestamp&gt;VOut&lt;&lt; timestampedKeyValueStore());\n+     * ReadOnlyKeyValueStore<K, ValueAndTimestamp<VOut>> localStore = streams.store(queryableStoreName, QueryableStoreTypes.<K, ValueAndTimestamp<VOut>> timestampedKeyValueStore());\n      * K key = \"some-key\";\n-     * ValueAndTimestamp&gt;VOut&lt; aggForKey = localStore.get(key); // key must be local (application state is shared over all running Kafka Streams instances)\n+     * ValueAndTimestamp<VOut> aggForKey = localStore.get(key); // key must be local (application state is shared over all running Kafka Streams instances)\n      * }</pre>\n      * For non-local keys, a custom RPC mechanism must be implemented using {@link KafkaStreams#allMetadata()} to query\n      * the value of the key on a parallel running instance of your Kafka Streams application.\n"}}, {"oid": "7e70c48db901cda3f50cfbf495175189bea6499d", "url": "https://github.com/apache/kafka/commit/7e70c48db901cda3f50cfbf495175189bea6499d", "message": "MINOR: Revert previous change and add missing {@code tag", "committedDate": "2020-10-20T20:21:53Z", "type": "commit"}]}