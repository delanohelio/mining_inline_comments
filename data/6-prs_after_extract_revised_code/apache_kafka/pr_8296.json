{"pr_number": 8296, "pr_title": "MINOR: reuse pseudo-topic in FKJoin", "pr_createdAt": "2020-03-13T15:13:16Z", "pr_url": "https://github.com/apache/kafka/pull/8296", "timeline": [{"oid": "4c9bc90eeb7637bac598a483cb0f80d229921d2d", "url": "https://github.com/apache/kafka/commit/4c9bc90eeb7637bac598a483cb0f80d229921d2d", "message": "MINOR: re-use pseudo-topic in FKJoin", "committedDate": "2020-03-13T15:11:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5MTY4Mg==", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392291682", "bodyText": "I just missed this last time I made a pass and cleaned up all the pseudo-topics. We should have passed in the common one for hashing LHS values, which is declared in KTableImpl (which is what we're doing now).", "author": "vvcephei", "createdAt": "2020-03-13T15:15:58Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplier.java", "diffHunk": "@@ -83,15 +86,10 @@ public void process(final K key, final SubscriptionResponseWrapper<VO> value) {\n                 }\n                 final ValueAndTimestamp<V> currentValueWithTimestamp = valueGetter.get(key);\n \n-                //We are unable to access the actual source topic name for the valueSerializer at runtime, without\n-                //tightly coupling to KTableRepartitionProcessorSupplier.\n-                //While we can use the source topic from where the events came from, we shouldn't serialize against it\n-                //as it causes problems with the confluent schema registry, which requires each topic have only a single\n-                //registered schema.\n-                final String dummySerializationTopic = context().topic() + \"-join-resolver\";", "originalCommit": "4c9bc90eeb7637bac598a483cb0f80d229921d2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b5a70544b3e01a185a6d86fd7697371413a0aac", "chunk": "diff --git a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplier.java b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplier.java\nindex 5bc0f40cab..31de0687d6 100644\n--- a/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplier.java\n+++ b/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplier.java\n\n@@ -86,10 +86,9 @@ public class SubscriptionResolverJoinProcessorSupplier<K, V, VO, VR> implements\n                 }\n                 final ValueAndTimestamp<V> currentValueWithTimestamp = valueGetter.get(key);\n \n-                final byte[] serialize = runtimeValueSerializer.serialize(valueHashSerdePseudoTopic, currentValueWithTimestamp.value());\n                 final long[] currentHash = currentValueWithTimestamp == null ?\n                     null :\n-                    Murmur3.hash128(serialize);\n+                    Murmur3.hash128(runtimeValueSerializer.serialize(valueHashSerdePseudoTopic, currentValueWithTimestamp.value()));\n \n                 final long[] messageHash = value.getOriginalValueHash();\n \n"}}, {"oid": "bac36ea7d5afae776b0de856118e8a9a58a144fe", "url": "https://github.com/apache/kafka/commit/bac36ea7d5afae776b0de856118e8a9a58a144fe", "message": "fix build", "committedDate": "2020-03-13T19:21:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3OTIwMQ==", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392479201", "bodyText": "Could we move the initialization of valueHashSerdePseudoTopic closer to where it is firstly used?", "author": "abbccdda", "createdAt": "2020-03-13T21:10:44Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -1103,6 +1103,7 @@ boolean sendingOldValueEnabled() {\n         final SubscriptionResolverJoinProcessorSupplier<K, V, VO, VR> resolverProcessorSupplier = new SubscriptionResolverJoinProcessorSupplier<>(\n             primaryKeyValueGetter,\n             valSerde == null ? null : valSerde.serializer(),\n+            valueHashSerdePseudoTopic,", "originalCommit": "bac36ea7d5afae776b0de856118e8a9a58a144fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwODkxNQ==", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392508915", "bodyText": "This thought is reasonable, but I put all the pseudo-topic definitions together so that we could see what they all are at a glance.", "author": "vvcephei", "createdAt": "2020-03-13T22:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3OTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwOTA3MA==", "url": "https://github.com/apache/kafka/pull/8296#discussion_r392509070", "bodyText": "Plus, the first use is the very first processor in the FK join, so it couldn't move down by much anyway :)", "author": "vvcephei", "createdAt": "2020-03-13T22:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3OTIwMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3b5a70544b3e01a185a6d86fd7697371413a0aac", "url": "https://github.com/apache/kafka/commit/3b5a70544b3e01a185a6d86fd7697371413a0aac", "message": "fix test", "committedDate": "2020-03-13T22:15:52Z", "type": "commit"}, {"oid": "2e13bf84dd54dc7cd6314d8df4f1c64150dca976", "url": "https://github.com/apache/kafka/commit/2e13bf84dd54dc7cd6314d8df4f1c64150dca976", "message": "add test", "committedDate": "2020-03-13T23:40:32Z", "type": "commit"}]}