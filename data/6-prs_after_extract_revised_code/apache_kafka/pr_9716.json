{"pr_number": 9716, "pr_title": "KAFKA-10826; Ensure raft io thread respects linger timeout", "pr_createdAt": "2020-12-09T00:10:50Z", "pr_url": "https://github.com/apache/kafka/pull/9716", "timeline": [{"oid": "d3bfc8ce3fbc4d2cb3fab2f0c3f639f3b6d2d6c6", "url": "https://github.com/apache/kafka/commit/d3bfc8ce3fbc4d2cb3fab2f0c3f639f3b6d2d6c6", "message": "KAFKA-10826; Ensure raft io thread respects linger timeout", "committedDate": "2020-12-09T00:00:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5NzU0OQ==", "url": "https://github.com/apache/kafka/pull/9716#discussion_r538997549", "bodyText": "Nice one.", "author": "guozhangwang", "createdAt": "2020-12-09T04:30:09Z", "path": "raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java", "diffHunk": "@@ -271,22 +272,19 @@ public int epoch() {\n         }\n     }\n \n+    public boolean isEmpty() {\n+        // The linger timer begins running when we have pending batches.\n+        // We use this to infer when the accumulator is empty to avoid the", "originalCommit": "d3bfc8ce3fbc4d2cb3fab2f0c3f639f3b6d2d6c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "306c956f53dce5b98acbf881b90216385878b57e", "chunk": "diff --git a/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java b/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java\nindex d9537436bd..96438d1ab7 100644\n--- a/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java\n+++ b/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java\n\n@@ -280,8 +280,8 @@ public class BatchAccumulator<T> implements Closeable {\n     }\n \n     /**\n-     * Get the number of batches including the one that is currently being\n-     * written to (if it exists).\n+     * Get the number of completed batches which are ready to be drained.\n+     * This does not include the batch that is currently being filled.\n      */\n     public int numCompletedBatches() {\n         return completed.size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTYwOA==", "url": "https://github.com/apache/kafka/pull/9716#discussion_r538999608", "bodyText": "Does the javadoc above need updates?", "author": "guozhangwang", "createdAt": "2020-12-09T04:36:49Z", "path": "raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java", "diffHunk": "@@ -271,22 +272,19 @@ public int epoch() {\n         }\n     }\n \n+    public boolean isEmpty() {\n+        // The linger timer begins running when we have pending batches.\n+        // We use this to infer when the accumulator is empty to avoid the\n+        // need to acquire the append lock.\n+        return !lingerTimer.isRunning();\n+    }\n+\n     /**\n      * Get the number of batches including the one that is currently being\n      * written to (if it exists).\n      */\n-    public int count() {\n-        appendLock.lock();\n-        try {\n-            int count = completed.size();\n-            if (currentBatch != null) {\n-                return count + 1;\n-            } else {\n-                return count;\n-            }\n-        } finally {\n-            appendLock.unlock();\n-        }\n+    public int numCompletedBatches() {", "originalCommit": "d3bfc8ce3fbc4d2cb3fab2f0c3f639f3b6d2d6c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "306c956f53dce5b98acbf881b90216385878b57e", "chunk": "diff --git a/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java b/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java\nindex d9537436bd..96438d1ab7 100644\n--- a/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java\n+++ b/raft/src/main/java/org/apache/kafka/raft/internals/BatchAccumulator.java\n\n@@ -280,8 +280,8 @@ public class BatchAccumulator<T> implements Closeable {\n     }\n \n     /**\n-     * Get the number of batches including the one that is currently being\n-     * written to (if it exists).\n+     * Get the number of completed batches which are ready to be drained.\n+     * This does not include the batch that is currently being filled.\n      */\n     public int numCompletedBatches() {\n         return completed.size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwNDMwOA==", "url": "https://github.com/apache/kafka/pull/9716#discussion_r539004308", "bodyText": "nit: maybe we split 50 to 20/30 to avoid some reading difficulty? :)", "author": "guozhangwang", "createdAt": "2020-12-09T04:51:47Z", "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -477,6 +477,74 @@ public void testAccumulatorClearedAfterBecomingUnattached() throws Exception {\n         Mockito.verify(memoryPool).release(buffer);\n     }\n \n+    @Test\n+    public void testChannelWokenUpIfLingerTimeoutReachedWithoutAppend() throws Exception {\n+        // This test verifies that the client will set its poll timeout accounting\n+        // for the lingerMs of a pending append\n+\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        int lingerMs = 50;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+            .withAppendLingerMs(lingerMs)\n+            .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+        assertEquals(1L, context.log.endOffset().offset);\n+\n+        int epoch = context.currentEpoch();\n+        assertEquals(1L, context.client.scheduleAppend(epoch, singletonList(\"a\")));\n+        assertTrue(context.channel.wakeupRequested());\n+\n+        context.client.poll();\n+        assertEquals(OptionalLong.of(lingerMs), context.channel.lastReceiveTimeout());\n+\n+        context.time.sleep(25);", "originalCommit": "d3bfc8ce3fbc4d2cb3fab2f0c3f639f3b6d2d6c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "306c956f53dce5b98acbf881b90216385878b57e", "chunk": "diff --git a/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java b/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\nindex 958f619b8e..928eebed9b 100644\n--- a/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\n+++ b/raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java\n\n@@ -502,11 +502,11 @@ public class KafkaRaftClientTest {\n         context.client.poll();\n         assertEquals(OptionalLong.of(lingerMs), context.channel.lastReceiveTimeout());\n \n-        context.time.sleep(25);\n+        context.time.sleep(20);\n         context.client.poll();\n-        assertEquals(OptionalLong.of(25), context.channel.lastReceiveTimeout());\n+        assertEquals(OptionalLong.of(30), context.channel.lastReceiveTimeout());\n \n-        context.time.sleep(25);\n+        context.time.sleep(30);\n         context.client.poll();\n         assertEquals(2L, context.log.endOffset().offset);\n     }\n"}}, {"oid": "306c956f53dce5b98acbf881b90216385878b57e", "url": "https://github.com/apache/kafka/commit/306c956f53dce5b98acbf881b90216385878b57e", "message": "Address review comments", "committedDate": "2020-12-09T18:25:21Z", "type": "commit"}]}