{"pr_number": 9029, "pr_title": "KAFKA-10255: Fix flaky testOneWayReplicationWithAutoOffsetSync test", "pr_createdAt": "2020-07-16T10:01:13Z", "pr_url": "https://github.com/apache/kafka/pull/9029", "timeline": [{"oid": "161c65a6c34350851ec6dfe060dc380f6d88394b", "url": "https://github.com/apache/kafka/commit/161c65a6c34350851ec6dfe060dc380f6d88394b", "message": "KAFKA-10255: fix flaky testOneWayReplicationWithAutorOffsetSync1 test by waiting the offset ready", "committedDate": "2020-07-16T09:47:46Z", "type": "commit"}, {"oid": "70dc72477c50be350542a73e42c822852aca184f", "url": "https://github.com/apache/kafka/commit/70dc72477c50be350542a73e42c822852aca184f", "message": "KAFKA-10255: fix check style issue", "committedDate": "2020-07-16T09:54:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3MjE4Nw==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455672187", "bodyText": "rename the typo test name", "author": "showuon", "createdAt": "2020-07-16T10:02:04Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {\n+                for (String topic: topics) {\n+                    tps.add(new TopicPartition(topic, partitionInd));\n+                }\n+            }\n+        );\n+        long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n+\n+        waitForCondition(() -> {\n+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =\n+                backupClient.listConsumerGroupOffsets(\"consumer-group-1\").partitionsToOffsetAndMetadata().get();\n+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream().mapToLong(metadata -> metadata.offset()).sum();\n+\n+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));\n+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();\n+\n+            // make sure the consumer group offsets are synced to expected number\n+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;\n+        }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n+    }\n \n     @Test\n-    public void testOneWayReplicationWithAutorOffsetSync1() throws InterruptedException {\n+    public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {", "originalCommit": "70dc72477c50be350542a73e42c822852aca184f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88400bf350b60684db33828d690cfa238d056781", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex 23bb1d30bd..f634daa42d 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -319,14 +319,14 @@ public class MirrorConnectorsIntegrationTest {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n-    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics, String consumerGroupId)\n             throws InterruptedException {\n         Admin backupClient = backup.kafka().createAdminClient();\n         List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n         IntStream.range(0, NUM_PARTITIONS).forEach(\n-            partitionInd -> {\n+            partitionIndex -> {\n                 for (String topic: topics) {\n-                    tps.add(new TopicPartition(topic, partitionInd));\n+                    tps.add(new TopicPartition(topic, partitionIndex));\n                 }\n             }\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjIxNw==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455902217", "bodyText": "could we have a more intuitive variable name for partitionInd? e.g. partitionId or partitionIndex?", "author": "ning2008wisc", "createdAt": "2020-07-16T16:08:09Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {", "originalCommit": "70dc72477c50be350542a73e42c822852aca184f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIyNzQ4NA==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r456227484", "bodyText": "I'll rename to partitionIndex. Thanks.", "author": "showuon", "createdAt": "2020-07-17T05:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "88400bf350b60684db33828d690cfa238d056781", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex 23bb1d30bd..f634daa42d 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -319,14 +319,14 @@ public class MirrorConnectorsIntegrationTest {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n-    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics, String consumerGroupId)\n             throws InterruptedException {\n         Admin backupClient = backup.kafka().createAdminClient();\n         List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n         IntStream.range(0, NUM_PARTITIONS).forEach(\n-            partitionInd -> {\n+            partitionIndex -> {\n                 for (String topic: topics) {\n-                    tps.add(new TopicPartition(topic, partitionInd));\n+                    tps.add(new TopicPartition(topic, partitionIndex));\n                 }\n             }\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMzExNg==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455903116", "bodyText": "could we consider to pass in the consumer group name as a input variable of waitForConsumerGroupOffsetSync, so that waitForConsumerGroupOffsetSync looks more generic?", "author": "ning2008wisc", "createdAt": "2020-07-16T16:09:26Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {\n+                for (String topic: topics) {\n+                    tps.add(new TopicPartition(topic, partitionInd));\n+                }\n+            }\n+        );\n+        long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n+\n+        waitForCondition(() -> {\n+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =\n+                backupClient.listConsumerGroupOffsets(\"consumer-group-1\").partitionsToOffsetAndMetadata().get();", "originalCommit": "70dc72477c50be350542a73e42c822852aca184f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIyNzQ5NA==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r456227494", "bodyText": "Good suggestion. Thanks.", "author": "showuon", "createdAt": "2020-07-17T05:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMzExNg=="}], "type": "inlineReview", "revised_code": {"commit": "88400bf350b60684db33828d690cfa238d056781", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex 23bb1d30bd..f634daa42d 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -319,14 +319,14 @@ public class MirrorConnectorsIntegrationTest {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n-    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics, String consumerGroupId)\n             throws InterruptedException {\n         Admin backupClient = backup.kafka().createAdminClient();\n         List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n         IntStream.range(0, NUM_PARTITIONS).forEach(\n-            partitionInd -> {\n+            partitionIndex -> {\n                 for (String topic: topics) {\n-                    tps.add(new TopicPartition(topic, partitionInd));\n+                    tps.add(new TopicPartition(topic, partitionIndex));\n                 }\n             }\n         );\n"}}, {"oid": "88400bf350b60684db33828d690cfa238d056781", "url": "https://github.com/apache/kafka/commit/88400bf350b60684db33828d690cfa238d056781", "message": "KAFKA-10255: address reviewer's comment to rename variable and make the method looks more generic", "committedDate": "2020-07-17T05:31:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDYxNA==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459460614", "bodyText": "We can remove this field now that it's unused", "author": "mimaison", "createdAt": "2020-07-23T13:46:03Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -62,6 +65,7 @@\n     private static final int NUM_PARTITIONS = 10;\n     private static final int RECORD_TRANSFER_DURATION_MS = 20_000;\n     private static final int CHECKPOINT_DURATION_MS = 20_000;\n+    private static final int OFFSET_SYNC_DURATION_MS = 30_000;\n \n     private Time time = Time.SYSTEM;", "originalCommit": "88400bf350b60684db33828d690cfa238d056781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxODA4Nw==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459818087", "bodyText": "Nice catch! I also removed the unused import import org.apache.kafka.common.utils.Time; Thanks.", "author": "showuon", "createdAt": "2020-07-24T01:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "5345c6835ef42da973b794634d9b8d65f27ee80a", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex f634daa42d..ca3bb369e7 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -65,9 +64,9 @@ public class MirrorConnectorsIntegrationTest {\n     private static final int NUM_PARTITIONS = 10;\n     private static final int RECORD_TRANSFER_DURATION_MS = 20_000;\n     private static final int CHECKPOINT_DURATION_MS = 20_000;\n+    private static final int RECORD_CONSUME_DURATION_MS = 20_000;\n     private static final int OFFSET_SYNC_DURATION_MS = 30_000;\n \n-    private Time time = Time.SYSTEM;\n     private Map<String, String> mm2Props;\n     private MirrorMakerConfig mm2Config; \n     private EmbeddedConnectCluster primary;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxNjc5OQ==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459516799", "bodyText": "I'm not sure this is much better than a simple for loop. WDYT?", "author": "mimaison", "createdAt": "2020-07-23T15:01:05Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics, String consumerGroupId)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(", "originalCommit": "88400bf350b60684db33828d690cfa238d056781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMjcwNA==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459822704", "bodyText": "I don't have any preference. I'll change to simple for loop. Thanks.", "author": "showuon", "createdAt": "2020-07-24T02:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxNjc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5345c6835ef42da973b794634d9b8d65f27ee80a", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex f634daa42d..ca3bb369e7 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -323,13 +322,11 @@ public class MirrorConnectorsIntegrationTest {\n             throws InterruptedException {\n         Admin backupClient = backup.kafka().createAdminClient();\n         List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n-        IntStream.range(0, NUM_PARTITIONS).forEach(\n-            partitionIndex -> {\n-                for (String topic: topics) {\n-                    tps.add(new TopicPartition(topic, partitionIndex));\n-                }\n+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {\n+            for (String topic : topics) {\n+                tps.add(new TopicPartition(topic, partitionIndex));\n             }\n-        );\n+        }\n         long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n \n         waitForCondition(() -> {\n"}}, {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a", "url": "https://github.com/apache/kafka/commit/5345c6835ef42da973b794634d9b8d65f27ee80a", "message": "KAFKA-10255: remove unused variable and make the test more reliable", "committedDate": "2020-07-26T07:03:55Z", "type": "commit"}, {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a", "url": "https://github.com/apache/kafka/commit/5345c6835ef42da973b794634d9b8d65f27ee80a", "message": "KAFKA-10255: remove unused variable and make the test more reliable", "committedDate": "2020-07-26T07:03:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTE4Nw==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462989187", "bodyText": "Can we add the types <byte[], byte[]> to ConsumerRecords?", "author": "mimaison", "createdAt": "2020-07-30T13:18:38Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));", "originalCommit": "5345c6835ef42da973b794634d9b8d65f27ee80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyODc4MA==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r463028780", "bodyText": "Done. Thanks.", "author": "showuon", "createdAt": "2020-07-30T14:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex ca3bb369e7..31b7a17715 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -345,10 +345,10 @@ public class MirrorConnectorsIntegrationTest {\n     private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n         final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n         waitForCondition(() -> {\n-            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n-            consumer.commitSync();\n+            ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(500));\n             return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n-        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all records in time\");\n+        consumer.commitSync();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTU0Ng==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462989546", "bodyText": "replicaing -> replicating", "author": "mimaison", "createdAt": "2020-07-30T13:19:10Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();\n+            return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");\n+    }\n+\n     @Test\n     public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {\n \n         // create consumers before starting the connectors so we don't need to wait for discovery\n-        Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n-            \"group.id\", \"consumer-group-1\"), \"test-topic-1\");\n-        consumer1.poll(Duration.ofMillis(500));\n-        consumer1.commitSync();\n-        consumer1.close();\n+        try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n+            \"group.id\", \"consumer-group-1\"), \"test-topic-1\")) {\n+            // we need to wait for consuming all the records for MM2 replicaing the expected offsets", "originalCommit": "5345c6835ef42da973b794634d9b8d65f27ee80a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex ca3bb369e7..31b7a17715 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -345,10 +345,10 @@ public class MirrorConnectorsIntegrationTest {\n     private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n         final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n         waitForCondition(() -> {\n-            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n-            consumer.commitSync();\n+            ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(500));\n             return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n-        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all records in time\");\n+        consumer.commitSync();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MjY4Mw==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462992683", "bodyText": "nit: The sentence sounds slightly better if you remove the", "author": "mimaison", "createdAt": "2020-07-30T13:24:02Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();\n+            return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");", "originalCommit": "5345c6835ef42da973b794634d9b8d65f27ee80a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex ca3bb369e7..31b7a17715 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -345,10 +345,10 @@ public class MirrorConnectorsIntegrationTest {\n     private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n         final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n         waitForCondition(() -> {\n-            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n-            consumer.commitSync();\n+            ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(500));\n             return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n-        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all records in time\");\n+        consumer.commitSync();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NTY0NA==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462995644", "bodyText": "We can move that line after the waitForCondition() block to just commit once all records have been consumed.", "author": "mimaison", "createdAt": "2020-07-30T13:28:33Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();", "originalCommit": "5345c6835ef42da973b794634d9b8d65f27ee80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyODYzNg==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r463028636", "bodyText": "Good suggestion! Thanks.", "author": "showuon", "createdAt": "2020-07-30T14:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex ca3bb369e7..31b7a17715 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -345,10 +345,10 @@ public class MirrorConnectorsIntegrationTest {\n     private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n         final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n         waitForCondition(() -> {\n-            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n-            consumer.commitSync();\n+            ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(500));\n             return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n-        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all records in time\");\n+        consumer.commitSync();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NjczMg==", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462996732", "bodyText": "replicaing -> replicating", "author": "mimaison", "createdAt": "2020-07-30T13:30:08Z", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -387,11 +393,11 @@ public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedExceptio\n         }\n \n         // create a consumer at primary cluster to consume the new topic\n-        consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n-            \"group.id\", \"consumer-group-1\"), \"test-topic-2\");\n-        consumer1.poll(Duration.ofMillis(500));\n-        consumer1.commitSync();\n-        consumer1.close();\n+        try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n+            \"group.id\", \"consumer-group-1\"), \"test-topic-2\")) {\n+            // we need to wait for consuming all the records for MM2 replicaing the expected offsets", "originalCommit": "5345c6835ef42da973b794634d9b8d65f27ee80a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "chunk": "diff --git a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\nindex ca3bb369e7..31b7a17715 100644\n--- a/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n+++ b/connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java\n\n@@ -395,7 +395,7 @@ public class MirrorConnectorsIntegrationTest {\n         // create a consumer at primary cluster to consume the new topic\n         try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n             \"group.id\", \"consumer-group-1\"), \"test-topic-2\")) {\n-            // we need to wait for consuming all the records for MM2 replicaing the expected offsets\n+            // we need to wait for consuming all the records for MM2 replicating the expected offsets\n             waitForConsumingAllRecords(consumer1);\n         }\n \n"}}, {"oid": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "url": "https://github.com/apache/kafka/commit/8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "message": "KAFKA-10255: address the reviewer's comments to refactor the code", "committedDate": "2020-07-30T14:17:37Z", "type": "commit"}]}