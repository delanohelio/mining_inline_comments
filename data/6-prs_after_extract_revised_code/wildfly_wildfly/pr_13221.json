{"pr_number": 13221, "pr_title": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "pr_createdAt": "2020-04-17T00:29:52Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13221", "timeline": [{"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "url": "https://github.com/wildfly/wildfly/commit/3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "committedDate": "2020-04-17T00:40:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTAxMw==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r411741013", "bodyText": "This attribute is an alias.", "author": "bstansberry", "createdAt": "2020-04-20T22:44:05Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRootResourceDefinition.java", "diffHunk": "@@ -123,7 +123,6 @@\n             new SimpleAttributeDefinitionBuilder(EJB3SubsystemModel.ENABLE_STATISTICS, ModelType.BOOLEAN, true)\n                     .setAllowExpression(true)\n                     .setDeprecated(ModelVersion.create(5))\n-                    .setFlags(AttributeAccess.Flag.ALIAS)", "originalCommit": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0ODYzMA==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r412248630", "bodyText": "This one is tricky. There is only one instance of ALIAS in the whole of Wildfly and its this one. I discussed with PF and RH and they said don't use it. If I do use it, the transformer tests fail. Is there some description somewhere of how to handle attributes with an ALIAS flag? The description above the definition says, \"this attribute is an alias to something else\". How are aliases handled in general?", "author": "rachmatowicz", "createdAt": "2020-04-21T14:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MTA3Mg==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r412451072", "bodyText": "What is happening is the model comparison fails: in 6.0.0, statistics-enabled=expression and enable-statistics=expression; in 5.0.0, statistics-enabled=expression and enable-statistics=undefined. In 6.0.0, enable-statistics is flagged as ALIAS and there are custom read-attribute and write-attribute handlers for enable-statistics which instead read and write from statistics-enabled. This explains why the values are equal in 6.0.0. Exactly the same setup in 5.0.0 (EAP 7.2.0, 7.1.0). The operation transformers are creating the correct model, but the resource transformers are creating a model where enable-statistics is undefined. Is this a case where a value needs to be injected via setValueConverter if it is undefined?", "author": "rachmatowicz", "createdAt": "2020-04-21T19:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3MTgwMA==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r412471800", "bodyText": "I created an attribute converter for enable-statistics which will check if it is undefined and if it is, set the value to the value of statistics-enabled. I assumed that the undefined value was being created on the initial model transfer; this seems to fix it. Not 100% sure if this is the right approach.", "author": "rachmatowicz", "createdAt": "2020-04-21T20:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4OTkyMw==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r413489923", "bodyText": "You've revealed that a bug fix in WF 15 / EAP 7.3 (https://issues.redhat.com/browse/WFCORE-4183) fixes another problem besides the one it targeted. :-) When you invoke read-resource on an EAP 7.2 or earlier controller you get the value of aliases even though the op has the 'include-aliases=\"false\" param set.\nThis is better to correct in DefaultModelFixer as opposed to changing the production code to send a value that the legacy host does not need. The result from the read-resource operation on the legacy controller is not correct due to that bug, so better to correct it in the test.\nWith bstansberry@fd3d27f added to what you have here the EJB3 subsystem tests pass. Feel free to squash that in if you agree it is correct.", "author": "bstansberry", "createdAt": "2020-04-23T03:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA4NDY4MQ==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r416084681", "bodyText": "Added in your code snippet to fix the issue in the ModelFixer. Thanks, Brian.", "author": "rachmatowicz", "createdAt": "2020-04-27T19:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "05e3fa71d133e9d800fce77af0d9c86bea54e2c3", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRootResourceDefinition.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRootResourceDefinition.java\nindex c78f5a3724..dc52ec5c95 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRootResourceDefinition.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRootResourceDefinition.java\n\n@@ -122,6 +122,7 @@ public class EJB3SubsystemRootResourceDefinition extends SimpleResourceDefinitio\n     static final SimpleAttributeDefinition ENABLE_STATISTICS =\n             new SimpleAttributeDefinitionBuilder(EJB3SubsystemModel.ENABLE_STATISTICS, ModelType.BOOLEAN, true)\n                     .setAllowExpression(true)\n+                    .setFlags(AttributeAccess.Flag.ALIAS)\n                     .setDeprecated(ModelVersion.create(5))\n                     .build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTQ2OA==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r411741468", "bodyText": "AFAICT the changes to this file should not be necessary as the behavior of these AttributeDefinitions is to not write anything if the attribute isn't defined.", "author": "bstansberry", "createdAt": "2020-04-20T22:45:10Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemXMLPersister.java", "diffHunk": "@@ -489,8 +491,10 @@ private void writeStrictMaxPoolConfig(final XMLExtendedStreamWriter writer, fina\n \n         writer.writeAttribute(EJB3SubsystemXMLAttribute.NAME.getLocalName(), strictMaxPoolModel.getName());\n \n-        StrictMaxPoolResourceDefinition.MAX_POOL_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n-        StrictMaxPoolResourceDefinition.DERIVE_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n+        if (strictMaxPoolModelNode.hasDefined(MAX_POOL_SIZE))\n+            StrictMaxPoolResourceDefinition.MAX_POOL_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n+        if (strictMaxPoolModelNode.hasDefined(DERIVE_SIZE))\n+            StrictMaxPoolResourceDefinition.DERIVE_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);", "originalCommit": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyODM2Ng==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r412228366", "bodyText": "OK, i'll remove the changes. Thanks.", "author": "rachmatowicz", "createdAt": "2020-04-21T14:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "f16b4cd097f2c6101bef81424ec5220f7a87eebe", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemXMLPersister.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemXMLPersister.java\nindex 15bae43852..0826773616 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemXMLPersister.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemXMLPersister.java\n\n@@ -491,10 +489,8 @@ public class EJB3SubsystemXMLPersister implements XMLElementWriter<SubsystemMars\n \n         writer.writeAttribute(EJB3SubsystemXMLAttribute.NAME.getLocalName(), strictMaxPoolModel.getName());\n \n-        if (strictMaxPoolModelNode.hasDefined(MAX_POOL_SIZE))\n-            StrictMaxPoolResourceDefinition.MAX_POOL_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n-        if (strictMaxPoolModelNode.hasDefined(DERIVE_SIZE))\n-            StrictMaxPoolResourceDefinition.DERIVE_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n+        StrictMaxPoolResourceDefinition.MAX_POOL_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n+        StrictMaxPoolResourceDefinition.DERIVE_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n         StrictMaxPoolResourceDefinition.INSTANCE_ACQUISITION_TIMEOUT.marshallAsAttribute(strictMaxPoolModelNode, writer);\n         StrictMaxPoolResourceDefinition.INSTANCE_ACQUISITION_TIMEOUT_UNIT.marshallAsAttribute(strictMaxPoolModelNode, writer);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTc0Mg==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r411741742", "bodyText": "I think this move introduces merge conflicts because the whole method is gone now.", "author": "bstansberry", "createdAt": "2020-04-20T22:45:44Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3RemoteServiceAdd.java", "diffHunk": "@@ -77,6 +77,14 @@ protected void performBoottime(OperationContext context, ModelNode operation, Mo\n         installRuntimeServices(context, model);\n     }\n \n+    @Override\n+    protected void populateModel(ModelNode operation, ModelNode model) throws OperationFailedException {\n+        EJB3RemoteResourceDefinition.CLIENT_MAPPINGS_CLUSTER_NAME.validateAndSet(operation, model);\n+        EJB3RemoteResourceDefinition.CONNECTOR_REF.validateAndSet(operation, model);\n+        EJB3RemoteResourceDefinition.THREAD_POOL_NAME.validateAndSet(operation, model);\n+        EJB3RemoteResourceDefinition.EXECUTE_IN_WORKER.validateAndSet(operation, model);\n+    }", "originalCommit": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzNzA4OQ==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r412237089", "bodyText": "Not sure I understand. When I open the file in the PR, I see the method. Do you mean it disappears after being merged?", "author": "rachmatowicz", "createdAt": "2020-04-21T14:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3MTIxNw==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r413471217", "bodyText": "When I wrote that comment Github was reporting this PR had a merge conflict.  At the time, github was showing the change this PR was making to this file was moving this method from lower in the file to here. I assumed that was the merge conflict because Paul had done a different change to this file that removed this method altogether.\nIt looks like now the conflict has been resolved but the resolution resulted in restoring this method. I don't think it should be restored. Give the rest of Paul's change all it's doing here is what the superclass implementation will do.", "author": "bstansberry", "createdAt": "2020-04-23T02:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA4NDIzNw==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r416084237", "bodyText": "Removed the method populateModel() as it is no longer in master..", "author": "rachmatowicz", "createdAt": "2020-04-27T19:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f16b4cd097f2c6101bef81424ec5220f7a87eebe", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3RemoteServiceAdd.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3RemoteServiceAdd.java\nindex 2f7a223e28..53a58b97d7 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3RemoteServiceAdd.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3RemoteServiceAdd.java\n\n@@ -67,9 +68,9 @@ import org.xnio.Options;\n  * @author <a href=\"mailto:ropalka@redhat.com\">Richard Opalka</a>\n  */\n public class EJB3RemoteServiceAdd extends AbstractBoottimeAddStepHandler {\n-    static final EJB3RemoteServiceAdd INSTANCE = new EJB3RemoteServiceAdd();\n \n-    private EJB3RemoteServiceAdd() {\n+    EJB3RemoteServiceAdd(AttributeDefinition... attributes) {\n+        super(attributes);\n     }\n \n     @Override\n"}}, {"oid": "f16b4cd097f2c6101bef81424ec5220f7a87eebe", "url": "https://github.com/wildfly/wildfly/commit/f16b4cd097f2c6101bef81424ec5220f7a87eebe", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "committedDate": "2020-04-21T18:49:06Z", "type": "forcePushed"}, {"oid": "05e3fa71d133e9d800fce77af0d9c86bea54e2c3", "url": "https://github.com/wildfly/wildfly/commit/05e3fa71d133e9d800fce77af0d9c86bea54e2c3", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "committedDate": "2020-04-21T20:45:11Z", "type": "forcePushed"}, {"oid": "9179b61f4249343a73b6920d0a434a912dd74f79", "url": "https://github.com/wildfly/wildfly/commit/9179b61f4249343a73b6920d0a434a912dd74f79", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "committedDate": "2020-04-27T19:35:53Z", "type": "forcePushed"}, {"oid": "4a1cf24946bbbb58087b4b96854632702ec902b8", "url": "https://github.com/wildfly/wildfly/commit/4a1cf24946bbbb58087b4b96854632702ec902b8", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "committedDate": "2020-04-28T16:25:10Z", "type": "commit"}, {"oid": "4a1cf24946bbbb58087b4b96854632702ec902b8", "url": "https://github.com/wildfly/wildfly/commit/4a1cf24946bbbb58087b4b96854632702ec902b8", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "committedDate": "2020-04-28T16:25:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4NTU0MA==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r416285540", "bodyText": "This new DiscardAttributeChecker.DiscardAttributeValueChecker(ModelNode.TRUE) seems to overwrite the changes in the PR to consolidate the use of DiscardAttributeValueChecker", "author": "chengfang", "createdAt": "2020-04-28T02:44:47Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBTransformers.java", "diffHunk": "@@ -83,202 +88,199 @@ public String getSubsystemName() {\n \n     @Override\n     public void registerTransformers(SubsystemTransformerRegistration subsystemRegistration) {\n-        registerTransformers_1_2_1(subsystemRegistration);\n-        registerTimerTransformers_1_3_0(subsystemRegistration);\n-        registerTransformers_3_0_0(subsystemRegistration);\n-        registerTransformers_4_0_0(subsystemRegistration);\n-        registerTransformers_5_0_0(subsystemRegistration);\n-    }\n \n-    private static void registerTransformers_1_2_1(SubsystemTransformerRegistration subsystemRegistration) {\n-        registerTransformers_1_2_1_and_1_3_0(subsystemRegistration, VERSION_1_2_1);\n+        ModelVersion currentModel = subsystemRegistration.getCurrentSubsystemVersion();\n+        ChainedTransformationDescriptionBuilder chainedBuilder = TransformationDescriptionBuilder.Factory.createChainedSubystemInstance(currentModel);\n+\n+        registerTransformers_5_0_0(chainedBuilder.createBuilder(currentModel, VERSION_5_0_0.getVersion()));\n+        registerTransformers_4_0_0(chainedBuilder.createBuilder(VERSION_5_0_0.getVersion(), VERSION_4_0_0.getVersion()));\n+        registerTransformers_3_0_0(chainedBuilder.createBuilder(VERSION_4_0_0.getVersion(), VERSION_3_0_0.getVersion()));\n+        registerTransformers_1_3_0(chainedBuilder.createBuilder(VERSION_3_0_0.getVersion(), VERSION_1_3_0.getVersion()));\n+        registerTransformers_1_2_1(chainedBuilder.createBuilder(VERSION_1_3_0.getVersion(), VERSION_1_2_1.getVersion()));\n+\n+        chainedBuilder.buildAndRegister(subsystemRegistration,new ModelVersion[]{VERSION_6_0_0.getVersion(), VERSION_5_0_0.getVersion(), VERSION_4_0_0.getVersion(), VERSION_3_0_0.getVersion(), VERSION_1_3_0.getVersion(), VERSION_1_2_1.getVersion()});\n     }\n \n-    private static void registerTimerTransformers_1_3_0(SubsystemTransformerRegistration subsystemRegistration) {\n-        registerTransformers_1_2_1_and_1_3_0(subsystemRegistration, VERSION_1_3_0);\n+    /*\n+     * Transformers for changes in model version 1.3.0\n+     */\n+    private static void registerTransformers_1_2_1(ResourceTransformationDescriptionBuilder subsystemBuilder) {\n+\n+        DataStoreTransformer dataStoreTransformer = new DataStoreTransformer();\n+\n+        ResourceTransformationDescriptionBuilder timerService = subsystemBuilder.addChildResource(EJB3SubsystemModel.TIMER_SERVICE_PATH);\n+        timerService.getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.ALWAYS, EJB3SubsystemModel.DEFAULT_DATA_STORE)//this is ok, as default-data-store only has any sense with new model, but it is always set!\n+                .end();\n+        timerService.discardOperations(ModelDescriptionConstants.ADD);\n+\n+        // set a custom resource transformer for /subsystem=ejb/service=timer\n+        timerService.setCustomResourceTransformer(dataStoreTransformer);\n+\n+        // reject /subsystem=ejb/service=timer database-data-store children\n+        timerService.rejectChildResource(EJB3SubsystemModel.DATABASE_DATA_STORE_PATH);\n+\n+        ResourceTransformationDescriptionBuilder fileDataStore = timerService.addChildRedirection(EJB3SubsystemModel.FILE_DATA_STORE_PATH, (current, theBuilder) -> theBuilder.getCurrent());\n+\n+        // override the operation /subsystem=ejb/service=timer/file-data-store=F:add(path=, relative-to=)\n+        fileDataStore.addOperationTransformationOverride(ModelDescriptionConstants.ADD)\n+                .inheritResourceAttributeDefinitions()\n+                .setCustomOperationTransformer(dataStoreTransformer)\n+                .end();\n     }\n \n-    private static void registerTransformers_1_2_1_and_1_3_0(SubsystemTransformerRegistration subsystemRegistration, ModelVersion version) {\n-        final ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n+    /*\n+     * Transformers for changes in model version 3.0.0\n+     */\n+    private static void registerTransformers_1_3_0(ResourceTransformationDescriptionBuilder subsystemBuilder) {\n \n         StatefulCacheRefTransformer statefulCacheRefTransformer = new StatefulCacheRefTransformer();\n-        builder.setCustomResourceTransformer(statefulCacheRefTransformer);\n-\n+        subsystemBuilder.setCustomResourceTransformer(statefulCacheRefTransformer);\n         for (String name : Arrays.asList(WRITE_ATTRIBUTE_OPERATION, UNDEFINE_ATTRIBUTE_OPERATION, READ_ATTRIBUTE_OPERATION)) {\n-            builder.addOperationTransformationOverride(name)\n+            subsystemBuilder.addOperationTransformationOverride(name)\n                     .inheritResourceAttributeDefinitions()\n                     .setCustomOperationTransformer(statefulCacheRefTransformer)\n                     .end();\n         }\n-\n-        builder.addOperationTransformationOverride(ADD)\n+        subsystemBuilder.addOperationTransformationOverride(ADD)\n                 .inheritResourceAttributeDefinitions()\n                 .setCustomOperationTransformer(new AddStatefulCacheRefTransformer())\n                 .end();\n \n         //This used to behave as 'true' and it is now defaulting as 'true'\n-        builder.getAttributeBuilder().setDiscard(DiscardAttributeChecker.DEFAULT_VALUE, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS);\n-\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.DISABLE_DEFAULT_EJB_PERMISSIONS);\n-        // We can always discard this attribute, because it's meaningless without the security-manager subsystem, and\n-        // a legacy slave can't have that subsystem in its profile.\n-        builder.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(ModelNode.FALSE), EJB3SubsystemRootResourceDefinition.DISABLE_DEFAULT_EJB_PERMISSIONS);\n-        //builder.getAttributeBuilder().setValueConverter(AttributeConverter.Factory.createHardCoded(new ModelNode(\"hornetq-ra\"), true), EJB3SubsystemRootResourceDefinition.DEFAULT_RESOURCE_ADAPTER_NAME);\n-\n-        builder.getAttributeBuilder().setDiscard(DiscardAttributeChecker.DEFAULT_VALUE, EJB3SubsystemRootResourceDefinition.ALLOW_EJB_NAME_REGEX, EJB3SubsystemRootResourceDefinition.ENABLE_GRACEFUL_TXN_SHUTDOWN);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.ALLOW_EJB_NAME_REGEX, EJB3SubsystemRootResourceDefinition.ENABLE_GRACEFUL_TXN_SHUTDOWN);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.SERVER_INTERCEPTORS);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.CLIENT_INTERCEPTORS);\n-\n-        registerPassivationStoreTransformers_1_2_1_and_1_3_0(builder);\n-        registerRemoteTransformers(builder);\n-        registerMdbDeliveryGroupTransformers(builder);\n-        registerStrictMaxPoolTransformers(builder);\n-        registerApplicationSecurityDomainDTransformers(builder);\n-        registerIdentityTransformers(builder);\n-        registerThreadPoolTransformers(builder);\n-\n-        builder.rejectChildResource(PathElement.pathElement(EJB3SubsystemModel.REMOTING_PROFILE));\n-        if (version.equals(VERSION_1_2_1)) {\n-            registerTimerTransformers_1_2_0(builder);\n-        } else if (version.equals(VERSION_1_3_0)) {\n-            registerTimerTransformers_1_3_0(builder);\n-        }\n-\n-        // Rename new statistics-enabled attribute to old enable-statistics\n-        builder.getAttributeBuilder()\n-               .addRename(EJB3SubsystemModel.STATISTICS_ENABLED, EJB3SubsystemModel.ENABLE_STATISTICS);\n-\n-        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, version);\n-    }\n-\n-    private static void registerTransformers_3_0_0(SubsystemTransformerRegistration subsystemRegistration) {\n-        final ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n-        builder.getAttributeBuilder().setValueConverter(AttributeConverter.Factory.createHardCoded(new ModelNode(\"hornetq-ra\"), true), EJB3SubsystemRootResourceDefinition.DEFAULT_RESOURCE_ADAPTER_NAME)\n+        subsystemBuilder.getAttributeBuilder()\n+                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(ModelNode.TRUE), EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS)", "originalCommit": "9179b61f4249343a73b6920d0a434a912dd74f79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzMjc3OQ==", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r416832779", "bodyText": "@chengfang Thanks, that instance is fixed in the current state of the PR.", "author": "rachmatowicz", "createdAt": "2020-04-28T18:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4NTU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a1cf24946bbbb58087b4b96854632702ec902b8", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBTransformers.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBTransformers.java\nindex d2aa0e384e..9c968c27e2 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBTransformers.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBTransformers.java\n\n@@ -149,7 +148,7 @@ public class EJBTransformers implements ExtensionTransformerRegistration {\n \n         //This used to behave as 'true' and it is now defaulting as 'true'\n         subsystemBuilder.getAttributeBuilder()\n-                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(ModelNode.TRUE), EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS)\n+                .setDiscard(DiscardAttributeChecker.DEFAULT_VALUE, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS)\n                 .addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS)\n                 .end();\n \n"}}]}