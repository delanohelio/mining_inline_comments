{"pr_number": 12952, "pr_title": "[WFLY-13042]: Jaeger tracer sender-binding isn't configurable.", "pr_createdAt": "2020-01-31T09:26:39Z", "pr_url": "https://github.com/wildfly/wildfly/pull/12952", "timeline": [{"oid": "cdb6e34b433efa6fc71da3052310b63c7c423a78", "url": "https://github.com/wildfly/wildfly/commit/cdb6e34b433efa6fc71da3052310b63c7c423a78", "message": "[WFLY-13042]: Jaeger tracer sender-binding isn't configurable.\n\n* Obtaining the socket-bindings when the tracer is being configured.\n* Adding security constraint on the attribute definition.\n\nJira: https://issues.redhat.com/browse/WFLY-13042", "committedDate": "2020-01-31T10:56:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUzNzg2Mw==", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373537863", "bodyText": "Not a huge deal, but this should probably be final.", "author": "jamezp", "createdAt": "2020-01-31T15:29:10Z", "path": "microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java", "diffHunk": "@@ -54,13 +54,15 @@\n     private final CodecConfiguration codecConfig;\n     private final SamplerConfiguration samplerConfig;\n     private final ReporterConfiguration reporterConfig;\n+    private Supplier<OutboundSocketBinding> outboundSocketBindingSupplier = null;", "originalCommit": "cdb6e34b433efa6fc71da3052310b63c7c423a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce84996eaebfd84b72d0595d565def63ea139262", "chunk": "diff --git a/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java b/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java\nindex 8f6b3e709a..8829b73b42 100644\n--- a/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java\n+++ b/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java\n\n@@ -54,7 +54,7 @@ public class JaegerTracerConfiguration implements TracerConfiguration {\n     private final CodecConfiguration codecConfig;\n     private final SamplerConfiguration samplerConfig;\n     private final ReporterConfiguration reporterConfig;\n-    private Supplier<OutboundSocketBinding> outboundSocketBindingSupplier = null;\n+    private final Supplier<OutboundSocketBinding> outboundSocketBindingSupplier;\n     private final boolean traceId128Bit;\n     private final Map<String, String> tracerTags;\n     private final ModelNode model;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0Mjg1Mg==", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373542852", "bodyText": "I don't really know how this is used, but we might want to do something more like.\nfinal OutboundSocketBinding binding = outboundSocketBindingSupplier.get();\nif(outboundSocketBindingSupplier.get() != null) {\n    senderConfiguration.withAgentHost(binding.getUnresolvedDestinationAddress())\n            .withAgentPort(binding.getDestinationPort());\n}\n\nI don't know what the overhead of get() is in MSC, but it seems like a single get() would be better.", "author": "jamezp", "createdAt": "2020-01-31T15:38:58Z", "path": "microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java", "diffHunk": "@@ -102,6 +100,11 @@ public String getName() {\n \n     @Override\n     public Tracer createTracer(String serviceName) {\n+        Configuration.SenderConfiguration senderConfiguration = reporterConfig.getSenderConfiguration();\n+        if(outboundSocketBindingSupplier.get() != null) {\n+            senderConfiguration.withAgentHost(outboundSocketBindingSupplier.get().getUnresolvedDestinationAddress())\n+                    .withAgentPort(outboundSocketBindingSupplier.get().getDestinationPort());\n+        }", "originalCommit": "cdb6e34b433efa6fc71da3052310b63c7c423a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce84996eaebfd84b72d0595d565def63ea139262", "chunk": "diff --git a/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java b/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java\nindex 8f6b3e709a..8829b73b42 100644\n--- a/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java\n+++ b/microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java\n\n@@ -101,9 +101,10 @@ public class JaegerTracerConfiguration implements TracerConfiguration {\n     @Override\n     public Tracer createTracer(String serviceName) {\n         Configuration.SenderConfiguration senderConfiguration = reporterConfig.getSenderConfiguration();\n-        if(outboundSocketBindingSupplier.get() != null) {\n-            senderConfiguration.withAgentHost(outboundSocketBindingSupplier.get().getUnresolvedDestinationAddress())\n-                    .withAgentPort(outboundSocketBindingSupplier.get().getDestinationPort());\n+        OutboundSocketBinding outboundSocketBinding = outboundSocketBindingSupplier.get();\n+        if(outboundSocketBinding != null) {\n+            senderConfiguration.withAgentHost(outboundSocketBinding.getUnresolvedDestinationAddress())\n+                    .withAgentPort(outboundSocketBinding.getDestinationPort());\n         }\n         return new Configuration(serviceName)\n                 .withCodec(codecConfig)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0NDUyMQ==", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373544521", "bodyText": "This should be using TestSuiteEnvironment.getServerAddress(). That method already formats ipv6 addresses and also checks the two properties management.address and node0.", "author": "jamezp", "createdAt": "2020-01-31T15:42:26Z", "path": "testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/SubsystemConfigurationTestCase.java", "diffHunk": "@@ -59,6 +65,14 @@\n @ServerSetup(SubsystemConfigurationTestCase.SetupTask.class)\n public class SubsystemConfigurationTestCase {\n \n+    private static final String OUTBOUND_BINDING = \"jaeger-sender\";\n+    private static final ModelNode OUTBOUND_BINDING_ADDRESS = PathAddress\n+            .pathAddress(SOCKET_BINDING_GROUP, \"standard-sockets\")\n+            .append(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING, OUTBOUND_BINDING)\n+            .toModelNode();\n+    private static final int SENDER_PORT = 6832;\n+    private static final String SENDER_HOST = NetworkUtils.formatPossibleIpv6Address(System.getProperty(\"node0\", \"localhost\"));", "originalCommit": "cdb6e34b433efa6fc71da3052310b63c7c423a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce84996eaebfd84b72d0595d565def63ea139262", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/SubsystemConfigurationTestCase.java b/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/SubsystemConfigurationTestCase.java\nindex 4c3abe97cc..7aa9fe317c 100644\n--- a/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/SubsystemConfigurationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/SubsystemConfigurationTestCase.java\n\n@@ -71,7 +72,7 @@ public class SubsystemConfigurationTestCase {\n             .append(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING, OUTBOUND_BINDING)\n             .toModelNode();\n     private static final int SENDER_PORT = 6832;\n-    private static final String SENDER_HOST = NetworkUtils.formatPossibleIpv6Address(System.getProperty(\"node0\", \"localhost\"));\n+    private static final String SENDER_HOST = TestSuiteEnvironment.getServerAddress();\n \n     private static final String WEB_XML\n             = \"<web-app version=\\\"3.1\\\" xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\"\\n\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0NzI0Mw==", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373547243", "bodyText": "Should we not be throwing the error here?", "author": "jamezp", "createdAt": "2020-01-31T15:47:51Z", "path": "testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java", "diffHunk": "@@ -23,8 +27,37 @@\n         @GET\n         @Produces(\"text/plain\")\n         public String get() {\n+            if (JaegerTracer.class.isInstance(this.tracer)) {\n+                return tracer.toString() + getSenderConfiguration();\n+            }\n             return tracer.toString();\n         }\n \n+        private String getSenderConfiguration() {\n+            try {\n+                Field reporterField = this.tracer.getClass().getDeclaredField(\"reporter\");\n+                reporterField.setAccessible(true);\n+                Object reporter = reporterField.get(this.tracer);\n+                if (\"RemoteReporter\".equals(reporter.getClass().getSimpleName())) {\n+                    Field senderField = reporter.getClass().getDeclaredField(\"sender\");\n+                    senderField.setAccessible(true);\n+                    Object sender = senderField.get(reporter);\n+                    if (\"UdpSender\".equals(sender.getClass().getSimpleName())) {\n+                        Field transportField = sender.getClass().getDeclaredField(\"udpTransport\");\n+                        transportField.setAccessible(true);\n+                        Object transport = transportField.get(sender);\n+                        if (\"ThriftUdpTransport\".equals(transport.getClass().getSimpleName())) {\n+                            Field socketField = transport.getClass().getDeclaredField(\"socket\");\n+                            socketField.setAccessible(true);\n+                            DatagramSocket socket = (DatagramSocket) socketField.get(transport);\n+                            return \"sender-binding=\" + NetworkUtils.formatIPAddressForURI(socket.getInetAddress()) + \":\" + socket.getPort();\n+                        }\n+                    }\n+                }\n+            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {\n+                ex.printStackTrace();", "originalCommit": "cdb6e34b433efa6fc71da3052310b63c7c423a78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMzI0Mw==", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373603243", "bodyText": "yes, originally I wanted to avoid exception with different tracers implementations but this has been covered higher in the code", "author": "ehsavoie", "createdAt": "2020-01-31T17:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0NzI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ce84996eaebfd84b72d0595d565def63ea139262", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java b/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java\nindex 2e1c8c7d10..1cd65a0e34 100644\n--- a/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java\n+++ b/testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java\n\n@@ -27,7 +27,7 @@ public class TracerConfigurationApplication extends Application {\n         @GET\n         @Produces(\"text/plain\")\n         public String get() {\n-            if (JaegerTracer.class.isInstance(this.tracer)) {\n+            if (checkClass(this.tracer, \"JaegerTracer\")) {\n                 return tracer.toString() + getSenderConfiguration();\n             }\n             return tracer.toString();\n"}}, {"oid": "ce84996eaebfd84b72d0595d565def63ea139262", "url": "https://github.com/wildfly/wildfly/commit/ce84996eaebfd84b72d0595d565def63ea139262", "message": "[WFLY-13042]: Jaeger tracer sender-binding isn't configurable.\n\n* Obtaining the socket-bindings when the tracer is being configured.\n* Adding security constraint on the attribute definition.\n\nJira: https://issues.redhat.com/browse/WFLY-13042", "committedDate": "2020-01-31T17:53:34Z", "type": "forcePushed"}, {"oid": "df5ed9643105924f733f0fd1c3fc089b0b7a4b4b", "url": "https://github.com/wildfly/wildfly/commit/df5ed9643105924f733f0fd1c3fc089b0b7a4b4b", "message": "[WFLY-13042]: Jaeger tracer sender-binding isn't configurable.\n\n* Obtaining the socket-bindings when the tracer is being configured.\n* Adding security constraint on the attribute definition.\n\nJira: https://issues.redhat.com/browse/WFLY-13042", "committedDate": "2020-02-01T22:39:44Z", "type": "forcePushed"}, {"oid": "ae7ed119880e3766008ddc5ae5ddb7c1d97306cf", "url": "https://github.com/wildfly/wildfly/commit/ae7ed119880e3766008ddc5ae5ddb7c1d97306cf", "message": "[WFLY-13042]: Jaeger tracer sender-binding isn't configurable.\n\n* Obtaining the socket-bindings when the tracer is being configured.\n* Adding security constraint on the attribute definition.\n\nJira: https://issues.redhat.com/browse/WFLY-13042", "committedDate": "2020-02-04T09:21:05Z", "type": "commit"}, {"oid": "ae7ed119880e3766008ddc5ae5ddb7c1d97306cf", "url": "https://github.com/wildfly/wildfly/commit/ae7ed119880e3766008ddc5ae5ddb7c1d97306cf", "message": "[WFLY-13042]: Jaeger tracer sender-binding isn't configurable.\n\n* Obtaining the socket-bindings when the tracer is being configured.\n* Adding security constraint on the attribute definition.\n\nJira: https://issues.redhat.com/browse/WFLY-13042", "committedDate": "2020-02-04T09:21:05Z", "type": "forcePushed"}]}