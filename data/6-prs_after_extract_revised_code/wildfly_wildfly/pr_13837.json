{"pr_number": 13837, "pr_title": "[WFLY-12896] EE Managed Executors Hung Task Termination feature + EE model bump to 6.0", "pr_createdAt": "2020-12-23T13:31:43Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13837", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1ODE5NQ==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r556658195", "bodyText": "@emmartins logger isn't used", "author": "tommaso-borgato", "createdAt": "2021-01-13T16:27:03Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);", "originalCommit": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTg3Mw==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421873", "bodyText": "removed, thanks", "author": "emmartins", "createdAt": "2021-01-14T14:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1ODE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\nindex 7c9aed6747..9e592a165c 100644\n--- a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n\n@@ -36,7 +36,6 @@ import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.logging.Logger;\n import org.jboss.remoting3.security.RemotingPermission;\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDExNg==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557144116", "bodyText": "@emmartins what are these permissions for?", "author": "tommaso-borgato", "createdAt": "2021-01-14T07:59:05Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")", "originalCommit": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxOTk0MA==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557419940", "bodyText": "see comment below", "author": "emmartins", "createdAt": "2021-01-14T14:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDExNg=="}], "type": "inlineReview", "revised_code": {"commit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\nindex 7c9aed6747..9e592a165c 100644\n--- a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n\n@@ -36,7 +36,6 @@ import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.logging.Logger;\n import org.jboss.remoting3.security.RemotingPermission;\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDk0OA==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557144948", "bodyText": "@emmartins what is this permissions for?", "author": "tommaso-borgato", "createdAt": "2021-01-14T07:59:39Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")", "originalCommit": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMDgzOA==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557420838", "bodyText": "Needed for security manager runs, https://issues.redhat.com/browse/WFLY-5169 added these to the similar EEConcurrentManagementTestCase", "author": "emmartins", "createdAt": "2021-01-14T14:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\nindex 7c9aed6747..9e592a165c 100644\n--- a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n\n@@ -36,7 +36,6 @@ import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.logging.Logger;\n import org.jboss.remoting3.security.RemotingPermission;\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5OTcyMg==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557299722", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the terminate-hung-tasks operation works on a managed-executor-service\n* @throws Exception\n*/", "author": "tommaso-borgato", "createdAt": "2021-01-14T10:39:07Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+", "originalCommit": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTU4OQ==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421589", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "author": "emmartins", "createdAt": "2021-01-14T14:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5OTcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\nindex 7c9aed6747..9e592a165c 100644\n--- a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n\n@@ -36,7 +36,6 @@ import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.logging.Logger;\n import org.jboss.remoting3.security.RemotingPermission;\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDEzNA==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557300134", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the terminate-hung-tasks operation works on a managed-scheduled-executor-service\n* @throws Exception\n*/", "author": "tommaso-borgato", "createdAt": "2021-01-14T10:39:51Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "originalCommit": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTYzNQ==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421635", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "author": "emmartins", "createdAt": "2021-01-14T14:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\nindex 7c9aed6747..9e592a165c 100644\n--- a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n\n@@ -36,7 +36,6 @@ import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.logging.Logger;\n import org.jboss.remoting3.security.RemotingPermission;\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDYxNQ==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557300615", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the hung-task-termination-period works on a managed-executor-service\n* @throws Exception\n*/", "author": "tommaso-borgato", "createdAt": "2021-01-14T10:40:37Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedScheduledExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_SCHEDULED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/scheduledexecutor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            // lookup the executor\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "originalCommit": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTY4Mw==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421683", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "author": "emmartins", "createdAt": "2021-01-14T14:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\nindex 7c9aed6747..9e592a165c 100644\n--- a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n\n@@ -36,7 +36,6 @@ import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.logging.Logger;\n import org.jboss.remoting3.security.RemotingPermission;\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDg0Mg==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557300842", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the hung-task-termination-period works on a managed-scheduled-executor-service\n* @throws Exception\n*/", "author": "tommaso-borgato", "createdAt": "2021-01-14T10:40:59Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedScheduledExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_SCHEDULED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/scheduledexecutor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            // lookup the executor\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationPeriodic() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_TERMINATION_PERIOD).set(HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationPeriodic(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "originalCommit": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTczNw==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421737", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "author": "emmartins", "createdAt": "2021-01-14T14:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "chunk": "diff --git a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\nindex 7c9aed6747..9e592a165c 100644\n--- a/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n+++ b/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java\n\n@@ -36,7 +36,6 @@ import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n import org.jboss.dmr.ModelNode;\n-import org.jboss.logging.Logger;\n import org.jboss.remoting3.security.RemotingPermission;\n import org.jboss.shrinkwrap.api.Archive;\n import org.jboss.shrinkwrap.api.ShrinkWrap;\n"}}, {"oid": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "url": "https://github.com/wildfly/wildfly/commit/25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "message": "[WFLY-12896] ee managed executors hung task termination feature", "committedDate": "2021-01-14T14:07:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzOTczNQ==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561439735", "bodyText": "This is contrary to https://github.com/wildfly/wildfly-proposals/pull/272/files#diff-92d9b62a418fa48fe8ae1baf9370be6f000f7c8901f0c459b836ff48444941f5R90\nGuarding this with an 'if (resourceRegistration.getProcessType().isServer())' check will correct that.", "author": "bstansberry", "createdAt": "2021-01-21T00:51:56Z", "path": "ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java", "diffHunk": "@@ -178,19 +190,30 @@\n             .addMetric(ManagedExecutorServiceMetricsAttributes.THREAD_COUNT_AD, (context, service) -> context.getResult().set(service.getExecutorService().getRuntimeStats().getThreadsCount()))\n             .build();\n \n+    /**\n+     * terminate hung threads op\n+     */\n+    private static final ManagedExecutorTerminateHungTasksOperation<ManagedExecutorServiceService> TERMINATE_HUNG_TASKS_OP = new ManagedExecutorTerminateHungTasksOperation<>(CAPABILITY, RESOLVER, service -> service.getExecutorService());\n+\n     /**\n      *\n      */\n     private final boolean registerRuntimeOnly;\n \n     ManagedExecutorServiceResourceDefinition(boolean registerRuntimeOnly) {\n-        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, EeExtension.getResourceDescriptionResolver(EESubsystemModel.MANAGED_EXECUTOR_SERVICE))\n+        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, RESOLVER)\n                 .setAddHandler(ManagedExecutorServiceAdd.INSTANCE)\n                 .setRemoveHandler(new ServiceRemoveStepHandler(ManagedExecutorServiceAdd.INSTANCE))\n                 .addCapabilities(CAPABILITY));\n         this.registerRuntimeOnly = registerRuntimeOnly;\n     }\n \n+    @Override\n+    public void registerOperations(ManagementResourceRegistration resourceRegistration) {\n+        super.registerOperations(resourceRegistration);\n+        TERMINATE_HUNG_TASKS_OP.registerOperation(resourceRegistration);", "originalCommit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTgzODk5Ng==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561838996", "bodyText": "Fixed, did it inside TERMINATE_HUNG_TASKS_OP.registerOperation(resourceRegistration) tho, since that applies to both executor resource definitions.", "author": "emmartins", "createdAt": "2021-01-21T12:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzOTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "70d081031ab83abcf87c50e943e0babd31dfedd7", "chunk": "diff --git a/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java b/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java\nindex cb56f5a389..d5df327890 100644\n--- a/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java\n+++ b/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java\n\n@@ -190,30 +178,19 @@ public class ManagedExecutorServiceResourceDefinition extends SimpleResourceDefi\n             .addMetric(ManagedExecutorServiceMetricsAttributes.THREAD_COUNT_AD, (context, service) -> context.getResult().set(service.getExecutorService().getRuntimeStats().getThreadsCount()))\n             .build();\n \n-    /**\n-     * terminate hung threads op\n-     */\n-    private static final ManagedExecutorTerminateHungTasksOperation<ManagedExecutorServiceService> TERMINATE_HUNG_TASKS_OP = new ManagedExecutorTerminateHungTasksOperation<>(CAPABILITY, RESOLVER, service -> service.getExecutorService());\n-\n     /**\n      *\n      */\n     private final boolean registerRuntimeOnly;\n \n     ManagedExecutorServiceResourceDefinition(boolean registerRuntimeOnly) {\n-        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, RESOLVER)\n+        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, EeExtension.getResourceDescriptionResolver(EESubsystemModel.MANAGED_EXECUTOR_SERVICE))\n                 .setAddHandler(ManagedExecutorServiceAdd.INSTANCE)\n                 .setRemoveHandler(new ServiceRemoveStepHandler(ManagedExecutorServiceAdd.INSTANCE))\n                 .addCapabilities(CAPABILITY));\n         this.registerRuntimeOnly = registerRuntimeOnly;\n     }\n \n-    @Override\n-    public void registerOperations(ManagementResourceRegistration resourceRegistration) {\n-        super.registerOperations(resourceRegistration);\n-        TERMINATE_HUNG_TASKS_OP.registerOperation(resourceRegistration);\n-    }\n-\n     @Override\n     public void registerAttributes(ManagementResourceRegistration resourceRegistration) {\n         OperationStepHandler writeHandler = new ValidatingWriteHandler(ATTRIBUTES);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MTQ5Ng==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561441496", "bodyText": "This is vulnerable to an NPE in a race.  Assigning 'task' a local var 'localTask' and then working with that eliminates that possibility.", "author": "bstansberry", "createdAt": "2021-01-21T00:53:40Z", "path": "ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java", "diffHunk": "@@ -94,7 +111,33 @@ private CreateThreadAction(Runnable r, ContextHandle contextHandleForSetup) {\n \n         @Override\n         public AbstractManagedThread run() {\n-            return ManagedThreadFactoryImpl.super.createThread(r, contextHandleForSetup);\n+            return new ManagedThread(r, contextHandleForSetup);\n+        }\n+    }\n+\n+    /**\n+     * Managed thread extension, to allow canceling the task running in the thread.\n+     * @author emmartins\n+     */\n+    public class ManagedThread extends org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl.ManagedThread {\n+        volatile ManagedFutureTask task = null;\n+        /**\n+         *\n+         * @param target\n+         * @param contextHandleForSetup\n+         */\n+        public ManagedThread(Runnable target, ContextHandle contextHandleForSetup) {\n+            super(target, contextHandleForSetup);\n+        }\n+        /**\n+         * Cancel the task running in the thread.\n+         * @return\n+         */\n+        boolean cancelTask() {\n+            if (task != null) {\n+                return task.cancel(true);\n+            }", "originalCommit": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTgzODQxOA==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561838418", "bodyText": "Fixed, and good catch, code was copied from the RI class it extends and didn't noticed. RI issue reported at eclipse-ee4j/concurrency-ri#47", "author": "emmartins", "createdAt": "2021-01-21T12:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MTQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI0NTQ1Mg==", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r562245452", "bodyText": "\ud83d\udc4d", "author": "bstansberry", "createdAt": "2021-01-21T22:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MTQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "70d081031ab83abcf87c50e943e0babd31dfedd7", "chunk": "diff --git a/ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java b/ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java\nindex 98c2a73c36..f96255b6e0 100644\n--- a/ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java\n+++ b/ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java\n\n@@ -111,33 +94,7 @@ public class ManagedThreadFactoryImpl extends org.glassfish.enterprise.concurren\n \n         @Override\n         public AbstractManagedThread run() {\n-            return new ManagedThread(r, contextHandleForSetup);\n-        }\n-    }\n-\n-    /**\n-     * Managed thread extension, to allow canceling the task running in the thread.\n-     * @author emmartins\n-     */\n-    public class ManagedThread extends org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl.ManagedThread {\n-        volatile ManagedFutureTask task = null;\n-        /**\n-         *\n-         * @param target\n-         * @param contextHandleForSetup\n-         */\n-        public ManagedThread(Runnable target, ContextHandle contextHandleForSetup) {\n-            super(target, contextHandleForSetup);\n-        }\n-        /**\n-         * Cancel the task running in the thread.\n-         * @return\n-         */\n-        boolean cancelTask() {\n-            if (task != null) {\n-                return task.cancel(true);\n-            }\n-            return false;\n+            return ManagedThreadFactoryImpl.super.createThread(r, contextHandleForSetup);\n         }\n     }\n }\n"}}, {"oid": "70d081031ab83abcf87c50e943e0babd31dfedd7", "url": "https://github.com/wildfly/wildfly/commit/70d081031ab83abcf87c50e943e0babd31dfedd7", "message": "[WFLY-12896] bump ee subsystem model and xsd", "committedDate": "2021-01-21T12:08:01Z", "type": "commit"}, {"oid": "035844e763279052ff6cc63922c18babbb998693", "url": "https://github.com/wildfly/wildfly/commit/035844e763279052ff6cc63922c18babbb998693", "message": "[WFLY-12896] ee managed executors hung task termination feature", "committedDate": "2021-01-21T12:14:09Z", "type": "commit"}, {"oid": "035844e763279052ff6cc63922c18babbb998693", "url": "https://github.com/wildfly/wildfly/commit/035844e763279052ff6cc63922c18babbb998693", "message": "[WFLY-12896] ee managed executors hung task termination feature", "committedDate": "2021-01-21T12:14:09Z", "type": "forcePushed"}]}