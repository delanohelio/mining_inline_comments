{"pr_number": 13810, "pr_title": "WFLY-14110 Distributed session manager reports HttpSession.getLastAccessedTime() incorrectly", "pr_createdAt": "2020-12-10T22:57:32Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13810", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NTI5Mg==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r540575292", "bodyText": "What does 'newly created' mean? First request for the session id anywhere in the cluster? Locally?", "author": "bstansberry", "createdAt": "2020-12-10T23:25:25Z", "path": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java", "diffHunk": "@@ -28,11 +28,31 @@\n  * The more static aspects of a session's meta-data.\n  * @author Paul Ferraro\n  */\n-public interface SessionCreationMetaData extends ImmutableSessionCreationMetaData {\n-\n+public interface SessionCreationMetaData extends ImmutableSessionCreationMetaData, AutoCloseable {\n+    /**\n+     * Sets the maximum duration of time this session may remain idle before it will be expired by the session manager.\n+     * @param a maximum duration of time this session may remain idle before it will be expired by the session manager.\n+     */\n     void setMaxInactiveInterval(Duration duration);\n \n+    /**\n+     * Indicates whether or not this session has been invalidated.\n+     * @return true, if this session was invalidated, false otherwise.\n+     */\n     boolean isValid();\n \n+    /**\n+     * Invalidates this session.\n+     * @return true, if this session was previous valid, false otherwise\n+     */\n     boolean invalidate();\n+\n+    /**\n+     * Indicates whether or not this session was newly created.", "originalCommit": "eb997287bf90663ce3ca9318c6dd041d7cee2202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5Njk5MQ==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r540596991", "bodyText": "As defined by: https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpSession.html#isNew--", "author": "pferraro", "createdAt": "2020-12-11T00:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NTI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMjg3NA==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r540602874", "bodyText": "This property was formerly implied by the fact that the creationTime != the lastAccessedTime.  However, since the semantics of lastAccessedTime have changed, isNew() must now be determined explicitly, hence this logic.", "author": "pferraro", "createdAt": "2020-12-11T00:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NTI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NTUwMQ==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r541275501", "bodyText": "Thanks.", "author": "bstansberry", "createdAt": "2020-12-11T20:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NTI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "505649cd9bea8c223acd716f562754106f8ecd11", "chunk": "diff --git a/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java b/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java\nindex eee56a52dc..39ad4700e1 100644\n--- a/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java\n+++ b/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java\n\n@@ -53,6 +53,9 @@ public interface SessionCreationMetaData extends ImmutableSessionCreationMetaDat\n      */\n     boolean isNew();\n \n+    /**\n+     * Signals the end of the transient lifecycle of this session, typically triggered at the end of a given request.\n+     */\n     @Override\n     void close();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NjU2Mw==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r540576563", "bodyText": "What is the expected use of this? From looking at the PR it seems it's meant to be called at some point and that changes what isNew() would return. But 'close()' as a method name doesn't say that, which is ok so long as the expected use of close() will have that effect. But the expected use is ???.", "author": "bstansberry", "createdAt": "2020-12-10T23:28:22Z", "path": "clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java", "diffHunk": "@@ -28,11 +28,31 @@\n  * The more static aspects of a session's meta-data.\n  * @author Paul Ferraro\n  */\n-public interface SessionCreationMetaData extends ImmutableSessionCreationMetaData {\n-\n+public interface SessionCreationMetaData extends ImmutableSessionCreationMetaData, AutoCloseable {\n+    /**\n+     * Sets the maximum duration of time this session may remain idle before it will be expired by the session manager.\n+     * @param a maximum duration of time this session may remain idle before it will be expired by the session manager.\n+     */\n     void setMaxInactiveInterval(Duration duration);\n \n+    /**\n+     * Indicates whether or not this session has been invalidated.\n+     * @return true, if this session was invalidated, false otherwise.\n+     */\n     boolean isValid();\n \n+    /**\n+     * Invalidates this session.\n+     * @return true, if this session was previous valid, false otherwise\n+     */\n     boolean invalidate();\n+\n+    /**\n+     * Indicates whether or not this session was newly created.\n+     * @return true, if this session was newly created, false otherwise.\n+     */\n+    boolean isNew();\n+\n+    @Override\n+    void close();", "originalCommit": "eb997287bf90663ce3ca9318c6dd041d7cee2202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NjM4NQ==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r540596385", "bodyText": "This is ultimately triggered by org.wildfly.clustering.web.session.Session#close which effectively ends the transient lifecycle of the session (typically spanning a single request).", "author": "pferraro", "createdAt": "2020-12-11T00:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MzA0MA==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r541273040", "bodyText": "@pferraro Thanks. I meant to ask in my previous comment whether the javadoc should say something about this, for the benefit of future maintainers.", "author": "bstansberry", "createdAt": "2020-12-11T20:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2Mzk4OQ==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r541363989", "bodyText": "Ah - you're too subtle for me. I've added javadoc added to this and other closeable objects in this module to clarify the semantics.", "author": "pferraro", "createdAt": "2020-12-11T22:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NjU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NDU2Nw==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r541374567", "bodyText": "Thanks. That helps a lot. I think of a session as a long lived thing. Object implementing these interfaces might or might not be, so my brain had trouble grokking what the semantics of close would be.", "author": "bstansberry", "createdAt": "2020-12-11T22:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3NjU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "505649cd9bea8c223acd716f562754106f8ecd11", "chunk": "diff --git a/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java b/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java\nindex eee56a52dc..39ad4700e1 100644\n--- a/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java\n+++ b/clustering/web/cache/src/main/java/org/wildfly/clustering/web/cache/session/SessionCreationMetaData.java\n\n@@ -53,6 +53,9 @@ public interface SessionCreationMetaData extends ImmutableSessionCreationMetaDat\n      */\n     boolean isNew();\n \n+    /**\n+     * Signals the end of the transient lifecycle of this session, typically triggered at the end of a given request.\n+     */\n     @Override\n     void close();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NjkzMA==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r540586930", "bodyText": "Is a new one of these DistributableSession objects created per request?\nMust be or startTime would not change and the Batch object passed to the c'tor doesn't sound like something that would span requests.", "author": "bstansberry", "createdAt": "2020-12-10T23:52:48Z", "path": "clustering/web/undertow/src/main/java/org/wildfly/clustering/web/undertow/session/DistributableSession.java", "diffHunk": "@@ -87,6 +90,11 @@ public void requestDone(HttpServerExchange exchange) {\n                     }\n                     // If batch is closed, close session in a new batch\n                     try (Batch batch = (this.batch.getState() == Batch.State.CLOSED) ? batcher.createBatch() : this.batch) {\n+                        if (this.startTime != null) {\n+                            // According to \u00a77.6 of the servlet specification:\n+                            // The session is considered to be accessed when a request that is part of the session is first handled by the servlet container.\n+                            session.getMetaData().setLastAccessedTime(this.startTime);", "originalCommit": "eb997287bf90663ce3ca9318c6dd041d7cee2202", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NjkyNw==", "url": "https://github.com/wildfly/wildfly/pull/13810#discussion_r540596927", "bodyText": "Is a new one of these DistributableSession objects created per request?\n\nYes.", "author": "pferraro", "createdAt": "2020-12-11T00:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NjkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "5d7a1cc986e9e5f7ec4c39c0119b34569b7b69d7", "chunk": "diff --git a/clustering/web/undertow/src/main/java/org/wildfly/clustering/web/undertow/session/DistributableSession.java b/clustering/web/undertow/src/main/java/org/wildfly/clustering/web/undertow/session/DistributableSession.java\nindex 2dcf2f72ea..191fe149b9 100644\n--- a/clustering/web/undertow/src/main/java/org/wildfly/clustering/web/undertow/session/DistributableSession.java\n+++ b/clustering/web/undertow/src/main/java/org/wildfly/clustering/web/undertow/session/DistributableSession.java\n\n@@ -93,7 +93,7 @@ public class DistributableSession implements io.undertow.server.session.Session\n                         if (this.startTime != null) {\n                             // According to \u00a77.6 of the servlet specification:\n                             // The session is considered to be accessed when a request that is part of the session is first handled by the servlet container.\n-                            session.getMetaData().setLastAccessedTime(this.startTime);\n+                            session.getMetaData().setLastAccess(this.startTime, Instant.now());\n                         }\n                         session.close();\n                     }\n"}}, {"oid": "505649cd9bea8c223acd716f562754106f8ecd11", "url": "https://github.com/wildfly/wildfly/commit/505649cd9bea8c223acd716f562754106f8ecd11", "message": "Replace VolatileReference with AtomicReference.", "committedDate": "2020-12-15T15:28:54Z", "type": "forcePushed"}, {"oid": "0ea78410d3a4fc0a3b50306aad4a369fb1ef4702", "url": "https://github.com/wildfly/wildfly/commit/0ea78410d3a4fc0a3b50306aad4a369fb1ef4702", "message": "Replace VolatileReference with AtomicReference.", "committedDate": "2020-12-15T23:49:50Z", "type": "forcePushed"}, {"oid": "5c838b48c27fd8015c631c241eaa1dcd3bdc9ffb", "url": "https://github.com/wildfly/wildfly/commit/5c838b48c27fd8015c631c241eaa1dcd3bdc9ffb", "message": "Replace VolatileReference with AtomicReference.", "committedDate": "2020-12-18T17:51:18Z", "type": "forcePushed"}, {"oid": "a3d19cc62951955a0cc10280d2028c8ed03fe3f7", "url": "https://github.com/wildfly/wildfly/commit/a3d19cc62951955a0cc10280d2028c8ed03fe3f7", "message": "Allow Infinispan to handle stacktraces containing JBoss Marshalling exceptions.", "committedDate": "2020-12-21T19:32:26Z", "type": "forcePushed"}, {"oid": "f122e1f3f82cd2219611e3154e4beca324f42bf3", "url": "https://github.com/wildfly/wildfly/commit/f122e1f3f82cd2219611e3154e4beca324f42bf3", "message": "Throw AssertionError instead of NotSerializableException to bypass JBossMarshalling TraceInformation logic.", "committedDate": "2020-12-21T21:44:11Z", "type": "forcePushed"}, {"oid": "5d7a1cc986e9e5f7ec4c39c0119b34569b7b69d7", "url": "https://github.com/wildfly/wildfly/commit/5d7a1cc986e9e5f7ec4c39c0119b34569b7b69d7", "message": "Fix subsecond premature hotrod expiration", "committedDate": "2020-12-27T17:56:46Z", "type": "forcePushed"}, {"oid": "28423b2bcb8a7aa48312be6e3f9f320104c7779d", "url": "https://github.com/wildfly/wildfly/commit/28423b2bcb8a7aa48312be6e3f9f320104c7779d", "message": "WFLY-14110 Distributed session manager reports HttpSession.getLastAccessedTime() incorrectly", "committedDate": "2021-01-02T16:18:24Z", "type": "commit"}, {"oid": "939fa009ef02449ce6011e2c11b00aac8009cebc", "url": "https://github.com/wildfly/wildfly/commit/939fa009ef02449ce6011e2c11b00aac8009cebc", "message": "Add javadoc to clarify #close() semantics.", "committedDate": "2021-01-02T16:18:24Z", "type": "commit"}, {"oid": "64092fc44ee2b2f97699ff9b60db4d102bfea602", "url": "https://github.com/wildfly/wildfly/commit/64092fc44ee2b2f97699ff9b60db4d102bfea602", "message": "WFLY-14225 Concurrent writes to ATTRIBUTE granularity session can cause missing session passivation/activation events", "committedDate": "2021-01-02T16:18:24Z", "type": "commit"}, {"oid": "0b98949877e159487cab1e773868d694954b85b3", "url": "https://github.com/wildfly/wildfly/commit/0b98949877e159487cab1e773868d694954b85b3", "message": "Replace VolatileReference with AtomicReference.", "committedDate": "2021-01-02T16:18:24Z", "type": "commit"}, {"oid": "00c6052c8c1fe2c6d8032807cc8a06db84e17977", "url": "https://github.com/wildfly/wildfly/commit/00c6052c8c1fe2c6d8032807cc8a06db84e17977", "message": "Throw AssertionError instead of NotSerializableException to bypass JBossMarshalling TraceInformation logic.", "committedDate": "2021-01-02T16:18:24Z", "type": "commit"}, {"oid": "e0aa5662c24bc6031fb0fa74efd12380fafbffe2", "url": "https://github.com/wildfly/wildfly/commit/e0aa5662c24bc6031fb0fa74efd12380fafbffe2", "message": "Fix subsecond premature hotrod expiration", "committedDate": "2021-01-02T16:18:24Z", "type": "commit"}, {"oid": "e758945ae24e4d84197613a43c359f23823c1722", "url": "https://github.com/wildfly/wildfly/commit/e758945ae24e4d84197613a43c359f23823c1722", "message": "Avoid concurrency during remove from non-owner.", "committedDate": "2021-01-02T17:01:47Z", "type": "commit"}, {"oid": "e758945ae24e4d84197613a43c359f23823c1722", "url": "https://github.com/wildfly/wildfly/commit/e758945ae24e4d84197613a43c359f23823c1722", "message": "Avoid concurrency during remove from non-owner.", "committedDate": "2021-01-02T17:01:47Z", "type": "forcePushed"}]}