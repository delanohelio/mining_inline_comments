{"pr_number": 13277, "pr_title": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "pr_createdAt": "2020-05-08T20:36:28Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13277", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r423177660", "bodyText": "If the use of this capability outside this subsystem only needs a dependency for ordering reasons and doesn't need access to a particular type, then the capability should not provide a type, as that becomes an unneeded part of its API contract.\nServerAdd in messaging-activemq doesn't seem to need anything but a dependency; it doesn't inject.\nIf that's the case in other external uses, internal-to-the-subsystem wiring that might need to inject ChannelUpgradeHandler doesn't have to use the capability.", "author": "bstansberry", "createdAt": "2020-05-11T16:49:50Z", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODE3NA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424098174", "bodyText": "The endpoint @rachmatowicz has in mind is this one:\nhttps://github.com/wildfly/wildfly-core/blob/2f3e21463e446fc5aad1e5b24f4ec1222e02e9ab/remoting/subsystem/src/main/java/org/jboss/as/remoting/RemotingHttpUpgradeService.java#L131\nThus, I believe the service type should be part of the capability contract.", "author": "pferraro", "createdAt": "2020-05-12T23:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNjg0OA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r425426848", "bodyText": "OK, thanks. @fl4via should look at this overall, but in particular that point as it makes the contract a bit stronger to include it in the capability registry.\nOf course the coupling already exists but when things get formalized like this that's a good time to confirm the contracts are what's wanted.\nThanks, @rachmatowicz for digging into this stuff; it's good to get these contracts in place.", "author": "bstansberry", "createdAt": "2020-05-14T20:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMDc3OQ==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r425430779", "bodyText": "Nit: that line is too long. :) It's good to see these contracts without scrolling.", "author": "bstansberry", "createdAt": "2020-05-14T21:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0NzcwMw==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426947703", "bodyText": "done.", "author": "rachmatowicz", "createdAt": "2020-05-18T23:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NDExMw==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438174113", "bodyText": "@bstansberry  you have my okay, I think the contract is what's wanted, given the usage in wfcore pointed by @pferraro", "author": "fl4via", "createdAt": "2020-06-10T14:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5c93a777dc892d51aa9e318df527abbdf7dc8e57", "chunk": "diff --git a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java\nindex 5e44c7c609..2d1e9f5cc7 100644\n--- a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java\n+++ b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java\n\n@@ -49,6 +49,7 @@ import java.util.List;\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n \n     static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)\n+            .setAllowMultipleRegistrations(true)\n             .build();\n \n     protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNTg5NQ==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424425895", "bodyText": "Perhaps the field should be @ Deprecated in that case to let other subsystems know.", "author": "rhusar", "createdAt": "2020-05-13T13:13:19Z", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    // remove this once other subsystems convert to capabilities", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxOTA4Mw==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424619083", "bodyText": "Thanks. Done.", "author": "rachmatowicz", "createdAt": "2020-05-13T17:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNTg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c93a777dc892d51aa9e318df527abbdf7dc8e57", "chunk": "diff --git a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java\nindex b446552c01..c6b487837e 100644\n--- a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java\n+++ b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java\n\n@@ -60,7 +60,7 @@ public class HttpListenerService extends ListenerService {\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n-    // remove this once other subsystems convert to capabilities\n+    @Deprecated\n     static final ServiceName HTTP_UPGRADE_REGISTRY = ServiceName.JBOSS.append(\"http-upgrade-registry\");\n     static final String PROTOCOL = \"http\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODY3NA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424608674", "bodyText": "Use: Constants.AJP_LISTENER", "author": "pferraro", "createdAt": "2020-05-13T17:27:19Z", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMjg0Mg==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426912842", "bodyText": "done.", "author": "rachmatowicz", "createdAt": "2020-05-18T21:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "d77ca2625247f7631c2f7915ec9b0349225d2541", "chunk": "diff --git a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\nindex 1fd5fdb7cf..936a05e152 100644\n--- a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\n+++ b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\n\n@@ -49,9 +50,9 @@ public class UndertowConnectorTestCase {\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(Constants.AJP_LISTENER, \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(Constants.HTTP_LISTENER, \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n+        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(Constants.HTTPS_LISTENER, \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODkxNg==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424608916", "bodyText": "Use: Constants.HTTP_LISTENER", "author": "pferraro", "createdAt": "2020-05-13T17:27:41Z", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMjg5Nw==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426912897", "bodyText": "done", "author": "rachmatowicz", "createdAt": "2020-05-18T21:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "d77ca2625247f7631c2f7915ec9b0349225d2541", "chunk": "diff --git a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\nindex 1fd5fdb7cf..936a05e152 100644\n--- a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\n+++ b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\n\n@@ -49,9 +50,9 @@ public class UndertowConnectorTestCase {\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(Constants.AJP_LISTENER, \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(Constants.HTTP_LISTENER, \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n+        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(Constants.HTTPS_LISTENER, \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTA5OQ==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424609099", "bodyText": "Use: Constants.HTTPS_LISTENER", "author": "pferraro", "createdAt": "2020-05-13T17:27:57Z", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n+        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d77ca2625247f7631c2f7915ec9b0349225d2541", "chunk": "diff --git a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\nindex 1fd5fdb7cf..936a05e152 100644\n--- a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\n+++ b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java\n\n@@ -49,9 +50,9 @@ public class UndertowConnectorTestCase {\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(Constants.AJP_LISTENER, \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(Constants.HTTP_LISTENER, \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n+        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(Constants.HTTPS_LISTENER, \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDEzOA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424610138", "bodyText": "Use: Constants.HTTPS_LISTENER", "author": "pferraro", "createdAt": "2020-05-13T17:29:42Z", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(\"default\", \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMjk2MA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426912960", "bodyText": "done.", "author": "rachmatowicz", "createdAt": "2020-05-18T21:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "chunk": "diff --git a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java\nindex fa8b326728..050c668f23 100644\n--- a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java\n+++ b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java\n\n@@ -51,7 +52,7 @@ public class UndertowEngineTestCase {\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(Constants.HTTPS_LISTENER, \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n \n     private final UndertowService service = new TestUndertowService(\"default-container\", this.serverName, this.hostName, this.route, this.server);\n     private final Server server = new TestServer(this.serverName, this.hostName, this.service, this.host, this.listener);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNTAzMw==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424615033", "bodyText": "Since serviceBuilder is a CapabilityServiceBuilder, use:\nserviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "author": "pferraro", "createdAt": "2020-05-13T17:37:53Z", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java", "diffHunk": "@@ -76,6 +73,8 @@ void configureAdditionalDependencies(OperationContext context, CapabilityService\n             ServiceName serviceName = context.getCapabilityServiceName(REF_SOCKET_BINDING, redirectBindingRef.asString(), SocketBinding.class);\n             serviceBuilder.addDependency(serviceName, SocketBinding.class, service.getRedirectSocket());\n         }\n-        serviceBuilder.addDependency(REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxOTkwNg==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426919906", "bodyText": "done", "author": "rachmatowicz", "createdAt": "2020-05-18T22:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNTAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "d77ca2625247f7631c2f7915ec9b0349225d2541", "chunk": "diff --git a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java\nindex a35aea5278..09863879a4 100644\n--- a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java\n+++ b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java\n\n@@ -73,8 +73,6 @@ public class HttpListenerAdd extends ListenerAdd {\n             ServiceName serviceName = context.getCapabilityServiceName(REF_SOCKET_BINDING, redirectBindingRef.asString(), SocketBinding.class);\n             serviceBuilder.addDependency(serviceName, SocketBinding.class, service.getRedirectSocket());\n         }\n-\n-        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n-        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+        serviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNjI4Ng==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424616286", "bodyText": "Since serviceBuilder is a CapabilityServiceBuilder, use:\nserviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "author": "pferraro", "createdAt": "2020-05-13T17:39:59Z", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java", "diffHunk": "@@ -75,12 +76,15 @@ ListenerService createService(String name, final String serverName, final Operat\n \n         final boolean certificateForwarding = HttpListenerResourceDefinition.CERTIFICATE_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n         final boolean proxyAddressForwarding = HttpListenerResourceDefinition.PROXY_ADDRESS_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n-        return new HttpsListenerService(name, serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n+\n+        return new HttpsListenerService(context.getCurrentAddress(), serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n     }\n \n     @Override\n     void configureAdditionalDependencies(OperationContext context, CapabilityServiceBuilder serviceBuilder, ModelNode model, ListenerService service) throws OperationFailedException {\n-        serviceBuilder.addDependency(HttpListenerAdd.REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "originalCommit": "7390b099ef43adc173b5196bb4a151565acbfca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMDA2MA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426920060", "bodyText": "done", "author": "rachmatowicz", "createdAt": "2020-05-18T22:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNjI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d77ca2625247f7631c2f7915ec9b0349225d2541", "chunk": "diff --git a/undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java b/undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java\nindex 164071cd85..414a1552ac 100644\n--- a/undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java\n+++ b/undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java\n\n@@ -83,8 +82,7 @@ public class HttpsListenerAdd extends ListenerAdd {\n     @Override\n     void configureAdditionalDependencies(OperationContext context, CapabilityServiceBuilder serviceBuilder, ModelNode model, ListenerService service) throws OperationFailedException {\n \n-        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n-        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+        serviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n \n         ModelNode sslContextModel = HttpsListenerResourceDefinition.SSL_CONTEXT.resolveModelAttribute(context, model);\n         ModelNode securityRealmModel = HttpsListenerResourceDefinition.SECURITY_REALM.resolveModelAttribute(context, model);\n"}}, {"oid": "5c93a777dc892d51aa9e318df527abbdf7dc8e57", "url": "https://github.com/wildfly/wildfly/commit/5c93a777dc892d51aa9e318df527abbdf7dc8e57", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "committedDate": "2020-05-18T21:45:59Z", "type": "forcePushed"}, {"oid": "d77ca2625247f7631c2f7915ec9b0349225d2541", "url": "https://github.com/wildfly/wildfly/commit/d77ca2625247f7631c2f7915ec9b0349225d2541", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "committedDate": "2020-05-18T23:26:02Z", "type": "forcePushed"}, {"oid": "56550dc98a50355562978d627322e7ee97e7478d", "url": "https://github.com/wildfly/wildfly/commit/56550dc98a50355562978d627322e7ee97e7478d", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "committedDate": "2020-05-18T23:32:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExODkyNg==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430118926", "bodyText": "context.getServiceTarget() should be replaced by context.getCapabilityServiceTarget()", "author": "pferraro", "createdAt": "2020-05-26T01:52:12Z", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java", "diffHunk": "@@ -55,14 +55,14 @@ protected void performRuntime(OperationContext context, ModelNode operation, Mod\n     void launchServices(OperationContext context, String activeMQServerName, String acceptorName, ModelNode model) throws OperationFailedException {\n         String httpConnectorName = HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context, model).asString();\n \n-        HTTPUpgradeService.installService(context.getServiceTarget(),\n+        HTTPUpgradeService.installService(context,\n                 activeMQServerName,\n                 acceptorName,\n                 httpConnectorName);\n \n         boolean upgradeLegacy = HTTPAcceptorDefinition.UPGRADE_LEGACY.resolveModelAttribute(context, model).asBoolean();\n         if (upgradeLegacy) {\n-            HTTPUpgradeService.LegacyHttpUpgradeService.installService(context.getServiceTarget(),\n+            HTTPUpgradeService.LegacyHttpUpgradeService.installService(context,", "originalCommit": "56550dc98a50355562978d627322e7ee97e7478d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "chunk": "diff --git a/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java b/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java\nindex 13a446fa0c..bf0d4c465a 100644\n--- a/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java\n+++ b/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java\n\n@@ -55,7 +55,7 @@ public class HTTPAcceptorAdd extends ActiveMQReloadRequiredHandlers.AddStepHandl\n     void launchServices(OperationContext context, String activeMQServerName, String acceptorName, ModelNode model) throws OperationFailedException {\n         String httpConnectorName = HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context, model).asString();\n \n-        HTTPUpgradeService.installService(context,\n+        HTTPUpgradeService.installService(context.getCapabilityServiceTarget(),\n                 activeMQServerName,\n                 acceptorName,\n                 httpConnectorName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExOTE2Mw==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430119163", "bodyText": "Install via CapabilityServiceTarget.", "author": "pferraro", "createdAt": "2020-05-26T01:53:24Z", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java", "diffHunk": "@@ -89,14 +90,14 @@ public HTTPUpgradeService(String activeMQServerName, String acceptorName, String\n         this.httpListenerName = httpListenerName;\n     }\n \n-    public static void installService(final ServiceTarget serviceTarget, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n+    public static void installService(final OperationContext context, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n \n         final HTTPUpgradeService service = new HTTPUpgradeService(activeMQServerName, acceptorName, httpListenerName);\n         final ServiceBuilder sb =\n-        serviceTarget.addService(HTTPAcceptorDefinition.CAPABILITY.getCapabilityServiceName(activeMQServerName,\"http-upgrade-service\", acceptorName), service);\n+        context.getServiceTarget().addService(HTTPAcceptorDefinition.CAPABILITY.getCapabilityServiceName(activeMQServerName,\"http-upgrade-service\", acceptorName), service);", "originalCommit": "56550dc98a50355562978d627322e7ee97e7478d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "chunk": "diff --git a/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java b/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java\nindex bde9abf207..b3ab5da9ba 100644\n--- a/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java\n+++ b/messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java\n\n@@ -90,14 +92,14 @@ public class HTTPUpgradeService implements Service<HTTPUpgradeService> {\n         this.httpListenerName = httpListenerName;\n     }\n \n-    public static void installService(final OperationContext context, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n+    public static void installService(final CapabilityServiceTarget target, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n \n         final HTTPUpgradeService service = new HTTPUpgradeService(activeMQServerName, acceptorName, httpListenerName);\n-        final ServiceBuilder sb =\n-        context.getServiceTarget().addService(HTTPAcceptorDefinition.CAPABILITY.getCapabilityServiceName(activeMQServerName,\"http-upgrade-service\", acceptorName), service);\n+        final CapabilityServiceBuilder sb = target.addCapability(HTTPAcceptorDefinition.CAPABILITY);\n+        sb.setInstance(service);\n         sb.addAliases(MessagingServices.getHttpUpgradeServiceName(activeMQServerName, acceptorName));\n-        sb.addDependency(context.getCapabilityServiceName(HTTP_UPGRADE_REGISTRY_CAPABILITY_NAME, httpListenerName, ChannelUpgradeHandler.class), ChannelUpgradeHandler.class, service.injectedRegistry);\n-        sb.addDependency(context.getCapabilityServiceName(HTTP_LISTENER_REGISTRY_CAPABILITY_NAME, ListenerRegistry.class), ListenerRegistry.class, service.listenerRegistry);\n+        sb.addCapabilityRequirement(HTTP_UPGRADE_REGISTRY_CAPABILITY_NAME, ChannelUpgradeHandler.class, service.injectedRegistry, httpListenerName);\n+        sb.addCapabilityRequirement(HTTP_LISTENER_REGISTRY_CAPABILITY_NAME, ListenerRegistry.class, service.listenerRegistry);\n         sb.requires(ActiveMQActivationService.getServiceName(MessagingServices.getActiveMQServiceName(activeMQServerName)));\n         sb.setInitialMode(ServiceController.Mode.PASSIVE);\n         sb.install();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExOTg2MA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430119860", "bodyText": "Use Constants.HTTPS_LISTENER", "author": "pferraro", "createdAt": "2020-05-26T01:56:43Z", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(\"default\", \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);", "originalCommit": "56550dc98a50355562978d627322e7ee97e7478d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "chunk": "diff --git a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java\nindex fa8b326728..050c668f23 100644\n--- a/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java\n+++ b/mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java\n\n@@ -51,7 +52,7 @@ public class UndertowEngineTestCase {\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(Constants.HTTPS_LISTENER, \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n \n     private final UndertowService service = new TestUndertowService(\"default-container\", this.serverName, this.hostName, this.route, this.server);\n     private final Server server = new TestServer(this.serverName, this.hostName, this.service, this.host, this.listener);\n"}}, {"oid": "9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "url": "https://github.com/wildfly/wildfly/commit/9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "committedDate": "2020-05-26T17:00:26Z", "type": "forcePushed"}, {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30", "url": "https://github.com/wildfly/wildfly/commit/17e1093199d6fda863997d16df1224ddbfe6dd30", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "committedDate": "2020-06-08T14:16:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0Njg2NQ==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438146865", "bodyText": "I believe this was added by mistake? Or is it for future test debugging if need arises?", "author": "fl4via", "createdAt": "2020-06-10T14:03:03Z", "path": "legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java", "diffHunk": "@@ -153,6 +153,7 @@ private void testMigrateOperation(boolean addLegacyEntries) throws Exception {\n \n         ModelNode response = services.executeOperation(migrateOp);\n \n+        // System.out.println(\"response = \" + response);", "originalCommit": "17e1093199d6fda863997d16df1224ddbfe6dd30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5ODE4OA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438498188", "bodyText": "These were Jeff debugging statements and this was one of three instances. I have removed them.", "author": "rachmatowicz", "createdAt": "2020-06-11T01:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0Njg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "750254f97543416341e2c97d1240ae1904eba0b4", "chunk": "diff --git a/legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java b/legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java\nindex 28eaf4d7b6..84c8c292e9 100644\n--- a/legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java\n+++ b/legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java\n\n@@ -153,7 +151,6 @@ public class MigrateTestCase extends AbstractSubsystemTest {\n \n         ModelNode response = services.executeOperation(migrateOp);\n \n-        // System.out.println(\"response = \" + response);\n         checkOutcome(response);\n \n         ModelNode warnings = response.get(RESULT, \"migration-warnings\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2OTQyNQ==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438169425", "bodyText": "whenever I see a @deprecated, I think the ideal is to point in a comment what has it been replaced with for future reference", "author": "fl4via", "createdAt": "2020-06-10T14:32:09Z", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    @Deprecated", "originalCommit": "17e1093199d6fda863997d16df1224ddbfe6dd30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwMTQyMA==", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438501420", "bodyText": "Done.", "author": "rachmatowicz", "createdAt": "2020-06-11T02:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2OTQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "750254f97543416341e2c97d1240ae1904eba0b4", "chunk": "diff --git a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java\nindex c6b487837e..4707c3a1f7 100644\n--- a/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java\n+++ b/undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java\n\n@@ -60,6 +60,9 @@ public class HttpListenerService extends ListenerService {\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    /**\n+     * @deprecated Replaced by HTTP_UPGRADE_REGISTRY.getCapabilityServiceName()\n+     */\n     @Deprecated\n     static final ServiceName HTTP_UPGRADE_REGISTRY = ServiceName.JBOSS.append(\"http-upgrade-registry\");\n     static final String PROTOCOL = \"http\";\n"}}, {"oid": "750254f97543416341e2c97d1240ae1904eba0b4", "url": "https://github.com/wildfly/wildfly/commit/750254f97543416341e2c97d1240ae1904eba0b4", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "committedDate": "2020-06-11T01:57:07Z", "type": "commit"}, {"oid": "750254f97543416341e2c97d1240ae1904eba0b4", "url": "https://github.com/wildfly/wildfly/commit/750254f97543416341e2c97d1240ae1904eba0b4", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "committedDate": "2020-06-11T01:57:07Z", "type": "forcePushed"}]}