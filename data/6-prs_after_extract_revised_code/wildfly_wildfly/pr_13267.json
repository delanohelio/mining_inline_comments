{"pr_number": 13267, "pr_title": "WFLY-10942 IIOPTimeoutTestCase fails intermittently", "pr_createdAt": "2020-05-04T22:17:53Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13267", "timeline": [{"oid": "9edb48db34b46842734586fb948b39407656742f", "url": "https://github.com/wildfly/wildfly/commit/9edb48db34b46842734586fb948b39407656742f", "message": "WFLY-10942 IIOPTimeoutTestCase fails intermittently", "committedDate": "2020-05-04T22:15:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDIwOQ==", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420190209", "bodyText": "While making these volatile might improve the situation, it will not solve it completely, since the ++ unary operator is not atomic.  I would suggest changing these to use AtomicInteger.", "author": "pferraro", "createdAt": "2020-05-05T15:16:43Z", "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "diffHunk": "@@ -40,8 +40,8 @@\n @Remote\n @ManagedBean\n public class TransactionCheckerSingleton implements TransactionCheckerSingletonRemote {\n-    private int committed, prepared, rolledback;\n-    private int  synchronizedBegin, synchronizedBefore, synchronizedAfter,\n+    private volatile int committed, prepared, rolledback;\n+    private volatile int synchronizedBegin, synchronizedBefore, synchronizedAfter,", "originalCommit": "9edb48db34b46842734586fb948b39407656742f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3ODE0OA==", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420378148", "bodyText": "Since this is a singleton ejb with container-managed concurrency, all method access are serialized and no two methods will be accessing the instance state. So I think make them volatile should work. If you agree, we can add volatile to messages field as well.", "author": "chengfang", "createdAt": "2020-05-05T20:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NTAyOQ==", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420995029", "bodyText": "OK - in that case, volatile is sufficient.  messages should not need to be volatile since the list, while mutable, is effectively final.", "author": "pferraro", "createdAt": "2020-05-06T18:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDIwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDgxNQ==", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420190815", "bodyText": "I suspect this might need to use a concurrent collection (or at least synchronized wrapper).", "author": "pferraro", "createdAt": "2020-05-05T15:17:30Z", "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "diffHunk": "@@ -40,8 +40,8 @@\n @Remote\n @ManagedBean\n public class TransactionCheckerSingleton implements TransactionCheckerSingletonRemote {\n-    private int committed, prepared, rolledback;\n-    private int  synchronizedBegin, synchronizedBefore, synchronizedAfter,\n+    private volatile int committed, prepared, rolledback;\n+    private volatile int synchronizedBegin, synchronizedBefore, synchronizedAfter,\n         synchronizedAfterCommitted, synchronizedAfterRolledBack;\n     private Collection<String> messages = new ArrayList<>();", "originalCommit": "9edb48db34b46842734586fb948b39407656742f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3ODI2OA==", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420378268", "bodyText": "See above comment.", "author": "chengfang", "createdAt": "2020-05-05T20:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDgxNQ=="}], "type": "inlineReview", "revised_code": null}]}