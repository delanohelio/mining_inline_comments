{"pr_number": 13756, "pr_title": "[WFLY-14108] Introduce a base \"metrics\" subsystem and move microprofile-metrics to the microprofile feature-pack", "pr_createdAt": "2020-12-01T15:09:14Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13756", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5OTkyMw==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533499923", "bodyText": "I changed the project code but we are fine as the new metrics subsystem reuse the WFLYMETRICS code and keep the same message id for the same errors and logs", "author": "jmesnil", "createdAt": "2020-12-01T15:26:21Z", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  * @author <a href=\"http://jmesnil.net/\">Jeff Mesnil</a> (c) 2018 Red Hat inc.\n  */\n-@MessageLogger(projectCode = \"WFLYMETRICS\", length = 4)\n+@MessageLogger(projectCode = \"WFLYMPMETRICS\", length = 4)", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3195a5f7253465f33a804f6844fab511cd9d9ed2", "chunk": "diff --git a/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java b/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java\nindex 80d3dec4d1..fc3890413b 100644\n--- a/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java\n+++ b/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java\n\n@@ -39,7 +39,7 @@ import org.jboss.logging.annotations.MessageLogger;\n  *\n  * @author <a href=\"http://jmesnil.net/\">Jeff Mesnil</a> (c) 2018 Red Hat inc.\n  */\n-@MessageLogger(projectCode = \"WFLYMPMETRICS\", length = 4)\n+@MessageLogger(projectCode = \"WFLYMETRICS\", length = 4)\n public interface MicroProfileMetricsLogger extends BasicLogger {\n     /**\n      * A logger with the category {@code org.wildfly.extension.batch}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMTY2OA==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533501668", "bodyText": "I'm not sure why this was not spotted before but once I added the org.wildfly.extension.metrics to more recent WIldFly version, this was spotted in the CI", "author": "jmesnil", "createdAt": "2020-12-01T15:28:36Z", "path": "testsuite/domain/src/test/java/org/jboss/as/test/integration/domain/HostExcludesTestCase.java", "diffHunk": "@@ -161,77 +161,88 @@\n         )),\n         WILDFLY_17_0(\"WildFly17.0\", WILDFLY_16_0),\n         WILDFLY_18_0(\"WildFly18.0\", WILDFLY_17_0),\n-\n-        EAP62(\"EAP62\", Arrays.asList(\n-                \"org.jboss.as.appclient\",\n-                \"org.jboss.as.clustering.infinispan\",\n-                \"org.jboss.as.clustering.jgroups\",\n-                \"org.jboss.as.cmp\",\n-                \"org.jboss.as.configadmin\",\n-                \"org.jboss.as.connector\",\n-                \"org.jboss.as.deployment-scanner\",\n-                \"org.jboss.as.ee\",\n-                \"org.jboss.as.ejb3\",\n-                \"org.jboss.as.jacorb\",\n-                \"org.jboss.as.jaxr\",\n-                \"org.jboss.as.jaxrs\",\n-                \"org.jboss.as.jdr\",\n-                \"org.jboss.as.jmx\",\n-                \"org.jboss.as.jpa\",\n-                \"org.jboss.as.jsf\",\n-                \"org.jboss.as.jsr77\",\n-                \"org.jboss.as.logging\",\n-                \"org.jboss.as.mail\",\n-                \"org.jboss.as.messaging\",\n-                \"org.jboss.as.modcluster\",\n-                \"org.jboss.as.naming\",\n-                \"org.jboss.as.pojo\",\n-                \"org.jboss.as.remoting\",\n-                \"org.jboss.as.sar\",\n-                \"org.jboss.as.security\",\n-                \"org.jboss.as.threads\",\n-                \"org.jboss.as.transactions\",\n-                \"org.jboss.as.web\",\n-                \"org.jboss.as.webservices\",\n-                \"org.jboss.as.weld\",\n-                \"org.jboss.as.xts\",\n-                // This module was added in EAP70, but we move it to the EAP62 extension list to allow the test passing\n-                // without adding it to the host-exclude section. We don't want to expose it in the host-exclude.\n-                \"org.wildfly.extension.mod_cluster\"\n+        WILDFLY_19_0(\"WildFly19.0\", WILDFLY_18_0,Arrays.asList(", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aead95b073a7203233d82d8e31dca04b53ae2a88", "chunk": "diff --git a/testsuite/domain/src/test/java/org/jboss/as/test/integration/domain/HostExcludesTestCase.java b/testsuite/domain/src/test/java/org/jboss/as/test/integration/domain/HostExcludesTestCase.java\nindex f8e0ded0a8..9b5d4e01b3 100644\n--- a/testsuite/domain/src/test/java/org/jboss/as/test/integration/domain/HostExcludesTestCase.java\n+++ b/testsuite/domain/src/test/java/org/jboss/as/test/integration/domain/HostExcludesTestCase.java\n\n@@ -167,12 +167,10 @@ public class HostExcludesTestCase extends BuildConfigurationTestBase {\n                 \"org.wildfly.extension.microprofile.openapi-smallrye\"\n         )),\n         WILDFLY_20_0(\"WildFly20.0\", WILDFLY_19_0),\n-        /*\n         WILDFLY_21_0(\"WildFly21.0\", WILDFLY_20_0),\n         WILDFLY_22_0(\"WildFly22.0\", WILDFLY_21_0, Arrays.asList(\n                 \"org.wildfly.extension.metrics\"\n         )),\n-        */\n                 EAP62(\"EAP62\", Arrays.asList(\n                         \"org.jboss.as.appclient\",\n                         \"org.jboss.as.clustering.infinispan\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjI2OQ==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533796269", "bodyText": "I don't think we can do this with metrics. :(", "author": "bstansberry", "createdAt": "2020-12-01T23:41:09Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java", "diffHunk": "@@ -49,47 +47,43 @@\n     private final Supplier<ModelControllerClientFactory> modelControllerClientFactory;\n     private final Supplier<Executor> managementExecutor;\n     private final Supplier<ProcessStateNotifier> processStateNotifier;\n-    private final List<String> exposedSubsystems;\n-    private final String globalPrefix;\n+    private Consumer<MetricCollector> metricCollectorConsumer;\n \n     private MetricCollector metricCollector;\n     private LocalModelControllerClient modelControllerClient;\n \n-    static void install(OperationContext context, List<String> exposedSubsystems, String prefix) {\n-        ServiceBuilder<?> serviceBuilder = context.getServiceTarget().addService(WILDFLY_COLLECTOR_SERVICE);\n+    static void install(OperationContext context) {\n+        ServiceBuilder<?> serviceBuilder = context.getServiceTarget().addService(WILDFLY_COLLECTOR);\n         Supplier<ModelControllerClientFactory> modelControllerClientFactory = serviceBuilder.requires(context.getCapabilityServiceName(CLIENT_FACTORY_CAPABILITY, ModelControllerClientFactory.class));\n         Supplier<Executor> managementExecutor = serviceBuilder.requires(context.getCapabilityServiceName(MANAGEMENT_EXECUTOR, Executor.class));\n         Supplier<ProcessStateNotifier> processStateNotifier = serviceBuilder.requires(context.getCapabilityServiceName(PROCESS_STATE_NOTIFIER, ProcessStateNotifier.class));\n-        MetricsCollectorService service = new MetricsCollectorService(modelControllerClientFactory, managementExecutor, processStateNotifier, exposedSubsystems, prefix);\n+        Consumer<MetricCollector> metricCollectorConsumer = serviceBuilder.provides(WILDFLY_COLLECTOR);\n+        MetricsCollectorService service = new MetricsCollectorService(modelControllerClientFactory, managementExecutor, processStateNotifier, metricCollectorConsumer);\n         serviceBuilder.setInstance(service)\n                 .install();\n     }\n \n     MetricsCollectorService(Supplier<ModelControllerClientFactory> modelControllerClientFactory, Supplier<Executor> managementExecutor,\n-                            Supplier<ProcessStateNotifier> processStateNotifier, List<String> exposedSubsystems, String globalPrefix) {\n+                            Supplier<ProcessStateNotifier> processStateNotifier, Consumer<MetricCollector> metricCollectorConsumer) {\n         this.modelControllerClientFactory = modelControllerClientFactory;\n         this.managementExecutor = managementExecutor;\n         this.processStateNotifier = processStateNotifier;\n-        this.exposedSubsystems = exposedSubsystems;\n-        this.globalPrefix = globalPrefix;\n+        this.metricCollectorConsumer = metricCollectorConsumer;\n     }\n \n     @Override\n     public void start(StartContext context) {\n-        modelControllerClient = modelControllerClientFactory.get().createClient(managementExecutor.get());\n+        modelControllerClient = modelControllerClientFactory.get().createSuperUserClient(managementExecutor.get());", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTUzOA==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079538", "bodyText": "you are right, I changed the code in 9c2367e to use a regular client and skip any metrics that can not be read due to RBAC", "author": "jmesnil", "createdAt": "2020-12-02T11:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java b/metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java\nindex 166ec67539..a46fd47404 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java\n\n@@ -73,7 +73,8 @@ public class MetricsCollectorService implements Service<MetricCollector> {\n \n     @Override\n     public void start(StartContext context) {\n-        modelControllerClient = modelControllerClientFactory.get().createSuperUserClient(managementExecutor.get());\n+        // [WFLY-11933] if RBAC is enabled, the local client does not have enough priviledges to read metrics\n+        modelControllerClient = modelControllerClientFactory.get().createClient(managementExecutor.get());\n \n         metricCollector = new MetricCollector(modelControllerClient, processStateNotifier.get());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMTQwNg==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533801406", "bodyText": "This will blow up the entire read.\nWith Smallrye I believe if a Metric throws an exception it is caught and logged but the loop reading all the metrics continues, so other metrics get reported. A failure here though will abort the PrometheusExporter loop.\nSince you are providing an Optional it seems like this could log the failure and fall through.", "author": "bstansberry", "createdAt": "2020-12-01T23:55:22Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "diffHunk": "@@ -0,0 +1,86 @@\n+\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.metrics;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.wildfly.extension.metrics._private.MetricsLogger.LOGGER;\n+\n+import java.util.OptionalDouble;\n+\n+import org.jboss.as.controller.LocalModelControllerClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.dmr.ModelNode;\n+import org.wildfly.extension.metrics._private.MetricsLogger;\n+\n+public class WildFlyMetric implements Metric {\n+\n+    private LocalModelControllerClient modelControllerClient;\n+    private final PathAddress address;\n+    private final String attributeName;\n+\n+    public WildFlyMetric(LocalModelControllerClient modelControllerClient, PathAddress address, String attributeName) {\n+        this.modelControllerClient = modelControllerClient;\n+        this.address = address;\n+        this.attributeName = attributeName;\n+    }\n+\n+    @Override\n+    public OptionalDouble getValue() {\n+        ModelNode result = readAttributeValue(address, attributeName);\n+        if (result.isDefined()) {\n+            try {\n+                return OptionalDouble.of(result.asDouble());\n+            } catch (Exception e) {\n+                throw MetricsLogger.LOGGER.unableToConvertAttribute(attributeName, address, e);", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTU5Ng==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079596", "bodyText": "done", "author": "jmesnil", "createdAt": "2020-12-02T11:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMTQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java b/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java\nindex e0e8897804..9dde391921 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java\n\n@@ -36,7 +36,7 @@ import org.jboss.as.controller.LocalModelControllerClient;\n import org.jboss.as.controller.PathAddress;\n import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n import org.jboss.dmr.ModelNode;\n-import org.wildfly.extension.metrics._private.MetricsLogger;\n+import org.jboss.dmr.ModelType;\n \n public class WildFlyMetric implements Metric {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjY1OQ==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533802659", "bodyText": "RBAC failures could be logged at a lower level.", "author": "bstansberry", "createdAt": "2020-12-01T23:58:41Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "diffHunk": "@@ -0,0 +1,86 @@\n+\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.metrics;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.wildfly.extension.metrics._private.MetricsLogger.LOGGER;\n+\n+import java.util.OptionalDouble;\n+\n+import org.jboss.as.controller.LocalModelControllerClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.dmr.ModelNode;\n+import org.wildfly.extension.metrics._private.MetricsLogger;\n+\n+public class WildFlyMetric implements Metric {\n+\n+    private LocalModelControllerClient modelControllerClient;\n+    private final PathAddress address;\n+    private final String attributeName;\n+\n+    public WildFlyMetric(LocalModelControllerClient modelControllerClient, PathAddress address, String attributeName) {\n+        this.modelControllerClient = modelControllerClient;\n+        this.address = address;\n+        this.attributeName = attributeName;\n+    }\n+\n+    @Override\n+    public OptionalDouble getValue() {\n+        ModelNode result = readAttributeValue(address, attributeName);\n+        if (result.isDefined()) {\n+            try {\n+                return OptionalDouble.of(result.asDouble());\n+            } catch (Exception e) {\n+                throw MetricsLogger.LOGGER.unableToConvertAttribute(attributeName, address, e);\n+            }\n+        }\n+        return OptionalDouble.empty();\n+    }\n+\n+    private ModelNode readAttributeValue(PathAddress address, String attributeName) {\n+        final ModelNode readAttributeOp = new ModelNode();\n+        readAttributeOp.get(OP).set(READ_ATTRIBUTE_OPERATION);\n+        readAttributeOp.get(OP_ADDR).set(address.toModelNode());\n+        readAttributeOp.get(ModelDescriptionConstants.INCLUDE_UNDEFINED_METRIC_VALUES).set(false);\n+        readAttributeOp.get(NAME).set(attributeName);\n+        ModelNode response = modelControllerClient.execute(readAttributeOp);\n+        String error = getFailureDescription(response);\n+        if (error != null) {\n+            LOGGER.unableToReadAttribute(attributeName, address, error);", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTY1MA==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079650", "bodyText": "done", "author": "jmesnil", "createdAt": "2020-12-02T11:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java b/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java\nindex e0e8897804..9dde391921 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java\n\n@@ -36,7 +36,7 @@ import org.jboss.as.controller.LocalModelControllerClient;\n import org.jboss.as.controller.PathAddress;\n import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n import org.jboss.dmr.ModelNode;\n-import org.wildfly.extension.metrics._private.MetricsLogger;\n+import org.jboss.dmr.ModelType;\n \n public class WildFlyMetric implements Metric {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzU3MQ==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803571", "bodyText": "^^^", "author": "bstansberry", "createdAt": "2020-12-02T00:00:59Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTc2MA==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079760", "bodyText": "oops, sorry about that", "author": "jmesnil", "createdAt": "2020-12-02T11:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\nindex a36f2ca549..7f594f6b0b 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n\n@@ -1,3 +1,25 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n package org.wildfly.extension.metrics.deployment;\n \n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzcxMQ==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803711", "bodyText": "^^^", "author": "bstansberry", "createdAt": "2020-12-02T00:01:17Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\nindex a36f2ca549..7f594f6b0b 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n\n@@ -1,3 +1,25 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n package org.wildfly.extension.metrics.deployment;\n \n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzgzOA==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803838", "bodyText": "^^^", "author": "bstansberry", "createdAt": "2020-12-02T00:01:28Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");\n+                    metricCollector.get().collectResourceMetrics(rootResource,\n+                            managementResourceRegistration,\n+                            // prepend the deployment address to the subsystem resource address\n+                            address -> deploymentAddress.append(address),\n+                            exposeAnySubsystem, exposedSubsystems, prefix,\n+                            registration);\n+                } catch (Throwable t) {\n+                    System.out.println(\">>> JFM DeploymentMetricService.error\");", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\nindex a36f2ca549..7f594f6b0b 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n\n@@ -1,3 +1,25 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n package org.wildfly.extension.metrics.deployment;\n \n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzk4OA==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803988", "bodyText": "^^^", "author": "bstansberry", "createdAt": "2020-12-02T00:01:45Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");\n+                    metricCollector.get().collectResourceMetrics(rootResource,\n+                            managementResourceRegistration,\n+                            // prepend the deployment address to the subsystem resource address\n+                            address -> deploymentAddress.append(address),\n+                            exposeAnySubsystem, exposedSubsystems, prefix,\n+                            registration);\n+                } catch (Throwable t) {\n+                    System.out.println(\">>> JFM DeploymentMetricService.error\");\n+                    t.printStackTrace();\n+                    throw t;\n+                }\n+                startContext.complete();\n+            }\n+        };\n+        try {\n+            managementExecutor.get().execute(task);\n+        } catch (RejectedExecutionException e) {\n+            task.run();\n+        } finally {\n+            startContext.asynchronous();\n+        }\n+    }\n+\n+    @Override\n+    public void stop(StopContext stopContext) {\n+        System.out.println(\"JFM DeploymentMetricService.stop start \");", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\nindex a36f2ca549..7f594f6b0b 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n\n@@ -1,3 +1,25 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n package org.wildfly.extension.metrics.deployment;\n \n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwNDAyMg==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533804022", "bodyText": "^^^", "author": "bstansberry", "createdAt": "2020-12-02T00:01:51Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");\n+                    metricCollector.get().collectResourceMetrics(rootResource,\n+                            managementResourceRegistration,\n+                            // prepend the deployment address to the subsystem resource address\n+                            address -> deploymentAddress.append(address),\n+                            exposeAnySubsystem, exposedSubsystems, prefix,\n+                            registration);\n+                } catch (Throwable t) {\n+                    System.out.println(\">>> JFM DeploymentMetricService.error\");\n+                    t.printStackTrace();\n+                    throw t;\n+                }\n+                startContext.complete();\n+            }\n+        };\n+        try {\n+            managementExecutor.get().execute(task);\n+        } catch (RejectedExecutionException e) {\n+            task.run();\n+        } finally {\n+            startContext.asynchronous();\n+        }\n+    }\n+\n+    @Override\n+    public void stop(StopContext stopContext) {\n+        System.out.println(\"JFM DeploymentMetricService.stop start \");\n+        registration.unregister();\n+        System.out.println(\"JFM DeploymentMetricService.stop end\");", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\nindex a36f2ca549..7f594f6b0b 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java\n\n@@ -1,3 +1,25 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n package org.wildfly.extension.metrics.deployment;\n \n import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwNTkxMQ==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533805911", "bodyText": "No longer used methods can be commented to save metaspace.", "author": "bstansberry", "createdAt": "2020-12-02T00:07:22Z", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java", "diffHunk": "@@ -57,12 +57,15 @@\n     @Message(id = 2, value = \"Failed to initialize metrics from JMX MBeans\")\n     IllegalArgumentException failedInitializeJMXRegistrar(@Cause IOException e);\n \n+    // no longer used", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "chunk": "diff --git a/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java b/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java\nindex 80d3dec4d1..7c9bf55dc6 100644\n--- a/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java\n+++ b/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java\n\n@@ -58,14 +57,14 @@ public interface MicroProfileMetricsLogger extends BasicLogger {\n     IllegalArgumentException failedInitializeJMXRegistrar(@Cause IOException e);\n \n     // no longer used\n-    @Message(id = 3, value = \"Unable to read attribute %s on %s: %s.\")\n-    IllegalStateException unableToReadAttribute(String attributeName, PathAddress address, String error);\n+    // @Message(id = 3, value = \"Unable to read attribute %s on %s: %s.\")\n+    // IllegalStateException unableToReadAttribute(String attributeName, PathAddress address, String error);\n \n     // no longer used\n-    @Message(id = 4, value = \"Unable to convert attribute %s on %s to Double value.\")\n-    IllegalStateException unableToConvertAttribute(String attributeName, PathAddress address, @Cause Exception exception);\n+    // @Message(id = 4, value = \"Unable to convert attribute %s on %s to Double value.\")\n+    // IllegalStateException unableToConvertAttribute(String attributeName, PathAddress address, @Cause Exception exception);\n \n     // no longer used\n-    @Message(id = 5, value = \"Metric attribute %s on %s is undefined and will not be exposed.\")\n-    IllegalStateException undefinedMetric(String attributeName, PathAddress address);\n+    // @Message(id = 5, value = \"Metric attribute %s on %s is undefined and will not be exposed.\")\n+    // IllegalStateException undefinedMetric(String attributeName, PathAddress address);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwODk1NQ==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533808955", "bodyText": "It would be nice if SmallRye had something like a\npublic interface OptionalMetric extends Metric {\n\n  Optional<Metric> getOptional();\n}\n\nThen check for that when exporting and if that's the Metric type use the Optional, skipping export !optional.isPresent().\nResponding with zero exposes the metric names which in theory could be privileged information.", "author": "bstansberry", "createdAt": "2020-12-02T00:16:20Z", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.microprofile.metrics;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.BASE;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.VENDOR;\n+import static org.wildfly.extension.metrics.MetricMetadata.Type.COUNTER;\n+\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+\n+import io.smallrye.metrics.ExtendedMetadata;\n+import io.smallrye.metrics.MetricRegistries;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.jboss.as.controller.client.helpers.MeasurementUnit;\n+import org.wildfly.extension.metrics.MetricID;\n+import org.wildfly.extension.metrics.MetricMetadata;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+import org.wildfly.extension.metrics.WildFlyMetricMetadata;\n+\n+public class MicroProfileVendorMetricRegistry implements MetricRegistry {\n+\n+    final org.eclipse.microprofile.metrics.MetricRegistry vendorRegistry = MetricRegistries.get(VENDOR);\n+\n+    @Override\n+    public void registerMetric(org.wildfly.extension.metrics.Metric metric, MetricMetadata metadata) {\n+        final Metric mpMetric;\n+        if (metadata.getType() == COUNTER) {\n+            mpMetric = new Counter() {\n+                @Override\n+                public void inc() {\n+                }\n+\n+                @Override\n+                public void inc(long n) {\n+                }\n+\n+                @Override\n+                public long getCount() {\n+                    OptionalDouble value = metric.getValue();\n+                    return  Double.valueOf(value.orElse(0)).longValue();", "originalCommit": "44340393fe6163552c5366082cf5fc0ed4c710ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA4MTY3Nw==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534081677", "bodyText": "Yes, that's a big difference between the base metrics and the microprofile-metrics-smallryesubsystem.\nIn the base metrics, if the metric value is not defined, I skip exposing any info about that (including its name and description): \n  \n    \n      wildfly/metrics/src/main/java/org/wildfly/extension/metrics/PrometheusExporter.java\n    \n    \n         Line 48\n      in\n      9c2367e\n    \n    \n    \n    \n\n        \n          \n           if (!metricValue.isPresent()) { \n        \n    \n  \n\n\nWith MicroProfile Metrics, any registered metric is considered valid and I have no point where I can \"validated\" the metric value before it is printed out.", "author": "jmesnil", "createdAt": "2020-12-02T11:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwODk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4Njg3Mg==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534486872", "bodyText": "@jmesnil If you think the OptionalMetric idea is useful I can file an RFE for such an SPI in smallrye. It's kind of hacky because it extends 'Metric' just to be an acceptable type for the registry, but the normal Metric impl really isn't meant to be used.", "author": "bstansberry", "createdAt": "2020-12-02T21:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwODk1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3195a5f7253465f33a804f6844fab511cd9d9ed2", "chunk": "diff --git a/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java b/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java\ndeleted file mode 100644\nindex d8eb149995..0000000000\n--- a/microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java\n+++ /dev/null\n\n@@ -1,204 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source.\n- * Copyright 2020, Red Hat, Inc., and individual contributors\n- * as indicated by the @author tags. See the copyright.txt file in the\n- * distribution for a full listing of individual contributors.\n- *\n- * This is free software; you can redistribute it and/or modify it\n- * under the terms of the GNU Lesser General Public License as\n- * published by the Free Software Foundation; either version 2.1 of\n- * the License, or (at your option) any later version.\n- *\n- * This software is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with this software; if not, write to the Free\n- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n- */\n-package org.wildfly.extension.microprofile.metrics;\n-\n-import static org.eclipse.microprofile.metrics.MetricRegistry.Type.BASE;\n-import static org.eclipse.microprofile.metrics.MetricRegistry.Type.VENDOR;\n-import static org.wildfly.extension.metrics.MetricMetadata.Type.COUNTER;\n-\n-import java.util.Optional;\n-import java.util.OptionalDouble;\n-\n-import io.smallrye.metrics.ExtendedMetadata;\n-import io.smallrye.metrics.MetricRegistries;\n-import org.eclipse.microprofile.metrics.Counter;\n-import org.eclipse.microprofile.metrics.Gauge;\n-import org.eclipse.microprofile.metrics.Metadata;\n-import org.eclipse.microprofile.metrics.Metric;\n-import org.eclipse.microprofile.metrics.MetricType;\n-import org.eclipse.microprofile.metrics.MetricUnits;\n-import org.eclipse.microprofile.metrics.Tag;\n-import org.jboss.as.controller.client.helpers.MeasurementUnit;\n-import org.wildfly.extension.metrics.MetricID;\n-import org.wildfly.extension.metrics.MetricMetadata;\n-import org.wildfly.extension.metrics.MetricRegistry;\n-import org.wildfly.extension.metrics.WildFlyMetricMetadata;\n-\n-public class MicroProfileVendorMetricRegistry implements MetricRegistry {\n-\n-    final org.eclipse.microprofile.metrics.MetricRegistry vendorRegistry = MetricRegistries.get(VENDOR);\n-\n-    @Override\n-    public void registerMetric(org.wildfly.extension.metrics.Metric metric, MetricMetadata metadata) {\n-        final Metric mpMetric;\n-        if (metadata.getType() == COUNTER) {\n-            mpMetric = new Counter() {\n-                @Override\n-                public void inc() {\n-                }\n-\n-                @Override\n-                public void inc(long n) {\n-                }\n-\n-                @Override\n-                public long getCount() {\n-                    OptionalDouble value = metric.getValue();\n-                    return  Double.valueOf(value.orElse(0)).longValue();\n-                }\n-            };\n-        } else {\n-            mpMetric = new Gauge<Number>() {\n-                @Override\n-                public Double getValue() {\n-                    return metric.getValue().orElse(0);\n-                }\n-            };\n-        }\n-        final Metadata mpMetadata;\n-        synchronized (vendorRegistry) {\n-            Metadata existingMetadata = vendorRegistry.getMetadata().get(metadata.getMetricName());\n-            if (existingMetadata != null) {\n-                mpMetadata = existingMetadata;\n-            } else {\n-                mpMetadata = new ExtendedMetadata(metadata.getMetricName(), metadata.getMetricName(), metadata.getDescription(),\n-                        metadata.getType() == COUNTER ? MetricType.COUNTER : MetricType.GAUGE, metricUnit(metadata.getMeasurementUnit()),\n-                        null, false,\n-                        // for WildFly subsystem metrics, the microprofile scope is put in the OpenMetrics tags\n-                        // so that the name of the metric does not change (\"vendor_\" will not be prepended to it).\n-                        Optional.of(false));\n-            }\n-            Tag[] mpTags = toMicroProfileMetricsTags(metadata.getTags());\n-            vendorRegistry.register(mpMetadata, mpMetric, mpTags);\n-        }\n-    }\n-\n-    @Override\n-    public void unregister(MetricID metricID) {\n-        vendorRegistry.remove(toMicroProfileMetricID(metricID));\n-    }\n-\n-    private org.eclipse.microprofile.metrics.MetricID toMicroProfileMetricID(MetricID metricID) {\n-        return new org.eclipse.microprofile.metrics.MetricID(metricID.getMetricName(), toMicroProfileMetricsTags(metricID.getTags()));\n-    }\n-\n-    static void removeAllMetrics() {\n-        for (org.eclipse.microprofile.metrics.MetricRegistry registry : new org.eclipse.microprofile.metrics.MetricRegistry[]{\n-                MetricRegistries.get(BASE),\n-                MetricRegistries.get(VENDOR)}) {\n-            for (String name : registry.getNames()) {\n-                registry.remove(name);\n-            }\n-        }\n-    }\n-\n-    private Tag[] toMicroProfileMetricsTags(WildFlyMetricMetadata.MetricTag[] tags) {\n-        if (tags == null || tags.length == 0) {\n-            return new Tag[0];\n-        }\n-        Tag[] mpTags = new Tag[tags.length];\n-        for (int i = 0; i < tags.length; i++) {\n-            mpTags[i] = new Tag(tags[i].getKey(), tags[i].getValue());\n-        }\n-        return mpTags;\n-    }\n-\n-    private String metricUnit(MeasurementUnit unit) {\n-        if (unit == null) {\n-            return MetricUnits.NONE;\n-        }\n-        switch (unit) {\n-\n-            case PERCENTAGE:\n-                return MetricUnits.PERCENT;\n-            case BYTES:\n-                return MetricUnits.BYTES;\n-            case KILOBYTES:\n-                return MetricUnits.KILOBYTES;\n-            case MEGABYTES:\n-                return MetricUnits.MEGABYTES;\n-            case GIGABYTES:\n-                return MetricUnits.GIGABYTES;\n-            case TERABYTES:\n-                return \"terabytes\";\n-            case PETABYTES:\n-                return \"petabytes\";\n-            case BITS:\n-                return MetricUnits.BITS;\n-            case KILOBITS:\n-                return MetricUnits.KILOBITS;\n-            case MEGABITS:\n-                return MetricUnits.MEBIBITS;\n-            case GIGABITS:\n-                return MetricUnits.GIGABITS;\n-            case TERABITS:\n-                return \"terabits\";\n-            case PETABITS:\n-                return \"petabits\";\n-            case EPOCH_MILLISECONDS:\n-                return MetricUnits.MILLISECONDS;\n-            case EPOCH_SECONDS:\n-                return MetricUnits.SECONDS;\n-            case JIFFYS:\n-                return \"jiffys\";\n-            case NANOSECONDS:\n-                return MetricUnits.NANOSECONDS;\n-            case MICROSECONDS:\n-                return MetricUnits.MICROSECONDS;\n-            case MILLISECONDS:\n-                return MetricUnits.MILLISECONDS;\n-            case SECONDS:\n-                return MetricUnits.SECONDS;\n-            case MINUTES:\n-                return MetricUnits.MINUTES;\n-            case HOURS:\n-                return MetricUnits.HOURS;\n-            case DAYS:\n-                return MetricUnits.DAYS;\n-            case PER_JIFFY:\n-                return \"per-jiffy\";\n-            case PER_NANOSECOND:\n-                return \"per_nanoseconds\";\n-            case PER_MICROSECOND:\n-                return \"per_microseconds\";\n-            case PER_MILLISECOND:\n-                return \"per_milliseconds\";\n-            case PER_SECOND:\n-                return MetricUnits.PER_SECOND;\n-            case PER_MINUTE:\n-                return \"per_minutes\";\n-            case PER_HOUR:\n-                return \"per_hour\";\n-            case PER_DAY:\n-                return \"per_day\";\n-            case CELSIUS:\n-                return \"degree_celsius\";\n-            case KELVIN:\n-                return \"kelvin\";\n-            case FAHRENHEIGHT:\n-                return \"degree_fahrenheit\";\n-            case NONE:\n-            default:\n-                return \"none\";\n-        }\n-    }\n-}\n"}}, {"oid": "b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "url": "https://github.com/wildfly/wildfly/commit/b2b91e9a7ca7da6116f5d645edbb199cae25e5ca", "message": "log RBAC errors when reading metrics at a lower level\nRevert to use a regular model controller client to read metrics (instead of a super user)\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-02T12:14:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MzI2Ng==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534483266", "bodyText": "This still seems high.  IIRC when I turned on RBAC to look at WFLY-11933 there were tons of items logged. If something was polling fairly frequently it would be really spammy.\nHmm, I probably hadn't secured the endpoint so maybe I was getting logging for every management API metric. I suppose someone might do that though.", "author": "bstansberry", "createdAt": "2020-12-02T21:10:10Z", "path": "metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2018, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.extension.metrics._private;\n+\n+import static org.jboss.logging.Logger.Level.INFO;\n+import static org.jboss.logging.Logger.Level.WARN;\n+\n+import java.io.IOException;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.logging.BasicLogger;\n+import org.jboss.logging.Logger;\n+import org.jboss.logging.annotations.Cause;\n+import org.jboss.logging.annotations.LogMessage;\n+import org.jboss.logging.annotations.Message;\n+import org.jboss.logging.annotations.MessageLogger;\n+\n+/**\n+ * Log messages for WildFly metrics Extension.\n+ * @author <a href=\"http://jmesnil.net/\">Jeff Mesnil</a> (c) 2018 Red Hat inc.\n+ */\n+@MessageLogger(projectCode = \"WFLYMETRICS\", length = 4)\n+public interface MetricsLogger extends BasicLogger {\n+    /**\n+     * A logger with the category {@code org.wildfly.extension.batch}.\n+     */\n+    MetricsLogger LOGGER = Logger.getMessageLogger(MetricsLogger.class, \"org.wildfly.extension.metrics\");\n+\n+    /**\n+     * Logs an informational message indicating the subsystem is being activated.\n+     */\n+    @LogMessage(level = INFO)\n+    @Message(id = 1, value = \"Activating Base Metrics Subsystem\")\n+    void activatingSubsystem();\n+\n+    @Message(id = 2, value = \"Failed to initialize metrics from JMX MBeans\")\n+    IllegalArgumentException failedInitializeJMXRegistrar(@Cause IOException e);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 3, value = \"Unable to read attribute %s on %s: %s.\")\n+    void unableToReadAttribute(String attributeName, PathAddress address, String error);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 4, value = \"Unable to convert attribute %s on %s to Double value.\")\n+    void unableToConvertAttribute(String attributeName, PathAddress address, @Cause Exception exception);\n+\n+    @LogMessage(level = INFO)", "originalCommit": "abf38569632737e5e7df9e65efad615b6b1a8576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2MDYwNA==", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534860604", "bodyText": "ok, I'll do that in a DEBUG log (and get rid of the i18ned message)", "author": "jmesnil", "createdAt": "2020-12-03T08:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MzI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "13656df28b810cad0f1f181a86df749d6a4837c2", "chunk": "diff --git a/metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java b/metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java\nindex ff821c4a5c..18082fec45 100644\n--- a/metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java\n+++ b/metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java\n\n@@ -63,8 +63,4 @@ public interface MetricsLogger extends BasicLogger {\n     @LogMessage(level = WARN)\n     @Message(id = 4, value = \"Unable to convert attribute %s on %s to Double value.\")\n     void unableToConvertAttribute(String attributeName, PathAddress address, @Cause Exception exception);\n-\n-    @LogMessage(level = INFO)\n-    @Message(id = 5, value = \"Unable to read attribute %s: %s.\")\n-    void unableToReadAttributeDueToRBAC(String attributeName, String error);\n }\n\\ No newline at end of file\n"}}, {"oid": "13656df28b810cad0f1f181a86df749d6a4837c2", "url": "https://github.com/wildfly/wildfly/commit/13656df28b810cad0f1f181a86df749d6a4837c2", "message": "Use a capability to have the security-enabled attribute of the microprofile-metrics-smallrye subystem takes over the the value for the base metrics subssytem.\n\nremove the 2.1 XSD that was added just to deprecate the security-enabled attribute", "committedDate": "2020-12-03T16:10:19Z", "type": "forcePushed"}, {"oid": "4383f95a8d43639710cb4468e4abac9b64382ef9", "url": "https://github.com/wildfly/wildfly/commit/4383f95a8d43639710cb4468e4abac9b64382ef9", "message": "use correct DUP phase value (and will use the constants after wildfly-core upgrade)\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-04T13:23:07Z", "type": "forcePushed"}, {"oid": "259616f886b95dbeba75c448e9f8765197ac7bed", "url": "https://github.com/wildfly/wildfly/commit/259616f886b95dbeba75c448e9f8765197ac7bed", "message": "Use proper POST_MODULE_METRICS phase for the metrics DUP\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-07T08:13:54Z", "type": "forcePushed"}, {"oid": "9b49bc457dc246cdf76c2048fbb75dc973076229", "url": "https://github.com/wildfly/wildfly/commit/9b49bc457dc246cdf76c2048fbb75dc973076229", "message": "add missing excluded-extensiosn for WildFly 19 and 20", "committedDate": "2020-12-07T08:42:49Z", "type": "forcePushed"}, {"oid": "aead95b073a7203233d82d8e31dca04b53ae2a88", "url": "https://github.com/wildfly/wildfly/commit/aead95b073a7203233d82d8e31dca04b53ae2a88", "message": "Fix doc typo\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-08T13:05:03Z", "type": "forcePushed"}, {"oid": "b11e75ca9eb5a007d81a3f2997e217fa7d5d6f63", "url": "https://github.com/wildfly/wildfly/commit/b11e75ca9eb5a007d81a3f2997e217fa7d5d6f63", "message": "[WFLY-14108] move microprofile-metrics extension to the full feature-pack\n\nAdd a `metrics` subsystem that provides base observability features\nfor the ee-feature-pack.\n\nThis subsystem will is responsible for the /metrics HTTP endpoint on the\nmanagement interface. When the `microprofile-metrics-smallrye` subsystem\nis installed, it will \"take over\" this HTTP endpoint to provide the\nMicroProfile Metrics feature on it.\n\nThis base `metrics` subsystems exposes metrics for the WildFly\nmanagement model (subsystem and deployment subtrees) as well as metrics\nfrom the JVM (using JMX to read them).\n\nJIRA: https://issues.redhat.com/browse/WFLY-14108", "committedDate": "2020-12-08T13:06:45Z", "type": "forcePushed"}, {"oid": "ca74cfd9cf809c15ea69629f65c04f7f58f01566", "url": "https://github.com/wildfly/wildfly/commit/ca74cfd9cf809c15ea69629f65c04f7f58f01566", "message": "[WFLY-14134] Ignore OnOffOpenTracingTestCase\n\nJIRA: https://issues.redhat.com/browse/WFLY-14134\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-09T10:17:46Z", "type": "forcePushed"}, {"oid": "ceaf4f2af8ab669f259c769da2f8e8833555e222", "url": "https://github.com/wildfly/wildfly/commit/ceaf4f2af8ab669f259c769da2f8e8833555e222", "message": "[WFLY-14134] Ignore OnOffOpenTracingTestCase\n\nJIRA: https://issues.redhat.com/browse/WFLY-14134\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-09T13:15:46Z", "type": "forcePushed"}, {"oid": "a70aae71e49e30886d386100ef9fdee001248d7e", "url": "https://github.com/wildfly/wildfly/commit/a70aae71e49e30886d386100ef9fdee001248d7e", "message": "[WFLY-14134] Ignore OnOffOpenTracingTestCase\n\nJIRA: https://issues.redhat.com/browse/WFLY-14134\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-10T08:43:45Z", "type": "forcePushed"}, {"oid": "3195a5f7253465f33a804f6844fab511cd9d9ed2", "url": "https://github.com/wildfly/wildfly/commit/3195a5f7253465f33a804f6844fab511cd9d9ed2", "message": "[WFLY-14108] move microprofile-metrics extension to the full feature-pack\n\nby providing it through the wildfly-mp-feature-pack-galleon-common\nGalleon feature-pack.\n\nJIRA: https://issues.redhat.com/browse/WFLY-14108\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-10T11:38:34Z", "type": "commit"}, {"oid": "0d8b07f40eacada6760b08aebfcde881ddcdeee1", "url": "https://github.com/wildfly/wildfly/commit/0d8b07f40eacada6760b08aebfcde881ddcdeee1", "message": "[WFLY-14108] move microprofile-metrics extension to the full feature-pack\n\nAdd a `metrics` subsystem that provides base observability features\nfor the ee-feature-pack.\n\nThis subsystem will is responsible for the /metrics HTTP endpoint on the\nmanagement interface. When the `microprofile-metrics-smallrye` subsystem\nis installed, it will \"take over\" this HTTP endpoint to provide the\nMicroProfile Metrics feature on it.\n\nThis base `metrics` subsystems exposes metrics for the WildFly\nmanagement model (subsystem and deployment subtrees) as well as metrics\nfrom the JVM (using JMX to read them).\n\nJIRA: https://issues.redhat.com/browse/WFLY-14108", "committedDate": "2020-12-10T11:38:48Z", "type": "commit"}, {"oid": "70e1d012b02246530c99ae64f873885742ab8be0", "url": "https://github.com/wildfly/wildfly/commit/70e1d012b02246530c99ae64f873885742ab8be0", "message": "[WFLY-14134] Ignore OnOffOpenTracingTestCase\n\nJIRA: https://issues.redhat.com/browse/WFLY-14134\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-10T11:38:48Z", "type": "commit"}, {"oid": "70e1d012b02246530c99ae64f873885742ab8be0", "url": "https://github.com/wildfly/wildfly/commit/70e1d012b02246530c99ae64f873885742ab8be0", "message": "[WFLY-14134] Ignore OnOffOpenTracingTestCase\n\nJIRA: https://issues.redhat.com/browse/WFLY-14134\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>", "committedDate": "2020-12-10T11:38:48Z", "type": "forcePushed"}]}