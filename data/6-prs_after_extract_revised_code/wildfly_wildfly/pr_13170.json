{"pr_number": 13170, "pr_title": "[WFLY-13334]:  MP Opentracing tests are not passing with a SecurityMa\u2026", "pr_createdAt": "2020-04-02T17:35:37Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13170", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0ODY1Ng==", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402648656", "bodyText": "This could just be TRACERS.get(WildFlySecurityManager.getCurrentContextClassLoader())", "author": "jamezp", "createdAt": "2020-04-02T23:13:10Z", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -42,7 +45,18 @@ public static void registerApplicationTracer(ClassLoader classLoader, Tracer tra\n \n     public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n         abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n-            return TRACERS.get(Thread.currentThread().getContextClassLoader());\n+            ClassLoader loader;\n+            if (!WildFlySecurityManager.isChecking()) {\n+                loader = Thread.currentThread().getContextClassLoader();\n+            } else {\n+                loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n+                    @Override\n+                    public ClassLoader run() {\n+                        return Thread.currentThread().getContextClassLoader();\n+                    }\n+                });\n+            }\n+            return TRACERS.get(loader);", "originalCommit": "928e4841536de648da6c2cff6dcb28a7e5693578", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5NjIxMA==", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402796210", "bodyText": "yes that was the issue", "author": "ehsavoie", "createdAt": "2020-04-03T07:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0ODY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5b82c18f79615fa96a7ea583944d924f036c7881", "chunk": "diff --git a/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java b/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\nindex cef1c6df11..ab23e941fa 100644\n--- a/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\n+++ b/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\n\n@@ -45,18 +45,7 @@ public class TracingCDIExtension implements Extension {\n \n     public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n         abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n-            ClassLoader loader;\n-            if (!WildFlySecurityManager.isChecking()) {\n-                loader = Thread.currentThread().getContextClassLoader();\n-            } else {\n-                loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n-                    @Override\n-                    public ClassLoader run() {\n-                        return Thread.currentThread().getContextClassLoader();\n-                    }\n-                });\n-            }\n-            return TRACERS.get(loader);\n+            return TRACERS.get(WildFlySecurityManager.getCurrentContextClassLoaderPrivileged());\n         });\n     }\n \n"}}, {"oid": "d33cd9c5d265d1b3a9232caa1393b2b11e7e4398", "url": "https://github.com/wildfly/wildfly/commit/d33cd9c5d265d1b3a9232caa1393b2b11e7e4398", "message": "[WFLY-13334]: MP Opentracing tests are not passing with a SecurityManager\n\n* Adding the missing privileged actions.\n\nJira: https://issues.redhat.com/browse/WFLY-13334", "committedDate": "2020-04-02T20:27:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5OTIyOA==", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402799228", "bodyText": "This entire block can be removed and instead just call WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()", "author": "darranl", "createdAt": "2020-04-03T07:52:19Z", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -42,7 +45,18 @@ public static void registerApplicationTracer(ClassLoader classLoader, Tracer tra\n \n     public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n         abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n-            return TRACERS.get(Thread.currentThread().getContextClassLoader());\n+            ClassLoader loader;", "originalCommit": "d33cd9c5d265d1b3a9232caa1393b2b11e7e4398", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b82c18f79615fa96a7ea583944d924f036c7881", "chunk": "diff --git a/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java b/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\nindex a685243d35..ab23e941fa 100644\n--- a/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\n+++ b/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\n\n@@ -45,18 +45,7 @@ public class TracingCDIExtension implements Extension {\n \n     public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n         abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n-            ClassLoader loader;\n-            if (!WildFlySecurityManager.isChecking()) {\n-                loader = Thread.currentThread().getContextClassLoader();\n-            } else {\n-                loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n-                    @Override\n-                    public ClassLoader run() {\n-                        return Thread.currentThread().getContextClassLoader();\n-                    }\n-                });\n-            }\n-            return TRACERS.get(loader);\n+            return TRACERS.get(WildFlySecurityManager.getCurrentContextClassLoaderPrivileged());\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwMDA4Ng==", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402800086", "bodyText": "This entire block can be removed and instead just call WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()\nAdditionally with this current approach two new classes needed to be defined and loaded to achieve a common task.", "author": "darranl", "createdAt": "2020-04-03T07:53:31Z", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -57,6 +71,17 @@ public void skipTracerBeans(@Observes ProcessAnnotatedType<? extends Tracer> pro\n      * @param bs\n      */\n     public void beforeShutdown(@Observes final BeforeShutdown bs) {\n-        TRACERS.remove(Thread.currentThread().getContextClassLoader());\n+        ClassLoader loader;", "originalCommit": "d33cd9c5d265d1b3a9232caa1393b2b11e7e4398", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b82c18f79615fa96a7ea583944d924f036c7881", "chunk": "diff --git a/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java b/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\nindex a685243d35..ab23e941fa 100644\n--- a/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\n+++ b/microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java\n\n@@ -71,17 +60,6 @@ public class TracingCDIExtension implements Extension {\n      * @param bs\n      */\n     public void beforeShutdown(@Observes final BeforeShutdown bs) {\n-        ClassLoader loader;\n-        if (!WildFlySecurityManager.isChecking()) {\n-            loader = Thread.currentThread().getContextClassLoader();\n-        } else {\n-            loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n-                @Override\n-                public ClassLoader run() {\n-                    return Thread.currentThread().getContextClassLoader();\n-                }\n-            });\n-        }\n-        TRACERS.remove(loader);\n+        TRACERS.remove(WildFlySecurityManager.getCurrentContextClassLoaderPrivileged());\n     }\n }\n"}}, {"oid": "5b82c18f79615fa96a7ea583944d924f036c7881", "url": "https://github.com/wildfly/wildfly/commit/5b82c18f79615fa96a7ea583944d924f036c7881", "message": "[WFLY-13334]: MP Opentracing tests are not passing with a SecurityManager\n\n* Adding the missing privileged actions.\n\nJira: https://issues.redhat.com/browse/WFLY-13334", "committedDate": "2020-04-03T08:01:11Z", "type": "forcePushed"}, {"oid": "03ad32427081e373263b3eee7ce9a130f53b7cb5", "url": "https://github.com/wildfly/wildfly/commit/03ad32427081e373263b3eee7ce9a130f53b7cb5", "message": "[WFLY-13334]: MP Opentracing tests are not passing with a SecurityManager\n\n* Adding the missing privileged actions.\n\nJira: https://issues.redhat.com/browse/WFLY-13334", "committedDate": "2020-04-03T12:32:28Z", "type": "commit"}, {"oid": "03ad32427081e373263b3eee7ce9a130f53b7cb5", "url": "https://github.com/wildfly/wildfly/commit/03ad32427081e373263b3eee7ce9a130f53b7cb5", "message": "[WFLY-13334]: MP Opentracing tests are not passing with a SecurityManager\n\n* Adding the missing privileged actions.\n\nJira: https://issues.redhat.com/browse/WFLY-13334", "committedDate": "2020-04-03T12:32:28Z", "type": "forcePushed"}]}