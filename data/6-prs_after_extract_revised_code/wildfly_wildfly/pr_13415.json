{"pr_number": 13415, "pr_title": "[WFLY-13433] Improve capability support in EJB3 subsystem", "pr_createdAt": "2020-07-19T19:12:25Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13415", "timeline": [{"oid": "5bfdc7558d0014f489bdadaead25a664528b0572", "url": "https://github.com/wildfly/wildfly/commit/5bfdc7558d0014f489bdadaead25a664528b0572", "message": "[WFLY-13433] Improve capability support in EJB3 subsystem (part 7).", "committedDate": "2020-07-21T21:50:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNzE0Mw==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458417143", "bodyText": "This one doesn't seem dynamic as there's only 1 instance of this resource with a fixed name.", "author": "bstansberry", "createdAt": "2020-07-21T22:08:06Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3AsyncResourceDefinition.java", "diffHunk": "@@ -28,30 +28,44 @@\n import org.jboss.as.controller.SimpleAttributeDefinition;\n import org.jboss.as.controller.SimpleAttributeDefinitionBuilder;\n import org.jboss.as.controller.SimpleResourceDefinition;\n+import org.jboss.as.controller.capability.RuntimeCapability;\n import org.jboss.as.controller.registry.AttributeAccess;\n import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.threads.ThreadsServices;\n import org.jboss.dmr.ModelType;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * A {@link org.jboss.as.controller.ResourceDefinition} for the EJB async service\n  * <p/>\n  * @author Stuart Douglas\n  */\n public class EJB3AsyncResourceDefinition extends SimpleResourceDefinition {\n \n+    // this is an unregistered copy of the capability defined and registered in /subsystem=ejb3/thread-pool=*\n+    // needed due to the unorthodox way in which the thread pools are defined in ejb3 subsystem\n+    protected static final String THREAD_POOL_CAPABILITY_NAME = ThreadsServices.createCapability(EJB3SubsystemModel.BASE_EJB_THREAD_POOL_NAME, ExecutorService.class).getName();\n+\n+    public static final String ASYNC_SERVICE_CAPABILITY_NAME = \"org.wildfly.ejb3.async\";\n+    public static final RuntimeCapability<Void> ASYNC_SERVICE_CAPABILITY =\n+            RuntimeCapability.Builder.of(ASYNC_SERVICE_CAPABILITY_NAME, true).build();", "originalCommit": "a5999392b9dd6c9d34449a6cf0ef869d6b88b522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MjIyNA==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r459792224", "bodyText": "Done.", "author": "rachmatowicz", "createdAt": "2020-07-24T00:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNzE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3AsyncResourceDefinition.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3AsyncResourceDefinition.java\nindex 522eba26ff..266f04b574 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3AsyncResourceDefinition.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3AsyncResourceDefinition.java\n\n@@ -49,7 +49,7 @@ public class EJB3AsyncResourceDefinition extends SimpleResourceDefinition {\n \n     public static final String ASYNC_SERVICE_CAPABILITY_NAME = \"org.wildfly.ejb3.async\";\n     public static final RuntimeCapability<Void> ASYNC_SERVICE_CAPABILITY =\n-            RuntimeCapability.Builder.of(ASYNC_SERVICE_CAPABILITY_NAME, true).build();\n+            RuntimeCapability.Builder.of(ASYNC_SERVICE_CAPABILITY_NAME).build();\n \n     static final SimpleAttributeDefinition THREAD_POOL_NAME =\n             new SimpleAttributeDefinitionBuilder(EJB3SubsystemModel.THREAD_POOL_NAME, ModelType.STRING, true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxOTIxOQ==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458419219", "bodyText": "It looks like this can remain private.", "author": "bstansberry", "createdAt": "2020-07-21T22:12:47Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/TimerServiceAdd.java", "diffHunk": "@@ -74,12 +76,10 @@ protected void execute(DeploymentProcessorTarget processorTarget) {\n             }\n         }, OperationContext.Stage.RUNTIME);\n \n-        context.getServiceTarget().addService(TimerServiceDeploymentProcessor.TIMER_SERVICE_NAME, new TimerValueService())\n-                .install();\n-\n+        context.getCapabilityServiceTarget().addCapability(TimerServiceResourceDefinition.TIMER_SERVICE_CAPABILITY, new TimerValueService()).install();\n     }\n \n-    private static final class TimerValueService implements Service<Timer> {\n+    public static final class TimerValueService implements Service<Timer> {", "originalCommit": "ba3290af17494a163dc5f03ac26f82d0cb64ac49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MTM3OA==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r459791378", "bodyText": "Done.", "author": "rachmatowicz", "createdAt": "2020-07-23T23:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxOTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/TimerServiceAdd.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/TimerServiceAdd.java\nindex 7135a3c96d..24374963bf 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/TimerServiceAdd.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/TimerServiceAdd.java\n\n@@ -79,7 +79,7 @@ public class TimerServiceAdd extends AbstractBoottimeAddStepHandler {\n         context.getCapabilityServiceTarget().addCapability(TimerServiceResourceDefinition.TIMER_SERVICE_CAPABILITY, new TimerValueService()).install();\n     }\n \n-    public static final class TimerValueService implements Service<Timer> {\n+    private static final class TimerValueService implements Service<Timer> {\n \n         private Timer timer;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzg1Mg==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458423852", "bodyText": "It's unfortunate this attribute allows expressions. This runs in Stage.MODEL and some expressions (typically legacy security vault ones) may not be resolvable until Stage.RUNTIME. Which is the big reason we avoid allow expressions for model reference attributes. But this one has been around forever, so it is what it is.\nTo be really safe L236-238 should be in a try/catch that just logs a WARN if resolvesExpressions throws OperationFailedException. We'd just not record the requirement.", "author": "bstansberry", "createdAt": "2020-07-21T22:24:25Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java", "diffHunk": "@@ -215,6 +221,35 @@ protected void populateModel(final OperationContext context, ModelNode operation\n         }\n     }\n \n+    /*\n+     * Conditional registration of capabilities for default bean instance pools (which may or may not be defined)\n+     */\n+    @Override\n+    protected void recordCapabilitiesAndRequirements(OperationContext context, ModelNode operation, Resource resource) throws OperationFailedException {\n+        ModelNode model = resource.getModel();\n+\n+        // register the capability we are exporting as well as its capability requirement on the strict-max-pool that supports it\n+        if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n+            context.registerCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY);\n+\n+            // need to resolve the attribute value before using it\n+            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();", "originalCommit": "9e06abb10cf0a2d31e65a4963d2a60ba5405e3e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NjE0OA==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r459796148", "bodyText": "Done", "author": "rachmatowicz", "createdAt": "2020-07-24T00:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java\nindex 4aa1cfcee6..fa9accb84b 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java\n\n@@ -232,19 +232,29 @@ class EJB3SubsystemAdd extends AbstractBoottimeAddStepHandler {\n         if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n             context.registerCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n-            String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n-            context.registerAdditionalCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n+                String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n+\n+                context.registerAdditionalCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            } catch (OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_SLSB_INSTANCE_POOL, model.get(DEFAULT_SLSB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         if (model.hasDefined(DEFAULT_MDB_INSTANCE_POOL)) {\n             context.registerCapability(DEFAULT_MDB_POOL_CONFIG_CAPABILITY);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n-            String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n-            context.registerAdditionalCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n+                String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n+\n+                context.registerAdditionalCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            } catch(OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_MDB_INSTANCE_POOL, model.get(DEFAULT_MDB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         super.recordCapabilitiesAndRequirements(context, operation, resource);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzkzMg==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458423932", "bodyText": "Same comment as above.", "author": "bstansberry", "createdAt": "2020-07-21T22:24:38Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java", "diffHunk": "@@ -215,6 +221,35 @@ protected void populateModel(final OperationContext context, ModelNode operation\n         }\n     }\n \n+    /*\n+     * Conditional registration of capabilities for default bean instance pools (which may or may not be defined)\n+     */\n+    @Override\n+    protected void recordCapabilitiesAndRequirements(OperationContext context, ModelNode operation, Resource resource) throws OperationFailedException {\n+        ModelNode model = resource.getModel();\n+\n+        // register the capability we are exporting as well as its capability requirement on the strict-max-pool that supports it\n+        if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n+            context.registerCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY);\n+\n+            // need to resolve the attribute value before using it\n+            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n+            String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n+            context.registerAdditionalCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+        }\n+\n+        if (model.hasDefined(DEFAULT_MDB_INSTANCE_POOL)) {\n+            context.registerCapability(DEFAULT_MDB_POOL_CONFIG_CAPABILITY);\n+\n+            // need to resolve the attribute value before using it\n+            String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();", "originalCommit": "9e06abb10cf0a2d31e65a4963d2a60ba5405e3e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NjE5Mw==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r459796193", "bodyText": "Done", "author": "rachmatowicz", "createdAt": "2020-07-24T00:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMzkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java\nindex 4aa1cfcee6..fa9accb84b 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemAdd.java\n\n@@ -232,19 +232,29 @@ class EJB3SubsystemAdd extends AbstractBoottimeAddStepHandler {\n         if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n             context.registerCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n-            String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n-            context.registerAdditionalCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n+                String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n+\n+                context.registerAdditionalCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            } catch (OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_SLSB_INSTANCE_POOL, model.get(DEFAULT_SLSB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         if (model.hasDefined(DEFAULT_MDB_INSTANCE_POOL)) {\n             context.registerCapability(DEFAULT_MDB_POOL_CONFIG_CAPABILITY);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n-            String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n-            context.registerAdditionalCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n+                String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n+\n+                context.registerAdditionalCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            } catch(OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_MDB_INSTANCE_POOL, model.get(DEFAULT_MDB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         super.recordCapabilitiesAndRequirements(context, operation, resource);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDY1MQ==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458424651", "bodyText": "Probably log a WARN and just deregister the old requirement, don't record the new one.", "author": "bstansberry", "createdAt": "2020-07-21T22:26:20Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemDefaultPoolWriteHandler.java", "diffHunk": "@@ -27,40 +27,84 @@\n import org.jboss.as.controller.OperationContext;\n import org.jboss.as.controller.OperationFailedException;\n import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.capability.RuntimeCapability;\n+import org.jboss.as.controller.registry.Resource;\n import org.jboss.as.ejb3.component.pool.PoolConfig;\n-import org.jboss.as.ejb3.component.pool.StrictMaxPoolConfigService;\n import org.jboss.dmr.ModelNode;\n import org.jboss.msc.service.ServiceController;\n import org.jboss.msc.service.ServiceName;\n import org.jboss.msc.service.ServiceRegistry;\n import org.jboss.msc.service.ValueInjectionService;\n \n+import static org.jboss.as.ejb3.subsystem.EJB3SubsystemModel.DEFAULT_MDB_INSTANCE_POOL;\n+import static org.jboss.as.ejb3.subsystem.EJB3SubsystemModel.DEFAULT_SLSB_INSTANCE_POOL;\n+\n /**\n  * User: jpai\n  */\n public class EJB3SubsystemDefaultPoolWriteHandler extends AbstractWriteAttributeHandler<Void> {\n \n-    public static final EJB3SubsystemDefaultPoolWriteHandler MDB_POOL =\n-            new EJB3SubsystemDefaultPoolWriteHandler(StrictMaxPoolConfigService.DEFAULT_MDB_POOL_CONFIG_SERVICE_NAME,\n-                    EJB3SubsystemRootResourceDefinition.DEFAULT_MDB_INSTANCE_POOL);\n+    private static final String STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME = \"org.wildfly.ejb3.pool-config\";\n+    private static final String DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME = \"org.wildfly.ejb3.pool-config.slsb-default\";\n+    private static final String DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME = \"org.wildfly.ejb3.pool-config.mdb-default\";\n+    private static final String DEFAULT_ENTITY_POOL_CONFIG_CAPABILITY_NAME = \"org.wildfly.ejb3.pool-config.entity-default\";\n \n     public static final EJB3SubsystemDefaultPoolWriteHandler SLSB_POOL =\n-            new EJB3SubsystemDefaultPoolWriteHandler(StrictMaxPoolConfigService.DEFAULT_SLSB_POOL_CONFIG_SERVICE_NAME,\n-                    EJB3SubsystemRootResourceDefinition.DEFAULT_SLSB_INSTANCE_POOL);\n+            new EJB3SubsystemDefaultPoolWriteHandler(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, EJB3SubsystemRootResourceDefinition.DEFAULT_SLSB_INSTANCE_POOL);\n+\n+    public static final EJB3SubsystemDefaultPoolWriteHandler MDB_POOL =\n+            new EJB3SubsystemDefaultPoolWriteHandler(DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, EJB3SubsystemRootResourceDefinition.DEFAULT_MDB_INSTANCE_POOL);\n \n     public static final EJB3SubsystemDefaultPoolWriteHandler ENTITY_BEAN_POOL =\n-            new EJB3SubsystemDefaultPoolWriteHandler(StrictMaxPoolConfigService.DEFAULT_ENTITY_POOL_CONFIG_SERVICE_NAME,\n-                    EJB3SubsystemRootResourceDefinition.DEFAULT_ENTITY_BEAN_INSTANCE_POOL);\n+            new EJB3SubsystemDefaultPoolWriteHandler(DEFAULT_ENTITY_POOL_CONFIG_CAPABILITY_NAME, EJB3SubsystemRootResourceDefinition.DEFAULT_ENTITY_BEAN_INSTANCE_POOL);\n \n-    private final ServiceName poolConfigServiceName;\n+    private final String poolConfigCapabilityName;\n     private final AttributeDefinition poolAttribute;\n \n-    public EJB3SubsystemDefaultPoolWriteHandler(ServiceName poolConfigServiceName, AttributeDefinition poolAttribute) {\n+    public EJB3SubsystemDefaultPoolWriteHandler(String defaultPoolConfigCapabilityName, AttributeDefinition poolAttribute) {\n         super(poolAttribute);\n-        this.poolConfigServiceName = poolConfigServiceName;\n+        this.poolConfigCapabilityName = defaultPoolConfigCapabilityName;\n         this.poolAttribute = poolAttribute;\n     }\n \n+    /*\n+     * Update the conditional capabilities for the default bean instance pools if the attribute values have changed\n+     * This write handler is registered with the EJB3SubsystemRootResource\n+     */\n+    @Override\n+    protected void recordCapabilitiesAndRequirements(OperationContext context, AttributeDefinition attributeDefinition, ModelNode newValue, ModelNode oldValue) {\n+        Resource resource = context.readResource(PathAddress.EMPTY_ADDRESS);\n+        ModelNode model = resource.getModel();\n+\n+        // NOTE: the old value does not contain an expression, but the new value contains an expression, so we need to resolve it first\n+        ModelNode resolvedNewValue = new ModelNode();\n+        try {\n+            resolvedNewValue = context.resolveExpressions(newValue);\n+        } catch(OperationFailedException ofe) {\n+            // TODO: handle any possible exception correctly", "originalCommit": "9e06abb10cf0a2d31e65a4963d2a60ba5405e3e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwMjUzNw==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r459802537", "bodyText": "Done.", "author": "rachmatowicz", "createdAt": "2020-07-24T00:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemDefaultPoolWriteHandler.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemDefaultPoolWriteHandler.java\nindex b67bc05b8b..8d395157bb 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemDefaultPoolWriteHandler.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemDefaultPoolWriteHandler.java\n\n@@ -30,6 +30,7 @@ import org.jboss.as.controller.PathAddress;\n import org.jboss.as.controller.capability.RuntimeCapability;\n import org.jboss.as.controller.registry.Resource;\n import org.jboss.as.ejb3.component.pool.PoolConfig;\n+import org.jboss.as.ejb3.logging.EjbLogger;\n import org.jboss.dmr.ModelNode;\n import org.jboss.msc.service.ServiceController;\n import org.jboss.msc.service.ServiceName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDkyMg==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458424922", "bodyText": "See previous comment about try/catch", "author": "bstansberry", "createdAt": "2020-07-21T22:27:01Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java", "diffHunk": "@@ -39,6 +47,35 @@\n     private EJB3SubsystemRemove() {\n     }\n \n+    /*\n+     * handle conditionally-defined capabilities for default bean instance pools\n+     */\n+    @Override\n+    protected void recordCapabilitiesAndRequirements(OperationContext context, ModelNode operation, Resource resource) throws OperationFailedException {\n+        ModelNode model = resource.getModel();\n+\n+        // de-register the capability we are exporting as well as its capability requirement on the strict-max-pool that supports it\n+        if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n+            context.deregisterCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME);\n+\n+            // need to resolve the attribute value before using it\n+            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();", "originalCommit": "9e06abb10cf0a2d31e65a4963d2a60ba5405e3e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzQ3OA==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r459797478", "bodyText": "Done", "author": "rachmatowicz", "createdAt": "2020-07-24T00:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java\nindex 9648d1a834..3861cc516b 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java\n\n@@ -58,19 +59,29 @@ public class EJB3SubsystemRemove extends AbstractRemoveStepHandler {\n         if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n             context.deregisterCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n-            String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n-            context.deregisterCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n+                String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n+\n+                context.deregisterCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            } catch(OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_SLSB_INSTANCE_POOL, model.get(DEFAULT_SLSB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         if (model.hasDefined(DEFAULT_MDB_INSTANCE_POOL)) {\n             context.deregisterCapability(DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n-            String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n-            context.deregisterCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n+                String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n+\n+                context.deregisterCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            } catch(OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_MDB_INSTANCE_POOL, model.get(DEFAULT_MDB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         super.recordCapabilitiesAndRequirements(context, operation, resource);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDk1Ng==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458424956", "bodyText": "See previous comment about try/catch", "author": "bstansberry", "createdAt": "2020-07-21T22:27:07Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java", "diffHunk": "@@ -39,6 +47,35 @@\n     private EJB3SubsystemRemove() {\n     }\n \n+    /*\n+     * handle conditionally-defined capabilities for default bean instance pools\n+     */\n+    @Override\n+    protected void recordCapabilitiesAndRequirements(OperationContext context, ModelNode operation, Resource resource) throws OperationFailedException {\n+        ModelNode model = resource.getModel();\n+\n+        // de-register the capability we are exporting as well as its capability requirement on the strict-max-pool that supports it\n+        if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n+            context.deregisterCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME);\n+\n+            // need to resolve the attribute value before using it\n+            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n+            String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n+            context.deregisterCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+        }\n+\n+        if (model.hasDefined(DEFAULT_MDB_INSTANCE_POOL)) {\n+            context.deregisterCapability(DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME);\n+\n+            // need to resolve the attribute value before using it\n+            String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();", "originalCommit": "9e06abb10cf0a2d31e65a4963d2a60ba5405e3e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzUwNw==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r459797507", "bodyText": "Done.", "author": "rachmatowicz", "createdAt": "2020-07-24T00:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java\nindex 9648d1a834..3861cc516b 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRemove.java\n\n@@ -58,19 +59,29 @@ public class EJB3SubsystemRemove extends AbstractRemoveStepHandler {\n         if (model.hasDefined(DEFAULT_SLSB_INSTANCE_POOL)) {\n             context.deregisterCapability(DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n-            String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n-            context.deregisterCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultSLSBPoolName = context.resolveExpressions(model.get(DEFAULT_SLSB_INSTANCE_POOL)).asString();\n+                String defaultSLSBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultSLSBPoolName);\n+\n+                context.deregisterCapabilityRequirement(defaultSLSBPoolRequirementName, DEFAULT_SLSB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_SLSB_INSTANCE_POOL);\n+            } catch(OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_SLSB_INSTANCE_POOL, model.get(DEFAULT_SLSB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         if (model.hasDefined(DEFAULT_MDB_INSTANCE_POOL)) {\n             context.deregisterCapability(DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME);\n \n-            // need to resolve the attribute value before using it\n-            String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n-            String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n-            context.deregisterCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            try {\n+                // need to resolve the attribute value before using it\n+                String resolvedDefaultMDBPoolName = context.resolveExpressions(model.get(DEFAULT_MDB_INSTANCE_POOL)).asString();\n+                String defaultMDBPoolRequirementName = RuntimeCapability.buildDynamicCapabilityName(STRICT_MAX_POOL_CONFIG_CAPABILITY_NAME, resolvedDefaultMDBPoolName);\n+\n+                context.deregisterCapabilityRequirement(defaultMDBPoolRequirementName, DEFAULT_MDB_POOL_CONFIG_CAPABILITY_NAME, DEFAULT_MDB_INSTANCE_POOL);\n+            } catch(OperationFailedException ofe) {\n+                EjbLogger.ROOT_LOGGER.defaultPoolExpressionCouldNotBeResolved(DEFAULT_MDB_INSTANCE_POOL, model.get(DEFAULT_MDB_INSTANCE_POOL).asString());\n+            }\n         }\n \n         super.recordCapabilitiesAndRequirements(context, operation, resource);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNzI5NQ==", "url": "https://github.com/wildfly/wildfly/pull/13415#discussion_r458427295", "bodyText": "@mmusgrov Any concerns about this?  To me RemotingTransactionService seems like a reasonable API to expose via a capability, and in any case it's already being used in other subsystems for MSC service wiring.  This addition of a capability just formalizes the contract a bit.", "author": "bstansberry", "createdAt": "2020-07-21T22:32:50Z", "path": "transactions/src/main/java/org/jboss/as/txn/subsystem/TransactionSubsystemRootResourceDefinition.java", "diffHunk": "@@ -82,6 +83,11 @@\n     public static final RuntimeCapability<Void> TRANSACTION_SYNCHRONIZATION_REGISTRY_CAPABILITY =\n             RuntimeCapability.Builder.of(\"org.wildfly.transactions.transaction-synchronization-registry\", TransactionSynchronizationRegistry.class)\n                     .build();\n+\n+    public static final RuntimeCapability<Void> REMOTE_TRANSACTION_SERVICE_CAPABILITY =\n+            RuntimeCapability.Builder.of(\"org.wildfly.transactions.remote-transaction-service\", RemotingTransactionService.class)\n+                    .build();", "originalCommit": "5e1cdf3f57056f37f286799cefb11bce44c22a3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e390443804db799a98da76b2375677465d040acf", "url": "https://github.com/wildfly/wildfly/commit/e390443804db799a98da76b2375677465d040acf", "message": "[WFLY-13433] Improve capability support in EJB3 subsystem (part 7).", "committedDate": "2020-07-23T20:48:31Z", "type": "forcePushed"}, {"oid": "48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "url": "https://github.com/wildfly/wildfly/commit/48c7b430106b2bfecf08d20c813b1cada6c8f4f2", "message": "[WFLY-13433] Improve capability support in EJB3 subsystem (part 7).", "committedDate": "2020-07-24T03:10:00Z", "type": "forcePushed"}, {"oid": "fdda8c71dce6c4d1e94b08be4ac1b4906d568f83", "url": "https://github.com/wildfly/wildfly/commit/fdda8c71dce6c4d1e94b08be4ac1b4906d568f83", "message": "[WFLY-13433] Improve capability support in EJB3 subsystem (part 7).", "committedDate": "2020-07-27T16:48:23Z", "type": "forcePushed"}, {"oid": "e32b06bf57957f74569f4fb8c9494bd937cb6bd0", "url": "https://github.com/wildfly/wildfly/commit/e32b06bf57957f74569f4fb8c9494bd937cb6bd0", "message": "[WFLY-13433] Improve capability support in EJB3 subsystem.", "committedDate": "2020-07-30T03:55:48Z", "type": "commit"}, {"oid": "e32b06bf57957f74569f4fb8c9494bd937cb6bd0", "url": "https://github.com/wildfly/wildfly/commit/e32b06bf57957f74569f4fb8c9494bd937cb6bd0", "message": "[WFLY-13433] Improve capability support in EJB3 subsystem.", "committedDate": "2020-07-30T03:55:48Z", "type": "forcePushed"}]}