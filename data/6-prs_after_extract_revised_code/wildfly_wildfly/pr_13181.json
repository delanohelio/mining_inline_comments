{"pr_number": 13181, "pr_title": "[WFLY-11566] Fix EJB validation - provide information about generics to validator", "pr_createdAt": "2020-04-04T20:18:53Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13181", "timeline": [{"oid": "ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3", "url": "https://github.com/wildfly/wildfly/commit/ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3", "message": "[WFLY-11566] EJB proxy validation integration test", "committedDate": "2020-04-04T20:21:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUzMDY2NA==", "url": "https://github.com/wildfly/wildfly/pull/13181#discussion_r403530664", "bodyText": "This should handle the possibility that view.getMarkupClassName() will return null.", "author": "bstansberry", "createdAt": "2020-04-04T21:52:09Z", "path": "ee/src/main/java/org/jboss/as/ee/component/DefaultComponentViewConfigurator.java", "diffHunk": "@@ -78,6 +78,14 @@ public void configure(final DeploymentPhaseContext context, final ComponentDescr\n                 }\n             }\n \n+            Class<?> markupClass;\n+            try {\n+                markupClass = module.getClassLoader().loadClass(view.getMarkupClassName());", "originalCommit": "ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e5050b3ee4291ff74c629edcd839a5731d69358", "chunk": "diff --git a/ee/src/main/java/org/jboss/as/ee/component/DefaultComponentViewConfigurator.java b/ee/src/main/java/org/jboss/as/ee/component/DefaultComponentViewConfigurator.java\nindex 5f68ad39f6..6a52e05a65 100644\n--- a/ee/src/main/java/org/jboss/as/ee/component/DefaultComponentViewConfigurator.java\n+++ b/ee/src/main/java/org/jboss/as/ee/component/DefaultComponentViewConfigurator.java\n\n@@ -80,8 +80,10 @@ class DefaultComponentViewConfigurator extends AbstractComponentConfigurator imp\n \n             Class<?> markupClass;\n             try {\n-                markupClass = module.getClassLoader().loadClass(view.getMarkupClassName());\n-                proxyConfiguration.addAdditionalInterface(markupClass);\n+                if (view.getMarkupClassName() != null) {\n+                    markupClass = module.getClassLoader().loadClass(view.getMarkupClassName());\n+                    proxyConfiguration.addAdditionalInterface(markupClass);\n+                }\n             } catch (ClassNotFoundException e) {\n                 throw EeLogger.ROOT_LOGGER.cannotLoadViewClass(e, view.getMarkupClassName(), configuration);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUzMDkyOA==", "url": "https://github.com/wildfly/wildfly/pull/13181#discussion_r403530928", "bodyText": "If this is in the request handling path please use a constant.", "author": "bstansberry", "createdAt": "2020-04-04T21:54:40Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.ejb3.validator;\n+\n+import org.hibernate.validator.cdi.spi.BeanNames;\n+import org.hibernate.validator.metadata.BeanMetaDataClassNormalizer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.enterprise.inject.spi.PassivationCapable;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:tadamski@redhat.com\">Tomasz Adamski</a>\n+ */\n+\n+public class EjbProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer, Bean<BeanMetaDataClassNormalizer>, PassivationCapable {\n+\n+    @Override\n+    public <T> Class<? super T> normalize(Class<T> clazz) {\n+        if (EjbProxy.class.isAssignableFrom(clazz)) {\n+            return clazz.getSuperclass();\n+        }\n+        return clazz;\n+    }\n+\n+    @Override\n+    public Class<?> getBeanClass() {\n+        return BeanMetaDataClassNormalizer.class;\n+    }\n+\n+    @Override\n+    public Set<InjectionPoint> getInjectionPoints() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public boolean isNullable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public BeanMetaDataClassNormalizer create(CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+        return new EjbProxyBeanMetaDataClassNormalizer();\n+    }\n+\n+    @Override\n+    public void destroy(BeanMetaDataClassNormalizer beanMetaDataClassNormalizer, CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+\n+    }\n+\n+    @Override\n+    public Set<Type> getTypes() {\n+        return Collections.singleton( BeanMetaDataClassNormalizer.class );", "originalCommit": "ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e5050b3ee4291ff74c629edcd839a5731d69358", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java b/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java\nindex 8ba232f324..2b1dc11e7e 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java\n\n@@ -42,6 +42,10 @@ import java.util.Set;\n \n public class EjbProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer, Bean<BeanMetaDataClassNormalizer>, PassivationCapable {\n \n+    private static final Set<Type> TYPES = Collections.singleton(BeanMetaDataClassNormalizer.class);\n+    private static final Set<Annotation> QUALIFIERS = Collections.singleton(NamedLiteral.of(BeanNames.BEAN_META_DATA_CLASS_NORMALIZER));\n+\n+\n     @Override\n     public <T> Class<? super T> normalize(Class<T> clazz) {\n         if (EjbProxy.class.isAssignableFrom(clazz)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUzMDkzMw==", "url": "https://github.com/wildfly/wildfly/pull/13181#discussion_r403530933", "bodyText": "If this is in the request handling path please use a constant.", "author": "bstansberry", "createdAt": "2020-04-04T21:54:45Z", "path": "ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.ejb3.validator;\n+\n+import org.hibernate.validator.cdi.spi.BeanNames;\n+import org.hibernate.validator.metadata.BeanMetaDataClassNormalizer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.enterprise.inject.spi.PassivationCapable;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:tadamski@redhat.com\">Tomasz Adamski</a>\n+ */\n+\n+public class EjbProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer, Bean<BeanMetaDataClassNormalizer>, PassivationCapable {\n+\n+    @Override\n+    public <T> Class<? super T> normalize(Class<T> clazz) {\n+        if (EjbProxy.class.isAssignableFrom(clazz)) {\n+            return clazz.getSuperclass();\n+        }\n+        return clazz;\n+    }\n+\n+    @Override\n+    public Class<?> getBeanClass() {\n+        return BeanMetaDataClassNormalizer.class;\n+    }\n+\n+    @Override\n+    public Set<InjectionPoint> getInjectionPoints() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public boolean isNullable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public BeanMetaDataClassNormalizer create(CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+        return new EjbProxyBeanMetaDataClassNormalizer();\n+    }\n+\n+    @Override\n+    public void destroy(BeanMetaDataClassNormalizer beanMetaDataClassNormalizer, CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+\n+    }\n+\n+    @Override\n+    public Set<Type> getTypes() {\n+        return Collections.singleton( BeanMetaDataClassNormalizer.class );\n+    }\n+\n+    @Override\n+    public Set<Annotation> getQualifiers() {\n+        return Collections.singleton( NamedLiteral.of( BeanNames.BEAN_META_DATA_CLASS_NORMALIZER ) );", "originalCommit": "ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e5050b3ee4291ff74c629edcd839a5731d69358", "chunk": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java b/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java\nindex 8ba232f324..2b1dc11e7e 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java\n\n@@ -42,6 +42,10 @@ import java.util.Set;\n \n public class EjbProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer, Bean<BeanMetaDataClassNormalizer>, PassivationCapable {\n \n+    private static final Set<Type> TYPES = Collections.singleton(BeanMetaDataClassNormalizer.class);\n+    private static final Set<Annotation> QUALIFIERS = Collections.singleton(NamedLiteral.of(BeanNames.BEAN_META_DATA_CLASS_NORMALIZER));\n+\n+\n     @Override\n     public <T> Class<? super T> normalize(Class<T> clazz) {\n         if (EjbProxy.class.isAssignableFrom(clazz)) {\n"}}, {"oid": "1e5050b3ee4291ff74c629edcd839a5731d69358", "url": "https://github.com/wildfly/wildfly/commit/1e5050b3ee4291ff74c629edcd839a5731d69358", "message": "[WFLY-11566] EJB proxy validation integration test", "committedDate": "2020-04-05T14:00:06Z", "type": "forcePushed"}, {"oid": "94a521543609f63766c14a463d1cf8da087af7d3", "url": "https://github.com/wildfly/wildfly/commit/94a521543609f63766c14a463d1cf8da087af7d3", "message": "[WFLY-11566] Provide hibernate-validator with normalizer for EJB proxies", "committedDate": "2020-04-14T12:34:13Z", "type": "forcePushed"}, {"oid": "f5e6038154b135a1fd5c92b312c1b477559f3384", "url": "https://github.com/wildfly/wildfly/commit/f5e6038154b135a1fd5c92b312c1b477559f3384", "message": "[WFLY-11566] Provide hibernate-validator with normalizer for EJB proxies", "committedDate": "2020-05-07T10:29:21Z", "type": "commit"}, {"oid": "f5e6038154b135a1fd5c92b312c1b477559f3384", "url": "https://github.com/wildfly/wildfly/commit/f5e6038154b135a1fd5c92b312c1b477559f3384", "message": "[WFLY-11566] Provide hibernate-validator with normalizer for EJB proxies", "committedDate": "2020-05-07T10:29:21Z", "type": "forcePushed"}]}