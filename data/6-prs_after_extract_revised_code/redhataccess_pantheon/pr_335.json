{"pr_number": 335, "pr_title": "Adding Document classes that Module classes now extend", "pr_createdAt": "2020-07-09T19:43:11Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/335", "timeline": [{"oid": "55bbe9e2375c963437c288e909d15551cf4ea974", "url": "https://github.com/redhataccess/pantheon/commit/55bbe9e2375c963437c288e909d15551cf4ea974", "message": "sling servlet suffix utility (#307)\n\nAdd a utility for dealing with Sling path suffixes. In this revision the utility allows for template-based extraction of path parameters, enabling building complex, non-static API paths.", "committedDate": "2020-07-09T19:09:38Z", "type": "commit"}, {"oid": "58763ff683c78685d430dfc990626531ff70a209", "url": "https://github.com/redhataccess/pantheon/commit/58763ff683c78685d430dfc990626531ff70a209", "message": "Assembly changes", "committedDate": "2020-07-09T19:13:38Z", "type": "commit"}, {"oid": "83d5e4a9a6b5496ed661e213dc6e2e1849f11a32", "url": "https://github.com/redhataccess/pantheon/commit/83d5e4a9a6b5496ed661e213dc6e2e1849f11a32", "message": " (CCS-3230) Single page assembly preview Assembly Changes", "committedDate": "2020-07-09T19:13:43Z", "type": "commit"}, {"oid": "63cdfb02d3a4eaacee555e3b0f6a9cf7bf996dab", "url": "https://github.com/redhataccess/pantheon/commit/63cdfb02d3a4eaacee555e3b0f6a9cf7bf996dab", "message": " Assembly / module rendering independent classes", "committedDate": "2020-07-09T19:13:43Z", "type": "commit"}, {"oid": "0dc45407ba91f7ddd62f3170ffd5aac4684cc367", "url": "https://github.com/redhataccess/pantheon/commit/0dc45407ba91f7ddd62f3170ffd5aac4684cc367", "message": " Assembly / module rendering independent classes", "committedDate": "2020-07-09T19:18:25Z", "type": "commit"}, {"oid": "fd4f1f18eac04d0a5e8abdd088bf3b2be9fe899f", "url": "https://github.com/redhataccess/pantheon/commit/fd4f1f18eac04d0a5e8abdd088bf3b2be9fe899f", "message": "quick and dirty copy of module search, appears to function", "committedDate": "2020-07-09T19:19:12Z", "type": "commit"}, {"oid": "1e700264a247aa2b36bd695e81d28701dec7cec4", "url": "https://github.com/redhataccess/pantheon/commit/1e700264a247aa2b36bd695e81d28701dec7cec4", "message": "Tweaking module query to return modules and assemblies", "committedDate": "2020-07-09T19:19:13Z", "type": "commit"}, {"oid": "08f46f5401f433b8938f83d5cf6a47f894e84464", "url": "https://github.com/redhataccess/pantheon/commit/08f46f5401f433b8938f83d5cf6a47f894e84464", "message": "Revert \"quick and dirty copy of module search, appears to function\"\n\nThis reverts commit ce8c366ec0f154704f59bd15883f90e22f50baf2.", "committedDate": "2020-07-09T19:19:31Z", "type": "commit"}, {"oid": "927ccf06340b604ab0a380fe461497c0def9e478", "url": "https://github.com/redhataccess/pantheon/commit/927ccf06340b604ab0a380fe461497c0def9e478", "message": "Re-fixed servlets", "committedDate": "2020-07-09T19:19:53Z", "type": "commit"}, {"oid": "51b2701f86eb498195e5e1532af879146e44b6f1", "url": "https://github.com/redhataccess/pantheon/commit/51b2701f86eb498195e5e1532af879146e44b6f1", "message": "Hijacking module type column for assemblies", "committedDate": "2020-07-09T19:19:55Z", "type": "commit"}, {"oid": "13241350737f9484bedcfd8e176c5ce6b47d254c", "url": "https://github.com/redhataccess/pantheon/commit/13241350737f9484bedcfd8e176c5ce6b47d254c", "message": "basic injection of module uuid for haml", "committedDate": "2020-07-09T19:19:55Z", "type": "commit"}, {"oid": "8c188d608ca2a259259386d765b9c7b3166cfbfc", "url": "https://github.com/redhataccess/pantheon/commit/8c188d608ca2a259259386d765b9c7b3166cfbfc", "message": "Broken project but showing potential", "committedDate": "2020-07-09T19:20:44Z", "type": "commit"}, {"oid": "d26491565ec8bc6ce387e3aea4872038f593b8a6", "url": "https://github.com/redhataccess/pantheon/commit/d26491565ec8bc6ce387e3aea4872038f593b8a6", "message": "project compiles but tests don't pass", "committedDate": "2020-07-09T19:22:03Z", "type": "commit"}, {"oid": "5a95b3a1df7b67947c36812e7e33718b24061627", "url": "https://github.com/redhataccess/pantheon/commit/5a95b3a1df7b67947c36812e7e33718b24061627", "message": "Test classes pass", "committedDate": "2020-07-09T19:22:21Z", "type": "commit"}, {"oid": "5fd365c1bba7e38640f6e6ebf76847786e34a390", "url": "https://github.com/redhataccess/pantheon/commit/5fd365c1bba7e38640f6e6ebf76847786e34a390", "message": "re-fixing servlet", "committedDate": "2020-07-09T19:23:49Z", "type": "commit"}, {"oid": "e0ea410496304ac45a252a14bc9e769ef86b1d96", "url": "https://github.com/redhataccess/pantheon/commit/e0ea410496304ac45a252a14bc9e769ef86b1d96", "message": "resetting frontend to master", "committedDate": "2020-07-09T19:30:18Z", "type": "commit"}, {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160", "url": "https://github.com/redhataccess/pantheon/commit/d52dbaa590df8756f67e0c8688ca0436bdf5c160", "message": "Fixing up some mistakes from rebase", "committedDate": "2020-07-09T19:41:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NTY0Nw==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456585647", "bodyText": "interesting... setting a property and removing it after the module content. What are you trying to accomplish here?", "author": "carlosmunoz", "createdAt": "2020-07-17T17:45:55Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -67,12 +67,20 @@ public void process(Document document, PreprocessorReader reader, String target,\n                 Module module = includedResourceAsModel.adaptTo(Module.class);\n                 // TODO, right now only default locale and latest (draft) version of the module are used\n                 content = traverseFrom(module)\n-                        .toChild(module1 -> module.moduleLocale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n+                        .toChild(module1 -> module.locale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(SourceContent::draft)\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n+                content = new StringBuilder(\":pantheon_module_id: \")", "originalCommit": "d52dbaa590df8756f67e0c8688ca0436bdf5c160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NjYxOA==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457456618", "bodyText": "This was Wes' recommendation. Apparently the haml can key off of variable values anywhere in the document, even if those variables aren't referenced by the asciidoc content. So Wes is using this to create special div tags that have special classes applied that we can key off of to carve the modules out of the html when the time comes to split assemblies.", "author": "benradey", "createdAt": "2020-07-20T14:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NTY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyOTk1Mg==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457529952", "bodyText": "as I said... interesting \ud83d\ude04", "author": "carlosmunoz", "createdAt": "2020-07-20T16:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NTY0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NjUyNA==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456586524", "bodyText": "I say we remove commented out code.", "author": "carlosmunoz", "createdAt": "2020-07-17T17:47:39Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.redhat.pantheon.model.document;\n+\n+import com.redhat.pantheon.jcr.JcrResources;\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.WorkspaceChild;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.api.Reference;\n+import com.redhat.pantheon.model.api.SlingModel;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+\n+import java.util.Calendar;\n+\n+import static com.google.common.collect.Streams.stream;\n+import static com.redhat.pantheon.jcr.JcrResources.rename;\n+import static java.util.stream.Collectors.counting;\n+\n+/**\n+ * A specific Document variant node which houses all the versions for a specific language in the Document.\n+ */\n+public interface DocumentVariant extends WorkspaceChild {\n+\n+    String DEFAULT_VARIANT_NAME = \"DEFAULT\";\n+\n+    Child<? extends DocumentVersion> draft();\n+\n+    Child<? extends DocumentVersion> released();\n+\n+    @Override\n+    DocumentVariants getParent();\n+\n+    // Since we are not storing historical versions anymore, the only needed ones are draft and released\n+    /*default DocumentVersion getVersion(String name) {", "originalCommit": "d52dbaa590df8756f67e0c8688ca0436bdf5c160", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "637b63917dd82f53460b1760e40319aa42560a79", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java\nindex b49e991..e0e79f0 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java\n\n@@ -33,11 +33,6 @@ public interface DocumentVariant extends WorkspaceChild {\n     @Override\n     DocumentVariants getParent();\n \n-    // Since we are not storing historical versions anymore, the only needed ones are draft and released\n-    /*default DocumentVersion getVersion(String name) {\n-        return getChild(name, DocumentVersion.class);\n-    }*/\n-\n     // TODO Not sure we need this\n     default DocumentVersion getOrCreateVersion(String name) {\n         return child(name, DocumentVersion.class).get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456589052", "bodyText": "these methods seem to be the same as in the parent Document interface. The only thing which changed is the return generic. I wonder if we need to re-declare them completely or just tighten the return type.", "author": "carlosmunoz", "createdAt": "2020-07-17T17:52:31Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,124 +44,70 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::draft)\n                 .getAsOptional();\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n+                                                       @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::released)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released content for a given locale\n-     */\n-    default Optional<FileResource> getReleasedContent(final Locale locale,\n-                                                      @Nonnull final String variantName) {\n+    default Optional<FileResource> getDraftContent(@Nonnull final Locale locale,\n+                                                   @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The draft content for a given locale\n-     */\n-    default Optional<FileResource> getDraftContent(final Locale locale,\n-                                                 @Nonnull final String variantName) {\n+    default Optional<FileResource> getReleasedContent(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n+                .toChild(ModuleVariant::released)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released metadata for a given locale\n-     */\n-    default Optional<Metadata> getReleasedMetadata(final Locale locale,\n-                                                   @Nonnull final String variantName) {\n+    default Optional<ModuleMetadata> getDraftMetadata(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::metadata)\n                 .getAsOptional();\n     }\n \n-  /**\n-    *\n-    * @param locale the locale to fetch the acknowledgment status content\n-    * @param variantName\n-    * @return the  status data for a released version for a given locale\n-    */\n-    default Optional<AckStatus> getAcknowledgementStatus(final Locale locale,\n+    default Optional<ModuleMetadata> getReleasedMetadata(@Nonnull final Locale locale,", "originalCommit": "d52dbaa590df8756f67e0c8688ca0436bdf5c160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2ODUyMw==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457468523", "bodyText": "Ok, I'm going to make a new commit, let me know if the new methods are closer to what you had in mind.", "author": "benradey", "createdAt": "2020-07-20T15:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTkyMg==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457539922", "bodyText": "Yes, they are \ud83d\ude04", "author": "carlosmunoz", "createdAt": "2020-07-20T16:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "637b63917dd82f53460b1760e40319aa42560a79", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java\nindex df558c7..ff2ce88 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java\n\n@@ -50,65 +50,21 @@ public interface Module extends Document {\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.locale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n-                .getAsOptional();\n+        return (Optional<ModuleVersion>) Document.super.getDraftVersion(locale, variantName);\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n                                                        @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.locale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n-                .getAsOptional();\n-    }\n-\n-    default Optional<FileResource> getDraftContent(@Nonnull final Locale locale,\n-                                                   @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.locale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n-                .toChild(ModuleVersion::cachedHtml)\n-                .getAsOptional();\n-    }\n-\n-    default Optional<FileResource> getReleasedContent(@Nonnull final Locale locale,\n-                                                      @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.locale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n-                .toChild(ModuleVersion::cachedHtml)\n-                .getAsOptional();\n+        return (Optional<ModuleVersion>) Document.super.getReleasedVersion(locale, variantName);\n     }\n \n     default Optional<ModuleMetadata> getDraftMetadata(@Nonnull final Locale locale,\n                                                       @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.locale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n-                .toChild(ModuleVersion::metadata)\n-                .getAsOptional();\n+        return (Optional<ModuleMetadata>) Document.super.getDraftMetadata(locale, variantName);\n     }\n \n     default Optional<ModuleMetadata> getReleasedMetadata(@Nonnull final Locale locale,\n                                                          @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.locale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n-                .toChild(ModuleVersion::metadata)\n-                .getAsOptional();\n+        return (Optional<ModuleMetadata>) Document.super.getReleasedMetadata(locale, variantName);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456590170", "bodyText": "interesting... I wonder if we are able to keep this filter in line 90 as before.", "author": "carlosmunoz", "createdAt": "2020-07-17T17:54:37Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "originalCommit": "d52dbaa590df8756f67e0c8688ca0436bdf5c160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjMyNg==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457472326", "bodyText": "Not that I was able to figure out. The original was equivalent to select * from pant:module where... and AFAIK, you can only ever have one table that you select from. You could try to do something fancy with unions but I'm not sure such a thing is possible with Xpath.", "author": "benradey", "createdAt": "2020-07-20T15:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMjE2Nw==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457532167", "bodyText": "I see. We could create a similar structure to our java code where we have [pant:document] and have [pant:assembly] and [pant:module] extend from it. Then we could do the simpler query.\nBut I don't know if it's worth it since we are keeping those JCR types very simple.", "author": "carlosmunoz", "createdAt": "2020-07-20T16:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjM4MQ==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457542381", "bodyText": "(not a blocker)", "author": "carlosmunoz", "createdAt": "2020-07-20T16:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1ODI5Nw==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457558297", "bodyText": "Yeah, that same thought crossed my mind as well. I didn't like the idea of creating pant:document as an explicit node type, because then we are in danger of accidentally creating pant:document nodes in the jcr, and in that scenario, we would definitely be doing something wrong.\nThis query could potentially be improved, but in the spirit of \"don't let perfect be the enemy of good,\" I say we leave this as-is for now and revisit it in the future if it becomes problematic for some reason.", "author": "benradey", "createdAt": "2020-07-20T16:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDAzMg==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456594032", "bodyText": "hmmm... I don't like this. The name should not change to moduleMetadata as assemblies will also have this node.", "author": "carlosmunoz", "createdAt": "2020-07-17T18:01:24Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java", "diffHunk": "@@ -16,22 +16,22 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n @ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-class MetadataExtractorTreeProcessorTest {\n+class ModuleMetadataExtractorTreeProcessorTest {\n \n     private final SlingContext slingContext = new SlingContext();\n \n     @Test\n     void extractMetadata() {\n         // Given\n         slingContext.build()\n-                .resource(\"/content/module1/locales/en_US/1/metadata\")\n+                .resource(\"/content/module1/locales/en_US/1/moduleMetadata\")", "originalCommit": "d52dbaa590df8756f67e0c8688ca0436bdf5c160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3OTgzOQ==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457479839", "bodyText": "Good catch. Your comment made me think of another potential issue.\nLet's say we are creating a new module from soup to nuts purely through the java model api. How does it know that some levels in the structure get named something meaningful - like the jcr node representing the module inheriting the file name - while other levels in the structure get named something static - like 'locale' or 'metadata'? I imagine that those static names need to appear in the java code somewhere - but where? As an annotation? As the name of the class itself? My concern is that it's not obvious, and perhaps renaming the class from \"Metadata.class\" to \"ModuleMetadata.class\" will accidentally rename the jcr nodes as well (Perhaps also true for ModuleLocale, etc...).\nThoughts there?", "author": "benradey", "createdAt": "2020-07-20T15:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjQwOA==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457536408", "bodyText": "To answer your first question re: creating nodes using the java api, the name of the node is dictated by the parent, the child node gets the name either from the variable name, or from the @Named annotation if one is present. This approach is static. The second approach is by creating methods on the interface which refer to the dynamically named nodes. You would then be able to get, create, remove these nodes via the API.\nI don't mind renaming the class tbh, just not the node names themselves because then we are separating the two structures even more and at that point why even bother trying to keep them the same java classes for both.", "author": "carlosmunoz", "createdAt": "2020-07-20T16:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "637b63917dd82f53460b1760e40319aa42560a79", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java\nindex ba4fbce..ae74d4f 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java\n\n@@ -24,14 +24,14 @@ class ModuleMetadataExtractorTreeProcessorTest {\n     void extractMetadata() {\n         // Given\n         slingContext.build()\n-                .resource(\"/content/module1/locales/en_US/1/moduleMetadata\")\n+                .resource(\"/content/module1/locales/en_US/1/metadata\")\n                 .commit();\n-        ModuleMetadata moduleMetadata =\n+        ModuleMetadata metadata =\n                 SlingModels.getModel(\n                         slingContext.resourceResolver().getResource(\n-                                \"/content/module1/locales/en_US/1/moduleMetadata\"),\n+                                \"/content/module1/locales/en_US/1/metadata\"),\n                         ModuleMetadata.class);\n-        MetadataExtractorTreeProcessor extension = new MetadataExtractorTreeProcessor(moduleMetadata);\n+        MetadataExtractorTreeProcessor extension = new MetadataExtractorTreeProcessor(metadata);\n         Asciidoctor asciidoctor = Asciidoctor.Factory.create();\n         asciidoctor.javaExtensionRegistry().treeprocessor(extension);\n         final String adocContent = \"= A title for content\" +\n"}}, {"oid": "637b63917dd82f53460b1760e40319aa42560a79", "url": "https://github.com/redhataccess/pantheon/commit/637b63917dd82f53460b1760e40319aa42560a79", "message": "Code review updates", "committedDate": "2020-07-20T15:14:31Z", "type": "commit"}, {"oid": "7b822d467fcd3057e53396496fede9276d74b27b", "url": "https://github.com/redhataccess/pantheon/commit/7b822d467fcd3057e53396496fede9276d74b27b", "message": "Merge branch 'master' into blackMagicGenerics", "committedDate": "2020-07-20T15:17:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODI4NA==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457538284", "bodyText": "We don't need this method anymore as you can do:\ndoc.variant(\"variantName\").getOrCreate();", "author": "carlosmunoz", "createdAt": "2020-07-20T16:26:32Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.redhat.pantheon.model.document;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.OrderedFolder;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+\n+import javax.inject.Named;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.model.document.DocumentVariant.DEFAULT_VARIANT_NAME;\n+\n+/**\n+ * @author Carlos Munoz\n+ */\n+@JcrPrimaryType(\"sling:OrderedFolder\")\n+public interface DocumentVariants extends OrderedFolder {\n+\n+    // The default variant\n+    @Named(DEFAULT_VARIANT_NAME)\n+    Child<? extends DocumentVariant> defaultVariant();\n+\n+    default Stream<? extends DocumentVariant> getVariants() {\n+        return this.as(DocumentVariant.class);\n+    }\n+\n+    default DocumentVariant getOrCreateVariant(String name) {", "originalCommit": "7b822d467fcd3057e53396496fede9276d74b27b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f1687edd5903c9747556ae2eea48c6dd8e84632", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java\nindex d56a14b..959b406 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java\n\n@@ -24,10 +24,6 @@ public interface DocumentVariants extends OrderedFolder {\n         return this.as(DocumentVariant.class);\n     }\n \n-    default DocumentVariant getOrCreateVariant(String name) {\n-        return child(name, DocumentVariant.class).get();\n-    }\n-\n     default Child<? extends DocumentVariant> variant(String name) {\n         return child(name, DocumentVariant.class);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTU5Nw==", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457539597", "bodyText": "I guess we still need this because of generics, but it's much more succinct than before \ud83d\udc4d", "author": "carlosmunoz", "createdAt": "2020-07-20T16:28:30Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,125 +44,27 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n-                .getAsOptional();\n+        return (Optional<ModuleVersion>) Document.super.getDraftVersion(locale, variantName);\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n-                .getAsOptional();\n+                                                       @Nonnull final String variantName) {\n+        return (Optional<ModuleVersion>) Document.super.getReleasedVersion(locale, variantName);", "originalCommit": "7b822d467fcd3057e53396496fede9276d74b27b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5f1687edd5903c9747556ae2eea48c6dd8e84632", "url": "https://github.com/redhataccess/pantheon/commit/5f1687edd5903c9747556ae2eea48c6dd8e84632", "message": "removing unneeded method", "committedDate": "2020-07-20T17:00:53Z", "type": "commit"}]}