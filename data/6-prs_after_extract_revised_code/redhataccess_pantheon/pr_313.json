{"pr_number": 313, "pr_title": "Ccs 3225 Upload single product assembly", "pr_createdAt": "2020-06-10T15:25:04Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/313", "timeline": [{"oid": "75b33795da3fb666bd808e0366856a4eb28dabd5", "url": "https://github.com/redhataccess/pantheon/commit/75b33795da3fb666bd808e0366856a4eb28dabd5", "message": "initial work for assembly upload", "committedDate": "2020-06-08T22:00:35Z", "type": "commit"}, {"oid": "31692e72b349869cade0fcf675bbcf60154280fc", "url": "https://github.com/redhataccess/pantheon/commit/31692e72b349869cade0fcf675bbcf60154280fc", "message": "initial unit tests for assembly", "committedDate": "2020-06-10T15:20:06Z", "type": "commit"}, {"oid": "3e65d194cee42c2d3fd5a4a8d670268efe20cfca", "url": "https://github.com/redhataccess/pantheon/commit/3e65d194cee42c2d3fd5a4a8d670268efe20cfca", "message": "remove unused code", "committedDate": "2020-06-10T15:36:08Z", "type": "commit"}, {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "url": "https://github.com/redhataccess/pantheon/commit/ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "message": "update sample yaml", "committedDate": "2020-06-10T15:45:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDg5Nw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438304897", "bodyText": "I'm not sure I love this. Perhaps we create a common interface called ContentLocale and have AssemblyLocale and ModuleLocale extend from it and change the JCR primary type.\nIs there a reason why we would need separate node types for this? We could have a single pant:contentLocale.", "author": "carlosmunoz", "createdAt": "2020-06-10T17:49:49Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyLocale.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+\n+/**\n+ * A specific assembly locale node which houses asciidoc source and variants.\n+ * A locale will contain two folders to store the source content (draft and released),\n+ * and the different variants (the rendered content)\n+ */\n+@JcrPrimaryType(\"pant:assemblyLocale\")\n+public interface AssemblyLocale extends ModuleLocale {", "originalCommit": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1OTY4NA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438959684", "bodyText": "So I agree with the first part - I'm not sure that it makes sense for any Assembly classes to extend the Module classes.\nHowever, I'm not sold on the second idea for ContentLocale. I do like the idea of having separate node types, because otherwise we could accidentally \"jump the tracks\" in the code, like this example that I'll make up:\nModule m;\nm.getContentLocale(\"en-US\").getAsmVariant(\"rhel-8\").getReleased().getPage(3);\n\nNotice that we started with a Module object but somehow wound up with a call to getPage which only makes sense in an assembly context - but the code could be syntactically correct and could compile (if not run successfully) because the ContentLocale object would need to have methods for both assemblies and modules if we don't break them out into separate nodes/classes.", "author": "benradey", "createdAt": "2020-06-11T17:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzM1Ng==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438993356", "bodyText": "I was discussing with Lisa the trade-offs of trying to remove some of the code duplication that will eventually come out of this (we happen to have two very similar content structures) and in the end what we realized is that it's probably better to endure the duplication now and revisit the need for it down the line.", "author": "carlosmunoz", "createdAt": "2020-06-11T18:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNTM5Nw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439035397", "bodyText": "Yeah, I would agree with that. Let's keep things separate until the code solidifies and then we can re-evaluate based on where things actually wound up.", "author": "benradey", "createdAt": "2020-06-11T20:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMzA5NA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440433094", "bodyText": "I created a DocumentLocale(Child of Document). I kept ModuleLocale and AssemblyLocale around.", "author": "xdavidson", "createdAt": "2020-06-15T20:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyLocale.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyLocale.java\nindex a4f825c..d4393df 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyLocale.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyLocale.java\n\n@@ -1,9 +1,10 @@\n package com.redhat.pantheon.model.assembly;\n \n-import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.Document.DocumentLocale;\n import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n import com.redhat.pantheon.model.module.ModuleLocale;\n-import com.redhat.pantheon.model.module.SourceContent;\n+\n+import javax.swing.text.Document;\n \n /**\n  * A specific assembly locale node which houses asciidoc source and variants.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438305737", "bodyText": "I would call the operation pant:newAssemblyVersion so that it aligns with the module-centric endpoint", "author": "carlosmunoz", "createdAt": "2020-06-10T17:51:14Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyLocale;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import com.redhat.pantheon.servlet.module.ModuleVersionUpload;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.PostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Locale;\n+\n+@Component(\n+        service = PostOperation.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"", "originalCommit": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MTAzMQ==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438961031", "bodyText": "+1", "author": "benradey", "createdAt": "2020-06-11T17:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwOTE0NA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439009144", "bodyText": "i was trying to make a generic operation that would handle both module and assembly upload. we just ask uploader to pass in a contentType, we can get away with using one upload servlet  .", "author": "xdavidson", "createdAt": "2020-06-11T19:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxMDQ2Mg==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439010462", "bodyText": "I see. Thing is if we are going to duplicate the classes, we might as well duplicate this one also, otherwise it will just lead to a big if-else with the two different paths (which I guess is another route we could take).", "author": "carlosmunoz", "createdAt": "2020-06-11T19:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxNTc2NA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439015764", "bodyText": "I would rather see separate servlets. My gut tells me that as the code evolves, the servlets will look sufficiently different to warrant it. I might be wrong, but we could revisit the decision once the code matures a bit.", "author": "benradey", "createdAt": "2020-06-11T19:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxNjQwOQ==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439016409", "bodyText": "my initial intuition as well", "author": "carlosmunoz", "createdAt": "2020-06-11T19:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMjQyMw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440432423", "bodyText": "renamed.", "author": "xdavidson", "createdAt": "2020-06-15T20:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw=="}], "type": "inlineReview", "revised_code": {"commit": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java\nindex b18d381..76be08c 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java\n\n@@ -29,12 +29,14 @@ import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Locale;\n \n+import static com.redhat.pantheon.jcr.JcrResources.hash;\n+\n @Component(\n         service = PostOperation.class,\n         property = {\n                 Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n                 Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n-                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newAssemblyVersion\"\n         })\n public class DraftVersionUpload extends AbstractPostOperation {\n     private static final Logger log = LoggerFactory.getLogger(ModuleVersionUpload.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNjE4OQ==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438306189", "bodyText": "We need to extract this into a common class as it's used in more than one place now", "author": "carlosmunoz", "createdAt": "2020-06-10T17:52:01Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyLocale;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import com.redhat.pantheon.servlet.module.ModuleVersionUpload;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.PostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Locale;\n+\n+@Component(\n+        service = PostOperation.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"\n+        })\n+public class DraftVersionUpload extends AbstractPostOperation {\n+    private static final Logger log = LoggerFactory.getLogger(ModuleVersionUpload.class);\n+\n+    @Override\n+    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws RepositoryException {\n+\n+        try {\n+            String locale = ServletUtils.paramValue(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE.toString());\n+            String asciidocContent = ServletUtils.paramValue(request, \"asciidoc\");\n+//            String contentType = ServletUtils.paramValue(request, \"type\", \"assembly\");\n+\n+            String encoding = request.getCharacterEncoding();\n+            if (encoding != null) {\n+                asciidocContent = new String(asciidocContent.getBytes(encoding), StandardCharsets.UTF_8);\n+            }\n+\n+            String path = request.getResource().getPath();\n+\n+            log.debug(\"Pushing new version at: \" + path + \" with locale: \" + locale);\n+            log.trace(\"and content: \" + asciidocContent);\n+            int responseCode = HttpServletResponse.SC_OK;\n+\n+            // Try to find the resource\n+            ResourceResolver resolver = request.getResourceResolver();\n+            Resource resource = resolver.getResource(path);\n+            // TODO: need make it more generic so that it can create both module and assemly contentTypes\n+            Assembly assembly;\n+            if (resource == null) {\n+                assembly =\n+                        SlingModels.createModel(\n+                                resolver,\n+                                path,\n+                                Assembly.class);\n+                responseCode = HttpServletResponse.SC_CREATED;\n+            } else {\n+                assembly = resource.adaptTo(Assembly.class);\n+            }\n+\n+            Locale localeObj = LocaleUtils.toLocale(locale);\n+            AssemblyLocale assemblyLocale = assembly.assemblyLocale(localeObj).getOrCreate();\n+            HashableFileResource draftSrc = assemblyLocale\n+                    .source().getOrCreate()\n+                    .draft().getOrCreate();\n+\n+            // Check if the content is the same as what is hashed already\n+            HashCode incomingSrcHash = hash(asciidocContent);\n+            String storedSrcHash = draftSrc.hash().get();\n+            // If the source content is the same, don't update it\n+            if (incomingSrcHash.toString().equals(storedSrcHash)) {\n+                responseCode = HttpServletResponse.SC_NOT_MODIFIED;\n+            } else {\n+                draftSrc.jcrContent().getOrCreate()\n+                        .jcrData().set(asciidocContent);\n+                draftSrc.jcrContent().getOrCreate()\n+                        .mimeType().set(\"text/x-asciidoc\");\n+            }\n+\n+            resolver.commit();\n+\n+            // TODO: trigger an event to generate the html asynchronous\n+            response.setStatus(responseCode, \"\");\n+        } catch (Exception e) {\n+            throw new RepositoryException(\"Error uploading an assembly version\", e);\n+        }\n+    }\n+\n+    /*\n+     * calculates a hash for a string\n+     * TODO This should probably be moved elsewhere\n+     */\n+    private HashCode hash(String str) {", "originalCommit": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NDgyNQ==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438964825", "bodyText": "Not sure what was your scope of \"this\" in your comment, but I would include extracting the bits like getting the parameters, figuring out the encoding, the commit() line, maybe even storing the source on the draft node if we can find a generic way to do that.", "author": "benradey", "createdAt": "2020-06-11T17:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNjE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MDIyNw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438990227", "bodyText": "I meant the generation of a unique hash from any string. There is a n exact copy of this method in the ModuleVersionUpload class", "author": "carlosmunoz", "createdAt": "2020-06-11T18:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNjE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMjMwNw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440432307", "bodyText": "I moved it to JcrResources", "author": "xdavidson", "createdAt": "2020-06-15T20:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNjE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java\nindex b18d381..76be08c 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java\n\n@@ -29,12 +29,14 @@ import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Locale;\n \n+import static com.redhat.pantheon.jcr.JcrResources.hash;\n+\n @Component(\n         service = PostOperation.class,\n         property = {\n                 Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n                 Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n-                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newAssemblyVersion\"\n         })\n public class DraftVersionUpload extends AbstractPostOperation {\n     private static final Logger log = LoggerFactory.getLogger(ModuleVersionUpload.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438954953", "bodyText": "Why does Assembly extend Module? Are we sure that it should? Perhaps it would make more sense for both Assembly and Module to extend a common parent.", "author": "benradey", "createdAt": "2020-06-11T17:35:55Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/Assembly.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.WorkspaceChild;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.module.Module;\n+\n+import javax.inject.Named;\n+import java.util.Locale;\n+\n+@JcrPrimaryType(\"pant:assembly\")\n+public interface Assembly extends Module {", "originalCommit": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTMwMA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438955300", "bodyText": "And for that matter, maybe Resource should extend from the parent as well, depending on what turns out to be shared.", "author": "benradey", "createdAt": "2020-06-11T17:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MzgwMg==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438993802", "bodyText": "+1", "author": "carlosmunoz", "createdAt": "2020-06-11T18:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMjUwMA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439022500", "bodyText": "who is this common parent :-)?", "author": "xdavidson", "createdAt": "2020-06-11T19:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMzU4NA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439033584", "bodyText": "Well, we'd have to create one. :)\nMaybe create a Document class?", "author": "benradey", "createdAt": "2020-06-11T19:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNDA5Nw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439034097", "bodyText": "Or a Content class instead? Certainly open to suggestions here.", "author": "benradey", "createdAt": "2020-06-11T19:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NDc4Ng==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439054786", "bodyText": "Content class is taken. https://github.com/redhataccess/pantheon/blob/master/pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Content.java", "author": "xdavidson", "createdAt": "2020-06-11T20:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2NDgyMw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r439064823", "bodyText": "Then Document seems like a fitting choice, unless anyone else has a 3rd option!", "author": "benradey", "createdAt": "2020-06-11T20:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMTc4OQ==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440431789", "bodyText": "I implemented a generic Document class as a parent for Module and Assembly. I also add a DocumentLocale, which is a Child of Document. Let me know what guys think...", "author": "xdavidson", "createdAt": "2020-06-15T20:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/Assembly.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/Assembly.java\nindex 2db5329..28e942a 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/Assembly.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/Assembly.java\n\n@@ -1,5 +1,6 @@\n package com.redhat.pantheon.model.assembly;\n \n+import com.redhat.pantheon.model.Document.Document;\n import com.redhat.pantheon.model.api.Child;\n import com.redhat.pantheon.model.api.Field;\n import com.redhat.pantheon.model.api.WorkspaceChild;\n"}}, {"oid": "4b908e9edb8a980590a6813e79232b3f067bc388", "url": "https://github.com/redhataccess/pantheon/commit/4b908e9edb8a980590a6813e79232b3f067bc388", "message": "update ackStatus per recent module/variant.json api", "committedDate": "2020-06-11T19:36:42Z", "type": "commit"}, {"oid": "d6908b81fa4afefca93b05d9fd029562a27ca911", "url": "https://github.com/redhataccess/pantheon/commit/d6908b81fa4afefca93b05d9fd029562a27ca911", "message": "python exception when keyword is missing", "committedDate": "2020-06-11T20:27:05Z", "type": "commit"}, {"oid": "8b46ecd6d1ff9b9880e706ac6e666aade0eb6292", "url": "https://github.com/redhataccess/pantheon/commit/8b46ecd6d1ff9b9880e706ac6e666aade0eb6292", "message": "update ackStatus test", "committedDate": "2020-06-11T20:54:15Z", "type": "commit"}, {"oid": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "url": "https://github.com/redhataccess/pantheon/commit/9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "message": "code reivew fixes", "committedDate": "2020-06-15T20:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNjc5OA==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440926798", "bodyText": "Thanks! \ud83d\udc4d", "author": "carlosmunoz", "createdAt": "2020-06-16T15:09:32Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/jcr/JcrResources.java", "diffHunk": "@@ -16,4 +19,12 @@ public static void rename(Resource resource, String newName) throws RepositoryEx\n         Session session = resourceResolver.adaptTo(Session.class);\n         session.move(resource.getPath(), resource.getParent().getPath() + \"/\" + newName);\n     }\n+\n+    /*\n+     * calculates a hash for a string\n+     *\n+     */\n+    public static HashCode hash(String str) {", "originalCommit": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzY0Mw==", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440927643", "bodyText": "I would just get rid of these comments.", "author": "carlosmunoz", "createdAt": "2020-06-16T15:10:40Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/ModuleLocale.java", "diffHunk": "@@ -10,11 +11,11 @@\n  * and the different variants (the rendered content)\n  */\n @JcrPrimaryType(\"pant:moduleLocale\")\n-public interface ModuleLocale extends WorkspaceChild {\n+public interface ModuleLocale extends DocumentLocale {\n \n-    Child<SourceContent> source();\n-\n-    Child<Variants> variants();\n+//    Child<SourceContent> source();\n+//\n+//    Child<Variants> variants();", "originalCommit": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "d189de1e75142cc24b64677d106a0acb331cc32b", "url": "https://github.com/redhataccess/pantheon/commit/d189de1e75142cc24b64677d106a0acb331cc32b", "message": "rename assembly upload servlet", "committedDate": "2020-06-16T19:56:47Z", "type": "commit"}]}