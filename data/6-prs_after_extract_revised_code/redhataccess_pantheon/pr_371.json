{"pr_number": 371, "pr_title": "Basic Xref functionality", "pr_createdAt": "2020-08-13T17:39:22Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/371", "timeline": [{"oid": "7bfcc1097b7a7c79066918a97c18353b9d57c45a", "url": "https://github.com/redhataccess/pantheon/commit/7bfcc1097b7a7c79066918a97c18353b9d57c45a", "message": "Preliminary preprocessor and preliminary uuid-based preview servlet filter", "committedDate": "2020-08-11T18:37:26Z", "type": "commit"}, {"oid": "7d3cfbc894ef3c3e2c2ed074e25b194745977cbc", "url": "https://github.com/redhataccess/pantheon/commit/7d3cfbc894ef3c3e2c2ed074e25b194745977cbc", "message": "Adding a preview filter that delivers uuid-based xref targets, and adding a servlet that previews module variants directly", "committedDate": "2020-08-11T18:37:30Z", "type": "commit"}, {"oid": "91505a0bd5b8be6c2deb97614e81da3a74b4c250", "url": "https://github.com/redhataccess/pantheon/commit/91505a0bd5b8be6c2deb97614e81da3a74b4c250", "message": "basic xrefs work", "committedDate": "2020-08-11T18:38:24Z", "type": "commit"}, {"oid": "679b49a8a0d7bae736f883d05f25f0b58072a404", "url": "https://github.com/redhataccess/pantheon/commit/679b49a8a0d7bae736f883d05f25f0b58072a404", "message": "xrefs between standalone modules work", "committedDate": "2020-08-11T18:38:26Z", "type": "commit"}, {"oid": "41ad6cd29c2a1931a2008225937dc40020dc0cfe", "url": "https://github.com/redhataccess/pantheon/commit/41ad6cd29c2a1931a2008225937dc40020dc0cfe", "message": "Refactoring a bit of logic and removing println's", "committedDate": "2020-08-11T18:38:26Z", "type": "commit"}, {"oid": "943d0c93499425bd83d3c475f78ee30a0709f8a3", "url": "https://github.com/redhataccess/pantheon/commit/943d0c93499425bd83d3c475f78ee30a0709f8a3", "message": "fixing variant preview servlet for assemblies", "committedDate": "2020-08-11T18:38:26Z", "type": "commit"}, {"oid": "f58f005661398c1d7e9c0a8769a725ac8c0486dd", "url": "https://github.com/redhataccess/pantheon/commit/f58f005661398c1d7e9c0a8769a725ac8c0486dd", "message": "xrefs to anchors now mostly work", "committedDate": "2020-08-11T18:38:26Z", "type": "commit"}, {"oid": "e41587d3d32fda24db712a84b18799940508b93c", "url": "https://github.com/redhataccess/pantheon/commit/e41587d3d32fda24db712a84b18799940508b93c", "message": "xrefs pretty much work for assemblies, there might be a haml bug getting in the way but the link targets are correctly rewritten", "committedDate": "2020-08-11T19:37:49Z", "type": "commit"}, {"oid": "44d5e0381d02213b70b7129c564b1e4c4e865e88", "url": "https://github.com/redhataccess/pantheon/commit/44d5e0381d02213b70b7129c564b1e4c4e865e88", "message": "Adding test classes", "committedDate": "2020-08-13T17:32:29Z", "type": "commit"}, {"oid": "a56930d0b77ff447a59b0b5f7c51193698af55ab", "url": "https://github.com/redhataccess/pantheon/commit/a56930d0b77ff447a59b0b5f7c51193698af55ab", "message": "Removing printlns", "committedDate": "2020-08-13T17:33:46Z", "type": "commit"}, {"oid": "30a819108bb026ec02d17e33bab0c8f463a2ef8c", "url": "https://github.com/redhataccess/pantheon/commit/30a819108bb026ec02d17e33bab0c8f463a2ef8c", "message": "Triangle xrefs work", "committedDate": "2020-08-13T18:27:21Z", "type": "commit"}, {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e", "url": "https://github.com/redhataccess/pantheon/commit/72377fedd076442a6a11fdaf88436ef8be9c742e", "message": "Adding empty anchor check necessitated by triangle xrefs", "committedDate": "2020-08-13T18:35:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473279862", "bodyText": "I wonder if we should change pantheon_module_id to something more generic? :pantheon_document_id?", "author": "xdavidson", "createdAt": "2020-08-19T19:50:23Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -79,9 +79,13 @@ public void process(Document document, PreprocessorReader reader, String target,\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n-                content = new StringBuilder(\":pantheon_module_id: \")\n+                content = new StringBuilder()\n+                        .append(\":pantheon_module_id: \")", "originalCommit": "72377fedd076442a6a11fdaf88436ef8be9c742e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDg5NQ==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473280895", "bodyText": "That's probably a solid idea but we'll have to bring @wesruv in to comment on that because it would have downstream impact.", "author": "benradey", "createdAt": "2020-08-19T19:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NjY0Nw==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474066647", "bodyText": "I'm not picky, if it's not specific to modules, I'm for it. Better to get in now than later.", "author": "wesruv", "createdAt": "2020-08-20T15:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTc0MA==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474199740", "bodyText": "Sorry! I don't know what I was thinking when I commented yesterday, but yes this is module-specific. So let's keep it as-is for now.\n(I saw \"for now\" because when we support assembly-of-assembly, that may change... or it may not... but we'll see when we get there.)", "author": "benradey", "createdAt": "2020-08-20T18:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4Mjg0Mg==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473282842", "bodyText": "if would be super if we can add some line wrap here to make it more readable :-)", "author": "xdavidson", "createdAt": "2020-08-19T19:55:59Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.redhat.pantheon.asciidoctor.extension;\n+\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.assembly.TableOfContents;\n+import com.redhat.pantheon.model.document.Document;\n+import com.redhat.pantheon.model.document.DocumentLocale;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.asciidoctor.extension.Preprocessor;\n+import org.asciidoctor.extension.PreprocessorReader;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class XrefPreprocessor extends Preprocessor {\n+\n+    private static final Logger log = LoggerFactory.getLogger(XrefPreprocessor.class);\n+\n+    private static final Pattern XREF_PATTERN = Pattern.compile(\"xref:(?<filepath>\\\\S*?)(?:#(?<anchor>\\\\S*))?\\\\[(?<label>.*?)\\\\]\");\n+    private static final Pattern TRIANGLE_PATTERN = Pattern.compile(\"<<(?<filepath>\\\\S*?)(?:#(?<anchor>\\\\S*))?,(?<label>.*?)>>\");\n+\n+    private DocumentVariant documentVariant;\n+    private TableOfContents toc;\n+    private Set<String> modulePaths = new HashSet<>();\n+\n+    /**\n+     * @param documentVariant\n+     * @param tableOfContents Doesn't necessarily need to be populated when this constructor is called.\n+     */\n+    public XrefPreprocessor(DocumentVariant documentVariant, TableOfContents tableOfContents) {\n+        this.documentVariant = documentVariant;\n+        this.toc = tableOfContents;\n+    }\n+\n+    @Override\n+    public void process(org.asciidoctor.ast.Document adocDocument, @NotNull PreprocessorReader reader) {\n+        reader.restoreLines(preprocess(reader.readLines()));\n+    }\n+\n+    private String processLineWithPattern(String line, Pattern pattern) {\n+        Matcher matcher = pattern.matcher(line);\n+        StringBuffer sb = new StringBuffer();\n+        while (matcher.find()) {\n+            String originalTarget = matcher.group(\"filepath\");\n+            // Assume it's a relative path to a file in the same repo for now\n+            Resource desiredTarget = documentVariant.getResourceResolver().getResource(documentVariant.getParentLocale().getParent().getParent().getPath() + \"/\" + originalTarget);", "originalCommit": "72377fedd076442a6a11fdaf88436ef8be9c742e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNDA0Nw==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474204047", "bodyText": "Okie dokie, I broke up the line a bit with the latest commit.", "author": "benradey", "createdAt": "2020-08-20T18:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4Mjg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b3c865ff6739a11114277a32177822ffb637b0e3", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java\nindex 3f88494..f162673 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java\n\n@@ -10,6 +10,7 @@ import org.apache.sling.api.resource.Resource;\n import org.asciidoctor.extension.Preprocessor;\n import org.asciidoctor.extension.PreprocessorReader;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4ODk1Mg==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473288952", "bodyText": "are those allowed values for RELEASED_SUFFICES?", "author": "xdavidson", "createdAt": "2020-08-19T20:08:03Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+import com.redhat.pantheon.model.document.DocumentVersion;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single document variant.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/moduleVariant\", \"pantheon/assemblyVariant\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+public class DocumentVariantRenderServlet extends SlingSafeMethodsServlet {\n+\n+    private static final Set<String> RELEASED_SUFFIXES = new HashSet<>();\n+    static {\n+        RELEASED_SUFFIXES.add(\"/released\");\n+        RELEASED_SUFFIXES.add(\"/\");\n+        RELEASED_SUFFIXES.add(\"\");\n+        RELEASED_SUFFIXES.add(null);\n+    }", "originalCommit": "72377fedd076442a6a11fdaf88436ef8be9c742e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMDY5Mw==", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474200693", "bodyText": "Yes, the idea here is that the suffix is optional. If you don't specify it, we assume you want the released version. This covers all the cases: [document, document/, document/released]", "author": "benradey", "createdAt": "2020-08-20T18:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4ODk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b3c865ff6739a11114277a32177822ffb637b0e3", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java\nindex 9eea43b..d447eb7 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java\n\n@@ -103,7 +103,7 @@ public class DocumentVariantRenderServlet extends SlingSafeMethodsServlet {\n \n         // only allow forced rerendering if this is a draft version. Released and historical revs are written in stone.\n         boolean draft = latest && variant.hasDraft();\n-        String html = asciidoctorService.getModuleHtml(\n+        String html = asciidoctorService.getDocumentHtml(\n                 variant.getParentLocale().getParent(),\n                 LocaleUtils.toLocale(variant.getParentLocale().getName()),\n                 variant.getName(),\n"}}, {"oid": "b3c865ff6739a11114277a32177822ffb637b0e3", "url": "https://github.com/redhataccess/pantheon/commit/b3c865ff6739a11114277a32177822ffb637b0e3", "message": "Merge with master", "committedDate": "2020-08-20T18:57:44Z", "type": "commit"}, {"oid": "b8efe38561acab98dd4e6f44f7187e72036b8717", "url": "https://github.com/redhataccess/pantheon/commit/b8efe38561acab98dd4e6f44f7187e72036b8717", "message": "Preview UI buttons now use new uuid-based variant preview servlet; still need to fix 'regenerate' UI button", "committedDate": "2020-08-21T19:17:57Z", "type": "commit"}, {"oid": "3b0f6e24c93789eb123b54bd9e9e1b84026a4c84", "url": "https://github.com/redhataccess/pantheon/commit/3b0f6e24c93789eb123b54bd9e9e1b84026a4c84", "message": "Fixing rerender buttons", "committedDate": "2020-08-21T19:40:36Z", "type": "commit"}]}