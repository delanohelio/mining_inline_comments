{"pr_number": 391, "pr_title": "CCS-3775 Update view_uri  to match the ideal URL path", "pr_createdAt": "2020-08-28T09:32:55Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/391", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjIyOQ==", "url": "https://github.com/redhataccess/pantheon/pull/391#discussion_r479456229", "bodyText": "we need use the urlFragment instead of product/version name", "author": "xdavidson", "createdAt": "2020-08-28T17:59:48Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java", "diffHunk": "@@ -162,7 +162,7 @@ protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Non\n \n         // Process view_uri\n         if (System.getenv(PORTAL_URL) != null) {\n-            String view_uri = System.getenv(PORTAL_URL) + \"/guides/\" + ServletUtils.toLanguageTag(locale) + \"/\" + assemblyId;\n+            String view_uri = System.getenv(PORTAL_URL) + \"/documentation/\" + ServletUtils.toLanguageTag(locale) + \"/guide/\" + pv.name().get() + \"/\" + pv.getProduct().name().get() + \"/\" + assembly_uuid;", "originalCommit": "8e78d3ee25813465c90a31b7ef7abdf86d0665de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2927a9a6892c6c12e226a87c2d986f741ccb0be4", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java\ndeleted file mode 100644\nindex 4f5215d..0000000\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java\n+++ /dev/null\n\n@@ -1,185 +0,0 @@\n-package com.redhat.pantheon.servlet.assembly;\n-\n-import com.google.common.base.Charsets;\n-import com.redhat.pantheon.html.Html;\n-import com.redhat.pantheon.model.ProductVersion;\n-import com.redhat.pantheon.model.api.FileResource;\n-import com.redhat.pantheon.model.assembly.Assembly;\n-import com.redhat.pantheon.model.assembly.AssemblyMetadata;\n-import com.redhat.pantheon.model.assembly.AssemblyVersion;\n-import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n-import com.redhat.pantheon.servlet.ServletUtils;\n-import org.apache.sling.api.SlingHttpServletRequest;\n-import org.apache.sling.api.resource.Resource;\n-import org.apache.sling.servlets.annotations.SlingServletPaths;\n-import org.jetbrains.annotations.NotNull;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Component;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.annotation.Nonnull;\n-import javax.jcr.RepositoryException;\n-import javax.servlet.Servlet;\n-import java.util.*;\n-\n-import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n-import static com.redhat.pantheon.model.assembly.AssemblyVariant.DEFAULT_VARIANT_NAME;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n-import static javax.servlet.http.HttpServletResponse.SC_OK;\n-\n-/**\n- * Get operation to render a Released Assembly data in JSON format.\n- * Only two parameters are expected in the Get request:\n- * 1. locale - Optional; indicates the locale that the assembly content is in, defaulted to en-US\n- * 2. assembly_id - indicates the uuid string which uniquely identifies an assembly\n- *\n- * The url to GET a request from the server is /api/assembly\n- * Example: <server_url>/api/assembly?locale=en-us&assembly_id=xyz&variant=abc\n- * The said url is accessible outside of the system without any authentication.\n- *\n- * @author A.P. Rajjshekhar\n- */\n-@Component(\n-        service = Servlet.class,\n-        property = {\n-                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and assembly uuid to output assembly data\",\n-                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n-        })\n-// /api/assembly.json?assembly_id=${assemblyUuid}&locale=${localeId}&variant=${variantName}\";\n-@SlingServletPaths(value = \"/api/assembly\")\n-public class AssemblyJsonServlet extends AbstractJsonSingleQueryServlet {\n-    public static final String PRODUCT_VERSION = \"product_version\";\n-    public static final String PRODUCT_NAME = \"product_name\";\n-    public static final String PRODUCT_LINK = \"product_link\";\n-    public static final String VANITY_URL_FRAGMENT = \"vanity_url_fragment\";\n-    public static final String SEARCH_KEYWORDS = \"search_keywords\";\n-    public static final String VIEW_URI = \"view_uri\";\n-    public static final String PORTAL_URL = \"PORTAL_URL\";\n-\n-    private final Logger log = LoggerFactory.getLogger(AssemblyJsonServlet.class);\n-\n-    @Override\n-    protected String getQuery(SlingHttpServletRequest request) {\n-        // Get the query parameter(s)\n-        String uuidParam = paramValue(request, \"assembly_id\", \"\");\n-\n-        StringBuilder query = new StringBuilder(\"select * from [pant:assembly] as assembly WHERE assembly.[jcr:uuid] = '\")\n-                .append(uuidParam)\n-                .append(\"'\");\n-        return query.toString();\n-    }\n-\n-    @Override\n-    protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Nonnull Resource resource) {\n-        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n-        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n-        Assembly assembly = resource.adaptTo(Assembly.class);\n-        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n-        return releasedRevision.isPresent();\n-    }\n-\n-    //ToDo: Refactor map based to builder pattern based POJO backed response entity\n-    @Override\n-    protected Map<String, Object> resourceToMap(@Nonnull SlingHttpServletRequest request,\n-                                                @NotNull Resource resource) throws RepositoryException {\n-        Assembly assembly = resource.adaptTo(Assembly.class);\n-\n-        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n-        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n-        Optional<AssemblyMetadata> releasedMetadata = assembly.getReleasedMetadata(locale, variantName);\n-        Optional<FileResource> releasedContent = assembly.getReleasedContent(locale, variantName);\n-        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n-\n-        Map<String, Object> assemblyMap = super.resourceToMap(request, resource);\n-        Map<String, Object> assemblyDetails = new HashMap<>();\n-\n-        assemblyDetails.put(\"status\", SC_OK);\n-        assemblyDetails.put(\"message\", \"Assembly Found\");\n-\n-        String resourcePath = resource.getPath();\n-        assemblyMap.put(\"locale\", ServletUtils.toLanguageTag(locale));\n-        assemblyMap.put(\"revision_id\", releasedRevision.get().getName());\n-        assemblyMap.put(\"title\", releasedMetadata.get().title().get());\n-        assemblyMap.put(\"headline\", releasedMetadata.get().getValueMap().containsKey(\"pant:headline\") ? releasedMetadata.get().headline().get() : \"\");\n-        assemblyMap.put(\"description\", releasedMetadata.get().mAbstract().get());\n-        assemblyMap.put(\"content_type\", \"assembly\");\n-        assemblyMap.put(\"date_published\", releasedMetadata.get().getValueMap().containsKey(\"pant:datePublished\") ? releasedMetadata.get().datePublished().get().toInstant().toString() : \"\");\n-        assemblyMap.put(\"status\", \"published\");\n-\n-        // Assume the path is something like: /content/<something>/my/resource/path\n-        assemblyMap.put(\"assembly_url_fragment\", resourcePath.substring(\"/content/repositories/\".length()));\n-\n-        // Striping out the jcr: from key name\n-        String assembly_uuid = (String) assemblyMap.remove(\"jcr:uuid\");\n-        // TODO: This is deprecated, but left for backwards compatibility\n-        assemblyMap.put(\"assembly_uuid\", assembly_uuid);\n-        assemblyMap.put(\"uuid\", assembly_uuid);\n-        // Convert date string to UTC\n-        Date dateModified = new Date(resource.getResourceMetadata().getModificationTime());\n-        assemblyMap.put(\"date_modified\", dateModified.toInstant().toString());\n-        // Return the body content of the assembly ONLY\n-        assemblyMap.put(\"body\",\n-                Html.parse(Charsets.UTF_8.name())\n-                        .andThen(Html.getBody())\n-                        .apply(releasedContent.get().jcrContent().get().jcrData().get()));\n-\n-        // Fields that are part of the spec and yet to be implemented\n-        // TODO Should either of these be the variant name?\n-        assemblyMap.put(\"context_url_fragment\", \"\");\n-        assemblyMap.put(\"context_id\", \"\");\n-\n-        // Process productVersion from metadata\n-        // Making these arrays - in the future, we will have multi-product, so get the API right the first time\n-        List<Map> productList = new ArrayList<>();\n-        assemblyMap.put(\"products\", productList);\n-        ProductVersion pv = releasedMetadata.get().productVersion().getReference();\n-        if (pv != null) {\n-            Map<String, String> productMap = new HashMap<>();\n-            productList.add(productMap);\n-            productMap.put(PRODUCT_VERSION, pv.name().get());\n-            productMap.put(PRODUCT_NAME, pv.getProduct().name().get());\n-            productMap.put(PRODUCT_LINK, \"https://www.redhat.com/productlinkplaceholder\");\n-        }\n-\n-        // Process url_fragment from metadata\n-        String urlFragment = releasedMetadata.get().urlFragment().get() != null ? releasedMetadata.get().urlFragment().get() : \"\";\n-        if (!urlFragment.isEmpty()) {\n-            assemblyMap.put(VANITY_URL_FRAGMENT, urlFragment);\n-        }\n-        else {\n-            assemblyMap.put(VANITY_URL_FRAGMENT, \"\");\n-        }\n-\n-        String searchKeywords = releasedMetadata.get().searchKeywords().get();\n-        if (searchKeywords != null && !searchKeywords.isEmpty()) {\n-            assemblyMap.put(SEARCH_KEYWORDS, searchKeywords.split(\", *\"));\n-        }\n-        else {\n-            assemblyMap.put(SEARCH_KEYWORDS, new String[] {});\n-        }\n-\n-        // Process view_uri\n-        if (System.getenv(PORTAL_URL) != null) {\n-            String view_uri = System.getenv(PORTAL_URL) + \"/documentation/\" + ServletUtils.toLanguageTag(locale) + \"/guide/\" + pv.name().get() + \"/\" + pv.getProduct().name().get() + \"/\" + assembly_uuid;\n-            assemblyMap.put(VIEW_URI, view_uri);\n-        }\n-        else {\n-            assemblyMap.put(VIEW_URI, \"\");\n-        }\n-\n-        // remove unnecessary fields from the map\n-        assemblyMap.remove(\"jcr:lastModified\");\n-        assemblyMap.remove(\"jcr:lastModifiedBy\");\n-        assemblyMap.remove(\"jcr:createdBy\");\n-        assemblyMap.remove(\"jcr:created\");\n-        assemblyMap.remove(\"sling:resourceType\");\n-        assemblyMap.remove(\"jcr:primaryType\");\n-\n-        // Adding assemblyMap to a parent assemblyDetails map\n-        assemblyDetails.put(\"assembly\", assemblyMap);\n-\n-        return assemblyDetails;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjM1OQ==", "url": "https://github.com/redhataccess/pantheon/pull/391#discussion_r479456359", "bodyText": "we need use the urlFragment instead of product/version name", "author": "xdavidson", "createdAt": "2020-08-28T18:00:03Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleJsonServlet.java", "diffHunk": "@@ -168,7 +168,7 @@ protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Non\n \n         // Process view_uri\n         if (System.getenv(PORTAL_URL) != null) {\n-            String view_uri = System.getenv(PORTAL_URL) + \"/topics/\" + ServletUtils.toLanguageTag(locale) + \"/\" + module_uuid;\n+            String view_uri = System.getenv(PORTAL_URL) + \"/documentation/\" + ServletUtils.toLanguageTag(locale) + \"/topic/\" + pv.name().get() + \"/\" + pv.getProduct().name().get() + \"/\" + module_uuid;", "originalCommit": "8e78d3ee25813465c90a31b7ef7abdf86d0665de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2927a9a6892c6c12e226a87c2d986f741ccb0be4", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleJsonServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleJsonServlet.java\ndeleted file mode 100644\nindex 6691cc8..0000000\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleJsonServlet.java\n+++ /dev/null\n\n@@ -1,191 +0,0 @@\n-package com.redhat.pantheon.servlet.module;\n-\n-import com.google.common.base.Charsets;\n-import com.redhat.pantheon.html.Html;\n-import com.redhat.pantheon.model.ProductVersion;\n-import com.redhat.pantheon.model.api.FileResource;\n-import com.redhat.pantheon.model.module.ModuleMetadata;\n-import com.redhat.pantheon.model.module.Module;\n-import com.redhat.pantheon.model.module.ModuleVersion;\n-import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n-import com.redhat.pantheon.servlet.ServletUtils;\n-import org.apache.sling.api.SlingHttpServletRequest;\n-import org.apache.sling.api.resource.Resource;\n-import org.apache.sling.servlets.annotations.SlingServletPaths;\n-import org.jetbrains.annotations.NotNull;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Component;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.annotation.Nonnull;\n-import javax.jcr.RepositoryException;\n-import javax.servlet.Servlet;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import static com.redhat.pantheon.conf.GlobalConfig.*;\n-import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n-import static javax.servlet.http.HttpServletResponse.SC_OK;\n-\n-/**\n- * Get operation to render a Released Module data in JSON format.\n- * Only two parameters are expected in the Get request:\n- * 1. locale - Optional; indicates the locale that the module content is in, defaulted to en-US\n- * 2. module_id - indicates the uuid string which uniquely identifies a module\n- *\n- * The url to GET a request from the server is /api/module\n- * Example: <server_url>/api/module?locale=en-us&module_id=xyz&variant=abc\n- * The said url is accessible outside of the system without any authentication.\n- *\n- * @author Ankit Gadgil\n- */\n-@Component(\n-        service = Servlet.class,\n-        property = {\n-                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module data\",\n-                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n-        })\n-// /api/module.json?module_id=${moduleUuid}&locale=${localeId}&variant=${variantName}\";\n-@SlingServletPaths(value = \"/api/module\")\n-public class ModuleJsonServlet extends AbstractJsonSingleQueryServlet {\n-    public static final String PRODUCT_VERSION = \"product_version\";\n-    public static final String PRODUCT_NAME = \"product_name\";\n-    public static final String PRODUCT_LINK = \"product_link\";\n-    public static final String VANITY_URL_FRAGMENT = \"vanity_url_fragment\";\n-    public static final String SEARCH_KEYWORDS = \"search_keywords\";\n-    public static final String VIEW_URI = \"view_uri\";\n-    public static final String PORTAL_URL = \"PORTAL_URL\";\n-\n-    private final Logger log = LoggerFactory.getLogger(ModuleJsonServlet.class);\n-\n-    @Override\n-    protected String getQuery(SlingHttpServletRequest request) {\n-        // Get the query parameter(s)\n-        String uuidParam = paramValue(request, \"module_id\", \"\");\n-\n-        StringBuilder query = new StringBuilder(\"select * from [pant:module] as module WHERE module.[jcr:uuid] = '\")\n-                .append(uuidParam)\n-                .append(\"'\");\n-        return query.toString();\n-    }\n-\n-    @Override\n-    protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Nonnull Resource resource) {\n-        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n-        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n-        Module module = resource.adaptTo(Module.class);\n-        Optional<ModuleVersion> releasedRevision = module.getReleasedVersion(locale, variantName);\n-        return releasedRevision.isPresent();\n-    }\n-\n-    @Override\n-    protected Map<String, Object> resourceToMap(@Nonnull SlingHttpServletRequest request,\n-                                                @NotNull Resource resource) throws RepositoryException {\n-        Module module = resource.adaptTo(Module.class);\n-\n-        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n-        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n-        Optional<ModuleMetadata> releasedMetadata = module.getReleasedMetadata(locale, variantName);\n-        Optional<FileResource> releasedContent = module.getReleasedContent(locale, variantName);\n-        Optional<ModuleVersion> releasedRevision = module.getReleasedVersion(locale, variantName);\n-\n-        Map<String, Object> moduleMap = super.resourceToMap(request, resource);\n-        Map<String, Object> moduleDetails = new HashMap<>();\n-\n-        moduleDetails.put(\"status\", SC_OK);\n-        moduleDetails.put(\"message\", \"Module Found\");\n-\n-        String resourcePath = resource.getPath();\n-        moduleMap.put(\"locale\", ServletUtils.toLanguageTag(locale));\n-        moduleMap.put(\"revision_id\", releasedRevision.get().getName());\n-        moduleMap.put(\"title\", releasedMetadata.get().title().get());\n-        moduleMap.put(\"headline\", releasedMetadata.get().getValueMap().containsKey(\"pant:headline\") ? releasedMetadata.get().headline().get() : \"\");\n-        releasedMetadata.get().mAbstract().ifPresent(s -> moduleMap.put(\"description\", s));\n-        moduleMap.put(\"content_type\", CONTENT_TYPE);\n-        moduleMap.put(\"date_published\", releasedMetadata.get().getValueMap().containsKey(\"pant:datePublished\") ? releasedMetadata.get().datePublished().get().toInstant().toString() : \"\");\n-        moduleMap.put(\"status\", \"published\");\n-\n-        // Assume the path is something like: /content/<something>/my/resource/path\n-        moduleMap.put(\"module_url_fragment\", resourcePath.substring(\"/content/repositories/\".length()));\n-\n-        // Striping out the jcr: from key name\n-        String module_uuid = (String) moduleMap.remove(\"jcr:uuid\");\n-        // TODO: This is deprecated, but left for backwards compatibility\n-        moduleMap.put(\"module_uuid\", module_uuid);\n-        moduleMap.put(\"uuid\", module_uuid);\n-        // Convert date string to UTC\n-        Date dateModified = new Date(resource.getResourceMetadata().getModificationTime());\n-        moduleMap.put(\"date_modified\", dateModified.toInstant().toString());\n-        // Return the body content of the module ONLY\n-        moduleMap.put(\"body\",\n-                Html.parse(Charsets.UTF_8.name())\n-                        .andThen(Html.getBody())\n-                        .apply(releasedContent.get().jcrContent().get().jcrData().get()));\n-\n-        // Fields that are part of the spec and yet to be implemented\n-        // TODO Should either of these be the variant name?\n-        moduleMap.put(\"context_url_fragment\", \"\");\n-        moduleMap.put(\"context_id\", \"\");\n-\n-        // Process productVersion from metadata\n-        // Making these arrays - in the future, we will have multi-product, so get the API right the first time\n-        List<Map> productList = new ArrayList<>();\n-        moduleMap.put(\"products\", productList);\n-        ProductVersion pv = releasedMetadata.get().productVersion().getReference();\n-        if (pv != null) {\n-            Map<String, String> productMap = new HashMap<>();\n-            productList.add(productMap);\n-            productMap.put(PRODUCT_VERSION, pv.name().get());\n-            productMap.put(PRODUCT_NAME, pv.getProduct().name().get());\n-            productMap.put(PRODUCT_LINK, \"https://www.redhat.com/productlinkplaceholder\");\n-        }\n-\n-        // Process url_fragment from metadata\n-        String urlFragment = releasedMetadata.get().urlFragment().get() != null ? releasedMetadata.get().urlFragment().get() : \"\";\n-        if (!urlFragment.isEmpty()) {\n-            moduleMap.put(VANITY_URL_FRAGMENT, urlFragment);\n-        }\n-        else {\n-            moduleMap.put(VANITY_URL_FRAGMENT, \"\");\n-        }\n-\n-        String searchKeywords = releasedMetadata.get().searchKeywords().get();\n-        if (searchKeywords != null && !searchKeywords.isEmpty()) {\n-            moduleMap.put(SEARCH_KEYWORDS, searchKeywords.split(\", *\"));\n-        }\n-        else {\n-            moduleMap.put(SEARCH_KEYWORDS, new String[] {});\n-        }\n-\n-        // Process view_uri\n-        if (System.getenv(PORTAL_URL) != null) {\n-            String view_uri = System.getenv(PORTAL_URL) + \"/documentation/\" + ServletUtils.toLanguageTag(locale) + \"/topic/\" + pv.name().get() + \"/\" + pv.getProduct().name().get() + \"/\" + module_uuid;\n-            moduleMap.put(VIEW_URI, view_uri);\n-        }\n-        else {\n-            moduleMap.put(VIEW_URI, \"\");\n-        }\n-\n-        // remove unnecessary fields from the map\n-        moduleMap.remove(\"jcr:lastModified\");\n-        moduleMap.remove(\"jcr:lastModifiedBy\");\n-        moduleMap.remove(\"jcr:createdBy\");\n-        moduleMap.remove(\"jcr:created\");\n-        moduleMap.remove(\"sling:resourceType\");\n-        moduleMap.remove(\"jcr:primaryType\");\n-\n-        // Adding moduleMap to a parent moduleDetails map\n-        moduleDetails.put(\"module\", moduleMap);\n-\n-        return moduleDetails;\n-    }\n-}\n"}}, {"oid": "2927a9a6892c6c12e226a87c2d986f741ccb0be4", "url": "https://github.com/redhataccess/pantheon/commit/2927a9a6892c6c12e226a87c2d986f741ccb0be4", "message": "CCS-3775 Update view_uri to match the ideal URL path", "committedDate": "2020-09-02T14:07:39Z", "type": "commit"}, {"oid": "2927a9a6892c6c12e226a87c2d986f741ccb0be4", "url": "https://github.com/redhataccess/pantheon/commit/2927a9a6892c6c12e226a87c2d986f741ccb0be4", "message": "CCS-3775 Update view_uri to match the ideal URL path", "committedDate": "2020-09-02T14:07:39Z", "type": "forcePushed"}]}