{"pr_number": 312, "pr_title": "Module uploads will now build canonical variant", "pr_createdAt": "2020-06-09T22:37:11Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/312", "timeline": [{"oid": "1f77d49f4ef551b4833a2b279a12d72c7a2f1f22", "url": "https://github.com/redhataccess/pantheon/commit/1f77d49f4ef551b4833a2b279a12d72c7a2f1f22", "message": "upload builds canonical variant", "committedDate": "2020-06-09T22:34:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2MjM2MQ==", "url": "https://github.com/redhataccess/pantheon/pull/312#discussion_r437762361", "bodyText": "lets break this up into multiple lines, both for readability and in case we are hit by NPEs", "author": "carlosmunoz", "createdAt": "2020-06-09T22:43:05Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java", "diffHunk": "@@ -103,13 +121,19 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n                 draftSrc.jcrContent().getOrCreate()\n                         .mimeType().set(\"text/x-asciidoc\");\n \n-                // TODO Html can no longer be generated on upload since there might be too many variants\n-                // TODO This will need to be re-thought since metadata now lies on the variant\n+                resolver.commit();\n+\n+                Map<String, Object> context = asciidoctorService.buildContextFromRequest(request);\n+                asciidoctorService.getModuleHtml(module, localeObj, module.getWorkspace().getCanonicalVariantName(),\n+                        true, context, true);\n+\n+                Metadata metadata = moduleLocale.variants().getOrCreate().variant(moduleLocale.getWorkspace().getCanonicalVariantName()).getOrCreate().draft().getOrCreate().metadata().getOrCreate();", "originalCommit": "1f77d49f4ef551b4833a2b279a12d72c7a2f1f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fa204982c2d0694b618e2a0b17c65f93b06ed5a", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java\nindex 33a603f..cefe329 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java\n\n@@ -127,7 +127,13 @@ public class ModuleVersionUpload extends AbstractPostOperation {\n                 asciidoctorService.getModuleHtml(module, localeObj, module.getWorkspace().getCanonicalVariantName(),\n                         true, context, true);\n \n-                Metadata metadata = moduleLocale.variants().getOrCreate().variant(moduleLocale.getWorkspace().getCanonicalVariantName()).getOrCreate().draft().getOrCreate().metadata().getOrCreate();\n+                Metadata metadata = moduleLocale\n+                        .variants().getOrCreate()\n+                        .variant(\n+                                moduleLocale.getWorkspace().getCanonicalVariantName())\n+                        .getOrCreate()\n+                        .draft().getOrCreate()\n+                        .metadata().getOrCreate();\n                 metadata.dateModified().set(Calendar.getInstance());\n                 // Generate a module type based on the file name ONLY after asciidoc generation, so that the\n                 // attribute-based logic takes precedence\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2Mjk3NQ==", "url": "https://github.com/redhataccess/pantheon/pull/312#discussion_r437762975", "bodyText": "a comment for all these tests:\nwe should at least add verify calls to ensure the appropriate methods are being called in the asciidoctorService and serviceResourceResolvedProvider objects", "author": "carlosmunoz", "createdAt": "2020-06-09T22:45:03Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java", "diffHunk": "@@ -49,7 +74,7 @@ void createFirstVersion() throws Exception {\n         // Then\n         assertEquals(HttpServletResponse.SC_CREATED, response.getStatusCode());\n         assertNotNull(slingContext.resourceResolver().getResource(\"/content/repositories/test_workspace/entities/new/proc_module/es_ES/source/draft/jcr:content\"));\n-        assertNull(slingContext.resourceResolver().getResource(\"/content/repositories/test_workspace/entities/new/proc_module/es_ES/variants\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/content/repositories/test_workspace/entities/new/proc_module/es_ES/variants\"));", "originalCommit": "1f77d49f4ef551b4833a2b279a12d72c7a2f1f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4fa204982c2d0694b618e2a0b17c65f93b06ed5a", "url": "https://github.com/redhataccess/pantheon/commit/4fa204982c2d0694b618e2a0b17c65f93b06ed5a", "message": "Updates based on pr feedback", "committedDate": "2020-06-11T19:36:31Z", "type": "commit"}, {"oid": "f4839a15caad0eeb4a5f56214b7a45e0b2b925ed", "url": "https://github.com/redhataccess/pantheon/commit/f4839a15caad0eeb4a5f56214b7a45e0b2b925ed", "message": "Removing unused reference to serviceResourceResolvedProvider", "committedDate": "2020-06-11T19:41:13Z", "type": "commit"}]}