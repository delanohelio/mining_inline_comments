{"pr_number": 427, "pr_title": "Ccs 3768", "pr_createdAt": "2020-09-25T15:07:06Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/427", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzc5Nw==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r496583797", "bodyText": "This test can be used for utf-8 testing.", "author": "aprajshekhar", "createdAt": "2020-09-29T09:44:04Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java", "diffHunk": "@@ -87,57 +87,6 @@ void createFirstVersion() throws Exception {\n         );\n         verify(asciidoctorService).getDocumentHtml(any(Module.class), any(Locale.class), anyString(), eq(true), anyMap(), eq(true));\n     }\n-\n-    @Test", "originalCommit": "0f362a7ca25ec037710eb45bfb539da50a47f5a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4NjU1Nw==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r497586557", "bodyText": "I see we have a test case for CJK characters using simplified chinese locale, I also see a test case for es_ES locale. If we want to use UTF-8 encoding for all uploads, I don't see a need for testing  a string as ascii content like \"\u00e5\\u008D\\u0097\u00e4\u00ba\u00ac\u00e9\\u0098\u00b2\u00e7\\u0096\u00ab\u00e7\\u008E\u00b0\u00e5\\u009C\u00ba\".   As that's not how the writers create their content.\nIf we want to be thorough, we could add a test case for accented characters like\n\"\u00c0 \u00c8 \u00cd \u00d3 \u00dc \u0178\"", "author": "xdavidson", "createdAt": "2020-09-30T15:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0NjY3NQ==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498246675", "bodyText": "@xdavidson - although I agree with you when you say \"authors don't write their content as \u00e5\\u008D\\u0097\u00e4\u00ba\u00ac\u00e9\\u0098\u00b2\u00e7\\u0096\u00ab\u00e7\\u008E\u00b0\u00e5\\u009C\u00ba\" - I do think that it is appropriate to test using that format. The reason is that from the author's perspective, they will write \"\u5357\u4eac\u9632\u75ab\u73b0\u573a\" in their document, BUT as we have seen in the past, it's quite possible that those characters will be sent using the wrong encoding and the string will get mangled. We need to be sure that sling will unmangle the content correctly, which is the rationale for structuring the test the way it was.\nI think that by rewriting the test the way that it is proposed in this PR, we are weakening our assurance that the system handles such scenarios correctly.", "author": "benradey", "createdAt": "2020-10-01T13:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1OTg5Ng==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498359896", "bodyText": "@benradey thanks for pointing it out, there were no negative test cases, for this use case, I will push changes with that as well.", "author": "rednitish", "createdAt": "2020-10-01T16:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2895f368e1add2df66e93cba38c7ab0378a35b0c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java\nindex ee1d4ec..4466de1 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java\n\n@@ -87,7 +87,106 @@ class ModuleVersionUploadTest {\n         );\n         verify(asciidoctorService).getDocumentHtml(any(Module.class), any(Locale.class), anyString(), eq(true), anyMap(), eq(true));\n     }\n-    \n+\n+    @Test\n+    void createFirstVersionUnicodeIso() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/content/repositories/test_workspace\",\n+                        \"jcr:primaryType\", \"pant:workspace\")\n+                .commit();\n+\n+        lenient().when(\n+                asciidoctorService.getDocumentHtml(\n+                        any(Module.class), any(Locale.class), anyString(), anyBoolean(), anyMap(), anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+        registerMockAdapter(Workspace.class, slingContext);\n+\n+        ModuleVersionUpload upload = new ModuleVersionUpload(asciidoctorService);\n+        Map<String, Object> params = newHashMap();\n+        params.put(\"locale\", Locale.SIMPLIFIED_CHINESE.toString());\n+        params.put(\"asciidoc\", \"\u00e5\\u008D\\u0097\u00e4\u00ba\u00ac\u00e9\\u0098\u00b2\u00e7\\u0096\u00ab\u00e7\\u008E\u00b0\u00e5\\u009C\u00ba\");\n+        params.put(\"Content-Type\", StandardCharsets.ISO_8859_1.toString());\n+        slingContext.request().setParameterMap(params);\n+        slingContext.request().setResource(new NonExistingResource(slingContext.resourceResolver(), \"/content/repositories/test_workspace/entities/new/proc_module\"));\n+        HtmlResponse response = new HtmlResponse();\n+\n+        // when\n+        upload.doRun(slingContext.request(), response, null);\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_CREATED, response.getStatusCode());\n+\n+        Module module =\n+                SlingModels.getModel(\n+                        slingContext.resourceResolver().getResource(\"/content/repositories/test_workspace/entities/new/proc_module\"),\n+                        Module.class);\n+        assertEquals(\"\u5357\u4eac\u9632\u75ab\u73b0\u573a\",\n+                module\n+                        .locale(Locale.SIMPLIFIED_CHINESE).get()\n+                        .source().get()\n+                        .draft().get()\n+                        .jcrContent().get()\n+                        .jcrData().get()\n+        );\n+        assertNotNull(\n+                module.locale(Locale.SIMPLIFIED_CHINESE).get()\n+                        .source().get()\n+                        .draft().get()\n+                        .hash().get()\n+        );\n+        verify(asciidoctorService).getDocumentHtml(any(Module.class), any(Locale.class), anyString(), eq(true), anyMap(), eq(true));\n+    }\n+\n+    @Test\n+    void createFirstVersionAccentedCharacter() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/content/repositories/test_workspace\",\n+                        \"jcr:primaryType\", \"pant:workspace\")\n+                .commit();\n+\n+        lenient().when(\n+                asciidoctorService.getDocumentHtml(\n+                        any(Module.class), any(Locale.class), anyString(), anyBoolean(), anyMap(), anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+        registerMockAdapter(Workspace.class, slingContext);\n+\n+        ModuleVersionUpload upload = new ModuleVersionUpload(asciidoctorService);\n+        Map<String, Object> params = newHashMap();\n+        params.put(\"locale\", Locale.SIMPLIFIED_CHINESE.toString());\n+        params.put(\"asciidoc\", \"d'agua per toles partes, por exemplu: Sicilia y Cuba; al otrud\u00eda  decat\u00e1ronse  d'\u00fa  ven\u00eden  les  voces:  de  dientro  la  casa;  nun  foi  aaguantar aquel perru: vendi\u00f3lu.\");\n+        slingContext.request().setParameterMap(params);\n+        slingContext.request().setResource(new NonExistingResource(slingContext.resourceResolver(), \"/content/repositories/test_workspace/entities/new/proc_module\"));\n+        HtmlResponse response = new HtmlResponse();\n+\n+        // when\n+        upload.doRun(slingContext.request(), response, null);\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_CREATED, response.getStatusCode());\n+\n+        Module module =\n+                SlingModels.getModel(\n+                        slingContext.resourceResolver().getResource(\"/content/repositories/test_workspace/entities/new/proc_module\"),\n+                        Module.class);\n+        assertEquals(\"d'agua per toles partes, por exemplu: Sicilia y Cuba; al otrud\u00eda  decat\u00e1ronse  d'\u00fa  ven\u00eden  les  voces:  de  dientro  la  casa;  nun  foi  aaguantar aquel perru: vendi\u00f3lu.\",\n+                module\n+                        .locale(Locale.SIMPLIFIED_CHINESE).get()\n+                        .source().get()\n+                        .draft().get()\n+                        .jcrContent().get()\n+                        .jcrData().get()\n+        );\n+        assertNotNull(\n+                module.locale(Locale.SIMPLIFIED_CHINESE).get()\n+                        .source().get()\n+                        .draft().get()\n+                        .hash().get()\n+        );\n+        verify(asciidoctorService).getDocumentHtml(any(Module.class), any(Locale.class), anyString(), eq(true), anyMap(), eq(true));\n+    }\n+\n     @Test\n     void createFirstVersionUnicodeUtf() throws Exception {\n         // Given\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDM0Mw==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498240343", "bodyText": "@rednitish I'm worried that we're breaking support for non-UTF-8 encodings by doing this. Can you share your thought process behind this change?", "author": "benradey", "createdAt": "2020-10-01T13:23:34Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyVersionUpload.java", "diffHunk": "@@ -62,10 +62,7 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             String locale = ServletUtils.paramValue(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE.toString());\n //            String contentType = ServletUtils.paramValue(request, \"type\", \"assembly\");\n \n-            String encoding = request.getCharacterEncoding();\n-            if (encoding == null) {\n-                encoding = StandardCharsets.UTF_8.name();\n-            }\n+            String encoding = StandardCharsets.UTF_8.name();", "originalCommit": "8bebb1c41b93a7383bcf57a35a55c7fd775d29db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDU1OQ==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498364559", "bodyText": "@benradey if you check encoding, after running uploader script, you will find, it's always ISO_8859_1, There is no use of this conditional block with current code, as it will never execute.\nsecondly, if you check com.redhat.pantheon.servlet.ServletUtils#handleParamAsStream(org.apache.sling.api.SlingHttpServletRequest, java.lang.String, java.util.function.Function<java.io.InputStream,R>) , line no 184, you can see, we are parsing content in UTF_8 while storing it in nodes.\nAccordingly, i understand, we can go ahead by removing this block, to fix the encoding issue.", "author": "rednitish", "createdAt": "2020-10-01T16:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDM0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5MTgwNg==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498491806", "bodyText": "I think you have struck at the heart of the bug with the lines you reference, but I think that the mechanisms at play are working a bit differently than you describe.\nTake a look at how the code used to look in this class:\nhttps://github.com/redhataccess/pantheon/blame/e672d87df1f7f221367aa06fa45daca1f23289ca/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyVersionUpload.java\nThe relevant line is 53 - it's very clear: \"decode the string of bytes that I got from the request using the specified encoding, and give me a string re-encoded in UTF-8 because that's what I want to work with.\"\nAs you point out, the specified encoding was always ISO_8859_1 (but still, the 'if' block left the door open for other possible encodings). This code worked, but it was inefficient.\nWhat you're proposing is to assume that the string of bytes coming from the request is encoded in UTF-8 from the start, which I believe is just not true. It \"appears\" to work but ignoring the specified encoding is unsafe. We really need to rely on the encoding that the request specifies being accurate.\nBut, you point at line 184 in ServletUtils as treating the input as UTF-8 by default. Honestly I can't really tell what's going on in the code. Method A provide Function B to Method C, which provides an InputStreamReader to Function B and executes it by wrapping a stream with a reader with a stream, but then Function B takes that stream and wraps it in another reader wrapped by another stream before finally wrapping it with another reader, and then finally applying that to the function that the developer specified, and the net result is...? Your guess is as good as mine. But you rightly point out that somewhere along the way, UTF-8 is brought in as a hardcoded default. I think THAT's what's mucking with our encoding and THAT's what needs to change.\n@carlosmunoz since you wrote the code in question, can you help untangle what's actually going on in the ServletUtils class and whether this is likely where our encoding bug actually lies?\nAlso tagging @xdavidson and @aprajshekhar in case they can help sort this out.", "author": "benradey", "createdAt": "2020-10-01T20:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDM0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NjUyMQ==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498496521", "bodyText": "So, there are 2 methods in that ServletUtil class: one takes a charset parameter, the other one doesn't (uses UTF-8 by default). This is the character set to use when reading the stream.\nDoes that make sense?", "author": "carlosmunoz", "createdAt": "2020-10-01T20:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDM0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODYxNg==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498928616", "bodyText": "@rednitish Please remove the encoding variable completely and all subsequent references to it.", "author": "benradey", "createdAt": "2020-10-02T16:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2895f368e1add2df66e93cba38c7ab0378a35b0c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyVersionUpload.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyVersionUpload.java\nindex 769553d..8fe1735 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyVersionUpload.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyVersionUpload.java\n\n@@ -62,7 +62,10 @@ public class AssemblyVersionUpload extends AbstractPostOperation {\n             String locale = ServletUtils.paramValue(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE.toString());\n //            String contentType = ServletUtils.paramValue(request, \"type\", \"assembly\");\n \n-            String encoding = StandardCharsets.UTF_8.name();\n+            String encoding = request.getCharacterEncoding();\n+            if (encoding == null) {\n+                encoding = StandardCharsets.UTF_8.name();\n+            }\n \n             String path = request.getResource().getPath();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDUyMQ==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498240521", "bodyText": "(same comment as above)", "author": "benradey", "createdAt": "2020-10-01T13:23:49Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java", "diffHunk": "@@ -73,10 +73,7 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n \n         try {\n             String locale = ServletUtils.paramValue(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE.toString());\n-            String encoding = request.getCharacterEncoding();\n-            if (encoding == null) {\n-                encoding = StandardCharsets.UTF_8.name();\n-            }\n+            String encoding = StandardCharsets.UTF_8.name();", "originalCommit": "8bebb1c41b93a7383bcf57a35a55c7fd775d29db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDY0Mw==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498364643", "bodyText": "@benradey if you check encoding, after running uploader script, you will find, it's always ISO_8859_1, There is no use of this conditional block with current code, as it will never execute.\nsecondly, if you check com.redhat.pantheon.servlet.ServletUtils#handleParamAsStream(org.apache.sling.api.SlingHttpServletRequest, java.lang.String, java.util.function.Function<java.io.InputStream,R>) , line no 184, you can see, we are parsing content in UTF_8 while storing it in nodes.\nAccordingly, i understand, we can go ahead by removing this block, to fix the encoding issue.", "author": "rednitish", "createdAt": "2020-10-01T16:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODkxNQ==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498928915", "bodyText": "@rednitish Same, please remove this variable and all subsequent references.", "author": "benradey", "createdAt": "2020-10-02T16:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MDUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2895f368e1add2df66e93cba38c7ab0378a35b0c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java\nindex 3bafc4e..bcac9ff 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java\n\n@@ -73,8 +73,7 @@ public class ModuleVersionUpload extends AbstractPostOperation {\n \n         try {\n             String locale = ServletUtils.paramValue(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE.toString());\n-            String encoding = StandardCharsets.UTF_8.name();\n-\n+            String encoding = ServletUtils.paramValue(request, \"Content-Type\", StandardCharsets.UTF_8.name());\n             String path = request.getResource().getPath();\n \n             log.debug(\"Pushing new module version at: \" + path + \" with locale: \" + locale);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MzIzMA==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498243230", "bodyText": "Echoing my previous concern - it's nice that we have a test to confirm that UTF-8 works, but we should also have tests to make sure that other encodings work as well. It seems like with these changes, we're forcing all uploads to use UTF-8 and I don't think that's the correct design decision for the system.", "author": "benradey", "createdAt": "2020-10-01T13:27:29Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java", "diffHunk": "@@ -105,10 +105,10 @@ void createFirstVersionUnicodeIso() throws Exception {\n         ModuleVersionUpload upload = new ModuleVersionUpload(asciidoctorService);\n         Map<String, Object> params = newHashMap();\n         params.put(\"locale\", Locale.SIMPLIFIED_CHINESE.toString());\n-        params.put(\"asciidoc\", \"\u00e5\\u008D\\u0097\u00e4\u00ba\u00ac\u00e9\\u0098\u00b2\u00e7\\u0096\u00ab\u00e7\\u008E\u00b0\u00e5\\u009C\u00ba\");\n+        params.put(\"asciidoc\", \"d'agua per toles partes, por exemplu: Sicilia y Cuba; al otrud\u00eda  decat\u00e1ronse  d'\u00fa  ven\u00eden  les  voces:  de  dientro  la  casa;  nun  foi  aaguantar aquel perru: vendi\u00f3lu.\");\n         slingContext.request().setParameterMap(params);\n         slingContext.request().setResource(new NonExistingResource(slingContext.resourceResolver(), \"/content/repositories/test_workspace/entities/new/proc_module\"));\n-        slingContext.request().setCharacterEncoding(StandardCharsets.ISO_8859_1.toString());\n+        slingContext.request().setCharacterEncoding(StandardCharsets.UTF_8.toString());", "originalCommit": "8bebb1c41b93a7383bcf57a35a55c7fd775d29db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTc2OA==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498365768", "bodyText": "@benradey Thanks for this comment,\nThis test case was added for accented characters, we can push negative test case, to have your concern resolved.", "author": "rednitish", "createdAt": "2020-10-01T16:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyOTg4OA==", "url": "https://github.com/redhataccess/pantheon/pull/427#discussion_r498929888", "bodyText": "@rednitish, rather than overwriting the ISO_8859_1 test, can you copy/paste it so that your new test for the accented characters becomes an additional test?", "author": "benradey", "createdAt": "2020-10-02T16:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MzIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "2895f368e1add2df66e93cba38c7ab0378a35b0c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java\nindex 54a9bb5..4466de1 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java\n\n@@ -108,7 +158,6 @@ class ModuleVersionUploadTest {\n         params.put(\"asciidoc\", \"d'agua per toles partes, por exemplu: Sicilia y Cuba; al otrud\u00eda  decat\u00e1ronse  d'\u00fa  ven\u00eden  les  voces:  de  dientro  la  casa;  nun  foi  aaguantar aquel perru: vendi\u00f3lu.\");\n         slingContext.request().setParameterMap(params);\n         slingContext.request().setResource(new NonExistingResource(slingContext.resourceResolver(), \"/content/repositories/test_workspace/entities/new/proc_module\"));\n-        slingContext.request().setCharacterEncoding(StandardCharsets.UTF_8.toString());\n         HtmlResponse response = new HtmlResponse();\n \n         // when\n"}}, {"oid": "2895f368e1add2df66e93cba38c7ab0378a35b0c", "url": "https://github.com/redhataccess/pantheon/commit/2895f368e1add2df66e93cba38c7ab0378a35b0c", "message": " ccs_3768 encoding issues review comments", "committedDate": "2020-10-05T11:25:17Z", "type": "commit"}, {"oid": "2895f368e1add2df66e93cba38c7ab0378a35b0c", "url": "https://github.com/redhataccess/pantheon/commit/2895f368e1add2df66e93cba38c7ab0378a35b0c", "message": " ccs_3768 encoding issues review comments", "committedDate": "2020-10-05T11:25:17Z", "type": "forcePushed"}, {"oid": "79e743d98c398dcfc0180635948de06350e422b1", "url": "https://github.com/redhataccess/pantheon/commit/79e743d98c398dcfc0180635948de06350e422b1", "message": "CCS-3768 fix AP_review comments", "committedDate": "2020-10-06T11:20:32Z", "type": "commit"}, {"oid": "48c8afd4920c70613e5892c008b360d96c72df98", "url": "https://github.com/redhataccess/pantheon/commit/48c8afd4920c70613e5892c008b360d96c72df98", "message": " CCS-3768 , fixes suggested by ben", "committedDate": "2020-10-07T13:52:04Z", "type": "commit"}, {"oid": "52afc37286657a2b52674576283011fada334f2f", "url": "https://github.com/redhataccess/pantheon/commit/52afc37286657a2b52674576283011fada334f2f", "message": " CCS-3768 , fixes suggested by ben", "committedDate": "2020-10-07T13:55:48Z", "type": "commit"}]}