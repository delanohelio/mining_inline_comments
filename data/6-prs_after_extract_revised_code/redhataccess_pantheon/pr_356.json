{"pr_number": 356, "pr_title": "PnT JIRA (CCS-3683) unable to publish module when logged in as a demo\u2026", "pr_createdAt": "2020-07-29T17:00:54Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/356", "timeline": [{"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e", "url": "https://github.com/redhataccess/pantheon/commit/65d0b1b5d241b4b5846b82d50cc1a761cf8a653e", "message": "PnT JIRA (CCS-3683) unable to publish module when logged in as a demo user", "committedDate": "2020-07-29T16:56:47Z", "type": "commit"}, {"oid": "0995302e7f46cbf30523ddc222649c38ba3d66f4", "url": "https://github.com/redhataccess/pantheon/commit/0995302e7f46cbf30523ddc222649c38ba3d66f4", "message": "Fix: resoure resolver closed with try with resource block", "committedDate": "2020-07-30T10:38:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTc4Ng==", "url": "https://github.com/redhataccess/pantheon/pull/356#discussion_r462909786", "bodyText": "Do we need this as info rather than debug? Just curious.", "author": "aprajshekhar", "createdAt": "2020-07-30T10:42:45Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java", "diffHunk": "@@ -75,64 +84,74 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n             asciidoctorService.getModuleHtml(module, locale, variant, false, new HashMap(), true);\n             events.fireEvent(new ModuleVersionPublishedEvent(moduleVersion), 15);\n         }\n+        log.debug(\"Operation Publishinging draft version,  completed\");\n+        long elapseTime = System.currentTimeMillis() - startTime;\n+        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);", "originalCommit": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxNjUyOQ==", "url": "https://github.com/redhataccess/pantheon/pull/356#discussion_r462916529", "bodyText": "Changed level of logger to debug,", "author": "rednitish", "createdAt": "2020-07-30T10:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a44de84898cf20f93ad8ad518cd5507b285893dc", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java\nindex 414aefb..63a336e 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java\n\n@@ -86,12 +86,13 @@ public class PublishDraftVersion extends AbstractPostOperation {\n         }\n         log.debug(\"Operation Publishinging draft version,  completed\");\n         long elapseTime = System.currentTimeMillis() - startTime;\n-        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n+        log.debug(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n     }\n \n     @Override\n     protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws  RepositoryException{\n-        try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n+        try {\n+            ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMjA3NA==", "url": "https://github.com/redhataccess/pantheon/pull/356#discussion_r462912074", "bodyText": "Rather than if/else if,  if and return  would be better as you don't want the process to go further after setting response.", "author": "aprajshekhar", "createdAt": "2020-07-30T10:47:43Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java", "diffHunk": "@@ -75,64 +84,74 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n             asciidoctorService.getModuleHtml(module, locale, variant, false, new HashMap(), true);\n             events.fireEvent(new ModuleVersionPublishedEvent(moduleVersion), 15);\n         }\n+        log.debug(\"Operation Publishinging draft version,  completed\");\n+        long elapseTime = System.currentTimeMillis() - startTime;\n+        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n     }\n \n     @Override\n-    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) {\n-        Locale locale = getLocale(request);\n-        Module module = getModule(request);\n-        String variant = getVariant(request);\n+    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws  RepositoryException{\n+        try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n+            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            Locale locale = getLocale(request);\n+            String variant = getVariant(request);\n \n-        // Get the draft version, there should be one\n-        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n-        if( !versionToRelease.isPresent() ) {\n-            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The module doesn't have a draft version to be released\");\n-        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n-        \t\t||  versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n-        \t// Check if productVersion is set\n-        \tresponse.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The version to be released doesn't have productVersion metadata\");\n-        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n-        \t\t||  versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n-        \t// Check if urlFragment is set\n-        \tresponse.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The version to be released doesn't have urlFragment metadata\");\n-        } else {\n-            // Draft becomes the new released version\n-            ModuleVariant moduleVariant = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::variants)\n-                    .toChild(variants -> variants.variant(variant))\n-                    .get();\n-            moduleVariant.releaseDraft();\n-            changes.add(Modification.onModified(module.getPath()));\n-            // source/draft becomes source/released\n-            FileResource draftSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.draft())\n-                    .get();\n-            // Check for released version\n-            Optional<HashableFileResource> releasedSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.released())\n-                    .getAsOptional();\n-            if (draftSource != null) {\n-                if (releasedSource.isPresent()) {\n+            // Get the draft version, there should be one\n+            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            if (!versionToRelease.isPresent()) {", "originalCommit": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a44de84898cf20f93ad8ad518cd5507b285893dc", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java\nindex 414aefb..63a336e 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java\n\n@@ -86,12 +86,13 @@ public class PublishDraftVersion extends AbstractPostOperation {\n         }\n         log.debug(\"Operation Publishinging draft version,  completed\");\n         long elapseTime = System.currentTimeMillis() - startTime;\n-        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n+        log.debug(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n     }\n \n     @Override\n     protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws  RepositoryException{\n-        try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n+        try {\n+            ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMjk4Mw==", "url": "https://github.com/redhataccess/pantheon/pull/356#discussion_r462912983", "bodyText": "Return would be better as processing need not to run after setting the status.", "author": "aprajshekhar", "createdAt": "2020-07-30T10:49:40Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/UnpublishVersion.java", "diffHunk": "@@ -81,52 +91,62 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n             // TODO We need to change the event so that the right variant is processed\n             events.fireEvent(new ModuleVersionUnpublishedEvent(moduleVersion), 15);\n         }\n+        log.debug(\"Operation UnPublishinging draft version,  completed\");\n+        long elapseTime = System.currentTimeMillis() - startTime;\n+        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n     }\n \n     @Override\n-    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) {\n-        Locale locale = getLocale(request);\n-        Module module = getModule(request);\n-        String variant = getVariant(request);\n-\n-        // Get the released version, there should be one\n-        Optional<? extends DocumentVersion> foundVariant = module.getReleasedVersion(locale, variant);\n-\n-        if(!foundVariant.isPresent()) {\n-            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The module is not released (published)\");\n-        } else {\n-            foundVariant.get()\n-                    .getParent()\n-                    .revertReleased();\n-\n-            changes.add(Modification.onModified(module.getPath()));\n-            // Change source/released to source/draft\n-            Optional<HashableFileResource> draftSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.draft())\n-                    .getAsOptional();\n-            FileResource releasedSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.released())\n-                    .get();\n-            if (draftSource.isPresent()) {\n-                // Delete released\n-                try {\n-                    releasedSource.delete();\n-                } catch (PersistenceException e) {\n-                    throw new RuntimeException(\"Failed to delete source/released: \" + releasedSource.getPath());\n-                }\n+    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws RepositoryException{\n+        try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n+            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            Locale locale = getLocale(request);\n+            String variant = getVariant(request);\n \n+            // Get the released version, there should be one\n+            Optional<? extends DocumentVersion> foundVariant = module.getReleasedVersion(locale, variant);\n+\n+            if(!foundVariant.isPresent()) {\n+                response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                        \"The module is not released (published)\");", "originalCommit": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a44de84898cf20f93ad8ad518cd5507b285893dc", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/UnpublishVersion.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/UnpublishVersion.java\nindex e56b3dd..9a90d1d 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/UnpublishVersion.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/UnpublishVersion.java\n\n@@ -93,12 +93,13 @@ public class UnpublishVersion extends AbstractPostOperation {\n         }\n         log.debug(\"Operation UnPublishinging draft version,  completed\");\n         long elapseTime = System.currentTimeMillis() - startTime;\n-        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n+        log.debug(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n     }\n \n     @Override\n     protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws RepositoryException{\n-        try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n+        try {\n+            ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n"}}, {"oid": "a44de84898cf20f93ad8ad518cd5507b285893dc", "url": "https://github.com/redhataccess/pantheon/commit/a44de84898cf20f93ad8ad518cd5507b285893dc", "message": "Fix: resoure resolver closed with try with resource block : review comments from AP", "committedDate": "2020-07-30T10:55:45Z", "type": "commit"}]}