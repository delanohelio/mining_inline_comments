{"pr_number": 321, "pr_title": "(CCS-3230) Single page assembly preview", "pr_createdAt": "2020-06-17T13:28:20Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/321", "timeline": [{"oid": "b161285cb658ce5d47d8444f4adfa84d494cda2b", "url": "https://github.com/redhataccess/pantheon/commit/b161285cb658ce5d47d8444f4adfa84d494cda2b", "message": "sling servlet suffix utility (#307)\n\nAdd a utility for dealing with Sling path suffixes. In this revision the utility allows for template-based extraction of path parameters, enabling building complex, non-static API paths.", "committedDate": "2020-06-05T09:10:35Z", "type": "commit"}, {"oid": "373846d6e043f05a571b6aab3575e50f8d4b52f9", "url": "https://github.com/redhataccess/pantheon/commit/373846d6e043f05a571b6aab3575e50f8d4b52f9", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'", "committedDate": "2020-06-08T06:10:15Z", "type": "commit"}, {"oid": "3f4a0d47d6211e2013aafb517cba4db59df9a7d5", "url": "https://github.com/redhataccess/pantheon/commit/3f4a0d47d6211e2013aafb517cba4db59df9a7d5", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'", "committedDate": "2020-06-11T07:29:35Z", "type": "commit"}, {"oid": "1c0e13dcdc85f530ef8e308ca2ac81b99600e3d2", "url": "https://github.com/redhataccess/pantheon/commit/1c0e13dcdc85f530ef8e308ca2ac81b99600e3d2", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'", "committedDate": "2020-06-12T07:14:31Z", "type": "commit"}, {"oid": "c7b802521f00413425274c7aac2ddb7e65296a23", "url": "https://github.com/redhataccess/pantheon/commit/c7b802521f00413425274c7aac2ddb7e65296a23", "message": "Assembly changes", "committedDate": "2020-06-15T07:00:32Z", "type": "commit"}, {"oid": "dfc1f2dc42b5418d4e4bda2b9d7999afea7f436e", "url": "https://github.com/redhataccess/pantheon/commit/dfc1f2dc42b5418d4e4bda2b9d7999afea7f436e", "message": " (CCS-3230) Single page assembly preview Assembly Changes", "committedDate": "2020-06-15T10:48:42Z", "type": "commit"}, {"oid": "cd1f82aca862dfe50f4c03cb592e33e5caba899e", "url": "https://github.com/redhataccess/pantheon/commit/cd1f82aca862dfe50f4c03cb592e33e5caba899e", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'", "committedDate": "2020-06-17T12:13:38Z", "type": "commit"}, {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "url": "https://github.com/redhataccess/pantheon/commit/adf59da234579eb16c80cb7332c9c3e5bf3d0065", "message": " Assembly / module rendering independent classes", "committedDate": "2020-06-17T13:25:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDIwMg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441774202", "bodyText": "You are missing the pantheon/assembly resource type here if you want to use the same servlet to preview both.", "author": "carlosmunoz", "createdAt": "2020-06-17T19:11:18Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/module\" },", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMTI5NQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442311295", "bodyText": "Are we sure we want to use the same servlet for both?\nIn @xdavidson's recent PR, we agreed that our gut was that the upload servlets would likely be sufficiently different to warrant them being separate. I wonder if the same doesn't hold true for the rendering servlets?\nI admit that off the top of my head, I'm not sure why the two rendering servlets might look different, at least from a client perspective, especially since this is for single-page assemblies. But I'm interested to hear other opinions on whether we should have one render servlet or two separate.", "author": "benradey", "createdAt": "2020-06-18T15:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNDUxOQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444114519", "bodyText": "I have tried to create separate rendering servlet, to resolve this issue, considering, we have different resourcetype  as well for Module and assembly", "author": "rednitish", "createdAt": "2020-06-23T10:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3Nzg1Mw==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448577853", "bodyText": "Ok. I think that works for now. We can revisit the decision later.", "author": "benradey", "createdAt": "2020-07-01T19:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NzkyOA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448577928", "bodyText": "(if necessary)", "author": "benradey", "createdAt": "2020-07-01T19:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java\ndeleted file mode 100644\nindex a48cb79..0000000\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-package com.redhat.pantheon.servlet;\n-\n-import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n-import com.redhat.pantheon.model.Rendering;\n-import com.redhat.pantheon.model.module.HashableFileResource;\n-import com.redhat.pantheon.model.module.Module;\n-import com.redhat.pantheon.model.module.ModuleLocale;\n-import com.redhat.pantheon.model.module.SourceContent;\n-import org.apache.commons.lang3.LocaleUtils;\n-import org.apache.sling.api.SlingHttpServletRequest;\n-import org.apache.sling.api.SlingHttpServletResponse;\n-import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n-import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Reference;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.servlet.Servlet;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n-import java.io.Writer;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n-import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n-\n-/**\n- * Renders an HTML preview for a single module.\n- * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n- * with \"ctx_\".\n- *\n- * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n- * query parameter of name 'ctx_product' provided in the url.\n- */\n-@Component(\n-        service = Servlet.class,\n-        property = {\n-                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n-                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n-        })\n-@SlingServletResourceTypes(\n-        resourceTypes = { \"pantheon/module\" },\n-        methods = \"GET\",\n-        extensions = \"preview\")\n-@SuppressWarnings(\"serial\")\n-public class RenderingServlet extends SlingSafeMethodsServlet {\n-\n-    private final Logger log = LoggerFactory.getLogger(RenderingServlet.class);\n-\n-    private AsciidoctorService asciidoctorService;\n-\n-    @Activate\n-    public RenderingServlet(\n-            @Reference AsciidoctorService asciidoctorService) {\n-        this.asciidoctorService = asciidoctorService;\n-    }\n-\n-    @Override\n-    protected void doGet(SlingHttpServletRequest request,\n-            SlingHttpServletResponse response) throws ServletException, IOException {\n-        if(request.getResource().getResourceType().equals(\"pantheon/module\")){\n-            new ModuleRendering(asciidoctorService).getRenderedHTML(request,response);\n-        }\n-        else if(request.getResource().getResourceType().equals(\"pantheon/assembly\")){\n-            new AssemblyRendering(asciidoctorService).getRenderedHTML(request,response);\n-        }\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDcwNQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441774705", "bodyText": "A better name for this test would be AssemblyRenderingTest", "author": "carlosmunoz", "createdAt": "2020-06-17T19:12:18Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNDQwNA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r443414404", "bodyText": "As per Ben's  and Carlos's suggestion Changed name to noun ( AssemblyRenderServlet", "author": "rednitish", "createdAt": "2020-06-22T08:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nindex 6593885..7ed7bd1 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\n\n@@ -13,6 +13,7 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n import java.util.Locale;\n \n import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NTE3OA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441775178", "bodyText": "Same here regarding class naming: ModuleRenderingTest (since you are testing the ModuleRendering class)", "author": "carlosmunoz", "createdAt": "2020-06-17T19:13:11Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -19,11 +20,10 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.*;\n-import static org.mockito.Mockito.lenient;\n-import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.*;\n \n @ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-public class AsciidocRenderingServletTest {\n+public class ModuleRenderingServletTest {", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNTA2Mg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444115062", "bodyText": "Updated. to ModuleRenderServletTest.java", "author": "rednitish", "createdAt": "2020-06-23T10:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NTE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nindex fff9f1c..fb13ed5 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\n\n@@ -14,6 +13,7 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n import java.util.Locale;\n \n import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NTM5Ng==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441775396", "bodyText": "Lets get rid of this comment", "author": "carlosmunoz", "createdAt": "2020-06-17T19:13:34Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -58,11 +59,13 @@ public void testGenerateHtmlFromAsciidoc() throws Exception {\n                 .thenReturn(\"A generated html string\");\n \n         // Test class\n-        AsciidocRenderingServlet servlet = new AsciidocRenderingServlet(asciidoctorService);\n-        servlet.init();\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMzU2OQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444133569", "bodyText": "Copy that.. :)", "author": "rednitish", "createdAt": "2020-06-23T10:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NTM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nindex fff9f1c..fb13ed5 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\n\n@@ -59,13 +59,11 @@ public class ModuleRenderingServletTest {\n                 .thenReturn(\"A generated html string\");\n \n         // Test class\n-/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n-        servlet.init();*/\n-\n-        ModuleRendering moduleRendering = new ModuleRendering(asciidoctorService);\n+        ModuleRendererServlet moduleRendererServlet = new ModuleRendererServlet(asciidoctorService);\n+        moduleRendererServlet.init();;\n \n         // When\n-        moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+        moduleRendererServlet.doGet(slingContext.request(), slingContext.response());\n \n         // Then\n         assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjAxMA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441776010", "bodyText": "lets get rid of this comment", "author": "carlosmunoz", "createdAt": "2020-06-17T19:14:43Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.internal.matchers.Any;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class RenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromModule() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:workspace\",\n+                \"sling:resourceType\", \"pantheon/module\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+            registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n+        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n+//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMzY3Mw==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444133673", "bodyText": "Copy that.", "author": "rednitish", "createdAt": "2020-06-23T10:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java\ndeleted file mode 100644\nindex 9af8ec8..0000000\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java\n+++ /dev/null\n\n@@ -1,134 +0,0 @@\n-package com.redhat.pantheon.servlet;\n-\n-import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n-import com.redhat.pantheon.model.module.Module;\n-import org.apache.sling.api.resource.Resource;\n-import org.apache.sling.testing.mock.sling.ResourceResolverType;\n-import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n-import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.Mock;\n-import org.mockito.internal.matchers.Any;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.Locale;\n-\n-import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.*;\n-\n-@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-public class RenderingServletTest {\n-\n-    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n-\n-    @Mock AsciidoctorService asciidoctorService;\n-\n-    @Test\n-    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n-    public void testGenerateHtmlFromModule() throws Exception {\n-        // Given\n-        slingContext.build()\n-                .resource(\"/repo\",\n-                        \"jcr:primaryType\", \"pant:workspace\",\n-                        \"sling:resourceType\", \"pantheon/workspace\"\n-                ).resource(\"/repo/entities/module\",\n-                \"jcr:primaryType\", \"pant:workspace\",\n-                \"sling:resourceType\", \"pantheon/module\")\n-                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n-                        \"jcr:data\", \"Some source content (irrelevant)\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n-                        \"jcr:data\", \"A generated html string\")\n-                .commit();\n-            registerMockAdapter(Module.class, slingContext);\n-        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n-        slingContext.request().setResource(resource);\n-        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n-        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n-//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()\n-        lenient().when(\n-                asciidoctorService.getModuleHtml(\n-                        any(Module.class),\n-                        any(Locale.class),\n-                        anyString(),\n-                        anyBoolean(),\n-                        anyMap(),\n-                        anyBoolean()))\n-                .thenReturn(\"A generated html string\");\n-        // Test class\n-        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n-        servlet.init();\n-\n-        // When\n-        servlet.doGet(slingContext.request(), slingContext.response());\n-\n-        // Then\n-        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n-        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n-        assertEquals(\"text/html\", slingContext.response().getContentType());\n-        verify(asciidoctorService).getModuleHtml(\n-                any(Module.class),\n-                eq(Locale.US),\n-                eq(\"DEFAULT\"),\n-                eq(false), // not draft\n-                anyMap(),\n-                eq(false)); // don't re-render\n-    }\n-    @Test\n-    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n-    public void testGenerateHtmlFromAssembly() throws Exception {\n-        // Given\n-        slingContext.build()\n-                .resource(\"/repo\",\n-                        \"jcr:primaryType\", \"pant:workspace\",\n-                        \"sling:resourceType\", \"pantheon/workspace\"\n-                ).resource(\"/repo/entities/module\",\n-                \"jcr:primaryType\", \"pant:workspace\",\n-                \"sling:resourceType\", \"pantheon/assembly\")\n-                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n-                        \"jcr:data\", \"Some source content (irrelevant)\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n-                        \"jcr:data\", \"A generated html string\")\n-                .commit();\n-        registerMockAdapter(Module.class, slingContext);\n-        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n-        slingContext.request().setResource(resource);\n-        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n-        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n-//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()\n-        lenient().when(\n-                asciidoctorService.getModuleHtml(\n-                        any(Module.class),\n-                        any(Locale.class),\n-                        anyString(),\n-                        anyBoolean(),\n-                        anyMap(),\n-                        anyBoolean()))\n-                .thenReturn(\"A generated html string\");\n-        // Test class\n-        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n-        servlet.init();\n-\n-        // When\n-        servlet.doGet(slingContext.request(), slingContext.response());\n-\n-        // Then\n-        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n-        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n-        assertEquals(\"text/html\", slingContext.response().getContentType());\n-        verify(asciidoctorService).getModuleHtml(\n-                any(Module.class),\n-                eq(Locale.US),\n-                eq(\"DEFAULT\"),\n-                eq(false), // not draft\n-                anyMap(),\n-                eq(false)); // don't re-render\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjA5NQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441776095", "bodyText": "lets get rid of this comment", "author": "carlosmunoz", "createdAt": "2020-06-17T19:14:54Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.internal.matchers.Any;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class RenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromModule() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:workspace\",\n+                \"sling:resourceType\", \"pantheon/module\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+            registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n+        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n+//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+        // Test class\n+        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();\n+\n+        // When\n+        servlet.doGet(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAssembly() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:workspace\",\n+                \"sling:resourceType\", \"pantheon/assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n+        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n+//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNTAzMQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444135031", "bodyText": "Deprecated", "author": "rednitish", "createdAt": "2020-06-23T10:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java\ndeleted file mode 100644\nindex 9af8ec8..0000000\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java\n+++ /dev/null\n\n@@ -1,134 +0,0 @@\n-package com.redhat.pantheon.servlet;\n-\n-import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n-import com.redhat.pantheon.model.module.Module;\n-import org.apache.sling.api.resource.Resource;\n-import org.apache.sling.testing.mock.sling.ResourceResolverType;\n-import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n-import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.Mock;\n-import org.mockito.internal.matchers.Any;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.Locale;\n-\n-import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.*;\n-\n-@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-public class RenderingServletTest {\n-\n-    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n-\n-    @Mock AsciidoctorService asciidoctorService;\n-\n-    @Test\n-    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n-    public void testGenerateHtmlFromModule() throws Exception {\n-        // Given\n-        slingContext.build()\n-                .resource(\"/repo\",\n-                        \"jcr:primaryType\", \"pant:workspace\",\n-                        \"sling:resourceType\", \"pantheon/workspace\"\n-                ).resource(\"/repo/entities/module\",\n-                \"jcr:primaryType\", \"pant:workspace\",\n-                \"sling:resourceType\", \"pantheon/module\")\n-                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n-                        \"jcr:data\", \"Some source content (irrelevant)\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n-                        \"jcr:data\", \"A generated html string\")\n-                .commit();\n-            registerMockAdapter(Module.class, slingContext);\n-        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n-        slingContext.request().setResource(resource);\n-        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n-        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n-//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()\n-        lenient().when(\n-                asciidoctorService.getModuleHtml(\n-                        any(Module.class),\n-                        any(Locale.class),\n-                        anyString(),\n-                        anyBoolean(),\n-                        anyMap(),\n-                        anyBoolean()))\n-                .thenReturn(\"A generated html string\");\n-        // Test class\n-        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n-        servlet.init();\n-\n-        // When\n-        servlet.doGet(slingContext.request(), slingContext.response());\n-\n-        // Then\n-        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n-        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n-        assertEquals(\"text/html\", slingContext.response().getContentType());\n-        verify(asciidoctorService).getModuleHtml(\n-                any(Module.class),\n-                eq(Locale.US),\n-                eq(\"DEFAULT\"),\n-                eq(false), // not draft\n-                anyMap(),\n-                eq(false)); // don't re-render\n-    }\n-    @Test\n-    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n-    public void testGenerateHtmlFromAssembly() throws Exception {\n-        // Given\n-        slingContext.build()\n-                .resource(\"/repo\",\n-                        \"jcr:primaryType\", \"pant:workspace\",\n-                        \"sling:resourceType\", \"pantheon/workspace\"\n-                ).resource(\"/repo/entities/module\",\n-                \"jcr:primaryType\", \"pant:workspace\",\n-                \"sling:resourceType\", \"pantheon/assembly\")\n-                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n-                        \"jcr:data\", \"Some source content (irrelevant)\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n-                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n-                        \"jcr:data\", \"A generated html string\")\n-                .commit();\n-        registerMockAdapter(Module.class, slingContext);\n-        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n-        slingContext.request().setResource(resource);\n-        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n-        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n-//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()\n-        lenient().when(\n-                asciidoctorService.getModuleHtml(\n-                        any(Module.class),\n-                        any(Locale.class),\n-                        anyString(),\n-                        anyBoolean(),\n-                        anyMap(),\n-                        anyBoolean()))\n-                .thenReturn(\"A generated html string\");\n-        // Test class\n-        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n-        servlet.init();\n-\n-        // When\n-        servlet.doGet(slingContext.request(), slingContext.response());\n-\n-        // Then\n-        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n-        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n-        assertEquals(\"text/html\", slingContext.response().getContentType());\n-        verify(asciidoctorService).getModuleHtml(\n-                any(Module.class),\n-                eq(Locale.US),\n-                eq(\"DEFAULT\"),\n-                eq(false), // not draft\n-                anyMap(),\n-                eq(false)); // don't re-render\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTA0NQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441779045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public  void getRenderedHTML(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;\n          \n          \n            \n                public  void renderHtml(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;\n          \n      \n    \n    \n  \n\nsince the method doesn't return anything", "author": "carlosmunoz", "createdAt": "2020-06-17T19:20:45Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.redhat.pantheon.model;\n+\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.SlingModel;\n+import com.redhat.pantheon.servlet.AssemblyRendering;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.models.annotations.Default;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+/**\n+ * Represents rendering as an interface to be implemented.\n+ *\n+ */\n+\n+public interface Rendering {\n+    public  void getRenderedHTML(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java\ndeleted file mode 100644\nindex a5ec1ce..0000000\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-package com.redhat.pantheon.model;\n-\n-import com.redhat.pantheon.model.api.Field;\n-import com.redhat.pantheon.model.api.SlingModel;\n-import com.redhat.pantheon.servlet.AssemblyRendering;\n-import org.apache.sling.api.SlingHttpServletRequest;\n-import org.apache.sling.api.SlingHttpServletResponse;\n-import org.apache.sling.models.annotations.Default;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Component;\n-\n-import javax.inject.Named;\n-import java.io.IOException;\n-import java.util.Calendar;\n-\n-/**\n- * Represents rendering as an interface to be implemented.\n- *\n- */\n-\n-public interface Rendering {\n-    public  void getRenderedHTML(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTkxNA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441779914", "bodyText": "I like this idea, but I would move it to the servlet package", "author": "carlosmunoz", "createdAt": "2020-06-17T19:22:20Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.redhat.pantheon.model;\n+\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.SlingModel;\n+import com.redhat.pantheon.servlet.AssemblyRendering;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.models.annotations.Default;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+/**\n+ * Represents rendering as an interface to be implemented.\n+ *\n+ */\n+\n+public interface Rendering {", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNjgzMg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442316832", "bodyText": "Also consider renaming it to \"DocumentRenderer\" - class/interface names that end in \"-ing\" are unusual, and adding \"Document\" to the front of it makes it a bit more specific.", "author": "benradey", "createdAt": "2020-06-18T15:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxODkyMQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442318921", "bodyText": "Or... now that I think about it... maybe something more like \"DocumentServletHandler\" since this doesn't just render, but also takes care of populating the servlet response as well. That would make the name even more targeted toward its actual function.", "author": "benradey", "createdAt": "2020-06-18T15:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMDE5Mg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r443420192", "bodyText": "@benradey  This is an interface, we can name implementation class as handler, but renaming it to DocumentRedererHandler doesn't sound good.", "author": "rednitish", "createdAt": "2020-06-22T09:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODU5OA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444138598", "bodyText": "Deprecated.", "author": "rednitish", "createdAt": "2020-06-23T10:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java\ndeleted file mode 100644\nindex a5ec1ce..0000000\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-package com.redhat.pantheon.model;\n-\n-import com.redhat.pantheon.model.api.Field;\n-import com.redhat.pantheon.model.api.SlingModel;\n-import com.redhat.pantheon.servlet.AssemblyRendering;\n-import org.apache.sling.api.SlingHttpServletRequest;\n-import org.apache.sling.api.SlingHttpServletResponse;\n-import org.apache.sling.models.annotations.Default;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Component;\n-\n-import javax.inject.Named;\n-import java.io.IOException;\n-import java.util.Calendar;\n-\n-/**\n- * Represents rendering as an interface to be implemented.\n- *\n- */\n-\n-public interface Rendering {\n-    public  void getRenderedHTML(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NjU5OA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441996598", "bodyText": "Rather than having an else you can simply return", "author": "aprajshekhar", "createdAt": "2020-06-18T06:30:57Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+\n+\n+public class AssemblyRendering implements Rendering {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRendering.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRendering(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void getRenderedHTML(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n+\n+        Module module = request.getResource().adaptTo(Module.class);\n+        Locale localeObj = LocaleUtils.toLocale(locale);\n+\n+        Optional<HashableFileResource> moduleVariantSource;\n+\n+        if(draft) {\n+            moduleVariantSource = module.moduleLocale(localeObj)\n+                .traverse()\n+                .toChild(ModuleLocale::source)\n+                .toChild(SourceContent::draft)\n+                .getAsOptional();\n+        } else {\n+            moduleVariantSource = module.moduleLocale(localeObj)\n+                    .traverse()\n+                    .toChild(ModuleLocale::source)\n+                    .toChild(SourceContent::released)\n+                    .getAsOptional();\n+        }\n+\n+\n+        if(!moduleVariantSource.isPresent()) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n+                    + \"source content not found for \" + variantName +  \" module variant at \"\n+                    + request.getResource().getPath());", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODgzMw==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444138833", "bodyText": "resolved", "author": "rednitish", "createdAt": "2020-06-23T10:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NjU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MTA2Mg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448581062", "bodyText": "I don't think this is resolved. It looks like you're missing a return; statement after the call to response.sendError.", "author": "benradey", "createdAt": "2020-07-01T19:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NjU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nsimilarity index 58%\nrename from pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java\nrename to pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nindex 5f6617a..ea877bd 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\n\n@@ -1,7 +1,6 @@\n package com.redhat.pantheon.servlet;\n \n import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n-import com.redhat.pantheon.model.Rendering;\n import com.redhat.pantheon.model.module.HashableFileResource;\n import com.redhat.pantheon.model.module.Module;\n import com.redhat.pantheon.model.module.ModuleLocale;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5Nzk4Mg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441997982", "bodyText": "Switch/case would be a better option than if/else", "author": "aprajshekhar", "createdAt": "2020-06-18T06:34:22Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/module\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+@SuppressWarnings(\"serial\")\n+public class RenderingServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(RenderingServlet.class);\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public RenderingServlet(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    protected void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws ServletException, IOException {\n+        if(request.getResource().getResourceType().equals(\"pantheon/module\")){", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MTY2MQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448581661", "bodyText": "I'm going to mark this is resolved now that Nitish has split this into separate servlets.", "author": "benradey", "createdAt": "2020-07-01T19:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5Nzk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java\ndeleted file mode 100644\nindex a48cb79..0000000\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-package com.redhat.pantheon.servlet;\n-\n-import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n-import com.redhat.pantheon.model.Rendering;\n-import com.redhat.pantheon.model.module.HashableFileResource;\n-import com.redhat.pantheon.model.module.Module;\n-import com.redhat.pantheon.model.module.ModuleLocale;\n-import com.redhat.pantheon.model.module.SourceContent;\n-import org.apache.commons.lang3.LocaleUtils;\n-import org.apache.sling.api.SlingHttpServletRequest;\n-import org.apache.sling.api.SlingHttpServletResponse;\n-import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n-import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n-import org.osgi.framework.Constants;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.Reference;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.servlet.Servlet;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n-import java.io.Writer;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n-import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n-import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n-\n-/**\n- * Renders an HTML preview for a single module.\n- * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n- * with \"ctx_\".\n- *\n- * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n- * query parameter of name 'ctx_product' provided in the url.\n- */\n-@Component(\n-        service = Servlet.class,\n-        property = {\n-                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n-                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n-        })\n-@SlingServletResourceTypes(\n-        resourceTypes = { \"pantheon/module\" },\n-        methods = \"GET\",\n-        extensions = \"preview\")\n-@SuppressWarnings(\"serial\")\n-public class RenderingServlet extends SlingSafeMethodsServlet {\n-\n-    private final Logger log = LoggerFactory.getLogger(RenderingServlet.class);\n-\n-    private AsciidoctorService asciidoctorService;\n-\n-    @Activate\n-    public RenderingServlet(\n-            @Reference AsciidoctorService asciidoctorService) {\n-        this.asciidoctorService = asciidoctorService;\n-    }\n-\n-    @Override\n-    protected void doGet(SlingHttpServletRequest request,\n-            SlingHttpServletResponse response) throws ServletException, IOException {\n-        if(request.getResource().getResourceType().equals(\"pantheon/module\")){\n-            new ModuleRendering(asciidoctorService).getRenderedHTML(request,response);\n-        }\n-        else if(request.getResource().getResourceType().equals(\"pantheon/assembly\")){\n-            new AssemblyRendering(asciidoctorService).getRenderedHTML(request,response);\n-        }\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDA2MA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442000060", "bodyText": "Sling recommends using setParameterMap than getParameterMap().put().\n                ImmutableMap.<String, Object>builder()\n                                .put(AsciidocRenderingServlet.PARAM_RERENDER, \"true\")\n                        .build()\n        );", "author": "aprajshekhar", "createdAt": "2020-06-18T06:39:55Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nindex 6593885..7ed7bd1 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\n\n@@ -13,6 +13,7 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n import java.util.Locale;\n \n import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTAyNg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442001026", "bodyText": "Sling recommends using setParameterMap than getParameterMap().put().\n       .put(AsciidocRenderingServlet.PARAM_RERENDER, \"true\")\n        .build()\n );\nThis and the above one can be merged as ImmutableMap builder supports multiple puts.", "author": "aprajshekhar", "createdAt": "2020-06-18T06:42:17Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        lenient().when(", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nindex 6593885..7ed7bd1 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\n\n@@ -13,6 +13,7 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n import java.util.Locale;\n \n import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTU3Nw==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442001577", "bodyText": "Same as my previous comment on use of getParameterMap.", "author": "aprajshekhar", "createdAt": "2020-06-18T06:43:46Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(true), // draft\n+                anyMap(),\n+                eq(true)); // re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered, non-default variant)\")\n+    public void testGenerateHtmlFromDraftAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_VARIANT, new String[]{\"variant1\"});", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nindex 6593885..7ed7bd1 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\n\n@@ -13,6 +13,7 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n import java.util.Locale;\n \n import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTkxNg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442001916", "bodyText": "Same as my previous comment on  use of getParameterMap.", "author": "aprajshekhar", "createdAt": "2020-06-18T06:44:40Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(true), // draft\n+                anyMap(),\n+                eq(true)); // re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered, non-default variant)\")\n+    public void testGenerateHtmlFromDraftAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_VARIANT, new String[]{\"variant1\"});\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\").thenReturn(\"A generated html string\").thenReturn(\"A generated html string\");\n+\n+        // Test class\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"variant1\"), // non-default variant\n+                eq(true), // draft\n+                anyMap(),\n+                eq(true)); // re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc for an invalid variant\")\n+    public void renderHtmlForInvalidVariant() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/module\",\n+                        \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/module/en_US/variants/DEFAULT/draft/cachedHtml/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .resource(\"/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_VARIANT, new String[]{\"non_existing\"});", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\nindex 6593885..7ed7bd1 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderServletTest.java\n\n@@ -13,6 +13,7 @@ import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n import java.util.Locale;\n \n import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMjMyOQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442002329", "bodyText": "Same as my previous comment on  use of getParameterMap.", "author": "aprajshekhar", "createdAt": "2020-06-18T06:45:44Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -96,8 +100,8 @@ public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nindex fff9f1c..fb13ed5 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\n\n@@ -99,9 +97,11 @@ public class ModuleRenderingServletTest {\n                 .commit();\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        HashMap<String,Object> pMap = new HashMap<>();\n+        pMap.put(AssemblyRenderServlet.PARAM_RERENDER,new String[]{\"true\"});\n+        pMap.put(AssemblyRenderServlet.PARAM_DRAFT, new String[]{\"true\"});\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().setParameterMap(pMap);\n         lenient().when(\n                 asciidoctorService.getModuleHtml(\n                         any(Module.class),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMjYwMg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442002602", "bodyText": "Same as my previous comment on use of getParameterMap.", "author": "aprajshekhar", "createdAt": "2020-06-18T06:46:23Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -147,9 +150,12 @@ public void testGenerateHtmlFromDraftAsciidocWithRerender() throws Exception {\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_DRAFT, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_VARIANT, new String[]{\"variant1\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_VARIANT, new String[]{\"variant1\"});\n+", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nindex fff9f1c..fb13ed5 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\n\n@@ -149,13 +150,12 @@ public class ModuleRenderingServletTest {\n                 .commit();\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        HashMap<String,Object> pMap = new HashMap<>();\n+        pMap.put(AssemblyRenderServlet.PARAM_RERENDER,new String[]{\"true\"});\n+        pMap.put(AssemblyRenderServlet.PARAM_DRAFT, new String[]{\"true\"});\n+        pMap.put(AssemblyRenderServlet.PARAM_VARIANT, new String[]{\"variant1\"});\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_VARIANT, new String[]{\"variant1\"});\n-\n-        // Test class\n-        ModuleRendering moduleRendering = new ModuleRendering(asciidoctorService);\n+        slingContext.request().setParameterMap(pMap);\n         lenient().when(\n                 asciidoctorService.getModuleHtml(\n                         any(Module.class),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzAzNw==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442003037", "bodyText": "Same as my previous comment on use of getParameterMap.", "author": "aprajshekhar", "createdAt": "2020-06-18T06:47:24Z", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -234,9 +236,9 @@ public void renderHtmlForInvalidLocale() throws Exception {\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/module\");\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_DRAFT, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_LOCALE, new String[]{\"ja_JP\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_LOCALE, new String[]{\"ja_JP\"});", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nsimilarity index 80%\nrename from pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\nrename to pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\nindex fff9f1c..fb13ed5 100644\n--- a/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java\n+++ b/pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRendererServletTest.java\n\n@@ -235,10 +242,12 @@ public class ModuleRenderingServletTest {\n                 .commit();\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/module\");\n+        HashMap<String,Object> pMap = new HashMap<>();\n+        pMap.put(AssemblyRenderServlet.PARAM_RERENDER,new String[]{\"true\"});\n+        pMap.put(AssemblyRenderServlet.PARAM_DRAFT, new String[]{\"true\"});\n+        pMap.put(AssemblyRenderServlet.PARAM_LOCALE, new String[]{\"ja_JP\"});\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_LOCALE, new String[]{\"ja_JP\"});\n+        slingContext.request().setParameterMap(pMap);\n         lenient().when(\n                 asciidoctorService.getModuleHtml(\n                         any(Module.class),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNTg3Nw==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442005877", "bodyText": "Since the locale, draft, rerender variables are being used in ModuleRender as well, wouldn't it be a better approach to move these statements to a helper/util?", "author": "aprajshekhar", "createdAt": "2020-06-18T06:53:26Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+\n+\n+public class AssemblyRendering implements Rendering {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRendering.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRendering(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void getRenderedHTML(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNDY4OA==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442314688", "bodyText": "This also doesn't sit well with me. I would much rather see the getRenderedHTML method take locale, draft, etc as explicit parameters, rather than simply having it take the request object and extracting what it needs by itself. Then the paramValueAsX calls get combined into the parent class rather than duplicated in the child classes.", "author": "benradey", "createdAt": "2020-06-18T15:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2MTIxMg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r444161212", "bodyText": "I have made 2 separate servlet to handle above comment.", "author": "rednitish", "createdAt": "2020-06-23T11:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNTg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nsimilarity index 58%\nrename from pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java\nrename to pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nindex 5f6617a..ea877bd 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\n\n@@ -1,7 +1,6 @@\n package com.redhat.pantheon.servlet;\n \n import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n-import com.redhat.pantheon.model.Rendering;\n import com.redhat.pantheon.model.module.HashableFileResource;\n import com.redhat.pantheon.model.module.Module;\n import com.redhat.pantheon.model.module.ModuleLocale;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNzI1Nw==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442317257", "bodyText": "Rename to \"AssemblyRenderer\"", "author": "benradey", "createdAt": "2020-06-18T15:34:06Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+\n+\n+public class AssemblyRendering implements Rendering {", "originalCommit": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nsimilarity index 58%\nrename from pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java\nrename to pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nindex 5f6617a..ea877bd 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\n\n@@ -1,7 +1,6 @@\n package com.redhat.pantheon.servlet;\n \n import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n-import com.redhat.pantheon.model.Rendering;\n import com.redhat.pantheon.model.module.HashableFileResource;\n import com.redhat.pantheon.model.module.Module;\n import com.redhat.pantheon.model.module.ModuleLocale;\n"}}, {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c", "url": "https://github.com/redhataccess/pantheon/commit/c49df20fe32b4f8e735652e5675f07456f4f858c", "message": " Assembly / module rendering independent classes", "committedDate": "2020-06-23T09:06:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NjMwNQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448586305", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    switch(paramValue(request, PARAM_DRAFT)){\n          \n          \n            \n                        case \"true\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                    .traverse()\n          \n          \n            \n                                    .toChild(ModuleLocale::source)\n          \n          \n            \n                                    .toChild(SourceContent::draft)\n          \n          \n            \n                                    .getAsOptional();\n          \n          \n            \n                            break;\n          \n          \n            \n            \n          \n          \n            \n                        case \"false\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                    .traverse()\n          \n          \n            \n                                    .toChild(ModuleLocale::source)\n          \n          \n            \n                                    .toChild(SourceContent::released)\n          \n          \n            \n                                    .getAsOptional();\n          \n          \n            \n                            break;\n          \n          \n            \n                    }\n          \n          \n            \n                    moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                            .traverse()\n          \n          \n            \n                            .toChild(ModuleLocale::source)\n          \n          \n            \n                            .toChild(draft ? SourceContent::draft : SourceContent::released)\n          \n          \n            \n                            .getAsOptional();", "author": "benradey", "createdAt": "2020-07-01T19:59:50Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/assembly\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+@SuppressWarnings(\"serial\")\n+public class AssemblyRenderServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRenderServlet.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRenderServlet(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n+\n+        Module module = request.getResource().adaptTo(Module.class);\n+        Locale localeObj = LocaleUtils.toLocale(locale);\n+\n+        Optional<HashableFileResource> moduleVariantSource = null;\n+\n+        switch(paramValue(request, PARAM_DRAFT)){\n+            case \"true\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::draft)\n+                        .getAsOptional();\n+                break;\n+\n+            case \"false\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::released)\n+                        .getAsOptional();\n+                break;\n+        }", "originalCommit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d81f05563059bd22982786f781a51219be9ed191", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nindex ea877bd..14c8a18 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\n\n@@ -18,6 +18,7 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.io.Writer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NjYwNQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448586605", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    switch(paramValue(request, PARAM_DRAFT)){\n          \n          \n            \n                        case \"true\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                    .traverse()\n          \n          \n            \n                                    .toChild(ModuleLocale::source)\n          \n          \n            \n                                    .toChild(SourceContent::draft)\n          \n          \n            \n                                    .getAsOptional();\n          \n          \n            \n                                    break;\n          \n          \n            \n            \n          \n          \n            \n                        case \"false\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                .traverse()\n          \n          \n            \n                                .toChild(ModuleLocale::source)\n          \n          \n            \n                                .toChild(SourceContent::released)\n          \n          \n            \n                                .getAsOptional();\n          \n          \n            \n                            break;\n          \n          \n            \n                    }\n          \n          \n            \n                    moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                            .traverse()\n          \n          \n            \n                            .toChild(ModuleLocale::source)\n          \n          \n            \n                            .toChild(draft ? SourceContent::draft : SourceContent::released)\n          \n          \n            \n                            .getAsOptional();", "author": "benradey", "createdAt": "2020-07-01T20:00:30Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java", "diffHunk": "@@ -62,36 +58,40 @@\n     private AsciidoctorService asciidoctorService;\n \n     @Activate\n-    public AsciidocRenderingServlet(\n+    public ModuleRendererServlet(\n             @Reference AsciidoctorService asciidoctorService) {\n         this.asciidoctorService = asciidoctorService;\n     }\n \n     @Override\n-    protected void doGet(SlingHttpServletRequest request,\n-            SlingHttpServletResponse response) throws ServletException, IOException {\n+    public void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n         String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n-        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        Boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n         boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n         String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n \n         Module module = request.getResource().adaptTo(Module.class);\n         Locale localeObj = LocaleUtils.toLocale(locale);\n \n-        Optional<HashableFileResource> moduleVariantSource;\n+        Optional<HashableFileResource> moduleVariantSource = null;\n \n-        if(draft) {\n-            moduleVariantSource = module.moduleLocale(localeObj)\n-                .traverse()\n-                .toChild(ModuleLocale::source)\n-                .toChild(SourceContent::draft)\n-                .getAsOptional();\n-        } else {\n-            moduleVariantSource = module.moduleLocale(localeObj)\n+        switch(paramValue(request, PARAM_DRAFT)){\n+            case \"true\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::draft)\n+                        .getAsOptional();\n+                        break;\n+\n+            case \"false\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n                     .traverse()\n                     .toChild(ModuleLocale::source)\n                     .toChild(SourceContent::released)\n                     .getAsOptional();\n+                break;\n         }", "originalCommit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d81f05563059bd22982786f781a51219be9ed191", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java\nindex ac1eafe..1d27bd0 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java\n\n@@ -64,16 +65,15 @@ public class ModuleRendererServlet extends SlingSafeMethodsServlet {\n     }\n \n     @Override\n-    public void doGet(SlingHttpServletRequest request,\n-            SlingHttpServletResponse response) throws IOException {\n+    protected void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws ServletException, IOException {\n         String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n-        Boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n         boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n         String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n-\n-        Module module = request.getResource().adaptTo(Module.class);\n         Locale localeObj = LocaleUtils.toLocale(locale);\n \n+        Module module = request.getResource().adaptTo(Module.class);\n         Optional<HashableFileResource> moduleVariantSource = null;\n \n         switch(paramValue(request, PARAM_DRAFT)){\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NzI2MQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448587261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!moduleVariantSource.isPresent()) {\n          \n          \n            \n                        response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n          \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                    }\n          \n          \n            \n                    if(!moduleVariantSource.isPresent()) {\n          \n          \n            \n                        response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n          \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "author": "benradey", "createdAt": "2020-07-01T20:02:01Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/assembly\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+@SuppressWarnings(\"serial\")\n+public class AssemblyRenderServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRenderServlet.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRenderServlet(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n+\n+        Module module = request.getResource().adaptTo(Module.class);\n+        Locale localeObj = LocaleUtils.toLocale(locale);\n+\n+        Optional<HashableFileResource> moduleVariantSource = null;\n+\n+        switch(paramValue(request, PARAM_DRAFT)){\n+            case \"true\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::draft)\n+                        .getAsOptional();\n+                break;\n+\n+            case \"false\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::released)\n+                        .getAsOptional();\n+                break;\n+        }\n+\n+\n+        if(!moduleVariantSource.isPresent()) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n+                    + \"source content not found for \" + variantName +  \" module variant at \"\n+                    + request.getResource().getPath());\n+        }", "originalCommit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MjMyNg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r450652326", "bodyText": "I have a query, here as we are using sendError method, shoudn't it automatically returns control back to parent class?\n* After using this method, the response should be considered\n* to be committed and should not be written to.", "author": "rednitish", "createdAt": "2020-07-07T07:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NzI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMTc2NQ==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r450921765", "bodyText": "Hi @rednitish, the answer to your question is no, Java does not work that way. There is no way to call a method, and then that child method halts further execution of its parent method, outside of throwing an exception (which is not what's happening here). You must add an explicit return in order to stop your method from continuing to execute once the child finishes.\nWhat the javadoc is saying is that once you call response.sendError, you should not attempt to call any further methods on the response object, because they will fail.", "author": "benradey", "createdAt": "2020-07-07T14:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NzI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d81f05563059bd22982786f781a51219be9ed191", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\nindex ea877bd..14c8a18 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java\n\n@@ -18,6 +18,7 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n import java.io.Writer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Nzc1Mg==", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448587752", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                    }\n          \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "author": "benradey", "createdAt": "2020-07-01T20:03:14Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java", "diffHunk": "@@ -100,19 +100,18 @@ protected void doGet(SlingHttpServletRequest request,\n                     + \"source content not found for \" + variantName +  \" module variant at \"\n                     + request.getResource().getPath());\n         }", "originalCommit": "c49df20fe32b4f8e735652e5675f07456f4f858c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "787ff24e247cb271a8a9aff6661a12f732dcb7b9", "chunk": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java\nindex ac1eafe..f56d59b 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java\n\n@@ -64,41 +61,26 @@ public class ModuleRendererServlet extends SlingSafeMethodsServlet {\n     }\n \n     @Override\n-    public void doGet(SlingHttpServletRequest request,\n-            SlingHttpServletResponse response) throws IOException {\n-        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n-        Boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n-        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n-        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n-\n-        Module module = request.getResource().adaptTo(Module.class);\n+    protected void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws ServletException, IOException {\n+        String locale = paramValue(request, PantheonConstants.PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PantheonConstants.PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PantheonConstants.PARAM_RERENDER);\n+        String variantName = paramValue(request, PantheonConstants.PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n         Locale localeObj = LocaleUtils.toLocale(locale);\n \n-        Optional<HashableFileResource> moduleVariantSource = null;\n-\n-        switch(paramValue(request, PARAM_DRAFT)){\n-            case \"true\":\n-                moduleVariantSource = module.moduleLocale(localeObj)\n+        Module module = request.getResource().adaptTo(Module.class);\n+        Optional<HashableFileResource> moduleVariantSource = module.moduleLocale(localeObj)\n                         .traverse()\n                         .toChild(ModuleLocale::source)\n-                        .toChild(SourceContent::draft)\n+                        .toChild(draft ? SourceContent::draft : SourceContent::released)\n                         .getAsOptional();\n-                        break;\n-\n-            case \"false\":\n-                moduleVariantSource = module.moduleLocale(localeObj)\n-                    .traverse()\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(SourceContent::released)\n-                    .getAsOptional();\n-                break;\n-        }\n-\n \n         if(!moduleVariantSource.isPresent()) {\n             response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n                     + \"source content not found for \" + variantName +  \" module variant at \"\n                     + request.getResource().getPath());\n+            return;\n         }\n         // collect a list of parameter that traverseFrom with 'ctx_' as those will be used as asciidoctorj\n         // parameters\n"}}, {"oid": "d81f05563059bd22982786f781a51219be9ed191", "url": "https://github.com/redhataccess/pantheon/commit/d81f05563059bd22982786f781a51219be9ed191", "message": " merge conflicts resolve", "committedDate": "2020-07-07T06:43:58Z", "type": "commit"}, {"oid": "787ff24e247cb271a8a9aff6661a12f732dcb7b9", "url": "https://github.com/redhataccess/pantheon/commit/787ff24e247cb271a8a9aff6661a12f732dcb7b9", "message": "Review comments from Ben", "committedDate": "2020-07-07T09:47:53Z", "type": "commit"}]}