{"pr_number": 263, "pr_title": "260 duplicate items", "pr_createdAt": "2020-09-09T21:27:55Z", "pr_url": "https://github.com/dedica-team/nivio/pull/263", "timeline": [{"oid": "443d64a495249bb1477ef489468a2ae524c859cc", "url": "https://github.com/dedica-team/nivio/commit/443d64a495249bb1477ef489468a2ae524c859cc", "message": "[#260] refactoring towards immutability", "committedDate": "2020-09-09T21:16:43Z", "type": "commit"}, {"oid": "9b5918ffff8522f16e2643765ff17b14c822f376", "url": "https://github.com/dedica-team/nivio/commit/9b5918ffff8522f16e2643765ff17b14c822f376", "message": "[#260] changed log level", "committedDate": "2020-09-09T21:21:48Z", "type": "commit"}, {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6", "url": "https://github.com/dedica-team/nivio/commit/618b6af9f7521b8424dfecda53663c240510e7e6", "message": "[#260] added tests", "committedDate": "2020-09-09T21:24:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjI0Mw==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486296243", "bodyText": "You could also wrap it with Collections.unmodifiableSet() as modification would not make sense anymore.", "author": "Matthimatiker", "createdAt": "2020-09-10T12:29:23Z", "path": "src/main/java/de/bonndan/nivio/model/Group.java", "diffHunk": "@@ -93,8 +92,13 @@ public void setColor(String color) {\n         return links;\n     }\n \n+    /**\n+     * Returns an immutable copy of the items.\n+     *\n+     * @return immutable copy\n+     */\n     public Set<Item> getItems() {\n-        return items;\n+        return Set.copyOf(items);", "originalCommit": "618b6af9f7521b8424dfecda53663c240510e7e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDk0OA==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486340948", "bodyText": "Set.of is the same, but unmodifiableSet is better to understand, so I'll change it.", "author": "bonndan", "createdAt": "2020-09-10T13:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "80e1b6dab98a0a746c4c18ab8d90430e641074cb", "chunk": "diff --git a/src/main/java/de/bonndan/nivio/model/Group.java b/src/main/java/de/bonndan/nivio/model/Group.java\nindex ed1bd742..93c79236 100644\n--- a/src/main/java/de/bonndan/nivio/model/Group.java\n+++ b/src/main/java/de/bonndan/nivio/model/Group.java\n\n@@ -98,7 +98,7 @@ public class Group implements GroupItem, Labeled, Assessable {\n      * @return immutable copy\n      */\n     public Set<Item> getItems() {\n-        return Set.copyOf(items);\n+        return Collections.unmodifiableSet(items);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjM5MA==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486296390", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-09-10T12:29:38Z", "path": "src/main/java/de/bonndan/nivio/model/Group.java", "diffHunk": "@@ -142,4 +146,22 @@ public String toString() {\n                 \"identifier='\" + identifier + '\\'' +\n                 '}';\n     }\n+\n+    /**\n+     * Adds an item to this group.\n+     *\n+     * @param item the item to add.\n+     * @throws IllegalArgumentException if the item group field mismatches\n+     */\n+    public void addItem(Item item) {", "originalCommit": "618b6af9f7521b8424dfecda53663c240510e7e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5Njg2MQ==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486296861", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-09-10T12:30:21Z", "path": "src/main/java/de/bonndan/nivio/model/Item.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n     @NotNull\n     @Pattern(regexp = LandscapeItem.IDENTIFIER_VALIDATION)\n-    private String identifier;\n+    private final String identifier;", "originalCommit": "618b6af9f7521b8424dfecda53663c240510e7e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486297327", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-09-10T12:31:09Z", "path": "src/main/java/de/bonndan/nivio/model/Item.java", "diffHunk": "@@ -227,7 +236,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(toString());\n+        return Objects.hash(identifier);", "originalCommit": "618b6af9f7521b8424dfecda53663c240510e7e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5ODI1Nw==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486298257", "bodyText": "Shouldn't equals also check for the identifier now?", "author": "Matthimatiker", "createdAt": "2020-09-10T12:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2MDc2MQ==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486360761", "bodyText": "I'd rather say no, because equality is given if FullyIdentifiedQualifier is equal, and this means that identifier AND group are equal (group comparison is a bit more complex, and that is encapsulated in FQI)", "author": "bonndan", "createdAt": "2020-09-10T13:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MDk3NQ==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486450975", "bodyText": "I don't know enough about the internals to decide, which equality is right.\nequals()  that uses toString() looked a bit unusual.\nWe just have to make that hashCode() and equals() fit together: If 2 objects are equal, they always must return the same hash code.", "author": "Matthimatiker", "createdAt": "2020-09-10T15:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDUzMw==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486300533", "bodyText": "Adding a constructor for this case might increase readability of item construction, as the reader does not have to reason about null.", "author": "Matthimatiker", "createdAt": "2020-09-10T12:36:32Z", "path": "src/test/java/de/bonndan/nivio/assessment/kpi/LifecycleKPITest.java", "diffHunk": "@@ -24,8 +24,7 @@ public void setup() {\n \n     @Test\n     public void green() {\n-        Item item = new Item();\n-        item.setIdentifier(\"foo\");\n+        Item item = new Item(null, \"foo\");", "originalCommit": "618b6af9f7521b8424dfecda53663c240510e7e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MDQ2MA==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486350460", "bodyText": "In productive code the constructor is only used in ItemFactory, and there both args are given.", "author": "bonndan", "createdAt": "2020-09-10T13:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDUzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzc0MA==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486303740", "bodyText": "I am a bit surprised that this throws an exception.\nI would have expected that the returned Set (but not the original one) is modified.", "author": "Matthimatiker", "createdAt": "2020-09-10T12:41:38Z", "path": "src/test/java/de/bonndan/nivio/model/GroupTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package de.bonndan.nivio.model;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GroupTest {\n+\n+    @Test\n+    void doesNotAllowEmptyIdentifier() {\n+        assertThrows(Exception.class, () -> new Group(\"\"));\n+    }\n+\n+    @Test\n+    void getItemsIsImmutable() {\n+        Group g = new Group(\"foo\");\n+        assertThrows(Exception.class, () -> g.getItems().add(new Item(\"a\", \"b\")));", "originalCommit": "618b6af9f7521b8424dfecda53663c240510e7e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDgwNQ==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486344805", "bodyText": "The point is that group \"foo\" would not allow that an item of group \"a\" can be added (item.group cannot be changed anymore).\nMessing around with strings should be replaced in #212", "author": "bonndan", "createdAt": "2020-09-10T13:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MjI1NQ==", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486452255", "bodyText": "I was mainly surprised by the Set.copyOf() behavior.\nI expected a mutable copy.", "author": "Matthimatiker", "createdAt": "2020-09-10T15:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzc0MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6961ed1c245f3c25a61f902db980ece03ace8676", "url": "https://github.com/dedica-team/nivio/commit/6961ed1c245f3c25a61f902db980ece03ace8676", "message": "configurable polling frequency", "committedDate": "2020-09-10T13:45:54Z", "type": "commit"}, {"oid": "1e7cead2a0b147febe13184dac2f4fcd793afdea", "url": "https://github.com/dedica-team/nivio/commit/1e7cead2a0b147febe13184dac2f4fcd793afdea", "message": "[#266] label cleanup, writing prefixed labels to item labels", "committedDate": "2020-09-10T13:45:54Z", "type": "commit"}, {"oid": "80e1b6dab98a0a746c4c18ab8d90430e641074cb", "url": "https://github.com/dedica-team/nivio/commit/80e1b6dab98a0a746c4c18ab8d90430e641074cb", "message": "[#266] cleanup", "committedDate": "2020-09-10T13:45:54Z", "type": "commit"}]}