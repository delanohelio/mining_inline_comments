{"pr_number": 1464, "pr_title": "KYLIN-4800 Add canary tool for sparder-context", "pr_createdAt": "2020-10-28T01:49:38Z", "pr_url": "https://github.com/apache/kylin/pull/1464", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxNjQxMg==", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513216412", "bodyText": "Use new ArrayList<>() instead.", "author": "hit-lacus", "createdAt": "2020-10-28T06:58:05Z", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {\n+        return lastResponseTime;\n+    }\n+\n+    public boolean isSparderRestarting() {\n+        return sparderRestarting;\n+    }\n+\n+    public static void init() {\n+        if (!isStarted) {\n+            synchronized (SparderContextCanary.class) {\n+                if (!isStarted) {\n+                    isStarted = true;\n+                    logger.info(\"Start monitoring Sparder\");\n+                    Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(SparderContextCanary::monitor,\n+                            PERIOD_MINUTES, PERIOD_MINUTES, TimeUnit.MINUTES);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean isError() {\n+        return errorAccumulated >= THRESHOLD_TO_RESTART_SPARK;\n+    }\n+\n+    public static void monitor() {\n+        try {\n+            long startTime = System.currentTimeMillis();\n+            // check sparder context\n+            if (!SparderContext.isSparkAvailable()) {\n+                logger.info(\"Sparder is unavailable, need to restart immediately.\");\n+                errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+            } else {\n+                try {\n+                    JavaSparkContext jsc = JavaSparkContext.fromSparkContext(SparderContext.getSparkSession().sparkContext());\n+                    jsc.setLocalProperty(\"spark.scheduler.pool\", \"vip_tasks\");\n+\n+                    long t = System.currentTimeMillis();\n+                    long ret = numberCount(jsc).get(KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(),\n+                            TimeUnit.MILLISECONDS);\n+                    logger.info(\"SparderContextCanary numberCount returned successfully with value {}, takes {} ms.\", ret,\n+                            (System.currentTimeMillis() - t));\n+                    // reset errorAccumulated once good context is confirmed\n+                    errorAccumulated = 0;\n+                } catch (TimeoutException te) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount timeout, didn't return in {} ms, error {} times.\",\n+                            KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(), errorAccumulated);\n+                } catch (ExecutionException ee) {\n+                    logger.error(\"SparderContextCanary numberCount occurs exception, need to restart immediately.\", ee);\n+                    errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+                } catch (Exception e) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount occurs exception.\", e);\n+                }\n+            }\n+\n+            lastResponseTime = System.currentTimeMillis() - startTime;\n+            logger.debug(\"Sparder context errorAccumulated:{}\", errorAccumulated);\n+\n+            if (isError()) {\n+                sparderRestarting = true;\n+                try {\n+                    // Take repair action if error accumulated exceeds threshold\n+                    logger.warn(\"Repairing sparder context\");\n+                    if (System.getProperty(\"spark.local\") == \"true\") {\n+                        SparderContext.setSparkSession(KylinSparkEnv.getSparkSession());\n+                    } else {\n+                        SparderContext.restartSpark();\n+                    }\n+                } catch (Throwable th) {\n+                    logger.error(\"Restart sparder context failed.\", th);\n+                }\n+                sparderRestarting = false;\n+            }\n+        } catch (Throwable th) {\n+            logger.error(\"Error when monitoring Sparder.\", th);\n+        }\n+    }\n+\n+    // for canary\n+    private static JavaFutureAction<Long> numberCount(JavaSparkContext jsc) {\n+        List<Integer> list = new ArrayList();", "originalCommit": "daff34fcc4ac0327c9038158509bc52d8c543311", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "chunk": "diff --git a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\nindex 0d6e8e4de..d0950c1a2 100644\n--- a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n+++ b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n\n@@ -51,10 +51,12 @@ public class SparderContextCanary {\n         return errorAccumulated;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public long getLastResponseTime() {\n         return lastResponseTime;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public boolean isSparderRestarting() {\n         return sparderRestarting;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODM2MA==", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218360", "bodyText": "Add @SuppressWarnings(\"unused\") to suppress warning in IDE, or remove this method.", "author": "hit-lacus", "createdAt": "2020-10-28T07:03:25Z", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {", "originalCommit": "daff34fcc4ac0327c9038158509bc52d8c543311", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "chunk": "diff --git a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\nindex 0d6e8e4de..d0950c1a2 100644\n--- a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n+++ b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n\n@@ -51,10 +51,12 @@ public class SparderContextCanary {\n         return errorAccumulated;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public long getLastResponseTime() {\n         return lastResponseTime;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public boolean isSparderRestarting() {\n         return sparderRestarting;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODQ3Mg==", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218472", "bodyText": "Same here~", "author": "hit-lacus", "createdAt": "2020-10-28T07:03:46Z", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {", "originalCommit": "daff34fcc4ac0327c9038158509bc52d8c543311", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "chunk": "diff --git a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\nindex 0d6e8e4de..d0950c1a2 100644\n--- a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n+++ b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n\n@@ -51,10 +51,12 @@ public class SparderContextCanary {\n         return errorAccumulated;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public long getLastResponseTime() {\n         return lastResponseTime;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public boolean isSparderRestarting() {\n         return sparderRestarting;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxODkwNQ==", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513218905", "bodyText": "Use == or equals ?", "author": "hit-lacus", "createdAt": "2020-10-28T07:04:49Z", "path": "kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kylin.query.monitor;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.spark.api.java.JavaFutureAction;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.KylinSparkEnv;\n+import org.apache.spark.sql.SparderContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class SparderContextCanary {\n+    private static final Logger logger = LoggerFactory.getLogger(SparderContextCanary.class);\n+    private static volatile boolean isStarted = false;\n+\n+    private static final int THRESHOLD_TO_RESTART_SPARK = KylinConfig.getInstanceFromEnv().getThresholdToRestartSparder();\n+    private static final int PERIOD_MINUTES = KylinConfig.getInstanceFromEnv().getSparderCanaryPeriodMinutes();\n+\n+    private static volatile int errorAccumulated = 0;\n+    private static volatile long lastResponseTime = -1;\n+    private static volatile boolean sparderRestarting = false;\n+\n+    private SparderContextCanary() {\n+    }\n+\n+    public static int getErrorAccumulated() {\n+        return errorAccumulated;\n+    }\n+\n+    public long getLastResponseTime() {\n+        return lastResponseTime;\n+    }\n+\n+    public boolean isSparderRestarting() {\n+        return sparderRestarting;\n+    }\n+\n+    public static void init() {\n+        if (!isStarted) {\n+            synchronized (SparderContextCanary.class) {\n+                if (!isStarted) {\n+                    isStarted = true;\n+                    logger.info(\"Start monitoring Sparder\");\n+                    Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(SparderContextCanary::monitor,\n+                            PERIOD_MINUTES, PERIOD_MINUTES, TimeUnit.MINUTES);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static boolean isError() {\n+        return errorAccumulated >= THRESHOLD_TO_RESTART_SPARK;\n+    }\n+\n+    public static void monitor() {\n+        try {\n+            long startTime = System.currentTimeMillis();\n+            // check sparder context\n+            if (!SparderContext.isSparkAvailable()) {\n+                logger.info(\"Sparder is unavailable, need to restart immediately.\");\n+                errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+            } else {\n+                try {\n+                    JavaSparkContext jsc = JavaSparkContext.fromSparkContext(SparderContext.getSparkSession().sparkContext());\n+                    jsc.setLocalProperty(\"spark.scheduler.pool\", \"vip_tasks\");\n+\n+                    long t = System.currentTimeMillis();\n+                    long ret = numberCount(jsc).get(KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(),\n+                            TimeUnit.MILLISECONDS);\n+                    logger.info(\"SparderContextCanary numberCount returned successfully with value {}, takes {} ms.\", ret,\n+                            (System.currentTimeMillis() - t));\n+                    // reset errorAccumulated once good context is confirmed\n+                    errorAccumulated = 0;\n+                } catch (TimeoutException te) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount timeout, didn't return in {} ms, error {} times.\",\n+                            KylinConfig.getInstanceFromEnv().getSparderCanaryErrorResponseMs(), errorAccumulated);\n+                } catch (ExecutionException ee) {\n+                    logger.error(\"SparderContextCanary numberCount occurs exception, need to restart immediately.\", ee);\n+                    errorAccumulated = Math.max(errorAccumulated + 1, THRESHOLD_TO_RESTART_SPARK);\n+                } catch (Exception e) {\n+                    errorAccumulated++;\n+                    logger.error(\"SparderContextCanary numberCount occurs exception.\", e);\n+                }\n+            }\n+\n+            lastResponseTime = System.currentTimeMillis() - startTime;\n+            logger.debug(\"Sparder context errorAccumulated:{}\", errorAccumulated);\n+\n+            if (isError()) {\n+                sparderRestarting = true;\n+                try {\n+                    // Take repair action if error accumulated exceeds threshold\n+                    logger.warn(\"Repairing sparder context\");\n+                    if (System.getProperty(\"spark.local\") == \"true\") {", "originalCommit": "daff34fcc4ac0327c9038158509bc52d8c543311", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "chunk": "diff --git a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\nindex 0d6e8e4de..d0950c1a2 100644\n--- a/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n+++ b/kylin-spark-project/kylin-spark-query/src/main/java/org/apache/kylin/query/monitor/SparderContextCanary.java\n\n@@ -51,10 +51,12 @@ public class SparderContextCanary {\n         return errorAccumulated;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public long getLastResponseTime() {\n         return lastResponseTime;\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public boolean isSparderRestarting() {\n         return sparderRestarting;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIxOTYzOQ==", "url": "https://github.com/apache/kylin/pull/1464#discussion_r513219639", "bodyText": "I wonder if we can see any short but clear comments here for Kylin user.", "author": "hit-lacus", "createdAt": "2020-10-28T07:06:42Z", "path": "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java", "diffHunk": "@@ -2879,6 +2879,18 @@ public boolean isAutoStartSparder() {\n         return Boolean.parseBoolean(this.getOptional(\"kylin.query.auto-sparder-context\", \"false\"));\n     }\n \n+    public int getSparderCanaryErrorResponseMs() {", "originalCommit": "daff34fcc4ac0327c9038158509bc52d8c543311", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "chunk": "diff --git a/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java b/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java\nindex a33b88e5e..45afaa276 100644\n--- a/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java\n+++ b/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java\n\n@@ -2879,14 +2879,23 @@ public abstract class KylinConfigBase implements Serializable {\n         return Boolean.parseBoolean(this.getOptional(\"kylin.query.auto-sparder-context\", \"false\"));\n     }\n \n+    /**\n+     * Sparder is considered unavailable when the check task is unresponsive for more than this time\n+     */\n     public int getSparderCanaryErrorResponseMs() {\n         return Integer.parseInt(this.getOptional(\"kylin.canary.sparder-context-error-response-ms\", \"3000\"));\n     }\n \n+    /**\n+     * The maximum number of restart sparder when sparder is not available\n+     */\n     public int getThresholdToRestartSparder() {\n         return Integer.parseInt(this.getOptional(\"kylin.canary.sparder-context-threshold-to-restart-spark\", \"3\"));\n     }\n \n+    /**\n+     * Time period between two sparder health checks\n+     */\n     public int getSparderCanaryPeriodMinutes() {\n         return Integer.parseInt(this.getOptional(\"kylin.canary.sparder-context-period-min\", \"3\"));\n     }\n"}}, {"oid": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "url": "https://github.com/apache/kylin/commit/9d745e5b3743b13f6cfb252b4396d5c6129d0510", "message": "KYLIN-4800 Add canary tool for sparder-context", "committedDate": "2020-10-28T08:12:11Z", "type": "commit"}, {"oid": "9d745e5b3743b13f6cfb252b4396d5c6129d0510", "url": "https://github.com/apache/kylin/commit/9d745e5b3743b13f6cfb252b4396d5c6129d0510", "message": "KYLIN-4800 Add canary tool for sparder-context", "committedDate": "2020-10-28T08:12:11Z", "type": "forcePushed"}]}