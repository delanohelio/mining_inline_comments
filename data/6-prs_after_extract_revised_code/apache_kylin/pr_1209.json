{"pr_number": 1209, "pr_title": "KYLIN-4491 Support presto pushdown", "pr_createdAt": "2020-05-14T06:46:44Z", "pr_url": "https://github.com/apache/kylin/pull/1209", "timeline": [{"oid": "ebb98de69ee690a6a5bb97ca3f07eae1ab127490", "url": "https://github.com/apache/kylin/commit/ebb98de69ee690a6a5bb97ca3f07eae1ab127490", "message": "KYLIN-4491 Support presto pushdown", "committedDate": "2020-05-14T06:42:37Z", "type": "commit"}, {"oid": "9e952471fa1aa61a4aa5687fc7774a16d2db5376", "url": "https://github.com/apache/kylin/commit/9e952471fa1aa61a4aa5687fc7774a16d2db5376", "message": "KYLIN-4491 add function to default.xml", "committedDate": "2020-05-14T09:22:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MDcwNg==", "url": "https://github.com/apache/kylin/pull/1209#discussion_r425240706", "bodyText": "Could you please kindly explain the magic number 2000 means? I check the JDK7 Constant value, 2000 is refer to JAVA_OBJECT, not DECIMAL, am I right?", "author": "hit-lacus", "createdAt": "2020-05-14T15:46:57Z", "path": "datasource-sdk/src/main/java/org/apache/kylin/sdk/datasource/adaptor/PrestoAdaptor.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kylin.sdk.datasource.adaptor;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.sql.rowset.CachedRowSet;\n+\n+public class PrestoAdaptor extends DefaultAdaptor {\n+\n+    private Pattern patternASYM = Pattern.compile(\"BETWEEN(\\\\s*)ASYMMETRIC\");\n+    private Pattern patternSYM = Pattern.compile(\"BETWEEN(\\\\s*)SYMMETRIC\");\n+    private Pattern patternTrim = Pattern.compile(\"TRIM\\\\(.*BOTH.*FROM\\\\s+(.+)\\\\)\");\n+    private Pattern patternOffset = Pattern.compile(\"(?i)OFFSET\\\\s\\\\d+\");\n+\n+    public PrestoAdaptor(AdaptorConfig config) throws Exception {\n+        super(config);\n+    }\n+\n+    @Override\n+    public String fixSql(String sql) {\n+        sql = resolveBetweenAsymmetricSymmetric(sql);\n+        sql = convertTrim(sql);\n+        sql = convertOffset(sql);\n+        return sql;\n+    }\n+\n+    @Override\n+    public int toKylinTypeId(String type, int typeId) {\n+        if (2000 == typeId) {", "originalCommit": "9e952471fa1aa61a4aa5687fc7774a16d2db5376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU4OTgyOA==", "url": "https://github.com/apache/kylin/pull/1209#discussion_r425589828", "bodyText": "Looks like it is presto's specific behaviour of mapping DECIMAL to JAVA_OBJECT.", "author": "hit-lacus", "createdAt": "2020-05-15T06:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MDcwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMTI0Ng==", "url": "https://github.com/apache/kylin/pull/1209#discussion_r426201246", "bodyText": "The name of PushDownRunnerOtherImpl is not well defined. Since it is the the advanced version of elder PushDownRunnerJdbcImpl, and reuse some logic in Data Source SDK. Maybe we change is name to something like PushDownRunnerJdbcAdvancedImpl? What do you think @shaofengshi ?", "author": "hit-lacus", "createdAt": "2020-05-16T23:47:27Z", "path": "query/src/main/java/org/apache/kylin/query/pushdown/PushDownRunnerOtherImpl.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kylin.query.pushdown;\n+\n+import org.apache.kylin.common.KylinConfig;\n+import org.apache.kylin.common.util.DBUtils;\n+import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;\n+import org.apache.kylin.sdk.datasource.framework.JdbcConnector;\n+import org.apache.kylin.sdk.datasource.framework.SourceConnectorFactory;\n+import org.apache.kylin.source.adhocquery.AbstractPushdownRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class PushDownRunnerOtherImpl extends AbstractPushdownRunner {", "originalCommit": "9e952471fa1aa61a4aa5687fc7774a16d2db5376", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "325b6c14741eef705639d7a28ed703f24a568613", "chunk": "diff --git a/query/src/main/java/org/apache/kylin/query/pushdown/PushDownRunnerOtherImpl.java b/query/src/main/java/org/apache/kylin/query/pushdown/PushDownRunnerOtherImpl.java\ndeleted file mode 100644\nindex 92bb19199..000000000\n--- a/query/src/main/java/org/apache/kylin/query/pushdown/PushDownRunnerOtherImpl.java\n+++ /dev/null\n\n@@ -1,113 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kylin.query.pushdown;\n-\n-import org.apache.kylin.common.KylinConfig;\n-import org.apache.kylin.common.util.DBUtils;\n-import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;\n-import org.apache.kylin.sdk.datasource.framework.JdbcConnector;\n-import org.apache.kylin.sdk.datasource.framework.SourceConnectorFactory;\n-import org.apache.kylin.source.adhocquery.AbstractPushdownRunner;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.sql.Connection;\n-import java.sql.ResultSet;\n-import java.sql.ResultSetMetaData;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-public class PushDownRunnerOtherImpl extends AbstractPushdownRunner {\n-\n-    public static final Logger logger = LoggerFactory.getLogger(PushDownRunnerOtherImpl.class);\n-\n-    private JdbcConnector dataSource;\n-\n-    @Override\n-    public void init(KylinConfig config) {\n-        dataSource = SourceConnectorFactory.getPushDownConnector(config);\n-    }\n-\n-    @Override\n-    public void executeQuery(String sql, List<List<String>> results, List<SelectedColumnMeta> columnMetas)\n-            throws Exception {\n-        //extract column metadata\n-        ResultSet rs = null;\n-        ResultSetMetaData metaData;\n-        int columnCount;\n-        try (Connection conn = dataSource.getConnection(); Statement state = conn.createStatement()) {\n-            rs = state.executeQuery(sql);\n-\n-            extractResults(rs, results);\n-            metaData = rs.getMetaData();\n-            columnCount = metaData.getColumnCount();\n-\n-            // fill in selected column meta\n-            for (int i = 1; i <= columnCount; ++i) {\n-                int kylinTypeId = dataSource.toKylinTypeId(metaData.getColumnTypeName(i), metaData.getColumnType(i));\n-                String kylinTypeName = dataSource.toKylinTypeName(kylinTypeId);\n-                columnMetas.add(new SelectedColumnMeta(metaData.isAutoIncrement(i), metaData.isCaseSensitive(i), false,\n-                        metaData.isCurrency(i), metaData.isNullable(i), false, metaData.getColumnDisplaySize(i),\n-                        metaData.getColumnLabel(i), metaData.getColumnName(i), null, null, null,\n-                        metaData.getPrecision(i), metaData.getScale(i), kylinTypeId, kylinTypeName,\n-                        metaData.isReadOnly(i), false, false));\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"executeQuery failed\", e);\n-        } finally {\n-            DBUtils.closeQuietly(rs);\n-        }\n-    }\n-\n-    @Override\n-    public void executeUpdate(String sql) throws Exception {\n-        try {\n-            dataSource.executeUpdate(sql);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"executeUpdate failed\", e);\n-        }\n-    }\n-\n-    @Override\n-    public String convertSql(KylinConfig kylinConfig, String sql, String project, String defaultSchema,\n-            boolean isPrepare) {\n-        String converted = sql;\n-\n-        // SDK convert\n-        String ret = dataSource.convertSql(converted);\n-        if (!converted.equals(ret)) {\n-            logger.debug(\"the query is converted to {} after applying SDK converter.\", ret);\n-        }\n-        return ret;\n-    }\n-\n-    public void extractResults(ResultSet resultSet, List<List<String>> results) throws SQLException {\n-        List<String> oneRow = new LinkedList<>();\n-\n-        while (resultSet.next()) {\n-            for (int i = 0; i < resultSet.getMetaData().getColumnCount(); i++) {\n-                oneRow.add((resultSet.getString(i + 1)));\n-            }\n-\n-            results.add(new LinkedList<>(oneRow));\n-            oneRow.clear();\n-        }\n-    }\n-}\n"}}, {"oid": "b23371f7b0d4506a902578a2797dddee030226be", "url": "https://github.com/apache/kylin/commit/b23371f7b0d4506a902578a2797dddee030226be", "message": "KYLIN-4491 modify default.xml config", "committedDate": "2020-05-19T09:36:11Z", "type": "commit"}, {"oid": "325b6c14741eef705639d7a28ed703f24a568613", "url": "https://github.com/apache/kylin/commit/325b6c14741eef705639d7a28ed703f24a568613", "message": "KYLIN-4491 modify getJdbcConnector config", "committedDate": "2020-06-02T07:06:25Z", "type": "commit"}]}