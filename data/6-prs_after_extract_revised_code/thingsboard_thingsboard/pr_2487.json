{"pr_number": 2487, "pr_title": "created TbCheckAlarmStatusNode", "pr_createdAt": "2020-03-05T12:49:28Z", "pr_url": "https://github.com/thingsboard/thingsboard/pull/2487", "timeline": [{"oid": "f2e53085ab9c31be17a369d9932c94ea4779941d", "url": "https://github.com/thingsboard/thingsboard/commit/f2e53085ab9c31be17a369d9932c94ea4779941d", "message": "created TbCheckAlarmStatusNode", "committedDate": "2020-03-04T16:19:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NjQ3Ng==", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388296476", "bodyText": "Please use \"True\"  and \"False\" in case alarm is present. Please use Failure in case no such alarmId found or failure of DB query, etc.", "author": "ashvayka", "createdAt": "2020-03-05T13:37:14Z", "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.util.concurrent.FutureCallback;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.thingsboard.rule.engine.api.RuleNode;\n+import org.thingsboard.rule.engine.api.TbContext;\n+import org.thingsboard.rule.engine.api.TbNode;\n+import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n+import org.thingsboard.rule.engine.api.TbNodeException;\n+import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n+import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.plugin.ComponentType;\n+import org.thingsboard.server.common.msg.TbMsg;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n+\n+@Slf4j\n+@RuleNode(\n+        type = ComponentType.FILTER,\n+        name = \"checks alarm status\",\n+        configClazz = TbCheckAlarmStatusNodeConfig.class,\n+        nodeDescription = \"Checks alarm status.\",\n+        nodeDetails = \"If the alarm status matches the specified one - msg is success if does not match - msg is failure.\",\n+        uiResources = {\"static/rulenode/rulenode-core-config.js\"},\n+        configDirective = \"tbFilterNodeCheckAlarmStatusConfig\")\n+public class TbCheckAlarmStatusNode implements TbNode {\n+    private TbCheckAlarmStatusNodeConfig config;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void init(TbContext tbContext, TbNodeConfiguration configuration) throws TbNodeException {\n+        this.config = TbNodeUtils.convert(configuration, TbCheckAlarmStatusNodeConfig.class);\n+    }\n+\n+    @Override\n+    public void onMsg(TbContext ctx, TbMsg msg) throws TbNodeException {\n+        try {\n+            Alarm alarm = mapper.readValue(msg.getData(), Alarm.class);\n+\n+            ListenableFuture<Alarm> latest = ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(), alarm.getId());\n+\n+            Futures.addCallback(latest, new FutureCallback<Alarm>() {\n+                @Override\n+                public void onSuccess(@Nullable Alarm result) {\n+                    boolean isPresent = false;\n+                    for (String alarmStatus : config.getAlarmStatusList()) {\n+                        if (alarm.getStatus().name().equals(alarmStatus)) {\n+                            isPresent = true;\n+                            break;\n+                        }\n+                    }\n+\n+                    if (isPresent) {\n+                        ctx.tellNext(msg, SUCCESS);", "originalCommit": "f2e53085ab9c31be17a369d9932c94ea4779941d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8dca536c4e6ec058539457e2eeda3871de06c87", "chunk": "diff --git a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\nindex 30eeb9219a..e0ec9300d4 100644\n--- a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\n+++ b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\n\n@@ -27,11 +27,14 @@ import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n import org.thingsboard.rule.engine.api.TbNodeException;\n import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.alarm.AlarmId;\n+import org.thingsboard.server.common.data.alarm.AlarmStatus;\n import org.thingsboard.server.common.data.plugin.ComponentType;\n import org.thingsboard.server.common.msg.TbMsg;\n \n import javax.annotation.Nullable;\n import java.io.IOException;\n+import java.util.UUID;\n \n import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzA2MQ==", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388297061", "bodyText": "Check Alarm for Null. If null - return Failure", "author": "ashvayka", "createdAt": "2020-03-05T13:38:21Z", "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.util.concurrent.FutureCallback;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.thingsboard.rule.engine.api.RuleNode;\n+import org.thingsboard.rule.engine.api.TbContext;\n+import org.thingsboard.rule.engine.api.TbNode;\n+import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n+import org.thingsboard.rule.engine.api.TbNodeException;\n+import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n+import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.plugin.ComponentType;\n+import org.thingsboard.server.common.msg.TbMsg;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n+\n+@Slf4j\n+@RuleNode(\n+        type = ComponentType.FILTER,\n+        name = \"checks alarm status\",\n+        configClazz = TbCheckAlarmStatusNodeConfig.class,\n+        nodeDescription = \"Checks alarm status.\",\n+        nodeDetails = \"If the alarm status matches the specified one - msg is success if does not match - msg is failure.\",\n+        uiResources = {\"static/rulenode/rulenode-core-config.js\"},\n+        configDirective = \"tbFilterNodeCheckAlarmStatusConfig\")\n+public class TbCheckAlarmStatusNode implements TbNode {\n+    private TbCheckAlarmStatusNodeConfig config;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void init(TbContext tbContext, TbNodeConfiguration configuration) throws TbNodeException {\n+        this.config = TbNodeUtils.convert(configuration, TbCheckAlarmStatusNodeConfig.class);\n+    }\n+\n+    @Override\n+    public void onMsg(TbContext ctx, TbMsg msg) throws TbNodeException {\n+        try {\n+            Alarm alarm = mapper.readValue(msg.getData(), Alarm.class);\n+\n+            ListenableFuture<Alarm> latest = ctx.getAlarmService().findAlarmByIdAsync(ctx.getTenantId(), alarm.getId());\n+\n+            Futures.addCallback(latest, new FutureCallback<Alarm>() {\n+                @Override\n+                public void onSuccess(@Nullable Alarm result) {\n+                    boolean isPresent = false;", "originalCommit": "f2e53085ab9c31be17a369d9932c94ea4779941d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8dca536c4e6ec058539457e2eeda3871de06c87", "chunk": "diff --git a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\nindex 30eeb9219a..e0ec9300d4 100644\n--- a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\n+++ b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\n\n@@ -27,11 +27,14 @@ import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n import org.thingsboard.rule.engine.api.TbNodeException;\n import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.alarm.AlarmId;\n+import org.thingsboard.server.common.data.alarm.AlarmStatus;\n import org.thingsboard.server.common.data.plugin.ComponentType;\n import org.thingsboard.server.common.msg.TbMsg;\n \n import javax.annotation.Nullable;\n import java.io.IOException;\n+import java.util.UUID;\n \n import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzY3NQ==", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388297675", "bodyText": "just get the id of the alarm, no need to parse all the alarm, it may be big", "author": "ashvayka", "createdAt": "2020-03-05T13:39:23Z", "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.util.concurrent.FutureCallback;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.thingsboard.rule.engine.api.RuleNode;\n+import org.thingsboard.rule.engine.api.TbContext;\n+import org.thingsboard.rule.engine.api.TbNode;\n+import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n+import org.thingsboard.rule.engine.api.TbNodeException;\n+import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n+import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.plugin.ComponentType;\n+import org.thingsboard.server.common.msg.TbMsg;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n+import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n+\n+@Slf4j\n+@RuleNode(\n+        type = ComponentType.FILTER,\n+        name = \"checks alarm status\",\n+        configClazz = TbCheckAlarmStatusNodeConfig.class,\n+        nodeDescription = \"Checks alarm status.\",\n+        nodeDetails = \"If the alarm status matches the specified one - msg is success if does not match - msg is failure.\",\n+        uiResources = {\"static/rulenode/rulenode-core-config.js\"},\n+        configDirective = \"tbFilterNodeCheckAlarmStatusConfig\")\n+public class TbCheckAlarmStatusNode implements TbNode {\n+    private TbCheckAlarmStatusNodeConfig config;\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void init(TbContext tbContext, TbNodeConfiguration configuration) throws TbNodeException {\n+        this.config = TbNodeUtils.convert(configuration, TbCheckAlarmStatusNodeConfig.class);\n+    }\n+\n+    @Override\n+    public void onMsg(TbContext ctx, TbMsg msg) throws TbNodeException {\n+        try {\n+            Alarm alarm = mapper.readValue(msg.getData(), Alarm.class);", "originalCommit": "f2e53085ab9c31be17a369d9932c94ea4779941d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8dca536c4e6ec058539457e2eeda3871de06c87", "chunk": "diff --git a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\nindex 30eeb9219a..e0ec9300d4 100644\n--- a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\n+++ b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNode.java\n\n@@ -27,11 +27,14 @@ import org.thingsboard.rule.engine.api.TbNodeConfiguration;\n import org.thingsboard.rule.engine.api.TbNodeException;\n import org.thingsboard.rule.engine.api.util.TbNodeUtils;\n import org.thingsboard.server.common.data.alarm.Alarm;\n+import org.thingsboard.server.common.data.alarm.AlarmId;\n+import org.thingsboard.server.common.data.alarm.AlarmStatus;\n import org.thingsboard.server.common.data.plugin.ComponentType;\n import org.thingsboard.server.common.msg.TbMsg;\n \n import javax.annotation.Nullable;\n import java.io.IOException;\n+import java.util.UUID;\n \n import static org.thingsboard.rule.engine.api.TbRelationTypes.FAILURE;\n import static org.thingsboard.rule.engine.api.TbRelationTypes.SUCCESS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5ODA5MQ==", "url": "https://github.com/thingsboard/thingsboard/pull/2487#discussion_r388298091", "bodyText": "Maybe add some default values. Active Ack and Active UnAck.", "author": "ashvayka", "createdAt": "2020-03-05T13:40:08Z", "path": "rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNodeConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.rule.engine.filter;\n+\n+import lombok.Data;\n+import org.thingsboard.rule.engine.api.NodeConfiguration;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Data\n+public class TbCheckAlarmStatusNodeConfig implements NodeConfiguration<TbCheckAlarmStatusNodeConfig> {\n+    private List<String> alarmStatusList;\n+\n+    @Override\n+    public TbCheckAlarmStatusNodeConfig defaultConfiguration() {\n+        TbCheckAlarmStatusNodeConfig config = new TbCheckAlarmStatusNodeConfig();\n+        config.setAlarmStatusList(Collections.emptyList());", "originalCommit": "f2e53085ab9c31be17a369d9932c94ea4779941d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8dca536c4e6ec058539457e2eeda3871de06c87", "chunk": "diff --git a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNodeConfig.java b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNodeConfig.java\nindex 81c1e22120..282027335a 100644\n--- a/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNodeConfig.java\n+++ b/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/filter/TbCheckAlarmStatusNodeConfig.java\n\n@@ -17,18 +17,19 @@ package org.thingsboard.rule.engine.filter;\n \n import lombok.Data;\n import org.thingsboard.rule.engine.api.NodeConfiguration;\n+import org.thingsboard.server.common.data.alarm.AlarmStatus;\n \n-import java.util.Collections;\n+import java.util.Arrays;\n import java.util.List;\n \n @Data\n public class TbCheckAlarmStatusNodeConfig implements NodeConfiguration<TbCheckAlarmStatusNodeConfig> {\n-    private List<String> alarmStatusList;\n+    private List<AlarmStatus> alarmStatusList;\n \n     @Override\n     public TbCheckAlarmStatusNodeConfig defaultConfiguration() {\n         TbCheckAlarmStatusNodeConfig config = new TbCheckAlarmStatusNodeConfig();\n-        config.setAlarmStatusList(Collections.emptyList());\n+        config.setAlarmStatusList(Arrays.asList(AlarmStatus.ACTIVE_ACK, AlarmStatus.ACTIVE_UNACK));\n         return config;\n     }\n }\n"}}, {"oid": "a8dca536c4e6ec058539457e2eeda3871de06c87", "url": "https://github.com/thingsboard/thingsboard/commit/a8dca536c4e6ec058539457e2eeda3871de06c87", "message": "improvements", "committedDate": "2020-03-05T14:02:42Z", "type": "commit"}]}