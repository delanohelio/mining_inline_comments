{"pr_number": 3834, "pr_title": "added ability to get attributes and timeseries keys by entity query", "pr_createdAt": "2020-12-10T15:55:56Z", "pr_url": "https://github.com/thingsboard/thingsboard/pull/3834", "timeline": [{"oid": "9a03fbadc75d6ff3f1a08467645a2314224caa65", "url": "https://github.com/thingsboard/thingsboard/commit/9a03fbadc75d6ff3f1a08467645a2314224caa65", "message": "added ability to get attributes and timeseries keys by entity query", "committedDate": "2020-12-10T15:55:16Z", "type": "commit"}, {"oid": "f63b4b1f7c3b843b391cb244307538400439e9e4", "url": "https://github.com/thingsboard/thingsboard/commit/f63b4b1f7c3b843b391cb244307538400439e9e4", "message": "created findEntityTimeseriesAndAttributesKeysByQuery instead findEntityTimeseriesKeysByQuery and findEntityAttributesKeysByQuery", "committedDate": "2020-12-15T14:16:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4ODMwOQ==", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544088309", "bodyText": "constant", "author": "ashvayka", "createdAt": "2020-12-16T08:02:55Z", "path": "application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java", "diffHunk": "@@ -76,4 +80,26 @@ public long countEntitiesByQuery(@RequestBody EntityCountQuery query) throws Thi\n             throw handleException(e);\n         }\n     }\n+\n+    @PreAuthorize(\"hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')\")\n+    @RequestMapping(value = \"/entitiesQuery/find/keys/timeseries\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public DeferredResult<ResponseEntity> findEntityTimeseriesAndAttributesKeysByQuery(@RequestBody EntityDataQuery query,\n+                                                                                       @RequestParam(\"timeseries\") boolean isTimeseries,\n+                                                                                       @RequestParam(\"attributes\") boolean isAttributes) throws ThingsboardException {\n+        TenantId tenantId = getTenantId();\n+        checkNotNull(query);\n+        try {\n+            EntityDataPageLink pageLink = query.getPageLink();\n+            if (pageLink.getPageSize() > 100) {\n+                pageLink.setPageSize(100);", "originalCommit": "f63b4b1f7c3b843b391cb244307538400439e9e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfb82bf28fb13ed7cf590eb37366487e7a6a80da", "chunk": "diff --git a/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java b/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java\nindex 1fa802e18a..4325d6f2be 100644\n--- a/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java\n+++ b/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java\n\n@@ -91,12 +93,10 @@ public class EntityQueryController extends BaseController {\n         checkNotNull(query);\n         try {\n             EntityDataPageLink pageLink = query.getPageLink();\n-            if (pageLink.getPageSize() > 100) {\n-                pageLink.setPageSize(100);\n+            if (pageLink.getPageSize() > MAX_PAGE_SIZE) {\n+                pageLink.setPageSize(MAX_PAGE_SIZE);\n             }\n-            DeferredResult<ResponseEntity> response = new DeferredResult<>();\n-            entityQueryService.getKeysByQueryCallback(getCurrentUser(), tenantId, query, isTimeseries, isAttributes, response);\n-            return response;\n+            return entityQueryService.getKeysByQuery(getCurrentUser(), tenantId, query, isTimeseries, isAttributes);\n         } catch (Exception e) {\n             throw handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4ODY2OA==", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544088668", "bodyText": "getKeysByQuery", "author": "ashvayka", "createdAt": "2020-12-16T08:03:48Z", "path": "application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java", "diffHunk": "@@ -76,4 +80,26 @@ public long countEntitiesByQuery(@RequestBody EntityCountQuery query) throws Thi\n             throw handleException(e);\n         }\n     }\n+\n+    @PreAuthorize(\"hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')\")\n+    @RequestMapping(value = \"/entitiesQuery/find/keys/timeseries\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public DeferredResult<ResponseEntity> findEntityTimeseriesAndAttributesKeysByQuery(@RequestBody EntityDataQuery query,\n+                                                                                       @RequestParam(\"timeseries\") boolean isTimeseries,\n+                                                                                       @RequestParam(\"attributes\") boolean isAttributes) throws ThingsboardException {\n+        TenantId tenantId = getTenantId();\n+        checkNotNull(query);\n+        try {\n+            EntityDataPageLink pageLink = query.getPageLink();\n+            if (pageLink.getPageSize() > 100) {\n+                pageLink.setPageSize(100);\n+            }\n+            DeferredResult<ResponseEntity> response = new DeferredResult<>();\n+            entityQueryService.getKeysByQueryCallback(getCurrentUser(), tenantId, query, isTimeseries, isAttributes, response);", "originalCommit": "f63b4b1f7c3b843b391cb244307538400439e9e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfb82bf28fb13ed7cf590eb37366487e7a6a80da", "chunk": "diff --git a/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java b/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java\nindex 1fa802e18a..4325d6f2be 100644\n--- a/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java\n+++ b/application/src/main/java/org/thingsboard/server/controller/EntityQueryController.java\n\n@@ -91,12 +93,10 @@ public class EntityQueryController extends BaseController {\n         checkNotNull(query);\n         try {\n             EntityDataPageLink pageLink = query.getPageLink();\n-            if (pageLink.getPageSize() > 100) {\n-                pageLink.setPageSize(100);\n+            if (pageLink.getPageSize() > MAX_PAGE_SIZE) {\n+                pageLink.setPageSize(MAX_PAGE_SIZE);\n             }\n-            DeferredResult<ResponseEntity> response = new DeferredResult<>();\n-            entityQueryService.getKeysByQueryCallback(getCurrentUser(), tenantId, query, isTimeseries, isAttributes, response);\n-            return response;\n+            return entityQueryService.getKeysByQuery(getCurrentUser(), tenantId, query, isTimeseries, isAttributes);\n         } catch (Exception e) {\n             throw handleException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4OTI1Nw==", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544089257", "bodyText": "replyWithEmptyResponse", "author": "ashvayka", "createdAt": "2020-12-16T08:04:57Z", "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "diffHunk": "@@ -89,6 +123,107 @@ public long countEntitiesByQuery(SecurityUser securityUser, EntityCountQuery que\n         }\n     }\n \n+    @Override\n+    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+        if (!isAttributes && !isTimeseries) {\n+            getEmptyResponseCallback(response);", "originalCommit": "f63b4b1f7c3b843b391cb244307538400439e9e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfb82bf28fb13ed7cf590eb37366487e7a6a80da", "chunk": "diff --git a/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java b/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\nindex 337e2cdb07..d8be5040c9 100644\n--- a/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\n+++ b/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\n\n@@ -123,25 +123,38 @@ public class DefaultEntityQueryService implements EntityQueryService {\n         }\n     }\n \n+    private EntityDataQuery buildEntityDataQuery(AlarmDataQuery query) {\n+        EntityDataSortOrder sortOrder = query.getPageLink().getSortOrder();\n+        EntityDataSortOrder entitiesSortOrder;\n+        if (sortOrder == null || sortOrder.getKey().getType().equals(EntityKeyType.ALARM_FIELD)) {\n+            entitiesSortOrder = new EntityDataSortOrder(new EntityKey(EntityKeyType.ENTITY_FIELD, ModelConstants.CREATED_TIME_PROPERTY));\n+        } else {\n+            entitiesSortOrder = sortOrder;\n+        }\n+        EntityDataPageLink edpl = new EntityDataPageLink(maxEntitiesPerAlarmSubscription, 0, null, entitiesSortOrder);\n+        return new EntityDataQuery(query.getEntityFilter(), edpl, query.getEntityFields(), query.getLatestValues(), query.getKeyFilters());\n+    }\n+\n     @Override\n-    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n-                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+    public DeferredResult<ResponseEntity> getKeysByQuery(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                                         boolean isTimeseries, boolean isAttributes) {\n+        final DeferredResult<ResponseEntity> response = new DeferredResult<>();\n         if (!isAttributes && !isTimeseries) {\n-            getEmptyResponseCallback(response);\n-            return;\n+            replyWithEmptyResponse(response);\n+            return response;\n         }\n \n         List<EntityId> ids = this.findEntityDataByQuery(securityUser, query).getData().stream()\n                 .map(EntityData::getEntityId)\n                 .collect(Collectors.toList());\n         if (ids.isEmpty()) {\n-            getEmptyResponseCallback(response);\n-            return;\n+            replyWithEmptyResponse(response);\n+            return response;\n         }\n \n         Set<EntityType> types = ids.stream().map(EntityId::getEntityType).collect(Collectors.toSet());\n-        ListenableFuture<List<String>> timeseriesKeysFuture;\n-        ListenableFuture<List<String>> attributesKeysFuture;\n+        final ListenableFuture<List<String>> timeseriesKeysFuture;\n+        final ListenableFuture<List<String>> attributesKeysFuture;\n \n         if (isTimeseries) {\n             timeseriesKeysFuture = dbCallbackExecutor.submit(() -> timeseriesService.findAllKeysByEntityIds(tenantId, ids));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5MjQwNw==", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544092407", "bodyText": "spaces", "author": "ashvayka", "createdAt": "2020-12-16T08:10:36Z", "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "diffHunk": "@@ -89,6 +123,107 @@ public long countEntitiesByQuery(SecurityUser securityUser, EntityCountQuery que\n         }\n     }\n \n+    @Override\n+    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+        if (!isAttributes && !isTimeseries) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        List<EntityId> ids = this.findEntityDataByQuery(securityUser, query).getData().stream()\n+                .map(EntityData::getEntityId)\n+                .collect(Collectors.toList());\n+        if (ids.isEmpty()) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        Set<EntityType> types = ids.stream().map(EntityId::getEntityType).collect(Collectors.toSet());\n+        ListenableFuture<List<String>> timeseriesKeysFuture;\n+        ListenableFuture<List<String>> attributesKeysFuture;\n+\n+        if (isTimeseries) {\n+            timeseriesKeysFuture = dbCallbackExecutor.submit(() -> timeseriesService.findAllKeysByEntityIds(tenantId, ids));\n+        } else {\n+            timeseriesKeysFuture = null;\n+        }\n+\n+        if (isAttributes) {\n+            Map<EntityType, List<EntityId>> typesMap = ids.stream().collect(Collectors.groupingBy(EntityId::getEntityType));\n+            List<ListenableFuture<List<String>>> futures = new ArrayList<>(typesMap.size());\n+            typesMap.forEach((type, entityIds) -> futures.add(dbCallbackExecutor.submit(() -> attributesService.findAllKeysByEntityIds(tenantId, type, entityIds))));\n+            attributesKeysFuture = Futures.transform(Futures.allAsList(futures), lists -> {\n+                if (CollectionUtils.isEmpty(lists)) {\n+                    return null;\n+                }\n+\n+                return lists.stream().flatMap(List::stream).distinct().sorted().collect(Collectors.toList());\n+            }, dbCallbackExecutor);\n+        } else {\n+            attributesKeysFuture = null;\n+        }\n+\n+        if (timeseriesKeysFuture != null && attributesKeysFuture != null) {\n+            Futures.whenAllComplete(timeseriesKeysFuture, attributesKeysFuture).call(() -> {\n+                try {\n+                    getResponseCallback(response, types, timeseriesKeysFuture.get(), attributesKeysFuture.get());\n+                } catch (Exception e) {\n+                    log.error(\"Failed to fetch timeseries and attributes keys!\", e);\n+                    AccessValidator.handleError(e, response, HttpStatus.INTERNAL_SERVER_ERROR);\n+                }\n+\n+                return null;\n+            }, dbCallbackExecutor);\n+        } else if (timeseriesKeysFuture != null) {\n+            Futures.addCallback(timeseriesKeysFuture, new FutureCallback<List<String>>() {\n+                @Override\n+                public void onSuccess(@Nullable List<String> keys) {\n+                    getResponseCallback(response, types, keys, null);\n+                }\n+\n+                @Override\n+                public void onFailure(Throwable t) {\n+                    log.error(\"Failed to fetch timeseries keys!\", t);\n+                    AccessValidator.handleError(t, response, HttpStatus.INTERNAL_SERVER_ERROR);\n+                }\n+", "originalCommit": "f63b4b1f7c3b843b391cb244307538400439e9e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfb82bf28fb13ed7cf590eb37366487e7a6a80da", "chunk": "diff --git a/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java b/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\nindex 337e2cdb07..d8be5040c9 100644\n--- a/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\n+++ b/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\n\n@@ -123,25 +123,38 @@ public class DefaultEntityQueryService implements EntityQueryService {\n         }\n     }\n \n+    private EntityDataQuery buildEntityDataQuery(AlarmDataQuery query) {\n+        EntityDataSortOrder sortOrder = query.getPageLink().getSortOrder();\n+        EntityDataSortOrder entitiesSortOrder;\n+        if (sortOrder == null || sortOrder.getKey().getType().equals(EntityKeyType.ALARM_FIELD)) {\n+            entitiesSortOrder = new EntityDataSortOrder(new EntityKey(EntityKeyType.ENTITY_FIELD, ModelConstants.CREATED_TIME_PROPERTY));\n+        } else {\n+            entitiesSortOrder = sortOrder;\n+        }\n+        EntityDataPageLink edpl = new EntityDataPageLink(maxEntitiesPerAlarmSubscription, 0, null, entitiesSortOrder);\n+        return new EntityDataQuery(query.getEntityFilter(), edpl, query.getEntityFields(), query.getLatestValues(), query.getKeyFilters());\n+    }\n+\n     @Override\n-    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n-                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+    public DeferredResult<ResponseEntity> getKeysByQuery(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                                         boolean isTimeseries, boolean isAttributes) {\n+        final DeferredResult<ResponseEntity> response = new DeferredResult<>();\n         if (!isAttributes && !isTimeseries) {\n-            getEmptyResponseCallback(response);\n-            return;\n+            replyWithEmptyResponse(response);\n+            return response;\n         }\n \n         List<EntityId> ids = this.findEntityDataByQuery(securityUser, query).getData().stream()\n                 .map(EntityData::getEntityId)\n                 .collect(Collectors.toList());\n         if (ids.isEmpty()) {\n-            getEmptyResponseCallback(response);\n-            return;\n+            replyWithEmptyResponse(response);\n+            return response;\n         }\n \n         Set<EntityType> types = ids.stream().map(EntityId::getEntityType).collect(Collectors.toSet());\n-        ListenableFuture<List<String>> timeseriesKeysFuture;\n-        ListenableFuture<List<String>> attributesKeysFuture;\n+        final ListenableFuture<List<String>> timeseriesKeysFuture;\n+        final ListenableFuture<List<String>> attributesKeysFuture;\n \n         if (isTimeseries) {\n             timeseriesKeysFuture = dbCallbackExecutor.submit(() -> timeseriesService.findAllKeysByEntityIds(tenantId, ids));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5MjQ2Ng==", "url": "https://github.com/thingsboard/thingsboard/pull/3834#discussion_r544092466", "bodyText": "spaces", "author": "ashvayka", "createdAt": "2020-12-16T08:10:40Z", "path": "application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java", "diffHunk": "@@ -89,6 +123,107 @@ public long countEntitiesByQuery(SecurityUser securityUser, EntityCountQuery que\n         }\n     }\n \n+    @Override\n+    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+        if (!isAttributes && !isTimeseries) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        List<EntityId> ids = this.findEntityDataByQuery(securityUser, query).getData().stream()\n+                .map(EntityData::getEntityId)\n+                .collect(Collectors.toList());\n+        if (ids.isEmpty()) {\n+            getEmptyResponseCallback(response);\n+            return;\n+        }\n+\n+        Set<EntityType> types = ids.stream().map(EntityId::getEntityType).collect(Collectors.toSet());\n+        ListenableFuture<List<String>> timeseriesKeysFuture;\n+        ListenableFuture<List<String>> attributesKeysFuture;\n+\n+        if (isTimeseries) {\n+            timeseriesKeysFuture = dbCallbackExecutor.submit(() -> timeseriesService.findAllKeysByEntityIds(tenantId, ids));\n+        } else {\n+            timeseriesKeysFuture = null;\n+        }\n+\n+        if (isAttributes) {\n+            Map<EntityType, List<EntityId>> typesMap = ids.stream().collect(Collectors.groupingBy(EntityId::getEntityType));\n+            List<ListenableFuture<List<String>>> futures = new ArrayList<>(typesMap.size());\n+            typesMap.forEach((type, entityIds) -> futures.add(dbCallbackExecutor.submit(() -> attributesService.findAllKeysByEntityIds(tenantId, type, entityIds))));\n+            attributesKeysFuture = Futures.transform(Futures.allAsList(futures), lists -> {\n+                if (CollectionUtils.isEmpty(lists)) {\n+                    return null;\n+                }\n+\n+                return lists.stream().flatMap(List::stream).distinct().sorted().collect(Collectors.toList());\n+            }, dbCallbackExecutor);\n+        } else {\n+            attributesKeysFuture = null;\n+        }\n+\n+        if (timeseriesKeysFuture != null && attributesKeysFuture != null) {\n+            Futures.whenAllComplete(timeseriesKeysFuture, attributesKeysFuture).call(() -> {\n+                try {\n+                    getResponseCallback(response, types, timeseriesKeysFuture.get(), attributesKeysFuture.get());\n+                } catch (Exception e) {\n+                    log.error(\"Failed to fetch timeseries and attributes keys!\", e);\n+                    AccessValidator.handleError(e, response, HttpStatus.INTERNAL_SERVER_ERROR);\n+                }\n+", "originalCommit": "f63b4b1f7c3b843b391cb244307538400439e9e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfb82bf28fb13ed7cf590eb37366487e7a6a80da", "chunk": "diff --git a/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java b/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\nindex 337e2cdb07..d8be5040c9 100644\n--- a/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\n+++ b/application/src/main/java/org/thingsboard/server/service/query/DefaultEntityQueryService.java\n\n@@ -123,25 +123,38 @@ public class DefaultEntityQueryService implements EntityQueryService {\n         }\n     }\n \n+    private EntityDataQuery buildEntityDataQuery(AlarmDataQuery query) {\n+        EntityDataSortOrder sortOrder = query.getPageLink().getSortOrder();\n+        EntityDataSortOrder entitiesSortOrder;\n+        if (sortOrder == null || sortOrder.getKey().getType().equals(EntityKeyType.ALARM_FIELD)) {\n+            entitiesSortOrder = new EntityDataSortOrder(new EntityKey(EntityKeyType.ENTITY_FIELD, ModelConstants.CREATED_TIME_PROPERTY));\n+        } else {\n+            entitiesSortOrder = sortOrder;\n+        }\n+        EntityDataPageLink edpl = new EntityDataPageLink(maxEntitiesPerAlarmSubscription, 0, null, entitiesSortOrder);\n+        return new EntityDataQuery(query.getEntityFilter(), edpl, query.getEntityFields(), query.getLatestValues(), query.getKeyFilters());\n+    }\n+\n     @Override\n-    public void getKeysByQueryCallback(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n-                                       boolean isTimeseries, boolean isAttributes, DeferredResult<ResponseEntity> response) {\n+    public DeferredResult<ResponseEntity> getKeysByQuery(SecurityUser securityUser, TenantId tenantId, EntityDataQuery query,\n+                                                         boolean isTimeseries, boolean isAttributes) {\n+        final DeferredResult<ResponseEntity> response = new DeferredResult<>();\n         if (!isAttributes && !isTimeseries) {\n-            getEmptyResponseCallback(response);\n-            return;\n+            replyWithEmptyResponse(response);\n+            return response;\n         }\n \n         List<EntityId> ids = this.findEntityDataByQuery(securityUser, query).getData().stream()\n                 .map(EntityData::getEntityId)\n                 .collect(Collectors.toList());\n         if (ids.isEmpty()) {\n-            getEmptyResponseCallback(response);\n-            return;\n+            replyWithEmptyResponse(response);\n+            return response;\n         }\n \n         Set<EntityType> types = ids.stream().map(EntityId::getEntityType).collect(Collectors.toSet());\n-        ListenableFuture<List<String>> timeseriesKeysFuture;\n-        ListenableFuture<List<String>> attributesKeysFuture;\n+        final ListenableFuture<List<String>> timeseriesKeysFuture;\n+        final ListenableFuture<List<String>> attributesKeysFuture;\n \n         if (isTimeseries) {\n             timeseriesKeysFuture = dbCallbackExecutor.submit(() -> timeseriesService.findAllKeysByEntityIds(tenantId, ids));\n"}}, {"oid": "dfb82bf28fb13ed7cf590eb37366487e7a6a80da", "url": "https://github.com/thingsboard/thingsboard/commit/dfb82bf28fb13ed7cf590eb37366487e7a6a80da", "message": "findEntityTimeseriesAndAttributesKeysByQuery improvements", "committedDate": "2020-12-16T09:05:35Z", "type": "commit"}, {"oid": "91bb1ed504af2c413863c9b95c4d5d1bf3c3563f", "url": "https://github.com/thingsboard/thingsboard/commit/91bb1ed504af2c413863c9b95c4d5d1bf3c3563f", "message": "refactored findEntityTimeseriesAndAttributesKeysByQuery", "committedDate": "2020-12-16T09:21:28Z", "type": "commit"}, {"oid": "3aa97eec06b2fa94e56ce4b66dff542a73ee9804", "url": "https://github.com/thingsboard/thingsboard/commit/3aa97eec06b2fa94e56ce4b66dff542a73ee9804", "message": "UI: Improvement autocomplete data keys in datasource widget", "committedDate": "2020-12-17T11:32:03Z", "type": "commit"}]}