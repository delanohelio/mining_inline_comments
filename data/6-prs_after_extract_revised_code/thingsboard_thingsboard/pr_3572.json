{"pr_number": 3572, "pr_title": "[3.2] Custom proto schemas for MQTT telemetry & attributes upload. ", "pr_createdAt": "2020-10-12T13:22:59Z", "pr_url": "https://github.com/thingsboard/thingsboard/pull/3572", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3NDQwNA==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r503874404", "bodyText": "fix this", "author": "ashvayka", "createdAt": "2020-10-13T11:28:58Z", "path": "common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java", "diffHunk": "@@ -15,17 +15,33 @@\n  */\n package org.thingsboard.server.common.data.device.profile;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n import org.thingsboard.server.common.data.TransportPayloadType;\n import org.thingsboard.server.common.data.DeviceTransportType;\n \n+\n+@Slf4j\n @Data\n-public class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonTypeInfo(\n+        use = JsonTypeInfo.Id.NAME,\n+        include = JsonTypeInfo.As.PROPERTY,\n+        property = \"transportPayloadType\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(value = MqttJsonDeviceProfileTransportConfiguration.class, name = \"JSON\"),\n+        @JsonSubTypes.Type(value = MqttProtoDeviceProfileTransportConfiguration.class, name = \"PROTOBUF\")})\n+@JsonDeserialize(using = MqttTransportConfigurationDeserializer.class)\n+public abstract class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {\n \n-    private TransportPayloadType transportPayloadType = TransportPayloadType.JSON;\n+    protected String deviceTelemetryTopic = MqttTopics.DEVICE_TELEMETRY_TOPIC;", "originalCommit": "e85daa81e0d933a3b82142d04f9e17823f2e3387", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzNjE0Nw==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r503936147", "bodyText": "done", "author": "ShvaykaD", "createdAt": "2020-10-13T13:09:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3NDQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "abfb6893ba7dd67abba3e42f2c3f4f47b3b4a6d2", "chunk": "diff --git a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java b/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java\nindex 3395e398e8..d88ac24cbb 100644\n--- a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java\n+++ b/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java\n\n@@ -15,33 +15,17 @@\n  */\n package org.thingsboard.server.common.data.device.profile;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-import com.fasterxml.jackson.annotation.JsonSubTypes;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n import org.thingsboard.server.common.data.TransportPayloadType;\n import org.thingsboard.server.common.data.DeviceTransportType;\n \n-\n-@Slf4j\n @Data\n-@JsonIgnoreProperties(ignoreUnknown = true)\n-@JsonTypeInfo(\n-        use = JsonTypeInfo.Id.NAME,\n-        include = JsonTypeInfo.As.PROPERTY,\n-        property = \"transportPayloadType\")\n-@JsonSubTypes({\n-        @JsonSubTypes.Type(value = MqttJsonDeviceProfileTransportConfiguration.class, name = \"JSON\"),\n-        @JsonSubTypes.Type(value = MqttProtoDeviceProfileTransportConfiguration.class, name = \"PROTOBUF\")})\n-@JsonDeserialize(using = MqttTransportConfigurationDeserializer.class)\n-public abstract class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {\n+public class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {\n \n-    protected String deviceTelemetryTopic = MqttTopics.DEVICE_TELEMETRY_TOPIC;\n-    protected String deviceAttributesTopic = MqttTopics.DEVICE_ATTRIBUTES_TOPIC;\n+    private TransportPayloadType transportPayloadType = TransportPayloadType.JSON;\n \n-    public abstract TransportPayloadType getTransportPayloadType();\n+    private String deviceTelemetryTopic = MqttTopics.DEVICE_TELEMETRY_TOPIC;\n+    private String deviceAttributesTopic = MqttTopics.DEVICE_ATTRIBUTES_TOPIC;\n \n     @Override\n     public DeviceTransportType getType() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzMzMQ==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r521997331", "bodyText": "Please provide an example that also contains inner object. This will be more useful for the end user (to use as a referene.", "author": "ashvayka", "createdAt": "2020-11-12T10:24:52Z", "path": "application/src/test/java/org/thingsboard/server/mqtt/AbstractMqttIntegrationTest.java", "diffHunk": "@@ -60,6 +61,30 @@\n \n     private static final AtomicInteger atomicInteger = new AtomicInteger(2);\n \n+    protected static final String DEVICE_TELEMETRY_PROTO_SCHEMA = \"syntax =\\\"proto3\\\";\\n\" +\n+            \"\\n\" +\n+            \"package test;\\n\" +\n+            \"        \\n\" +\n+            \"message PostTelemetry {\\n\" +", "originalCommit": "4725ad14514036f773b23670fbce1880a22d8192", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5Nzc0NQ==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r521997745", "bodyText": "Same logic should be applied for the \"default\" input in the UI form.", "author": "ashvayka", "createdAt": "2020-11-12T10:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxNjc5OQ==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r522016799", "bodyText": "@ashvayka do you mean that I need to add another test case with an inner object, and also add the placeholder to the UI input, or this should be the default value?", "author": "ShvaykaD", "createdAt": "2020-11-12T10:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "abfb6893ba7dd67abba3e42f2c3f4f47b3b4a6d2", "chunk": "diff --git a/application/src/test/java/org/thingsboard/server/mqtt/AbstractMqttIntegrationTest.java b/application/src/test/java/org/thingsboard/server/mqtt/AbstractMqttIntegrationTest.java\nindex de84698dc0..687269c30c 100644\n--- a/application/src/test/java/org/thingsboard/server/mqtt/AbstractMqttIntegrationTest.java\n+++ b/application/src/test/java/org/thingsboard/server/mqtt/AbstractMqttIntegrationTest.java\n\n@@ -61,30 +60,6 @@ public abstract class AbstractMqttIntegrationTest extends AbstractControllerTest\n \n     private static final AtomicInteger atomicInteger = new AtomicInteger(2);\n \n-    protected static final String DEVICE_TELEMETRY_PROTO_SCHEMA = \"syntax =\\\"proto3\\\";\\n\" +\n-            \"\\n\" +\n-            \"package test;\\n\" +\n-            \"        \\n\" +\n-            \"message PostTelemetry {\\n\" +\n-            \"  string key1 = 1;\\n\" +\n-            \"  bool key2 = 2;\\n\" +\n-            \"  double key3 = 3;\\n\" +\n-            \"  int32 key4 = 4;\\n\" +\n-            \"  string key5 = 5;\\n\" +\n-            \"}\";\n-\n-    protected static final String DEVICE_ATTRIBUTES_PROTO_SCHEMA = \"syntax =\\\"proto3\\\";\\n\" +\n-            \"\\n\" +\n-            \"package test;\\n\" +\n-            \"\\n\" +\n-            \"message PostAttributes {\\n\" +\n-            \"  string key1 = 1;\\n\" +\n-            \"  bool key2 = 2;\\n\" +\n-            \"  double key3 = 3;\\n\" +\n-            \"  int32 key4 = 4;\\n\" +\n-            \"  string key5 = 5;\\n\" +\n-            \"}\";\n-\n     protected Tenant savedTenant;\n     protected User tenantAdmin;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5ODYzMA==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r521998630", "bodyText": "Why this was removed?", "author": "ashvayka", "createdAt": "2020-11-12T10:26:54Z", "path": "common/data/src/main/java/org/thingsboard/server/common/data/device/profile/DeviceProfileTransportConfiguration.java", "diffHunk": "@@ -29,11 +29,10 @@\n         property = \"type\")\n @JsonSubTypes({\n          @JsonSubTypes.Type(value = DefaultDeviceProfileTransportConfiguration.class, name = \"DEFAULT\"),\n-        @JsonSubTypes.Type(value = MqttDeviceProfileTransportConfiguration.class, name = \"MQTT\"),\n+         @JsonSubTypes.Type(value = MqttDeviceProfileTransportConfiguration.class, name = \"MQTT\"),\n          @JsonSubTypes.Type(value = Lwm2mDeviceProfileTransportConfiguration.class, name = \"LWM2M\")})\n public interface DeviceProfileTransportConfiguration {\n \n-    @JsonIgnore", "originalCommit": "4725ad14514036f773b23670fbce1880a22d8192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abfb6893ba7dd67abba3e42f2c3f4f47b3b4a6d2", "chunk": "diff --git a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/DeviceProfileTransportConfiguration.java b/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/DeviceProfileTransportConfiguration.java\nindex e685692895..34854958d1 100644\n--- a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/DeviceProfileTransportConfiguration.java\n+++ b/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/DeviceProfileTransportConfiguration.java\n\n@@ -29,10 +29,11 @@ import org.thingsboard.server.common.data.DeviceTransportType;\n         property = \"type\")\n @JsonSubTypes({\n          @JsonSubTypes.Type(value = DefaultDeviceProfileTransportConfiguration.class, name = \"DEFAULT\"),\n-         @JsonSubTypes.Type(value = MqttDeviceProfileTransportConfiguration.class, name = \"MQTT\"),\n+        @JsonSubTypes.Type(value = MqttDeviceProfileTransportConfiguration.class, name = \"MQTT\"),\n          @JsonSubTypes.Type(value = Lwm2mDeviceProfileTransportConfiguration.class, name = \"LWM2M\")})\n public interface DeviceProfileTransportConfiguration {\n \n+    @JsonIgnore\n     DeviceTransportType getType();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTc1Mw==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r522001753", "bodyText": "This is completely wrong. You are breaking the main OOP principles.\nYou should have only one MqttDeviceProfileTransportConfiguration (not abstract) that has a field:\nTransportPayloadType\nand one more variable of new TransportPayloadTypeConfiguration interface (JSON or PROTOBUF)\nwith two sub-classes", "author": "ashvayka", "createdAt": "2020-11-12T10:31:51Z", "path": "common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java", "diffHunk": "@@ -15,17 +15,30 @@\n  */\n package org.thingsboard.server.common.data.device.profile;\n \n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import lombok.Data;\n import org.thingsboard.server.common.data.TransportPayloadType;\n import org.thingsboard.server.common.data.DeviceTransportType;\n \n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonTypeInfo(\n+        use = JsonTypeInfo.Id.NAME,\n+        include = JsonTypeInfo.As.PROPERTY,\n+        property = \"transportPayloadType\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(value = MqttJsonDeviceProfileTransportConfiguration.class, name = \"JSON\"),\n+        @JsonSubTypes.Type(value = MqttProtoDeviceProfileTransportConfiguration.class, name = \"PROTOBUF\")})\n+@JsonDeserialize(using = MqttTransportConfigurationDeserializer.class)\n @Data\n-public class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {\n+public abstract class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {", "originalCommit": "4725ad14514036f773b23670fbce1880a22d8192", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxNzkzMg==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r522017932", "bodyText": "Ok. This is clear.", "author": "ShvaykaD", "createdAt": "2020-11-12T10:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "abfb6893ba7dd67abba3e42f2c3f4f47b3b4a6d2", "chunk": "diff --git a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java b/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java\nindex 66174e3d29..d88ac24cbb 100644\n--- a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java\n+++ b/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttDeviceProfileTransportConfiguration.java\n\n@@ -15,30 +15,17 @@\n  */\n package org.thingsboard.server.common.data.device.profile;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n-import com.fasterxml.jackson.annotation.JsonSubTypes;\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import lombok.Data;\n import org.thingsboard.server.common.data.TransportPayloadType;\n import org.thingsboard.server.common.data.DeviceTransportType;\n \n-@JsonIgnoreProperties(ignoreUnknown = true)\n-@JsonTypeInfo(\n-        use = JsonTypeInfo.Id.NAME,\n-        include = JsonTypeInfo.As.PROPERTY,\n-        property = \"transportPayloadType\")\n-@JsonSubTypes({\n-        @JsonSubTypes.Type(value = MqttJsonDeviceProfileTransportConfiguration.class, name = \"JSON\"),\n-        @JsonSubTypes.Type(value = MqttProtoDeviceProfileTransportConfiguration.class, name = \"PROTOBUF\")})\n-@JsonDeserialize(using = MqttTransportConfigurationDeserializer.class)\n @Data\n-public abstract class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {\n+public class MqttDeviceProfileTransportConfiguration implements DeviceProfileTransportConfiguration {\n \n-    public abstract TransportPayloadType getTransportPayloadType();\n+    private TransportPayloadType transportPayloadType = TransportPayloadType.JSON;\n \n-    protected String deviceTelemetryTopic = MqttTopics.DEVICE_TELEMETRY_TOPIC;\n-    protected String deviceAttributesTopic = MqttTopics.DEVICE_ATTRIBUTES_TOPIC;\n+    private String deviceTelemetryTopic = MqttTopics.DEVICE_TELEMETRY_TOPIC;\n+    private String deviceAttributesTopic = MqttTopics.DEVICE_ATTRIBUTES_TOPIC;\n \n     @Override\n     public DeviceTransportType getType() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMjk2Mw==", "url": "https://github.com/thingsboard/thingsboard/pull/3572#discussion_r522002963", "bodyText": "All this logic should be in the DeviceProfileService in the validator", "author": "ashvayka", "createdAt": "2020-11-12T10:33:35Z", "path": "common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttProtoDeviceProfileTransportConfiguration.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.common.data.device.profile;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.github.os72.protobuf.dynamic.DynamicSchema;\n+import com.github.os72.protobuf.dynamic.EnumDefinition;\n+import com.github.os72.protobuf.dynamic.MessageDefinition;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.squareup.wire.Syntax;\n+import com.squareup.wire.schema.Field;\n+import com.squareup.wire.schema.Location;\n+import com.squareup.wire.schema.internal.parser.EnumConstantElement;\n+import com.squareup.wire.schema.internal.parser.EnumElement;\n+import com.squareup.wire.schema.internal.parser.FieldElement;\n+import com.squareup.wire.schema.internal.parser.MessageElement;\n+import com.squareup.wire.schema.internal.parser.OneOfElement;\n+import com.squareup.wire.schema.internal.parser.ProtoFileElement;\n+import com.squareup.wire.schema.internal.parser.ProtoParser;\n+import com.squareup.wire.schema.internal.parser.TypeElement;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.extern.slf4j.Slf4j;\n+import org.thingsboard.server.common.data.TransportPayloadType;\n+\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@EqualsAndHashCode(callSuper = true)\n+@Data\n+@JsonDeserialize(as = MqttProtoDeviceProfileTransportConfiguration.class)\n+public class MqttProtoDeviceProfileTransportConfiguration extends MqttDeviceProfileTransportConfiguration {\n+\n+    public static final Location LOCATION = new Location(\"\", \"\", -1, -1);\n+    public static final String ATTRIBUTES_PROTO_SCHEMA = \"attributes proto schema\";\n+    public static final String TELEMETRY_PROTO_SCHEMA = \"telemetry proto schema\";\n+\n+    public static String invalidSchemaProvidedMessage(String schemaName) {\n+        return \"[Transport Configuration] invalid \" + schemaName + \" schema provided!\";\n+    }\n+\n+    private String deviceTelemetryProtoSchema;\n+    private String deviceAttributesProtoSchema;\n+\n+    @Override\n+    public TransportPayloadType getTransportPayloadType() {\n+        return TransportPayloadType.PROTOBUF;\n+    }\n+\n+    public void validateTransportProtoSchema(String schema, String schemaName) throws IllegalArgumentException {", "originalCommit": "4725ad14514036f773b23670fbce1880a22d8192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abfb6893ba7dd67abba3e42f2c3f4f47b3b4a6d2", "chunk": "diff --git a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttProtoDeviceProfileTransportConfiguration.java b/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttProtoDeviceProfileTransportConfiguration.java\ndeleted file mode 100644\nindex 158acfaf2a..0000000000\n--- a/common/data/src/main/java/org/thingsboard/server/common/data/device/profile/MqttProtoDeviceProfileTransportConfiguration.java\n+++ /dev/null\n\n@@ -1,305 +0,0 @@\n-/**\n- * Copyright \u00a9 2016-2020 The Thingsboard Authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.thingsboard.server.common.data.device.profile;\n-\n-import com.fasterxml.jackson.annotation.JsonTypeName;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.github.os72.protobuf.dynamic.DynamicSchema;\n-import com.github.os72.protobuf.dynamic.EnumDefinition;\n-import com.github.os72.protobuf.dynamic.MessageDefinition;\n-import com.google.protobuf.Descriptors;\n-import com.google.protobuf.DynamicMessage;\n-import com.squareup.wire.Syntax;\n-import com.squareup.wire.schema.Field;\n-import com.squareup.wire.schema.Location;\n-import com.squareup.wire.schema.internal.parser.EnumConstantElement;\n-import com.squareup.wire.schema.internal.parser.EnumElement;\n-import com.squareup.wire.schema.internal.parser.FieldElement;\n-import com.squareup.wire.schema.internal.parser.MessageElement;\n-import com.squareup.wire.schema.internal.parser.OneOfElement;\n-import com.squareup.wire.schema.internal.parser.ProtoFileElement;\n-import com.squareup.wire.schema.internal.parser.ProtoParser;\n-import com.squareup.wire.schema.internal.parser.TypeElement;\n-import lombok.Data;\n-import lombok.EqualsAndHashCode;\n-import lombok.extern.slf4j.Slf4j;\n-import org.thingsboard.server.common.data.TransportPayloadType;\n-\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-@Slf4j\n-@EqualsAndHashCode(callSuper = true)\n-@Data\n-@JsonDeserialize(as = MqttProtoDeviceProfileTransportConfiguration.class)\n-public class MqttProtoDeviceProfileTransportConfiguration extends MqttDeviceProfileTransportConfiguration {\n-\n-    public static final Location LOCATION = new Location(\"\", \"\", -1, -1);\n-    public static final String ATTRIBUTES_PROTO_SCHEMA = \"attributes proto schema\";\n-    public static final String TELEMETRY_PROTO_SCHEMA = \"telemetry proto schema\";\n-\n-    public static String invalidSchemaProvidedMessage(String schemaName) {\n-        return \"[Transport Configuration] invalid \" + schemaName + \" schema provided!\";\n-    }\n-\n-    private String deviceTelemetryProtoSchema;\n-    private String deviceAttributesProtoSchema;\n-\n-    @Override\n-    public TransportPayloadType getTransportPayloadType() {\n-        return TransportPayloadType.PROTOBUF;\n-    }\n-\n-    public void validateTransportProtoSchema(String schema, String schemaName) throws IllegalArgumentException {\n-        ProtoParser schemaParser = new ProtoParser(LOCATION, schema.toCharArray());\n-        ProtoFileElement protoFileElement;\n-        try {\n-            protoFileElement = schemaParser.readProtoFile();\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"[Transport Configuration] failed to parse \" + schemaName + \" due to: \" + e.getMessage());\n-        }\n-        checkProtoFileSyntax(schemaName, protoFileElement);\n-        checkProtoFileCommonSettings(schemaName, protoFileElement.getOptions().isEmpty(), \" Schema options don't support!\");\n-        checkProtoFileCommonSettings(schemaName, protoFileElement.getPublicImports().isEmpty(), \" Schema public imports don't support!\");\n-        checkProtoFileCommonSettings(schemaName, protoFileElement.getImports().isEmpty(), \" Schema imports don't support!\");\n-        checkProtoFileCommonSettings(schemaName, protoFileElement.getExtendDeclarations().isEmpty(), \" Schema extend declarations don't support!\");\n-        checkTypeElements(schemaName, protoFileElement);\n-    }\n-\n-    public Descriptors.Descriptor getDynamicMessageDescriptor(String protoSchema, String schemaName) {\n-        try {\n-            ProtoFileElement protoFileElement = getTransportProtoSchema(protoSchema);\n-            DynamicSchema dynamicSchema = getDynamicSchema(protoFileElement, schemaName);\n-            String lastMsgName = getMessageTypes(protoFileElement.getTypes()).stream()\n-                    .map(MessageElement::getName).reduce((previous, last) -> last).get();\n-            DynamicMessage.Builder builder = dynamicSchema.newMessageBuilder(lastMsgName);\n-            return builder.getDescriptorForType();\n-        } catch (Exception e) {\n-            log.warn(\"Failed to get Message Descriptor due to {}\", e.getMessage());\n-            return null;\n-        }\n-    }\n-\n-    public DynamicSchema getDynamicSchema(ProtoFileElement protoFileElement, String schemaName) {\n-        DynamicSchema.Builder schemaBuilder = DynamicSchema.newBuilder();\n-        schemaBuilder.setName(schemaName);\n-        schemaBuilder.setPackage(!isEmptyStr(protoFileElement.getPackageName()) ?\n-                protoFileElement.getPackageName() : schemaName.toLowerCase());\n-        List<TypeElement> types = protoFileElement.getTypes();\n-        List<MessageElement> messageTypes = getMessageTypes(types);\n-\n-        if (!messageTypes.isEmpty()) {\n-            List<EnumElement> enumTypes = getEnumElements(types);\n-            if (!enumTypes.isEmpty()) {\n-                enumTypes.forEach(enumElement -> {\n-                    EnumDefinition enumDefinition = getEnumDefinition(enumElement);\n-                    schemaBuilder.addEnumDefinition(enumDefinition);\n-                });\n-            }\n-            List<MessageDefinition> messageDefinitions = getMessageDefinitions(messageTypes);\n-            messageDefinitions.forEach(schemaBuilder::addMessageDefinition);\n-            try {\n-                return schemaBuilder.build();\n-            } catch (Descriptors.DescriptorValidationException e) {\n-                throw new RuntimeException(\"Failed to create dynamic schema due to: \" + e.getMessage());\n-            }\n-        } else {\n-            throw new RuntimeException(\"Failed to get Dynamic Schema! Message types is empty for schema:\" + schemaName);\n-        }\n-    }\n-\n-    private void checkProtoFileSyntax(String schemaName, ProtoFileElement protoFileElement) {\n-        if (protoFileElement.getSyntax() == null || !protoFileElement.getSyntax().equals(Syntax.PROTO_3)) {\n-            throw new IllegalArgumentException(\"[Transport Configuration] invalid schema syntax: \" + protoFileElement.getSyntax() +\n-                    \" for: \" + schemaName + \" provided! Only \" + Syntax.PROTO_3 + \" allowed!\");\n-        }\n-    }\n-\n-    private void checkProtoFileCommonSettings(String schemaName, boolean isEmptySettings, String invalidSettingsMessage) {\n-        if (!isEmptySettings) {\n-            throw new IllegalArgumentException(invalidSchemaProvidedMessage(schemaName) + invalidSettingsMessage);\n-        }\n-    }\n-\n-    private void checkTypeElements(String schemaName, ProtoFileElement protoFileElement) {\n-        List<TypeElement> types = protoFileElement.getTypes();\n-        if (!types.isEmpty()) {\n-            if (types.stream().noneMatch(typeElement -> typeElement instanceof MessageElement)) {\n-                throw new IllegalArgumentException(invalidSchemaProvidedMessage(schemaName) + \" At least one Message definition should exists!\");\n-            } else {\n-                checkEnumElements(schemaName, getEnumElements(types));\n-                checkMessageElements(schemaName, getMessageTypes(types));\n-            }\n-        } else {\n-            throw new IllegalArgumentException(invalidSchemaProvidedMessage(schemaName) + \" Type elements is empty!\");\n-        }\n-    }\n-\n-    private void checkFieldElements(String schemaName, List<FieldElement> fieldElements) {\n-        if (!fieldElements.isEmpty()) {\n-            boolean hasRequiredLabel = fieldElements.stream().anyMatch(fieldElement -> {\n-                Field.Label label = fieldElement.getLabel();\n-                return label != null && label.equals(Field.Label.REQUIRED);\n-            });\n-            if (hasRequiredLabel) {\n-                throw new IllegalArgumentException(invalidSchemaProvidedMessage(schemaName) + \" Required labels are not supported!\");\n-            }\n-            boolean hasDefaultValue = fieldElements.stream().anyMatch(fieldElement -> fieldElement.getDefaultValue() != null);\n-            if (hasDefaultValue) {\n-                throw new IllegalArgumentException(invalidSchemaProvidedMessage(schemaName) + \" Default values are not supported!\");\n-            }\n-        }\n-    }\n-\n-    private void checkEnumElements(String schemaName, List<EnumElement> enumTypes) {\n-        if (enumTypes.stream().anyMatch(enumElement -> !enumElement.getNestedTypes().isEmpty())) {\n-            throw new IllegalArgumentException(invalidSchemaProvidedMessage(schemaName) + \" Nested types in Enum definitions are not supported!\");\n-        }\n-        if (enumTypes.stream().anyMatch(enumElement -> !enumElement.getOptions().isEmpty())) {\n-            throw new IllegalArgumentException(invalidSchemaProvidedMessage(schemaName) + \" Enum definitions options are not supported!\");\n-        }\n-    }\n-\n-    private void checkMessageElements(String schemaName, List<MessageElement> messageElementsList) {\n-        if (!messageElementsList.isEmpty()) {\n-            messageElementsList.forEach(messageElement -> {\n-                checkProtoFileCommonSettings(schemaName, messageElement.getGroups().isEmpty(),\n-                        \" Message definition groups don't support!\");\n-                checkProtoFileCommonSettings(schemaName, messageElement.getOptions().isEmpty(),\n-                        \" Message definition options don't support!\");\n-                checkProtoFileCommonSettings(schemaName, messageElement.getExtensions().isEmpty(),\n-                        \" Message definition extensions don't support!\");\n-                checkProtoFileCommonSettings(schemaName, messageElement.getReserveds().isEmpty(),\n-                        \" Message definition reserved elements don't support!\");\n-                checkFieldElements(schemaName, messageElement.getFields());\n-                List<OneOfElement> oneOfs = messageElement.getOneOfs();\n-                if (!oneOfs.isEmpty()) {\n-                    oneOfs.forEach(oneOfElement -> {\n-                        checkProtoFileCommonSettings(schemaName, oneOfElement.getGroups().isEmpty(),\n-                                \" OneOf definition groups don't support!\");\n-                        checkFieldElements(schemaName, oneOfElement.getFields());\n-                    });\n-                }\n-                List<TypeElement> nestedTypes = messageElement.getNestedTypes();\n-                if (!nestedTypes.isEmpty()) {\n-                    List<EnumElement> nestedEnumTypes = getEnumElements(nestedTypes);\n-                    if (!nestedEnumTypes.isEmpty()) {\n-                        checkEnumElements(schemaName, nestedEnumTypes);\n-                    }\n-                    List<MessageElement> nestedMessageTypes = getMessageTypes(nestedTypes);\n-                    checkMessageElements(schemaName, nestedMessageTypes);\n-                }\n-            });\n-        }\n-    }\n-\n-    public ProtoFileElement getTransportProtoSchema(String protoSchema) {\n-        return new ProtoParser(LOCATION, protoSchema.toCharArray()).readProtoFile();\n-    }\n-\n-    private List<MessageElement> getMessageTypes(List<TypeElement> types) {\n-        return types.stream()\n-                .filter(typeElement -> typeElement instanceof MessageElement)\n-                .map(typeElement -> (MessageElement) typeElement)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private List<EnumElement> getEnumElements(List<TypeElement> types) {\n-        return types.stream()\n-                .filter(typeElement -> typeElement instanceof EnumElement)\n-                .map(typeElement -> (EnumElement) typeElement)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private List<MessageDefinition> getMessageDefinitions(List<MessageElement> messageElementsList) {\n-        if (!messageElementsList.isEmpty()) {\n-            List<MessageDefinition> messageDefinitions = new ArrayList<>();\n-            messageElementsList.forEach(messageElement -> {\n-                MessageDefinition.Builder messageDefinitionBuilder = MessageDefinition.newBuilder(messageElement.getName());\n-                List<FieldElement> messageElementFields = messageElement.getFields();\n-                List<OneOfElement> oneOfs = messageElement.getOneOfs();\n-\n-                List<TypeElement> nestedTypes = messageElement.getNestedTypes();\n-                if (!messageElementFields.isEmpty()) {\n-                    addMessageFieldsToTheMessageDefinition(messageElementFields, messageDefinitionBuilder);\n-                }\n-                if (!oneOfs.isEmpty()) {\n-                    for (OneOfElement oneOfelement: oneOfs) {\n-                        MessageDefinition.OneofBuilder oneofBuilder = messageDefinitionBuilder.addOneof(oneOfelement.getName());\n-                        addMessageFieldsToTheOneOfDefinition(oneOfelement.getFields(), oneofBuilder);\n-                    }\n-                }\n-                if (!nestedTypes.isEmpty()) {\n-                    List<EnumElement> nestedEnumTypes = getEnumElements(nestedTypes);\n-                    if (!nestedEnumTypes.isEmpty()) {\n-                        nestedEnumTypes.forEach(enumElement -> {\n-                            EnumDefinition nestedEnumDefinition = getEnumDefinition(enumElement);\n-                            messageDefinitionBuilder.addEnumDefinition(nestedEnumDefinition);\n-                        });\n-                    }\n-                    List<MessageElement> nestedMessageTypes = getMessageTypes(nestedTypes);\n-                    List<MessageDefinition> nestedMessageDefinitions = getMessageDefinitions(nestedMessageTypes);\n-                    nestedMessageDefinitions.forEach(messageDefinitionBuilder::addMessageDefinition);\n-                }\n-                messageDefinitions.add(messageDefinitionBuilder.build());\n-            });\n-            return messageDefinitions;\n-        } else {\n-            return Collections.emptyList();\n-        }\n-    }\n-\n-    private EnumDefinition getEnumDefinition(EnumElement enumElement) {\n-        List<EnumConstantElement> enumElementTypeConstants = enumElement.getConstants();\n-        EnumDefinition.Builder enumDefinitionBuilder = EnumDefinition.newBuilder(enumElement.getName());\n-        if (!enumElementTypeConstants.isEmpty()) {\n-            enumElementTypeConstants.forEach(constantElement -> enumDefinitionBuilder.addValue(constantElement.getName(), constantElement.getTag()));\n-        }\n-        return enumDefinitionBuilder.build();\n-    }\n-\n-\n-    private void addMessageFieldsToTheMessageDefinition(List<FieldElement> messageElementFields, MessageDefinition.Builder messageDefinitionBuilder) {\n-        messageElementFields.forEach(fieldElement -> {\n-            String labelStr = null;\n-            if (fieldElement.getLabel() != null) {\n-                labelStr = fieldElement.getLabel().name().toLowerCase();\n-            }\n-            messageDefinitionBuilder.addField(\n-                    labelStr,\n-                    fieldElement.getType(),\n-                    fieldElement.getName(),\n-                    fieldElement.getTag());\n-        });\n-    }\n-\n-    private void addMessageFieldsToTheOneOfDefinition(List<FieldElement> oneOfsElementFields, MessageDefinition.OneofBuilder oneofBuilder) {\n-        oneOfsElementFields.forEach(fieldElement -> oneofBuilder.addField(\n-                fieldElement.getType(),\n-                fieldElement.getName(),\n-                fieldElement.getTag()));\n-        oneofBuilder.msgDefBuilder();\n-    }\n-\n-    private boolean isEmptyStr(String str) {\n-        return str == null || \"\".equals(str);\n-    }\n-\n-}\n"}}, {"oid": "abfb6893ba7dd67abba3e42f2c3f4f47b3b4a6d2", "url": "https://github.com/thingsboard/thingsboard/commit/abfb6893ba7dd67abba3e42f2c3f4f47b3b4a6d2", "message": "UI: Added unique alarm type validation in alarm rule", "committedDate": "2020-11-16T14:48:10Z", "type": "commit"}, {"oid": "9c14088cade430bcea819253d3093f0db2cbe159", "url": "https://github.com/thingsboard/thingsboard/commit/9c14088cade430bcea819253d3093f0db2cbe159", "message": "added # filter topic handling", "committedDate": "2020-11-16T14:56:59Z", "type": "commit"}, {"oid": "fde0e7824de10157f38f40e2d10bc535978e49c2", "url": "https://github.com/thingsboard/thingsboard/commit/fde0e7824de10157f38f40e2d10bc535978e49c2", "message": "change regex for # filter", "committedDate": "2020-11-16T14:56:59Z", "type": "commit"}, {"oid": "7482d73a9ba47954860c02ae206294e01afc9a27", "url": "https://github.com/thingsboard/thingsboard/commit/7482d73a9ba47954860c02ae206294e01afc9a27", "message": "added AlwaysTrueTopicFilter", "committedDate": "2020-11-16T14:56:59Z", "type": "commit"}, {"oid": "13a731ecb38203d4b17b187519dd98fb93c755cb", "url": "https://github.com/thingsboard/thingsboard/commit/13a731ecb38203d4b17b187519dd98fb93c755cb", "message": "fix MqttTopicFilterFactory toFilter", "committedDate": "2020-11-16T14:56:59Z", "type": "commit"}, {"oid": "7dc793e777a623c682f68bde03637de898cc22ed", "url": "https://github.com/thingsboard/thingsboard/commit/7dc793e777a623c682f68bde03637de898cc22ed", "message": "UI: Change translate", "committedDate": "2020-11-16T15:12:27Z", "type": "commit"}, {"oid": "566f24f42943e091907dbc87db7e7a8e6d0a9aef", "url": "https://github.com/thingsboard/thingsboard/commit/566f24f42943e091907dbc87db7e7a8e6d0a9aef", "message": "Merge pull request #3733 from vvlladd28/improvement/device-profile/alarm-type/validation\n\nUI: Added unique alarm type validation in alarm rule", "committedDate": "2020-11-16T15:17:14Z", "type": "commit"}, {"oid": "aa61db22f2ec63efe3c167b0a012978bc95690ba", "url": "https://github.com/thingsboard/thingsboard/commit/aa61db22f2ec63efe3c167b0a012978bc95690ba", "message": "added validations for DeviceProfileAlarm type", "committedDate": "2020-11-16T16:49:18Z", "type": "commit"}, {"oid": "3c5bce7d20509113efd5ae304eb298ea85016d71", "url": "https://github.com/thingsboard/thingsboard/commit/3c5bce7d20509113efd5ae304eb298ea85016d71", "message": "Updated thermostat demo", "committedDate": "2020-11-16T16:58:41Z", "type": "commit"}, {"oid": "eecc6aa1a69a9b558c76dd59399df68ebbc49d39", "url": "https://github.com/thingsboard/thingsboard/commit/eecc6aa1a69a9b558c76dd59399df68ebbc49d39", "message": "fix dynamic schemas, tests", "committedDate": "2020-11-16T17:08:55Z", "type": "commit"}, {"oid": "dc310f4cab6488beb3e70b377273c26c61348799", "url": "https://github.com/thingsboard/thingsboard/commit/dc310f4cab6488beb3e70b377273c26c61348799", "message": "merge with master", "committedDate": "2020-11-16T17:13:00Z", "type": "commit"}, {"oid": "be094fc62a7b0df444344d3c5796f61b57c1caf9", "url": "https://github.com/thingsboard/thingsboard/commit/be094fc62a7b0df444344d3c5796f61b57c1caf9", "message": "fix license", "committedDate": "2020-11-16T17:15:34Z", "type": "commit"}]}