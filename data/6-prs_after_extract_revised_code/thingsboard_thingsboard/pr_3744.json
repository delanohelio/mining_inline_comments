{"pr_number": 3744, "pr_title": "created sendApiFeatureStateEmail", "pr_createdAt": "2020-11-17T15:34:49Z", "pr_url": "https://github.com/thingsboard/thingsboard/pull/3744", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2MjAzNg==", "url": "https://github.com/thingsboard/thingsboard/pull/3744#discussion_r525262036", "bodyText": "Please add info about the update to the log.", "author": "ashvayka", "createdAt": "2020-11-17T15:40:43Z", "path": "application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java", "diffHunk": "@@ -286,7 +286,26 @@ private void persistAndNotify(TenantApiUsageState state, Map<ApiFeature, ApiUsag\n         List<TsKvEntry> stateTelemetry = new ArrayList<>();\n         result.forEach(((apiFeature, aState) -> stateTelemetry.add(new BasicTsKvEntry(ts, new StringDataEntry(apiFeature.getApiStateKey(), aState.name())))));\n         tsWsService.saveAndNotifyInternal(state.getTenantId(), state.getApiUsageState().getId(), stateTelemetry, VOID_CALLBACK);\n-        //TODO: notify tenant admin via email!\n+\n+        String email = tenantService.findTenantById(state.getTenantId()).getEmail();\n+\n+        if (StringUtils.isNotEmpty(email)) {\n+            result.forEach((apiFeature, stateValue) -> {\n+                ApiUsageRecordKey[] keys = ApiUsageRecordKey.getKeys(apiFeature);\n+                ApiUsageStateMailMessage[] msgs = new ApiUsageStateMailMessage[keys.length];\n+                for (int i = 0; i < keys.length; i++) {\n+                    ApiUsageRecordKey key = keys[i];\n+                    msgs[i] = new ApiUsageStateMailMessage(key, state.getProfileThreshold(key), state.get(key));\n+                }\n+                try {\n+                    mailService.sendApiFeatureStateEmail(apiFeature, stateValue, email, msgs);\n+                } catch (ThingsboardException e) {\n+                    log.warn(\"[{}] Can't send update of the API state to tenant with provided email [{}]\", state.getTenantId(), email, e);\n+                }\n+            });\n+        } else {\n+            log.warn(\"[{}] Can't send update of the API state to tenant with empty email!\", state.getTenantId());", "originalCommit": "b60f65e0a9449ad8b78306ea3a092f7ccc2eda1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f7e5337964a3675bb1e4b6b3a756de0f59b12c6", "chunk": "diff --git a/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java b/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java\nindex 9b45ffdaed..330ecc23f5 100644\n--- a/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java\n+++ b/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java\n\n@@ -291,23 +297,46 @@ public class DefaultTbApiUsageStateService implements TbApiUsageStateService {\n \n         if (StringUtils.isNotEmpty(email)) {\n             result.forEach((apiFeature, stateValue) -> {\n-                ApiUsageRecordKey[] keys = ApiUsageRecordKey.getKeys(apiFeature);\n-                ApiUsageStateMailMessage[] msgs = new ApiUsageStateMailMessage[keys.length];\n-                for (int i = 0; i < keys.length; i++) {\n-                    ApiUsageRecordKey key = keys[i];\n-                    msgs[i] = new ApiUsageStateMailMessage(key, state.getProfileThreshold(key), state.get(key));\n-                }\n-                try {\n-                    mailService.sendApiFeatureStateEmail(apiFeature, stateValue, email, msgs);\n-                } catch (ThingsboardException e) {\n-                    log.warn(\"[{}] Can't send update of the API state to tenant with provided email [{}]\", state.getTenantId(), email, e);\n-                }\n+                mailExecutor.submit(() -> {\n+                    try {\n+                        mailService.sendApiFeatureStateEmail(apiFeature, stateValue, email, createStateMailMessage(state, apiFeature, stateValue));\n+                    } catch (ThingsboardException e) {\n+                        log.warn(\"[{}] Can't send update of the API state to tenant with provided email [{}]\", state.getTenantId(), email, e);\n+                    }\n+                });\n             });\n         } else {\n             log.warn(\"[{}] Can't send update of the API state to tenant with empty email!\", state.getTenantId());\n         }\n     }\n \n+    private ApiUsageStateMailMessage createStateMailMessage(TenantApiUsageState state, ApiFeature apiFeature, ApiUsageStateValue stateValue) {\n+        StateChecker checker = getStateChecker(stateValue);\n+        for (ApiUsageRecordKey apiUsageRecordKey : ApiUsageRecordKey.getKeys(apiFeature)) {\n+            long threshold = state.getProfileThreshold(apiUsageRecordKey);\n+            long warnThreshold = state.getProfileWarnThreshold(apiUsageRecordKey);\n+            long value = state.get(apiUsageRecordKey);\n+            if (checker.check(threshold, warnThreshold, value)) {\n+                return new ApiUsageStateMailMessage(apiUsageRecordKey, threshold, value);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private StateChecker getStateChecker(ApiUsageStateValue stateValue) {\n+        if (ApiUsageStateValue.ENABLED.equals(stateValue)) {\n+            return (t, wt, v) -> true;\n+        } else if (ApiUsageStateValue.WARNING.equals(stateValue)) {\n+            return (t, wt, v) -> v < t && v >= wt;\n+        } else {\n+            return (t, wt, v) -> v >= t;\n+        }\n+    }\n+\n+    private interface StateChecker {\n+        boolean check(long threshold, long warnThreshold, long value);\n+    }\n+\n     private void checkStartOfNextCycle() {\n         updateLock.lock();\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2MjYyOA==", "url": "https://github.com/thingsboard/thingsboard/pull/3744#discussion_r525262628", "bodyText": "Let's move this to a separate thread. This may be very time consuming.", "author": "ashvayka", "createdAt": "2020-11-17T15:41:30Z", "path": "application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java", "diffHunk": "@@ -286,7 +286,26 @@ private void persistAndNotify(TenantApiUsageState state, Map<ApiFeature, ApiUsag\n         List<TsKvEntry> stateTelemetry = new ArrayList<>();\n         result.forEach(((apiFeature, aState) -> stateTelemetry.add(new BasicTsKvEntry(ts, new StringDataEntry(apiFeature.getApiStateKey(), aState.name())))));\n         tsWsService.saveAndNotifyInternal(state.getTenantId(), state.getApiUsageState().getId(), stateTelemetry, VOID_CALLBACK);\n-        //TODO: notify tenant admin via email!\n+\n+        String email = tenantService.findTenantById(state.getTenantId()).getEmail();\n+\n+        if (StringUtils.isNotEmpty(email)) {\n+            result.forEach((apiFeature, stateValue) -> {\n+                ApiUsageRecordKey[] keys = ApiUsageRecordKey.getKeys(apiFeature);\n+                ApiUsageStateMailMessage[] msgs = new ApiUsageStateMailMessage[keys.length];\n+                for (int i = 0; i < keys.length; i++) {\n+                    ApiUsageRecordKey key = keys[i];\n+                    msgs[i] = new ApiUsageStateMailMessage(key, state.getProfileThreshold(key), state.get(key));\n+                }\n+                try {\n+                    mailService.sendApiFeatureStateEmail(apiFeature, stateValue, email, msgs);", "originalCommit": "b60f65e0a9449ad8b78306ea3a092f7ccc2eda1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f7e5337964a3675bb1e4b6b3a756de0f59b12c6", "chunk": "diff --git a/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java b/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java\nindex 9b45ffdaed..330ecc23f5 100644\n--- a/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java\n+++ b/application/src/main/java/org/thingsboard/server/service/apiusage/DefaultTbApiUsageStateService.java\n\n@@ -291,23 +297,46 @@ public class DefaultTbApiUsageStateService implements TbApiUsageStateService {\n \n         if (StringUtils.isNotEmpty(email)) {\n             result.forEach((apiFeature, stateValue) -> {\n-                ApiUsageRecordKey[] keys = ApiUsageRecordKey.getKeys(apiFeature);\n-                ApiUsageStateMailMessage[] msgs = new ApiUsageStateMailMessage[keys.length];\n-                for (int i = 0; i < keys.length; i++) {\n-                    ApiUsageRecordKey key = keys[i];\n-                    msgs[i] = new ApiUsageStateMailMessage(key, state.getProfileThreshold(key), state.get(key));\n-                }\n-                try {\n-                    mailService.sendApiFeatureStateEmail(apiFeature, stateValue, email, msgs);\n-                } catch (ThingsboardException e) {\n-                    log.warn(\"[{}] Can't send update of the API state to tenant with provided email [{}]\", state.getTenantId(), email, e);\n-                }\n+                mailExecutor.submit(() -> {\n+                    try {\n+                        mailService.sendApiFeatureStateEmail(apiFeature, stateValue, email, createStateMailMessage(state, apiFeature, stateValue));\n+                    } catch (ThingsboardException e) {\n+                        log.warn(\"[{}] Can't send update of the API state to tenant with provided email [{}]\", state.getTenantId(), email, e);\n+                    }\n+                });\n             });\n         } else {\n             log.warn(\"[{}] Can't send update of the API state to tenant with empty email!\", state.getTenantId());\n         }\n     }\n \n+    private ApiUsageStateMailMessage createStateMailMessage(TenantApiUsageState state, ApiFeature apiFeature, ApiUsageStateValue stateValue) {\n+        StateChecker checker = getStateChecker(stateValue);\n+        for (ApiUsageRecordKey apiUsageRecordKey : ApiUsageRecordKey.getKeys(apiFeature)) {\n+            long threshold = state.getProfileThreshold(apiUsageRecordKey);\n+            long warnThreshold = state.getProfileWarnThreshold(apiUsageRecordKey);\n+            long value = state.get(apiUsageRecordKey);\n+            if (checker.check(threshold, warnThreshold, value)) {\n+                return new ApiUsageStateMailMessage(apiUsageRecordKey, threshold, value);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private StateChecker getStateChecker(ApiUsageStateValue stateValue) {\n+        if (ApiUsageStateValue.ENABLED.equals(stateValue)) {\n+            return (t, wt, v) -> true;\n+        } else if (ApiUsageStateValue.WARNING.equals(stateValue)) {\n+            return (t, wt, v) -> v < t && v >= wt;\n+        } else {\n+            return (t, wt, v) -> v >= t;\n+        }\n+    }\n+\n+    private interface StateChecker {\n+        boolean check(long threshold, long warnThreshold, long value);\n+    }\n+\n     private void checkStartOfNextCycle() {\n         updateLock.lock();\n         try {\n"}}, {"oid": "5f7e5337964a3675bb1e4b6b3a756de0f59b12c6", "url": "https://github.com/thingsboard/thingsboard/commit/5f7e5337964a3675bb1e4b6b3a756de0f59b12c6", "message": "Improvements to the templates", "committedDate": "2020-11-18T13:28:16Z", "type": "commit"}]}