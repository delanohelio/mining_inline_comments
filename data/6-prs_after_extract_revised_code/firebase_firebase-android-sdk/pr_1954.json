{"pr_number": 1954, "pr_title": "Adding ResponseHandler to implement backoff retry strageies based on response code.", "pr_createdAt": "2020-09-09T21:48:23Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1954", "timeline": [{"oid": "65dbb268ef48e17924a331282ccf203366a602b6", "url": "https://github.com/firebase/firebase-android-sdk/commit/65dbb268ef48e17924a331282ccf203366a602b6", "message": "Adding ResponseHandler in FIS SDK to implement backoff retry strageies\nbased on response code.", "committedDate": "2020-09-09T21:40:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NTc3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486395774", "bodyText": "nit: double negation looks a bit hard to read to me.", "author": "maksymmalyhin", "createdAt": "2020-09-10T14:36:40Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * the given request is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int retryCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    retryCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    if (backOffTime == BACKOFF_TIME_24H_IN_MILLIS) {\n+      retryCount = 0;\n+    }\n+  }\n+\n+  private synchronized long getBackoffTime(int responseCode) {\n+    // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n+    // https://cloud.google.com/storage/docs/exponential-backoff.\n+    if (!isNonRetryableError(responseCode)) {", "originalCommit": "65dbb268ef48e17924a331282ccf203366a602b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c75a1a704f220d0f28585de1ac816d61cdbe7b50", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nindex 5c009192..26527b3b 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n\n@@ -20,42 +20,50 @@ import java.util.concurrent.TimeUnit;\n \n /**\n  * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n- * the given request is allowed to execute.\n+ * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class ResponseHandler {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n   private long nextAllowedRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n-  private int retryCount = 0;\n+  private int attemptCount = 0;\n \n   ResponseHandler(Utils utils) {\n     this.utils = utils;\n   }\n \n   public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    retryCount++;\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n     long backOffTime = getBackoffTime(responseCode);\n     nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n-    if (backOffTime == BACKOFF_TIME_24H_IN_MILLIS) {\n-      retryCount = 0;\n-    }\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;\n+    attemptCount = 0;\n   }\n \n   private synchronized long getBackoffTime(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n+    if (isNonRetryableError(responseCode)) {\n+      return BACKOFF_TIME_24H_IN_MILLIS;\n+    }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n     // https://cloud.google.com/storage/docs/exponential-backoff.\n-    if (!isNonRetryableError(responseCode)) {\n-      return (long)\n-          Math.min(Math.pow(2, retryCount) + utils.getRandomMillis(), BACKOFF_TIME_24H_IN_MILLIS);\n-    }\n-    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    return BACKOFF_TIME_24H_IN_MILLIS;\n+    return (long)\n+        Math.min(\n+            Math.pow(2, attemptCount) + utils.getRandomMillis(), BACKOFF_TIME_30_MINS_IN_MILLIS);\n   }\n \n   // Response codes classified as non-retryable for FIS API, all other response codes will be\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5ODI3Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486398276", "bodyText": "What will happen in the case of the request success? Will we still backoff? It seems that the backoff reset is not implemented.", "author": "maksymmalyhin", "createdAt": "2020-09-10T14:39:55Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * the given request is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int retryCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    retryCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    if (backOffTime == BACKOFF_TIME_24H_IN_MILLIS) {\n+      retryCount = 0;\n+    }\n+  }\n+\n+  private synchronized long getBackoffTime(int responseCode) {\n+    // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n+    // https://cloud.google.com/storage/docs/exponential-backoff.\n+    if (!isNonRetryableError(responseCode)) {", "originalCommit": "65dbb268ef48e17924a331282ccf203366a602b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNTIxOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486605218", "bodyText": "Thanks for catching this case. Addressed it :)", "author": "ankitaj224", "createdAt": "2020-09-10T20:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5ODI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c75a1a704f220d0f28585de1ac816d61cdbe7b50", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nindex 5c009192..26527b3b 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n\n@@ -20,42 +20,50 @@ import java.util.concurrent.TimeUnit;\n \n /**\n  * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n- * the given request is allowed to execute.\n+ * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class ResponseHandler {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n   private long nextAllowedRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n-  private int retryCount = 0;\n+  private int attemptCount = 0;\n \n   ResponseHandler(Utils utils) {\n     this.utils = utils;\n   }\n \n   public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    retryCount++;\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n     long backOffTime = getBackoffTime(responseCode);\n     nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n-    if (backOffTime == BACKOFF_TIME_24H_IN_MILLIS) {\n-      retryCount = 0;\n-    }\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;\n+    attemptCount = 0;\n   }\n \n   private synchronized long getBackoffTime(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n+    if (isNonRetryableError(responseCode)) {\n+      return BACKOFF_TIME_24H_IN_MILLIS;\n+    }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n     // https://cloud.google.com/storage/docs/exponential-backoff.\n-    if (!isNonRetryableError(responseCode)) {\n-      return (long)\n-          Math.min(Math.pow(2, retryCount) + utils.getRandomMillis(), BACKOFF_TIME_24H_IN_MILLIS);\n-    }\n-    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    return BACKOFF_TIME_24H_IN_MILLIS;\n+    return (long)\n+        Math.min(\n+            Math.pow(2, attemptCount) + utils.getRandomMillis(), BACKOFF_TIME_30_MINS_IN_MILLIS);\n   }\n \n   // Response codes classified as non-retryable for FIS API, all other response codes will be\n"}}, {"oid": "c75a1a704f220d0f28585de1ac816d61cdbe7b50", "url": "https://github.com/firebase/firebase-android-sdk/commit/c75a1a704f220d0f28585de1ac816d61cdbe7b50", "message": "Addressing Maksym's comments.", "committedDate": "2020-09-10T20:09:23Z", "type": "commit"}, {"oid": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "url": "https://github.com/firebase/firebase-android-sdk/commit/68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "message": "Fix java format", "committedDate": "2020-09-10T20:22:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMDcyOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486610729", "bodyText": "I wonder what's the intended used of  isRequestAllowed method? Will this line lead to the method returning false until setNextAllowedRequestTime() method is called?", "author": "maksymmalyhin", "createdAt": "2020-09-10T20:21:39Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;\n+    attemptCount = 0;\n+  }\n+\n+  private synchronized long getBackoffTime(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n+    if (isNonRetryableError(responseCode)) {\n+      return BACKOFF_TIME_24H_IN_MILLIS;\n+    }\n+    // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n+    // https://cloud.google.com/storage/docs/exponential-backoff.\n+    return (long)\n+        Math.min(\n+            Math.pow(2, attemptCount) + utils.getRandomMillis(), BACKOFF_TIME_30_MINS_IN_MILLIS);\n+  }\n+\n+  // Response codes classified as non-retryable for FIS API, all other response codes will be\n+  // treated as retryable-errors. Read more: go/fis-api-error-code-classification.\n+  private static boolean isNonRetryableError(int responseCode) {\n+    return responseCode == 400 || responseCode == 403;\n+  }\n+\n+  public boolean isRequestAllowed() {\n+    long currentTime = utils.currentTimeInMillis();\n+    boolean isRequestAllowed =\n+        attemptCount == 0 || currentTime > nextAllowedRequestTime;\n+\n+    if (currentTime > nextAllowedRequestTime) {\n+      synchronized (this) {\n+        nextAllowedRequestTime = Long.MAX_VALUE;", "originalCommit": "c75a1a704f220d0f28585de1ac816d61cdbe7b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTk3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486749974", "bodyText": "How about instead we set attemptCount = 0.", "author": "andirayo", "createdAt": "2020-09-11T03:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMDcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MTU4Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487191587", "bodyText": "@maksymmalyhin\nisRequestAllowed will be called before making a network call to FIS Servers. This method will return true if its a first call i.e attemptCount = 0 or if currentTime is greater than the set nextRequestTime.\nThe way I imagined plugging these methods was setNextAllowedRequestTime() will be called on every responseCode resulting in correctly setting attemptNumber & nextRequestTime.\nBut I guess, we can do without explicitly resetting nextRequestTime. WDYT?", "author": "ankitaj224", "createdAt": "2020-09-11T17:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMDcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MjA1NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487192054", "bodyText": "@andirayo I don't think setting it attemptCount = 0 will be correct.\nLet's say FIS servers respond 429/ 5xx for consecutive requests.\nResponse1 code 500 : At Duration T1 with attemptCount = 1, nextRequestTime = T2\nNext Request to communicate with FIS servers is at T3 > T2. Since this is true, we allow the request to proceed. But resetting attemptCount = 0 will beat the purpose of exponential backoff.\nIf this request also fails, attemptCount should be 2:\nResponse2 code 500: At  Duration T3 with attemptCount = 2, nextRequestTime = T4\nPlease correct me if I have misunderstood something here.\nThanks.", "author": "ankitaj224", "createdAt": "2020-09-11T17:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMDcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwMDgyOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487200828", "bodyText": "IMO this logic places unnecessary restrictions on the client and makes some potential use cases complicated e.g. if the client invokes isRequestAllowed and then doesn't send a request because of another condition, there is no a straightforward way to call isRequestAllowed and get expected result. I would prefer keep returning true until a signal from the client (via setNextAllowedRequestTime()) is received. So, basically, I would just remove lines 80-83. WDYT?", "author": "maksymmalyhin", "createdAt": "2020-09-11T17:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMDcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMjA3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489712074", "bodyText": "Agreed. I realized that there is no need to reset the nextRequestTime here. Changed it.\nThanks for the review.", "author": "ankitaj224", "createdAt": "2020-09-16T19:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMDcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nindex 26527b3b..a221349e 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n\n@@ -74,8 +74,7 @@ class ResponseHandler {\n \n   public boolean isRequestAllowed() {\n     long currentTime = utils.currentTimeInMillis();\n-    boolean isRequestAllowed =\n-        attemptCount == 0 || currentTime > nextAllowedRequestTime;\n+    boolean isRequestAllowed = attemptCount == 0 || currentTime > nextAllowedRequestTime;\n \n     if (currentTime > nextAllowedRequestTime) {\n       synchronized (this) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMTMwNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486611305", "bodyText": "I think tests for the reset case will be beneficial. Tests that cover ResponseHandler.java lines 80-83 as well.", "author": "maksymmalyhin", "createdAt": "2020-09-10T20:22:44Z", "path": "firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.robolectric.RobolectricTestRunner;\n+\n+/** Tests for {@link ResponseHandler}. */\n+@RunWith(RobolectricTestRunner.class)\n+public class ResponseHandlerTest {\n+  private static final int NON_RETRYABLE_RESPONSE_CODE = 403;\n+  private static final int RETRYABLE_RESPONSE_CODE = 500;\n+  private static final long CURRENT_TIME_IN_MILLIS = 100000L;\n+  private static final long NEXT_REQUEST_TIME_IN_MILLIS_LESSER_THAN_24H =\n+      CURRENT_TIME_IN_MILLIS + TimeUnit.HOURS.toMillis(2);\n+  private static final long NEXT_REQUEST_TIME_IN_MILLIS_GREATER_THAN_24H =\n+      CURRENT_TIME_IN_MILLIS + TimeUnit.HOURS.toMillis(25);\n+\n+  @Mock private Utils mockUtils;\n+  private ResponseHandler responseHandler;\n+\n+  @Before\n+  public void setUp() {\n+    MockitoAnnotations.initMocks(this);\n+    responseHandler = new ResponseHandler(mockUtils);\n+  }\n+\n+  @Test\n+  public void nonRetryableError_lessThan24Hr_doesNotRetry() {\n+    when(mockUtils.currentTimeInMillis())\n+        .thenReturn(CURRENT_TIME_IN_MILLIS, NEXT_REQUEST_TIME_IN_MILLIS_LESSER_THAN_24H);\n+    responseHandler.setNextAllowedRequestTime(NON_RETRYABLE_RESPONSE_CODE);\n+    assertFalse(responseHandler.isRequestAllowed());\n+  }\n+\n+  @Test\n+  public void nonRetryableError_greaterThan24Hr_retries() {\n+    when(mockUtils.currentTimeInMillis())\n+        .thenReturn(CURRENT_TIME_IN_MILLIS, NEXT_REQUEST_TIME_IN_MILLIS_GREATER_THAN_24H);\n+    responseHandler.setNextAllowedRequestTime(NON_RETRYABLE_RESPONSE_CODE);\n+    assertTrue(responseHandler.isRequestAllowed());\n+  }\n+\n+  @Test\n+  public void retryableError_greaterThanNextRequestTime_retries() {\n+    when(mockUtils.getRandomMillis()).thenReturn(TimeUnit.MINUTES.toMillis(2));\n+    when(mockUtils.currentTimeInMillis())\n+        .thenReturn(CURRENT_TIME_IN_MILLIS, addMinutesToCurrentTime(5));\n+    responseHandler.setNextAllowedRequestTime(RETRYABLE_RESPONSE_CODE);\n+    assertTrue(responseHandler.isRequestAllowed());\n+  }\n+\n+  @Test\n+  public void retryableError_lesserThanNextRequestTime_doesNotRetry() {\n+    when(mockUtils.getRandomMillis()).thenReturn(TimeUnit.MINUTES.toMillis(6));\n+    when(mockUtils.currentTimeInMillis())\n+        .thenReturn(CURRENT_TIME_IN_MILLIS, addMinutesToCurrentTime(5));\n+    responseHandler.setNextAllowedRequestTime(RETRYABLE_RESPONSE_CODE);\n+    assertFalse(responseHandler.isRequestAllowed());\n+  }\n+\n+  @Test\n+  public void retryableError_exponentialBackoff_retries() {\n+    when(mockUtils.getRandomMillis()).thenReturn(TimeUnit.MINUTES.toMillis(5));\n+    when(mockUtils.currentTimeInMillis())\n+        .thenReturn(\n+            CURRENT_TIME_IN_MILLIS,\n+            addMinutesToCurrentTime(5),\n+            addMinutesToCurrentTime(6),\n+            addMinutesToCurrentTime(12));\n+    responseHandler.setNextAllowedRequestTime(RETRYABLE_RESPONSE_CODE);\n+    assertFalse(responseHandler.isRequestAllowed());\n+    responseHandler.setNextAllowedRequestTime(RETRYABLE_RESPONSE_CODE);\n+    assertTrue(responseHandler.isRequestAllowed());\n+  }\n+\n+  // Adds specified minutes to the CURRENT_TIME_IN_MILLIS.\n+  private long addMinutesToCurrentTime(int minutes) {\n+    return CURRENT_TIME_IN_MILLIS + TimeUnit.MINUTES.toMillis(minutes);\n+  }", "originalCommit": "c75a1a704f220d0f28585de1ac816d61cdbe7b50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java b/firebase-installations/src/test/java/com/google/firebase/installations/remote/RequestLimiterTest.java\nsimilarity index 66%\nrename from firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java\nrename to firebase-installations/src/test/java/com/google/firebase/installations/remote/RequestLimiterTest.java\nindex 40374652..26bb5f28 100644\n--- a/firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java\n+++ b/firebase-installations/src/test/java/com/google/firebase/installations/remote/RequestLimiterTest.java\n\n@@ -27,11 +27,12 @@ import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.robolectric.RobolectricTestRunner;\n \n-/** Tests for {@link ResponseHandler}. */\n+/** Tests for {@link RequestLimiter}. */\n @RunWith(RobolectricTestRunner.class)\n-public class ResponseHandlerTest {\n-  private static final int NON_RETRYABLE_RESPONSE_CODE = 403;\n-  private static final int RETRYABLE_RESPONSE_CODE = 500;\n+public class RequestLimiterTest {\n+  private static final int NON_RETRYABLE_RESPONSE_CODE_EXAMPLE = 403;\n+  private static final int RETRYABLE_RESPONSE_CODE_EXAMPLE = 500;\n+  private static final int OK_RESPONSE_CODE_EXAMPLE = 200;\n   private static final long CURRENT_TIME_IN_MILLIS = 100000L;\n   private static final long NEXT_REQUEST_TIME_IN_MILLIS_LESSER_THAN_24H =\n       CURRENT_TIME_IN_MILLIS + TimeUnit.HOURS.toMillis(2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMzQ3OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486613479", "bodyText": "If I'm not mistaken, there may be other success codes we receive, e.g. 201 when FIS created. Would it be better to be more generic and treat all codes between 200 and 300 as success?", "author": "maksymmalyhin", "createdAt": "2020-09-10T20:26:51Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    if (responseCode == 200) {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODMyNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486748325", "bodyText": "+1", "author": "andirayo", "createdAt": "2020-09-11T03:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODYwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486748603", "bodyText": "I would add a method similar #isNonRetryableError, e.g. #isSuccessful.\nUsually HttpResponse instances already have such a method.", "author": "andirayo", "createdAt": "2020-09-11T03:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMzQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTExMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486745112", "bodyText": "out of curiosity:\nwhat does @hide mean/do?", "author": "andirayo", "createdAt": "2020-09-11T03:00:08Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -15,13 +15,18 @@\n package com.google.firebase.installations;\n \n import android.text.TextUtils;\n+import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import com.google.firebase.installations.local.PersistedInstallationEntry;\n import java.util.concurrent.TimeUnit;\n import java.util.regex.Pattern;\n \n-/** Util methods used for {@link FirebaseInstallations} */\n-class Utils {\n+/**\n+ * Util methods used for {@link FirebaseInstallations}.\n+ *\n+ * @hide", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNzU5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489707599", "bodyText": "When applied to a package, class, method or field, @hide removes that node and all of its children from the public documentation.", "author": "ankitaj224", "createdAt": "2020-09-16T19:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTExMg=="}], "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..2fa111d8 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -26,7 +26,7 @@ import java.util.regex.Pattern;\n  *\n  * @hide\n  */\n-public class Utils {\n+public final class Utils {\n   public static final long AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS = TimeUnit.HOURS.toSeconds(1);\n   private static final String APP_ID_IDENTIFICATION_SUBSTRING = \":\";\n   private static final Pattern API_KEY_FORMAT = Pattern.compile(\"\\\\AA[\\\\w-]{38}\\\\z\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTQ4NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486745485", "bodyText": "I probably asked this before:\nAny chance we can inject a timesource here or any instance that can be overwritten in different environments?\nNot important at all.\nBut if we plan to do something about this, then maybe add a comment or TODO.", "author": "andirayo", "createdAt": "2020-09-11T03:01:35Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -43,7 +48,12 @@ public boolean isAuthTokenExpired(PersistedInstallationEntry entry) {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n-    return TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n+    return TimeUnit.MILLISECONDS.toSeconds(currentTimeInMillis());\n+  }\n+\n+  /** Returns current time in milliseconds. */\n+  public long currentTimeInMillis() {\n+    return System.currentTimeMillis();", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NTA5Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487185096", "bodyText": "Correct, I have a open bug & PR addressing this request. #1333\nI`ll address that PR shortly after submitting this.", "author": "ankitaj224", "createdAt": "2020-09-11T17:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NjEzNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489156137", "bodyText": "Just seeing this. Some comments above may allude to this ...", "author": "andirayo", "createdAt": "2020-09-16T04:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..18766aac 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -48,11 +48,13 @@ public class Utils {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n+    // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return TimeUnit.MILLISECONDS.toSeconds(currentTimeInMillis());\n   }\n \n   /** Returns current time in milliseconds. */\n   public long currentTimeInMillis() {\n+    // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return System.currentTimeMillis();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTY5NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486745695", "bodyText": "What's the point of this method?\nMaybe a JavaDoc?", "author": "andirayo", "createdAt": "2020-09-11T03:02:26Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -53,4 +63,8 @@ static boolean isValidAppIdFormat(@Nullable String appId) {\n   static boolean isValidApiKeyFormat(@Nullable String apiKey) {\n     return API_KEY_FORMAT.matcher(apiKey).matches();\n   }\n+\n+  public long getRandomMillis() {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..2fa111d8 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -64,6 +64,10 @@ public class Utils {\n     return API_KEY_FORMAT.matcher(apiKey).matches();\n   }\n \n+  /* Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n+   where many clients get synchronized by some situation and all retry at once, sending requests\n+   in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n+  request.*/\n   public long getRandomMillis() {\n     return (long) (Math.random() * 1000);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NjM4MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486746381", "bodyText": "Generally not a fan of classes that are called \"Utils\".\nSeems like a dump for all methods that have no home, haha\nMaybe we can have a time class that deals with all time related methods and has all time related constants, and call it \"TimeSource\" or \"SystemTime\" or \"Clock\" or something?\nAnd another class that deals with validation and input checking, called \"Validator\" or something.\nEven better would be if all these methods could find a home in the respective model classes (assuming that we have model classes).\nExample: #isAuthTokenExpired goes into the AuthToken model class.", "author": "andirayo", "createdAt": "2020-09-11T03:05:21Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -15,13 +15,18 @@\n package com.google.firebase.installations;\n \n import android.text.TextUtils;\n+import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import com.google.firebase.installations.local.PersistedInstallationEntry;\n import java.util.concurrent.TimeUnit;\n import java.util.regex.Pattern;\n \n-/** Util methods used for {@link FirebaseInstallations} */\n-class Utils {\n+/**\n+ * Util methods used for {@link FirebaseInstallations}.\n+ *\n+ * @hide\n+ */\n+public class Utils {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwOTI2Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487209266", "bodyText": "I dont have a model class per se but I can clean up this class in another PR. Probably the one where I inject the Timesource .", "author": "ankitaj224", "createdAt": "2020-09-11T18:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NjM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..2fa111d8 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -26,7 +26,7 @@ import java.util.regex.Pattern;\n  *\n  * @hide\n  */\n-public class Utils {\n+public final class Utils {\n   public static final long AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS = TimeUnit.HOURS.toSeconds(1);\n   private static final String APP_ID_IDENTIFICATION_SUBSTRING = \":\";\n   private static final Pattern API_KEY_FORMAT = Pattern.compile(\"\\\\AA[\\\\w-]{38}\\\\z\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzUwMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486747501", "bodyText": "It seems to me that this class is not handling responses, but rather response stati.\nHow about one of the following names:\n\nRequestLimiter  (my favorite so far)\nBackoffStrategy\nResponseStatusHandler", "author": "andirayo", "createdAt": "2020-09-11T03:10:10Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzU5Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486747596", "bodyText": "static?", "author": "andirayo", "createdAt": "2020-09-11T03:10:32Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -30,7 +35,7 @@\n    * Checks if the FIS Auth token is expired or going to expire in next 1 hour {@link\n    * #AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS}.\n    */\n-  public boolean isAuthTokenExpired(PersistedInstallationEntry entry) {\n+  public boolean isAuthTokenExpired(@NonNull PersistedInstallationEntry entry) {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MzQwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487183403", "bodyText": "https://github.com/firebase/firebase-android-sdk/pull/1954/files#r487182669", "author": "ankitaj224", "createdAt": "2020-09-11T17:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTc0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489155748", "bodyText": "a) Please add a respective comment to the code.\nb) Just to be sure we are on the same page:\nIf this class were to use a proper TimeSource, this issue would not exist and tests could mock the TimeSource instance instead.", "author": "andirayo", "createdAt": "2020-09-16T04:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3NTQzMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489575431", "bodyText": "a) Done.\nb) Correct.", "author": "ankitaj224", "createdAt": "2020-09-16T16:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzU5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzYyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486747626", "bodyText": "static?", "author": "andirayo", "createdAt": "2020-09-11T03:10:37Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -43,7 +48,12 @@ public boolean isAuthTokenExpired(PersistedInstallationEntry entry) {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MzE4NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487183184", "bodyText": "https://github.com/firebase/firebase-android-sdk/pull/1954/files#r487182669", "author": "ankitaj224", "createdAt": "2020-09-11T17:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTg3OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489155879", "bodyText": "Please add a respective comment (not JavaDoc) to the method.", "author": "andirayo", "createdAt": "2020-09-16T04:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..18766aac 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -48,11 +48,13 @@ public class Utils {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n+    // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return TimeUnit.MILLISECONDS.toSeconds(currentTimeInMillis());\n   }\n \n   /** Returns current time in milliseconds. */\n   public long currentTimeInMillis() {\n+    // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return System.currentTimeMillis();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzY1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486747656", "bodyText": "static?", "author": "andirayo", "createdAt": "2020-09-11T03:10:42Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -43,7 +48,12 @@ public boolean isAuthTokenExpired(PersistedInstallationEntry entry) {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n-    return TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n+    return TimeUnit.MILLISECONDS.toSeconds(currentTimeInMillis());\n+  }\n+\n+  /** Returns current time in milliseconds. */\n+  public long currentTimeInMillis() {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MjY2OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487182669", "bodyText": "Mockito doesn't allow to mock static methods. As a result methods in this class are not static.", "author": "ankitaj224", "createdAt": "2020-09-11T17:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTQ1Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489155452", "bodyText": "Please add a respective comment (not Javadoc) to the code.", "author": "andirayo", "createdAt": "2020-09-16T04:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..18766aac 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -48,11 +48,13 @@ public class Utils {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n+    // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return TimeUnit.MILLISECONDS.toSeconds(currentTimeInMillis());\n   }\n \n   /** Returns current time in milliseconds. */\n   public long currentTimeInMillis() {\n+    // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return System.currentTimeMillis();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzY4Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486747687", "bodyText": "static?", "author": "andirayo", "createdAt": "2020-09-11T03:10:51Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -53,4 +63,8 @@ static boolean isValidAppIdFormat(@Nullable String appId) {\n   static boolean isValidApiKeyFormat(@Nullable String apiKey) {\n     return API_KEY_FORMAT.matcher(apiKey).matches();\n   }\n+\n+  public long getRandomMillis() {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MzA5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487183099", "bodyText": "https://github.com/firebase/firebase-android-sdk/pull/1954/files#r487182669", "author": "ankitaj224", "createdAt": "2020-09-11T17:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..2fa111d8 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -64,6 +64,10 @@ public class Utils {\n     return API_KEY_FORMAT.matcher(apiKey).matches();\n   }\n \n+  /* Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n+   where many clients get synchronized by some situation and all retry at once, sending requests\n+   in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n+  request.*/\n   public long getRandomMillis() {\n     return (long) (Math.random() * 1000);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Nzc0MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486747740", "bodyText": "final", "author": "andirayo", "createdAt": "2020-09-11T03:11:03Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -15,13 +15,18 @@\n package com.google.firebase.installations;\n \n import android.text.TextUtils;\n+import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import com.google.firebase.installations.local.PersistedInstallationEntry;\n import java.util.concurrent.TimeUnit;\n import java.util.regex.Pattern;\n \n-/** Util methods used for {@link FirebaseInstallations} */\n-class Utils {\n+/**\n+ * Util methods used for {@link FirebaseInstallations}.\n+ *\n+ * @hide\n+ */\n+public class Utils {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\nindex 3eada31a..2fa111d8 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/Utils.java\n\n@@ -26,7 +26,7 @@ import java.util.regex.Pattern;\n  *\n  * @hide\n  */\n-public class Utils {\n+public final class Utils {\n   public static final long AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS = TimeUnit.HOURS.toSeconds(1);\n   private static final String APP_ID_IDENTIFICATION_SUBSTRING = \":\";\n   private static final Pattern API_KEY_FORMAT = Pattern.compile(\"\\\\AA[\\\\w-]{38}\\\\z\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Nzk4MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486747981", "bodyText": "Why do we need a Utils instance?\nAren't all methods in Utils class methods (a.k.a. \"static\")?", "author": "andirayo", "createdAt": "2020-09-11T03:11:51Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwODY2Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487208667", "bodyText": "For testing purpose. Easier to mock & test the behavior.", "author": "ankitaj224", "createdAt": "2020-09-11T18:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Nzk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODg2NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486748865", "bodyText": "How about \"nextRequestTime\".\nThe word \"allowed\" seems to be noise.\nNot feeling strongly about it.", "author": "andirayo", "createdAt": "2020-09-11T03:15:27Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTExMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486749112", "bodyText": "#setNextRequestTime?", "author": "andirayo", "createdAt": "2020-09-11T03:16:29Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTUyMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486749522", "bodyText": "Usually it's better to not use negations in method (or variable) names.\nOptions:\n\nisConfigurationProblem (my favorite so far)\nisRetryableError and use negations above", "author": "andirayo", "createdAt": "2020-09-11T03:18:13Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;\n+    attemptCount = 0;\n+  }\n+\n+  private synchronized long getBackoffTime(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n+    if (isNonRetryableError(responseCode)) {\n+      return BACKOFF_TIME_24H_IN_MILLIS;\n+    }\n+    // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n+    // https://cloud.google.com/storage/docs/exponential-backoff.\n+    return (long)\n+        Math.min(\n+            Math.pow(2, attemptCount) + utils.getRandomMillis(), BACKOFF_TIME_30_MINS_IN_MILLIS);\n+  }\n+\n+  // Response codes classified as non-retryable for FIS API, all other response codes will be\n+  // treated as retryable-errors. Read more: go/fis-api-error-code-classification.\n+  private static boolean isNonRetryableError(int responseCode) {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDA3MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486750070", "bodyText": "Why do we set this at all?\nCan we just ignore this value or set it to -1?\nIt seems like you are abusing some existing constant (i.e. Long.MAX_VALUE) for semantic purposes.\nIf that is the case, I recommend to rather introduce your own constant that has a speaking name.\nExample: NEXT_REQUEST_TIME_IMMEDIATELY or something similar.", "author": "andirayo", "createdAt": "2020-09-11T03:20:27Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwODA3Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487208072", "bodyText": "Agreed on ignoring the value instead of resetting it. I initially had a thought without resetting it will not allow some requests to FIS servers. But on rethinking the logic, it will work correctly without resetting the nextRequestTime.\nThanks for pointing it out. PTAL.", "author": "ankitaj224", "createdAt": "2020-09-11T18:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDYwNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486750607", "bodyText": "#getBackoffDuration", "author": "andirayo", "createdAt": "2020-09-11T03:22:36Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;\n+    attemptCount = 0;\n+  }\n+\n+  private synchronized long getBackoffTime(int responseCode) {", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDc1Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486750752", "bodyText": "constants?\ndon't we have those defined somewhere already?", "author": "andirayo", "createdAt": "2020-09-11T03:23:12Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;\n+    attemptCount = 0;\n+  }\n+\n+  private synchronized long getBackoffTime(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n+    if (isNonRetryableError(responseCode)) {\n+      return BACKOFF_TIME_24H_IN_MILLIS;\n+    }\n+    // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n+    // https://cloud.google.com/storage/docs/exponential-backoff.\n+    return (long)\n+        Math.min(\n+            Math.pow(2, attemptCount) + utils.getRandomMillis(), BACKOFF_TIME_30_MINS_IN_MILLIS);\n+  }\n+\n+  // Response codes classified as non-retryable for FIS API, all other response codes will be\n+  // treated as retryable-errors. Read more: go/fis-api-error-code-classification.\n+  private static boolean isNonRetryableError(int responseCode) {\n+    return responseCode == 400 || responseCode == 403;", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDk0Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486750946", "bodyText": "SOME_RETRYABLE_RESPONSE_CODE\nor\nRETRYABLE_RESPONSE_CODE_EXAMPLE", "author": "andirayo", "createdAt": "2020-09-11T03:24:00Z", "path": "firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.robolectric.RobolectricTestRunner;\n+\n+/** Tests for {@link ResponseHandler}. */\n+@RunWith(RobolectricTestRunner.class)\n+public class ResponseHandlerTest {\n+  private static final int NON_RETRYABLE_RESPONSE_CODE = 403;\n+  private static final int RETRYABLE_RESPONSE_CODE = 500;", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java b/firebase-installations/src/test/java/com/google/firebase/installations/remote/RequestLimiterTest.java\nsimilarity index 66%\nrename from firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java\nrename to firebase-installations/src/test/java/com/google/firebase/installations/remote/RequestLimiterTest.java\nindex 40374652..26bb5f28 100644\n--- a/firebase-installations/src/test/java/com/google/firebase/installations/remote/ResponseHandlerTest.java\n+++ b/firebase-installations/src/test/java/com/google/firebase/installations/remote/RequestLimiterTest.java\n\n@@ -27,11 +27,12 @@ import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.robolectric.RobolectricTestRunner;\n \n-/** Tests for {@link ResponseHandler}. */\n+/** Tests for {@link RequestLimiter}. */\n @RunWith(RobolectricTestRunner.class)\n-public class ResponseHandlerTest {\n-  private static final int NON_RETRYABLE_RESPONSE_CODE = 403;\n-  private static final int RETRYABLE_RESPONSE_CODE = 500;\n+public class RequestLimiterTest {\n+  private static final int NON_RETRYABLE_RESPONSE_CODE_EXAMPLE = 403;\n+  private static final int RETRYABLE_RESPONSE_CODE_EXAMPLE = 500;\n+  private static final int OK_RESPONSE_CODE_EXAMPLE = 200;\n   private static final long CURRENT_TIME_IN_MILLIS = 100000L;\n   private static final long NEXT_REQUEST_TIME_IN_MILLIS_LESSER_THAN_24H =\n       CURRENT_TIME_IN_MILLIS + TimeUnit.HOURS.toMillis(2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MTI1NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r486751255", "bodyText": "I don't think this is a problem, but I want to call it out:\nIf the end-user changes the system-time to the past, the app will stop working.\nThis problem will be fixed by restarting the app and usually end-users changing system-clock know this - at least I knew whenever I have done similar things in the past, haha\nMaybe add a short comment here to call this out?", "author": "andirayo", "createdAt": "2020-09-11T03:25:18Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class ResponseHandler {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount = 0;\n+\n+  ResponseHandler(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextAllowedRequestTime(int responseCode) {\n+    if (responseCode == 200) {\n+      resetAllowedRequestTime();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffTime(responseCode);\n+    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAllowedRequestTime() {\n+    nextAllowedRequestTime = Long.MAX_VALUE;\n+    attemptCount = 0;\n+  }\n+\n+  private synchronized long getBackoffTime(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n+    if (isNonRetryableError(responseCode)) {\n+      return BACKOFF_TIME_24H_IN_MILLIS;\n+    }\n+    // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n+    // https://cloud.google.com/storage/docs/exponential-backoff.\n+    return (long)\n+        Math.min(\n+            Math.pow(2, attemptCount) + utils.getRandomMillis(), BACKOFF_TIME_30_MINS_IN_MILLIS);\n+  }\n+\n+  // Response codes classified as non-retryable for FIS API, all other response codes will be\n+  // treated as retryable-errors. Read more: go/fis-api-error-code-classification.\n+  private static boolean isNonRetryableError(int responseCode) {\n+    return responseCode == 400 || responseCode == 403;\n+  }\n+\n+  public boolean isRequestAllowed() {\n+    long currentTime = utils.currentTimeInMillis();\n+    boolean isRequestAllowed = attemptCount == 0 || currentTime > nextAllowedRequestTime;", "originalCommit": "68ddf37af1aa055f65777c1bb9dfbe0b4d16dc2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwODE5Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r487208197", "bodyText": "Added a comment. Thanks.", "author": "ankitaj224", "createdAt": "2020-09-11T18:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MTI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "53364d16d38d1f20c95dec3434218a93ecaa44df", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nsimilarity index 59%\nrename from firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\nrename to firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex a221349e..30c93cab 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/ResponseHandler.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,44 +19,44 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link ResponseHandler} class calculates the next allowed request time. Also, decides whether\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n  * a network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n-class ResponseHandler {\n+class RequestLimiter {\n   private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n   private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n-  private long nextAllowedRequestTime = Long.MAX_VALUE;\n+  private long nextRequestTime = Long.MAX_VALUE;\n \n   @GuardedBy(\"this\")\n   private int attemptCount = 0;\n \n-  ResponseHandler(Utils utils) {\n+  RequestLimiter(Utils utils) {\n     this.utils = utils;\n   }\n \n-  public synchronized void setNextAllowedRequestTime(int responseCode) {\n-    if (responseCode == 200) {\n-      resetAllowedRequestTime();\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetRequestTime();\n       return;\n     }\n     attemptCount++;\n-    long backOffTime = getBackoffTime(responseCode);\n-    nextAllowedRequestTime = utils.currentTimeInMillis() + backOffTime;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n   }\n \n-  private synchronized void resetAllowedRequestTime() {\n-    nextAllowedRequestTime = Long.MAX_VALUE;\n+  private synchronized void resetRequestTime() {\n+    nextRequestTime = Long.MAX_VALUE;\n     attemptCount = 0;\n   }\n \n-  private synchronized long getBackoffTime(int responseCode) {\n+  private synchronized long getBackoffDuration(int responseCode) {\n     // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n-    if (isNonRetryableError(responseCode)) {\n+    if (!isRetryableError(responseCode)) {\n       return BACKOFF_TIME_24H_IN_MILLIS;\n     }\n     // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n"}}, {"oid": "53364d16d38d1f20c95dec3434218a93ecaa44df", "url": "https://github.com/firebase/firebase-android-sdk/commit/53364d16d38d1f20c95dec3434218a93ecaa44df", "message": "Addressing comments", "committedDate": "2020-09-11T17:15:58Z", "type": "commit"}, {"oid": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "url": "https://github.com/firebase/firebase-android-sdk/commit/aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "message": "Refractoring few methods.", "committedDate": "2020-09-11T18:06:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1Nzg3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489157874", "bodyText": "Let's remove the word \"allowed\".\nThe next sentence is explaining that it also checks if a request is allowed.", "author": "andirayo", "createdAt": "2020-09-16T04:42:53Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether", "originalCommit": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex 8a264079..1e0a2806 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,14 +19,16 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n- * a network request to FIS servers is allowed to execute.\n+ * The {@link RequestLimiter} class calculates the next request time. Also, decides whether a\n+ * network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class RequestLimiter {\n-  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n-  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private static final long MAXIMUM_BACKOFF_DURATION_FOR_CONFIGURATION_ERRORS =\n+      TimeUnit.HOURS.toMillis(24);\n+  private static final long MAXIMUM_BACKOFF_INTERVAL_FOR_SERVER_ERRORS =\n+      TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODM4OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489158388", "bodyText": "These constant names currently only describe the actual value of the constant, but as reader I don't understand their business purpose.\nIt would be better, if the constant name describes the semantic meaning or what the constant is used for.\nHow about these names:\nMAXIMUM_BACKOFF_INTERVAL_FOR_CONFIGURATION_ERRORS\nMAXIMUM_BACKOFF_INTERVAL_FOR_ SERVER_ERRORS", "author": "andirayo", "createdAt": "2020-09-16T04:44:57Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class RequestLimiter {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);", "originalCommit": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTM4Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489159386", "bodyText": "Maybe replace \"...INTERVAL...\" with  \"...DURATION...\"\nI have just seen that you use the term \"duration\" below, instead of interval.\nFor some reason, I prefer \"interval\" today, haha, but\nI think both are fine as long as we stay consistent.", "author": "andirayo", "createdAt": "2020-09-16T04:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex 8a264079..1e0a2806 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,14 +19,16 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n- * a network request to FIS servers is allowed to execute.\n+ * The {@link RequestLimiter} class calculates the next request time. Also, decides whether a\n+ * network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class RequestLimiter {\n-  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n-  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private static final long MAXIMUM_BACKOFF_DURATION_FOR_CONFIGURATION_ERRORS =\n+      TimeUnit.HOURS.toMillis(24);\n+  private static final long MAXIMUM_BACKOFF_INTERVAL_FOR_SERVER_ERRORS =\n+      TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODgxMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489158811", "bodyText": "JavaDoc for public method?", "author": "andirayo", "createdAt": "2020-09-16T04:46:38Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class RequestLimiter {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextRequestTime;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount;\n+\n+  RequestLimiter(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextRequestTime(int responseCode) {", "originalCommit": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex 8a264079..1e0a2806 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,14 +19,16 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n- * a network request to FIS servers is allowed to execute.\n+ * The {@link RequestLimiter} class calculates the next request time. Also, decides whether a\n+ * network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class RequestLimiter {\n-  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n-  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private static final long MAXIMUM_BACKOFF_DURATION_FOR_CONFIGURATION_ERRORS =\n+      TimeUnit.HOURS.toMillis(24);\n+  private static final long MAXIMUM_BACKOFF_INTERVAL_FOR_SERVER_ERRORS =\n+      TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODkxOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489158919", "bodyText": "Maybe add a comment that this is injected to facilitate testability of TimeSource?", "author": "andirayo", "createdAt": "2020-09-16T04:47:08Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class RequestLimiter {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextRequestTime;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount;\n+\n+  RequestLimiter(Utils utils) {\n+    this.utils = utils;", "originalCommit": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex 8a264079..1e0a2806 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,14 +19,16 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n- * a network request to FIS servers is allowed to execute.\n+ * The {@link RequestLimiter} class calculates the next request time. Also, decides whether a\n+ * network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class RequestLimiter {\n-  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n-  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private static final long MAXIMUM_BACKOFF_DURATION_FOR_CONFIGURATION_ERRORS =\n+      TimeUnit.HOURS.toMillis(24);\n+  private static final long MAXIMUM_BACKOFF_INTERVAL_FOR_SERVER_ERRORS =\n+      TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTcwMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489159701", "bodyText": "This method seems to describe its implementation, rather than what it does.\nI'm not sure if this what is happening here, but what about this name:\n#resetBackoffStrategy\nor\n#resetBackoffInterval", "author": "andirayo", "createdAt": "2020-09-16T04:50:25Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class RequestLimiter {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextRequestTime;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount;\n+\n+  RequestLimiter(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetAttemptCount();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAttemptCount() {", "originalCommit": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex 8a264079..1e0a2806 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,14 +19,16 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n- * a network request to FIS servers is allowed to execute.\n+ * The {@link RequestLimiter} class calculates the next request time. Also, decides whether a\n+ * network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class RequestLimiter {\n-  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n-  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private static final long MAXIMUM_BACKOFF_DURATION_FOR_CONFIGURATION_ERRORS =\n+      TimeUnit.HOURS.toMillis(24);\n+  private static final long MAXIMUM_BACKOFF_INTERVAL_FOR_SERVER_ERRORS =\n+      TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTg5MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489159890", "bodyText": "\"[...] non-retryable server errors. [...]\"", "author": "andirayo", "createdAt": "2020-09-16T04:51:12Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class RequestLimiter {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextRequestTime;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount;\n+\n+  RequestLimiter(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetAttemptCount();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAttemptCount() {\n+    attemptCount = 0;\n+  }\n+\n+  private synchronized long getBackoffDuration(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.", "originalCommit": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex 8a264079..1e0a2806 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,14 +19,16 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n- * a network request to FIS servers is allowed to execute.\n+ * The {@link RequestLimiter} class calculates the next request time. Also, decides whether a\n+ * network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class RequestLimiter {\n-  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n-  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private static final long MAXIMUM_BACKOFF_DURATION_FOR_CONFIGURATION_ERRORS =\n+      TimeUnit.HOURS.toMillis(24);\n+  private static final long MAXIMUM_BACKOFF_INTERVAL_FOR_SERVER_ERRORS =\n+      TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MDIzNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1954#discussion_r489160235", "bodyText": "Please add that these are server errors and response code 429 (i.e. TOO_MANY_REQUESTS)", "author": "andirayo", "createdAt": "2020-09-16T04:52:33Z", "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.remote;\n+\n+import androidx.annotation.GuardedBy;\n+import com.google.firebase.installations.Utils;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n+ * a network request to FIS servers is allowed to execute.\n+ *\n+ * @hide\n+ */\n+class RequestLimiter {\n+  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n+  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private final Utils utils;\n+\n+  @GuardedBy(\"this\")\n+  private long nextRequestTime;\n+\n+  @GuardedBy(\"this\")\n+  private int attemptCount;\n+\n+  RequestLimiter(Utils utils) {\n+    this.utils = utils;\n+  }\n+\n+  public synchronized void setNextRequestTime(int responseCode) {\n+    if (isSuccessful(responseCode)) {\n+      resetAttemptCount();\n+      return;\n+    }\n+    attemptCount++;\n+    long backOffTime = getBackoffDuration(responseCode);\n+    nextRequestTime = utils.currentTimeInMillis() + backOffTime;\n+  }\n+\n+  private synchronized void resetAttemptCount() {\n+    attemptCount = 0;\n+  }\n+\n+  private synchronized long getBackoffDuration(int responseCode) {\n+    // Fixed 24 hours silence period for non-retryable errors. Read more: b/160751425.\n+    if (!isRetryableError(responseCode)) {\n+      return BACKOFF_TIME_24H_IN_MILLIS;\n+    }\n+    // Quickly increasing dynamically configured back-off strategy for Retryable errors. Read more:\n+    // https://cloud.google.com/storage/docs/exponential-backoff.\n+    return (long)\n+        Math.min(\n+            Math.pow(2, attemptCount) + utils.getRandomMillis(), BACKOFF_TIME_30_MINS_IN_MILLIS);\n+  }\n+\n+  // Response codes classified as retryable for FIS API. Read more on FIS response codes:\n+  // go/fis-api-error-code-classification.", "originalCommit": "aa014ad624f85f62b4d4e27cdcefbc3a1650f839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "chunk": "diff --git a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\nindex 8a264079..1e0a2806 100644\n--- a/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n+++ b/firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java\n\n@@ -19,14 +19,16 @@ import com.google.firebase.installations.Utils;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * The {@link RequestLimiter} class calculates the next allowed request time. Also, decides whether\n- * a network request to FIS servers is allowed to execute.\n+ * The {@link RequestLimiter} class calculates the next request time. Also, decides whether a\n+ * network request to FIS servers is allowed to execute.\n  *\n  * @hide\n  */\n class RequestLimiter {\n-  private static final long BACKOFF_TIME_24H_IN_MILLIS = TimeUnit.HOURS.toMillis(24);\n-  private static final long BACKOFF_TIME_30_MINS_IN_MILLIS = TimeUnit.MINUTES.toMillis(30);\n+  private static final long MAXIMUM_BACKOFF_DURATION_FOR_CONFIGURATION_ERRORS =\n+      TimeUnit.HOURS.toMillis(24);\n+  private static final long MAXIMUM_BACKOFF_INTERVAL_FOR_SERVER_ERRORS =\n+      TimeUnit.MINUTES.toMillis(30);\n   private final Utils utils;\n \n   @GuardedBy(\"this\")\n"}}, {"oid": "eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "url": "https://github.com/firebase/firebase-android-sdk/commit/eae4adbbf50130b1c97df0b2c122efdcb6491fe1", "message": "Fixing javadoc & comments.", "committedDate": "2020-09-16T19:39:58Z", "type": "commit"}, {"oid": "6a9c7c2abac1775b66297e91f67868a7d149d41d", "url": "https://github.com/firebase/firebase-android-sdk/commit/6a9c7c2abac1775b66297e91f67868a7d149d41d", "message": "Merge branch 'master' of github.com:firebase/firebase-android-sdk into responseHandler", "committedDate": "2020-09-16T19:44:08Z", "type": "commit"}, {"oid": "97cc273508ee21d5f24aa08c040f847d0f8b94bd", "url": "https://github.com/firebase/firebase-android-sdk/commit/97cc273508ee21d5f24aa08c040f847d0f8b94bd", "message": "Merge branch 'master' of github.com:firebase/firebase-android-sdk into responseHandler", "committedDate": "2020-09-16T22:37:03Z", "type": "commit"}, {"oid": "a019e0430222be5c67fa7301e23188ff33e07147", "url": "https://github.com/firebase/firebase-android-sdk/commit/a019e0430222be5c67fa7301e23188ff33e07147", "message": "Fixing compile errors", "committedDate": "2020-09-17T20:26:08Z", "type": "commit"}]}