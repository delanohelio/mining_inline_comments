{"pr_number": 2277, "pr_title": "Implement `startAfter` for RTDB queries", "pr_createdAt": "2020-12-21T21:07:04Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/2277", "timeline": [{"oid": "8a2010306bc9546aa4b8a03d37af2d4451a61566", "url": "https://github.com/firebase/firebase-android-sdk/commit/8a2010306bc9546aa4b8a03d37af2d4451a61566", "message": "startAfter temporary commit", "committedDate": "2020-12-17T16:56:49Z", "type": "commit"}, {"oid": "b217ab700cd297542b46a0270a0084966a2907b0", "url": "https://github.com/firebase/firebase-android-sdk/commit/b217ab700cd297542b46a0270a0084966a2907b0", "message": "Merge branch 'master' into jw/start-after", "committedDate": "2020-12-17T16:58:05Z", "type": "commit"}, {"oid": "6022501e7dd6dc57d1a4e8c65248645e5c76fa41", "url": "https://github.com/firebase/firebase-android-sdk/commit/6022501e7dd6dc57d1a4e8c65248645e5c76fa41", "message": "Merge branch 'master' into jw/start-after", "committedDate": "2020-12-21T21:03:37Z", "type": "commit"}, {"oid": "e74719d4ccc7a1b130abe1ac98c2429342b33ec1", "url": "https://github.com/firebase/firebase-android-sdk/commit/e74719d4ccc7a1b130abe1ac98c2429342b33ec1", "message": "Add more tests", "committedDate": "2020-12-22T00:12:14Z", "type": "commit"}, {"oid": "db3dc75b78e68c324a43c579258626243423c1e5", "url": "https://github.com/firebase/firebase-android-sdk/commit/db3dc75b78e68c324a43c579258626243423c1e5", "message": "fix tests", "committedDate": "2020-12-22T01:01:03Z", "type": "commit"}, {"oid": "93a97797da16e2874a3ca149d4d17187fef98529", "url": "https://github.com/firebase/firebase-android-sdk/commit/93a97797da16e2874a3ca149d4d17187fef98529", "message": "Move lex logic in PushIdGenerator, fix tests", "committedDate": "2020-12-22T20:14:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDE1NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552984154", "bodyText": "Do you know what the 2 is meant to indicate? If not, I suggest we remove it from here and above.", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:05:21Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1427,6 +1784,25 @@ public void nullPrioritiesIncludedInStartAt2() throws DatabaseException, Interru\n     DeepEquals.assertEquals(expected, result);\n   }\n \n+  @Test\n+  public void nullPrioritiesIncludedInStartAfter2() throws DatabaseException, InterruptedException {", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd31fe4499364e821021a960639311bc9d4b02c8", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 8c452648..7a14dd90 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -1785,7 +1891,7 @@ public class QueryTest {\n   }\n \n   @Test\n-  public void nullPrioritiesIncludedInStartAfter2() throws DatabaseException, InterruptedException {\n+  public void nullPrioritiesIncludedInStartAfter() throws DatabaseException, InterruptedException {\n     DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n \n     ref.setValue(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDU0MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552984541", "bodyText": "The case number looks like it refers to an old bug about startAt, which is not applicable here. I would drop it (at least from here)", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:06:13Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -2079,6 +2455,43 @@ public void startAtWithTwoArgumentsWorksCase1169()\n     assertEquals(2, i);\n   }\n \n+  @Test\n+  public void startAfterWithTwoArgumentsWorksCase1169()", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd31fe4499364e821021a960639311bc9d4b02c8", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 8c452648..7a14dd90 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -2456,7 +2562,7 @@ public class QueryTest {\n   }\n \n   @Test\n-  public void startAfterWithTwoArgumentsWorksCase1169()\n+  public void startAfterWithTwoArgumentsWorks()\n       throws DatabaseException, TestFailure, ExecutionException, TimeoutException,\n           InterruptedException {\n     DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDgwMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552984800", "bodyText": "Same comment about case number.", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:06:28Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -2920,6 +3333,94 @@ public void onCancelled(DatabaseError error) {}\n     assertEquals(\"a\", removedSecond.get(0));\n   }\n \n+  // TODO(wyszynski): endBefore\n+  @Test\n+  public void case2003CorrectlyGetEventsForStartAfterEndAtQueriesWhenPriorityChanges()", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd31fe4499364e821021a960639311bc9d4b02c8", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 8c452648..7a14dd90 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -3335,7 +3441,7 @@ public class QueryTest {\n \n   // TODO(wyszynski): endBefore\n   @Test\n-  public void case2003CorrectlyGetEventsForStartAfterEndAtQueriesWhenPriorityChanges()\n+  public void correctlyGetEventsForStartAfterEndAtQueriesWhenPriorityChanges()\n       throws DatabaseException, TestFailure, ExecutionException, TimeoutException,\n           InterruptedException {\n     DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NTk4Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552985987", "bodyText": "s/inclusive/exclusive (and maybe s/at/after, but then I am no longer sure whether this is inclusive or exclusive)", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:07:41Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NjI5Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552986293", "bodyText": "Same as above", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:08:02Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NjcxNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552986716", "bodyText": "Same as above", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:08:25Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NzA2Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552987066", "bodyText": "We are well past version 2 now :)", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:08:47Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NzM2Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552987363", "bodyText": "Same as above", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:09:04Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDEzNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994137", "bodyText": "Same as above", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:22:29Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDI1NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994255", "bodyText": "Same as above", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:22:48Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key name to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value, @Nullable String key) {\n+    return startAfter(new DoubleNode(value, PriorityUtilities.NullPriority()), key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDMyMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994320", "bodyText": "Same as above", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:22:57Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key name to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value, @Nullable String key) {\n+    return startAfter(new DoubleNode(value, PriorityUtilities.NullPriority()), key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex 12670524..b1933312 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -283,8 +283,9 @@ public class Query {\n    * Create a query constrained to only return child nodes with a value greater than the given\n    * value, using the given orderBy directive or priority as default.\n    *\n-   * @param value The value to start at, inclusive\n+   * @param value The value to start at, exclusive\n    * @return A Query with the new constraint\n+   * @since 19.6\n    */\n   @NonNull\n   public Query startAfter(@Nullable String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDczMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994732", "bodyText": "This seems like leftover debug information.", "author": "schmidt-sebastian", "createdAt": "2021-01-06T22:23:56Z", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1112,6 +1112,8 @@ private void putInternal(\n     long writeId = this.writeCounter++;\n \n     outstandingPuts.put(writeId, new OutstandingPut(action, request, onComplete));\n+    logger.info(\"Can send writes = \" + canSendWrites());\n+    logger.info(\"Trying to send puts = \" + outstandingPuts.get(writeId).getRequest());", "originalCommit": "93a97797da16e2874a3ca149d4d17187fef98529", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java b/firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java\nindex c264f370..404d1294 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java\n\n@@ -1112,8 +1112,6 @@ public class PersistentConnectionImpl implements Connection.Delegate, Persistent\n     long writeId = this.writeCounter++;\n \n     outstandingPuts.put(writeId, new OutstandingPut(action, request, onComplete));\n-    logger.info(\"Can send writes = \" + canSendWrites());\n-    logger.info(\"Trying to send puts = \" + outstandingPuts.get(writeId).getRequest());\n     if (canSendWrites()) {\n       sendPut(writeId);\n     }\n"}}, {"oid": "52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "url": "https://github.com/firebase/firebase-android-sdk/commit/52af0bed8d508cec2d7da5cc8cacc7f87c9868df", "message": "Fix push id generation scheme, add test to detect breakage", "committedDate": "2021-01-06T23:36:37Z", "type": "commit"}, {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8", "url": "https://github.com/firebase/firebase-android-sdk/commit/bd31fe4499364e821021a960639311bc9d4b02c8", "message": "test naming comments", "committedDate": "2021-01-06T23:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwODY3NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553108675", "bodyText": "Can you explain why \"d\" is part of the result set when it has a priority of \"w\"?", "author": "schmidt-sebastian", "createdAt": "2021-01-07T04:55:24Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1055,6 +1379,29 @@ public void startAtEndAtWithPriorityWorks() throws DatabaseException, Interrupte\n     helper.waitForEvents();\n   }\n \n+  // TODO(wyszynski): endBefore\n+  @Test\n+  public void startAfterWithPriorityWorks() throws DatabaseException, InterruptedException {\n+    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n+\n+    ValueExpectationHelper helper = new ValueExpectationHelper();\n+    helper.add(\n+        ref.startAfter(\"w\").endAt(\"y\"),\n+        new MapBuilder().put(\"d\", 4L).put(\"b\", 2L).put(\"c\", 3L).build());", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b75975f28b2a544ca2881bdc391071a00617c53", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 7a14dd90..0085e88d 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -1381,14 +1381,12 @@ public class QueryTest {\n \n   // TODO(wyszynski): endBefore\n   @Test\n-  public void startAfterWithPriorityWorks() throws DatabaseException, InterruptedException {\n+  public void startAfterEndAtWithPriorityWorks() throws DatabaseException, InterruptedException {\n     DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n \n     ValueExpectationHelper helper = new ValueExpectationHelper();\n-    helper.add(\n-        ref.startAfter(\"w\").endAt(\"y\"),\n-        new MapBuilder().put(\"d\", 4L).put(\"b\", 2L).put(\"c\", 3L).build());\n-    helper.add(ref.startAfter(\"w\").endAt(\"x\"), new MapBuilder().put(\"d\", 4L).put(\"c\", 3L).build());\n+    helper.add(ref.startAfter(\"w\").endAt(\"y\"), new MapBuilder().put(\"b\", 2L).put(\"c\", 3L).build());\n+    helper.add(ref.startAfter(\"w\").endAt(\"x\"), new MapBuilder().put(\"c\", 3L).build());\n     helper.add(ref.startAfter(\"a\").endAt(\"c\"), null);\n \n     ref.setValue(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwOTY4Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553109687", "bodyText": "There is also a 2 here as a suffix.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T04:59:20Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1150,6 +1567,29 @@ public void startAtEndAtWithPriorityAndNameWorks2()\n     helper.waitForEvents();\n   }\n \n+  @Test\n+  public void startAfterEndAtWithPriorityAndNameWorks2()", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE4MjI2Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554182266", "bodyText": "Some of these didn't really add any value and were just blindly copy/pastes. I'm removed them.", "author": "IanWyszynski", "createdAt": "2021-01-08T20:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwOTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4c43f39830a6096d58cd03fe17c62aa106ddbc01", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 7a14dd90..ad346eca 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -1567,29 +1563,6 @@ public class QueryTest {\n     helper.waitForEvents();\n   }\n \n-  @Test\n-  public void startAfterEndAtWithPriorityAndNameWorks2()\n-      throws DatabaseException, InterruptedException {\n-    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n-\n-    ValueExpectationHelper helper = new ValueExpectationHelper();\n-    helper.add(\n-        ref.startAfter(1, \"c\").endAt(2, \"b\"),\n-        new MapBuilder().put(\"a\", 1L).put(\"b\", 2L).put(\"d\", 4L).build());\n-    helper.add(ref.startAfter(1, \"d\").endAt(2, \"a\"), new MapBuilder().put(\"a\", 1L).build());\n-    helper.add(ref.startAfter(1, \"e\").endAt(2), new MapBuilder().put(\"a\", 1L).put(\"b\", 2L).build());\n-\n-    ref.setValue(\n-        new MapBuilder()\n-            .put(\"c\", new MapBuilder().put(\".value\", 3).put(\".priority\", 1).build())\n-            .put(\"d\", new MapBuilder().put(\".value\", 4).put(\".priority\", 1).build())\n-            .put(\"a\", new MapBuilder().put(\".value\", 1).put(\".priority\", 2).build())\n-            .put(\"b\", new MapBuilder().put(\".value\", 2).put(\".priority\", 2).build())\n-            .build());\n-\n-    helper.waitForEvents();\n-  }\n-\n   @Test\n   public void startAtEndAtWithPriorityAndNameWorksWithServerData2()\n       throws DatabaseException, InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwOTcyMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553109722", "bodyText": "Also a 2 as a suffix.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T04:59:35Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1174,6 +1614,29 @@ public void startAtEndAtWithPriorityAndNameWorksWithServerData2()\n     helper.waitForEvents();\n   }\n \n+  @Test\n+  public void startAfterEndAtWithPriorityAndNameWorksWithServerData2()", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c43f39830a6096d58cd03fe17c62aa106ddbc01", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 7a14dd90..ad346eca 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -1614,29 +1587,6 @@ public class QueryTest {\n     helper.waitForEvents();\n   }\n \n-  @Test\n-  public void startAfterEndAtWithPriorityAndNameWorksWithServerData2()\n-      throws DatabaseException, InterruptedException {\n-    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n-\n-    ref.setValue(\n-        new MapBuilder()\n-            .put(\"c\", new MapBuilder().put(\".value\", 3).put(\".priority\", 1).build())\n-            .put(\"d\", new MapBuilder().put(\".value\", 4).put(\".priority\", 1).build())\n-            .put(\"a\", new MapBuilder().put(\".value\", 1).put(\".priority\", 2).build())\n-            .put(\"b\", new MapBuilder().put(\".value\", 2).put(\".priority\", 2).build())\n-            .build());\n-\n-    ValueExpectationHelper helper = new ValueExpectationHelper();\n-    helper.add(\n-        ref.startAfter(1, \"c\").endAt(2, \"b\"),\n-        new MapBuilder().put(\"a\", 1L).put(\"b\", 2L).put(\"d\", 4L).build());\n-    helper.add(ref.startAfter(1, \"d\").endAt(2, \"a\"), new MapBuilder().put(\"a\", 1L).build());\n-    helper.add(ref.startAfter(1, \"e\").endAt(2), new MapBuilder().put(\"a\", 1L).put(\"b\", 2L).build());\n-\n-    helper.waitForEvents();\n-  }\n-\n   @Test\n   public void ensurePrevNameWorksWithLimit()\n       throws DatabaseException, TestFailure, ExecutionException, TimeoutException,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMDc3Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553110776", "bodyText": "Another strange suffix. If these are used to distinguish test cases, then we should come up with more specific names.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:04:10Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3054,6 +3661,45 @@ public void onCancelled(DatabaseError error) {}\n     IntegrationTestHelpers.waitFor(done);\n   }\n \n+  @Test\n+  public void integerKeysBehaveNumericallyStartAfter1()", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "316b3ec78d4db63d3dd70031dafb5840118b3060", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 7a14dd90..33dc89b6 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -3700,6 +3695,44 @@ public class QueryTest {\n     IntegrationTestHelpers.waitFor(done);\n   }\n \n+  @Test\n+  public void integerKeysBehaveNumericallyStartAfterWithOverflow()\n+      throws InterruptedException, TestFailure, TimeoutException {\n+    final DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n+    final Semaphore done = new Semaphore(0);\n+    ref.setValue(\n+        new MapBuilder()\n+            .put(String.valueOf(Integer.MAX_VALUE), true)\n+            .put(\"80\", true)\n+            .put(\"1\", true)\n+            .put(\"50\", true)\n+            .put(\"550\", true)\n+            .put(\"6\", true)\n+            .put(\"600\", true)\n+            .put(\"70\", true)\n+            .put(\"8\", true)\n+            .build(),\n+        new DatabaseReference.CompletionListener() {\n+          @Override\n+          public void onComplete(DatabaseError error, DatabaseReference ref) {\n+            ref.startAfter(null, String.valueOf(Integer.MAX_VALUE))\n+                .addListenerForSingleValueEvent(\n+                    new ValueEventListener() {\n+                      @Override\n+                      public void onDataChange(DataSnapshot snapshot) {\n+                        DeepEquals.assertEquals(null, snapshot.getValue());\n+                        done.release();\n+                      }\n+\n+                      @Override\n+                      public void onCancelled(DatabaseError error) {}\n+                    });\n+          }\n+        });\n+\n+    IntegrationTestHelpers.waitFor(done);\n+  }\n+\n   @Test\n   public void integerKeysBehaveNumerically2()\n       throws InterruptedException, TestFailure, TimeoutException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTA1Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553111052", "bodyText": "Please come up with a more specific test name.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:05:25Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3142,6 +3788,46 @@ public void onCancelled(DatabaseError error) {}\n     IntegrationTestHelpers.waitFor(done);\n   }\n \n+  @Test\n+  public void integerKeysBehaveNumerically3StartAfter()", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab248d49ae1bbaad2301e07a5de054804c7b8e8", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 7a14dd90..e0a47e46 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -3789,7 +3822,7 @@ public class QueryTest {\n   }\n \n   @Test\n-  public void integerKeysBehaveNumerically3StartAfter()\n+  public void integerKeysBehaveNumericallyWithStartAfter()\n       throws InterruptedException, TestFailure, TimeoutException {\n     final DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n     final Semaphore done = new Semaphore(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTIwNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553111207", "bodyText": "Please fix.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:05:56Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3522,28 +4208,28 @@ public void onCancelled(@NonNull DatabaseError error) {}\n     assertEquals(43L, Tasks.await(reader.get()).getValue());\n   }\n \n-  @Test\n-  public void getUpdatesPersistenceCacheWhenEnabled()\n-      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n-          TimeoutException {\n-    FirebaseApp readerApp =\n-        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n-    FirebaseApp writerApp =\n-        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n-    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n-    readerDb.setPersistenceEnabled(true);\n-    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n-    DatabaseReference reader = readerDb.getReference();\n-    DatabaseReference writer = writerDb.getReference();\n-\n-    assertNull(new WriteFuture(writer, 42L).timedGet());\n-    assertEquals(42L, Tasks.await(reader.get()).getValue());\n-\n-    readerDb.goOffline();\n-\n-    Semaphore semaphore = new Semaphore(0);\n-    assertNotNull(ReadFuture.untilEquals(reader, 42L).timedGet());\n-  }\n+  //  @Test", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ab248d49ae1bbaad2301e07a5de054804c7b8e8", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex 7a14dd90..e0a47e46 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -4208,28 +4241,28 @@ public class QueryTest {\n     assertEquals(43L, Tasks.await(reader.get()).getValue());\n   }\n \n-  //  @Test\n-  //  public void getUpdatesPersistenceCacheWhenEnabled()\n-  //      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n-  //          TimeoutException {\n-  //    FirebaseApp readerApp =\n-  //        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n-  //    FirebaseApp writerApp =\n-  //        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n-  //    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n-  //    readerDb.setPersistenceEnabled(true);\n-  //    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n-  //    DatabaseReference reader = readerDb.getReference();\n-  //    DatabaseReference writer = writerDb.getReference();\n-  //\n-  //    assertNull(new WriteFuture(writer, 42L).timedGet());\n-  //    assertEquals(42L, Tasks.await(reader.get()).getValue());\n-  //\n-  //    readerDb.goOffline();\n-  //\n-  //    Semaphore semaphore = new Semaphore(0);\n-  //    assertNotNull(ReadFuture.untilEquals(reader, 42L).timedGet());\n-  //  }\n+  @Test\n+  public void getUpdatesPersistenceCacheWhenEnabled()\n+      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n+          TimeoutException {\n+    FirebaseApp readerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseApp writerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n+    readerDb.setPersistenceEnabled(true);\n+    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n+    DatabaseReference reader = readerDb.getReference();\n+    DatabaseReference writer = writerDb.getReference();\n+\n+    assertNull(new WriteFuture(writer, 42L).timedGet());\n+    assertEquals(42L, Tasks.await(reader.get()).getValue());\n+\n+    readerDb.goOffline();\n+\n+    Semaphore semaphore = new Semaphore(0);\n+    assertNotNull(ReadFuture.untilEquals(reader, 42L).timedGet());\n+  }\n \n   @Test\n   public void querySnapshotChildrenRespectDefaultOrdering()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjAzOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112039", "bodyText": "s/priority/value", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:09:37Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,96 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79157aa084b8214766780e37ea0c14ff5ef33fd3", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex b1933312..5fc1bf0a 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -323,7 +323,7 @@ public class Query {\n    * value, using the given orderBy directive or priority as default, and additionally only child\n    * nodes with a key greater than or equal to the given key.\n    *\n-   * @param value The priority to start at\n+   * @param value The value to start at\n    * @param key The key to start at, exclusive\n    * @return A Query with the new constraint\n    * @since 19.6\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjIzMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112233", "bodyText": "The first greater should be \"equal\", no?", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:10:25Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,96 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at\n+   * @param key The key to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79157aa084b8214766780e37ea0c14ff5ef33fd3", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex b1933312..5fc1bf0a 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -323,7 +323,7 @@ public class Query {\n    * value, using the given orderBy directive or priority as default, and additionally only child\n    * nodes with a key greater than or equal to the given key.\n    *\n-   * @param value The priority to start at\n+   * @param value The value to start at\n    * @param key The key to start at, exclusive\n    * @return A Query with the new constraint\n    * @since 19.6\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjI5MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112290", "bodyText": "s/priority/value", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:10:44Z", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,96 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at\n+   * @param key The key to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at\n+   * @param key The key name to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value, @Nullable String key) {\n+    return startAfter(new DoubleNode(value, PriorityUtilities.NullPriority()), key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79157aa084b8214766780e37ea0c14ff5ef33fd3", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/Query.java b/firebase-database/src/main/java/com/google/firebase/database/Query.java\nindex b1933312..5fc1bf0a 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/Query.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/Query.java\n\n@@ -323,7 +323,7 @@ public class Query {\n    * value, using the given orderBy directive or priority as default, and additionally only child\n    * nodes with a key greater than or equal to the given key.\n    *\n-   * @param value The priority to start at\n+   * @param value The value to start at\n    * @param key The key to start at, exclusive\n    * @return A Query with the new constraint\n    * @since 19.6\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjUxNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112514", "bodyText": "Nit: This is usually called a successor.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:11:42Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,38 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String nextAfter(String key) {", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b75975f28b2a544ca2881bdc391071a00617c53", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\nindex c892d539..8d168eca 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n\n@@ -74,6 +74,9 @@ public class PushIdGenerator {\n     StringBuilder next = new StringBuilder(key);\n \n     if (next.length() < MAX_KEY_LEN) {\n+      // If this key doesn't have all possible character slots filled,\n+      // the lexicographical successor is the same string with the smallest\n+      // possible character appended to the end.\n       next.append(MIN_PUSH_CHAR);\n       return next.toString();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112933", "bodyText": "This looks like it could trigger an integer overflow. You could probably just use a long here, unless there are some specifications for valid keys that I am not aware of.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:13:28Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,38 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String nextAfter(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      return String.valueOf(num + 1);", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0ODQxMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554148412", "bodyText": "Using a long should be fine, the limit on keys is 768 bytes:\nhttps://firebase.google.com/docs/database/usage/limits#data_tree", "author": "IanWyszynski", "createdAt": "2021-01-08T19:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1MjQ1MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554152451", "bodyText": "The only other place we're using tryParseInt is in:\n\n  \n    \n      firebase-android-sdk/firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildrenNode.java\n    \n    \n         Line 134\n      in\n      e65f487\n    \n    \n    \n    \n\n        \n          \n           Integer keyAsInt = Utilities.tryParseInt(key); \n        \n    \n  \n\n\nWhere it seems to be used to decide the number of results in an array. I think we should be able to change the method to tryParseLong without risk.", "author": "IanWyszynski", "createdAt": "2021-01-08T19:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1Nzc3Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554157776", "bodyText": "Upon further consideration, I think we should handle the overflow here. In our public docs, we assume at most 32-bit integer keys for ordering semantics:\nhttps://firebase.google.com/docs/database/web/lists-of-data\nI wonder if it's reasonable to return MIN_PUSH_CHAR here since that's the next string in our documented key ordering.", "author": "IanWyszynski", "createdAt": "2021-01-08T19:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0b75975f28b2a544ca2881bdc391071a00617c53", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\nindex c892d539..8d168eca 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n\n@@ -74,6 +74,9 @@ public class PushIdGenerator {\n     StringBuilder next = new StringBuilder(key);\n \n     if (next.length() < MAX_KEY_LEN) {\n+      // If this key doesn't have all possible character slots filled,\n+      // the lexicographical successor is the same string with the smallest\n+      // possible character appended to the end.\n       next.append(MIN_PUSH_CHAR);\n       return next.toString();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNTAxNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553115015", "bodyText": "Nit: Flip assignments for clarity.\nYou could also refer to PUSH_CHARS and get the values from there (which will be slower and more code, so I am not sure it is actually worth it).", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:22:14Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -15,14 +15,22 @@\n package com.google.firebase.database.core.utilities;\n \n import static com.google.firebase.database.core.utilities.Utilities.hardAssert;\n+import static com.google.firebase.database.core.utilities.Utilities.tryParseInt;\n \n+import com.google.firebase.database.snapshot.ChildKey;\n import java.util.Random;\n \n public class PushIdGenerator {\n \n   private static final String PUSH_CHARS =\n       \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\";\n \n+  private static final char MAX_PUSH_CHAR = 'z';\n+\n+  private static final char MIN_PUSH_CHAR = '-';", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0MzMxNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554143314", "bodyText": "I sort of prefer having separate sentinel values for this since they trigger edge-cases in the successor/predecessor code.", "author": "IanWyszynski", "createdAt": "2021-01-08T19:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNTAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "79157aa084b8214766780e37ea0c14ff5ef33fd3", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\nindex c892d539..cf797de5 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n\n@@ -25,10 +25,10 @@ public class PushIdGenerator {\n   private static final String PUSH_CHARS =\n       \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\";\n \n-  private static final char MAX_PUSH_CHAR = 'z';\n-\n   private static final char MIN_PUSH_CHAR = '-';\n \n+  private static final char MAX_PUSH_CHAR = 'z';\n+\n   private static final int MAX_KEY_LEN = 786;\n \n   private static final Random randGen = new Random();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNTU2OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553115569", "bodyText": "This is unused.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:24:24Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -273,4 +273,8 @@ public static boolean equals(@Nullable Object left, @Nullable Object right) {\n     }\n     return left.equals(right);\n   }\n+\n+  public static String next(@Nullable String value) {", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79157aa084b8214766780e37ea0c14ff5ef33fd3", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\nindex b6b77f4b..ad8349ee 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n\n@@ -273,8 +273,4 @@ public class Utilities {\n     }\n     return left.equals(right);\n   }\n-\n-  public static String next(@Nullable String value) {\n-    return \"\";\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNjA3MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553116071", "bodyText": "These changes don't seem to be needed.", "author": "schmidt-sebastian", "createdAt": "2021-01-07T05:26:19Z", "path": "firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildKey.java", "diffHunk": "@@ -56,11 +56,11 @@ public boolean isPriorityChildName() {\n     return this.equals(PRIORITY_CHILD_KEY);\n   }\n \n-  protected boolean isInt() {\n+  public boolean isInt() {", "originalCommit": "bd31fe4499364e821021a960639311bc9d4b02c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79157aa084b8214766780e37ea0c14ff5ef33fd3", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildKey.java b/firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildKey.java\nindex efa66a7d..711dde7a 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildKey.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildKey.java\n\n@@ -56,11 +59,11 @@ public class ChildKey implements Comparable<ChildKey> {\n     return this.equals(PRIORITY_CHILD_KEY);\n   }\n \n-  public boolean isInt() {\n+  boolean isInt() {\n     return false;\n   }\n \n-  public int intValue() {\n+  int intValue() {\n     return 0;\n   }\n \n"}}, {"oid": "0b75975f28b2a544ca2881bdc391071a00617c53", "url": "https://github.com/firebase/firebase-android-sdk/commit/0b75975f28b2a544ca2881bdc391071a00617c53", "message": "Fix start post bug", "committedDate": "2021-01-08T19:15:07Z", "type": "commit"}, {"oid": "79157aa084b8214766780e37ea0c14ff5ef33fd3", "url": "https://github.com/firebase/firebase-android-sdk/commit/79157aa084b8214766780e37ea0c14ff5ef33fd3", "message": "Address review feedback", "committedDate": "2021-01-08T19:34:45Z", "type": "commit"}, {"oid": "6b9bfb592a2954a9eb52197cf07582c10d065480", "url": "https://github.com/firebase/firebase-android-sdk/commit/6b9bfb592a2954a9eb52197cf07582c10d065480", "message": "s/tryParseInt/tryParseLong/g", "committedDate": "2021-01-08T19:43:57Z", "type": "commit"}, {"oid": "316b3ec78d4db63d3dd70031dafb5840118b3060", "url": "https://github.com/firebase/firebase-android-sdk/commit/316b3ec78d4db63d3dd70031dafb5840118b3060", "message": "Handle startAfter(..., Integer.MAX_VALUE)", "committedDate": "2021-01-08T20:01:27Z", "type": "commit"}, {"oid": "2ea31e03f9c9f3796a983350c3ba7f822c46ca3a", "url": "https://github.com/firebase/firebase-android-sdk/commit/2ea31e03f9c9f3796a983350c3ba7f822c46ca3a", "message": "Merge branch 'jw/start-after' of https://github.com/firebase/firebase-android-sdk into jw/start-after", "committedDate": "2021-01-08T20:04:05Z", "type": "commit"}, {"oid": "3b5af050bae684d0c5fe94ab11a93b456f92a588", "url": "https://github.com/firebase/firebase-android-sdk/commit/3b5af050bae684d0c5fe94ab11a93b456f92a588", "message": "Revert \"s/tryParseInt/tryParseLong/g\"\n\nThis reverts commit 6b9bfb592a2954a9eb52197cf07582c10d065480.", "committedDate": "2021-01-08T20:05:06Z", "type": "commit"}, {"oid": "a96d7ebaa06fb996d32a745ae95313a28939cc59", "url": "https://github.com/firebase/firebase-android-sdk/commit/a96d7ebaa06fb996d32a745ae95313a28939cc59", "message": "more cleanup", "committedDate": "2021-01-08T20:23:06Z", "type": "commit"}, {"oid": "9ab248d49ae1bbaad2301e07a5de054804c7b8e8", "url": "https://github.com/firebase/firebase-android-sdk/commit/9ab248d49ae1bbaad2301e07a5de054804c7b8e8", "message": "Fix tests", "committedDate": "2021-01-08T20:37:11Z", "type": "commit"}, {"oid": "4c43f39830a6096d58cd03fe17c62aa106ddbc01", "url": "https://github.com/firebase/firebase-android-sdk/commit/4c43f39830a6096d58cd03fe17c62aa106ddbc01", "message": "test naming", "committedDate": "2021-01-08T20:48:47Z", "type": "commit"}, {"oid": "3bffd8bb6e63eeb4d20f0f9fcbe862f81f53f850", "url": "https://github.com/firebase/firebase-android-sdk/commit/3bffd8bb6e63eeb4d20f0f9fcbe862f81f53f850", "message": "Return the proper value from successor", "committedDate": "2021-01-08T21:01:56Z", "type": "commit"}, {"oid": "0ad2be29139654436942dddf8d6696f227fe02fe", "url": "https://github.com/firebase/firebase-android-sdk/commit/0ad2be29139654436942dddf8d6696f227fe02fe", "message": "Check key order boundary conditions", "committedDate": "2021-01-08T22:24:06Z", "type": "commit"}, {"oid": "a0e628347196331c34cf25c3b27812b402590077", "url": "https://github.com/firebase/firebase-android-sdk/commit/a0e628347196331c34cf25c3b27812b402590077", "message": "Add api.txt", "committedDate": "2021-01-11T15:05:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4MTUzMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555981532", "bodyText": "Totally optional:\ns/WhenLimitIsHitFromFront/WhenDataEntersLimit\nHere and below if you do update.", "author": "schmidt-sebastian", "createdAt": "2021-01-12T18:21:47Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -658,6 +770,57 @@ public void onCancelled(DatabaseError error) {}\n     assertEquals(\"b\", removed.get(0));\n   }\n \n+  @Test\n+  public void setLimitEnsureChildRemovedAndChildAddedHitWhenLimitIsHitFromFrontWithStartAfter()", "originalCommit": "a0e628347196331c34cf25c3b27812b402590077", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "889aa883dce4b48fb00b31434dcd1918970d8e18", "chunk": "diff --git a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\nindex b597686c..94bef9df 100644\n--- a/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n+++ b/firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java\n\n@@ -771,7 +771,7 @@ public class QueryTest {\n   }\n \n   @Test\n-  public void setLimitEnsureChildRemovedAndChildAddedHitWhenLimitIsHitFromFrontWithStartAfter()\n+  public void setLimitEnsureChildRemovedAndChildAddedHitWhenDataEntersLimitWithStartAfter()\n       throws DatabaseException, TestFailure, ExecutionException, TimeoutException,\n           InterruptedException {\n     DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4Mzc1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555983756", "bodyText": "You don't need to convert num to long. In Java, long+int=long (and the int is treated as a long)", "author": "schmidt-sebastian", "createdAt": "2021-01-12T18:25:08Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,49 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String successor(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      if (Long.valueOf(num) + 1L > Integer.MAX_VALUE) {", "originalCommit": "a0e628347196331c34cf25c3b27812b402590077", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "889aa883dce4b48fb00b31434dcd1918970d8e18", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\nindex 3467b843..2f4af3a6 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n\n@@ -69,7 +69,7 @@ public class PushIdGenerator {\n     Validation.validateNullableKey(key);\n     Integer num = tryParseInt(key);\n     if (num != null) {\n-      if (Long.valueOf(num) + 1L > Integer.MAX_VALUE) {\n+      if (num + 1L > Integer.MAX_VALUE) {\n         // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n         return String.valueOf(MIN_PUSH_CHAR);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4NDI5NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555984294", "bodyText": "Optional nit: Remove empty line above.", "author": "schmidt-sebastian", "createdAt": "2021-01-12T18:26:00Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,49 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String successor(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      if (Long.valueOf(num) + 1L > Integer.MAX_VALUE) {\n+        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n+        return String.valueOf(MIN_PUSH_CHAR);\n+      }\n+      return String.valueOf(num + 1);\n+    }\n+    StringBuilder next = new StringBuilder(key);\n+\n+    if (next.length() < MAX_KEY_LEN) {\n+      // If this key doesn't have all possible character slots filled,\n+      // the lexicographical successor is the same string with the smallest\n+      // possible character appended to the end.\n+      next.append(MIN_PUSH_CHAR);\n+      return next.toString();\n+    }\n+\n+    int i = next.length() - 1;\n+\n+    while (i >= 0 && next.charAt(i) == MAX_PUSH_CHAR) {", "originalCommit": "a0e628347196331c34cf25c3b27812b402590077", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "889aa883dce4b48fb00b31434dcd1918970d8e18", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\nindex 3467b843..2f4af3a6 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java\n\n@@ -69,7 +69,7 @@ public class PushIdGenerator {\n     Validation.validateNullableKey(key);\n     Integer num = tryParseInt(key);\n     if (num != null) {\n-      if (Long.valueOf(num) + 1L > Integer.MAX_VALUE) {\n+      if (num + 1L > Integer.MAX_VALUE) {\n         // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n         return String.valueOf(MIN_PUSH_CHAR);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4NzkzMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555987933", "bodyText": "Let's talk about this offline. My gut feeling is that this should match all results, since they order past null.", "author": "schmidt-sebastian", "createdAt": "2021-01-12T18:32:06Z", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -504,6 +585,37 @@ public void setVariousLimitsWithStartAtNameWithServerData()\n     expectations.waitForEvents();\n   }\n \n+  @Test\n+  public void setVariousLimitsWithStartAfterNameWithServerData()\n+      throws DatabaseException, InterruptedException, TestFailure, ExecutionException,\n+          TimeoutException {\n+    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n+\n+    // TODO: this test kinda has race conditions. The listens are added sequentially, so we get a\n+    // lot of partial data back from the server. This all correct, and we end up in the correct\n+    // state, but it's still kinda weird. Consider having ValueExpectationHelper deal with initial\n+    // state.\n+\n+    new WriteFuture(ref, new MapBuilder().put(\"a\", 1).put(\"b\", 2).put(\"c\", 3).put(\"d\", 4).build())\n+        .timedGet();\n+\n+    ValueExpectationHelper expectations = new ValueExpectationHelper();\n+\n+    expectations.add(ref.startAfter(null).limitToFirst(1), null);", "originalCommit": "a0e628347196331c34cf25c3b27812b402590077", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEwNDQ5MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r556104490", "bodyText": "I added an explanation here: https://github.com/firebase/firebase-ios-sdk/pull/7209/files#r556060181.\nI know this reads funny, but I think it is the intended behavior because we are indexing on priority.", "author": "IanWyszynski", "createdAt": "2021-01-12T21:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4NzkzMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "889aa883dce4b48fb00b31434dcd1918970d8e18", "url": "https://github.com/firebase/firebase-android-sdk/commit/889aa883dce4b48fb00b31434dcd1918970d8e18", "message": "Add unit tests for successor", "committedDate": "2021-01-13T04:03:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyNjUwNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r556626504", "bodyText": "The expected state should come before the actual state. I think you need to flip the arguments everywhere.", "author": "schmidt-sebastian", "createdAt": "2021-01-13T15:50:54Z", "path": "firebase-database/src/test/java/com/google/firebase/database/PushIdGeneratorTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2021 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.database;\n+\n+import static com.google.firebase.database.snapshot.ChildKey.MAX_KEY_NAME;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.google.firebase.database.core.utilities.PushIdGenerator;\n+import org.codehaus.plexus.util.StringUtils;\n+import org.junit.Test;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@org.junit.runner.RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class PushIdGeneratorTest {\n+\n+  private static final char MIN_PUSH_CHAR = '-';\n+\n+  private static final char MAX_PUSH_CHAR = 'z';\n+\n+  private static final int MAX_KEY_LEN = 786;\n+\n+  @Test\n+  public void testSuccessorSpecialValue() {\n+    assertEquals(\n+        PushIdGenerator.successor(String.valueOf(Integer.MAX_VALUE)),\n+        Character.toString(MIN_PUSH_CHAR));", "originalCommit": "889aa883dce4b48fb00b31434dcd1918970d8e18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ba8ff4dbc5af20325bad951dea40793e4993352", "chunk": "diff --git a/firebase-database/src/test/java/com/google/firebase/database/PushIdGeneratorTest.java b/firebase-database/src/test/java/com/google/firebase/database/PushIdGeneratorTest.java\nindex 18c7231b..407edfd1 100644\n--- a/firebase-database/src/test/java/com/google/firebase/database/PushIdGeneratorTest.java\n+++ b/firebase-database/src/test/java/com/google/firebase/database/PushIdGeneratorTest.java\n\n@@ -36,24 +36,24 @@ public class PushIdGeneratorTest {\n   @Test\n   public void testSuccessorSpecialValue() {\n     assertEquals(\n-        PushIdGenerator.successor(String.valueOf(Integer.MAX_VALUE)),\n-        Character.toString(MIN_PUSH_CHAR));\n+        Character.toString(MIN_PUSH_CHAR),\n+        PushIdGenerator.successor(String.valueOf(Integer.MAX_VALUE)));\n     assertEquals(\n+        MAX_KEY_NAME,\n         PushIdGenerator.successor(\n-            StringUtils.repeat(Character.toString(MAX_PUSH_CHAR), MAX_KEY_LEN)),\n-        MAX_KEY_NAME);\n+            StringUtils.repeat(Character.toString(MAX_PUSH_CHAR), MAX_KEY_LEN)));\n   }\n \n   @Test\n   public void testSuccessorBasic() {\n-    assertEquals(PushIdGenerator.successor(\"abc\"), \"abc\" + MIN_PUSH_CHAR);\n+    assertEquals(\"abc\" + MIN_PUSH_CHAR, PushIdGenerator.successor(\"abc\"));\n     assertEquals(\n+        \"abd\",\n         PushIdGenerator.successor(\n             \"abc\"\n                 + StringUtils.repeat(\n-                    Character.toString(MAX_PUSH_CHAR), MAX_KEY_LEN - \"abc\".length())),\n-        \"abd\");\n+                    Character.toString(MAX_PUSH_CHAR), MAX_KEY_LEN - \"abc\".length())));\n     assertEquals(\n-        PushIdGenerator.successor(\"abc\" + MIN_PUSH_CHAR), \"abc\" + MIN_PUSH_CHAR + MIN_PUSH_CHAR);\n+        \"abc\" + MIN_PUSH_CHAR + MIN_PUSH_CHAR, PushIdGenerator.successor(\"abc\" + MIN_PUSH_CHAR));\n   }\n }\n"}}, {"oid": "5ba8ff4dbc5af20325bad951dea40793e4993352", "url": "https://github.com/firebase/firebase-android-sdk/commit/5ba8ff4dbc5af20325bad951dea40793e4993352", "message": "cleanup", "committedDate": "2021-01-13T23:20:39Z", "type": "commit"}, {"oid": "6c017d5ab5977244786608e2426930c188019ab9", "url": "https://github.com/firebase/firebase-android-sdk/commit/6c017d5ab5977244786608e2426930c188019ab9", "message": "Implement `endBefore` for RTDB queries (#2302)\n\n* Implement `endBefore` for RTDB queries\r\n\r\n* cleanup\r\n\r\n* Fix bug in prevBefore\r\n\r\n* Handle endBefore(..., Integer.MIN_VALUE)\r\n\r\n* respect key ordering\r\n\r\n* Add more tests, check key order boundary conditions\r\n\r\n* Generate api text file\r\n\r\n* Unit tests for predecessor\r\n\r\n* cleanup", "committedDate": "2021-01-14T00:14:49Z", "type": "commit"}]}