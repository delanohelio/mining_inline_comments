{"pr_number": 1098, "pr_title": "Add functionality to ABT SDK for adding and removing active experiments", "pr_createdAt": "2020-01-07T22:52:06Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1098", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3NTk4Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r364475983", "bodyText": "Maybe 'notes that an experiment is active in experiment metrics reporting'\nthe call should 'trigger' the experiment regardless of the triggering condition, right? (Anything hitting this wants to manually set the experiment as triggered/active'", "author": "MeghaB", "createdAt": "2020-01-08T22:31:13Z", "path": "firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java", "diffHunk": "@@ -140,6 +140,52 @@ public void removeAllExperiments() throws AbtException {\n     removeExperiments(getAllExperimentsInAnalytics());\n   }\n \n+  /**\n+   * Adds an experiment to be active in GA by setting a null triggering condition on the provided", "originalCommit": "5869fcf158156c21ed3d60d4be6a3ff32bb7bb0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MjQ1MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366072451", "bodyText": "slightly improved text to reflect this more clearly", "author": "JasonAHeron", "createdAt": "2020-01-13T22:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3NTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0642876ef0a22c8b58ad3af9e3fe1ce62d4ec056", "chunk": "diff --git a/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java b/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\nindex 49dee62a..73730776 100644\n--- a/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\n+++ b/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\n\n@@ -141,49 +141,25 @@ public class FirebaseABTesting {\n   }\n \n   /**\n-   * Adds an experiment to be active in GA by setting a null triggering condition on the provided\n-   * experiment. This results in the experiment being active as if it was triggered by the\n-   * triggering condition event being seen in GA.\n+   * Gets the origin service's list of experiments in the app.\n    *\n    * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n    *\n-   * @param activeExperiment The {@link AbtExperimentInfo} that should be set as active in GA.\n+   * @return the origin service's list of experiments in the app.\n    * @throws AbtException If there is no Analytics SDK.\n    */\n   @WorkerThread\n-  public void reportActiveExperiment(AbtExperimentInfo activeExperiment) throws AbtException {\n+  public List<AbtExperimentInfo> getAllExperiments() throws AbtException {\n     throwAbtExceptionIfAnalyticsIsNull();\n-    ArrayList<AbtExperimentInfo> activeExperimentList = new ArrayList<>();\n-\n-    // Remove trigger event if it exists, this sets the experiment to active.\n-    Map<String, String> activeExperimentMap = activeExperiment.toStringMap();\n-    activeExperimentMap.remove(AbtExperimentInfo.TRIGGER_EVENT_KEY);\n \n-    // Add experiment to GA\n-    activeExperimentList.add(AbtExperimentInfo.fromMap(activeExperimentMap));\n-    addExperiments(activeExperimentList);\n-  }\n+    List<ConditionalUserProperty> experimentsInAnalytics = getAllExperimentsInAnalytics();\n+    List<AbtExperimentInfo> experimentInfos = new ArrayList<>();\n \n-  /**\n-   * Cleans up all experiments which are active in GA but not currently running.\n-   *\n-   * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n-   *\n-   * @param runningExperiments the currently running {@link AbtExperimentInfo}s, any active\n-   *     experiment that is not in this list will be removed\n-   * @throws AbtException If there is no Analytics SDK.\n-   */\n-  @WorkerThread\n-  public void reportRunningExperiments(List<AbtExperimentInfo> runningExperiments)\n-      throws AbtException {\n-    throwAbtExceptionIfAnalyticsIsNull();\n-    Set<String> runningExperimentIds = new HashSet<>();\n-    for (AbtExperimentInfo runningExperiment : runningExperiments) {\n-      runningExperimentIds.add(runningExperiment.getExperimentId());\n+    for (ConditionalUserProperty experimentInAnalytics : experimentsInAnalytics) {\n+      experimentInfos.add(AbtExperimentInfo.fromConditionalUserProperty(experimentInAnalytics));\n     }\n-    List<ConditionalUserProperty> experimentsToRemove =\n-        getExperimentsToRemove(getAllExperimentsInAnalytics(), runningExperimentIds);\n-    removeExperiments(experimentsToRemove);\n+\n+    return experimentInfos;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3NjUwNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r364476507", "bodyText": "note here maybe that it overrides the full running list?\nthis comment would be confusing w.r.t 'reportActive'\nhere we should only 'clean up experiments which are noted in GA but not eligible for this device'? (running might be confused with 'active')", "author": "MeghaB", "createdAt": "2020-01-08T22:32:39Z", "path": "firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java", "diffHunk": "@@ -140,6 +140,52 @@ public void removeAllExperiments() throws AbtException {\n     removeExperiments(getAllExperimentsInAnalytics());\n   }\n \n+  /**\n+   * Adds an experiment to be active in GA by setting a null triggering condition on the provided\n+   * experiment. This results in the experiment being active as if it was triggered by the\n+   * triggering condition event being seen in GA.\n+   *\n+   * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n+   *\n+   * @param activeExperiment The {@link AbtExperimentInfo} that should be set as active in GA.\n+   * @throws AbtException If there is no Analytics SDK.\n+   */\n+  @WorkerThread\n+  public void reportActiveExperiment(AbtExperimentInfo activeExperiment) throws AbtException {\n+    throwAbtExceptionIfAnalyticsIsNull();\n+    ArrayList<AbtExperimentInfo> activeExperimentList = new ArrayList<>();\n+\n+    // Remove trigger event if it exists, this sets the experiment to active.\n+    Map<String, String> activeExperimentMap = activeExperiment.toStringMap();\n+    activeExperimentMap.remove(AbtExperimentInfo.TRIGGER_EVENT_KEY);\n+\n+    // Add experiment to GA\n+    activeExperimentList.add(AbtExperimentInfo.fromMap(activeExperimentMap));\n+    addExperiments(activeExperimentList);\n+  }\n+\n+  /**\n+   * Cleans up all experiments which are active in GA but not currently running.\n+   *\n+   * <p>Note: This is a blocking call and therefore should be called from a worker thread.", "originalCommit": "5869fcf158156c21ed3d60d4be6a3ff32bb7bb0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MzUxNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366073515", "bodyText": "updated", "author": "JasonAHeron", "createdAt": "2020-01-13T22:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3NjUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "0642876ef0a22c8b58ad3af9e3fe1ce62d4ec056", "chunk": "diff --git a/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java b/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\nindex 49dee62a..73730776 100644\n--- a/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\n+++ b/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\n\n@@ -141,49 +141,25 @@ public class FirebaseABTesting {\n   }\n \n   /**\n-   * Adds an experiment to be active in GA by setting a null triggering condition on the provided\n-   * experiment. This results in the experiment being active as if it was triggered by the\n-   * triggering condition event being seen in GA.\n+   * Gets the origin service's list of experiments in the app.\n    *\n    * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n    *\n-   * @param activeExperiment The {@link AbtExperimentInfo} that should be set as active in GA.\n+   * @return the origin service's list of experiments in the app.\n    * @throws AbtException If there is no Analytics SDK.\n    */\n   @WorkerThread\n-  public void reportActiveExperiment(AbtExperimentInfo activeExperiment) throws AbtException {\n+  public List<AbtExperimentInfo> getAllExperiments() throws AbtException {\n     throwAbtExceptionIfAnalyticsIsNull();\n-    ArrayList<AbtExperimentInfo> activeExperimentList = new ArrayList<>();\n-\n-    // Remove trigger event if it exists, this sets the experiment to active.\n-    Map<String, String> activeExperimentMap = activeExperiment.toStringMap();\n-    activeExperimentMap.remove(AbtExperimentInfo.TRIGGER_EVENT_KEY);\n \n-    // Add experiment to GA\n-    activeExperimentList.add(AbtExperimentInfo.fromMap(activeExperimentMap));\n-    addExperiments(activeExperimentList);\n-  }\n+    List<ConditionalUserProperty> experimentsInAnalytics = getAllExperimentsInAnalytics();\n+    List<AbtExperimentInfo> experimentInfos = new ArrayList<>();\n \n-  /**\n-   * Cleans up all experiments which are active in GA but not currently running.\n-   *\n-   * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n-   *\n-   * @param runningExperiments the currently running {@link AbtExperimentInfo}s, any active\n-   *     experiment that is not in this list will be removed\n-   * @throws AbtException If there is no Analytics SDK.\n-   */\n-  @WorkerThread\n-  public void reportRunningExperiments(List<AbtExperimentInfo> runningExperiments)\n-      throws AbtException {\n-    throwAbtExceptionIfAnalyticsIsNull();\n-    Set<String> runningExperimentIds = new HashSet<>();\n-    for (AbtExperimentInfo runningExperiment : runningExperiments) {\n-      runningExperimentIds.add(runningExperiment.getExperimentId());\n+    for (ConditionalUserProperty experimentInAnalytics : experimentsInAnalytics) {\n+      experimentInfos.add(AbtExperimentInfo.fromConditionalUserProperty(experimentInAnalytics));\n     }\n-    List<ConditionalUserProperty> experimentsToRemove =\n-        getExperimentsToRemove(getAllExperimentsInAnalytics(), runningExperimentIds);\n-    removeExperiments(experimentsToRemove);\n+\n+    return experimentInfos;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3NzIxMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r364477210", "bodyText": "is there another test that's not just 'without analytics' we can update?", "author": "MeghaB", "createdAt": "2020-01-08T22:34:34Z", "path": "firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTWithoutAnalyticsTest.java", "diffHunk": "@@ -96,6 +96,49 @@ public void replaceAllExperimentsWithoutAnalytics_sendsValidExperimentList_throw\n     assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n   }\n \n+  @Test\n+  public void reportRunningExperimentsWithoutAnalytics_throwsAbtException() {\n+    List<AbtExperimentInfo> experimentInfos = new ArrayList<>();", "originalCommit": "5869fcf158156c21ed3d60d4be6a3ff32bb7bb0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4NjIzNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r364486237", "bodyText": "sadly no, these are the only tests", "author": "JasonAHeron", "createdAt": "2020-01-08T23:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ3NzIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "0642876ef0a22c8b58ad3af9e3fe1ce62d4ec056", "chunk": "diff --git a/firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTWithoutAnalyticsTest.java b/firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTWithoutAnalyticsTest.java\ndeleted file mode 100644\nindex 6972d079..00000000\n--- a/firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTWithoutAnalyticsTest.java\n+++ /dev/null\n\n@@ -1,167 +0,0 @@\n-// Copyright 2018 Google LLC\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package com.google.firebase.abt;\n-\n-import static com.google.common.truth.Truth.assertThat;\n-import static org.junit.Assert.assertThrows;\n-\n-import android.content.Context;\n-import com.google.common.base.Preconditions;\n-import com.google.firebase.FirebaseApp;\n-import com.google.firebase.FirebaseOptions;\n-import com.google.firebase.abt.FirebaseABTesting.OriginService;\n-import com.google.firebase.abt.component.AbtComponent;\n-import com.google.firebase.analytics.connector.AnalyticsConnector;\n-import java.sql.Date;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.MockitoAnnotations;\n-import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.RuntimeEnvironment;\n-import org.robolectric.annotation.Config;\n-\n-/**\n- * Unit tests for {@link FirebaseABTesting} without the Analytics SDK {@link AnalyticsConnector}.\n- *\n- * @author Miraziz Yusupov\n- */\n-@RunWith(RobolectricTestRunner.class)\n-@Config(manifest = Config.NONE)\n-public class FirebaseABTWithoutAnalyticsTest {\n-\n-  private static final String APP_ID = \"1:14368190084:android:09cb977358c6f241\";\n-  private static final String API_KEY = \"api_key\";\n-\n-  private static final String VARIANT_ID_VALUE = \"var1\";\n-  private static final String TRIGGER_EVENT_NAME_VALUE = \"trigger_event_value\";\n-  private static final long TRIGGER_TIMEOUT_IN_MILLIS_VALUE = 1000L;\n-  private static final long TIME_TO_LIVE_IN_MILLIS_VALUE = 2000L;\n-\n-  private FirebaseABTesting firebaseAbt;\n-\n-  @Before\n-  public void setUp() {\n-    MockitoAnnotations.initMocks(this);\n-\n-    initializeFirebaseApp(RuntimeEnvironment.application);\n-\n-    Preconditions.checkArgument(FirebaseApp.getInstance().get(AnalyticsConnector.class) == null);\n-\n-    firebaseAbt =\n-        FirebaseApp.getInstance().get(AbtComponent.class).get(OriginService.REMOTE_CONFIG);\n-  }\n-\n-  @Test\n-  public void replaceAllExperimentsWithoutAnalytics_experimentsListIsNull_throwsAbtException() {\n-    AbtException actualException =\n-        assertThrows(\n-            AbtException.class,\n-            () -> firebaseAbt.replaceAllExperiments(/*replacementExperiments=*/ null));\n-    assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n-  }\n-\n-  @Test\n-  public void replaceAllExperimentsWithoutAnalytics_sendsValidExperimentList_throwsAbtException() {\n-\n-    List<AbtExperimentInfo> experimentInfos = new ArrayList<>();\n-    experimentInfos.add(\n-        createExperimentInfo(\"expid1\", /*experimentStartTimeInEpochMillis=*/ 1000L));\n-    experimentInfos.add(\n-        createExperimentInfo(\"expid2\", /*experimentStartTimeInEpochMillis=*/ 2000L));\n-\n-    List<Map<String, String>> experimentInfoMaps = new ArrayList<>();\n-    for (AbtExperimentInfo experimentInfo : experimentInfos) {\n-      experimentInfoMaps.add(experimentInfo.toStringMap());\n-    }\n-\n-    AbtException actualException =\n-        assertThrows(\n-            AbtException.class, () -> firebaseAbt.replaceAllExperiments(experimentInfoMaps));\n-    assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n-  }\n-\n-  @Test\n-  public void reportRunningExperimentsWithoutAnalytics_throwsAbtException() {\n-    List<AbtExperimentInfo> experimentInfos = new ArrayList<>();\n-    experimentInfos.add(\n-        createExperimentInfo(\"expid1\", /*experimentStartTimeInEpochMillis=*/ 1000L));\n-    experimentInfos.add(\n-        createExperimentInfo(\"expid2\", /*experimentStartTimeInEpochMillis=*/ 2000L));\n-\n-    AbtException actualException =\n-        assertThrows(\n-            AbtException.class, () -> firebaseAbt.reportRunningExperiments(experimentInfos));\n-    assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n-  }\n-\n-  @Test\n-  public void reportRunningExperimentsWithoutAnalytics_experimentsListIsNull_throwsAbtException() {\n-    AbtException actualException =\n-        assertThrows(\n-            AbtException.class,\n-            () -> firebaseAbt.reportRunningExperiments(/*replacementExperiments=*/ null));\n-    assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n-  }\n-\n-  @Test\n-  public void reportActiveExperimentWithoutAnalytics_throwsAbtException() {\n-    AbtException actualException =\n-        assertThrows(\n-            AbtException.class,\n-            () ->\n-                firebaseAbt.reportActiveExperiment(\n-                    createExperimentInfo(\"expid1\", /*experimentStartTimeInEpochMillis=*/ 1000L)));\n-    assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n-  }\n-\n-  @Test\n-  public void reportActiveExperimentWithoutAnalytics_experimentsListIsNull_throwsAbtException() {\n-    AbtException actualException =\n-        assertThrows(\n-            AbtException.class,\n-            () -> firebaseAbt.reportActiveExperiment(/*replacementExperiments=*/ null));\n-    assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n-  }\n-\n-  @Test\n-  public void removeAllExperimentsWithoutAnalytics_throwsAbtException() {\n-    AbtException actualException =\n-        assertThrows(AbtException.class, () -> firebaseAbt.removeAllExperiments());\n-    assertThat(actualException).hasMessageThat().contains(\"Analytics\");\n-  }\n-\n-  private static AbtExperimentInfo createExperimentInfo(\n-      String experimentId, long experimentStartTimeInEpochMillis) {\n-\n-    return new AbtExperimentInfo(\n-        experimentId,\n-        VARIANT_ID_VALUE,\n-        TRIGGER_EVENT_NAME_VALUE,\n-        new Date(experimentStartTimeInEpochMillis),\n-        TRIGGER_TIMEOUT_IN_MILLIS_VALUE,\n-        TIME_TO_LIVE_IN_MILLIS_VALUE);\n-  }\n-\n-  private static void initializeFirebaseApp(Context context) {\n-    FirebaseApp.clearInstancesForTest();\n-\n-    FirebaseApp.initializeApp(\n-        context, new FirebaseOptions.Builder().setApiKey(API_KEY).setApplicationId(APP_ID).build());\n-  }\n-}\n"}}, {"oid": "0642876ef0a22c8b58ad3af9e3fe1ce62d4ec056", "url": "https://github.com/firebase/firebase-android-sdk/commit/0642876ef0a22c8b58ad3af9e3fe1ce62d4ec056", "message": "Facilitate FIAM + ABT", "committedDate": "2020-01-13T19:28:28Z", "type": "commit"}, {"oid": "00f9bfb05b74395fedca39b05b67ea2b72c70b99", "url": "https://github.com/firebase/firebase-android-sdk/commit/00f9bfb05b74395fedca39b05b67ea2b72c70b99", "message": "rebase correctly", "committedDate": "2020-01-13T19:32:51Z", "type": "commit"}, {"oid": "00f9bfb05b74395fedca39b05b67ea2b72c70b99", "url": "https://github.com/firebase/firebase-android-sdk/commit/00f9bfb05b74395fedca39b05b67ea2b72c70b99", "message": "rebase correctly", "committedDate": "2020-01-13T19:32:51Z", "type": "forcePushed"}, {"oid": "0ec4611150b680b648ddca85b15b4c0c3fe101bf", "url": "https://github.com/firebase/firebase-android-sdk/commit/0ec4611150b680b648ddca85b15b4c0c3fe101bf", "message": "format", "committedDate": "2020-01-13T19:35:39Z", "type": "commit"}, {"oid": "7a337ad73cad474ba09a3e8f285462d1f0a43cc7", "url": "https://github.com/firebase/firebase-android-sdk/commit/7a337ad73cad474ba09a3e8f285462d1f0a43cc7", "message": "starting to add tests", "committedDate": "2020-01-13T20:19:49Z", "type": "commit"}, {"oid": "870ea00d9a1f42f7402aeb29fde4b9b408bcf05e", "url": "https://github.com/firebase/firebase-android-sdk/commit/870ea00d9a1f42f7402aeb29fde4b9b408bcf05e", "message": "derp", "committedDate": "2020-01-13T20:21:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzNjg1NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366036855", "bodyText": "We should check with GA about this new origin code to make sure events will be processed as expected", "author": "welkinlan", "createdAt": "2020-01-13T21:26:35Z", "path": "firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java", "diffHunk": "@@ -65,12 +67,14 @@\n    * Select keys of fields in the experiment descriptions returned from the Firebase Remote Config\n    * server.\n    */\n-  @StringDef({REMOTE_CONFIG})\n+  @StringDef({REMOTE_CONFIG, INAPP_MESSAGING})\n   @Retention(RetentionPolicy.SOURCE)\n   public @interface OriginService {\n \n     /** Must match the origin code in Google Analytics for Firebase. */\n     String REMOTE_CONFIG = \"frc\";\n+\n+    String INAPP_MESSAGING = \"fiam\";", "originalCommit": "870ea00d9a1f42f7402aeb29fde4b9b408bcf05e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDM1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366070356", "bodyText": "yep!", "author": "JasonAHeron", "createdAt": "2020-01-13T22:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzNjg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MzY5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366083699", "bodyText": "turns out \"fiam\" is correct as per Megha", "author": "JasonAHeron", "createdAt": "2020-01-13T23:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzNjg1NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "34916bd72f725d720e7f1c212d28192263b8fe04", "url": "https://github.com/firebase/firebase-android-sdk/commit/34916bd72f725d720e7f1c212d28192263b8fe04", "message": "add moar tests", "committedDate": "2020-01-13T22:45:44Z", "type": "commit"}, {"oid": "fd8acb7d89c23ed4bf2dfd1f9772ed68f69aadbf", "url": "https://github.com/firebase/firebase-android-sdk/commit/fd8acb7d89c23ed4bf2dfd1f9772ed68f69aadbf", "message": "updating javadoc", "committedDate": "2020-01-13T22:56:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NTkwOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366075908", "bodyText": "consider replacing \"report\" with a different word like \"check/validate\"? Since this function is used to remove obsolete experiments from GA", "author": "welkinlan", "createdAt": "2020-01-13T23:04:13Z", "path": "firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java", "diffHunk": "@@ -162,6 +166,70 @@ public void removeAllExperiments() throws AbtException {\n     return experimentInfos;\n   }\n \n+  /**\n+   * Sets an experiment to be active in GA metrics reporting by setting a null triggering condition\n+   * on the provided experiment. This results in the experiment being active as if it was triggered\n+   * by the triggering condition event being seen in GA.\n+   *\n+   * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n+   *\n+   * @param activeExperiment The {@link AbtExperimentInfo} that should be set as active in GA.\n+   * @throws AbtException If there is no Analytics SDK.\n+   */\n+  @WorkerThread\n+  public void reportActiveExperiment(AbtExperimentInfo activeExperiment) throws AbtException {\n+    throwAbtExceptionIfAnalyticsIsNull();\n+    ArrayList<AbtExperimentInfo> activeExperimentList = new ArrayList<>();\n+\n+    // Remove trigger event if it exists, this sets the experiment to active.\n+    Map<String, String> activeExperimentMap = activeExperiment.toStringMap();\n+    activeExperimentMap.remove(AbtExperimentInfo.TRIGGER_EVENT_KEY);\n+\n+    // Add experiment to GA\n+    activeExperimentList.add(AbtExperimentInfo.fromMap(activeExperimentMap));\n+    addExperiments(activeExperimentList);\n+  }\n+\n+  /**\n+   * Adds an experiment to be active in GA by setting a null triggering condition on the provided\n+   * experiment. This results in the experiment being active as if it was triggered by the\n+   * triggering condition event being seen in GA.\n+   *\n+   * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n+   *\n+   * @param activeExperiment The {@link FirebaseAbt.ExperimentPayload} that should be set as active\n+   *     in GA.\n+   * @throws AbtException If there is no Analytics SDK.\n+   */\n+  @WorkerThread\n+  public void reportActiveExperiment(FirebaseAbt.ExperimentPayload experimentPayload)\n+      throws AbtException {\n+    reportActiveExperiment(AbtExperimentInfo.fromExperimentPayload(experimentPayload));\n+  }\n+\n+  /**\n+   * Cleans up all experiments which are active in GA but not currently running. This method is\n+   * meant to be used to ensure all running experiments should indeed be running.\n+   *\n+   * <p>Note: This is a blocking call and therefore should be called from a worker thread.\n+   *\n+   * @param runningExperiments the currently running {@link AbtExperimentInfo}s, any active\n+   *     experiment that is not in this list will be removed from GA reporting.\n+   * @throws AbtException If there is no Analytics SDK.\n+   */\n+  @WorkerThread\n+  public void reportRunningExperiments(List<AbtExperimentInfo> runningExperiments)", "originalCommit": "fd8acb7d89c23ed4bf2dfd1f9772ed68f69aadbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MTM0OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366081349", "bodyText": "yeah validate seems good actually, I'll switch to that", "author": "JasonAHeron", "createdAt": "2020-01-13T23:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NTkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "9ad41f431a8719bd5858309889396c90dbea69fe", "chunk": "diff --git a/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java b/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\nindex c0f54726..cf8d372a 100644\n--- a/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\n+++ b/firebase-abt/src/main/java/com/google/firebase/abt/FirebaseABTesting.java\n\n@@ -218,7 +218,7 @@ public class FirebaseABTesting {\n    * @throws AbtException If there is no Analytics SDK.\n    */\n   @WorkerThread\n-  public void reportRunningExperiments(List<AbtExperimentInfo> runningExperiments)\n+  public void validateRunningExperiments(List<AbtExperimentInfo> runningExperiments)\n       throws AbtException {\n     throwAbtExceptionIfAnalyticsIsNull();\n     Set<String> runningExperimentIds = new HashSet<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NjQzNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366076435", "bodyText": "noInactiveExperimentsInAnalytics", "author": "welkinlan", "createdAt": "2020-01-13T23:05:40Z", "path": "firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTestingTest.java", "diffHunk": "@@ -288,6 +289,61 @@ public void getAllExperiments_analyticsSdkUnavailable_throwsAbtException() {\n     assertThat(actualException).hasMessageThat().contains(\"he Analytics SDK is not available\");\n   }\n \n+  @Test\n+  public void reportRunningExperiments_inactiveExperimentsInAnalytics_cleansUpInactiveExperiments()\n+      throws Exception {\n+    // Two experiments running\n+    when(mockAnalyticsConnector.getConditionalUserProperties(ORIGIN_SERVICE, \"\"))\n+        .thenReturn(\n+            Lists.newArrayList(\n+                TEST_ABT_EXPERIMENT_1.toConditionalUserProperty(ORIGIN_SERVICE),\n+                TEST_ABT_EXPERIMENT_2.toConditionalUserProperty(ORIGIN_SERVICE)));\n+\n+    // Update to just one experiment running\n+    firebaseAbt.reportRunningExperiments(Lists.newArrayList(TEST_ABT_EXPERIMENT_1));\n+\n+    // Verify the not running experiment is cleared\n+    verify(mockAnalyticsConnector).clearConditionalUserProperty(TEST_EXPERIMENT_2_ID, null, null);\n+  }\n+\n+  @Test\n+  public void reportRunningExperiments_activeExperimentsInAnalytics_cleansUpNothing()", "originalCommit": "fd8acb7d89c23ed4bf2dfd1f9772ed68f69aadbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MjAwMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1098#discussion_r366082001", "bodyText": "done", "author": "JasonAHeron", "createdAt": "2020-01-13T23:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NjQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ad41f431a8719bd5858309889396c90dbea69fe", "chunk": "diff --git a/firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTestingTest.java b/firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTestingTest.java\nindex 5eb5ab01..893048b3 100644\n--- a/firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTestingTest.java\n+++ b/firebase-abt/src/test/java/com/google/firebase/abt/FirebaseABTestingTest.java\n\n@@ -300,14 +300,14 @@ public class FirebaseABTestingTest {\n                 TEST_ABT_EXPERIMENT_2.toConditionalUserProperty(ORIGIN_SERVICE)));\n \n     // Update to just one experiment running\n-    firebaseAbt.reportRunningExperiments(Lists.newArrayList(TEST_ABT_EXPERIMENT_1));\n+    firebaseAbt.validateRunningExperiments(Lists.newArrayList(TEST_ABT_EXPERIMENT_1));\n \n     // Verify the not running experiment is cleared\n     verify(mockAnalyticsConnector).clearConditionalUserProperty(TEST_EXPERIMENT_2_ID, null, null);\n   }\n \n   @Test\n-  public void reportRunningExperiments_activeExperimentsInAnalytics_cleansUpNothing()\n+  public void reportRunningExperiments_noinactiveExperimentsInAnalytics_cleansUpNothing()\n       throws Exception {\n     // Two experiments running\n     when(mockAnalyticsConnector.getConditionalUserProperties(ORIGIN_SERVICE, \"\"))\n"}}, {"oid": "9ad41f431a8719bd5858309889396c90dbea69fe", "url": "https://github.com/firebase/firebase-android-sdk/commit/9ad41f431a8719bd5858309889396c90dbea69fe", "message": "updates per review", "committedDate": "2020-01-13T23:23:16Z", "type": "commit"}]}