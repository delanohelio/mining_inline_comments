{"pr_number": 2262, "pr_title": "Replace usage of transform with updateTransforms", "pr_createdAt": "2020-12-16T00:22:31Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/2262", "timeline": [{"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed", "url": "https://github.com/firebase/firebase-android-sdk/commit/283773ff7fd34031619b3acafd88bae90f33c5ed", "message": "add update_transforms", "committedDate": "2020-12-16T00:24:12Z", "type": "commit"}, {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed", "url": "https://github.com/firebase/firebase-android-sdk/commit/283773ff7fd34031619b3acafd88bae90f33c5ed", "message": "add update_transforms", "committedDate": "2020-12-16T00:24:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0NzE1MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544447150", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n          \n          \n            \n                            && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n          \n          \n            \n                            && !batch.getWrites(i - 1).hasTransform()\n          \n          \n            \n                            && batch.getWrites(i - 1).hasUpdate(),\n          \n      \n    \n    \n  \n\nProto3 does have \"has\" functions for nested messages.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:36:49Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java", "diffHunk": "@@ -171,6 +174,35 @@ MutationBatch decodeMutationBatch(com.google.firebase.firestore.proto.WriteBatch\n     for (int i = 0; i < baseMutationsCount; i++) {\n       baseMutations.add(rpcSerializer.decodeMutation(batch.getBaseWrites(i)));\n     }\n+\n+    // Squash old transform mutations into existing patch or set mutations. The replacement of\n+    // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n+    // mutations stored in IndexedDB need to be updated to `update_transforms`.\n+    // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n+      Write mutation = batch.getWrites(i);\n+      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+        hardAssert(\n+            i >= 1\n+                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n+                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4OTU5Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544489592", "bodyText": "Done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0NzE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\nindex fed27fee..588a75cc 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\n\n@@ -179,30 +180,28 @@ public final class LocalSerializer {\n     // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n     // mutations stored in IndexedDB need to be updated to `update_transforms`.\n     // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    WriteBatch.Builder squashedBatchBuilder = WriteBatch.newBuilder();\n     for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n       Write mutation = batch.getWrites(i);\n-      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+      if (mutation.hasTransform()) {\n         hardAssert(\n-            i >= 1\n-                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n-                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n+            i >= 1 && !batch.getWrites(i - 1).hasTransform() && batch.getWrites(i - 1).hasUpdate(),\n             \"TransformMutation should be preceded by a patch or set mutation\");\n         Write mutationToJoin = batch.getWrites(i - 1);\n         Builder newMutationBuilder = Write.newBuilder(mutationToJoin);\n         for (FieldTransform fieldTransform : mutation.getTransform().getFieldTransformsList()) {\n           newMutationBuilder.addUpdateTransforms(fieldTransform);\n         }\n+        squashedBatchBuilder.addWrites(0, newMutationBuilder.build());\n \n-        batch =\n-            com.google.firebase.firestore.proto.WriteBatch.newBuilder(batch)\n-                .removeWrites(i)\n-                .removeWrites(i - 1)\n-                .addWrites(i - 1, newMutationBuilder.build())\n-                .build();\n         --i;\n+      } else {\n+        squashedBatchBuilder.addWrites(0, mutation);\n       }\n     }\n \n+    batch = squashedBatchBuilder.build();\n+\n     int mutationsCount = batch.getWritesCount();\n     List<Mutation> mutations = new ArrayList<>(mutationsCount);\n     for (int i = 0; i < mutationsCount; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0ODYxMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544448610", "bodyText": "Can you change this so it only runs once per batch?", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:38:42Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java", "diffHunk": "@@ -171,6 +174,35 @@ MutationBatch decodeMutationBatch(com.google.firebase.firestore.proto.WriteBatch\n     for (int i = 0; i < baseMutationsCount; i++) {\n       baseMutations.add(rpcSerializer.decodeMutation(batch.getBaseWrites(i)));\n     }\n+\n+    // Squash old transform mutations into existing patch or set mutations. The replacement of\n+    // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n+    // mutations stored in IndexedDB need to be updated to `update_transforms`.\n+    // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n+      Write mutation = batch.getWrites(i);\n+      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+        hardAssert(\n+            i >= 1\n+                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n+                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n+            \"TransformMutation should be preceded by a patch or set mutation\");\n+        Write mutationToJoin = batch.getWrites(i - 1);\n+        Builder newMutationBuilder = Write.newBuilder(mutationToJoin);\n+        for (FieldTransform fieldTransform : mutation.getTransform().getFieldTransformsList()) {\n+          newMutationBuilder.addUpdateTransforms(fieldTransform);\n+        }\n+\n+        batch =\n+            com.google.firebase.firestore.proto.WriteBatch.newBuilder(batch)\n+                .removeWrites(i)\n+                .removeWrites(i - 1)\n+                .addWrites(i - 1, newMutationBuilder.build())\n+                .build();", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\nindex fed27fee..588a75cc 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\n\n@@ -179,30 +180,28 @@ public final class LocalSerializer {\n     // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n     // mutations stored in IndexedDB need to be updated to `update_transforms`.\n     // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    WriteBatch.Builder squashedBatchBuilder = WriteBatch.newBuilder();\n     for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n       Write mutation = batch.getWrites(i);\n-      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+      if (mutation.hasTransform()) {\n         hardAssert(\n-            i >= 1\n-                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n-                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n+            i >= 1 && !batch.getWrites(i - 1).hasTransform() && batch.getWrites(i - 1).hasUpdate(),\n             \"TransformMutation should be preceded by a patch or set mutation\");\n         Write mutationToJoin = batch.getWrites(i - 1);\n         Builder newMutationBuilder = Write.newBuilder(mutationToJoin);\n         for (FieldTransform fieldTransform : mutation.getTransform().getFieldTransformsList()) {\n           newMutationBuilder.addUpdateTransforms(fieldTransform);\n         }\n+        squashedBatchBuilder.addWrites(0, newMutationBuilder.build());\n \n-        batch =\n-            com.google.firebase.firestore.proto.WriteBatch.newBuilder(batch)\n-                .removeWrites(i)\n-                .removeWrites(i - 1)\n-                .addWrites(i - 1, newMutationBuilder.build())\n-                .build();\n         --i;\n+      } else {\n+        squashedBatchBuilder.addWrites(0, mutation);\n       }\n     }\n \n+    batch = squashedBatchBuilder.build();\n+\n     int mutationsCount = batch.getWritesCount();\n     List<Mutation> mutations = new ArrayList<>(mutationsCount);\n     for (int i = 0; i < mutationsCount; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MDM0OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544450349", "bodyText": "Nit: \"transforms field\" might be a bit misleading. Maybe rephrase as \"rather than sending an additional transforms message\"", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:40:59Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -43,36 +47,37 @@\n  * <tr><td>PatchMutation</td><td>Document(v3)</td><td>Document(v3)</td></tr>\n  * <tr><td>PatchMutation</td><td>NoDocument(v3)</td><td>NoDocument(v3)</td></tr>\n  * <tr><td>PatchMutation</td><td>null</td><td>null</td></tr>\n- * <tr><td>TransformMutation</td><td>Document(v3)</td><td>Document(v3)</td></tr>\n- * <tr><td>TransformMutation</td><td>NoDocument(v3)</td><td>NoDocument(v3)</td></tr>\n- * <tr><td>TransformMutation</td><td>null</td><td>null</td></tr>\n  * <tr><td>DeleteMutation</td><td>Document(v3)</td><td>NoDocument(v0)</td></tr>\n  * <tr><td>DeleteMutation</td><td>NoDocument(v3)</td><td>NoDocument(v0)</td></tr>\n  * <tr><td>DeleteMutation</td><td>null</td><td>NoDocument(v0)</td></tr>\n  * </table>\n  *\n  * For acknowledged mutations, we use the updateTime of the WriteResponse as the resulting version\n- * for Set, Patch, and Transform mutations. As deletes have no explicit update time, we use the\n- * commitTime of the WriteResponse for acknowledged deletes.\n+ * for Set and Patch mutations. As deletes have no explicit update time, we use the commitTime of\n+ * the WriteResponse for acknowledged deletes.\n  *\n  * <p>If a mutation is acknowledged by the backend but fails the precondition check locally, we\n  * return an `UnknownDocument` and rely on Watch to send us the updated version.\n  *\n- * <p>Note that TransformMutations don't create Documents (in the case of being applied to a\n- * NoDocument), even though they would on the backend. This is because the client always combines\n- * the TransformMutation with a SetMutation or PatchMutation and we only want to apply the transform\n- * if the prior mutation resulted in a Document (always true for a SetMutation, but not necessarily\n- * for an PatchMutation).\n+ * <p>Field transforms are used only with Patch and Set Mutations. We use the `updateTransforms`\n+ * field to store transforms, rather than the `transforms` field.", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MDYzMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544490633", "bodyText": "done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MDM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\nindex 00d30900..4666ae66 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n\n@@ -60,7 +60,7 @@ import java.util.List;\n  * return an `UnknownDocument` and rely on Watch to send us the updated version.\n  *\n  * <p>Field transforms are used only with Patch and Set Mutations. We use the `updateTransforms`\n- * field to store transforms, rather than the `transforms` field.\n+ * field to store transforms, rather than the `transforms` message.\n  */\n public abstract class Mutation {\n   private final DocumentKey key;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MTA1Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544451052", "bodyText": "It looks like we can just inline this call. The Web SDK is slightly different to support tree-shaking.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:41:56Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -129,7 +138,9 @@ public abstract MaybeDocument applyToLocalView(\n    * @return a base value to store along with the mutation, or null for idempotent mutations.\n    */\n   @Nullable\n-  public abstract ObjectValue extractBaseValue(@Nullable MaybeDocument maybeDoc);\n+  public ObjectValue extractBaseValue(@Nullable MaybeDocument maybeDoc) {\n+    return extractTransformBaseValue(maybeDoc);", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MjA0Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544492047", "bodyText": "done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MTA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\nindex 00d30900..4666ae66 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n\n@@ -123,25 +123,6 @@ public abstract class Mutation {\n   public abstract MaybeDocument applyToLocalView(\n       @Nullable MaybeDocument maybeDoc, @Nullable MaybeDocument baseDoc, Timestamp localWriteTime);\n \n-  /**\n-   * If applicable, returns the base value to persist with this mutation. If a base value is\n-   * provided, the mutation is always applied to this base value, even if document has already been\n-   * updated.\n-   *\n-   * <p>The base value is a sparse object that consists of only the document fields for which this\n-   * mutation contains a non-idempotent transformation (e.g. a numeric increment). The provided\n-   * value guarantees consistent behavior for non-idempotent transforms and allow us to return the\n-   * same latency-compensated value even if the backend has already applied the mutation. The base\n-   * value is null for idempotent mutations, as they can be re-played even if the backend has\n-   * already applied them.\n-   *\n-   * @return a base value to store along with the mutation, or null for idempotent mutations.\n-   */\n-  @Nullable\n-  public ObjectValue extractBaseValue(@Nullable MaybeDocument maybeDoc) {\n-    return extractTransformBaseValue(maybeDoc);\n-  }\n-\n   /** Helper for derived classes to implement .equals(). */\n   boolean hasSameKeyAndPrecondition(Mutation other) {\n     return key.equals(other.key) && precondition.equals(other.precondition);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MjYxNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544452616", "bodyText": "This can be protected.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:43:53Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -166,4 +177,96 @@ static SnapshotVersion getPostMutationVersion(@Nullable MaybeDocument maybeDoc)\n       return SnapshotVersion.NONE;\n     }\n   }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use after a mutation containing transforms has been\n+   * acknowledged by the server.\n+   *\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @param serverTransformResults The transform results received by the server.\n+   * @return The transform results list.\n+   */\n+  List<Value> serverTransformResults(", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MjE1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544492156", "bodyText": "done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MjYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\nindex 00d30900..4666ae66 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n\n@@ -187,7 +168,7 @@ public abstract class Mutation {\n    * @param serverTransformResults The transform results received by the server.\n    * @return The transform results list.\n    */\n-  List<Value> serverTransformResults(\n+  protected List<Value> serverTransformResults(\n       @Nullable MaybeDocument baseDoc, List<Value> serverTransformResults) {\n     ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n     hardAssert(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MzM5NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544453395", "bodyText": "This can also be protected.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:44:49Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -166,4 +177,96 @@ static SnapshotVersion getPostMutationVersion(@Nullable MaybeDocument maybeDoc)\n       return SnapshotVersion.NONE;\n     }\n   }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use after a mutation containing transforms has been\n+   * acknowledged by the server.\n+   *\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @param serverTransformResults The transform results received by the server.\n+   * @return The transform results list.\n+   */\n+  List<Value> serverTransformResults(\n+      @Nullable MaybeDocument baseDoc, List<Value> serverTransformResults) {\n+    ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n+    hardAssert(\n+        fieldTransforms.size() == serverTransformResults.size(),\n+        \"server transform count (%d) should match field transform count (%d)\",\n+        serverTransformResults.size(),\n+        fieldTransforms.size());\n+\n+    for (int i = 0; i < serverTransformResults.size(); i++) {\n+      FieldTransform fieldTransform = fieldTransforms.get(i);\n+      TransformOperation transform = fieldTransform.getOperation();\n+\n+      Value previousValue = null;\n+      if (baseDoc instanceof Document) {\n+        previousValue = ((Document) baseDoc).getField(fieldTransform.getFieldPath());\n+      }\n+\n+      transformResults.add(\n+          transform.applyToRemoteDocument(previousValue, serverTransformResults.get(i)));\n+    }\n+    return transformResults;\n+  }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use when applying a transform locally.\n+   *\n+   * @param localWriteTime The local time of the mutation (used to generate ServerTimestampValues).\n+   * @param maybeDoc The current state of the document after applying all previous mutations.\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @return The transform results list.\n+   */\n+  List<Value> localTransformResults(", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5MjMwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544492303", "bodyText": "done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MzM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\nindex 00d30900..4666ae66 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n\n@@ -187,7 +168,7 @@ public abstract class Mutation {\n    * @param serverTransformResults The transform results received by the server.\n    * @return The transform results list.\n    */\n-  List<Value> serverTransformResults(\n+  protected List<Value> serverTransformResults(\n       @Nullable MaybeDocument baseDoc, List<Value> serverTransformResults) {\n     ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n     hardAssert(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NDM1OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544454359", "bodyText": "This can be private (or inlined).", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:46:02Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -166,4 +177,96 @@ static SnapshotVersion getPostMutationVersion(@Nullable MaybeDocument maybeDoc)\n       return SnapshotVersion.NONE;\n     }\n   }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use after a mutation containing transforms has been\n+   * acknowledged by the server.\n+   *\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @param serverTransformResults The transform results received by the server.\n+   * @return The transform results list.\n+   */\n+  List<Value> serverTransformResults(\n+      @Nullable MaybeDocument baseDoc, List<Value> serverTransformResults) {\n+    ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n+    hardAssert(\n+        fieldTransforms.size() == serverTransformResults.size(),\n+        \"server transform count (%d) should match field transform count (%d)\",\n+        serverTransformResults.size(),\n+        fieldTransforms.size());\n+\n+    for (int i = 0; i < serverTransformResults.size(); i++) {\n+      FieldTransform fieldTransform = fieldTransforms.get(i);\n+      TransformOperation transform = fieldTransform.getOperation();\n+\n+      Value previousValue = null;\n+      if (baseDoc instanceof Document) {\n+        previousValue = ((Document) baseDoc).getField(fieldTransform.getFieldPath());\n+      }\n+\n+      transformResults.add(\n+          transform.applyToRemoteDocument(previousValue, serverTransformResults.get(i)));\n+    }\n+    return transformResults;\n+  }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use when applying a transform locally.\n+   *\n+   * @param localWriteTime The local time of the mutation (used to generate ServerTimestampValues).\n+   * @param maybeDoc The current state of the document after applying all previous mutations.\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @return The transform results list.\n+   */\n+  List<Value> localTransformResults(\n+      Timestamp localWriteTime, @Nullable MaybeDocument maybeDoc, @Nullable MaybeDocument baseDoc) {\n+    ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n+    for (FieldTransform fieldTransform : fieldTransforms) {\n+      TransformOperation transform = fieldTransform.getOperation();\n+\n+      Value previousValue = null;\n+      if (maybeDoc instanceof Document) {\n+        previousValue = ((Document) maybeDoc).getField(fieldTransform.getFieldPath());\n+      }\n+\n+      transformResults.add(transform.applyToLocalView(previousValue, localWriteTime));\n+    }\n+    return transformResults;\n+  }\n+\n+  ObjectValue transformObject(ObjectValue objectValue, List<Value> transformResults) {\n+    hardAssert(\n+        transformResults.size() == fieldTransforms.size(), \"Transform results length mismatch.\");\n+\n+    ObjectValue.Builder builder = objectValue.toBuilder();\n+    for (int i = 0; i < fieldTransforms.size(); i++) {\n+      FieldTransform fieldTransform = fieldTransforms.get(i);\n+      FieldPath fieldPath = fieldTransform.getFieldPath();\n+      builder.set(fieldPath, transformResults.get(i));\n+    }\n+    return builder.build();\n+  }\n+\n+  public ObjectValue extractTransformBaseValue(@Nullable MaybeDocument maybeDoc) {", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NDEwNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544494107", "bodyText": "I removed extractBaseValue, which called extractTransformBaseValue. Since this is now used in LocalStore, I need to leave it public.", "author": "thebrianchen", "createdAt": "2020-12-16T17:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NDM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\nindex 00d30900..4666ae66 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java\n\n@@ -187,7 +168,7 @@ public abstract class Mutation {\n    * @param serverTransformResults The transform results received by the server.\n    * @return The transform results list.\n    */\n-  List<Value> serverTransformResults(\n+  protected List<Value> serverTransformResults(\n       @Nullable MaybeDocument baseDoc, List<Value> serverTransformResults) {\n     ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n     hardAssert(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQxOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544456418", "bodyText": "Do we need this? If you want to keep the new name, you could declare it in line 106.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:48:35Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/SetMutation.java", "diffHunk": "@@ -85,18 +101,16 @@ public MaybeDocument applyToLocalView(\n       return maybeDoc;\n     }\n \n+    ObjectValue newData = value;", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NDU5MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544494591", "bodyText": "oops, I had this leftover from an if-clause that I removed.", "author": "thebrianchen", "createdAt": "2020-12-16T17:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/SetMutation.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/SetMutation.java\nindex e2079897..74af4402 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/SetMutation.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/SetMutation.java\n\n@@ -101,9 +101,8 @@ public final class SetMutation extends Mutation {\n       return maybeDoc;\n     }\n \n-    ObjectValue newData = value;\n     List<Value> transformResults = localTransformResults(localWriteTime, maybeDoc, baseDoc);\n-    newData = transformObject(newData, transformResults);\n+    ObjectValue newData = transformObject(value, transformResults);\n \n     SnapshotVersion version = getPostMutationVersion(maybeDoc);\n     return new Document(getKey(), version, newData, Document.DocumentState.LOCAL_MUTATIONS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NzI2MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544457260", "bodyText": "This if check can probably be removed.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:49:36Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -283,6 +274,12 @@ private NoDocument decodeMissingDocument(BatchGetDocumentsResponse response) {\n       throw fail(\"unknown mutation type %s\", mutation.getClass());\n     }\n \n+    if (mutation.getFieldTransforms().size() > 0) {", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NTYxNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544495614", "bodyText": "done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NzI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java\nindex 1c199b91..26e8f803 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java\n\n@@ -274,10 +274,8 @@ public final class RemoteSerializer {\n       throw fail(\"unknown mutation type %s\", mutation.getClass());\n     }\n \n-    if (mutation.getFieldTransforms().size() > 0) {\n-      for (FieldTransform fieldTransform : mutation.getFieldTransforms()) {\n-        builder.addUpdateTransforms(encodeFieldTransform(fieldTransform));\n-      }\n+    for (FieldTransform fieldTransform : mutation.getFieldTransforms()) {\n+      builder.addUpdateTransforms(encodeFieldTransform(fieldTransform));\n     }\n \n     if (!mutation.getPrecondition().isNone()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTc4Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544459787", "bodyText": "Another idea would be to simply build up a new list of Mutations, which we can then iterate in the three lines below. That would avoid all toBuilder() conversions.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:52:51Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java", "diffHunk": "@@ -171,6 +174,35 @@ MutationBatch decodeMutationBatch(com.google.firebase.firestore.proto.WriteBatch\n     for (int i = 0; i < baseMutationsCount; i++) {\n       baseMutations.add(rpcSerializer.decodeMutation(batch.getBaseWrites(i)));\n     }\n+\n+    // Squash old transform mutations into existing patch or set mutations. The replacement of\n+    // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n+    // mutations stored in IndexedDB need to be updated to `update_transforms`.\n+    // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n+      Write mutation = batch.getWrites(i);\n+      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+        hardAssert(\n+            i >= 1\n+                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n+                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n+            \"TransformMutation should be preceded by a patch or set mutation\");\n+        Write mutationToJoin = batch.getWrites(i - 1);\n+        Builder newMutationBuilder = Write.newBuilder(mutationToJoin);\n+        for (FieldTransform fieldTransform : mutation.getTransform().getFieldTransformsList()) {\n+          newMutationBuilder.addUpdateTransforms(fieldTransform);\n+        }\n+\n+        batch =\n+            com.google.firebase.firestore.proto.WriteBatch.newBuilder(batch)\n+                .removeWrites(i)\n+                .removeWrites(i - 1)\n+                .addWrites(i - 1, newMutationBuilder.build())\n+                .build();\n+        --i;\n+      }\n+    }\n+", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNDU4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r545304582", "bodyText": "Done. Used a builder to accumulate everything before building at the end of the loop", "author": "thebrianchen", "createdAt": "2020-12-17T18:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0ODI2Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r545348267", "bodyText": "It looks like prepending an element to a list in Protobuf is an O(n) operation. Would it be possible to reverse this loop so we can append at the end? We could also just scrap the Builder entirely and just build up mutations directly (see the 5 lines below).", "author": "schmidt-sebastian", "createdAt": "2020-12-17T19:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4NzI2NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r545387264", "bodyText": "ended up using mutations directly.", "author": "thebrianchen", "createdAt": "2020-12-17T20:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\nindex fed27fee..588a75cc 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java\n\n@@ -179,30 +180,28 @@ public final class LocalSerializer {\n     // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n     // mutations stored in IndexedDB need to be updated to `update_transforms`.\n     // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    WriteBatch.Builder squashedBatchBuilder = WriteBatch.newBuilder();\n     for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n       Write mutation = batch.getWrites(i);\n-      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+      if (mutation.hasTransform()) {\n         hardAssert(\n-            i >= 1\n-                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n-                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n+            i >= 1 && !batch.getWrites(i - 1).hasTransform() && batch.getWrites(i - 1).hasUpdate(),\n             \"TransformMutation should be preceded by a patch or set mutation\");\n         Write mutationToJoin = batch.getWrites(i - 1);\n         Builder newMutationBuilder = Write.newBuilder(mutationToJoin);\n         for (FieldTransform fieldTransform : mutation.getTransform().getFieldTransformsList()) {\n           newMutationBuilder.addUpdateTransforms(fieldTransform);\n         }\n+        squashedBatchBuilder.addWrites(0, newMutationBuilder.build());\n \n-        batch =\n-            com.google.firebase.firestore.proto.WriteBatch.newBuilder(batch)\n-                .removeWrites(i)\n-                .removeWrites(i - 1)\n-                .addWrites(i - 1, newMutationBuilder.build())\n-                .build();\n         --i;\n+      } else {\n+        squashedBatchBuilder.addWrites(0, mutation);\n       }\n     }\n \n+    batch = squashedBatchBuilder.build();\n+\n     int mutationsCount = batch.getWritesCount();\n     List<Mutation> mutations = new ArrayList<>(mutationsCount);\n     for (int i = 0; i < mutationsCount; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MzEyMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544463121", "bodyText": "Should this be private as well>", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:57:11Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java", "diffHunk": "@@ -59,13 +67,204 @@\n   private RemoteSerializer remoteSerializer;\n   private LocalSerializer serializer;\n \n+  private Timestamp writeTime = Timestamp.now();\n+  com.google.protobuf.Timestamp writeTimeProto =", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NTk1Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544495953", "bodyText": "done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MzEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\nindex 029a25c3..f25d18b7 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\n\n@@ -68,7 +68,7 @@ public final class LocalSerializerTest {\n   private LocalSerializer serializer;\n \n   private Timestamp writeTime = Timestamp.now();\n-  com.google.protobuf.Timestamp writeTimeProto =\n+  private com.google.protobuf.Timestamp writeTimeProto =\n       com.google.protobuf.Timestamp.newBuilder()\n           .setSeconds(writeTime.getSeconds())\n           .setNanos(writeTime.getNanoseconds())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MzMyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544463326", "bodyText": "Nice :)", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:57:25Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java", "diffHunk": "@@ -59,13 +67,204 @@\n   private RemoteSerializer remoteSerializer;\n   private LocalSerializer serializer;\n \n+  private Timestamp writeTime = Timestamp.now();\n+  com.google.protobuf.Timestamp writeTimeProto =\n+      com.google.protobuf.Timestamp.newBuilder()\n+          .setSeconds(writeTime.getSeconds())\n+          .setNanos(writeTime.getNanoseconds())\n+          .build();\n+\n+  static class TestWriteBuilder {", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NjEwMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544496102", "bodyText": "learning from the best :)", "author": "thebrianchen", "createdAt": "2020-12-16T17:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MzMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\nindex 029a25c3..f25d18b7 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\n\n@@ -68,7 +68,7 @@ public final class LocalSerializerTest {\n   private LocalSerializer serializer;\n \n   private Timestamp writeTime = Timestamp.now();\n-  com.google.protobuf.Timestamp writeTimeProto =\n+  private com.google.protobuf.Timestamp writeTimeProto =\n       com.google.protobuf.Timestamp.newBuilder()\n           .setSeconds(writeTime.getSeconds())\n           .setNanos(writeTime.getNanoseconds())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2NDE0Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544464147", "bodyText": "Maybe s/serialized/encoded ?", "author": "schmidt-sebastian", "createdAt": "2020-12-16T16:58:30Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java", "diffHunk": "@@ -59,13 +67,204 @@\n   private RemoteSerializer remoteSerializer;\n   private LocalSerializer serializer;\n \n+  private Timestamp writeTime = Timestamp.now();\n+  com.google.protobuf.Timestamp writeTimeProto =\n+      com.google.protobuf.Timestamp.newBuilder()\n+          .setSeconds(writeTime.getSeconds())\n+          .setNanos(writeTime.getNanoseconds())\n+          .build();\n+\n+  static class TestWriteBuilder {\n+    private Builder builder;\n+\n+    TestWriteBuilder() {\n+      this.builder = Write.newBuilder();\n+    }\n+\n+    TestWriteBuilder addSet() {\n+      builder.setUpdate(\n+          com.google.firestore.v1.Document.newBuilder()\n+              .setName(\"projects/p/databases/d/documents/foo/bar\")\n+              .putFields(\"a\", Value.newBuilder().setStringValue(\"b\").build())\n+              .putFields(\"num\", Value.newBuilder().setIntegerValue(1).build()));\n+      return this;\n+    }\n+\n+    TestWriteBuilder addPatch() {\n+      builder\n+          .setUpdate(\n+              com.google.firestore.v1.Document.newBuilder()\n+                  .setName(\"projects/p/databases/d/documents/bar/baz\")\n+                  .putFields(\"a\", Value.newBuilder().setStringValue(\"b\").build())\n+                  .putFields(\"num\", Value.newBuilder().setIntegerValue(1).build()))\n+          .setUpdateMask(DocumentMask.newBuilder().addFieldPaths(\"a\"))\n+          .setCurrentDocument(Precondition.newBuilder().setExists(true));\n+      return this;\n+    }\n+\n+    TestWriteBuilder addDelete() {\n+      builder.setDelete(\"projects/p/databases/d/documents/baz/quux\");\n+      return this;\n+    }\n+\n+    TestWriteBuilder addUpdateTransforms() {\n+      builder\n+          .addUpdateTransforms(\n+              FieldTransform.newBuilder()\n+                  .setFieldPath(\"integer\")\n+                  .setIncrement(Value.newBuilder().setIntegerValue(42)))\n+          .addUpdateTransforms(\n+              FieldTransform.newBuilder()\n+                  .setFieldPath(\"double\")\n+                  .setIncrement(Value.newBuilder().setDoubleValue(13.37)));\n+      return this;\n+    }\n+\n+    TestWriteBuilder addLegacyTransform() {\n+      builder\n+          .setTransform(\n+              DocumentTransform.newBuilder()\n+                  .setDocument(\"projects/p/databases/d/documents/docs/1\")\n+                  .addFieldTransforms(\n+                      FieldTransform.newBuilder()\n+                          .setFieldPath(\"integer\")\n+                          .setIncrement(Value.newBuilder().setIntegerValue(42).build()))\n+                  .addFieldTransforms(\n+                      FieldTransform.newBuilder()\n+                          .setFieldPath(\"double\")\n+                          .setIncrement(Value.newBuilder().setDoubleValue(13.37).build())))\n+          .setCurrentDocument(Precondition.newBuilder().setExists(true));\n+      return this;\n+    }\n+\n+    Write build() {\n+      return builder.build();\n+    }\n+  }\n+\n+  Write setProto = new TestWriteBuilder().addSet().build();\n+  Write patchProto = new TestWriteBuilder().addPatch().build();\n+  Write deleteProto = new TestWriteBuilder().addDelete().build();\n+  Write transformProto = new TestWriteBuilder().addLegacyTransform().build();\n+\n   @Before\n   public void setUp() {\n     DatabaseId databaseId = DatabaseId.forDatabase(\"p\", \"d\");\n     remoteSerializer = new RemoteSerializer(databaseId);\n     serializer = new LocalSerializer(remoteSerializer);\n   }\n \n+  // TODO(b/174608374): Remove these tests once we perform a schema migration.\n+  @Test\n+  public void testSetMutationAndTransFormMutationAreSquashed() {\n+    WriteBatch batchProto =\n+        com.google.firebase.firestore.proto.WriteBatch.newBuilder()\n+            .setBatchId(42)\n+            .addAllWrites(asList(setProto, transformProto))\n+            .setLocalWriteTime(writeTimeProto)\n+            .build();\n+\n+    MutationBatch decoded = serializer.decodeMutationBatch(batchProto);\n+    assertEquals(1, decoded.getMutations().size());\n+    assertTrue(decoded.getMutations().get(0) instanceof SetMutation);\n+    Write serialized = remoteSerializer.encodeMutation(decoded.getMutations().get(0));", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NjM4OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544496388", "bodyText": "done.", "author": "thebrianchen", "createdAt": "2020-12-16T17:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2NDE0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\nindex 029a25c3..f25d18b7 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java\n\n@@ -68,7 +68,7 @@ public final class LocalSerializerTest {\n   private LocalSerializer serializer;\n \n   private Timestamp writeTime = Timestamp.now();\n-  com.google.protobuf.Timestamp writeTimeProto =\n+  private com.google.protobuf.Timestamp writeTimeProto =\n       com.google.protobuf.Timestamp.newBuilder()\n           .setSeconds(writeTime.getSeconds())\n           .setNanos(writeTime.getNanoseconds())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2Nzk1MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544467950", "bodyText": "Super optional nit (here and below): To me, set is the base case and patch is more advanced. I would flip the order of these assertions.", "author": "schmidt-sebastian", "createdAt": "2020-12-16T17:03:48Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java", "diffHunk": "@@ -378,64 +378,98 @@ public void testEncodesPatchMutationWithFieldMask() {\n   }\n \n   @Test\n-  public void testEncodesServerTimestampTransformMutation() {\n+  public void testEncodesServerTimestampMutation() {\n     Mutation mutation =\n-        transformMutation(\n+        patchMutation(\n             \"docs/1\",\n             map(\n                 \"a\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp(),\n                 \"bar.baz\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp()));\n-\n     Write expected =\n         Write.newBuilder()\n-            .setTransform(\n-                DocumentTransform.newBuilder()\n-                    .setDocument(\"projects/p/databases/d/documents/docs/1\")\n-                    .addFieldTransforms(\n-                        DocumentTransform.FieldTransform.newBuilder()\n-                            .setFieldPath(\"a\")\n-                            .setSetToServerValue(\n-                                DocumentTransform.FieldTransform.ServerValue.REQUEST_TIME))\n-                    .addFieldTransforms(\n-                        DocumentTransform.FieldTransform.newBuilder()\n-                            .setFieldPath(\"bar.baz\")\n-                            .setSetToServerValue(\n-                                DocumentTransform.FieldTransform.ServerValue.REQUEST_TIME)))\n+            .setUpdate(Document.newBuilder().setName(\"projects/p/databases/d/documents/docs/1\"))\n+            .setUpdateMask(DocumentMask.newBuilder().build())\n+            .addUpdateTransforms(\n+                FieldTransform.newBuilder()\n+                    .setFieldPath(\"a\")\n+                    .setSetToServerValue(ServerValue.REQUEST_TIME))\n+            .addUpdateTransforms(\n+                FieldTransform.newBuilder()\n+                    .setFieldPath(\"bar.baz\")\n+                    .setSetToServerValue(ServerValue.REQUEST_TIME))\n             .setCurrentDocument(Precondition.newBuilder().setExists(true))\n             .build();\n+    assertRoundTripForMutation(mutation, expected);\n \n+    mutation =", "originalCommit": "283773ff7fd34031619b3acafd88bae90f33c5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ5NzYyMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544497620", "bodyText": "done here and below", "author": "thebrianchen", "createdAt": "2020-12-16T17:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2Nzk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "b82f47114f237ee5523a282c21011c7a2e519732", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java\nindex 6f11611a..ad07b9da 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java\n\n@@ -380,48 +380,48 @@ public final class RemoteSerializerTest {\n   @Test\n   public void testEncodesServerTimestampMutation() {\n     Mutation mutation =\n-        patchMutation(\n+        setMutation(\n             \"docs/1\",\n             map(\n                 \"a\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp(),\n-                \"bar.baz\",\n+                \"bar\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp()));\n     Write expected =\n         Write.newBuilder()\n             .setUpdate(Document.newBuilder().setName(\"projects/p/databases/d/documents/docs/1\"))\n-            .setUpdateMask(DocumentMask.newBuilder().build())\n             .addUpdateTransforms(\n                 FieldTransform.newBuilder()\n                     .setFieldPath(\"a\")\n                     .setSetToServerValue(ServerValue.REQUEST_TIME))\n             .addUpdateTransforms(\n                 FieldTransform.newBuilder()\n-                    .setFieldPath(\"bar.baz\")\n+                    .setFieldPath(\"bar\")\n                     .setSetToServerValue(ServerValue.REQUEST_TIME))\n-            .setCurrentDocument(Precondition.newBuilder().setExists(true))\n             .build();\n     assertRoundTripForMutation(mutation, expected);\n \n     mutation =\n-        setMutation(\n+        patchMutation(\n             \"docs/1\",\n             map(\n                 \"a\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp(),\n-                \"bar\",\n+                \"bar.baz\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp()));\n     expected =\n         Write.newBuilder()\n             .setUpdate(Document.newBuilder().setName(\"projects/p/databases/d/documents/docs/1\"))\n+            .setUpdateMask(DocumentMask.newBuilder().build())\n             .addUpdateTransforms(\n                 FieldTransform.newBuilder()\n                     .setFieldPath(\"a\")\n                     .setSetToServerValue(ServerValue.REQUEST_TIME))\n             .addUpdateTransforms(\n                 FieldTransform.newBuilder()\n-                    .setFieldPath(\"bar\")\n+                    .setFieldPath(\"bar.baz\")\n                     .setSetToServerValue(ServerValue.REQUEST_TIME))\n+            .setCurrentDocument(Precondition.newBuilder().setExists(true))\n             .build();\n     assertRoundTripForMutation(mutation, expected);\n   }\n"}}, {"oid": "b82f47114f237ee5523a282c21011c7a2e519732", "url": "https://github.com/firebase/firebase-android-sdk/commit/b82f47114f237ee5523a282c21011c7a2e519732", "message": "resolve comments", "committedDate": "2020-12-17T18:08:23Z", "type": "commit"}, {"oid": "107e91111fb449bcf881eb8902a2954724591dd2", "url": "https://github.com/firebase/firebase-android-sdk/commit/107e91111fb449bcf881eb8902a2954724591dd2", "message": "remove builder usage", "committedDate": "2020-12-17T20:35:14Z", "type": "commit"}, {"oid": "8c1b565246f05cd8920ad5ceab00d65fd582c7d6", "url": "https://github.com/firebase/firebase-android-sdk/commit/8c1b565246f05cd8920ad5ceab00d65fd582c7d6", "message": "fix nits", "committedDate": "2020-12-17T22:17:05Z", "type": "commit"}]}