{"pr_number": 1672, "pr_title": "Unified emulator settings for Database", "pr_createdAt": "2020-06-17T16:05:26Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1672", "timeline": [{"oid": "9ef8a4b981789119e6973d7be3a0f7eb2263d6c4", "url": "https://github.com/firebase/firebase-android-sdk/commit/9ef8a4b981789119e6973d7be3a0f7eb2263d6c4", "message": "Unified emulator settings for Database", "committedDate": "2020-06-17T16:02:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDAwNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r441660007", "bodyText": "I'm gonna guess I have a bad IDE setting?  I used google-java-format", "author": "samtstern", "createdAt": "2020-06-17T16:06:06Z", "path": "firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java", "diffHunk": "@@ -56,11 +55,19 @@\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.stubbing.Answer;\n+\n+import static com.google.android.gms.common.util.Base64Utils.decodeUrlSafeNoPadding;", "originalCommit": "9ef8a4b981789119e6973d7be3a0f7eb2263d6c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODM5NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442288394", "bodyText": "Did you run google-java-format from the IDE, if so try ./gradlew gJF as the ide plugin does not affect imports.", "author": "vkryachko", "createdAt": "2020-06-18T14:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjcwNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442342704", "bodyText": "Thanks for the pointer to that task.", "author": "samtstern", "createdAt": "2020-06-18T16:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "0f931bb81b85d0580545012d0800201fd063e134", "chunk": "diff --git a/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java b/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java\nindex 8bdc779c..2a86f520 100644\n--- a/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java\n+++ b/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java\n\n@@ -55,19 +59,11 @@ import java.util.Collection;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static com.google.android.gms.common.util.Base64Utils.decodeUrlSafeNoPadding;\n-import static com.google.common.truth.Truth.assertThat;\n-import static com.google.firebase.common.testutil.Assert.assertThrows;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.reset;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.stubbing.Answer;\n \n /** Unit tests for {@link com.google.firebase.FirebaseApp}. */\n // TODO(arondeak): uncomment lines when Firebase API targets are in integ.\n"}}, {"oid": "9d4be7dc503875f6a77bc1a8109225281bc67518", "url": "https://github.com/firebase/firebase-android-sdk/commit/9d4be7dc503875f6a77bc1a8109225281bc67518", "message": "API surface", "committedDate": "2020-06-17T16:23:16Z", "type": "commit"}, {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847", "url": "https://github.com/firebase/firebase-android-sdk/commit/1ca25d48bb598c471b3a253fdee570cc2fdcc847", "message": "Hide new methods", "committedDate": "2020-06-17T19:02:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODExOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442288119", "bodyText": "@vkryachko if these were string constants rather than an enum would that help?  Then I don't think all BaaS would have to be released after each emulator is released, only common and the SDK which corresponds to the new emulator.", "author": "samtstern", "createdAt": "2020-06-18T14:52:19Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+\n+/**\n+ * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+@KeepForSdk\n+public enum FirebaseEmulators {", "originalCommit": "1ca25d48bb598c471b3a253fdee570cc2fdcc847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMzg5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442333899", "bodyText": "@samtstern imo it would, although additionally - as I mentioned below - ideally those constants should not live inside common either but rather in their respective sdks.", "author": "vkryachko", "createdAt": "2020-06-18T15:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjUxNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442342517", "bodyText": "Ah ok your suggestion below is a good one!", "author": "samtstern", "createdAt": "2020-06-18T16:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f39c11f0dc7822886627d553bcd00eeb0f42dc8c", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\nsimilarity index 66%\nrename from firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java\nrename to firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\nindex 814bb311..429607f3 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\n\n@@ -14,10 +14,12 @@\n \n package com.google.firebase.emulators;\n \n+import androidx.annotation.NonNull;\n+\n import com.google.android.gms.common.annotation.KeepForSdk;\n \n /**\n- * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ * Identifier Firebase services that can be emulated using the Firebase Emulator Suite.\n  *\n  * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODkwMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442288900", "bodyText": "nit: @KeepForSdk is not needed since we don't proguard github SDKs, here and throughout.", "author": "vkryachko", "createdAt": "2020-06-18T14:53:19Z", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -142,6 +148,20 @@ public FirebaseOptions getOptions() {\n     return options;\n   }\n \n+  /**\n+   * Returns the specified {@link EmulatorSettings}.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @hide\n+   */\n+  @KeepForSdk", "originalCommit": "1ca25d48bb598c471b3a253fdee570cc2fdcc847", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb262d3d115886b1d52b0b9cec376dd812bd55d4", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\nindex b29e354b..5d0db0ec 100644\n--- a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n+++ b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n\n@@ -155,7 +152,6 @@ public class FirebaseApp {\n    *\n    * @hide\n    */\n-  @KeepForSdk\n   @Nullable\n   public EmulatorSettings getEmulatorSettings() {\n     checkNotDeleted();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTk3Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442295977", "bodyText": "Would it make sense to make it @NotNull and return a default \"empty\" settings object. It should help with the following:\n\nMake it more null-safe and simplify integrating SDKs as they won't have to deal with null twice as I can see in the implementation below.\n*iiuc it will help make the \"set-after-use\" logic below more safe, i.e. with the null case it seems possible to first initialize firestore and then call enableEmulators()\n\nwdyt?", "author": "vkryachko", "createdAt": "2020-06-18T15:03:07Z", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -142,6 +148,20 @@ public FirebaseOptions getOptions() {\n     return options;\n   }\n \n+  /**\n+   * Returns the specified {@link EmulatorSettings}.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @hide\n+   */\n+  @KeepForSdk\n+  @Nullable", "originalCommit": "1ca25d48bb598c471b3a253fdee570cc2fdcc847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NTg4Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442345883", "bodyText": "Yes great idea.", "author": "samtstern", "createdAt": "2020-06-18T16:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fb262d3d115886b1d52b0b9cec376dd812bd55d4", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\nindex b29e354b..5d0db0ec 100644\n--- a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n+++ b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n\n@@ -155,7 +152,6 @@ public class FirebaseApp {\n    *\n    * @hide\n    */\n-  @KeepForSdk\n   @Nullable\n   public EmulatorSettings getEmulatorSettings() {\n     checkNotDeleted();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442297934", "bodyText": "nit: consider making a copy of the map, otherwise if a reference to the builder is kept around, one can modify the underlying map unintentionally.", "author": "vkryachko", "createdAt": "2020-06-18T15:06:06Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+import com.google.firebase.components.Preconditions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+@KeepForSdk\n+public class EmulatorSettings {\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulators, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulators emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(settingsMap);", "originalCommit": "1ca25d48bb598c471b3a253fdee570cc2fdcc847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NjQxMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442346411", "bodyText": "That is done in the EmulatorSettings() constructor with unmodifiableMap", "author": "samtstern", "createdAt": "2020-06-18T16:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0ODc1Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442348757", "bodyText": "The problem with unmodifiableMap is that it only a read-only view into the underlying map, so modifications to the underlying map will be seen by the view.", "author": "vkryachko", "createdAt": "2020-06-18T16:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2Mjg5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442362899", "bodyText": "Ah thanks for the clarification, resolved.", "author": "samtstern", "createdAt": "2020-06-18T16:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "f39c11f0dc7822886627d553bcd00eeb0f42dc8c", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\nindex 62de708f..5bbffb8e 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n\n@@ -39,7 +39,7 @@ public class EmulatorSettings {\n \n   public static final class Builder {\n \n-    private final Map<FirebaseEmulators, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n \n     /** Constructs an empty builder. */\n     public Builder() {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzM0Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442303346", "bodyText": "While making this an enum makes the API simple and type safe, it couples firebase-common to all baas sdks.\nTo avoid the coupling I suggest to either resort to using Strings with each string defined as a constant on the target SDK, i.e. FirebaseFirestore.EMULATOR = \"firestore\" or something.\nOr wrapping that string in a class here in common like data class Emulator(serviceName: String) and initializing the SDK constant with it instead of the string.\nA potential additional advantage of this is that one can only configure an emulator for say firestore if it's actually present in their app.", "author": "vkryachko", "createdAt": "2020-06-18T15:14:15Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+\n+/**\n+ * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+@KeepForSdk\n+public enum FirebaseEmulators {", "originalCommit": "1ca25d48bb598c471b3a253fdee570cc2fdcc847", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f39c11f0dc7822886627d553bcd00eeb0f42dc8c", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\nsimilarity index 66%\nrename from firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java\nrename to firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\nindex 814bb311..429607f3 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\n\n@@ -14,10 +14,12 @@\n \n package com.google.firebase.emulators;\n \n+import androidx.annotation.NonNull;\n+\n import com.google.android.gms.common.annotation.KeepForSdk;\n \n /**\n- * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ * Identifier Firebase services that can be emulated using the Firebase Emulator Suite.\n  *\n  * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442305746", "bodyText": "How will this interact with firestore's terminate()? afaicr one can terminate one instance of firestore at which point the call to FirebaseFirestore#getInstance() will create a new firestore instance, should we allow the following sequence of calls?\nfirestore.terminate();\napp.updateFirestoresEmulator();\nFirebase.firestore.use();", "author": "vkryachko", "createdAt": "2020-06-18T15:17:42Z", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -305,6 +325,28 @@ public static FirebaseApp initializeApp(\n     return firebaseApp;\n   }\n \n+  /**\n+   * Specify which services should access local emulators for this FirebaseApp instance.\n+   *\n+   * <p>For example, if the {@link EmulatorSettings} contain {@link\n+   * com.google.firebase.emulators.EmulatedServiceSettings} for {@link\n+   * com.google.firebase.emulators.FirebaseEmulators#FIRESTORE}, then calls to Cloud Firestore will\n+   * communicate with the emulator rather than production.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @param emulatorSettings the emulator settings for all services.\n+   * @hide\n+   */\n+  @KeepForSdk\n+  public void enableEmulators(@NonNull EmulatorSettings emulatorSettings) {\n+    checkNotDeleted();\n+    Preconditions.checkState(", "originalCommit": "1ca25d48bb598c471b3a253fdee570cc2fdcc847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NzQ2MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442347461", "bodyText": "Thanks for calling this out, I resolved all the other comments since they were straightforward but I will have to look into this one more deeply.", "author": "samtstern", "createdAt": "2020-06-18T16:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0OTgwNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442349805", "bodyText": "Ok actually I do not want to allow that sequence of calls.  One of the main reasons for this is to make sure that app developers can reason about their emulation settings at a single point before any Firebase service has done any communication.\nIf you call terminate() the settings should still apply.  If you want to nuke them you'll need to call FirebaseApp#delete() and then make a new app.\nWDYT?", "author": "samtstern", "createdAt": "2020-06-18T16:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1MzMxNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442353317", "bodyText": "That's a good point and sgtm. You may want to confirm this behavior with firestore folks though", "author": "vkryachko", "createdAt": "2020-06-18T16:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MzE5MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442363191", "bodyText": "Will do during the Firestore PR.", "author": "samtstern", "createdAt": "2020-06-18T16:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f39c11f0dc7822886627d553bcd00eeb0f42dc8c", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\nindex b29e354b..51ffe46e 100644\n--- a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n+++ b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n\n@@ -330,7 +331,7 @@ public class FirebaseApp {\n    *\n    * <p>For example, if the {@link EmulatorSettings} contain {@link\n    * com.google.firebase.emulators.EmulatedServiceSettings} for {@link\n-   * com.google.firebase.emulators.FirebaseEmulators#FIRESTORE}, then calls to Cloud Firestore will\n+   * FirebaseEmulator#FIRESTORE}, then calls to Cloud Firestore will\n    * communicate with the emulator rather than production.\n    *\n    * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n"}}, {"oid": "f39c11f0dc7822886627d553bcd00eeb0f42dc8c", "url": "https://github.com/firebase/firebase-android-sdk/commit/f39c11f0dc7822886627d553bcd00eeb0f42dc8c", "message": "Remove the enum, flip the dependency", "committedDate": "2020-06-18T16:09:56Z", "type": "commit"}, {"oid": "0f931bb81b85d0580545012d0800201fd063e134", "url": "https://github.com/firebase/firebase-android-sdk/commit/0f931bb81b85d0580545012d0800201fd063e134", "message": "Google Java Format", "committedDate": "2020-06-18T16:11:14Z", "type": "commit"}, {"oid": "fb262d3d115886b1d52b0b9cec376dd812bd55d4", "url": "https://github.com/firebase/firebase-android-sdk/commit/fb262d3d115886b1d52b0b9cec376dd812bd55d4", "message": "No more @KeepForSdk", "committedDate": "2020-06-18T16:13:22Z", "type": "commit"}, {"oid": "276276465609ecb45dc5870e7e81643cf7916c02", "url": "https://github.com/firebase/firebase-android-sdk/commit/276276465609ecb45dc5870e7e81643cf7916c02", "message": "Respond to most review comments", "committedDate": "2020-06-18T16:18:29Z", "type": "commit"}, {"oid": "24b8f3a42fb3e220661bce8895e9c5fc4d863648", "url": "https://github.com/firebase/firebase-android-sdk/commit/24b8f3a42fb3e220661bce8895e9c5fc4d863648", "message": "Clone the map", "committedDate": "2020-06-18T16:43:17Z", "type": "commit"}, {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54", "url": "https://github.com/firebase/firebase-android-sdk/commit/4dd3c232fc7bdf4e36f1526c051d04cf2df04c54", "message": "Fix bug arising from shared DEFAULT", "committedDate": "2020-06-18T16:52:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442437562", "bodyText": "I really dislike Builders... but is there a precedent for this style of \"compact\" builders? I would expect no constructor arguments, a newBuilder()method  on  EmulatedServiceSettings and setHost() and setPort() methods.", "author": "schmidt-sebastian", "createdAt": "2020-06-18T18:57:59Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "originalCommit": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0ODI3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442448274", "bodyText": "I've always been told that required arguments should be in the Builder constructor.  The awkward thing here is that the Builder has no other methods at all but in the API discussion it was clear that we may want to extend this object one day (setInstance() maybe or setCredentials as you suggest below) so having a Builder now rather than a plain constructor is more future proof.", "author": "samtstern", "createdAt": "2020-06-18T19:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1ODU3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442458574", "bodyText": "+1 on required parameters as builder constructor parameters\nAlthough to the point of being future-proof: it seems that it's possible to be future-proof by not having a builder at all at this point and expose the constructor directly, then add the builder when(and most importantly if) needed and tell people to use the builder for additional functionality. wdyt?", "author": "vkryachko", "createdAt": "2020-06-18T19:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NDI1MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442494250", "bodyText": "I am open to whatever you think.  I guess let's do the shorter thing now and do the builder later.", "author": "samtstern", "createdAt": "2020-06-18T20:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NTMzMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442495332", "bodyText": "Builder removed.", "author": "samtstern", "createdAt": "2020-06-18T20:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NTg2Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442495866", "bodyText": "Whatever we decide has to go through api review, has it happened yet btw?", "author": "vkryachko", "createdAt": "2020-06-18T20:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NzkyMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442497920", "bodyText": "Yes the API (go/firebase-emulator-connection-api) was approved before I started this PR.\nIMO we don't have to go back through API review to change a Builder to a non-Builder, especially since you are the Android platform approver.", "author": "samtstern", "createdAt": "2020-06-18T20:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNDQ3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442504474", "bodyText": "Just to clarify, I don't have a vote in the API council, I just offer my recommendations :)\nThat said, it would not hurt to drop an email to your api review thread, but it's definitely up to you.", "author": "vkryachko", "createdAt": "2020-06-18T21:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4ef9919eeca049b79bdf8d170217bb252285d51b", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\nindex cd8a42e3..ce9ca054 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\n\n@@ -26,33 +26,10 @@ import androidx.annotation.NonNull;\n  */\n public class EmulatedServiceSettings {\n \n-  public static final class Builder {\n-\n-    private final String host;\n-    private final int port;\n-\n-    /**\n-     * Create a new EmulatedServiceSettings builder.\n-     *\n-     * @param host the host where the local emulator is running. If you want to access 'localhost'\n-     *     from an Android Emulator use '10.0.2.2' instead.\n-     * @param port the port where the local emulator is running.\n-     */\n-    public Builder(@NonNull String host, int port) {\n-      this.host = host;\n-      this.port = port;\n-    }\n-\n-    @NonNull\n-    public EmulatedServiceSettings build() {\n-      return new EmulatedServiceSettings(this.host, this.port);\n-    }\n-  }\n-\n   public final String host;\n   public final int port;\n \n-  private EmulatedServiceSettings(@NonNull String host, int port) {\n+  public EmulatedServiceSettings(@NonNull String host, int port) {\n     this.host = host;\n     this.port = port;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzODAyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442438026", "bodyText": "FWIW we call this \"frozen\" in Firestore.", "author": "schmidt-sebastian", "createdAt": "2020-06-18T18:58:51Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {", "originalCommit": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0ODY1Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442448653", "bodyText": "It's actually not the same, see below.", "author": "samtstern", "createdAt": "2020-06-18T19:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzODAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "f7e2832b22436ae5863ef70647280af6505df012", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\nindex c04c66ac..b3c0a86a 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n\n@@ -14,6 +14,7 @@\n \n package com.google.firebase.emulators;\n \n+import android.util.Log;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import com.google.firebase.components.Preconditions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442442086", "bodyText": "The class as implemented appears immutable. It doesn't seem possible to call   addEmulatedService and modify an existing instance, so it is not immediately obvious why we need the \"accessed\" check.\nWould it make more sense to perform this check in FirebaseApp and enforce that enableEmulators can only be called once? Along the same line, could enableEmulators take FirebaseEmulator emulator,  EmulatedServiceSettings settings directly, which would remove the need for EmulatorSettings API.", "author": "schmidt-sebastian", "createdAt": "2020-06-18T19:06:30Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "originalCommit": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0OTgwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442449803", "bodyText": "It's not about preventing someone calling enableEmulators twice, it's about someone calling it after the Database/Firestore/etc SDK has already consulted FirebaseApp.getEmulatorSettings().\nIt's sort of like firestore.settings({ }) where you can call it all you want but once the SDK \"boots up\" we throw if you call it.\nAs for changing the API to be repeated calls to enableEmulators:\n\nThat would be a pretty significant departure from the API approved by the council.\nThe idea here is that developers should have a single place where they control all the emulator settings in their app.  So I am personally in favor of a single call to enableEmulators() with all of the service settings in one object.", "author": "samtstern", "createdAt": "2020-06-18T19:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1Njk0MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442456941", "bodyText": "Okay, understood. I think we should still try to simplify the code flow, which would make it more obvious to code reviewers like me. Can we make this explicit in Firebase App (by adding an internal freezeSettings() or something)? ideally, trying to understand this should not overheat my brain, but it is also very hot today.", "author": "schmidt-sebastian", "createdAt": "2020-06-18T19:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MTA2NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442491064", "bodyText": "Yes that's a good idea.", "author": "samtstern", "createdAt": "2020-06-18T20:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MzgwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442493803", "bodyText": "Added a hidden freeze() method on EmulatorSettings and made it the responsibility of FirebaseApp to call it.\nAdded a warning if somehow someone is getting service settings from a non-frozen EmulatorSettings, which shouldn't be possible.", "author": "samtstern", "createdAt": "2020-06-18T20:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMzA1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442503056", "bodyText": "Hm, that's interesting. What's become more apparent to me with your latest changes is the observation that EmulatorSettings are not really concerned about being frozen, it's FirebaseApp that both freezes and checks for frozen on it.\nThis kind of results in the situation where the frozen logic is spread out among both FirebaseApp and EmulatorSettings. Would it make sense to make EmulatorSettings just a pure immutable pojo and have FirebaseApp store the frozen bit since it's the only one who uses it and has full control of the value?", "author": "vkryachko", "createdAt": "2020-06-18T21:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNTg5Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442505896", "bodyText": "That's cool with me!  I agree that's where it should live, I just thought maybe people didn't want that kind of state on FirebaseApp.  I'll move it.", "author": "samtstern", "createdAt": "2020-06-18T21:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwODI1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442508256", "bodyText": "Moved boolean state to FirebaseApp", "author": "samtstern", "createdAt": "2020-06-18T21:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f7e2832b22436ae5863ef70647280af6505df012", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\nindex c04c66ac..b3c0a86a 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n\n@@ -14,6 +14,7 @@\n \n package com.google.firebase.emulators;\n \n+import android.util.Log;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import com.google.firebase.components.Preconditions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzMxMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442443313", "bodyText": "Should we add an explicit way to decide which credentials to use? I am asking because of Yuchen's feedback here: firebase/firebase-js-sdk#3228", "author": "schmidt-sebastian", "createdAt": "2020-06-18T19:09:09Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -73,6 +81,13 @@ public static ParsedUrl parseUrl(String url) throws DatabaseException {\n       originalPathString = originalPathString.replace(\"+\", \" \");\n       Validation.validateRootPathString(originalPathString);\n \n+      // TODO: Should log this out\n+      if (serviceSettings != null) {\n+        repoInfo.secure = false;\n+        repoInfo.host = serviceSettings.host + \":\" + serviceSettings.port;\n+        repoInfo.internalHost = repoInfo.host;", "originalCommit": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MDY4OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442450689", "bodyText": "I do think that would be a nice addition one day but this API was approved cross-platform for Android, iOS, and JS without any mention of a credentials setting so I think I'd need to do a new API review for that.\nDo you anticipate bugs like that JS one in this implementation?", "author": "samtstern", "createdAt": "2020-06-18T19:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjA1NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442452054", "bodyText": "This should be low risk since Android SDK is not reused in Admin SDKs. The expected behavior is the same as production -- get credentials from Firebase Auth if used and logged in, or no credentials if not.", "author": "yuchenshi", "createdAt": "2020-06-18T19:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\nindex 50299dc3..03c1315e 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n\n@@ -54,26 +54,29 @@ public class Utilities {\n         throw new IllegalArgumentException(\"Database URL does not specify a valid host\");\n       }\n \n-      RepoInfo repoInfo = new RepoInfo();\n-      repoInfo.host = host.toLowerCase();\n-\n-      int port = uri.getPort();\n-      if (port != -1) {\n-        repoInfo.secure = scheme.equals(\"https\") || scheme.equals(\"wss\");\n-        repoInfo.host += \":\" + port;\n-      } else {\n-        repoInfo.secure = true;\n+      String namespace = uri.getQueryParameter(\"ns\");\n+      if (namespace == null) {\n+        String[] parts = host.split(\"\\\\.\", -1);\n+        namespace = parts[0].toLowerCase();\n       }\n \n-      String namespaceParam = uri.getQueryParameter(\"ns\");\n-      if (namespaceParam != null) {\n-        repoInfo.namespace = namespaceParam;\n+      RepoInfo repoInfo = new RepoInfo();\n+      if (emulatorSettings != null) {\n+        repoInfo.host = emulatorSettings.host + \":\" + emulatorSettings.port;\n+        repoInfo.secure = false;\n       } else {\n-        String[] parts = host.split(\"\\\\.\", -1);\n-        repoInfo.namespace = parts[0].toLowerCase();\n+        repoInfo.host = host.toLowerCase();\n+        int port = uri.getPort();\n+        if (port != -1) {\n+          repoInfo.secure = scheme.equals(\"https\") || scheme.equals(\"wss\");\n+          repoInfo.host += \":\" + port;\n+        } else {\n+          repoInfo.secure = true;\n+        }\n       }\n \n       repoInfo.internalHost = repoInfo.host;\n+      repoInfo.namespace = namespace;\n \n       String originalPathString = extractPathString(url);\n       // URLEncoding a space turns it into a '+', which is different\n"}}, {"oid": "f7e2832b22436ae5863ef70647280af6505df012", "url": "https://github.com/firebase/firebase-android-sdk/commit/f7e2832b22436ae5863ef70647280af6505df012", "message": "Change to freeze verbiage, make FirebaseApp responsible for freezing", "committedDate": "2020-06-18T20:47:22Z", "type": "commit"}, {"oid": "4ef9919eeca049b79bdf8d170217bb252285d51b", "url": "https://github.com/firebase/firebase-android-sdk/commit/4ef9919eeca049b79bdf8d170217bb252285d51b", "message": "No more unnecessary builder", "committedDate": "2020-06-18T20:51:18Z", "type": "commit"}, {"oid": "a2a4cd66abc9fa9a76a69d007abd940fa55f8c31", "url": "https://github.com/firebase/firebase-android-sdk/commit/a2a4cd66abc9fa9a76a69d007abd940fa55f8c31", "message": "Move frozen to FirebaseApp", "committedDate": "2020-06-18T21:16:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNzc3NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442507775", "bodyText": "If this remains hidden, then the frozen state could just be a simple atomic boolean here. If this is ever public, then this won't work since we wouldn't want to freeze the settings just because this method was called. I would vote we go the simple route now and use a single (atomic) boolean that manages the state in Firebase app.", "author": "schmidt-sebastian", "createdAt": "2020-06-18T21:17:28Z", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -142,6 +145,20 @@ public FirebaseOptions getOptions() {\n     return options;\n   }\n \n+  /**\n+   * Returns the specified {@link EmulatorSettings} or a default.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @hide\n+   */\n+  @NonNull\n+  public EmulatorSettings getEmulatorSettings() {\n+    checkNotDeleted();\n+    emulatorSettings.freeze();", "originalCommit": "4ef9919eeca049b79bdf8d170217bb252285d51b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\nindex 3f60497c..511cdb3a 100644\n--- a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n+++ b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n\n@@ -155,7 +156,7 @@ public class FirebaseApp {\n   @NonNull\n   public EmulatorSettings getEmulatorSettings() {\n     checkNotDeleted();\n-    emulatorSettings.freeze();\n+    emulatorSettingsFrozen.set(true);\n     return emulatorSettings;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwODg4OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442508888", "bodyText": "s/serviceSettings/emulatorSettings ?", "author": "schmidt-sebastian", "createdAt": "2020-06-18T21:20:02Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -32,7 +34,13 @@\n public class Utilities {\n   private static final char[] HEX_CHARACTERS = \"0123456789abcdef\".toCharArray();\n \n-  public static ParsedUrl parseUrl(String url) throws DatabaseException {\n+  public static ParsedUrl parseUrl(@NonNull String url) {\n+    return Utilities.parseUrl(url, null);\n+  }\n+\n+  public static ParsedUrl parseUrl(\n+      @NonNull String url, @Nullable EmulatedServiceSettings serviceSettings)", "originalCommit": "4ef9919eeca049b79bdf8d170217bb252285d51b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\nindex 50299dc3..03c1315e 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n\n@@ -39,7 +39,7 @@ public class Utilities {\n   }\n \n   public static ParsedUrl parseUrl(\n-      @NonNull String url, @Nullable EmulatedServiceSettings serviceSettings)\n+      @NonNull String url, @Nullable EmulatedServiceSettings emulatorSettings)\n       throws DatabaseException {\n     try {\n       Uri uri = Uri.parse(url);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNDAyMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442514023", "bodyText": "As for comments for here, I think this code is fine. A cleaner way might be https://gist.github.com/schmidt-sebastian/e1ddba17d468ae72c4104fa84aae2d9a, but it's optional.", "author": "schmidt-sebastian", "createdAt": "2020-06-18T21:31:08Z", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -73,6 +81,13 @@ public static ParsedUrl parseUrl(String url) throws DatabaseException {\n       originalPathString = originalPathString.replace(\"+\", \" \");\n       Validation.validateRootPathString(originalPathString);\n \n+      // TODO: Should log this out\n+      if (serviceSettings != null) {\n+        repoInfo.secure = false;\n+        repoInfo.host = serviceSettings.host + \":\" + serviceSettings.port;\n+        repoInfo.internalHost = repoInfo.host;\n+      }\n+", "originalCommit": "4ef9919eeca049b79bdf8d170217bb252285d51b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyMzQ4NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442823484", "bodyText": "You're right that is better, I implemented that diff.", "author": "samtstern", "createdAt": "2020-06-19T12:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNDAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "chunk": "diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\nindex 50299dc3..03c1315e 100644\n--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java\n\n@@ -54,26 +54,29 @@ public class Utilities {\n         throw new IllegalArgumentException(\"Database URL does not specify a valid host\");\n       }\n \n-      RepoInfo repoInfo = new RepoInfo();\n-      repoInfo.host = host.toLowerCase();\n-\n-      int port = uri.getPort();\n-      if (port != -1) {\n-        repoInfo.secure = scheme.equals(\"https\") || scheme.equals(\"wss\");\n-        repoInfo.host += \":\" + port;\n-      } else {\n-        repoInfo.secure = true;\n+      String namespace = uri.getQueryParameter(\"ns\");\n+      if (namespace == null) {\n+        String[] parts = host.split(\"\\\\.\", -1);\n+        namespace = parts[0].toLowerCase();\n       }\n \n-      String namespaceParam = uri.getQueryParameter(\"ns\");\n-      if (namespaceParam != null) {\n-        repoInfo.namespace = namespaceParam;\n+      RepoInfo repoInfo = new RepoInfo();\n+      if (emulatorSettings != null) {\n+        repoInfo.host = emulatorSettings.host + \":\" + emulatorSettings.port;\n+        repoInfo.secure = false;\n       } else {\n-        String[] parts = host.split(\"\\\\.\", -1);\n-        repoInfo.namespace = parts[0].toLowerCase();\n+        repoInfo.host = host.toLowerCase();\n+        int port = uri.getPort();\n+        if (port != -1) {\n+          repoInfo.secure = scheme.equals(\"https\") || scheme.equals(\"wss\");\n+          repoInfo.host += \":\" + port;\n+        } else {\n+          repoInfo.secure = true;\n+        }\n       }\n \n       repoInfo.internalHost = repoInfo.host;\n+      repoInfo.namespace = namespace;\n \n       String originalPathString = extractPathString(url);\n       // URLEncoding a space turns it into a '+', which is different\n"}}, {"oid": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "url": "https://github.com/firebase/firebase-android-sdk/commit/4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "message": "Take sebastian's url parsing suggestion", "committedDate": "2020-06-19T12:54:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMjQyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442832426", "bodyText": "nit: now that settings are immutable, consider sharing the default instance across app instances.", "author": "vkryachko", "createdAt": "2020-06-19T13:12:47Z", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -110,6 +111,9 @@\n   private final FirebaseOptions options;\n   private final ComponentRuntime componentRuntime;\n \n+  private final AtomicBoolean emulatorSettingsFrozen = new AtomicBoolean(false);\n+  private EmulatorSettings emulatorSettings = EmulatorSettings.getDefault();", "originalCommit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0NjU2Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442846566", "bodyText": "Ah yeah good call!", "author": "samtstern", "createdAt": "2020-06-19T13:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMjQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8a51a73ccdeec27e5fac2d50207899d586cc18e1", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\nindex 511cdb3a..dee3e1d9 100644\n--- a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n+++ b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java\n\n@@ -112,7 +112,7 @@ public class FirebaseApp {\n   private final ComponentRuntime componentRuntime;\n \n   private final AtomicBoolean emulatorSettingsFrozen = new AtomicBoolean(false);\n-  private EmulatorSettings emulatorSettings = EmulatorSettings.getDefault();\n+  private EmulatorSettings emulatorSettings = EmulatorSettings.DEFAULT;\n \n   // Default disabled. We released Firebase publicly without this feature, so making it default\n   // enabled is a backwards incompatible change.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMjg0MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442832841", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EmulatedServiceSettings {\n          \n          \n            \n            public final class EmulatedServiceSettings {", "author": "vkryachko", "createdAt": "2020-06-19T13:13:38Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {", "originalCommit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f173e07f0e30fe1f92c777b01d0cf36d4ff8eca", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\nindex ce9ca054..2876b5cc 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\n\n@@ -24,7 +24,7 @@ import androidx.annotation.NonNull;\n  * @see EmulatorSettings\n  * @hide\n  */\n-public class EmulatedServiceSettings {\n+public final class EmulatedServiceSettings {\n \n   public final String host;\n   public final int port;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzA0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442833048", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EmulatorSettings {\n          \n          \n            \n            public final class EmulatorSettings {", "author": "vkryachko", "createdAt": "2020-06-19T13:14:06Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {", "originalCommit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d67b78c97b929b928f7c435e878076fe6825fb8", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\nindex 5ea502eb..cc2ac4b9 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n\n@@ -30,7 +30,7 @@ import java.util.Map;\n  * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n  * @hide\n  */\n-public class EmulatorSettings {\n+public final class EmulatorSettings {\n \n   /** Empty emulator settings to be used as an internal default */\n   public static EmulatorSettings getDefault() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzE4NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442833185", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class FirebaseEmulator {\n          \n          \n            \n            public final class FirebaseEmulator {", "author": "vkryachko", "createdAt": "2020-06-19T13:14:22Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Identifier Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+public class FirebaseEmulator {", "originalCommit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d1e1797cba7e422fe8ed32ca3792081af774ea1", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\nindex ea81470a..19a4eae5 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\n\n@@ -26,7 +26,7 @@ import androidx.annotation.NonNull;\n  * @see EmulatedServiceSettings\n  * @hide\n  */\n-public class FirebaseEmulator {\n+public final class FirebaseEmulator {\n \n   public final String name;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNTIxMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442835210", "bodyText": "Might be worth making a getter for it: go/ej3e-16", "author": "vkryachko", "createdAt": "2020-06-19T13:18:19Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Identifier Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+public class FirebaseEmulator {\n+\n+  public final String name;", "originalCommit": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d1e1797cba7e422fe8ed32ca3792081af774ea1", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\nindex ea81470a..19a4eae5 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\n\n@@ -26,7 +26,7 @@ import androidx.annotation.NonNull;\n  * @see EmulatedServiceSettings\n  * @hide\n  */\n-public class FirebaseEmulator {\n+public final class FirebaseEmulator {\n \n   public final String name;\n \n"}}, {"oid": "7f173e07f0e30fe1f92c777b01d0cf36d4ff8eca", "url": "https://github.com/firebase/firebase-android-sdk/commit/7f173e07f0e30fe1f92c777b01d0cf36d4ff8eca", "message": "Update firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\n\nCo-authored-by: Vladimir Kryachko <vkryachko@google.com>", "committedDate": "2020-06-19T13:39:59Z", "type": "commit"}, {"oid": "6d1e1797cba7e422fe8ed32ca3792081af774ea1", "url": "https://github.com/firebase/firebase-android-sdk/commit/6d1e1797cba7e422fe8ed32ca3792081af774ea1", "message": "Update firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java\n\nCo-authored-by: Vladimir Kryachko <vkryachko@google.com>", "committedDate": "2020-06-19T13:40:08Z", "type": "commit"}, {"oid": "2d67b78c97b929b928f7c435e878076fe6825fb8", "url": "https://github.com/firebase/firebase-android-sdk/commit/2d67b78c97b929b928f7c435e878076fe6825fb8", "message": "Update firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java\n\nCo-authored-by: Vladimir Kryachko <vkryachko@google.com>", "committedDate": "2020-06-19T13:40:19Z", "type": "commit"}, {"oid": "8a51a73ccdeec27e5fac2d50207899d586cc18e1", "url": "https://github.com/firebase/firebase-android-sdk/commit/8a51a73ccdeec27e5fac2d50207899d586cc18e1", "message": "Final review nits", "committedDate": "2020-06-19T13:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1Mjg2NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442852865", "bodyText": "same here pls :)", "author": "vkryachko", "createdAt": "2020-06-19T13:51:33Z", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public final class EmulatedServiceSettings {\n+\n+  public final String host;\n+  public final int port;", "originalCommit": "8a51a73ccdeec27e5fac2d50207899d586cc18e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b072f545e8bf7b23b58bbd19d58749bcd8d4516d", "chunk": "diff --git a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\nindex 2876b5cc..5acd04e9 100644\n--- a/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\n+++ b/firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java\n\n@@ -26,11 +26,19 @@ import androidx.annotation.NonNull;\n  */\n public final class EmulatedServiceSettings {\n \n-  public final String host;\n-  public final int port;\n+  private final String host;\n+  private final int port;\n \n   public EmulatedServiceSettings(@NonNull String host, int port) {\n     this.host = host;\n     this.port = port;\n   }\n+\n+  public String getHost() {\n+    return host;\n+  }\n+\n+  public int getPort() {\n+    return port;\n+  }\n }\n"}}, {"oid": "b072f545e8bf7b23b58bbd19d58749bcd8d4516d", "url": "https://github.com/firebase/firebase-android-sdk/commit/b072f545e8bf7b23b58bbd19d58749bcd8d4516d", "message": "One more getter", "committedDate": "2020-06-19T13:59:36Z", "type": "commit"}]}