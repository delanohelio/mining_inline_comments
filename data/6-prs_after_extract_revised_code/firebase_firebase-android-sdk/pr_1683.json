{"pr_number": 1683, "pr_title": "support decode array token", "pr_createdAt": "2020-06-18T15:40:58Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1683", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwNjY0Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442406646", "bodyText": "if the first element is null, it will fail.", "author": "James201311", "createdAt": "2020-06-18T18:00:56Z", "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -50,26 +53,115 @@\n   private <T> T decode(TypeToken<T> typeToken) throws IOException {\n     if (typeToken instanceof TypeToken.ClassToken) {\n       TypeToken.ClassToken<T> classToken = (TypeToken.ClassToken<T>) typeToken;\n-      CreationContextImpl creationContext = decodeObject(classToken);\n-      @SuppressWarnings(\"unchecked\")\n-      // Safe, because typeToken and TypeCreator always have same type parameter\n-      TypeCreator<T> creator = (TypeCreator<T>) typeCreators.get(classToken);\n-      if (creator == null)\n-        throw new IllegalArgumentException(\n-            \"TypeCreator of \" + classToken.getRawType() + \" is not register.\");\n-      return (T) creator.create(creationContext);\n-\n+      return decodeClassToken(classToken);\n     } else if (typeToken instanceof TypeToken.ArrayToken) {\n-      // TODO: Change typeParameter T in ArrayToken<T> to represent component type.\n-      /**\n-       * reader.beginArray(); List<T> l = new LinkedList<>(); while reader.hasNext: T val =\n-       * decode(arrayToken.getComponentType()); l.add(val); reader.endArray(); return l.toArray();\n-       */\n+      TypeToken.ArrayToken<T> arrayToken = (TypeToken.ArrayToken<T>) typeToken;\n+      return (T) decodeArrayToken(arrayToken);\n+    }\n+    return null;\n+  }\n+\n+  private <T> T decodeClassToken(TypeToken.ClassToken<T> classToken) throws IOException {\n+    if (classToken.getRawType().isPrimitive()) {\n+      return decodePrimitive(classToken);\n+    } else if (isSingleValue(classToken)) {\n+      return decodeSingleValue(classToken);\n+    } else {\n+      return decodeObject(classToken);\n+    }\n+  }\n+\n+  private <T, E> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<E> componentTypeToken = (TypeToken<E>) arrayToken.getComponentType();\n+    List<E> list = new ArrayList<>();\n+    reader.beginArray();\n+    while (reader.hasNext()) {\n+      list.add(decode(componentTypeToken));\n+    }\n+    reader.endArray();\n+    return convertGenericListToArray(list, arrayToken);\n+  }\n+\n+  private static <T, E> T convertGenericListToArray(\n+      List<E> list, TypeToken.ArrayToken<T> arrayToken) {\n+    if (list.size() == 0) return null;\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<E> componentTypeToken = (TypeToken<E>) arrayToken.getComponentType();\n+    if (componentTypeToken instanceof TypeToken.ClassToken) {\n+      TypeToken.ClassToken<E> componentClassToken = (TypeToken.ClassToken<E>) componentTypeToken;\n+      Class<E> componentClass = componentClassToken.getRawType();\n+      if (componentClassToken.getRawType().isPrimitive()) {\n+        return convertGenericListToPrimitiveArray(list, componentClass, arrayToken);\n+      }\n+    }\n+    @SuppressWarnings(\"unchecked\") // Safe, list is not empty\n+    E[] arr = (E[]) Array.newInstance(list.get(0).getClass(), list.size());", "originalCommit": "0e23ad603ec5b5cf53fec38979f80951541b3f78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f2d76516471e7829cbb574f0720d899896eae3a", "chunk": "diff --git a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\nindex decff03d..71e2fad1 100644\n--- a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\n+++ b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\n\n@@ -85,18 +85,13 @@ public class JsonDataDecoderBuilderContext implements DataDecoder {\n \n   private static <T, E> T convertGenericListToArray(\n       List<E> list, TypeToken.ArrayToken<T> arrayToken) {\n-    if (list.size() == 0) return null;\n     @SuppressWarnings(\"unchecked\")\n     TypeToken<E> componentTypeToken = (TypeToken<E>) arrayToken.getComponentType();\n-    if (componentTypeToken instanceof TypeToken.ClassToken) {\n-      TypeToken.ClassToken<E> componentClassToken = (TypeToken.ClassToken<E>) componentTypeToken;\n-      Class<E> componentClass = componentClassToken.getRawType();\n-      if (componentClassToken.getRawType().isPrimitive()) {\n-        return convertGenericListToPrimitiveArray(list, componentClass, arrayToken);\n-      }\n+    if (componentTypeToken.getRawType().isPrimitive()) {\n+      return convertGenericListToPrimitiveArray(list, componentTypeToken.getRawType(), arrayToken);\n     }\n     @SuppressWarnings(\"unchecked\") // Safe, list is not empty\n-    E[] arr = (E[]) Array.newInstance(list.get(0).getClass(), list.size());\n+    E[] arr = (E[]) Array.newInstance(componentTypeToken.getRawType(), list.size());\n     @SuppressWarnings(\"unchecked\") // Safe, because T == E[]\n     T t = (T) list.toArray(arr);\n     return t;\n"}}, {"oid": "6bee6a7b525741574df0293d1237aa1c786b71cc", "url": "https://github.com/firebase/firebase-android-sdk/commit/6bee6a7b525741574df0293d1237aa1c786b71cc", "message": "support decode array token", "committedDate": "2020-06-19T14:45:06Z", "type": "commit"}, {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a", "url": "https://github.com/firebase/firebase-android-sdk/commit/7f2d76516471e7829cbb574f0720d899896eae3a", "message": "getting rawType from typeToken", "committedDate": "2020-06-19T15:07:44Z", "type": "commit"}, {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a", "url": "https://github.com/firebase/firebase-android-sdk/commit/7f2d76516471e7829cbb574f0720d899896eae3a", "message": "getting rawType from typeToken", "committedDate": "2020-06-19T15:07:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NjUzNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442946537", "bodyText": "nit: let's throw EncodingException here as this seems like an impossible branch.", "author": "vkryachko", "createdAt": "2020-06-19T16:49:29Z", "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -50,26 +53,110 @@\n   private <T> T decode(TypeToken<T> typeToken) throws IOException {\n     if (typeToken instanceof TypeToken.ClassToken) {\n       TypeToken.ClassToken<T> classToken = (TypeToken.ClassToken<T>) typeToken;\n-      CreationContextImpl creationContext = decodeObject(classToken);\n-      @SuppressWarnings(\"unchecked\")\n-      // Safe, because typeToken and TypeCreator always have same type parameter\n-      TypeCreator<T> creator = (TypeCreator<T>) typeCreators.get(classToken);\n-      if (creator == null)\n-        throw new IllegalArgumentException(\n-            \"TypeCreator of \" + classToken.getRawType() + \" is not register.\");\n-      return (T) creator.create(creationContext);\n-\n+      return decodeClassToken(classToken);\n     } else if (typeToken instanceof TypeToken.ArrayToken) {\n-      // TODO: Change typeParameter T in ArrayToken<T> to represent component type.\n-      /**\n-       * reader.beginArray(); List<T> l = new LinkedList<>(); while reader.hasNext: T val =\n-       * decode(arrayToken.getComponentType()); l.add(val); reader.endArray(); return l.toArray();\n-       */\n+      TypeToken.ArrayToken<T> arrayToken = (TypeToken.ArrayToken<T>) typeToken;\n+      return (T) decodeArrayToken(arrayToken);\n     }\n     return null;", "originalCommit": "7f2d76516471e7829cbb574f0720d899896eae3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a14cb4cc3177b6dcc01ad4a6b117f74a0558fc32", "chunk": "diff --git a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\nindex 71e2fad1..52c734e4 100644\n--- a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\n+++ b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\n\n@@ -71,10 +71,9 @@ public class JsonDataDecoderBuilderContext implements DataDecoder {\n     }\n   }\n \n-  private <T, E> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {\n-    @SuppressWarnings(\"unchecked\")\n-    TypeToken<E> componentTypeToken = (TypeToken<E>) arrayToken.getComponentType();\n-    List<E> list = new ArrayList<>();\n+  private <T> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {\n+    TypeToken<?> componentTypeToken = arrayToken.getComponentType();\n+    List<Object> list = new ArrayList<>();\n     reader.beginArray();\n     while (reader.hasNext()) {\n       list.add(decode(componentTypeToken));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MDQ5Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442950496", "bodyText": "how about?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(arr[0]).isEqualTo(\"a\");\n          \n          \n            \n                assertThat(arr[1]).isEqualTo(\"b\");\n          \n          \n            \n                assertThat(arr).isEqualTo(new String[] { \"a\", \"b\"});", "author": "vkryachko", "createdAt": "2020-06-19T16:58:40Z", "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java", "diffHunk": "@@ -330,4 +330,117 @@ public void singleValues_areDecodeCorrectly() throws IOException {\n     assertThat(singleValues.c).isEqualTo('c');\n     assertThat(singleValues.str).isEqualTo(\"str\");\n   }\n+\n+  static class ArrFoo {\n+    int i;\n+\n+    ArrFoo(int i) {\n+      this.i = i;\n+    }\n+  }\n+\n+  static class ArrFooObjectDecoder implements ObjectDecoder<ArrFoo> {\n+    @NonNull\n+    @Override\n+    public TypeCreator<ArrFoo> decode(@NonNull ObjectDecoderContext<ArrFoo> ctx) {\n+      FieldRef.Primitive<Integer> iField = ctx.decodeInteger(FieldDescriptor.of(\"i\"));\n+      return (creationCtx -> new ArrFoo(creationCtx.getInteger(iField)));\n+    }\n+  }\n+\n+  @Test\n+  public void arrayOfObjects_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    objectDecoders.put(ArrFoo.class, new ArrFooObjectDecoder());\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[{\\\"i\\\":0}, {\\\"i\\\":1}]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    ArrFoo[] arrFoo =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<ArrFoo[]>() {}));\n+    assertThat(arrFoo[0].i).isEqualTo(0);\n+    assertThat(arrFoo[1].i).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void arrayOfSingleValue_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[\\\"a\\\",\\\"b\\\"]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    String[] arr =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<String[]>() {}));\n+    assertThat(arr[0]).isEqualTo(\"a\");\n+    assertThat(arr[1]).isEqualTo(\"b\");", "originalCommit": "7f2d76516471e7829cbb574f0720d899896eae3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc16a340752e39eb5737d648eabde47ab611dd48", "chunk": "diff --git a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java\nindex 2d948bee..3a0ce611 100644\n--- a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java\n+++ b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java\n\n@@ -373,8 +373,7 @@ public class JsonDataDecoderBuilderContextTest {\n     InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n     String[] arr =\n         jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<String[]>() {}));\n-    assertThat(arr[0]).isEqualTo(\"a\");\n-    assertThat(arr[1]).isEqualTo(\"b\");\n+    assertThat(arr).isEqualTo(new String[] {\"a\", \"b\"});\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MDYxOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442950619", "bodyText": "same here and below.", "author": "vkryachko", "createdAt": "2020-06-19T16:58:57Z", "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java", "diffHunk": "@@ -330,4 +330,117 @@ public void singleValues_areDecodeCorrectly() throws IOException {\n     assertThat(singleValues.c).isEqualTo('c');\n     assertThat(singleValues.str).isEqualTo(\"str\");\n   }\n+\n+  static class ArrFoo {\n+    int i;\n+\n+    ArrFoo(int i) {\n+      this.i = i;\n+    }\n+  }\n+\n+  static class ArrFooObjectDecoder implements ObjectDecoder<ArrFoo> {\n+    @NonNull\n+    @Override\n+    public TypeCreator<ArrFoo> decode(@NonNull ObjectDecoderContext<ArrFoo> ctx) {\n+      FieldRef.Primitive<Integer> iField = ctx.decodeInteger(FieldDescriptor.of(\"i\"));\n+      return (creationCtx -> new ArrFoo(creationCtx.getInteger(iField)));\n+    }\n+  }\n+\n+  @Test\n+  public void arrayOfObjects_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    objectDecoders.put(ArrFoo.class, new ArrFooObjectDecoder());\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[{\\\"i\\\":0}, {\\\"i\\\":1}]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    ArrFoo[] arrFoo =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<ArrFoo[]>() {}));\n+    assertThat(arrFoo[0].i).isEqualTo(0);\n+    assertThat(arrFoo[1].i).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void arrayOfSingleValue_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[\\\"a\\\",\\\"b\\\"]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    String[] arr =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<String[]>() {}));\n+    assertThat(arr[0]).isEqualTo(\"a\");\n+    assertThat(arr[1]).isEqualTo(\"b\");\n+  }\n+\n+  @Test\n+  public void arrayOfPrimitive_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[0, 1]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    int[] arr = jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<int[]>() {}));\n+    assertThat(arr[0]).isEqualTo(0);\n+    assertThat(arr[1]).isEqualTo(1);", "originalCommit": "7f2d76516471e7829cbb574f0720d899896eae3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc16a340752e39eb5737d648eabde47ab611dd48", "chunk": "diff --git a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java\nindex 2d948bee..3a0ce611 100644\n--- a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java\n+++ b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java\n\n@@ -373,8 +373,7 @@ public class JsonDataDecoderBuilderContextTest {\n     InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n     String[] arr =\n         jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<String[]>() {}));\n-    assertThat(arr[0]).isEqualTo(\"a\");\n-    assertThat(arr[1]).isEqualTo(\"b\");\n+    assertThat(arr).isEqualTo(new String[] {\"a\", \"b\"});\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MTYyMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442951623", "bodyText": "What's the purpose of the E type parameter? can you use Object in TypeToken below instead?", "author": "vkryachko", "createdAt": "2020-06-19T17:01:08Z", "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -50,26 +53,110 @@\n   private <T> T decode(TypeToken<T> typeToken) throws IOException {\n     if (typeToken instanceof TypeToken.ClassToken) {\n       TypeToken.ClassToken<T> classToken = (TypeToken.ClassToken<T>) typeToken;\n-      CreationContextImpl creationContext = decodeObject(classToken);\n-      @SuppressWarnings(\"unchecked\")\n-      // Safe, because typeToken and TypeCreator always have same type parameter\n-      TypeCreator<T> creator = (TypeCreator<T>) typeCreators.get(classToken);\n-      if (creator == null)\n-        throw new IllegalArgumentException(\n-            \"TypeCreator of \" + classToken.getRawType() + \" is not register.\");\n-      return (T) creator.create(creationContext);\n-\n+      return decodeClassToken(classToken);\n     } else if (typeToken instanceof TypeToken.ArrayToken) {\n-      // TODO: Change typeParameter T in ArrayToken<T> to represent component type.\n-      /**\n-       * reader.beginArray(); List<T> l = new LinkedList<>(); while reader.hasNext: T val =\n-       * decode(arrayToken.getComponentType()); l.add(val); reader.endArray(); return l.toArray();\n-       */\n+      TypeToken.ArrayToken<T> arrayToken = (TypeToken.ArrayToken<T>) typeToken;\n+      return (T) decodeArrayToken(arrayToken);\n     }\n     return null;\n   }\n \n-  private <T> CreationContextImpl decodeObject(TypeToken.ClassToken<T> classToken)\n+  private <T> T decodeClassToken(TypeToken.ClassToken<T> classToken) throws IOException {\n+    if (classToken.getRawType().isPrimitive()) {\n+      return decodePrimitive(classToken);\n+    } else if (isSingleValue(classToken)) {\n+      return decodeSingleValue(classToken);\n+    } else {\n+      return decodeObject(classToken);\n+    }\n+  }\n+\n+  private <T, E> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {", "originalCommit": "7f2d76516471e7829cbb574f0720d899896eae3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NzkyMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442977923", "bodyText": "My initial thought was to align with convertGenericListToArray since convertGenericListToArray need E to create E[] generic array to assign value to its elements.", "author": "James201311", "createdAt": "2020-06-19T18:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MTYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3ODM0Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442978347", "bodyText": "But it's a generic method, maybe I don't need to align?", "author": "James201311", "createdAt": "2020-06-19T18:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MTYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a14cb4cc3177b6dcc01ad4a6b117f74a0558fc32", "chunk": "diff --git a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\nindex 71e2fad1..52c734e4 100644\n--- a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\n+++ b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java\n\n@@ -71,10 +71,9 @@ public class JsonDataDecoderBuilderContext implements DataDecoder {\n     }\n   }\n \n-  private <T, E> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {\n-    @SuppressWarnings(\"unchecked\")\n-    TypeToken<E> componentTypeToken = (TypeToken<E>) arrayToken.getComponentType();\n-    List<E> list = new ArrayList<>();\n+  private <T> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {\n+    TypeToken<?> componentTypeToken = arrayToken.getComponentType();\n+    List<Object> list = new ArrayList<>();\n     reader.beginArray();\n     while (reader.hasNext()) {\n       list.add(decode(componentTypeToken));\n"}}, {"oid": "cc16a340752e39eb5737d648eabde47ab611dd48", "url": "https://github.com/firebase/firebase-android-sdk/commit/cc16a340752e39eb5737d648eabde47ab611dd48", "message": "addressed comments in test", "committedDate": "2020-06-19T18:16:57Z", "type": "commit"}, {"oid": "a14cb4cc3177b6dcc01ad4a6b117f74a0558fc32", "url": "https://github.com/firebase/firebase-android-sdk/commit/a14cb4cc3177b6dcc01ad4a6b117f74a0558fc32", "message": "remove <E> from decodeArray", "committedDate": "2020-06-19T18:17:30Z", "type": "commit"}, {"oid": "c4e6e9d0b89de7bba5cacd9a006683aedc9b1406", "url": "https://github.com/firebase/firebase-android-sdk/commit/c4e6e9d0b89de7bba5cacd9a006683aedc9b1406", "message": "throw encoding exception for unknown typeToken", "committedDate": "2020-06-19T18:27:49Z", "type": "commit"}, {"oid": "005298e5df14187c1a3caafd8ed57d8f5ba1fac4", "url": "https://github.com/firebase/firebase-android-sdk/commit/005298e5df14187c1a3caafd8ed57d8f5ba1fac4", "message": "address comment", "committedDate": "2020-06-19T19:34:04Z", "type": "commit"}]}