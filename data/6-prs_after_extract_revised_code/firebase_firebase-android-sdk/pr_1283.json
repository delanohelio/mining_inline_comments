{"pr_number": 1283, "pr_title": "Add a session limit to Crashlytics Firelog", "pr_createdAt": "2020-02-26T22:27:17Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1283", "timeline": [{"oid": "efa280a28f8ac5f51555596a7775e8dd56163683", "url": "https://github.com/firebase/firebase-android-sdk/commit/efa280a28f8ac5f51555596a7775e8dd56163683", "message": "Add a session limit to Crashlytics Firelog", "committedDate": "2020-02-27T02:22:06Z", "type": "forcePushed"}, {"oid": "291ad5a5e540c2c32442e52c0920348372e86419", "url": "https://github.com/firebase/firebase-android-sdk/commit/291ad5a5e540c2c32442e52c0920348372e86419", "message": "Add a session limit to Crashlytics Firelog", "committedDate": "2020-02-27T02:39:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NTQ0NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385355445", "bodyText": "We should add javadoc pertaining to the expected sort order here.", "author": "mrwillis21", "createdAt": "2020-02-27T20:32:13Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java", "diffHunk": "@@ -207,17 +207,53 @@ public void finalizeReports(String currentSessionId) {\n             TRANSFORM.reportToJson(report.withEvents(ImmutableList.from(events))));\n       }\n       recursiveDelete(sessionDirectory);\n+      capFinalizedReports();\n     }\n   }\n \n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<CrashlyticsReport> allReports = new ArrayList<>();\n-    final List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n-    for (File reportFile : priorityReports) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+  private void capFinalizedReports() {\n+    List<File> allReportFiles = getAllFinalizedReportFiles();\n+    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+      // Make a sublist of the reports that go over the size limit\n+      List<File> filesToRemove =\n+          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      for (File reportFile : filesToRemove) {\n+        reportFile.delete();\n+      }\n     }\n-    final List<File> reports = getAllFilesInDirectory(reportsDirectory);\n-    for (File reportFile : reports) {\n+  }\n+\n+  @NonNull\n+  private List<File> getAllFinalizedReportFiles() {\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n+    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n+    List<File> reports = getAllFilesInDirectory(reportsDirectory);\n+    Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n+    allReportsFiles.addAll(priorityReports);\n+    allReportsFiles.addAll(reports);\n+    return allReportsFiles;\n+  }\n+\n+  @NonNull\n+  private List<File> getFinalizedReportFiles(FilenameFilter filter) {\n+    final ArrayList<File> reportFiles = new ArrayList<>();\n+    List<File> priorityReports = getFilesInDirectory(priorityReportsDirectory, filter);\n+    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n+    List<File> reports = getFilesInDirectory(reportsDirectory, filter);\n+    Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    reportFiles.ensureCapacity(priorityReports.size() + reports.size());\n+    reportFiles.addAll(priorityReports);\n+    reportFiles.addAll(reports);\n+    return reportFiles;\n+  }\n+\n+  public List<CrashlyticsReport> loadFinalizedReports() {", "originalCommit": "291ad5a5e540c2c32442e52c0920348372e86419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NTk4Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385355986", "bodyText": "Also, please pull this method up above the private methods.", "author": "mrwillis21", "createdAt": "2020-02-27T20:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NTQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\nindex e09226f8..a3be8ac1 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n\n@@ -211,54 +215,54 @@ public class CrashlyticsReportPersistence {\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) Crashlytics Reports, sorted first from high to low\n+   *     priority, secondarily sorted from most recent to least\n+   */\n+  public List<CrashlyticsReport> loadFinalizedReports() {\n+    final List<File> allReportFiles = getAllFinalizedReportFiles();\n+    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n+    allReports.ensureCapacity(allReportFiles.size());\n+    for (File reportFile : getAllFinalizedReportFiles()) {\n+      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+    }\n+    return allReports;\n+  }\n+\n   private void capFinalizedReports() {\n     List<File> allReportFiles = getAllFinalizedReportFiles();\n-    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+    int reportCount = allReportFiles.size();\n+    if (reportCount > defaultMaxReportsToKeep) {\n       // Make a sublist of the reports that go over the size limit\n-      List<File> filesToRemove =\n-          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      List<File> filesToRemove = allReportFiles.subList(defaultMaxReportsToKeep, reportCount);\n       for (File reportFile : filesToRemove) {\n         reportFile.delete();\n       }\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) files for Crashlytics Reports, sorted first from high to\n+   *     low priority, secondarily sorted from most recent to least\n+   */\n   @NonNull\n   private List<File> getAllFinalizedReportFiles() {\n-    final ArrayList<File> allReportsFiles = new ArrayList<>();\n-    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    return sortAndCombineReportFiles(\n+        getAllFilesInDirectory(priorityReportsDirectory), getAllFilesInDirectory(reportsDirectory));\n+  }\n+\n+  @NonNull\n+  private static List<File> sortAndCombineReportFiles(\n+      List<File> priorityReports, List<File> reports) {\n     Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getAllFilesInDirectory(reportsDirectory);\n     Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n     allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n     allReportsFiles.addAll(priorityReports);\n     allReportsFiles.addAll(reports);\n     return allReportsFiles;\n   }\n \n-  @NonNull\n-  private List<File> getFinalizedReportFiles(FilenameFilter filter) {\n-    final ArrayList<File> reportFiles = new ArrayList<>();\n-    List<File> priorityReports = getFilesInDirectory(priorityReportsDirectory, filter);\n-    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getFilesInDirectory(reportsDirectory, filter);\n-    Collections.sort(reports, SESSION_ID_COMPARATOR);\n-    reportFiles.ensureCapacity(priorityReports.size() + reports.size());\n-    reportFiles.addAll(priorityReports);\n-    reportFiles.addAll(reports);\n-    return reportFiles;\n-  }\n-\n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<File> allReportFiles = getAllFinalizedReportFiles();\n-    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n-    allReports.ensureCapacity(allReportFiles.size());\n-    for (File reportFile : getAllFinalizedReportFiles()) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n-    }\n-    return allReports;\n-  }\n-\n   private static boolean isHighPriorityEventFile(String fileName) {\n     return fileName.startsWith(EVENT_FILE_NAME_PREFIX) && fileName.endsWith(PRIORITY_EVENT_SUFFIX);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NjM4MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385356381", "bodyText": "javadoc pertaining to expected sort order would be helpful here.", "author": "mrwillis21", "createdAt": "2020-02-27T20:34:20Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java", "diffHunk": "@@ -207,17 +207,53 @@ public void finalizeReports(String currentSessionId) {\n             TRANSFORM.reportToJson(report.withEvents(ImmutableList.from(events))));\n       }\n       recursiveDelete(sessionDirectory);\n+      capFinalizedReports();\n     }\n   }\n \n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<CrashlyticsReport> allReports = new ArrayList<>();\n-    final List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n-    for (File reportFile : priorityReports) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+  private void capFinalizedReports() {\n+    List<File> allReportFiles = getAllFinalizedReportFiles();\n+    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+      // Make a sublist of the reports that go over the size limit\n+      List<File> filesToRemove =\n+          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      for (File reportFile : filesToRemove) {\n+        reportFile.delete();\n+      }\n     }\n-    final List<File> reports = getAllFilesInDirectory(reportsDirectory);\n-    for (File reportFile : reports) {\n+  }\n+\n+  @NonNull\n+  private List<File> getAllFinalizedReportFiles() {", "originalCommit": "291ad5a5e540c2c32442e52c0920348372e86419", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\nindex e09226f8..a3be8ac1 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n\n@@ -211,54 +215,54 @@ public class CrashlyticsReportPersistence {\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) Crashlytics Reports, sorted first from high to low\n+   *     priority, secondarily sorted from most recent to least\n+   */\n+  public List<CrashlyticsReport> loadFinalizedReports() {\n+    final List<File> allReportFiles = getAllFinalizedReportFiles();\n+    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n+    allReports.ensureCapacity(allReportFiles.size());\n+    for (File reportFile : getAllFinalizedReportFiles()) {\n+      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+    }\n+    return allReports;\n+  }\n+\n   private void capFinalizedReports() {\n     List<File> allReportFiles = getAllFinalizedReportFiles();\n-    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+    int reportCount = allReportFiles.size();\n+    if (reportCount > defaultMaxReportsToKeep) {\n       // Make a sublist of the reports that go over the size limit\n-      List<File> filesToRemove =\n-          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      List<File> filesToRemove = allReportFiles.subList(defaultMaxReportsToKeep, reportCount);\n       for (File reportFile : filesToRemove) {\n         reportFile.delete();\n       }\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) files for Crashlytics Reports, sorted first from high to\n+   *     low priority, secondarily sorted from most recent to least\n+   */\n   @NonNull\n   private List<File> getAllFinalizedReportFiles() {\n-    final ArrayList<File> allReportsFiles = new ArrayList<>();\n-    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    return sortAndCombineReportFiles(\n+        getAllFilesInDirectory(priorityReportsDirectory), getAllFilesInDirectory(reportsDirectory));\n+  }\n+\n+  @NonNull\n+  private static List<File> sortAndCombineReportFiles(\n+      List<File> priorityReports, List<File> reports) {\n     Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getAllFilesInDirectory(reportsDirectory);\n     Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n     allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n     allReportsFiles.addAll(priorityReports);\n     allReportsFiles.addAll(reports);\n     return allReportsFiles;\n   }\n \n-  @NonNull\n-  private List<File> getFinalizedReportFiles(FilenameFilter filter) {\n-    final ArrayList<File> reportFiles = new ArrayList<>();\n-    List<File> priorityReports = getFilesInDirectory(priorityReportsDirectory, filter);\n-    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getFilesInDirectory(reportsDirectory, filter);\n-    Collections.sort(reports, SESSION_ID_COMPARATOR);\n-    reportFiles.ensureCapacity(priorityReports.size() + reports.size());\n-    reportFiles.addAll(priorityReports);\n-    reportFiles.addAll(reports);\n-    return reportFiles;\n-  }\n-\n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<File> allReportFiles = getAllFinalizedReportFiles();\n-    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n-    allReports.ensureCapacity(allReportFiles.size());\n-    for (File reportFile : getAllFinalizedReportFiles()) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n-    }\n-    return allReports;\n-  }\n-\n   private static boolean isHighPriorityEventFile(String fileName) {\n     return fileName.startsWith(EVENT_FILE_NAME_PREFIX) && fileName.endsWith(PRIORITY_EVENT_SUFFIX);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NjQ5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385356499", "bodyText": "As above, javadoc pertaining to the expected sort order would be helpful.", "author": "mrwillis21", "createdAt": "2020-02-27T20:34:36Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java", "diffHunk": "@@ -207,17 +207,53 @@ public void finalizeReports(String currentSessionId) {\n             TRANSFORM.reportToJson(report.withEvents(ImmutableList.from(events))));\n       }\n       recursiveDelete(sessionDirectory);\n+      capFinalizedReports();\n     }\n   }\n \n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<CrashlyticsReport> allReports = new ArrayList<>();\n-    final List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n-    for (File reportFile : priorityReports) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+  private void capFinalizedReports() {\n+    List<File> allReportFiles = getAllFinalizedReportFiles();\n+    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+      // Make a sublist of the reports that go over the size limit\n+      List<File> filesToRemove =\n+          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      for (File reportFile : filesToRemove) {\n+        reportFile.delete();\n+      }\n     }\n-    final List<File> reports = getAllFilesInDirectory(reportsDirectory);\n-    for (File reportFile : reports) {\n+  }\n+\n+  @NonNull\n+  private List<File> getAllFinalizedReportFiles() {\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n+    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n+    List<File> reports = getAllFilesInDirectory(reportsDirectory);\n+    Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n+    allReportsFiles.addAll(priorityReports);\n+    allReportsFiles.addAll(reports);\n+    return allReportsFiles;\n+  }\n+\n+  @NonNull\n+  private List<File> getFinalizedReportFiles(FilenameFilter filter) {", "originalCommit": "291ad5a5e540c2c32442e52c0920348372e86419", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\nindex e09226f8..a3be8ac1 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n\n@@ -211,54 +215,54 @@ public class CrashlyticsReportPersistence {\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) Crashlytics Reports, sorted first from high to low\n+   *     priority, secondarily sorted from most recent to least\n+   */\n+  public List<CrashlyticsReport> loadFinalizedReports() {\n+    final List<File> allReportFiles = getAllFinalizedReportFiles();\n+    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n+    allReports.ensureCapacity(allReportFiles.size());\n+    for (File reportFile : getAllFinalizedReportFiles()) {\n+      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+    }\n+    return allReports;\n+  }\n+\n   private void capFinalizedReports() {\n     List<File> allReportFiles = getAllFinalizedReportFiles();\n-    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+    int reportCount = allReportFiles.size();\n+    if (reportCount > defaultMaxReportsToKeep) {\n       // Make a sublist of the reports that go over the size limit\n-      List<File> filesToRemove =\n-          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      List<File> filesToRemove = allReportFiles.subList(defaultMaxReportsToKeep, reportCount);\n       for (File reportFile : filesToRemove) {\n         reportFile.delete();\n       }\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) files for Crashlytics Reports, sorted first from high to\n+   *     low priority, secondarily sorted from most recent to least\n+   */\n   @NonNull\n   private List<File> getAllFinalizedReportFiles() {\n-    final ArrayList<File> allReportsFiles = new ArrayList<>();\n-    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    return sortAndCombineReportFiles(\n+        getAllFilesInDirectory(priorityReportsDirectory), getAllFilesInDirectory(reportsDirectory));\n+  }\n+\n+  @NonNull\n+  private static List<File> sortAndCombineReportFiles(\n+      List<File> priorityReports, List<File> reports) {\n     Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getAllFilesInDirectory(reportsDirectory);\n     Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n     allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n     allReportsFiles.addAll(priorityReports);\n     allReportsFiles.addAll(reports);\n     return allReportsFiles;\n   }\n \n-  @NonNull\n-  private List<File> getFinalizedReportFiles(FilenameFilter filter) {\n-    final ArrayList<File> reportFiles = new ArrayList<>();\n-    List<File> priorityReports = getFilesInDirectory(priorityReportsDirectory, filter);\n-    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getFilesInDirectory(reportsDirectory, filter);\n-    Collections.sort(reports, SESSION_ID_COMPARATOR);\n-    reportFiles.ensureCapacity(priorityReports.size() + reports.size());\n-    reportFiles.addAll(priorityReports);\n-    reportFiles.addAll(reports);\n-    return reportFiles;\n-  }\n-\n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<File> allReportFiles = getAllFinalizedReportFiles();\n-    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n-    allReports.ensureCapacity(allReportFiles.size());\n-    for (File reportFile : getAllFinalizedReportFiles()) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n-    }\n-    return allReports;\n-  }\n-\n   private static boolean isHighPriorityEventFile(String fileName) {\n     return fileName.startsWith(EVENT_FILE_NAME_PREFIX) && fileName.endsWith(PRIORITY_EVENT_SUFFIX);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1ODA5Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385358093", "bodyText": "How would you feel about reducing the repeated code in these two methods by adding another helper function like so?\nprivate static List<File> getSortedReportFiles(List<File> priorityReports, List<File> reports) {\n    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n    Collections.sort(reports, SESSION_ID_COMPARATOR);\n    final ArrayList<File> allReportsFiles = new ArrayList<>();\n    allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n    allReportsFiles.addAll(priorityReports);\n    allReportsFiles.addAll(reports);\n    return allReportsFiles;\n}", "author": "mrwillis21", "createdAt": "2020-02-27T20:38:24Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java", "diffHunk": "@@ -207,17 +207,53 @@ public void finalizeReports(String currentSessionId) {\n             TRANSFORM.reportToJson(report.withEvents(ImmutableList.from(events))));\n       }\n       recursiveDelete(sessionDirectory);\n+      capFinalizedReports();\n     }\n   }\n \n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<CrashlyticsReport> allReports = new ArrayList<>();\n-    final List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n-    for (File reportFile : priorityReports) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+  private void capFinalizedReports() {\n+    List<File> allReportFiles = getAllFinalizedReportFiles();\n+    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+      // Make a sublist of the reports that go over the size limit\n+      List<File> filesToRemove =\n+          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      for (File reportFile : filesToRemove) {\n+        reportFile.delete();\n+      }\n     }\n-    final List<File> reports = getAllFilesInDirectory(reportsDirectory);\n-    for (File reportFile : reports) {\n+  }\n+\n+  @NonNull\n+  private List<File> getAllFinalizedReportFiles() {\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n+    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);", "originalCommit": "291ad5a5e540c2c32442e52c0920348372e86419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1Nzg0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385757848", "bodyText": "love it", "author": "jakeouellette", "createdAt": "2020-02-28T15:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1ODA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\nindex e09226f8..a3be8ac1 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n\n@@ -211,54 +215,54 @@ public class CrashlyticsReportPersistence {\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) Crashlytics Reports, sorted first from high to low\n+   *     priority, secondarily sorted from most recent to least\n+   */\n+  public List<CrashlyticsReport> loadFinalizedReports() {\n+    final List<File> allReportFiles = getAllFinalizedReportFiles();\n+    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n+    allReports.ensureCapacity(allReportFiles.size());\n+    for (File reportFile : getAllFinalizedReportFiles()) {\n+      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+    }\n+    return allReports;\n+  }\n+\n   private void capFinalizedReports() {\n     List<File> allReportFiles = getAllFinalizedReportFiles();\n-    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+    int reportCount = allReportFiles.size();\n+    if (reportCount > defaultMaxReportsToKeep) {\n       // Make a sublist of the reports that go over the size limit\n-      List<File> filesToRemove =\n-          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      List<File> filesToRemove = allReportFiles.subList(defaultMaxReportsToKeep, reportCount);\n       for (File reportFile : filesToRemove) {\n         reportFile.delete();\n       }\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) files for Crashlytics Reports, sorted first from high to\n+   *     low priority, secondarily sorted from most recent to least\n+   */\n   @NonNull\n   private List<File> getAllFinalizedReportFiles() {\n-    final ArrayList<File> allReportsFiles = new ArrayList<>();\n-    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    return sortAndCombineReportFiles(\n+        getAllFilesInDirectory(priorityReportsDirectory), getAllFilesInDirectory(reportsDirectory));\n+  }\n+\n+  @NonNull\n+  private static List<File> sortAndCombineReportFiles(\n+      List<File> priorityReports, List<File> reports) {\n     Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getAllFilesInDirectory(reportsDirectory);\n     Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n     allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n     allReportsFiles.addAll(priorityReports);\n     allReportsFiles.addAll(reports);\n     return allReportsFiles;\n   }\n \n-  @NonNull\n-  private List<File> getFinalizedReportFiles(FilenameFilter filter) {\n-    final ArrayList<File> reportFiles = new ArrayList<>();\n-    List<File> priorityReports = getFilesInDirectory(priorityReportsDirectory, filter);\n-    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getFilesInDirectory(reportsDirectory, filter);\n-    Collections.sort(reports, SESSION_ID_COMPARATOR);\n-    reportFiles.ensureCapacity(priorityReports.size() + reports.size());\n-    reportFiles.addAll(priorityReports);\n-    reportFiles.addAll(reports);\n-    return reportFiles;\n-  }\n-\n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<File> allReportFiles = getAllFinalizedReportFiles();\n-    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n-    allReports.ensureCapacity(allReportFiles.size());\n-    for (File reportFile : getAllFinalizedReportFiles()) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n-    }\n-    return allReports;\n-  }\n-\n   private static boolean isHighPriorityEventFile(String fileName) {\n     return fileName.startsWith(EVENT_FILE_NAME_PREFIX) && fileName.endsWith(PRIORITY_EVENT_SUFFIX);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2MTg5Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385361892", "bodyText": "Any chance we could extract a variable for size here, outside the if to clarify that the same value should be used in the check and in the subList call?", "author": "mrwillis21", "createdAt": "2020-02-27T20:46:46Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java", "diffHunk": "@@ -207,17 +207,53 @@ public void finalizeReports(String currentSessionId) {\n             TRANSFORM.reportToJson(report.withEvents(ImmutableList.from(events))));\n       }\n       recursiveDelete(sessionDirectory);\n+      capFinalizedReports();\n     }\n   }\n \n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<CrashlyticsReport> allReports = new ArrayList<>();\n-    final List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n-    for (File reportFile : priorityReports) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+  private void capFinalizedReports() {\n+    List<File> allReportFiles = getAllFinalizedReportFiles();\n+    if (allReportFiles.size() > defaultMaxReportsToKeep) {", "originalCommit": "291ad5a5e540c2c32442e52c0920348372e86419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NzgyMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1283#discussion_r385757821", "bodyText": "sure", "author": "jakeouellette", "createdAt": "2020-02-28T15:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2MTg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\nindex e09226f8..a3be8ac1 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java\n\n@@ -211,54 +215,54 @@ public class CrashlyticsReportPersistence {\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) Crashlytics Reports, sorted first from high to low\n+   *     priority, secondarily sorted from most recent to least\n+   */\n+  public List<CrashlyticsReport> loadFinalizedReports() {\n+    final List<File> allReportFiles = getAllFinalizedReportFiles();\n+    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n+    allReports.ensureCapacity(allReportFiles.size());\n+    for (File reportFile : getAllFinalizedReportFiles()) {\n+      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n+    }\n+    return allReports;\n+  }\n+\n   private void capFinalizedReports() {\n     List<File> allReportFiles = getAllFinalizedReportFiles();\n-    if (allReportFiles.size() > defaultMaxReportsToKeep) {\n+    int reportCount = allReportFiles.size();\n+    if (reportCount > defaultMaxReportsToKeep) {\n       // Make a sublist of the reports that go over the size limit\n-      List<File> filesToRemove =\n-          allReportFiles.subList(defaultMaxReportsToKeep, allReportFiles.size());\n+      List<File> filesToRemove = allReportFiles.subList(defaultMaxReportsToKeep, reportCount);\n       for (File reportFile : filesToRemove) {\n         reportFile.delete();\n       }\n     }\n   }\n \n+  /**\n+   * @return finalized (no longer changing) files for Crashlytics Reports, sorted first from high to\n+   *     low priority, secondarily sorted from most recent to least\n+   */\n   @NonNull\n   private List<File> getAllFinalizedReportFiles() {\n-    final ArrayList<File> allReportsFiles = new ArrayList<>();\n-    List<File> priorityReports = getAllFilesInDirectory(priorityReportsDirectory);\n+    return sortAndCombineReportFiles(\n+        getAllFilesInDirectory(priorityReportsDirectory), getAllFilesInDirectory(reportsDirectory));\n+  }\n+\n+  @NonNull\n+  private static List<File> sortAndCombineReportFiles(\n+      List<File> priorityReports, List<File> reports) {\n     Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getAllFilesInDirectory(reportsDirectory);\n     Collections.sort(reports, SESSION_ID_COMPARATOR);\n+    final ArrayList<File> allReportsFiles = new ArrayList<>();\n     allReportsFiles.ensureCapacity(priorityReports.size() + reports.size());\n     allReportsFiles.addAll(priorityReports);\n     allReportsFiles.addAll(reports);\n     return allReportsFiles;\n   }\n \n-  @NonNull\n-  private List<File> getFinalizedReportFiles(FilenameFilter filter) {\n-    final ArrayList<File> reportFiles = new ArrayList<>();\n-    List<File> priorityReports = getFilesInDirectory(priorityReportsDirectory, filter);\n-    Collections.sort(priorityReports, SESSION_ID_COMPARATOR);\n-    List<File> reports = getFilesInDirectory(reportsDirectory, filter);\n-    Collections.sort(reports, SESSION_ID_COMPARATOR);\n-    reportFiles.ensureCapacity(priorityReports.size() + reports.size());\n-    reportFiles.addAll(priorityReports);\n-    reportFiles.addAll(reports);\n-    return reportFiles;\n-  }\n-\n-  public List<CrashlyticsReport> loadFinalizedReports() {\n-    final List<File> allReportFiles = getAllFinalizedReportFiles();\n-    final ArrayList<CrashlyticsReport> allReports = new ArrayList<>();\n-    allReports.ensureCapacity(allReportFiles.size());\n-    for (File reportFile : getAllFinalizedReportFiles()) {\n-      allReports.add(TRANSFORM.reportFromJson(readTextFile(reportFile)));\n-    }\n-    return allReports;\n-  }\n-\n   private static boolean isHighPriorityEventFile(String fileName) {\n     return fileName.startsWith(EVENT_FILE_NAME_PREFIX) && fileName.endsWith(PRIORITY_EVENT_SUFFIX);\n   }\n"}}, {"oid": "5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "url": "https://github.com/firebase/firebase-android-sdk/commit/5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "message": "Add a session limit to Crashlytics Firelog", "committedDate": "2020-02-28T16:32:09Z", "type": "commit"}, {"oid": "5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "url": "https://github.com/firebase/firebase-android-sdk/commit/5b6bccdbd7fe521bb4d07f256bcab7757f62c8eb", "message": "Add a session limit to Crashlytics Firelog", "committedDate": "2020-02-28T16:32:09Z", "type": "forcePushed"}]}