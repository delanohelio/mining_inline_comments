{"pr_number": 1260, "pr_title": "Remove guava usage from firestore.", "pr_createdAt": "2020-02-20T16:06:27Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1260", "timeline": [{"oid": "1f12cea13c8d0f10dfc6c303f434b85f70041edd", "url": "https://github.com/firebase/firebase-android-sdk/commit/1f12cea13c8d0f10dfc6c303f434b85f70041edd", "message": "Replace guava Preconditions class", "committedDate": "2020-02-19T15:17:58Z", "type": "commit"}, {"oid": "374e2b25d4de3192a70f30154e8f04759b5dfe58", "url": "https://github.com/firebase/firebase-android-sdk/commit/374e2b25d4de3192a70f30154e8f04759b5dfe58", "message": "Replace guava Function and Splitter", "committedDate": "2020-02-19T15:57:03Z", "type": "commit"}, {"oid": "0cb59b8a531600f6dca1851ad3cb46bd64d7e51a", "url": "https://github.com/firebase/firebase-android-sdk/commit/0cb59b8a531600f6dca1851ad3cb46bd64d7e51a", "message": "Replace Lists.", "committedDate": "2020-02-20T15:44:58Z", "type": "commit"}, {"oid": "e327a46014f78f2e21b4e26a6424c87001999050", "url": "https://github.com/firebase/firebase-android-sdk/commit/e327a46014f78f2e21b4e26a6424c87001999050", "message": "Replace MoreObjects.", "committedDate": "2020-02-20T15:59:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzODEyOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382138129", "bodyText": "Please mention the source of this file somewhere (preferably a GitHub link to the Guava sources)", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:10:44Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static com.google.firebase.firestore.util.Strings.lenientFormat;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+public class Preconditions {", "originalCommit": "1f12cea13c8d0f10dfc6c303f434b85f70041edd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyOTM4Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382629383", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T15:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzODEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\nindex 4e8d13f3..5d714d86 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\n\n@@ -14,11 +14,87 @@\n \n package com.google.firebase.firestore.util;\n \n-import static com.google.firebase.firestore.util.Strings.lenientFormat;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+/**\n+ * This is an adaptation of\n+ * https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Preconditions.java.\n+ *\n+ * <p>Static convenience methods that help a method or constructor check whether it was invoked\n+ * correctly (that is, whether its <i>preconditions</i> were met).\n+ *\n+ * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception\n+ * of a specified type, which helps the method in which the exception was thrown communicate that\n+ * its caller has made a mistake. This allows constructs such as\n+ *\n+ * <pre>{@code\n+ * public static double sqrt(double value) {\n+ *   if (value < 0) {\n+ *     throw new IllegalArgumentException(\"input is negative: \" + value);\n+ *   }\n+ *   // calculate square root\n+ * }\n+ * }</pre>\n+ *\n+ * <p>to be replaced with the more compact\n+ *\n+ * <pre>{@code\n+ * public static double sqrt(double value) {\n+ *   checkArgument(value >= 0, \"input is negative: %s\", value);\n+ *   // calculate square root\n+ * }\n+ * }</pre>\n+ *\n+ * <p>so that a hypothetical bad caller of this method, such as:\n+ *\n+ * <pre>{@code\n+ * void exampleBadCaller() {\n+ *   double d = sqrt(-1.0);\n+ * }\n+ * }</pre>\n+ *\n+ * <p>would be flagged as having called {@code sqrt()} with an illegal argument.\n+ *\n+ * <h3>Performance</h3>\n+ *\n+ * <p>Avoid passing message arguments that are expensive to compute; your code will always compute\n+ * them, even though they usually won't be needed. If you have such arguments, use the conventional\n+ * if/throw idiom instead.\n+ *\n+ * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array\n+ * creation. However, the methods of this class have a large number of overloads that prevent such\n+ * allocations in many common cases.\n+ *\n+ * <p>The message string is not formatted unless the exception will be thrown, so the cost of the\n+ * string formatting itself should not be a concern.\n+ *\n+ * <p>As with any performance concerns, you should consider profiling your code (in a production\n+ * environment if possible) before spending a lot of effort on tweaking a particular element.\n+ *\n+ * <h3>Other types of preconditions</h3>\n+ *\n+ * <p>Not every type of precondition failure is supported by these methods. Continue to throw\n+ * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link\n+ * UnsupportedOperationException} in the situations they are intended for.\n+ *\n+ * <h3>Non-preconditions</h3>\n+ *\n+ * <p>It is of course possible to use the methods of this class to check for invalid conditions\n+ * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is\n+ * misleading to future readers of the code and of stack traces. See <a\n+ * href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional failures\n+ * explained</a> in the Guava User Guide for more advice.\n+ *\n+ * <h3>More information</h3>\n+ *\n+ * <p>See the Guava User Guide on <a\n+ * href=\"https://github.com/google/guava/wiki/PreconditionsExplained\">using {@code\n+ * Preconditions}</a>.\n+ *\n+ * @author Kevin Bourrillion\n+ * @since 2.0\n+ */\n public class Preconditions {\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzOTUwOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382139508", "bodyText": "If I read this comment correctly, we should be able to drop this method and replace its usage by String.format, reducing the size of this PR. The risk that String.format crashes seems minuscule given our usage.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:13:14Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Strings.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static java.util.logging.Level.WARNING;\n+\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+public class Strings {\n+  /**\n+   * Returns the given {@code template} string with each occurrence of {@code \"%s\"} replaced with\n+   * the corresponding argument value from {@code args}; or, if the placeholder and argument counts\n+   * do not match, returns a best-effort form of that string. Will not throw an exception under\n+   * normal conditions.\n+   *\n+   * <p><b>Note:</b> For most string-formatting needs, use {@link String#format String.format},\n+   * {@link java.io.PrintWriter#format PrintWriter.format}, and related methods. These support the\n+   * full range of <a\n+   * href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Formatter.html#syntax\">format\n+   * specifiers</a>, and alert you to usage errors by throwing {@link\n+   * java.util.IllegalFormatException}.\n+   *\n+   * <p>In certain cases, such as outputting debugging information or constructing a message to be\n+   * used for another unchecked exception, an exception during string formatting would serve little\n+   * purpose except to supplant the real information you were trying to provide. These are the cases\n+   * this method is made for; it instead generates a best-effort string with all supplied argument\n+   * values present. This method is also useful in environments such as GWT where {@code\n+   * String.format} is not available. As an example, method implementations of the {@link\n+   * Preconditions} class use this formatter, for both of the reasons just discussed.\n+   *\n+   * <p><b>Warning:</b> Only the exact two-character placeholder sequence {@code \"%s\"} is\n+   * recognized.\n+   *\n+   * @param template a string containing zero or more {@code \"%s\"} placeholder sequences. {@code\n+   *     null} is treated as the four-character string {@code \"null\"}.\n+   * @param args the arguments to be substituted into the message template. The first argument\n+   *     specified is substituted for the first occurrence of {@code \"%s\"} in the template, and so\n+   *     forth. A {@code null} argument is converted to the four-character string {@code \"null\"};\n+   *     non-null values are converted to strings using {@link Object#toString()}.\n+   * @since 25.1\n+   */\n+  public static String lenientFormat(@Nullable String template, @Nullable Object... args) {", "originalCommit": "1f12cea13c8d0f10dfc6c303f434b85f70041edd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyOTI5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382629299", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T15:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzOTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Strings.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Strings.java\ndeleted file mode 100644\nindex f1b32506..00000000\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Strings.java\n+++ /dev/null\n\n@@ -1,108 +0,0 @@\n-// Copyright 2020 Google LLC\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package com.google.firebase.firestore.util;\n-\n-import static java.util.logging.Level.WARNING;\n-\n-import java.util.logging.Logger;\n-import javax.annotation.Nullable;\n-\n-public class Strings {\n-  /**\n-   * Returns the given {@code template} string with each occurrence of {@code \"%s\"} replaced with\n-   * the corresponding argument value from {@code args}; or, if the placeholder and argument counts\n-   * do not match, returns a best-effort form of that string. Will not throw an exception under\n-   * normal conditions.\n-   *\n-   * <p><b>Note:</b> For most string-formatting needs, use {@link String#format String.format},\n-   * {@link java.io.PrintWriter#format PrintWriter.format}, and related methods. These support the\n-   * full range of <a\n-   * href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Formatter.html#syntax\">format\n-   * specifiers</a>, and alert you to usage errors by throwing {@link\n-   * java.util.IllegalFormatException}.\n-   *\n-   * <p>In certain cases, such as outputting debugging information or constructing a message to be\n-   * used for another unchecked exception, an exception during string formatting would serve little\n-   * purpose except to supplant the real information you were trying to provide. These are the cases\n-   * this method is made for; it instead generates a best-effort string with all supplied argument\n-   * values present. This method is also useful in environments such as GWT where {@code\n-   * String.format} is not available. As an example, method implementations of the {@link\n-   * Preconditions} class use this formatter, for both of the reasons just discussed.\n-   *\n-   * <p><b>Warning:</b> Only the exact two-character placeholder sequence {@code \"%s\"} is\n-   * recognized.\n-   *\n-   * @param template a string containing zero or more {@code \"%s\"} placeholder sequences. {@code\n-   *     null} is treated as the four-character string {@code \"null\"}.\n-   * @param args the arguments to be substituted into the message template. The first argument\n-   *     specified is substituted for the first occurrence of {@code \"%s\"} in the template, and so\n-   *     forth. A {@code null} argument is converted to the four-character string {@code \"null\"};\n-   *     non-null values are converted to strings using {@link Object#toString()}.\n-   * @since 25.1\n-   */\n-  public static String lenientFormat(@Nullable String template, @Nullable Object... args) {\n-    template = String.valueOf(template); // null -> \"null\"\n-\n-    if (args == null) {\n-      args = new Object[] {\"(Object[])null\"};\n-    } else {\n-      for (int i = 0; i < args.length; i++) {\n-        args[i] = lenientToString(args[i]);\n-      }\n-    }\n-\n-    // start substituting the arguments into the '%s' placeholders\n-    StringBuilder builder = new StringBuilder(template.length() + 16 * args.length);\n-    int templateStart = 0;\n-    int i = 0;\n-    while (i < args.length) {\n-      int placeholderStart = template.indexOf(\"%s\", templateStart);\n-      if (placeholderStart == -1) {\n-        break;\n-      }\n-      builder.append(template, templateStart, placeholderStart);\n-      builder.append(args[i++]);\n-      templateStart = placeholderStart + 2;\n-    }\n-    builder.append(template, templateStart, template.length());\n-\n-    // if we run out of placeholders, append the extra args in square braces\n-    if (i < args.length) {\n-      builder.append(\" [\");\n-      builder.append(args[i++]);\n-      while (i < args.length) {\n-        builder.append(\", \");\n-        builder.append(args[i++]);\n-      }\n-      builder.append(']');\n-    }\n-\n-    return builder.toString();\n-  }\n-\n-  private static String lenientToString(@Nullable Object o) {\n-    try {\n-      return String.valueOf(o);\n-    } catch (Exception e) {\n-      // Default toString() behavior - see Object.toString()\n-      String objectToString =\n-          o.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(o));\n-      // Logger is created inline with fixed name to avoid forcing Proguard to create another class.\n-      Logger.getLogger(\"com.google.common.base.Strings\")\n-          .log(WARNING, \"Exception during lenientFormat for \" + objectToString, e);\n-      return \"<\" + objectToString + \" threw \" + e.getClass().getName() + \">\";\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MTUwNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382141504", "bodyText": "Nit: You can just inline the call to new ArrayList, which would remove all those generic parameters.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:16:50Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java", "diffHunk": "@@ -461,11 +460,12 @@ public void registerPendingWritesTask(TaskCompletionSource<Void> userTask) {\n       return;\n     }\n \n-    if (pendingWritesCallbacks.containsKey(largestPendingBatchId)) {\n-      pendingWritesCallbacks.get(largestPendingBatchId).add(userTask);\n-    } else {\n-      pendingWritesCallbacks.put(largestPendingBatchId, Lists.newArrayList(userTask));\n+    if (!pendingWritesCallbacks.containsKey(largestPendingBatchId)) {\n+      List<TaskCompletionSource<Void>> tasks = new ArrayList();\n+      pendingWritesCallbacks.put(largestPendingBatchId, tasks);", "originalCommit": "0cb59b8a531600f6dca1851ad3cb46bd64d7e51a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMTc1Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382621753", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T14:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MTUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java\nindex 752fa4e6..604165ad 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java\n\n@@ -461,8 +461,7 @@ public class SyncEngine implements RemoteStore.RemoteStoreCallback {\n     }\n \n     if (!pendingWritesCallbacks.containsKey(largestPendingBatchId)) {\n-      List<TaskCompletionSource<Void>> tasks = new ArrayList();\n-      pendingWritesCallbacks.put(largestPendingBatchId, tasks);\n+      pendingWritesCallbacks.put(largestPendingBatchId, new ArrayList());\n     }\n \n     pendingWritesCallbacks.get(largestPendingBatchId).add(userTask);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDQ3MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382144470", "bodyText": "Nit: This is a private method. I don't think we need to do null-checks here. rightPath and leftPath would only be null if the Proto is invalid, in which case leftPath.split() would throw the same NPE that you are checking for manually.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:22:03Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/Values.java", "diffHunk": "@@ -264,8 +265,11 @@ private static int compareTimestamps(Timestamp left, Timestamp right) {\n   }\n \n   private static int compareReferences(String leftPath, String rightPath) {\n-    List<String> leftSegments = Splitter.on('/').splitToList(leftPath);\n-    List<String> rightSegments = Splitter.on('/').splitToList(rightPath);\n+    checkNotNull(leftPath);\n+    checkNotNull(rightPath);\n+    List<String> leftSegments = Lists.newArrayList(leftPath.split(\"/\"));", "originalCommit": "374e2b25d4de3192a70f30154e8f04759b5dfe58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMjgyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382332826", "bodyText": "For background: checkNotNull is only useful if you're retaining an argument in a method but not actually using it there. The best example is if you're taking a constructor argument and assigning it to an instance variable without using it. The idea is to force the NPE to happen at the point where the caller is apparent.", "author": "wilhuff", "createdAt": "2020-02-21T00:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Values.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Values.java\nindex db0f515b..9c1ac7d0 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Values.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Values.java\n\n@@ -265,19 +263,17 @@ public class Values {\n   }\n \n   private static int compareReferences(String leftPath, String rightPath) {\n-    checkNotNull(leftPath);\n-    checkNotNull(rightPath);\n-    List<String> leftSegments = Lists.newArrayList(leftPath.split(\"/\"));\n-    List<String> rightSegments = Lists.newArrayList(rightPath.split(\"/\"));\n+    String[] leftSegments = leftPath.split(\"/\", -1);\n+    String[] rightSegments = rightPath.split(\"/\", -1);\n \n-    int minLength = Math.min(leftSegments.size(), rightSegments.size());\n+    int minLength = Math.min(leftSegments.length, rightSegments.length);\n     for (int i = 0; i < minLength; i++) {\n-      int cmp = leftSegments.get(i).compareTo(rightSegments.get(i));\n+      int cmp = leftSegments[i].compareTo(rightSegments[i]);\n       if (cmp != 0) {\n         return cmp;\n       }\n     }\n-    return Util.compareIntegers(leftSegments.size(), rightSegments.size());\n+    return Util.compareIntegers(leftSegments.length, rightSegments.length);\n   }\n \n   private static int compareGeoPoints(LatLng left, LatLng right) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDg4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382144882", "bodyText": "Consider copying the class JavaDoc.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:22:49Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static com.google.firebase.firestore.util.Strings.lenientFormat;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+", "originalCommit": "e327a46014f78f2e21b4e26a6424c87001999050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyNjk0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382626948", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T14:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\nindex 4e8d13f3..5d714d86 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\n\n@@ -14,11 +14,87 @@\n \n package com.google.firebase.firestore.util;\n \n-import static com.google.firebase.firestore.util.Strings.lenientFormat;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+/**\n+ * This is an adaptation of\n+ * https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Preconditions.java.\n+ *\n+ * <p>Static convenience methods that help a method or constructor check whether it was invoked\n+ * correctly (that is, whether its <i>preconditions</i> were met).\n+ *\n+ * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception\n+ * of a specified type, which helps the method in which the exception was thrown communicate that\n+ * its caller has made a mistake. This allows constructs such as\n+ *\n+ * <pre>{@code\n+ * public static double sqrt(double value) {\n+ *   if (value < 0) {\n+ *     throw new IllegalArgumentException(\"input is negative: \" + value);\n+ *   }\n+ *   // calculate square root\n+ * }\n+ * }</pre>\n+ *\n+ * <p>to be replaced with the more compact\n+ *\n+ * <pre>{@code\n+ * public static double sqrt(double value) {\n+ *   checkArgument(value >= 0, \"input is negative: %s\", value);\n+ *   // calculate square root\n+ * }\n+ * }</pre>\n+ *\n+ * <p>so that a hypothetical bad caller of this method, such as:\n+ *\n+ * <pre>{@code\n+ * void exampleBadCaller() {\n+ *   double d = sqrt(-1.0);\n+ * }\n+ * }</pre>\n+ *\n+ * <p>would be flagged as having called {@code sqrt()} with an illegal argument.\n+ *\n+ * <h3>Performance</h3>\n+ *\n+ * <p>Avoid passing message arguments that are expensive to compute; your code will always compute\n+ * them, even though they usually won't be needed. If you have such arguments, use the conventional\n+ * if/throw idiom instead.\n+ *\n+ * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array\n+ * creation. However, the methods of this class have a large number of overloads that prevent such\n+ * allocations in many common cases.\n+ *\n+ * <p>The message string is not formatted unless the exception will be thrown, so the cost of the\n+ * string formatting itself should not be a concern.\n+ *\n+ * <p>As with any performance concerns, you should consider profiling your code (in a production\n+ * environment if possible) before spending a lot of effort on tweaking a particular element.\n+ *\n+ * <h3>Other types of preconditions</h3>\n+ *\n+ * <p>Not every type of precondition failure is supported by these methods. Continue to throw\n+ * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link\n+ * UnsupportedOperationException} in the situations they are intended for.\n+ *\n+ * <h3>Non-preconditions</h3>\n+ *\n+ * <p>It is of course possible to use the methods of this class to check for invalid conditions\n+ * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is\n+ * misleading to future readers of the code and of stack traces. See <a\n+ * href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional failures\n+ * explained</a> in the Guava User Guide for more advice.\n+ *\n+ * <h3>More information</h3>\n+ *\n+ * <p>See the Guava User Guide on <a\n+ * href=\"https://github.com/google/guava/wiki/PreconditionsExplained\">using {@code\n+ * Preconditions}</a>.\n+ *\n+ * @author Kevin Bourrillion\n+ * @since 2.0\n+ */\n public class Preconditions {\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NTA3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382145074", "bodyText": "Please mention somewhere that this is a copy and link to its source.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:23:08Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Determines an output value based on an input value; a pre-Java-8 version of {@link\n+ * java.util.function.Function java.util.function.Function}.\n+ *\n+ * <p>See the Guava User Guide article on <a\n+ * href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code Function}</a>.\n+ *\n+ * <h3>For Java 8+ users</h3>\n+ *\n+ * <p>This interface is now a legacy type. Use {@code java.util.function.Function} (or the\n+ * appropriate primitive specialization such as {@code ToIntFunction}) instead whenever possible.\n+ * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions\n+ * or method references instead of classes, leaving your code easier to migrate in the future.\n+ *\n+ * <p>To use an existing function (say, named {@code function}) in a context where the <i>other\n+ * type</i> of function is expected, use the method reference {@code function::apply}. A future\n+ * version of {@code com.google.firebase.firestore.util.Function} will be made to <i>extend</i>\n+ * {@code java.util.function.Function}, making conversion code necessary only in one direction. At\n+ * that time, this interface will be officially discouraged.\n+ *\n+ * @author Kevin Bourrillion\n+ * @since 2.0\n+ */\n+public interface Function<F, T> {", "originalCommit": "374e2b25d4de3192a70f30154e8f04759b5dfe58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyNDU0NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382624545", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T14:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NTA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java\nindex ea1a512d..c395bdd8 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java\n\n@@ -14,11 +14,13 @@\n \n package com.google.firebase.firestore.util;\n \n-import com.google.errorprone.annotations.CanIgnoreReturnValue;\n import javax.annotation.Nullable;\n \n /**\n- * Determines an output value based on an input value; a pre-Java-8 version of {@link\n+ * This is a copy of\n+ * https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Function.java.\n+ *\n+ * <p>Determines an output value based on an input value; a pre-Java-8 version of {@link\n  * java.util.function.Function java.util.function.Function}.\n  *\n  * <p>See the Guava User Guide article on <a\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NzAxMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382147011", "bodyText": "Please replace the only usage of this class with a custom toString() implementation (as we have done in almost all other places of the code base).", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:26:41Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/MoreObjects.java", "diffHunk": "@@ -0,0 +1,358 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static com.google.firebase.firestore.util.Preconditions.checkNotNull;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import java.util.Arrays;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Helper functions that operate on any {@code Object}, and are not already provided in {@link\n+ * java.util.Objects}.\n+ *\n+ * <p>See the Guava User Guide on <a\n+ * href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing {@code Object}\n+ * methods with {@code MoreObjects}</a>.\n+ *\n+ * @author Laurence Gonsalves\n+ * @since 18.0 (since 2.0 as {@code Objects})\n+ */\n+public final class MoreObjects {", "originalCommit": "e327a46014f78f2e21b4e26a6424c87001999050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNTU5Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382635597", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T15:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NzAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/MoreObjects.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/MoreObjects.java\ndeleted file mode 100644\nindex 1dc7ef6e..00000000\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/MoreObjects.java\n+++ /dev/null\n\n@@ -1,358 +0,0 @@\n-// Copyright 2020 Google LLC\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package com.google.firebase.firestore.util;\n-\n-import static com.google.firebase.firestore.util.Preconditions.checkNotNull;\n-\n-import com.google.errorprone.annotations.CanIgnoreReturnValue;\n-import java.util.Arrays;\n-import javax.annotation.Nullable;\n-\n-/**\n- * Helper functions that operate on any {@code Object}, and are not already provided in {@link\n- * java.util.Objects}.\n- *\n- * <p>See the Guava User Guide on <a\n- * href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing {@code Object}\n- * methods with {@code MoreObjects}</a>.\n- *\n- * @author Laurence Gonsalves\n- * @since 18.0 (since 2.0 as {@code Objects})\n- */\n-public final class MoreObjects {\n-  /**\n-   * Creates an instance of {@link ToStringHelper}.\n-   *\n-   * <p>This is helpful for implementing {@link Object#toString()}. Specification by example:\n-   *\n-   * <pre>{@code\n-   * // Returns \"ClassName{}\"\n-   * MoreObjects.toStringHelper(this)\n-   *     .toString();\n-   *\n-   * // Returns \"ClassName{x=1}\"\n-   * MoreObjects.toStringHelper(this)\n-   *     .add(\"x\", 1)\n-   *     .toString();\n-   *\n-   * // Returns \"MyObject{x=1}\"\n-   * MoreObjects.toStringHelper(\"MyObject\")\n-   *     .add(\"x\", 1)\n-   *     .toString();\n-   *\n-   * // Returns \"ClassName{x=1, y=foo}\"\n-   * MoreObjects.toStringHelper(this)\n-   *     .add(\"x\", 1)\n-   *     .add(\"y\", \"foo\")\n-   *     .toString();\n-   *\n-   * // Returns \"ClassName{x=1}\"\n-   * MoreObjects.toStringHelper(this)\n-   *     .omitNullValues()\n-   *     .add(\"x\", 1)\n-   *     .add(\"y\", null)\n-   *     .toString();\n-   * }</pre>\n-   *\n-   * <p>Note that in GWT, class names are often obfuscated.\n-   *\n-   * @param self the object to generate the string for (typically {@code this}), used only for its\n-   *     class name\n-   * @since 18.0 (since 2.0 as {@code Objects.toStringHelper()}).\n-   */\n-  public static ToStringHelper toStringHelper(Object self) {\n-    return new ToStringHelper(self.getClass().getSimpleName());\n-  }\n-\n-  /**\n-   * Creates an instance of {@link ToStringHelper} in the same manner as {@link\n-   * #toStringHelper(Object)}, but using the simple name of {@code clazz} instead of using an\n-   * instance's {@link Object#getClass()}.\n-   *\n-   * <p>Note that in GWT, class names are often obfuscated.\n-   *\n-   * @param clazz the {@link Class} of the instance\n-   * @since 18.0 (since 7.0 as {@code Objects.toStringHelper()}).\n-   */\n-  public static ToStringHelper toStringHelper(Class<?> clazz) {\n-    return new ToStringHelper(clazz.getSimpleName());\n-  }\n-\n-  /**\n-   * Creates an instance of {@link ToStringHelper} in the same manner as {@link\n-   * #toStringHelper(Object)}, but using {@code className} instead of using an instance's {@link\n-   * Object#getClass()}.\n-   *\n-   * @param className the name of the instance type\n-   * @since 18.0 (since 7.0 as {@code Objects.toStringHelper()}).\n-   */\n-  public static ToStringHelper toStringHelper(String className) {\n-    return new ToStringHelper(className);\n-  }\n-\n-  /**\n-   * Support class for {@link MoreObjects#toStringHelper}.\n-   *\n-   * @author Jason Lee\n-   * @since 18.0 (since 2.0 as {@code Objects.ToStringHelper}).\n-   */\n-  public static final class ToStringHelper {\n-    private final String className;\n-    private final ValueHolder holderHead = new ValueHolder();\n-    private ValueHolder holderTail = holderHead;\n-    private boolean omitNullValues = false;\n-\n-    /** Use {@link MoreObjects#toStringHelper(Object)} to create an instance. */\n-    private ToStringHelper(String className) {\n-      this.className = checkNotNull(className);\n-    }\n-\n-    /**\n-     * Configures the {@link ToStringHelper} so {@link #toString()} will ignore properties with null\n-     * value. The order of calling this method, relative to the {@code add()}/{@code addValue()}\n-     * methods, is not significant.\n-     *\n-     * @since 18.0 (since 12.0 as {@code Objects.ToStringHelper.omitNullValues()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper omitNullValues() {\n-      omitNullValues = true;\n-      return this;\n-    }\n-\n-    /**\n-     * Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}\n-     * is {@code null}, the string {@code \"null\"} is used, unless {@link #omitNullValues()} is\n-     * called, in which case this name/value pair will not be added.\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper add(String name, @Nullable Object value) {\n-      return addHolder(name, value);\n-    }\n-\n-    /**\n-     * Adds a name/value pair to the formatted output in {@code name=value} format.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper add(String name, boolean value) {\n-      return addHolder(name, String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds a name/value pair to the formatted output in {@code name=value} format.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper add(String name, char value) {\n-      return addHolder(name, String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds a name/value pair to the formatted output in {@code name=value} format.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper add(String name, double value) {\n-      return addHolder(name, String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds a name/value pair to the formatted output in {@code name=value} format.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper add(String name, float value) {\n-      return addHolder(name, String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds a name/value pair to the formatted output in {@code name=value} format.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper add(String name, int value) {\n-      return addHolder(name, String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds a name/value pair to the formatted output in {@code name=value} format.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper add(String name, long value) {\n-      return addHolder(name, String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds an unnamed value to the formatted output.\n-     *\n-     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a\n-     * readable name.\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper addValue(@Nullable Object value) {\n-      return addHolder(value);\n-    }\n-\n-    /**\n-     * Adds an unnamed value to the formatted output.\n-     *\n-     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a\n-     * readable name.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper addValue(boolean value) {\n-      return addHolder(String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds an unnamed value to the formatted output.\n-     *\n-     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a\n-     * readable name.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper addValue(char value) {\n-      return addHolder(String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds an unnamed value to the formatted output.\n-     *\n-     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a\n-     * readable name.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper addValue(double value) {\n-      return addHolder(String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds an unnamed value to the formatted output.\n-     *\n-     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a\n-     * readable name.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper addValue(float value) {\n-      return addHolder(String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds an unnamed value to the formatted output.\n-     *\n-     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a\n-     * readable name.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper addValue(int value) {\n-      return addHolder(String.valueOf(value));\n-    }\n-\n-    /**\n-     * Adds an unnamed value to the formatted output.\n-     *\n-     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a\n-     * readable name.\n-     *\n-     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).\n-     */\n-    @CanIgnoreReturnValue\n-    public ToStringHelper addValue(long value) {\n-      return addHolder(String.valueOf(value));\n-    }\n-\n-    /**\n-     * Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}.\n-     *\n-     * <p>After calling this method, you can keep adding more properties to later call toString()\n-     * again and get a more complete representation of the same object; but properties cannot be\n-     * removed, so this only allows limited reuse of the helper instance. The helper allows\n-     * duplication of properties (multiple name/value pairs with the same name can be added).\n-     */\n-    @Override\n-    public String toString() {\n-      // create a copy to keep it consistent in case value changes\n-      boolean omitNullValuesSnapshot = omitNullValues;\n-      String nextSeparator = \"\";\n-      StringBuilder builder = new StringBuilder(32).append(className).append('{');\n-      for (ValueHolder valueHolder = holderHead.next;\n-          valueHolder != null;\n-          valueHolder = valueHolder.next) {\n-        Object value = valueHolder.value;\n-        if (!omitNullValuesSnapshot || value != null) {\n-          builder.append(nextSeparator);\n-          nextSeparator = \", \";\n-\n-          if (valueHolder.name != null) {\n-            builder.append(valueHolder.name).append('=');\n-          }\n-          if (value != null && value.getClass().isArray()) {\n-            Object[] objectArray = {value};\n-            String arrayString = Arrays.deepToString(objectArray);\n-            builder.append(arrayString, 1, arrayString.length() - 1);\n-          } else {\n-            builder.append(value);\n-          }\n-        }\n-      }\n-      return builder.append('}').toString();\n-    }\n-\n-    private ValueHolder addHolder() {\n-      ValueHolder valueHolder = new ValueHolder();\n-      holderTail = holderTail.next = valueHolder;\n-      return valueHolder;\n-    }\n-\n-    private ToStringHelper addHolder(@Nullable Object value) {\n-      ValueHolder valueHolder = addHolder();\n-      valueHolder.value = value;\n-      return this;\n-    }\n-\n-    private ToStringHelper addHolder(String name, @Nullable Object value) {\n-      ValueHolder valueHolder = addHolder();\n-      valueHolder.value = value;\n-      valueHolder.name = checkNotNull(name);\n-      return this;\n-    }\n-\n-    private static final class ValueHolder {\n-      @Nullable String name;\n-      @Nullable Object value;\n-      @Nullable ValueHolder next;\n-    }\n-  }\n-\n-  private MoreObjects() {}\n-}\n"}}, {"oid": "ad09d488d082b21c53af1fca3214b31d3f72404b", "url": "https://github.com/firebase/firebase-android-sdk/commit/ad09d488d082b21c53af1fca3214b31d3f72404b", "message": "Address comments.", "committedDate": "2020-02-21T15:20:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzgzMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382737832", "bodyText": "Nit: This is a somewhat strange combination of StringBuilder and String.format. Do you mind using the pattern used here: \n  \n    \n      firebase-android-sdk/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java\n    \n    \n         Line 108\n      in\n      8409ac4\n    \n    \n    \n    \n\n        \n          \n           public String toString() { \n        \n    \n  \n\n\nPlease also take a look here:\nhttps://stackoverflow.com/questions/1532461/stringbuilder-vs-string-concatenation-in-tostring-in-java\nTL/DR: The Java compiler will generate the same code for you.", "author": "schmidt-sebastian", "createdAt": "2020-02-21T18:30:03Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java", "diffHunk": "@@ -221,12 +220,17 @@ public int hashCode() {\n   @Override\n   @NonNull\n   public String toString() {\n-    return MoreObjects.toStringHelper(this)\n-        .add(\"host\", host)\n-        .add(\"sslEnabled\", sslEnabled)\n-        .add(\"persistenceEnabled\", persistenceEnabled)\n-        .add(\"timestampsInSnapshotsEnabled\", timestampsInSnapshotsEnabled)\n-        .toString();\n+    StringBuilder builder = new StringBuilder(\"FirebaseFirestoreSettings{\");\n+\n+    builder.append(String.format(\"host=%s, \", host));\n+    builder.append(String.format(\"sslEnabled=%s, \", sslEnabled));\n+    builder.append(String.format(\"persistenceEnabled=%s, \", persistenceEnabled));\n+    builder.append(\n+        String.format(\"timestampsInSnapshotsEnabled=%s, \", timestampsInSnapshotsEnabled));\n+    builder.append(String.format(\"cacheSizeBytes=%s\", cacheSizeBytes));\n+", "originalCommit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2OTgxOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382769819", "bodyText": "Done. Thanks.", "author": "wu-hui", "createdAt": "2020-02-21T19:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3d6fceffc07fd3188b55cf8f241945719c851d0a", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java\nindex b6796ab6..cf18e200 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java\n\n@@ -220,17 +220,18 @@ public final class FirebaseFirestoreSettings {\n   @Override\n   @NonNull\n   public String toString() {\n-    StringBuilder builder = new StringBuilder(\"FirebaseFirestoreSettings{\");\n-\n-    builder.append(String.format(\"host=%s, \", host));\n-    builder.append(String.format(\"sslEnabled=%s, \", sslEnabled));\n-    builder.append(String.format(\"persistenceEnabled=%s, \", persistenceEnabled));\n-    builder.append(\n-        String.format(\"timestampsInSnapshotsEnabled=%s, \", timestampsInSnapshotsEnabled));\n-    builder.append(String.format(\"cacheSizeBytes=%s\", cacheSizeBytes));\n-\n-    builder.append(\"}\");\n-    return builder.toString();\n+    return \"FirebaseFirestoreSettings{\"\n+        + \"host=\"\n+        + host\n+        + \", sslEnabled=\"\n+        + sslEnabled\n+        + \", persistenceEnabled=\"\n+        + persistenceEnabled\n+        + \", timestampsInSnapshotsEnabled=\"\n+        + timestampsInSnapshotsEnabled\n+        + \", cacheSizeBytes=\"\n+        + cacheSizeBytes\n+        + \"}\";\n   }\n \n   /** Returns the host of the Cloud Firestore backend. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODM0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382738348", "bodyText": "Please move this outside the class JavaDoc, as you likely don't want this to be the summary of this API. I would recommend just moving this above in // style comment.", "author": "schmidt-sebastian", "createdAt": "2020-02-21T18:31:07Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java", "diffHunk": "@@ -17,7 +17,10 @@\n import javax.annotation.Nullable;\n \n /**\n- * Determines an output value based on an input value; a pre-Java-8 version of {@link\n+ * This is a copy of", "originalCommit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MDI0Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382770246", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T19:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "3d6fceffc07fd3188b55cf8f241945719c851d0a", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java\nindex c395bdd8..1f73d37c 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java\n\n@@ -16,11 +16,10 @@ package com.google.firebase.firestore.util;\n \n import javax.annotation.Nullable;\n \n+//  This is a copy of\n+//  https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Function.java.\n /**\n- * This is a copy of\n- * https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Function.java.\n- *\n- * <p>Determines an output value based on an input value; a pre-Java-8 version of {@link\n+ * Determines an output value based on an input value; a pre-Java-8 version of {@link\n  * java.util.function.Function java.util.function.Function}.\n  *\n  * <p>See the Guava User Guide article on <a\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODQ1OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382738459", "bodyText": "Same comment regarding the placement of this.", "author": "schmidt-sebastian", "createdAt": "2020-02-21T18:31:24Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java", "diffHunk": "@@ -14,11 +14,87 @@\n \n package com.google.firebase.firestore.util;\n \n-import static com.google.firebase.firestore.util.Strings.lenientFormat;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+/**\n+ * This is an adaptation of\n+ * https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Preconditions.java.", "originalCommit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MTgyMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382771823", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T19:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d6fceffc07fd3188b55cf8f241945719c851d0a", "chunk": "diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\nindex 5d714d86..475365bf 100644\n--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\n+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java\n\n@@ -17,11 +17,10 @@ package com.google.firebase.firestore.util;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+//  This is an adaptation of\n+//  https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Preconditions.java.\n /**\n- * This is an adaptation of\n- * https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Preconditions.java.\n- *\n- * <p>Static convenience methods that help a method or constructor check whether it was invoked\n+ * Static convenience methods that help a method or constructor check whether it was invoked\n  * correctly (that is, whether its <i>preconditions</i> were met).\n  *\n  * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception\n"}}, {"oid": "3d6fceffc07fd3188b55cf8f241945719c851d0a", "url": "https://github.com/firebase/firebase-android-sdk/commit/3d6fceffc07fd3188b55cf8f241945719c851d0a", "message": "Address comments 2.", "committedDate": "2020-02-21T19:45:28Z", "type": "commit"}]}