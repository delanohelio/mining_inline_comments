{"pr_number": 2071, "pr_title": "Add dynamic loading support to component discovery.", "pr_createdAt": "2020-10-16T18:11:08Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/2071", "timeline": [{"oid": "62a89723da956464865d30ea0834d44faa78a30a", "url": "https://github.com/firebase/firebase-android-sdk/commit/62a89723da956464865d30ea0834d44faa78a30a", "message": "Add dynamic loading support to component discovery.\n\n* `ComponentRuntime` will now store any registrar names that failed to\n  load due to `ClassNotFoundException` for future use.\n* `ComponentRuntime` will provide a new `ComponentLoader` component that\n  can be used by interested parties to trigger component discovery. This\n  will be used by the new \"dynamic-module-support\" sdk to trigger\n  discovery upon new module installation.", "committedDate": "2020-10-16T17:06:31Z", "type": "commit"}, {"oid": "7434d27df68b0b2dd6f05c95925a663cd51c870a", "url": "https://github.com/firebase/firebase-android-sdk/commit/7434d27df68b0b2dd6f05c95925a663cd51c870a", "message": "Add hide.", "committedDate": "2020-10-16T18:19:21Z", "type": "commit"}, {"oid": "c664a760281ee18dc258080f439a34f611ef7ba3", "url": "https://github.com/firebase/firebase-android-sdk/commit/c664a760281ee18dc258080f439a34f611ef7ba3", "message": "Copy input provider list.", "committedDate": "2020-10-16T19:11:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MTY3Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2071#discussion_r506691677", "bodyText": "Since this is the new preferred method, please add a comment.", "author": "rlazo", "createdAt": "2020-10-16T19:54:43Z", "path": "firebase-components/src/main/java/com/google/firebase/components/ComponentDiscovery.java", "diffHunk": "@@ -68,37 +70,62 @@\n     this.retriever = retriever;\n   }\n \n-  /** Returns the discovered {@link ComponentRegistrar}s. */\n+  /**\n+   * Returns the discovered {@link ComponentRegistrar}s.\n+   *\n+   * @deprecated Use {@link #discoverLazy()} instead.\n+   */\n+  @Deprecated\n   public List<ComponentRegistrar> discover() {\n-    return instantiate(retriever.retrieve(context));\n-  }\n-\n-  private static List<ComponentRegistrar> instantiate(List<String> registrarNames) {\n-    List<ComponentRegistrar> registrars = new ArrayList<>();\n-    for (String name : registrarNames) {\n+    List<ComponentRegistrar> result = new ArrayList<>();\n+    for (String registrarName : retriever.retrieve(context)) {\n       try {\n-        Class<?> loadedClass = Class.forName(name);\n-        if (!ComponentRegistrar.class.isAssignableFrom(loadedClass)) {\n-          Log.w(\n-              TAG,\n-              String.format(\"Class %s is not an instance of %s\", name, COMPONENT_SENTINEL_VALUE));\n-          continue;\n+        ComponentRegistrar registrar = instantiate(registrarName);\n+        if (registrar != null) {\n+          result.add(registrar);\n         }\n-        registrars.add((ComponentRegistrar) loadedClass.getDeclaredConstructor().newInstance());\n-      } catch (ClassNotFoundException e) {\n-        Log.w(TAG, String.format(\"Class %s is not an found.\", name), e);\n-      } catch (IllegalAccessException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s.\", name), e);\n-      } catch (InstantiationException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s.\", name), e);\n-      } catch (NoSuchMethodException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s\", name), e);\n-      } catch (InvocationTargetException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s\", name), e);\n+      } catch (InvalidRegistrarException ex) {\n+        Log.w(TAG, \"Invalid component registrar.\", ex);\n       }\n     }\n+    return result;\n+  }\n+\n+  public List<Provider<ComponentRegistrar>> discoverLazy() {", "originalCommit": "c664a760281ee18dc258080f439a34f611ef7ba3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f575ab4019d1f1621a0fd7135239539bd2e98f75", "chunk": "diff --git a/firebase-components/src/main/java/com/google/firebase/components/ComponentDiscovery.java b/firebase-components/src/main/java/com/google/firebase/components/ComponentDiscovery.java\nindex ca268a562..7a45f5c9d 100644\n--- a/firebase-components/src/main/java/com/google/firebase/components/ComponentDiscovery.java\n+++ b/firebase-components/src/main/java/com/google/firebase/components/ComponentDiscovery.java\n\n@@ -91,6 +91,21 @@ public final class ComponentDiscovery<T> {\n     return result;\n   }\n \n+  /**\n+   * Returns a list of candidate {@link ComponentRegistrar} {@link Provider}s.\n+   *\n+   * <p>The returned list contains lazy providers that are based on <strong>all</strong> discovered\n+   * registrar names. However, when called the providers behave in the following way:\n+   *\n+   * <ul>\n+   *   <li>If the registrar class is not found, it will return {@code null}. It's possible that this\n+   *       provider will return valid registrar at a later time.\n+   *   <li>If the registrar does not implement {@link ComponentRegistrar}, will throw {@link\n+   *       InvalidRegistrarException}.\n+   *   <li>If the registrar is a private class, will throw {@link InvalidRegistrarException}.\n+   *   <li>If the registrar has a private constructor, will throw {@link InvalidRegistrarException}.\n+   *   <li>If the registrar's constructor fails, will throw {@link InvalidRegistrarException}.\n+   */\n   public List<Provider<ComponentRegistrar>> discoverLazy() {\n     List<Provider<ComponentRegistrar>> result = new ArrayList<>();\n     for (String registrarName : retriever.retrieve(context)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MjgyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2071#discussion_r506692826", "bodyText": "How could an object that causes this exception get in the list of unprocessedRegistrarProviders", "author": "rlazo", "createdAt": "2020-10-16T19:57:20Z", "path": "firebase-components/src/main/java/com/google/firebase/components/ComponentRuntime.java", "diffHunk": "@@ -35,35 +38,86 @@\n  * <p>Does {@link Component} dependency resolution and provides access to resolved {@link\n  * Component}s via {@link #get(Class)} method.\n  */\n-public class ComponentRuntime extends AbstractComponentContainer {\n+public class ComponentRuntime extends AbstractComponentContainer implements ComponentLoader {\n   private static final Provider<Set<Object>> EMPTY_PROVIDER = Collections::emptySet;\n   private final Map<Component<?>, Provider<?>> components = new HashMap<>();\n   private final Map<Class<?>, Provider<?>> lazyInstanceMap = new HashMap<>();\n-  private final Map<Class<?>, Provider<Set<?>>> lazySetMap = new HashMap<>();\n+  private final Map<Class<?>, LazySet<?>> lazySetMap = new HashMap<>();\n+  private final List<Provider<ComponentRegistrar>> unprocessedRegistrarProviders;\n   private final EventBus eventBus;\n+  private Boolean eagerComponentsInitializedWith = null;\n \n   /**\n    * Creates an instance of {@link ComponentRuntime} for the provided {@link ComponentRegistrar}s\n    * and any additional components.\n+   *\n+   * @deprecated Use {@link #create(Executor, Iterable, Component[])} instead.\n    */\n+  @Deprecated\n   public ComponentRuntime(\n       Executor defaultEventExecutor,\n       Iterable<ComponentRegistrar> registrars,\n       Component<?>... additionalComponents) {\n+    this(defaultEventExecutor, toProviders(registrars), true, additionalComponents);\n+  }\n+\n+  /**\n+   * Creates an instance of {@link ComponentRuntime} for the provided {@link ComponentRegistrar}s\n+   * and any additional components.\n+   */\n+  public static ComponentRuntime create(\n+      Executor defaultEventExecutor,\n+      Iterable<Provider<ComponentRegistrar>> registrars,\n+      Component<?>... additionalComponents) {\n+    return new ComponentRuntime(defaultEventExecutor, registrars, true, additionalComponents);\n+  }\n+\n+  private ComponentRuntime(\n+      Executor defaultEventExecutor,\n+      Iterable<Provider<ComponentRegistrar>> registrars,\n+      boolean disambiguateConstructorOverload,\n+      Component<?>... additionalComponents) {\n     eventBus = new EventBus(defaultEventExecutor);\n+\n     List<Component<?>> componentsToAdd = new ArrayList<>();\n-    componentsToAdd.add(Component.of(eventBus, EventBus.class, Subscriber.class, Publisher.class));\n \n-    for (ComponentRegistrar registrar : registrars) {\n-      componentsToAdd.addAll(registrar.getComponents());\n-    }\n+    componentsToAdd.add(Component.of(eventBus, EventBus.class, Subscriber.class, Publisher.class));\n+    componentsToAdd.add(Component.of(this, ComponentLoader.class));\n     for (Component<?> additionalComponent : additionalComponents) {\n       if (additionalComponent != null) {\n         componentsToAdd.add(additionalComponent);\n       }\n     }\n \n-    CycleDetector.detect(componentsToAdd);\n+    unprocessedRegistrarProviders = iterableToList(registrars);\n+\n+    discoverComponents(componentsToAdd);\n+  }\n+\n+  private synchronized void discoverComponents(List<Component<?>> componentsToAdd) {\n+\n+    Iterator<Provider<ComponentRegistrar>> iterator = unprocessedRegistrarProviders.iterator();\n+    while (iterator.hasNext()) {\n+      Provider<ComponentRegistrar> provider = iterator.next();\n+      try {\n+        ComponentRegistrar registrar = provider.get();\n+        if (registrar != null) {\n+          componentsToAdd.addAll(registrar.getComponents());\n+          iterator.remove();\n+        }\n+      } catch (InvalidRegistrarException ex) {", "originalCommit": "c664a760281ee18dc258080f439a34f611ef7ba3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwNjIxMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/2071#discussion_r506706212", "bodyText": "The most common case is when we do the initial discovery, the class FooRegistrar is not found, so we keep the provider around for later use. Once module foo is loaded, we can suddenly load FooRegistrar but it's not a valid registrar(see discoverLazy's javadoc for why it can be invalid). wdyt?", "author": "vkryachko", "createdAt": "2020-10-16T20:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MjgyNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f575ab4019d1f1621a0fd7135239539bd2e98f75", "url": "https://github.com/firebase/firebase-android-sdk/commit/f575ab4019d1f1621a0fd7135239539bd2e98f75", "message": "Add javadoc to `discoverLazy()`.", "committedDate": "2020-10-16T20:25:18Z", "type": "commit"}]}