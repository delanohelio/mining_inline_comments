{"pr_number": 1233, "pr_title": "Add Crashlytics data capture class", "pr_createdAt": "2020-02-12T00:18:17Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1233", "timeline": [{"oid": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10", "url": "https://github.com/firebase/firebase-android-sdk/commit/c2f2b7da591f94c8b631f1e15909dbee5c0b8d10", "message": "Add Crashlytics data capture class\n\nHandles capturing appropriate data from the underlying OS, build\ninformation, and exception information and passing that data to\na pair of handler classes. This will allow callers to implement\nwhat should be done with the collected data separately.\n\nMoved AppData and BatteryState utility classes into the \"internal\"\npackage, since it was necessary to make them public anyway.", "committedDate": "2020-02-12T00:18:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzODMyNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378438324", "bodyText": "It seems like there should be some lifecycle that we should document. I mean, I assume that handlers can assume that a start comes before and end for the same event. But is there more to. Are there other assumptions about the order of events that we should make explicit?", "author": "bklimt", "createdAt": "2020-02-12T18:38:18Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "diffHunk": "@@ -0,0 +1,432 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import android.app.ActivityManager;\n+import android.app.ActivityManager.RunningAppProcessInfo;\n+import android.content.Context;\n+import android.os.Build;\n+import android.os.Build.VERSION;\n+import android.os.Environment;\n+import android.os.StatFs;\n+import com.google.firebase.crashlytics.BuildConfig;\n+import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n+import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * This class is responsible for capturing information from the system and exception objects,\n+ * parsing them, and passing them to handlers implemented by callers to use the captured information\n+ * as they see fit.\n+ */\n+public class CrashlyticsReportDataCapture {\n+\n+  /**\n+   * Defines methods for handling static report data gathered from the device, as well as system and\n+   * build properties.\n+   */\n+  public interface ReportDataHandler {\n+    void startReportDataCapture(\n+        String sdkVersion,\n+        String gmpAppId,\n+        String installationId,\n+        String buildVersion,\n+        String displayVersion);\n+\n+    void startSessionDataCapture(String generator);\n+\n+    void startSessionApplicationDataCapture(\n+        String packageName,\n+        String versionCode,\n+        String versionName,\n+        String installUuid); // TODO: Unity version\n+\n+    void endSessionApplicationDataCapture();\n+\n+    void startSessionOSDataCapture(String osRelease, String osCodeName, boolean isRooted);\n+\n+    void endSessionOSDataCapture();\n+\n+    void startSessionDeviceDataCapture(\n+        int arch,\n+        String model,\n+        int availableProcessors,\n+        long totalRam,\n+        long diskSpace,\n+        boolean isEmulator,\n+        int state,\n+        String manufacturer,\n+        String modelClass);\n+\n+    void endSessionDeviceDataCapture();\n+\n+    void endSessionDataCapture();\n+\n+    void endReportDataCapture();\n+  }\n+\n+  /** Defines methods for handling data for a given exception event. */", "originalCommit": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MTAwOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378571008", "bodyText": "New approach will eliminate this concern.", "author": "mrwillis21", "createdAt": "2020-02-12T23:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzODMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "f52d98ef8ef7e420ee74287c99532a52d5d3f178", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java\nindex 6c2ddcc2..fb4e2c2f 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java\n\n@@ -21,134 +21,45 @@ import android.os.Build;\n import android.os.Build.VERSION;\n import android.os.Environment;\n import android.os.StatFs;\n+import android.text.TextUtils;\n import com.google.firebase.crashlytics.BuildConfig;\n-import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Architecture;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Session.Event;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Session.Event.Application.Execution;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Session.Event.Application.Execution.BinaryImage;\n+import com.google.firebase.crashlytics.internal.model.ImmutableList;\n import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n \n /**\n  * This class is responsible for capturing information from the system and exception objects,\n- * parsing them, and passing them to handlers implemented by callers to use the captured information\n- * as they see fit.\n+ * parsing them, and returning canonical CrashlyticsReport and Event objects.\n  */\n public class CrashlyticsReportDataCapture {\n \n-  /**\n-   * Defines methods for handling static report data gathered from the device, as well as system and\n-   * build properties.\n-   */\n-  public interface ReportDataHandler {\n-    void startReportDataCapture(\n-        String sdkVersion,\n-        String gmpAppId,\n-        String installationId,\n-        String buildVersion,\n-        String displayVersion);\n-\n-    void startSessionDataCapture(String generator);\n-\n-    void startSessionApplicationDataCapture(\n-        String packageName,\n-        String versionCode,\n-        String versionName,\n-        String installUuid); // TODO: Unity version\n-\n-    void endSessionApplicationDataCapture();\n-\n-    void startSessionOSDataCapture(String osRelease, String osCodeName, boolean isRooted);\n-\n-    void endSessionOSDataCapture();\n-\n-    void startSessionDeviceDataCapture(\n-        int arch,\n-        String model,\n-        int availableProcessors,\n-        long totalRam,\n-        long diskSpace,\n-        boolean isEmulator,\n-        int state,\n-        String manufacturer,\n-        String modelClass);\n-\n-    void endSessionDeviceDataCapture();\n-\n-    void endSessionDataCapture();\n-\n-    void endReportDataCapture();\n-  }\n-\n-  /** Defines methods for handling data for a given exception event. */\n-  public interface EventDataHandler {\n-    void startEventDataCapture();\n-\n-    void startApplicationDataCapture(Boolean isBackground, int uiOrientation);\n-\n-    void startThreadListCapture();\n-\n-    void startThreadDataCapture(String name);\n-\n-    void startThreadFrameListCapture();\n-\n-    void startThreadFrameDataCapture(long pc, String symbol, String file, long offset);\n-\n-    void endThreadFrameDataCapture();\n-\n-    void endThreadFrameListCapture();\n-\n-    void endThreadDataCapture();\n-\n-    void endThreadListCapture();\n-\n-    void startExceptionDataCapture(String type, String reason, int overflowCount);\n-\n-    void startExceptionFramesListCapture();\n-\n-    void startExceptionFrameDataCapture(long pc, String symbol, String file, long offset);\n-\n-    void endExceptionFrameDataCapture();\n-\n-    void endExceptionFramesListCapture();\n-\n-    void startExceptionCauseCapture();\n-\n-    void endExceptionCauseCapture();\n-\n-    void endExceptionDataCapture();\n-\n-    void startSignalDataCapture(String name, String code, long address);\n-\n-    void endSignalDataCapture();\n-\n-    void startBinaryImagesListCapture();\n-\n-    void startBinaryImageDataCapture(long baseAddress, long size, String name, String uuid);\n-\n-    void endBinaryImageDataCapture();\n-\n-    void endBinaryImagesListCapture();\n-\n-    void endApplicationDataCapture();\n-\n-    void startDeviceDataCapture(\n-        double batteryLevel,\n-        int batteryVelocity,\n-        boolean proximityEnabled,\n-        int orientation,\n-        long usedRamBytes,\n-        long diskUsedBytes);\n-\n-    void endDeviceDataCapture();\n-\n-    void endEventDataCapture();\n-  }\n-\n   private static final String GENERATOR =\n       String.format(Locale.US, \"Crashlytics Android SDK/%s\", BuildConfig.VERSION_NAME);\n \n+  private static final int REPORT_ANDROID_PLATFORM = 4;\n+  private static final int SESSION_ANDROID_PLATFORM = 3;\n   private static final String SIGNAL_DEFAULT = \"0\";\n \n+  private static final Map<String, Integer> ARCHITECTURES_BY_NAME = new HashMap<>();\n+\n+  static {\n+    ARCHITECTURES_BY_NAME.put(\"armeabi\", Architecture.ARMV6);\n+    ARCHITECTURES_BY_NAME.put(\"armeabi-v7a\", Architecture.ARMV7);\n+    ARCHITECTURES_BY_NAME.put(\"arm64-v8a\", Architecture.ARM64);\n+    ARCHITECTURES_BY_NAME.put(\"x86\", Architecture.X86_32);\n+    ARCHITECTURES_BY_NAME.put(\"x86_64\", Architecture.X86_64);\n+  }\n+\n   private final Context context;\n   private final IdManager idManager;\n   private final AppData appData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzOTY0NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378439644", "bodyText": "I find this model extremely odd. Normally when you have a data structure, you have something like a struct with nested fields, and you have one method that creates or populates the object, and then you pass that object to methods that do something with it. But here, instead of creating the object, we call a handler for every field in the object that would be set. Why does this need to be so complicated? Can't we just populate a Report object and hand it back, and let the other code manipulate it like any other object?", "author": "bklimt", "createdAt": "2020-02-12T18:40:50Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "diffHunk": "@@ -0,0 +1,432 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import android.app.ActivityManager;\n+import android.app.ActivityManager.RunningAppProcessInfo;\n+import android.content.Context;\n+import android.os.Build;\n+import android.os.Build.VERSION;\n+import android.os.Environment;\n+import android.os.StatFs;\n+import com.google.firebase.crashlytics.BuildConfig;\n+import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n+import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * This class is responsible for capturing information from the system and exception objects,\n+ * parsing them, and passing them to handlers implemented by callers to use the captured information\n+ * as they see fit.\n+ */\n+public class CrashlyticsReportDataCapture {\n+\n+  /**\n+   * Defines methods for handling static report data gathered from the device, as well as system and\n+   * build properties.\n+   */\n+  public interface ReportDataHandler {", "originalCommit": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MDkzNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378570937", "bodyText": "Discussed this offline and decided to take a different approach.", "author": "mrwillis21", "createdAt": "2020-02-12T23:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzOTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "f52d98ef8ef7e420ee74287c99532a52d5d3f178", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java\nindex 6c2ddcc2..fb4e2c2f 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java\n\n@@ -21,134 +21,45 @@ import android.os.Build;\n import android.os.Build.VERSION;\n import android.os.Environment;\n import android.os.StatFs;\n+import android.text.TextUtils;\n import com.google.firebase.crashlytics.BuildConfig;\n-import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Architecture;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Session.Event;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Session.Event.Application.Execution;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport.Session.Event.Application.Execution.BinaryImage;\n+import com.google.firebase.crashlytics.internal.model.ImmutableList;\n import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n \n /**\n  * This class is responsible for capturing information from the system and exception objects,\n- * parsing them, and passing them to handlers implemented by callers to use the captured information\n- * as they see fit.\n+ * parsing them, and returning canonical CrashlyticsReport and Event objects.\n  */\n public class CrashlyticsReportDataCapture {\n \n-  /**\n-   * Defines methods for handling static report data gathered from the device, as well as system and\n-   * build properties.\n-   */\n-  public interface ReportDataHandler {\n-    void startReportDataCapture(\n-        String sdkVersion,\n-        String gmpAppId,\n-        String installationId,\n-        String buildVersion,\n-        String displayVersion);\n-\n-    void startSessionDataCapture(String generator);\n-\n-    void startSessionApplicationDataCapture(\n-        String packageName,\n-        String versionCode,\n-        String versionName,\n-        String installUuid); // TODO: Unity version\n-\n-    void endSessionApplicationDataCapture();\n-\n-    void startSessionOSDataCapture(String osRelease, String osCodeName, boolean isRooted);\n-\n-    void endSessionOSDataCapture();\n-\n-    void startSessionDeviceDataCapture(\n-        int arch,\n-        String model,\n-        int availableProcessors,\n-        long totalRam,\n-        long diskSpace,\n-        boolean isEmulator,\n-        int state,\n-        String manufacturer,\n-        String modelClass);\n-\n-    void endSessionDeviceDataCapture();\n-\n-    void endSessionDataCapture();\n-\n-    void endReportDataCapture();\n-  }\n-\n-  /** Defines methods for handling data for a given exception event. */\n-  public interface EventDataHandler {\n-    void startEventDataCapture();\n-\n-    void startApplicationDataCapture(Boolean isBackground, int uiOrientation);\n-\n-    void startThreadListCapture();\n-\n-    void startThreadDataCapture(String name);\n-\n-    void startThreadFrameListCapture();\n-\n-    void startThreadFrameDataCapture(long pc, String symbol, String file, long offset);\n-\n-    void endThreadFrameDataCapture();\n-\n-    void endThreadFrameListCapture();\n-\n-    void endThreadDataCapture();\n-\n-    void endThreadListCapture();\n-\n-    void startExceptionDataCapture(String type, String reason, int overflowCount);\n-\n-    void startExceptionFramesListCapture();\n-\n-    void startExceptionFrameDataCapture(long pc, String symbol, String file, long offset);\n-\n-    void endExceptionFrameDataCapture();\n-\n-    void endExceptionFramesListCapture();\n-\n-    void startExceptionCauseCapture();\n-\n-    void endExceptionCauseCapture();\n-\n-    void endExceptionDataCapture();\n-\n-    void startSignalDataCapture(String name, String code, long address);\n-\n-    void endSignalDataCapture();\n-\n-    void startBinaryImagesListCapture();\n-\n-    void startBinaryImageDataCapture(long baseAddress, long size, String name, String uuid);\n-\n-    void endBinaryImageDataCapture();\n-\n-    void endBinaryImagesListCapture();\n-\n-    void endApplicationDataCapture();\n-\n-    void startDeviceDataCapture(\n-        double batteryLevel,\n-        int batteryVelocity,\n-        boolean proximityEnabled,\n-        int orientation,\n-        long usedRamBytes,\n-        long diskUsedBytes);\n-\n-    void endDeviceDataCapture();\n-\n-    void endEventDataCapture();\n-  }\n-\n   private static final String GENERATOR =\n       String.format(Locale.US, \"Crashlytics Android SDK/%s\", BuildConfig.VERSION_NAME);\n \n+  private static final int REPORT_ANDROID_PLATFORM = 4;\n+  private static final int SESSION_ANDROID_PLATFORM = 3;\n   private static final String SIGNAL_DEFAULT = \"0\";\n \n+  private static final Map<String, Integer> ARCHITECTURES_BY_NAME = new HashMap<>();\n+\n+  static {\n+    ARCHITECTURES_BY_NAME.put(\"armeabi\", Architecture.ARMV6);\n+    ARCHITECTURES_BY_NAME.put(\"armeabi-v7a\", Architecture.ARMV7);\n+    ARCHITECTURES_BY_NAME.put(\"arm64-v8a\", Architecture.ARM64);\n+    ARCHITECTURES_BY_NAME.put(\"x86\", Architecture.X86_32);\n+    ARCHITECTURES_BY_NAME.put(\"x86_64\", Architecture.X86_64);\n+  }\n+\n   private final Context context;\n   private final IdManager idManager;\n   private final AppData appData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0MDY1MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378440650", "bodyText": "Android style is generally to use IntDefs instead of enums, right? Personally, I prefer enums, but thought I'd point it out. If it were part of the public API, it would be a bigger deal.", "author": "bklimt", "createdAt": "2020-02-12T18:42:50Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/Architecture.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.model;\n+\n+import android.os.Build;\n+import android.text.TextUtils;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public enum Architecture {", "originalCommit": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MDgxNw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378570817", "bodyText": "Hmm, I guess it depends on which camp you're in (perfmatters/enummatters). \ud83d\ude1d But in this case I think an IntDef actually makes more sense.", "author": "mrwillis21", "createdAt": "2020-02-12T23:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0MDY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "f52d98ef8ef7e420ee74287c99532a52d5d3f178", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/Architecture.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/Architecture.java\ndeleted file mode 100644\nindex 37434774..00000000\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/Architecture.java\n+++ /dev/null\n\n@@ -1,65 +0,0 @@\n-// Copyright 2020 Google LLC\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package com.google.firebase.crashlytics.internal.model;\n-\n-import android.os.Build;\n-import android.text.TextUtils;\n-import java.util.HashMap;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-public enum Architecture {\n-  ARMV6(5),\n-  ARMV7(6),\n-  ARM64(9),\n-  X86_32(0),\n-  X86_64(1),\n-  UNKNOWN(7);\n-\n-  private static final Map<String, Architecture> nameMapping = new HashMap<>();\n-\n-  static {\n-    nameMapping.put(\"armeabi\", ARMV6);\n-    nameMapping.put(\"armeabi-v7a\", ARMV7);\n-    nameMapping.put(\"arm64-v8a\", ARM64);\n-    nameMapping.put(\"x86\", X86_32);\n-    nameMapping.put(\"x86_64\", X86_64);\n-  }\n-\n-  public static Architecture getDeviceArchitecture() {\n-    final String primaryAbi = Build.CPU_ABI;\n-\n-    if (TextUtils.isEmpty(primaryAbi)) {\n-      return UNKNOWN;\n-    }\n-\n-    final Architecture arch = nameMapping.get(primaryAbi.toLowerCase(Locale.US));\n-    if (arch == null) {\n-      return UNKNOWN;\n-    }\n-\n-    return arch;\n-  }\n-\n-  private final int value;\n-\n-  Architecture(int value) {\n-    this.value = value;\n-  }\n-\n-  public int getValue() {\n-    return value;\n-  }\n-}\n"}}, {"oid": "f52d98ef8ef7e420ee74287c99532a52d5d3f178", "url": "https://github.com/firebase/firebase-android-sdk/commit/f52d98ef8ef7e420ee74287c99532a52d5d3f178", "message": "Add Crashlytics data capture class\n\nHandles capturing appropriate data from the underlying OS, build\ninformation, and exception information and constructing\nCrashlyticsReport and Event objects from it.\n\nMoved AppData and BatteryState utility classes into the \"internal\"\npackage, since it was necessary to make them public anyway.", "committedDate": "2020-02-12T23:57:27Z", "type": "commit"}, {"oid": "f52d98ef8ef7e420ee74287c99532a52d5d3f178", "url": "https://github.com/firebase/firebase-android-sdk/commit/f52d98ef8ef7e420ee74287c99532a52d5d3f178", "message": "Add Crashlytics data capture class\n\nHandles capturing appropriate data from the underlying OS, build\ninformation, and exception information and constructing\nCrashlyticsReport and Event objects from it.\n\nMoved AppData and BatteryState utility classes into the \"internal\"\npackage, since it was necessary to make them public anyway.", "committedDate": "2020-02-12T23:57:27Z", "type": "forcePushed"}, {"oid": "38309bc537f310e8abaf4905bbb7aafcbcf2efd8", "url": "https://github.com/firebase/firebase-android-sdk/commit/38309bc537f310e8abaf4905bbb7aafcbcf2efd8", "message": "Fix potentially flaky test assertion", "committedDate": "2020-02-13T00:16:37Z", "type": "commit"}]}