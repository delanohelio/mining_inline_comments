{"pr_number": 1606, "pr_title": "Changed TypeTokenContainer from interface to class", "pr_createdAt": "2020-05-31T18:26:43Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1606", "timeline": [{"oid": "543fab9acbef8f38b268403b8cfd8d1396bcaa26", "url": "https://github.com/firebase/firebase-android-sdk/commit/543fab9acbef8f38b268403b8cfd8d1396bcaa26", "message": "Changed TypeTokenContainer from interface to class", "committedDate": "2020-05-31T18:09:34Z", "type": "commit"}, {"oid": "7d07433a992506b7dfbfddc1f5401b428683ab3d", "url": "https://github.com/firebase/firebase-android-sdk/commit/7d07433a992506b7dfbfddc1f5401b428683ab3d", "message": "regenerate api information", "committedDate": "2020-05-31T18:38:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyNzU3Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433227573", "bodyText": "suggestion: Since TypeTokenContainer is immutable, let's have a singleton TypeTokenContainer .EMPTY instance that can be shared by all non-generic classes as opposed to allocating one each time.", "author": "vkryachko", "createdAt": "2020-06-01T13:17:27Z", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -118,7 +110,7 @@ private TypeToken() {}\n \n     private ClassToken(Class<T> token) {\n       this.rawType = token;\n-      this.typeArguments = null;\n+      this.typeArguments = new TypeTokenContainer(null);", "originalCommit": "7d07433a992506b7dfbfddc1f5401b428683ab3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6c5a6556e0b423395791de83b5789d265c03c4d", "chunk": "diff --git a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java\nindex a491ec065..9969c26ac 100644\n--- a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java\n+++ b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java\n\n@@ -108,9 +120,9 @@ public abstract class TypeToken<T> {\n     private final Class<T> rawType;\n     private final TypeTokenContainer typeArguments;\n \n-    private ClassToken(Class<T> token) {\n-      this.rawType = token;\n-      this.typeArguments = new TypeTokenContainer(null);\n+    private ClassToken(Class<T> rawType) {\n+      this.rawType = rawType;\n+      this.typeArguments = TypeTokenContainer.EMPTY;\n     }\n \n     private ClassToken(Class<T> rawType, TypeTokenContainer typeArguments) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNjc3OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433236778", "bodyText": "Consider moving the conversion logic Type->TypeToken into the TypeToken class itself, this would increase cohesion of this class and will not require making TypeToken#of(Type) non-private, effectively exposing its implementation details.", "author": "vkryachko", "createdAt": "2020-06-01T13:35:04Z", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {", "originalCommit": "7d07433a992506b7dfbfddc1f5401b428683ab3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODAwMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433238002", "bodyText": "Also might make sense to make the constructor public and class final.", "author": "vkryachko", "createdAt": "2020-06-01T13:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNjc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "d6c5a6556e0b423395791de83b5789d265c03c4d", "chunk": "diff --git a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\nindex 9dfb1a773..63bbe19e5 100644\n--- a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n+++ b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n\n@@ -15,33 +15,30 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-public class TypeTokenContainer {\n+public final class TypeTokenContainer {\n   private final TypeToken<?>[] typeTokens;\n \n-  TypeTokenContainer(@Nullable Type[] types) {\n-    TypeToken[] typeTokens;\n-    if (types == null) {\n-      typeTokens = new TypeToken[0];\n-    } else {\n-      typeTokens = new TypeToken[types.length];\n-      for (int i = 0; i < types.length; i++) {\n-        typeTokens[i] = TypeToken.of(types[i]);\n-      }\n-    }\n+  @NonNull public static final TypeTokenContainer EMPTY = new TypeTokenContainer();\n+\n+  private TypeTokenContainer() {\n+    typeTokens = new TypeToken[0];\n+  }\n+\n+  public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     this.typeTokens = typeTokens;\n   }\n \n   @NonNull\n   public <T> TypeToken<T> at(int index) {\n-    if (index >= typeTokens.length)\n-      throw new NullPointerException(\"No type token at index: \" + index);\n-    return (TypeToken<T>) typeTokens[index];\n+    if (index >= typeTokens.length || index < 0)\n+      throw new IllegalArgumentException(\"No type token at index: \" + index);\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n+    return typeToken;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODMwNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433238306", "bodyText": "I think IllegalArgumentException is more appropriate here.", "author": "vkryachko", "createdAt": "2020-06-01T13:37:44Z", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {\n+    TypeToken[] typeTokens;\n+    if (types == null) {\n+      typeTokens = new TypeToken[0];\n+    } else {\n+      typeTokens = new TypeToken[types.length];\n+      for (int i = 0; i < types.length; i++) {\n+        typeTokens[i] = TypeToken.of(types[i]);\n+      }\n+    }\n+    this.typeTokens = typeTokens;\n+  }\n+\n   @NonNull\n-  <T> TypeToken<T> at(int index);\n+  public <T> TypeToken<T> at(int index) {\n+    if (index >= typeTokens.length)\n+      throw new NullPointerException(\"No type token at index: \" + index);", "originalCommit": "7d07433a992506b7dfbfddc1f5401b428683ab3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6c5a6556e0b423395791de83b5789d265c03c4d", "chunk": "diff --git a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\nindex 9dfb1a773..63bbe19e5 100644\n--- a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n+++ b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n\n@@ -15,33 +15,30 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-public class TypeTokenContainer {\n+public final class TypeTokenContainer {\n   private final TypeToken<?>[] typeTokens;\n \n-  TypeTokenContainer(@Nullable Type[] types) {\n-    TypeToken[] typeTokens;\n-    if (types == null) {\n-      typeTokens = new TypeToken[0];\n-    } else {\n-      typeTokens = new TypeToken[types.length];\n-      for (int i = 0; i < types.length; i++) {\n-        typeTokens[i] = TypeToken.of(types[i]);\n-      }\n-    }\n+  @NonNull public static final TypeTokenContainer EMPTY = new TypeTokenContainer();\n+\n+  private TypeTokenContainer() {\n+    typeTokens = new TypeToken[0];\n+  }\n+\n+  public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     this.typeTokens = typeTokens;\n   }\n \n   @NonNull\n   public <T> TypeToken<T> at(int index) {\n-    if (index >= typeTokens.length)\n-      throw new NullPointerException(\"No type token at index: \" + index);\n-    return (TypeToken<T>) typeTokens[index];\n+    if (index >= typeTokens.length || index < 0)\n+      throw new IllegalArgumentException(\"No type token at index: \" + index);\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n+    return typeToken;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODY1NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433238654", "bodyText": "nit: what if the index is less than zero?", "author": "vkryachko", "createdAt": "2020-06-01T13:38:25Z", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {\n+    TypeToken[] typeTokens;\n+    if (types == null) {\n+      typeTokens = new TypeToken[0];\n+    } else {\n+      typeTokens = new TypeToken[types.length];\n+      for (int i = 0; i < types.length; i++) {\n+        typeTokens[i] = TypeToken.of(types[i]);\n+      }\n+    }\n+    this.typeTokens = typeTokens;\n+  }\n+\n   @NonNull\n-  <T> TypeToken<T> at(int index);\n+  public <T> TypeToken<T> at(int index) {\n+    if (index >= typeTokens.length)", "originalCommit": "7d07433a992506b7dfbfddc1f5401b428683ab3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6c5a6556e0b423395791de83b5789d265c03c4d", "chunk": "diff --git a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\nindex 9dfb1a773..63bbe19e5 100644\n--- a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n+++ b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n\n@@ -15,33 +15,30 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-public class TypeTokenContainer {\n+public final class TypeTokenContainer {\n   private final TypeToken<?>[] typeTokens;\n \n-  TypeTokenContainer(@Nullable Type[] types) {\n-    TypeToken[] typeTokens;\n-    if (types == null) {\n-      typeTokens = new TypeToken[0];\n-    } else {\n-      typeTokens = new TypeToken[types.length];\n-      for (int i = 0; i < types.length; i++) {\n-        typeTokens[i] = TypeToken.of(types[i]);\n-      }\n-    }\n+  @NonNull public static final TypeTokenContainer EMPTY = new TypeTokenContainer();\n+\n+  private TypeTokenContainer() {\n+    typeTokens = new TypeToken[0];\n+  }\n+\n+  public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     this.typeTokens = typeTokens;\n   }\n \n   @NonNull\n   public <T> TypeToken<T> at(int index) {\n-    if (index >= typeTokens.length)\n-      throw new NullPointerException(\"No type token at index: \" + index);\n-    return (TypeToken<T>) typeTokens[index];\n+    if (index >= typeTokens.length || index < 0)\n+      throw new IllegalArgumentException(\"No type token at index: \" + index);\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n+    return typeToken;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzOTY0OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433239649", "bodyText": "Doesn't this produce an unchecked cast warning? if so worth adding a @SuppressWarnings?", "author": "vkryachko", "createdAt": "2020-06-01T13:40:10Z", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {\n+    TypeToken[] typeTokens;\n+    if (types == null) {\n+      typeTokens = new TypeToken[0];\n+    } else {\n+      typeTokens = new TypeToken[types.length];\n+      for (int i = 0; i < types.length; i++) {\n+        typeTokens[i] = TypeToken.of(types[i]);\n+      }\n+    }\n+    this.typeTokens = typeTokens;\n+  }\n+\n   @NonNull\n-  <T> TypeToken<T> at(int index);\n+  public <T> TypeToken<T> at(int index) {\n+    if (index >= typeTokens.length)\n+      throw new NullPointerException(\"No type token at index: \" + index);\n+    return (TypeToken<T>) typeTokens[index];", "originalCommit": "7d07433a992506b7dfbfddc1f5401b428683ab3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6c5a6556e0b423395791de83b5789d265c03c4d", "chunk": "diff --git a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\nindex 9dfb1a773..63bbe19e5 100644\n--- a/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n+++ b/encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java\n\n@@ -15,33 +15,30 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-public class TypeTokenContainer {\n+public final class TypeTokenContainer {\n   private final TypeToken<?>[] typeTokens;\n \n-  TypeTokenContainer(@Nullable Type[] types) {\n-    TypeToken[] typeTokens;\n-    if (types == null) {\n-      typeTokens = new TypeToken[0];\n-    } else {\n-      typeTokens = new TypeToken[types.length];\n-      for (int i = 0; i < types.length; i++) {\n-        typeTokens[i] = TypeToken.of(types[i]);\n-      }\n-    }\n+  @NonNull public static final TypeTokenContainer EMPTY = new TypeTokenContainer();\n+\n+  private TypeTokenContainer() {\n+    typeTokens = new TypeToken[0];\n+  }\n+\n+  public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     this.typeTokens = typeTokens;\n   }\n \n   @NonNull\n   public <T> TypeToken<T> at(int index) {\n-    if (index >= typeTokens.length)\n-      throw new NullPointerException(\"No type token at index: \" + index);\n-    return (TypeToken<T>) typeTokens[index];\n+    if (index >= typeTokens.length || index < 0)\n+      throw new IllegalArgumentException(\"No type token at index: \" + index);\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n+    return typeToken;\n   }\n }\n"}}, {"oid": "d6c5a6556e0b423395791de83b5789d265c03c4d", "url": "https://github.com/firebase/firebase-android-sdk/commit/d6c5a6556e0b423395791de83b5789d265c03c4d", "message": "address comments", "committedDate": "2020-06-01T14:55:32Z", "type": "commit"}, {"oid": "47f20d7586ecef9da3e70487a2d9306d15f24e0a", "url": "https://github.com/firebase/firebase-android-sdk/commit/47f20d7586ecef9da3e70487a2d9306d15f24e0a", "message": "update api file", "committedDate": "2020-06-01T15:59:52Z", "type": "commit"}, {"oid": "47f20d7586ecef9da3e70487a2d9306d15f24e0a", "url": "https://github.com/firebase/firebase-android-sdk/commit/47f20d7586ecef9da3e70487a2d9306d15f24e0a", "message": "update api file", "committedDate": "2020-06-01T15:59:52Z", "type": "forcePushed"}]}