{"pr_number": 1266, "pr_title": "Add custom keys to Crashlytics reports", "pr_createdAt": "2020-02-21T18:20:15Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1266", "timeline": [{"oid": "31f230be6f1ceb9c957ef4dcf36066151bcc481a", "url": "https://github.com/firebase/firebase-android-sdk/commit/31f230be6f1ceb9c957ef4dcf36066151bcc481a", "message": "Add custom keys to Crashlytics reports", "committedDate": "2020-02-21T18:17:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyODgzNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1266#discussion_r383328834", "bodyText": "How do you feel about Collections.emptyMap() (or ImmutableMap.of())", "author": "jakeouellette", "createdAt": "2020-02-24T15:22:56Z", "path": "firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManagerTest.java", "diffHunk": "@@ -156,19 +167,123 @@ public void testOnFatalEvent_addsLogsToEvent() {\n \n     verify(mockEventBuilder)\n         .setLog(CrashlyticsReport.Session.Event.Log.builder().setContent(testLog).build());\n+    verify(mockEventBuilder).build();\n     verify(logFileManager).clearLog();\n   }\n \n   @Test\n   public void testOnFatalEvent_addsNoLogsToEventWhenNoneAvailable() {\n-    mockEventInteraction(System.currentTimeMillis());\n+    mockEventInteractions(System.currentTimeMillis());\n \n     when(logFileManager.getLogString()).thenReturn(null);\n \n     reportManager.onBeginSession(\"testSessionId\");\n     reportManager.onFatalEvent(mockException, mockThread);\n \n     verify(mockEventBuilder, never()).setLog(any(CrashlyticsReport.Session.Event.Log.class));\n+    verify(mockEventBuilder).build();\n+    verify(logFileManager).clearLog();\n+  }\n+\n+  @Test\n+  public void testOnNonFatalEvent_addsSortedKeysToEvent() {\n+    mockEventInteractions(System.currentTimeMillis());\n+\n+    final String testKey1 = \"testKey1\";\n+    final String testValue1 = \"testValue1\";\n+    final String testKey2 = \"testKey2\";\n+    final String testValue2 = \"testValue2\";\n+\n+    final Map<String, String> attributes = new HashMap<>();\n+    attributes.put(testKey1, testValue1);\n+    attributes.put(testKey2, testValue2);\n+\n+    final CustomAttribute customAttribute1 =\n+        CustomAttribute.builder().setKey(testKey1).setValue(testValue1).build();\n+    final CustomAttribute customAttribute2 =\n+        CustomAttribute.builder().setKey(testKey2).setValue(testValue2).build();\n+\n+    final ImmutableList<CustomAttribute> expectedCustomAttributes =\n+        ImmutableList.from(customAttribute1, customAttribute2);\n+\n+    when(reportMetadata.getCustomKeys()).thenReturn(attributes);\n+\n+    reportManager.onBeginSession(\"testSessionId\");\n+    reportManager.onNonFatalEvent(mockException, mockThread);\n+\n+    verify(mockEventAppBuilder).setCustomAttributes(expectedCustomAttributes);\n+    verify(mockEventAppBuilder).build();\n+    verify(mockEventBuilder).setApp(mockEventApp);\n+    verify(mockEventBuilder).build();\n+    verify(logFileManager).clearLog();\n+  }\n+\n+  @Test\n+  public void testOnNonFatalEvent_addsNoKeysToEventWhenNoneAvailable() {\n+    mockEventInteractions(System.currentTimeMillis());\n+\n+    final Map<String, String> attributes = new HashMap<>();\n+\n+    when(reportMetadata.getCustomKeys()).thenReturn(attributes);\n+\n+    reportManager.onBeginSession(\"testSessionId\");\n+    reportManager.onNonFatalEvent(mockException, mockThread);\n+\n+    verify(mockEventAppBuilder, never()).setCustomAttributes(any());\n+    verify(mockEventAppBuilder, never()).build();\n+    verify(mockEventBuilder, never()).setApp(mockEventApp);\n+    verify(mockEventBuilder).build();\n+    verify(logFileManager).clearLog();\n+  }\n+\n+  @Test\n+  public void testOnFatalEvent_addsSortedKeysToEvent() {\n+    mockEventInteractions(System.currentTimeMillis());\n+\n+    final String testKey1 = \"testKey1\";\n+    final String testValue1 = \"testValue1\";\n+    final String testKey2 = \"testKey2\";\n+    final String testValue2 = \"testValue2\";\n+\n+    final Map<String, String> attributes = new HashMap<>();\n+    attributes.put(testKey1, testValue1);\n+    attributes.put(testKey2, testValue2);\n+\n+    final CustomAttribute customAttribute1 =\n+        CustomAttribute.builder().setKey(testKey1).setValue(testValue1).build();\n+    final CustomAttribute customAttribute2 =\n+        CustomAttribute.builder().setKey(testKey2).setValue(testValue2).build();\n+\n+    final ImmutableList<CustomAttribute> expectedCustomAttributes =\n+        ImmutableList.from(customAttribute1, customAttribute2);\n+\n+    when(reportMetadata.getCustomKeys()).thenReturn(attributes);\n+\n+    reportManager.onBeginSession(\"testSessionId\");\n+    reportManager.onFatalEvent(mockException, mockThread);\n+\n+    verify(mockEventAppBuilder).setCustomAttributes(expectedCustomAttributes);\n+    verify(mockEventAppBuilder).build();\n+    verify(mockEventBuilder).setApp(mockEventApp);\n+    verify(mockEventBuilder).build();\n+    verify(logFileManager).clearLog();\n+  }\n+\n+  @Test\n+  public void testOnFatalEvent_addsNoKeysToEventWhenNoneAvailable() {\n+    mockEventInteractions(System.currentTimeMillis());\n+\n+    final Map<String, String> attributes = new HashMap<>();", "originalCommit": "31f230be6f1ceb9c957ef4dcf36066151bcc481a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1OTMxOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1266#discussion_r383359318", "bodyText": "\ud83d\udc4d", "author": "mrwillis21", "createdAt": "2020-02-24T16:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyODgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ccb3db4810870f2340321fe4d0d18734e38ed6a9", "chunk": "diff --git a/firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManagerTest.java b/firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManagerTest.java\nindex 1c02b61aa..60d80d117 100644\n--- a/firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManagerTest.java\n+++ b/firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManagerTest.java\n\n@@ -222,7 +223,7 @@ public class FirebaseCrashlyticsReportManagerTest {\n   public void testOnNonFatalEvent_addsNoKeysToEventWhenNoneAvailable() {\n     mockEventInteractions(System.currentTimeMillis());\n \n-    final Map<String, String> attributes = new HashMap<>();\n+    final Map<String, String> attributes = Collections.emptyMap();\n \n     when(reportMetadata.getCustomKeys()).thenReturn(attributes);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMTY2OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1266#discussion_r383331668", "bodyText": "Not sure it matters, but just a note here that unmodifiable maps can still change, just not by the user of the returned value.", "author": "jakeouellette", "createdAt": "2020-02-24T15:27:14Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/core/UserMetadata.java", "diffHunk": "@@ -37,6 +38,7 @@ public void setUserId(String identifier) {\n     userId = sanitizeAttribute(identifier);\n   }\n \n+  @NonNull\n   public Map<String, String> getCustomKeys() {\n     return Collections.unmodifiableMap(attributes);", "originalCommit": "31f230be6f1ceb9c957ef4dcf36066151bcc481a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1Njk1OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1266#discussion_r383356959", "bodyText": "\ud83d\udc4d Discussed this offline - the ConcurrentHashMap implementation guarantees this is safe, but we should definitely revisit it later.", "author": "mrwillis21", "createdAt": "2020-02-24T16:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "ccb3db4810870f2340321fe4d0d18734e38ed6a9", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/core/UserMetadata.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/core/UserMetadata.java\nindex 4f235658a..008d11659 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/core/UserMetadata.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/core/UserMetadata.java\n\n@@ -40,6 +40,8 @@ public class UserMetadata {\n \n   @NonNull\n   public Map<String, String> getCustomKeys() {\n+    // Use of ConcurrentHashMap as the underlying attributes map guarantees safety should\n+    // attributes be added after this unmodifiable view is returned.\n     return Collections.unmodifiableMap(attributes);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTMwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1266#discussion_r383339303", "bodyText": "Since this is a copy, you might consider setting a capacity, e.g., new ArrayList<>(attributes.size())", "author": "jakeouellette", "createdAt": "2020-02-24T15:38:47Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManager.java", "diffHunk": "@@ -148,4 +174,23 @@ private boolean onReportSendComplete(Task<CrashlyticsReport> task) {\n     // TODO: Something went wrong. Log? Throw?\n     return false;\n   }\n+\n+  private static List<CustomAttribute> getSortedCustomAttributes(Map<String, String> attributes) {\n+    if (attributes == null || attributes.isEmpty()) {\n+      return null;\n+    }\n+\n+    List<CustomAttribute> attributesList = new ArrayList<>();", "originalCommit": "31f230be6f1ceb9c957ef4dcf36066151bcc481a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1NjU4NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1266#discussion_r383356584", "bodyText": "\ud83d\udc4d", "author": "mrwillis21", "createdAt": "2020-02-24T16:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "ccb3db4810870f2340321fe4d0d18734e38ed6a9", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManager.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManager.java\nindex 9d9892890..d221042ae 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManager.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FirebaseCrashlyticsReportManager.java\n\n@@ -180,7 +180,8 @@ public class FirebaseCrashlyticsReportManager implements CrashlyticsLifecycleEve\n       return null;\n     }\n \n-    List<CustomAttribute> attributesList = new ArrayList<>();\n+    ArrayList<CustomAttribute> attributesList = new ArrayList<>();\n+    attributesList.ensureCapacity(attributes.size());\n     for (Map.Entry<String, String> entry : attributes.entrySet()) {\n       attributesList.add(\n           CustomAttribute.builder().setKey(entry.getKey()).setValue(entry.getValue()).build());\n"}}, {"oid": "ccb3db4810870f2340321fe4d0d18734e38ed6a9", "url": "https://github.com/firebase/firebase-android-sdk/commit/ccb3db4810870f2340321fe4d0d18734e38ed6a9", "message": "Feedback", "committedDate": "2020-02-24T16:09:06Z", "type": "commit"}]}