{"pr_number": 1833, "pr_title": "Add support to register AnnotatedFieldHandler in decoder", "pr_createdAt": "2020-07-30T13:41:50Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1833", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxMzUzMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463013531", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<? extends U> objectDecoder) {\n          \n          \n            \n                  @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<U> handler) {\n          \n      \n    \n    \n  \n\nIt's not possible to extend/subclass annotations in Java, so consider dropping ? extends", "author": "vkryachko", "createdAt": "2020-07-30T13:54:54Z", "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java", "diffHunk": "@@ -33,8 +38,16 @@ public JsonDataDecoderBuilder() {}\n     return this;\n   }\n \n+  @NonNull\n+  @Override\n+  public <U extends Annotation> JsonDataDecoderBuilder register(\n+      @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<? extends U> objectDecoder) {", "originalCommit": "5dbd3feb5068cd35e4a0417ede9d0b16dbb1b81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "294747685b7a62c259c4b2b4d666581b6141485c", "chunk": "diff --git a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java\nindex cec795d3..d700e7b5 100644\n--- a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java\n+++ b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java\n\n@@ -38,6 +40,14 @@ public final class JsonDataDecoderBuilder implements DecoderConfig<JsonDataDecod\n     return this;\n   }\n \n+  @NonNull\n+  @Override\n+  public <U> JsonDataDecoderBuilder register(\n+      @NonNull Class<U> clazz, @NonNull ValueDecoder<? extends U> valueDecoder) {\n+    valueDecoders.put(clazz, valueDecoder);\n+    return this;\n+  }\n+\n   @NonNull\n   @Override\n   public <U extends Annotation> JsonDataDecoderBuilder register(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNTQ5MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463015491", "bodyText": "by convention static fields use UPPER_SNAKE_CASE, please change here and throughout.", "author": "vkryachko", "createdAt": "2020-07-30T13:57:29Z", "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java", "diffHunk": "@@ -83,6 +84,19 @@ public int hashCode() {\n     }\n   }\n \n+  private static AnnotatedFieldHandler<Default> defaultHandler =", "originalCommit": "5dbd3feb5068cd35e4a0417ede9d0b16dbb1b81f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNTcxMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463015711", "bodyText": "also make it final pls", "author": "vkryachko", "createdAt": "2020-07-30T13:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNTQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "294747685b7a62c259c4b2b4d666581b6141485c", "chunk": "diff --git a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\nindex fe9f2e52..63c61704 100644\n--- a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\n+++ b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\n\n@@ -1,142 +1,141 @@\n-// Copyright 2020 Google LLC\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package com.google.firebase.decoders.json;\n-\n-import static com.google.common.truth.Truth.assertThat;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import com.google.firebase.decoders.AnnotatedFieldHandler;\n-import com.google.firebase.decoders.DataDecoder;\n-import com.google.firebase.decoders.FieldRef;\n-import com.google.firebase.decoders.ObjectDecoder;\n-import com.google.firebase.decoders.ObjectDecoderContext;\n-import com.google.firebase.decoders.Safe;\n-import com.google.firebase.decoders.TypeCreator;\n-import com.google.firebase.decoders.TypeToken;\n-import com.google.firebase.encoders.FieldDescriptor;\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.lang.annotation.Annotation;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.robolectric.RobolectricTestRunner;\n-\n-@RunWith(RobolectricTestRunner.class)\n-public class JsonDataDecoderAnnotatedFieldHandlerTest {\n-\n-  @Retention(RetentionPolicy.RUNTIME)\n-  @Target({ElementType.METHOD, ElementType.FIELD})\n-  private @interface Default {\n-    String value();\n-\n-    Default INSTANCE = new DefaultImpl();\n-\n-    class DefaultImpl implements Default {\n-      @Override\n-      public Class<? extends Annotation> annotationType() {\n-        return Default.class;\n-      }\n-\n-      @Override\n-      public String value() {\n-        return \"default\";\n-      }\n-\n-      @Override\n-      public boolean equals(Object obj) {\n-        return super.equals(obj);\n-      }\n-\n-      @Override\n-      public int hashCode() {\n-        return super.hashCode();\n-      }\n-    }\n-  }\n-\n-  private static class Foo {\n-    @Default(\"default\")\n-    String str;\n-\n-    Foo(String str) {\n-      this.str = str;\n-    }\n-  }\n-\n-  private static AnnotatedFieldHandler<Default> defaultHandler =\n-      new AnnotatedFieldHandler<Default>() {\n-        @Nullable\n-        @Override\n-        public <T> T apply(\n-            @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type) {\n-          if (fieldDecodedResult == null) {\n-            if (type.equals(String.class)) return (T) annotation.value();\n-          }\n-          return fieldDecodedResult;\n-        }\n-      };\n-\n-  static class FooObjectDecoder implements ObjectDecoder<Foo> {\n-    @NonNull\n-    @Override\n-    public TypeCreator<Foo> decode(@NonNull ObjectDecoderContext<Foo> ctx) {\n-      FieldDescriptor strFieldDescriptor =\n-          FieldDescriptor.builder(\"str\").withProperty(Default.INSTANCE).build();\n-      FieldRef.Boxed<String> strField = ctx.decode(strFieldDescriptor, TypeToken.of(String.class));\n-      return (creationCtx -> new Foo(creationCtx.get(strField)));\n-    }\n-  }\n-\n-  @Test\n-  public void customizedAnnotation_shouldProcessCorrectly() throws IOException {\n-    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n-    Map<Class<? extends Annotation>, AnnotatedFieldHandler<?>> fieldHandlers = new HashMap<>();\n-\n-    objectDecoders.put(Foo.class, new FooObjectDecoder());\n-    fieldHandlers.put(Default.class, defaultHandler);\n-\n-    JsonDataDecoderContext jsonDataDecoderContext =\n-        new JsonDataDecoderContext(objectDecoders, fieldHandlers);\n-\n-    String json = \"{\\\"str\\\":null}\";\n-    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n-    Foo foo = jsonDataDecoderContext.decode(input, TypeToken.of(new Safe<Foo>() {}));\n-    assertThat(foo.str).isEqualTo(\"default\");\n-  }\n-\n-  @Test\n-  public void customizedAnnotationRegisteredWithBuilder_shouldProcessCorrectly()\n-      throws IOException {\n-    DataDecoder decoder =\n-        new JsonDataDecoderBuilder()\n-            .register(Foo.class, new FooObjectDecoder())\n-            .register(Default.class, defaultHandler)\n-            .build();\n-\n-    String json = \"{\\\"str\\\":null}\";\n-    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n-    Foo foo = decoder.decode(input, TypeToken.of(new Safe<Foo>() {}));\n-    assertThat(foo.str).isEqualTo(\"default\");\n-  }\n-}\n+//// Copyright 2020 Google LLC\n+////\n+//// Licensed under the Apache License, Version 2.0 (the \"License\");\n+//// you may not use this file except in compliance with the License.\n+//// You may obtain a copy of the License at\n+////\n+////      http://www.apache.org/licenses/LICENSE-2.0\n+////\n+//// Unless required by applicable law or agreed to in writing, software\n+//// distributed under the License is distributed on an \"AS IS\" BASIS,\n+//// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//// See the License for the specific language governing permissions and\n+//// limitations under the License.\n+//\n+// package com.google.firebase.decoders.json;\n+//\n+// import static com.google.common.truth.Truth.assertThat;\n+// import static java.nio.charset.StandardCharsets.UTF_8;\n+//\n+// import androidx.annotation.NonNull;\n+// import androidx.annotation.Nullable;\n+// import com.google.firebase.decoders.AnnotatedFieldHandler;\n+// import com.google.firebase.decoders.DataDecoder;\n+// import com.google.firebase.decoders.FieldRef;\n+// import com.google.firebase.decoders.ObjectDecoder;\n+// import com.google.firebase.decoders.ObjectDecoderContext;\n+// import com.google.firebase.decoders.Safe;\n+// import com.google.firebase.decoders.TypeCreator;\n+// import com.google.firebase.decoders.TypeToken;\n+// import com.google.firebase.encoders.FieldDescriptor;\n+// import java.io.ByteArrayInputStream;\n+// import java.io.IOException;\n+// import java.io.InputStream;\n+// import java.lang.annotation.Annotation;\n+// import java.lang.annotation.ElementType;\n+// import java.lang.annotation.Retention;\n+// import java.lang.annotation.RetentionPolicy;\n+// import java.lang.annotation.Target;\n+// import java.util.HashMap;\n+// import java.util.Map;\n+// import org.junit.Test;\n+// import org.junit.runner.RunWith;\n+// import org.robolectric.RobolectricTestRunner;\n+//\n+// @RunWith(RobolectricTestRunner.class)\n+// public class JsonDataDecoderAnnotatedFieldHandlerTest {\n+//\n+//  @Retention(RetentionPolicy.RUNTIME)\n+//  @Target({ElementType.METHOD, ElementType.FIELD})\n+//  private @interface Default {\n+//    String value();\n+//\n+//    Default INSTANCE = new DefaultImpl();\n+//\n+//    class DefaultImpl implements Default {\n+//      @Override\n+//      public Class<? extends Annotation> annotationType() {\n+//        return Default.class;\n+//      }\n+//\n+//      @Override\n+//      public String value() {\n+//        return \"default\";\n+//      }\n+//\n+//      @Override\n+//      public boolean equals(Object obj) {\n+//        return super.equals(obj);\n+//      }\n+//\n+//      @Override\n+//      public int hashCode() {\n+//        return super.hashCode();\n+//      }\n+//    }\n+//  }\n+//\n+//  private static class Foo {\n+//    @Default(\"default\")\n+//    String str;\n+//\n+//    Foo(String str) {\n+//      this.str = str;\n+//    }\n+//  }\n+//\n+//  private static AnnotatedFieldHandler<Default> defaultHandler =\n+//      new AnnotatedFieldHandler<Default>() {\n+//        @Nullable\n+//        @Override\n+//        public <T> T apply(\n+//            @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type) {\n+//          if (fieldDecodedResult == null) {\n+//            if (type.equals(String.class)) return (T) annotation.value();\n+//          }\n+//          return fieldDecodedResult;\n+//        }\n+//      };\n+//\n+//  static class FooObjectDecoder implements ObjectDecoder<Foo> {\n+//    @NonNull\n+//    @Override\n+//    public TypeCreator<Foo> decode(@NonNull ObjectDecoderContext<Foo> ctx) {\n+//      FieldDescriptor strFieldDescriptor =\n+//          FieldDescriptor.builder(\"str\").withProperty(Default.INSTANCE).build();\n+//      FieldRef.Boxed<String> strField = ctx.decode(strFieldDescriptor,\n+// TypeToken.of(String.class));\n+//      return (creationCtx -> new Foo(creationCtx.get(strField)));\n+//    }\n+//  }\n+//\n+//  @Test\n+//  public void customizedAnnotation_shouldProcessCorrectly() throws IOException {\n+//    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+//    Map<Class<?>, AnnotatedFieldHandler<?>> fieldHandlers = new HashMap<>();\n+//\n+//    objectDecoders.put(Foo.class, new FooObjectDecoder());\n+//    fieldHandlers.put(\n+//        Default.class,\n+//        new AnnotatedFieldHandler<Default>() {\n+//          @Nullable\n+//          @Override\n+//          public <T> T apply(\n+//              @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type)\n+// {\n+//            if (fieldDecodedResult == null) {\n+//              if (type.equals(String.class)) return (T) annotation.value();\n+//            }\n+//            return fieldDecodedResult;\n+//          }\n+//        });\n+//\n+//    JsonDataDecoderContext jsonDataDecoderContext =\n+//        new JsonDataDecoderContext(objectDecoders, fieldHandlers);\n+//\n+//    String json = \"{\\\"str\\\":null}\";\n+//    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+//    Foo foo = jsonDataDecoderContext.decode(input, TypeToken.of(new Safe<Foo>() {}));\n+//    assertThat(foo.str).isEqualTo(\"default\");\n+//  }\n+// }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzMzgxNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463033816", "bodyText": "It does not look like having this method be generic adds much type safety for implementers of the interface, otoh it makes it impossible to write implementation as lambda expressions, should be drop the <T> generic argument from the signature?", "author": "vkryachko", "createdAt": "2020-07-30T14:23:20Z", "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java", "diffHunk": "@@ -83,6 +84,19 @@ public int hashCode() {\n     }\n   }\n \n+  private final static AnnotatedFieldHandler<Default> DEFAULT_HANDLER =\n+      new AnnotatedFieldHandler<Default>() {\n+        @Nullable\n+        @Override\n+        public <T> T apply(\n+            @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type) {", "originalCommit": "026f6b8117f322099740e5cb83fd20d55b977a40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1OTMwOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463059309", "bodyText": "Just ran some experiments to remove T,\nchanges\n  <T> T apply(@NonNull U annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type);\n\nto\n  Object apply(@NonNull U annotation, @Nullable Object fieldDecodedResult, @NonNull Class<?> type);\n\nwhich allows us to write lambda like the following:\n  private final static AnnotatedFieldHandler<Default> DEFAULT_HANDLER =\n          (an, res, type) -> {\n    if (res == null) {\n      if (type.equals(String.class)) {\n        return an.value();\n      }\n    }\n    return res;\n  };\n\nBut, we still not be able to directly register AnnotatedFieldHandler as lambda, since It still needs the info about the type of the Annotation, in that case, it's the U in above apply method.\nany idea of fully supporting lambda?", "author": "James201311", "createdAt": "2020-07-30T14:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzMzgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwOTkwNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463109905", "bodyText": "it should be possible to use the lambda in the register() method as it has the annotation type as first argument, but not possible to do it in the case of Map<? extends Annotation, Handler<?>> - which is fine as it is an internal implementation detail and should not be used directly anywhere", "author": "vkryachko", "createdAt": "2020-07-30T16:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzMzgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "294747685b7a62c259c4b2b4d666581b6141485c", "chunk": "diff --git a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\nindex accda27c..63c61704 100644\n--- a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\n+++ b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\n\n@@ -1,142 +1,141 @@\n-// Copyright 2020 Google LLC\n-//\n-// Licensed under the Apache License, Version 2.0 (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-//      http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n-package com.google.firebase.decoders.json;\n-\n-import static com.google.common.truth.Truth.assertThat;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import com.google.firebase.decoders.AnnotatedFieldHandler;\n-import com.google.firebase.decoders.DataDecoder;\n-import com.google.firebase.decoders.FieldRef;\n-import com.google.firebase.decoders.ObjectDecoder;\n-import com.google.firebase.decoders.ObjectDecoderContext;\n-import com.google.firebase.decoders.Safe;\n-import com.google.firebase.decoders.TypeCreator;\n-import com.google.firebase.decoders.TypeToken;\n-import com.google.firebase.encoders.FieldDescriptor;\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.lang.annotation.Annotation;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.robolectric.RobolectricTestRunner;\n-\n-@RunWith(RobolectricTestRunner.class)\n-public class JsonDataDecoderAnnotatedFieldHandlerTest {\n-\n-  @Retention(RetentionPolicy.RUNTIME)\n-  @Target({ElementType.METHOD, ElementType.FIELD})\n-  private @interface Default {\n-    String value();\n-\n-    Default INSTANCE = new DefaultImpl();\n-\n-    class DefaultImpl implements Default {\n-      @Override\n-      public Class<? extends Annotation> annotationType() {\n-        return Default.class;\n-      }\n-\n-      @Override\n-      public String value() {\n-        return \"default\";\n-      }\n-\n-      @Override\n-      public boolean equals(Object obj) {\n-        return super.equals(obj);\n-      }\n-\n-      @Override\n-      public int hashCode() {\n-        return super.hashCode();\n-      }\n-    }\n-  }\n-\n-  private static class Foo {\n-    @Default(\"default\")\n-    String str;\n-\n-    Foo(String str) {\n-      this.str = str;\n-    }\n-  }\n-\n-  private final static AnnotatedFieldHandler<Default> DEFAULT_HANDLER =\n-      new AnnotatedFieldHandler<Default>() {\n-        @Nullable\n-        @Override\n-        public <T> T apply(\n-            @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type) {\n-          if (fieldDecodedResult == null) {\n-            if (type.equals(String.class)) return (T) annotation.value();\n-          }\n-          return fieldDecodedResult;\n-        }\n-      };\n-\n-  static class FooObjectDecoder implements ObjectDecoder<Foo> {\n-    @NonNull\n-    @Override\n-    public TypeCreator<Foo> decode(@NonNull ObjectDecoderContext<Foo> ctx) {\n-      FieldDescriptor strFieldDescriptor =\n-          FieldDescriptor.builder(\"str\").withProperty(Default.INSTANCE).build();\n-      FieldRef.Boxed<String> strField = ctx.decode(strFieldDescriptor, TypeToken.of(String.class));\n-      return (creationCtx -> new Foo(creationCtx.get(strField)));\n-    }\n-  }\n-\n-  @Test\n-  public void customizedAnnotation_shouldProcessCorrectly() throws IOException {\n-    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n-    Map<Class<? extends Annotation>, AnnotatedFieldHandler<?>> fieldHandlers = new HashMap<>();\n-\n-    objectDecoders.put(Foo.class, new FooObjectDecoder());\n-    fieldHandlers.put(Default.class, DEFAULT_HANDLER);\n-\n-    JsonDataDecoderContext jsonDataDecoderContext =\n-        new JsonDataDecoderContext(objectDecoders, fieldHandlers);\n-\n-    String json = \"{\\\"str\\\":null}\";\n-    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n-    Foo foo = jsonDataDecoderContext.decode(input, TypeToken.of(new Safe<Foo>() {}));\n-    assertThat(foo.str).isEqualTo(\"default\");\n-  }\n-\n-  @Test\n-  public void customizedAnnotationRegisteredWithBuilder_shouldProcessCorrectly()\n-      throws IOException {\n-    DataDecoder decoder =\n-        new JsonDataDecoderBuilder()\n-            .register(Foo.class, new FooObjectDecoder())\n-            .register(Default.class, DEFAULT_HANDLER)\n-            .build();\n-\n-    String json = \"{\\\"str\\\":null}\";\n-    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n-    Foo foo = decoder.decode(input, TypeToken.of(new Safe<Foo>() {}));\n-    assertThat(foo.str).isEqualTo(\"default\");\n-  }\n-}\n+//// Copyright 2020 Google LLC\n+////\n+//// Licensed under the Apache License, Version 2.0 (the \"License\");\n+//// you may not use this file except in compliance with the License.\n+//// You may obtain a copy of the License at\n+////\n+////      http://www.apache.org/licenses/LICENSE-2.0\n+////\n+//// Unless required by applicable law or agreed to in writing, software\n+//// distributed under the License is distributed on an \"AS IS\" BASIS,\n+//// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//// See the License for the specific language governing permissions and\n+//// limitations under the License.\n+//\n+// package com.google.firebase.decoders.json;\n+//\n+// import static com.google.common.truth.Truth.assertThat;\n+// import static java.nio.charset.StandardCharsets.UTF_8;\n+//\n+// import androidx.annotation.NonNull;\n+// import androidx.annotation.Nullable;\n+// import com.google.firebase.decoders.AnnotatedFieldHandler;\n+// import com.google.firebase.decoders.DataDecoder;\n+// import com.google.firebase.decoders.FieldRef;\n+// import com.google.firebase.decoders.ObjectDecoder;\n+// import com.google.firebase.decoders.ObjectDecoderContext;\n+// import com.google.firebase.decoders.Safe;\n+// import com.google.firebase.decoders.TypeCreator;\n+// import com.google.firebase.decoders.TypeToken;\n+// import com.google.firebase.encoders.FieldDescriptor;\n+// import java.io.ByteArrayInputStream;\n+// import java.io.IOException;\n+// import java.io.InputStream;\n+// import java.lang.annotation.Annotation;\n+// import java.lang.annotation.ElementType;\n+// import java.lang.annotation.Retention;\n+// import java.lang.annotation.RetentionPolicy;\n+// import java.lang.annotation.Target;\n+// import java.util.HashMap;\n+// import java.util.Map;\n+// import org.junit.Test;\n+// import org.junit.runner.RunWith;\n+// import org.robolectric.RobolectricTestRunner;\n+//\n+// @RunWith(RobolectricTestRunner.class)\n+// public class JsonDataDecoderAnnotatedFieldHandlerTest {\n+//\n+//  @Retention(RetentionPolicy.RUNTIME)\n+//  @Target({ElementType.METHOD, ElementType.FIELD})\n+//  private @interface Default {\n+//    String value();\n+//\n+//    Default INSTANCE = new DefaultImpl();\n+//\n+//    class DefaultImpl implements Default {\n+//      @Override\n+//      public Class<? extends Annotation> annotationType() {\n+//        return Default.class;\n+//      }\n+//\n+//      @Override\n+//      public String value() {\n+//        return \"default\";\n+//      }\n+//\n+//      @Override\n+//      public boolean equals(Object obj) {\n+//        return super.equals(obj);\n+//      }\n+//\n+//      @Override\n+//      public int hashCode() {\n+//        return super.hashCode();\n+//      }\n+//    }\n+//  }\n+//\n+//  private static class Foo {\n+//    @Default(\"default\")\n+//    String str;\n+//\n+//    Foo(String str) {\n+//      this.str = str;\n+//    }\n+//  }\n+//\n+//  private static AnnotatedFieldHandler<Default> defaultHandler =\n+//      new AnnotatedFieldHandler<Default>() {\n+//        @Nullable\n+//        @Override\n+//        public <T> T apply(\n+//            @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type) {\n+//          if (fieldDecodedResult == null) {\n+//            if (type.equals(String.class)) return (T) annotation.value();\n+//          }\n+//          return fieldDecodedResult;\n+//        }\n+//      };\n+//\n+//  static class FooObjectDecoder implements ObjectDecoder<Foo> {\n+//    @NonNull\n+//    @Override\n+//    public TypeCreator<Foo> decode(@NonNull ObjectDecoderContext<Foo> ctx) {\n+//      FieldDescriptor strFieldDescriptor =\n+//          FieldDescriptor.builder(\"str\").withProperty(Default.INSTANCE).build();\n+//      FieldRef.Boxed<String> strField = ctx.decode(strFieldDescriptor,\n+// TypeToken.of(String.class));\n+//      return (creationCtx -> new Foo(creationCtx.get(strField)));\n+//    }\n+//  }\n+//\n+//  @Test\n+//  public void customizedAnnotation_shouldProcessCorrectly() throws IOException {\n+//    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+//    Map<Class<?>, AnnotatedFieldHandler<?>> fieldHandlers = new HashMap<>();\n+//\n+//    objectDecoders.put(Foo.class, new FooObjectDecoder());\n+//    fieldHandlers.put(\n+//        Default.class,\n+//        new AnnotatedFieldHandler<Default>() {\n+//          @Nullable\n+//          @Override\n+//          public <T> T apply(\n+//              @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type)\n+// {\n+//            if (fieldDecodedResult == null) {\n+//              if (type.equals(String.class)) return (T) annotation.value();\n+//            }\n+//            return fieldDecodedResult;\n+//          }\n+//        });\n+//\n+//    JsonDataDecoderContext jsonDataDecoderContext =\n+//        new JsonDataDecoderContext(objectDecoders, fieldHandlers);\n+//\n+//    String json = \"{\\\"str\\\":null}\";\n+//    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+//    Foo foo = jsonDataDecoderContext.decode(input, TypeToken.of(new Safe<Foo>() {}));\n+//    assertThat(foo.str).isEqualTo(\"default\");\n+//  }\n+// }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNDIwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463134203", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<U> objectDecoder) {\n          \n          \n            \n                  @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<U> handler) {", "author": "vkryachko", "createdAt": "2020-07-30T16:49:16Z", "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java", "diffHunk": "@@ -33,8 +38,16 @@ public JsonDataDecoderBuilder() {}\n     return this;\n   }\n \n+  @NonNull\n+  @Override\n+  public <U extends Annotation> JsonDataDecoderBuilder register(\n+      @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<U> objectDecoder) {", "originalCommit": "026f6b8117f322099740e5cb83fd20d55b977a40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "294747685b7a62c259c4b2b4d666581b6141485c", "chunk": "diff --git a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java\nindex ea636c90..d700e7b5 100644\n--- a/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java\n+++ b/encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java\n\n@@ -38,16 +40,24 @@ public final class JsonDataDecoderBuilder implements DecoderConfig<JsonDataDecod\n     return this;\n   }\n \n+  @NonNull\n+  @Override\n+  public <U> JsonDataDecoderBuilder register(\n+      @NonNull Class<U> clazz, @NonNull ValueDecoder<? extends U> valueDecoder) {\n+    valueDecoders.put(clazz, valueDecoder);\n+    return this;\n+  }\n+\n   @NonNull\n   @Override\n   public <U extends Annotation> JsonDataDecoderBuilder register(\n-      @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<U> objectDecoder) {\n+      @NonNull Class<U> clazz, @NonNull AnnotatedFieldHandler<? extends U> objectDecoder) {\n     fieldHandlers.put(clazz, objectDecoder);\n     return this;\n   }\n \n   @NonNull\n   public DataDecoder build() {\n-    return new JsonDataDecoderContext(objectDecoders, fieldHandlers);\n+    return new JsonDataDecoderContext(objectDecoders, valueDecoders, fieldHandlers);\n   }\n }\n"}}, {"oid": "294747685b7a62c259c4b2b4d666581b6141485c", "url": "https://github.com/firebase/firebase-android-sdk/commit/294747685b7a62c259c4b2b4d666581b6141485c", "message": "rebase to firebase_encoders, solve conflicts", "committedDate": "2020-07-31T14:07:23Z", "type": "commit"}, {"oid": "09d468897d559293d463c11dff69e8e52a581898", "url": "https://github.com/firebase/firebase-android-sdk/commit/09d468897d559293d463c11dff69e8e52a581898", "message": "Add support to register AnnotatedFieldHandler in decoder", "committedDate": "2020-07-31T14:09:04Z", "type": "commit"}, {"oid": "5ac17a422de9259e3bd0913da9f612791fb93ca2", "url": "https://github.com/firebase/firebase-android-sdk/commit/5ac17a422de9259e3bd0913da9f612791fb93ca2", "message": "adress comments", "committedDate": "2020-07-31T14:10:09Z", "type": "commit"}, {"oid": "cc2f6493c35db049b91d05cbc0b0d81e0208dfbc", "url": "https://github.com/firebase/firebase-android-sdk/commit/cc2f6493c35db049b91d05cbc0b0d81e0208dfbc", "message": "address comments", "committedDate": "2020-07-31T14:11:35Z", "type": "commit"}, {"oid": "614bb1e700b1d0dabdafd781e986c03bb3e050de", "url": "https://github.com/firebase/firebase-android-sdk/commit/614bb1e700b1d0dabdafd781e986c03bb3e050de", "message": "fix rebase issue", "committedDate": "2020-07-31T14:16:52Z", "type": "forcePushed"}, {"oid": "6d6d39b104d2f40596d2640f01d7fec8098c0b13", "url": "https://github.com/firebase/firebase-android-sdk/commit/6d6d39b104d2f40596d2640f01d7fec8098c0b13", "message": "fix rebase issue", "committedDate": "2020-07-31T14:18:33Z", "type": "commit"}, {"oid": "6d6d39b104d2f40596d2640f01d7fec8098c0b13", "url": "https://github.com/firebase/firebase-android-sdk/commit/6d6d39b104d2f40596d2640f01d7fec8098c0b13", "message": "fix rebase issue", "committedDate": "2020-07-31T14:18:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0NjkzMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1833#discussion_r463646932", "bodyText": "I assume this was not intended?", "author": "vkryachko", "createdAt": "2020-07-31T14:33:10Z", "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Copyright 2020 Google LLC\n+package com.google.firebase.decoders.json; // Copyright 2020 Google LLC", "originalCommit": "6d6d39b104d2f40596d2640f01d7fec8098c0b13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94dcb926aca4a35eca640bfa139edf27fcde3151", "chunk": "diff --git a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\nindex f9934979..a68bc839 100644\n--- a/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\n+++ b/encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderAnnotatedFieldHandlerTest.java\n\n@@ -1,4 +1,4 @@\n-package com.google.firebase.decoders.json; // Copyright 2020 Google LLC\n+// Copyright 2020 Google LLC\n //\n // Licensed under the Apache License, Version 2.0 (the \"License\");\n // you may not use this file except in compliance with the License.\n"}}, {"oid": "94dcb926aca4a35eca640bfa139edf27fcde3151", "url": "https://github.com/firebase/firebase-android-sdk/commit/94dcb926aca4a35eca640bfa139edf27fcde3151", "message": "adress comments", "committedDate": "2020-07-31T14:41:11Z", "type": "commit"}]}