{"pr_number": 1577, "pr_title": "Refactor Crashlytics/Analytics integration", "pr_createdAt": "2020-05-20T21:45:56Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1577", "timeline": [{"oid": "8fe507708398aeb69e933092fb428b0462770944", "url": "https://github.com/firebase/firebase-android-sdk/commit/8fe507708398aeb69e933092fb428b0462770944", "message": "Refactor Crashlytics/Analytics integration\n\n- Register with Firebase Analytics at initialization time\n- Create separate pipelines for breadcrumbs and Crashlytics origin\nevents\n- Create a facade for a synchronous blocking call to log the\napp_exception event\n- Create stub implementations for breadcrumbs and app_exception\nevent logger for when Firebase Analytics is not available", "committedDate": "2020-05-20T21:44:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzU1MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432063551", "bodyText": "I wasn't really sure about this reference...it is a sneaky clever way to guard against a weird race condition that theoretically shouldn't happen. \ud83d\ude43", "author": "mrichards", "createdAt": "2020-05-28T19:17:08Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {\n+      Logger.getLogger().d(\"Logging Crashlytics event to Firebase\");\n+      this.eventLatch = new CountDownLatch(1);\n+\n+      baseAnalyticsEventLogger.logEvent(name, params);\n+\n+      Logger.getLogger().d(\"Awaiting app exception callback from FA...\");\n+      try {\n+        if (eventLatch.await(timeout, timeUnit)) {\n+          Logger.getLogger().d(\"App exception callback received from FA listener.\");\n+        } else {\n+          Logger.getLogger()\n+              .d(\"Timeout exceeded while awaiting app exception callback from FA listener.\");\n+        }\n+      } catch (InterruptedException ie) {\n+        Logger.getLogger().d(\"Interrupted while awaiting app exception callback from FA listener.\");\n+      }\n+\n+      this.eventLatch = null;\n+    }\n+  }\n+\n+  @Override\n+  public void onEvent(@NonNull String name, @NonNull Bundle params) {\n+    final CountDownLatch eventLatch = this.eventLatch;", "originalCommit": "8fe507708398aeb69e933092fb428b0462770944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwODk4OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432108989", "bodyText": "Yep! Get a local reference for the function scope, then if the global reference is changed by a separate thread, it won't interfere! :)", "author": "mrwillis21", "createdAt": "2020-05-28T20:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzU1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NTM2Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432065366", "bodyText": "Is it worth making a comment somewhere that we only ever expect at most ONE of these events per app execution? That fact influences the design, though I think the way you have it implemented is resilient to multiple events (though you could end up with a bunch calls waiting on the syncrhonized(latchLock) block, which is fine).\nMaybe not necessary since the design works either way?", "author": "mrichards", "createdAt": "2020-05-28T19:20:40Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {", "originalCommit": "8fe507708398aeb69e933092fb428b0462770944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwOTk5Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432109996", "bodyText": "I think there's definitely the possibility we could end up with multiple queued-up calls to this function, so it may be worth changing this later to allow for sending multiple events at once.", "author": "mrwillis21", "createdAt": "2020-05-28T20:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NTM2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NjE4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432066182", "bodyText": "This might be a good place for a comment describing the overall approach to the analytics integration, or at least point to one of the class javadocs that describes it.", "author": "mrichards", "createdAt": "2020-05-28T19:22:25Z", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java", "diffHunk": "@@ -61,13 +74,52 @@\n       nativeComponent = new MissingNativeComponent();\n     }\n \n+    final Onboarding onboarding = new Onboarding(app, context, idManager, arbiter);\n+\n+    final BreadcrumbSource breadcrumbSource;\n+    final AnalyticsEventLogger analyticsEventLogger;\n+\n+    if (analyticsConnector != null) {", "originalCommit": "8fe507708398aeb69e933092fb428b0462770944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMDA3Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432110076", "bodyText": "Happy to.", "author": "mrwillis21", "createdAt": "2020-05-28T20:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NjE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ba118269f70433abdd548a761555155bafaffb8", "chunk": "diff --git a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java\nindex 16aec2a8..73fe12a6 100644\n--- a/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java\n+++ b/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java\n\n@@ -76,35 +76,60 @@ public class FirebaseCrashlytics {\n \n     final Onboarding onboarding = new Onboarding(app, context, idManager, arbiter);\n \n+    // Integration with Firebase Analytics\n+\n+    // Supplies breadcrumb events\n     final BreadcrumbSource breadcrumbSource;\n+    // Facade for logging events to FA from Crashlytics.\n     final AnalyticsEventLogger analyticsEventLogger;\n \n     if (analyticsConnector != null) {\n-      final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger =\n+      // If FA is available, create a logger to log events from the Crashlytics origin.\n+      final CrashlyticsOriginAnalyticsEventLogger directAnalyticsEventLogger =\n           new CrashlyticsOriginAnalyticsEventLogger(analyticsConnector);\n \n+      // Create a listener to register for events coming from FA, which supplies both breadcrumbs\n+      // as well as Crashlytics-origin events through different streams.\n       final CrashlyticsAnalyticsListener crashlyticsAnalyticsListener =\n           new CrashlyticsAnalyticsListener();\n+\n+      // Registering our listener with FA should return a \"handle\", in which case we know we've\n+      // registered successfully. Subsequent calls to register a listener will return null.\n       final AnalyticsConnectorHandle analyticsConnectorHandle =\n           subscribeToAnalyticsEvents(analyticsConnector, crashlyticsAnalyticsListener);\n \n       if (analyticsConnectorHandle != null) {\n+        // Create the event receiver which will supply breadcrumb events to Crashlytics\n         final BreadcrumbAnalyticsEventReceiver breadcrumbReceiver =\n             new BreadcrumbAnalyticsEventReceiver();\n+        // Logging events to FA is an asynchronous operation. This logger will send events to\n+        // FA and block until FA returns the same event back to us, from the Crashlytics origin.\n+        // However, in the case that data collection has been disabled on FA, we will not receive\n+        // the event back (it will be silently dropped), so we set up a short timeout after which\n+        // we will assume that FA data collection is disabled and move on.\n         final BlockingAnalyticsEventLogger blockingAnalyticsEventLogger =\n             new BlockingAnalyticsEventLogger(\n-                baseAnalyticsEventLogger, APP_EXCEPTION_CALLBACK_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+                directAnalyticsEventLogger, APP_EXCEPTION_CALLBACK_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+\n+        // Set the appropriate event receivers to receive events from the FA listener\n         crashlyticsAnalyticsListener.setBreadcrumbEventReceiver(breadcrumbReceiver);\n         crashlyticsAnalyticsListener.setCrashlyticsOriginEventReceiver(\n             blockingAnalyticsEventLogger);\n \n+        // Set the breadcrumb event receiver as the breadcrumb source for Crashlytics.\n         breadcrumbSource = breadcrumbReceiver;\n+        // Set the blocking analytics event logger for Crashlytics.\n         analyticsEventLogger = blockingAnalyticsEventLogger;\n       } else {\n+        // FA is enabled, but the listener was not registered successfully.\n+        // We cannot listen for breadcrumbs.\n         breadcrumbSource = new DisabledBreadcrumbSource();\n-        analyticsEventLogger = baseAnalyticsEventLogger;\n+        // We cannot listen for Crashlytics origin events, but we can still send events, so set the\n+        // non-blocking analytics event logger for Crashlytics.\n+        analyticsEventLogger = directAnalyticsEventLogger;\n       }\n     } else {\n+      // FA is entirely unavailable. We cannot listen for breadcrumbs or send events.\n       breadcrumbSource = new DisabledBreadcrumbSource();\n       analyticsEventLogger = new UnavailableAnalyticsEventLogger();\n     }\n"}}, {"oid": "8ba118269f70433abdd548a761555155bafaffb8", "url": "https://github.com/firebase/firebase-android-sdk/commit/8ba118269f70433abdd548a761555155bafaffb8", "message": "Add comments to complex FA integration setup", "committedDate": "2020-05-29T15:58:00Z", "type": "commit"}, {"oid": "39b0b9f10507c596e256e2aefd40d4090a850fa8", "url": "https://github.com/firebase/firebase-android-sdk/commit/39b0b9f10507c596e256e2aefd40d4090a850fa8", "message": "Formatting", "committedDate": "2020-05-29T16:17:23Z", "type": "commit"}]}