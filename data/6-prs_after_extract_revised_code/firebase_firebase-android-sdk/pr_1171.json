{"pr_number": 1171, "pr_title": "Add test to verify canonical IDs are stable", "pr_createdAt": "2020-01-29T17:36:46Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1171", "timeline": [{"oid": "e3cba7cbf877635fbfe4090285356ea3d8a2095d", "url": "https://github.com/firebase/firebase-android-sdk/commit/e3cba7cbf877635fbfe4090285356ea3d8a2095d", "message": "Add test to verify canonical IDs are stable", "committedDate": "2020-01-29T17:35:47Z", "type": "commit"}, {"oid": "eb022d4bc15e6da3a3db0be15f82d8e695292d96", "url": "https://github.com/firebase/firebase-android-sdk/commit/eb022d4bc15e6da3a3db0be15f82d8e695292d96", "message": "Add test for upper bound", "committedDate": "2020-01-29T17:39:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU0NDE4NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1171#discussion_r372544184", "bodyText": "Consider adding an assertion helper instead. Something like\nprivate void assertCanonicalId(String canonicalId, Query query) {\n  assertEquals(canonicalId, query.getCanonicalId());\n}\nThese end up being about the same size at the call site but are easier to step through/debug/see exactly what failed just from exception line numbers.", "author": "wilhuff", "createdAt": "2020-01-29T18:06:58Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java", "diffHunk": "@@ -553,4 +559,62 @@ public void testMatchesAllDocuments() {\n     query = baseQuery.endAt(new Bound(Collections.emptyList(), true));\n     assertFalse(query.matchesAllDocuments());\n   }\n+\n+  @Test\n+  public void testCanonicalIdsAreStable() {\n+    // This test aims to ensure that we do not break canonical IDs, as they are used as keys in\n+    // the TargetCache.\n+\n+    Query baseQuery = Query.atPath(ResourcePath.fromString(\"collection\"));\n+\n+    Map<Query, String> queryToCanoncialIdMap = new LinkedHashMap<>();\n+    queryToCanoncialIdMap.put(baseQuery, \"collection|f:|ob:__name__asc|lt:LIMIT_TO_FIRST\");", "originalCommit": "eb022d4bc15e6da3a3db0be15f82d8e695292d96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5Mzk4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1171#discussion_r372593982", "bodyText": "Done (by the way: matching the ArraySortedMap name is going to be fun)", "author": "schmidt-sebastian", "createdAt": "2020-01-29T19:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU0NDE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "ef9206f95ed6dbbe447883a397d89e46d7b6f753", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java\nindex b3f03ae2..fcd80ff8 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java\n\n@@ -567,54 +565,53 @@ public class QueryTest {\n \n     Query baseQuery = Query.atPath(ResourcePath.fromString(\"collection\"));\n \n-    Map<Query, String> queryToCanoncialIdMap = new LinkedHashMap<>();\n-    queryToCanoncialIdMap.put(baseQuery, \"collection|f:|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(baseQuery, \"collection|f:|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \">\", \"a\")),\n         \"collection|f:a>a|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"<=\", new GeoPoint(90.0, 90.0))),\n         \"collection|f:a<=GeoPoint { latitude=90.0, longitude=90.0 }|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \">=\", Blob.fromBytes(new byte[] {1, 2, 3}))),\n         \"collection|f:a>=Blob { bytes=010203 }|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"==\", Arrays.asList(1, 2, 3))),\n         \"collection|f:a==[1, 2, 3]|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"==\", Double.NaN)),\n         \"collection|f:a==NaN|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"==\", map(\"a\", \"b\", \"inner\", map(\"d\", \"c\")))),\n         \"collection|f:a==ArraySortedMap{(a=>b), (inner=>ArraySortedMap{(d=>c)};)};|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"in\", Arrays.asList(1, 2, 3))),\n         \"collection|f:ain[1, 2, 3]|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"array-contains-any\", Arrays.asList(1, 2, 3))),\n         \"collection|f:aarray_contains_any[1, 2, 3]|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"array-contains\", \"a\")),\n         \"collection|f:aarray_containsa|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery.orderBy(orderBy(\"a\")), \"collection|f:|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery\n             .orderBy(orderBy(\"a\"))\n             .startAt(new Bound(Arrays.asList(wrap(\"foo\"), wrap(Arrays.asList(1, 2, 3))), true)),\n         \"collection|f:|ob:aasc__name__asc|lb:b:foo[1, 2, 3]|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n         baseQuery\n             .orderBy(orderBy(\"a\"))\n             .endAt(new Bound(Arrays.asList(wrap(\"foo\"), wrap(Arrays.asList(1, 2, 3))), false)),\n         \"collection|f:|ob:aasc__name__asc|ub:a:foo[1, 2, 3]|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n-        baseQuery.limitToLast(5), \"collection|f:|ob:__name__asc|l:5|lt:LIMIT_TO_FIRST\");\n-    queryToCanoncialIdMap.put(\n+    assertCanonicalId(\n+        baseQuery.limitToFirst(5), \"collection|f:|ob:__name__asc|l:5|lt:LIMIT_TO_FIRST\");\n+    assertCanonicalId(\n         baseQuery.limitToLast(5), \"collection|f:|ob:__name__desc|l:5|lt:LIMIT_TO_LAST\");\n+  }\n \n-    for (Map.Entry<Query, String> entry : queryToCanoncialIdMap.entrySet()) {\n-      assertEquals(entry.getValue(), entry.getKey().getCanonicalId());\n-    }\n+  private void assertCanonicalId(Query query, String expectedCanonicalId) {\n+    assertEquals(expectedCanonicalId, query.getCanonicalId());\n   }\n }\n"}}, {"oid": "ef9206f95ed6dbbe447883a397d89e46d7b6f753", "url": "https://github.com/firebase/firebase-android-sdk/commit/ef9206f95ed6dbbe447883a397d89e46d7b6f753", "message": "Add test helper", "committedDate": "2020-01-29T19:45:49Z", "type": "commit"}, {"oid": "63cb1feeb0fa94f9fe3655266cac5e8311be3c09", "url": "https://github.com/firebase/firebase-android-sdk/commit/63cb1feeb0fa94f9fe3655266cac5e8311be3c09", "message": "Add test for reference value", "committedDate": "2020-01-29T21:43:03Z", "type": "commit"}, {"oid": "c09a0ba802d283cb73aa25cae1500e3099e42ccf", "url": "https://github.com/firebase/firebase-android-sdk/commit/c09a0ba802d283cb73aa25cae1500e3099e42ccf", "message": "Add Timestamp", "committedDate": "2020-01-29T22:52:29Z", "type": "commit"}, {"oid": "c5d125753eb568785c7ca4d4777f57ad79496679", "url": "https://github.com/firebase/firebase-android-sdk/commit/c5d125753eb568785c7ca4d4777f57ad79496679", "message": "Update QueryTest.java", "committedDate": "2020-01-30T01:40:18Z", "type": "commit"}, {"oid": "7e66bd1d600c02a4dfda6c17ba243acbfe4cec41", "url": "https://github.com/firebase/firebase-android-sdk/commit/7e66bd1d600c02a4dfda6c17ba243acbfe4cec41", "message": "Use different values for GeoPoint and Timestamp", "committedDate": "2020-01-30T01:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5MjQ3OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1171#discussion_r372992478", "bodyText": "Thanks for adding this test!\nIt's the Target's canonical ID that is used in Target cache. Query canonical ID is only used in SpecTestCase and I have a TODO to remove it all together.\nCan you test Target.getCanonicalId() instead? Thanks!", "author": "wu-hui", "createdAt": "2020-01-30T14:49:40Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java", "diffHunk": "@@ -553,4 +558,67 @@ public void testMatchesAllDocuments() {\n     query = baseQuery.endAt(new Bound(Collections.emptyList(), true));\n     assertFalse(query.matchesAllDocuments());\n   }\n+\n+  @Test\n+  public void testCanonicalIdsAreStable() {\n+    // This test aims to ensure that we do not break canonical IDs, as they are used as keys in", "originalCommit": "7e66bd1d600c02a4dfda6c17ba243acbfe4cec41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxODE1Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1171#discussion_r373618156", "bodyText": "Done. It makes me wish we had a test class for Target though.", "author": "schmidt-sebastian", "createdAt": "2020-01-31T18:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5MjQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NTEwNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1171#discussion_r373685106", "bodyText": "Yeah, we probably should..", "author": "wu-hui", "createdAt": "2020-01-31T21:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk5MjQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "6655a44d8442a36a0e3bc2155a5fd17b8dc2aa76", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java\nindex 8f540365..5c119541 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryTest.java\n\n@@ -566,59 +566,54 @@ public class QueryTest {\n \n     Query baseQuery = Query.atPath(ResourcePath.fromString(\"collection\"));\n \n-    assertCanonicalId(baseQuery, \"collection|f:|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+    assertCanonicalId(baseQuery, \"collection|f:|ob:__name__asc\");\n     assertCanonicalId(\n-        baseQuery.filter(filter(\"a\", \">\", \"a\")),\n-        \"collection|f:a>a|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n+        baseQuery.filter(filter(\"a\", \">\", \"a\")), \"collection|f:a>a|ob:aasc__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"<=\", new GeoPoint(90.0, -90.0))),\n-        \"collection|f:a<=GeoPoint { latitude=90.0, longitude=-90.0 }|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:a<=GeoPoint { latitude=90.0, longitude=-90.0 }|ob:aasc__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"<=\", new Timestamp(60, 3000))),\n-        \"collection|f:a<=Timestamp(seconds=60, nanoseconds=3000)|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:a<=Timestamp(seconds=60, nanoseconds=3000)|ob:aasc__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \">=\", Blob.fromBytes(new byte[] {1, 2, 3}))),\n-        \"collection|f:a>=Blob { bytes=010203 }|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:a>=Blob { bytes=010203 }|ob:aasc__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"==\", Arrays.asList(1, 2, 3))),\n-        \"collection|f:a==[1, 2, 3]|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:a==[1, 2, 3]|ob:__name__asc\");\n     assertCanonicalId(\n-        baseQuery.filter(filter(\"a\", \"==\", Double.NaN)),\n-        \"collection|f:a==NaN|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+        baseQuery.filter(filter(\"a\", \"==\", Double.NaN)), \"collection|f:a==NaN|ob:__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"__name__\", \"==\", ref(\"collection/id\"))),\n-        \"collection|f:__name__==collection/id|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:__name__==collection/id|ob:__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"==\", map(\"a\", \"b\", \"inner\", map(\"d\", \"c\")))),\n-        \"collection|f:a==ArraySortedMap{(a=>b), (inner=>ArraySortedMap{(d=>c)};)};|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:a==ArraySortedMap{(a=>b), (inner=>ArraySortedMap{(d=>c)};)};|ob:__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"in\", Arrays.asList(1, 2, 3))),\n-        \"collection|f:ain[1, 2, 3]|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:ain[1, 2, 3]|ob:__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"array-contains-any\", Arrays.asList(1, 2, 3))),\n-        \"collection|f:aarray_contains_any[1, 2, 3]|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:aarray_contains_any[1, 2, 3]|ob:__name__asc\");\n     assertCanonicalId(\n         baseQuery.filter(filter(\"a\", \"array-contains\", \"a\")),\n-        \"collection|f:aarray_containsa|ob:__name__asc|lt:LIMIT_TO_FIRST\");\n-    assertCanonicalId(\n-        baseQuery.orderBy(orderBy(\"a\")), \"collection|f:|ob:aasc__name__asc|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:aarray_containsa|ob:__name__asc\");\n+    assertCanonicalId(baseQuery.orderBy(orderBy(\"a\")), \"collection|f:|ob:aasc__name__asc\");\n     assertCanonicalId(\n         baseQuery\n             .orderBy(orderBy(\"a\"))\n             .startAt(new Bound(Arrays.asList(wrap(\"foo\"), wrap(Arrays.asList(1, 2, 3))), true)),\n-        \"collection|f:|ob:aasc__name__asc|lb:b:foo[1, 2, 3]|lt:LIMIT_TO_FIRST\");\n+        \"collection|f:|ob:aasc__name__asc|lb:b:foo[1, 2, 3]\");\n     assertCanonicalId(\n         baseQuery\n             .orderBy(orderBy(\"a\"))\n             .endAt(new Bound(Arrays.asList(wrap(\"foo\"), wrap(Arrays.asList(1, 2, 3))), false)),\n-        \"collection|f:|ob:aasc__name__asc|ub:a:foo[1, 2, 3]|lt:LIMIT_TO_FIRST\");\n-    assertCanonicalId(\n-        baseQuery.limitToFirst(5), \"collection|f:|ob:__name__asc|l:5|lt:LIMIT_TO_FIRST\");\n-    assertCanonicalId(\n-        baseQuery.limitToLast(5), \"collection|f:|ob:__name__desc|l:5|lt:LIMIT_TO_LAST\");\n+        \"collection|f:|ob:aasc__name__asc|ub:a:foo[1, 2, 3]\");\n+    assertCanonicalId(baseQuery.limitToFirst(5), \"collection|f:|ob:__name__asc|l:5\");\n+    assertCanonicalId(baseQuery.limitToLast(5), \"collection|f:|ob:__name__desc|l:5\");\n   }\n \n   private void assertCanonicalId(Query query, String expectedCanonicalId) {\n-    assertEquals(expectedCanonicalId, query.getCanonicalId());\n+    assertEquals(expectedCanonicalId, query.toTarget().getCanonicalId());\n   }\n }\n"}}, {"oid": "6655a44d8442a36a0e3bc2155a5fd17b8dc2aa76", "url": "https://github.com/firebase/firebase-android-sdk/commit/6655a44d8442a36a0e3bc2155a5fd17b8dc2aa76", "message": "Use Target", "committedDate": "2020-01-31T18:22:12Z", "type": "commit"}]}