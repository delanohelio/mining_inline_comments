{"pr_number": 1367, "pr_title": "Add support for -DexclusiveSpecTest=<TestName> to SpecTestCase.", "pr_createdAt": "2020-03-18T18:13:16Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1367", "timeline": [{"oid": "2be88a3ebe7eeb6170740450348704ef72d8f55f", "url": "https://github.com/firebase/firebase-android-sdk/commit/2be88a3ebe7eeb6170740450348704ef72d8f55f", "message": "Add support for -DexclusiveSpecTest=<TestName> to SpecTestCase.", "committedDate": "2020-03-18T18:12:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDQwNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394574406", "bodyText": "What do you think of making this a filter and allowing Regular Expressions? It should maybe add one or two lines to this PR, but make this feature much easier to use (we don't have to specify the full test name) and more flexible (we could run a group of tests).", "author": "schmidt-sebastian", "createdAt": "2020-03-18T19:00:33Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java", "diffHunk": "@@ -132,6 +133,14 @@\n   // this tag and they'll all be run (but all others won't).\n   private static final String EXCLUSIVE_TAG = \"exclusive\";\n \n+  // The name of a Java system property ({@link System#getProperty(String)}) whose value is the name\n+  // of the sole spec test to execute. This is an alternative to setting the {@link #EXCLUSIVE_TAG}\n+  // tag, which requires modifying the JSON file. To use this property, specify\n+  // -DexclusiveSpecTest=<TestName> to the Java runtime, replacing <TestName> with the name of the\n+  // test to execute exclusively.  The <TestName> value is the result of appending the \"itName\" of\n+  // the test to its \"describeName\", separated by a space character.\n+  private static final String EXCLUSIVE_PROPERTY = \"exclusiveSpecTest\";", "originalCommit": "2be88a3ebe7eeb6170740450348704ef72d8f55f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MjE0Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394582147", "bodyText": "SGTM.  I'll make this change.", "author": "dconeybe", "createdAt": "2020-03-18T19:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "81f3bb704f1269044c14b820bbdd01da073192c5", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java\nindex 2b9216020..381b1d5fc 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java\n\n@@ -133,13 +134,15 @@ public abstract class SpecTestCase implements RemoteStoreCallback {\n   // this tag and they'll all be run (but all others won't).\n   private static final String EXCLUSIVE_TAG = \"exclusive\";\n \n-  // The name of a Java system property ({@link System#getProperty(String)}) whose value is the name\n-  // of the sole spec test to execute. This is an alternative to setting the {@link #EXCLUSIVE_TAG}\n-  // tag, which requires modifying the JSON file. To use this property, specify\n-  // -DexclusiveSpecTest=<TestName> to the Java runtime, replacing <TestName> with the name of the\n-  // test to execute exclusively.  The <TestName> value is the result of appending the \"itName\" of\n-  // the test to its \"describeName\", separated by a space character.\n-  private static final String EXCLUSIVE_PROPERTY = \"exclusiveSpecTest\";\n+  // The name of a Java system property ({@link System#getProperty(String)}) whose value is a filter\n+  // that specifies which tests to execute. The value of this property is a regular expression that\n+  // is matched against the name of each test. Using this property is an alternative to setting the\n+  // {@link #EXCLUSIVE_TAG} tag, which requires modifying the JSON file. To use this property,\n+  // specify -DspecTestFilter=<Regex> to the Java runtime, replacing <Regex> with a regular\n+  // expression; a test will be executed if and only if its name matches this regular expression.\n+  // In this context, a test's \"name\" is the result of appending its \"itName\" to its \"describeName\",\n+  // separated by a space character.\n+  private static final String TEST_FILTER_PROPERTY = \"specTestFilter\";\n \n   // Tags on tests that should be excluded from execution, useful to allow the platforms to\n   // temporarily diverge or for features that are designed to be platform specific (such as\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NTI0Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394575242", "bodyText": "If you go with regular expression approach, this could be System.getProperty(EXCLUSIVE_PROPERTY, \".*\"), in which case you can always apply the filter.", "author": "schmidt-sebastian", "createdAt": "2020-03-18T19:02:14Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java", "diffHunk": "@@ -1097,6 +1106,12 @@ public void testSpecTests() throws Exception {\n       parsedSpecFiles.add(new Pair<>(f.getName(), fileJSON));\n     }\n \n+    String exclusiveTestNameFromSystemProperty =\n+        emptyToNull(System.getProperty(EXCLUSIVE_PROPERTY));", "originalCommit": "2be88a3ebe7eeb6170740450348704ef72d8f55f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNzk2Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r395027962", "bodyText": "This won't work though because I need to be able to distinguish between the property being set or not being set.  The reason is that if it is set then exclusiveMode must be set to true and if it is not then it must be left alone.  By using a default value I cannot know if .* was specified explicitly or was the default value.", "author": "dconeybe", "createdAt": "2020-03-19T13:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NTI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "81f3bb704f1269044c14b820bbdd01da073192c5", "chunk": "diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java\nindex 2b9216020..381b1d5fc 100644\n--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java\n+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java\n\n@@ -1106,10 +1109,14 @@ public abstract class SpecTestCase implements RemoteStoreCallback {\n       parsedSpecFiles.add(new Pair<>(f.getName(), fileJSON));\n     }\n \n-    String exclusiveTestNameFromSystemProperty =\n-        emptyToNull(System.getProperty(EXCLUSIVE_PROPERTY));\n-    if (exclusiveTestNameFromSystemProperty != null) {\n+    String testNameFilterFromSystemProperty =\n+        emptyToNull(System.getProperty(TEST_FILTER_PROPERTY));\n+    Pattern testNameFilter;\n+    if (testNameFilterFromSystemProperty == null) {\n+      testNameFilter = null;\n+    } else {\n       exclusiveMode = true;\n+      testNameFilter = Pattern.compile(testNameFilterFromSystemProperty);\n     }\n \n     for (Pair<String, JSONObject> parsedSpecFile : parsedSpecFiles) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NjAxOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394576018", "bodyText": "We should try not to import more Guava dependencies, unless we want to make an exception for tests (cc @wu-hui).", "author": "schmidt-sebastian", "createdAt": "2020-03-18T19:03:36Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java", "diffHunk": "@@ -14,6 +14,7 @@\n \n package com.google.firebase.firestore.spec;\n \n+import static com.google.common.base.Strings.emptyToNull;", "originalCommit": "2be88a3ebe7eeb6170740450348704ef72d8f55f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MTMyMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394581322", "bodyText": "In my opinion, and exception for tests makes a lot of sense since there are no downstream dependencies on the test artifacts that could result in dependency mismatch conflicts.  Moreover, this class already imports com.google.common.collect.Sets from guava, so this is not a net new dependency on guava.", "author": "dconeybe", "createdAt": "2020-03-18T19:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NjAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5MjkyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394592926", "bodyText": "I am OK to import Guava in tests.\nAnd thanks for adding this, will be really handy to try to debug a specific test.", "author": "wu-hui", "createdAt": "2020-03-18T19:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NjAxOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "81f3bb704f1269044c14b820bbdd01da073192c5", "url": "https://github.com/firebase/firebase-android-sdk/commit/81f3bb704f1269044c14b820bbdd01da073192c5", "message": "Use a regex instead of an exact match for spec test filtering.", "committedDate": "2020-03-18T20:00:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMjYxMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394612612", "bodyText": "Optional: This could just be\n} else {\n runTest = testNameMatcher.matches(find);\n}", "author": "schmidt-sebastian", "createdAt": "2020-03-18T20:14:35Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java", "diffHunk": "@@ -1115,7 +1137,19 @@ public void testSpecTests() throws Exception {\n         JSONArray steps = testJSON.getJSONArray(\"steps\");\n         Set<String> tags = getTestTags(testJSON);\n \n-        boolean runTest = shouldRunTest(tags) && (!exclusiveMode || tags.contains(EXCLUSIVE_TAG));\n+        boolean runTest;\n+        if (!shouldRunTest(tags)) {\n+          runTest = false;\n+        } else if (!exclusiveMode) {\n+          runTest = true;\n+        } else if (tags.contains(EXCLUSIVE_TAG)) {\n+          runTest = true;\n+        } else if (testNameFilter != null) {\n+          runTest = testNameFilter.matcher(name).find();", "originalCommit": "81f3bb704f1269044c14b820bbdd01da073192c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxNDI3NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r394614275", "bodyText": "You should turn this into a Matcher right away, like such:\n if (testNameFilterFromSystemProperty == null) {\n      testNameFilterFromSystemProperty = \".*\";\n } else {\n      exclusiveMode = true;\n }\n Matcher testNameMatcher = Pattern.compile(testNameFilterFromSystemProperty).matcher();", "author": "schmidt-sebastian", "createdAt": "2020-03-18T20:17:35Z", "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java", "diffHunk": "@@ -1097,6 +1109,16 @@ public void testSpecTests() throws Exception {\n       parsedSpecFiles.add(new Pair<>(f.getName(), fileJSON));\n     }\n \n+    String testNameFilterFromSystemProperty =\n+        emptyToNull(System.getProperty(TEST_FILTER_PROPERTY));\n+    Pattern testNameFilter;", "originalCommit": "81f3bb704f1269044c14b820bbdd01da073192c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNjMwNQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1367#discussion_r395026305", "bodyText": "A Matcher object must be created with a string against which to match.  So we must create a new Matcher object for each test name.\nhttps://developer.android.com/reference/java/util/regex/Pattern#matcher(java.lang.CharSequence)", "author": "dconeybe", "createdAt": "2020-03-19T13:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxNDI3NQ=="}], "type": "inlineReview", "revised_code": null}]}