{"pr_number": 958, "pr_title": "Don't re-use *Exceptions when stored in static fields if enableSuppre\u2026", "pr_createdAt": "2020-03-05T20:00:00Z", "pr_url": "https://github.com/apple/servicetalk/pull/958", "timeline": [{"oid": "49ef379154d176822b2b9e8278762a3f8f67a739", "url": "https://github.com/apple/servicetalk/commit/49ef379154d176822b2b9e8278762a3f8f67a739", "message": "Fix test failure and improve debuggability", "committedDate": "2020-03-06T08:04:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxMjUyNw==", "url": "https://github.com/apple/servicetalk/pull/958#discussion_r389012527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // It is fine to reuse this instance and let it escape to the user as we enableSuppression is set to false\n          \n          \n            \n                    // while constructing it.\n          \n          \n            \n                    // It is fine to reuse this instance and let it escape to the user as enableSuppression is set to false.", "author": "NiteshKant", "createdAt": "2020-03-06T16:40:58Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RepeatStrategies.java", "diffHunk": "@@ -35,6 +35,8 @@\n     public static final class TerminateRepeatException extends Exception {\n         private static final long serialVersionUID = -1725458427890873886L;\n \n+        // It is fine to reuse this instance and let it escape to the user as we enableSuppression is set to false\n+        // while constructing it.", "originalCommit": "1e94a728a334b1990f58630f87b1fd9d7bac58d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a49edb8e598b1ee77b061255b40bca5d92928922", "chunk": "diff --git a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RepeatStrategies.java b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RepeatStrategies.java\nindex 8865bf6bb..9a6ebad2e 100644\n--- a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RepeatStrategies.java\n+++ b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RepeatStrategies.java\n\n@@ -35,8 +35,7 @@ public final class RepeatStrategies {\n     public static final class TerminateRepeatException extends Exception {\n         private static final long serialVersionUID = -1725458427890873886L;\n \n-        // It is fine to reuse this instance and let it escape to the user as we enableSuppression is set to false\n-        // while constructing it.\n+        // It is fine to reuse this instance and let it escape to the user as enableSuppression is set to false.\n         static final TerminateRepeatException INSTANCE = new TerminateRepeatException();\n \n         // Package-private as the user should never instance it.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNTc5MQ==", "url": "https://github.com/apple/servicetalk/pull/958#discussion_r389015791", "bodyText": "Interesting that the quality task did not complain of the lack of javadoc in a public class \\cc @idelpivnitskiy\nCan you add javadocs here and for newInstance() method?", "author": "NiteshKant", "createdAt": "2020-03-06T16:46:36Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/StacklessClosedChannelException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.servicetalk.concurrent.internal.ThrowableUtils;\n+\n+import java.nio.channels.ClosedChannelException;\n+\n+public final class StacklessClosedChannelException extends ClosedChannelException {", "originalCommit": "1e94a728a334b1990f58630f87b1fd9d7bac58d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4NDQ0OA==", "url": "https://github.com/apple/servicetalk/pull/958#discussion_r389584448", "bodyText": "done... not resolving this so @idelpivnitskiy can still see it tho...", "author": "normanmaurer", "createdAt": "2020-03-09T10:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNTc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNzI3OQ==", "url": "https://github.com/apple/servicetalk/pull/958#discussion_r389837279", "bodyText": "Interesting, checkstyle introduced new improved rules for javadoc checks:\nMissingJavadocMethod\nMissingJavadocPackage\nMissingJavadocType\nSee https://checkstyle.sourceforge.io/config_javadoc.html#MissingJavadocMethod\nThe old rules (JavadocMethod, JavadocPackage, JavadocType) work as regex, when new rules work on checkstyle token parsing. And it looks like the old rules do not work correctly anymore. I tried locally this PR, when I activate MissingJavadocMethod rule, it captures this class (for the previous commit).", "author": "idelpivnitskiy", "createdAt": "2020-03-09T17:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNTc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2aeaf5b59ab9c73add0c91a31338a35aaf14735", "chunk": "diff --git a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/StacklessClosedChannelException.java b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/StacklessClosedChannelException.java\nindex 7a516548f..2918f5f69 100644\n--- a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/StacklessClosedChannelException.java\n+++ b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/StacklessClosedChannelException.java\n\n@@ -15,21 +15,13 @@\n  */\n package io.servicetalk.transport.netty.internal;\n \n-import io.servicetalk.concurrent.internal.ThrowableUtils;\n-\n import java.nio.channels.ClosedChannelException;\n \n public final class StacklessClosedChannelException extends ClosedChannelException {\n \n-    private StacklessClosedChannelException() { }\n-\n     @Override\n     public Throwable fillInStackTrace() {\n         // Don't fill in the stacktrace to reduce performance overhead\n         return this;\n     }\n-\n-    public static StacklessClosedChannelException newInstance(Class<?> clazz, String method) {\n-        return ThrowableUtils.unknownStackTrace(new StacklessClosedChannelException(), clazz, method);\n-    }\n }\n"}}, {"oid": "e2aeaf5b59ab9c73add0c91a31338a35aaf14735", "url": "https://github.com/apple/servicetalk/commit/e2aeaf5b59ab9c73add0c91a31338a35aaf14735", "message": "Don't re-use *Exceptions when stored in static fields if enableSuppression can not be set to false\n\nMotivation:\n\nHave a static instance of an Exception which does not set enableSuppression to false when constructed is considered to be dangerous as it may escape to the user where an user may add more exceptions to it. The problem with this is that the internal storage will grow and grow over time and never be GC'ed. This can lead to OOME situations.\n\nModifications:\n\nCreate new *Exceptions when needed and remove usage of static stored *Exceptions if needed.\n\nResult:\n\nNo more risk of OOME due user calling `addSuppressed` on exceptions that are propagated through the code", "committedDate": "2020-03-09T11:06:00Z", "type": "commit"}, {"oid": "3db5c7bf3c886049de97f0d99692ff49508ea50b", "url": "https://github.com/apple/servicetalk/commit/3db5c7bf3c886049de97f0d99692ff49508ea50b", "message": "Fix test failure and improve debuggability", "committedDate": "2020-03-09T11:06:01Z", "type": "commit"}, {"oid": "c17fd861d5dc772fd31542f21e336922f98d31b6", "url": "https://github.com/apple/servicetalk/commit/c17fd861d5dc772fd31542f21e336922f98d31b6", "message": "checkstyle", "committedDate": "2020-03-09T11:06:01Z", "type": "commit"}, {"oid": "5d42fbf637816fb046cc57dd3cd308fefc84a6a0", "url": "https://github.com/apple/servicetalk/commit/5d42fbf637816fb046cc57dd3cd308fefc84a6a0", "message": "more checkstyle", "committedDate": "2020-03-09T11:06:01Z", "type": "commit"}, {"oid": "a49edb8e598b1ee77b061255b40bca5d92928922", "url": "https://github.com/apple/servicetalk/commit/a49edb8e598b1ee77b061255b40bca5d92928922", "message": "Update servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RepeatStrategies.java\r\n\r\nUpdate comment\n\nCo-Authored-By: Nitesh Kant <nitesh_kant@apple.com>", "committedDate": "2020-03-09T11:06:01Z", "type": "commit"}, {"oid": "72191bab4b5f90b91e11225a72e32daa070e4375", "url": "https://github.com/apple/servicetalk/commit/72191bab4b5f90b91e11225a72e32daa070e4375", "message": "Add javadocs", "committedDate": "2020-03-09T11:06:01Z", "type": "commit"}, {"oid": "72191bab4b5f90b91e11225a72e32daa070e4375", "url": "https://github.com/apple/servicetalk/commit/72191bab4b5f90b91e11225a72e32daa070e4375", "message": "Add javadocs", "committedDate": "2020-03-09T11:06:01Z", "type": "forcePushed"}]}