{"pr_number": 968, "pr_title": "JDK provider incorrectly configures default ciphers for TLSv1.3", "pr_createdAt": "2020-03-16T16:52:47Z", "pr_url": "https://github.com/apple/servicetalk/pull/968", "timeline": [{"oid": "19e9f3644a634783c840e13c1ad481d80634e75e", "url": "https://github.com/apple/servicetalk/commit/19e9f3644a634783c840e13c1ad481d80634e75e", "message": "JDK provider incorrectly configures default ciphers for TLSv1.3\n\nMotivation:\n\nWe use the old approach of configuring secure protocols in netty via\n`SSLEngine#setEnabledProtocols(...)`. In this case, `SslContextBuilder`\ndoes not know if users configure TLSv1.3 or not and therefore, sets\nincorrect set of default ciphers which does not support TLSv1.3.\nAs the result, users see:\njavax.net.ssl.SSLHandshakeException: No appropriate protocol\n(protocol is disabled or cipher suites are inappropriate).\n\nModifications:\n\n- Use `SslContextBuilder#protocols(...)` instead of\n`SSLEngine#setEnabledProtocols(...)` to set secure protocols;\n- Delete `WrappingSslContext` that is not required anymore;\n\nResult:\n\n`SslContextBuilder` correctly sets default ciphers when TLSv1.3\nis present.", "committedDate": "2020-03-14T01:15:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyODgwNw==", "url": "https://github.com/apple/servicetalk/pull/968#discussion_r393228807", "bodyText": "Can we also verify the cipher here?", "author": "NiteshKant", "createdAt": "2020-03-16T18:25:21Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/Tls13Test.java", "diffHunk": "@@ -40,61 +50,88 @@\n import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n import static java.util.Objects.requireNonNull;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.Matchers.notNullValue;\n \n @RunWith(Parameterized.class)\n public class Tls13Test {\n     private static final String TLS1_3 = \"TLSv1.3\";\n     private static final String TLS1_3_REQUIRED_CIPHER = \"TLS_AES_128_GCM_SHA256\";\n \n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n     private final SslProvider serverSslProvider;\n     private final SslProvider clientSslProvider;\n+    @Nullable\n+    private final String cipher;\n \n-    public Tls13Test(SslProvider serverSslProvider, SslProvider clientSslProvider) {\n+    public Tls13Test(SslProvider serverSslProvider, SslProvider clientSslProvider, @Nullable String cipher) {\n         this.serverSslProvider = requireNonNull(serverSslProvider);\n         this.clientSslProvider = requireNonNull(clientSslProvider);\n+        this.cipher = cipher;\n     }\n \n-    @Parameterized.Parameters(name = \"server={0} client={1}\")\n+    @Parameterized.Parameters(name = \"server={0} client={1} cipher={2}\")\n     public static Collection<Object[]> sslProviders() {\n         // TLSv1.3 is not currently supported in JDK8.\n-        return javaVersion() < 11 ? singletonList(new Object[]{OPENSSL, OPENSSL}) :\n-                asList(new Object[]{JDK, JDK},\n-                        new Object[]{JDK, OPENSSL},\n-                        new Object[]{OPENSSL, JDK},\n-                        new Object[]{OPENSSL, OPENSSL}\n+        return javaVersion() < 11 ?\n+                asList(new Object[]{OPENSSL, OPENSSL, null},\n+                        new Object[]{OPENSSL, OPENSSL, TLS1_3_REQUIRED_CIPHER}) :\n+                asList(new Object[]{JDK, JDK, null},\n+                        new Object[]{JDK, JDK, TLS1_3_REQUIRED_CIPHER},\n+                        new Object[]{JDK, OPENSSL, null},\n+                        new Object[]{JDK, OPENSSL, TLS1_3_REQUIRED_CIPHER},\n+                        new Object[]{OPENSSL, JDK, null},\n+                        new Object[]{OPENSSL, JDK, TLS1_3_REQUIRED_CIPHER},\n+                        new Object[]{OPENSSL, OPENSSL, null},\n+                        new Object[]{OPENSSL, OPENSSL, TLS1_3_REQUIRED_CIPHER}\n         );\n     }\n \n     @Test\n     public void requiredCipher() throws Exception {\n-        try (ServerContext serverContext = HttpServers.forAddress(localAddress(0))\n+        HttpServerSecurityConfigurator serverSecurityConfigurator = HttpServers.forAddress(localAddress(0))\n                 .secure()\n                 .protocols(TLS1_3)\n-                .ciphers(singletonList(TLS1_3_REQUIRED_CIPHER))\n-                .provider(serverSslProvider)\n+                .provider(serverSslProvider);\n+        if (cipher != null) {\n+            serverSecurityConfigurator.ciphers(singletonList(cipher));\n+        }\n+        try (ServerContext serverContext = serverSecurityConfigurator\n                 .commit(DefaultTestCerts::loadServerPem, DefaultTestCerts::loadServerKey)\n-                .listenBlockingAndAwait((ctx, request, responseFactory) -> responseFactory.ok()\n-                        .payloadBody(request.payloadBody(textDeserializer()), textSerializer()))) {\n+                .listenBlockingAndAwait((ctx, request, responseFactory) -> {\n+                    assertThat(request.payloadBody(textDeserializer()), equalTo(\"request-payload-body\"));\n+                    SSLSession sslSession = ctx.sslSession();\n+                    assertThat(sslSession, is(notNullValue()));", "originalCommit": "19e9f3644a634783c840e13c1ad481d80634e75e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fef0366f17c30c5a31da37e9b8a57a7a0f5a0735", "chunk": "diff --git a/servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/Tls13Test.java b/servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/Tls13Test.java\nindex d3d59d9c2..e5a3a9fb5 100644\n--- a/servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/Tls13Test.java\n+++ b/servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/Tls13Test.java\n\n@@ -126,6 +126,9 @@ public class Tls13Test {\n                 SSLSession sslSession = connection.connectionContext().sslSession();\n                 assertThat(sslSession, is(notNullValue()));\n                 assertThat(sslSession.getProtocol(), equalTo(TLS1_3));\n+                if (cipher != null) {\n+                    assertThat(sslSession.getCipherSuite(), equalTo(cipher));\n+                }\n                 HttpResponse response = client.request(client.post(\"/\")\n                         .payloadBody(\"request-payload-body\", textSerializer()));\n \n"}}, {"oid": "fef0366f17c30c5a31da37e9b8a57a7a0f5a0735", "url": "https://github.com/apple/servicetalk/commit/fef0366f17c30c5a31da37e9b8a57a7a0f5a0735", "message": "assert cipher", "committedDate": "2020-03-16T18:52:23Z", "type": "commit"}]}