{"pr_number": 1118, "pr_title": "Introduce `CatchAllTransportObserver` that catches and logs unexpected exceptions", "pr_createdAt": "2020-08-07T17:25:21Z", "pr_url": "https://github.com/apple/servicetalk/pull/1118", "timeline": [{"oid": "33d31fe488e54a3d08e6380ec7f7b67edf08f0ce", "url": "https://github.com/apple/servicetalk/commit/33d31fe488e54a3d08e6380ec7f7b67edf08f0ce", "message": "Introduce `CatchAllTransportObserver` that catches and logs unexpected exceptions\n\nMotivation:\n\nWe have to make sure that all invocations of observer methods are safe and do not\nimpact normal ST operations. Currently, we do that via `safeReport` utilities that\nare used everywhere. It's easy to forget to make an invocation safe in all places.\n\nModifications:\n\n- Add `CatchAllTransportObserver` implementation that makes sure all unexpected\nexceptions are logged;\n- Wrap the passed `TransportObserver` with `CatchAllTransportObserver` instead of\nusing `safeReport` utilities for all invocations of observer API;\n\nResult:\n\nSingle places that makes sure all calls to `TransportObserver` are safe and do not\nthrow an exception.", "committedDate": "2020-08-07T01:18:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MzE5MA==", "url": "https://github.com/apple/servicetalk/pull/1118#discussion_r467173190", "bodyText": "Should I make it public to be able to use in TransportObserverConnectionFactoryFilter with BiTransportObserver?", "author": "idelpivnitskiy", "createdAt": "2020-08-07T17:26:39Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/CatchAllTransportObserver.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopConnectionObserver;\n+import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopDataObserver;\n+import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopMultiplexedObserver;\n+import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopReadObserver;\n+import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopSecurityHandshakeObserver;\n+import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopStreamObserver;\n+import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopWriteObserver;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import javax.net.ssl.SSLSession;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * {@link TransportObserver} wrapper that catches and logs all exceptions.\n+ */\n+final class CatchAllTransportObserver implements TransportObserver {", "originalCommit": "33d31fe488e54a3d08e6380ec7f7b67edf08f0ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2MzIxOQ==", "url": "https://github.com/apple/servicetalk/pull/1118#discussion_r467263219", "bodyText": "Usage in BiTransportObserver is a weaker reason to make this public (it can assume the passed observers are already wrapped) but I think this functionality is useful in general.\nInstead of exposing this implementation publicly WDYT about having TransportObservers class which can have a method asSafeObserver(TransportObserver) (and other variants if needed) so users can choose to partially wrap observers wherever required. Additionally we can check in that method if the passed observer is already wrapped and short-circuit the wrapping.", "author": "NiteshKant", "createdAt": "2020-08-07T20:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MzE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "bc0706b79d72f89c3cf203b509edf2b5d276fc83", "chunk": "diff --git a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/CatchAllTransportObserver.java b/servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/CatchAllTransportObserver.java\nsimilarity index 91%\nrename from servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/CatchAllTransportObserver.java\nrename to servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/CatchAllTransportObserver.java\nindex eb3463920..e4738e164 100644\n--- a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/CatchAllTransportObserver.java\n+++ b/servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/CatchAllTransportObserver.java\n\n@@ -13,24 +13,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package io.servicetalk.transport.netty.internal;\n+package io.servicetalk.transport.api;\n \n-import io.servicetalk.transport.api.ConnectionInfo;\n-import io.servicetalk.transport.api.ConnectionObserver;\n import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n-import io.servicetalk.transport.api.TransportObserver;\n-import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopConnectionObserver;\n-import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopDataObserver;\n-import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopMultiplexedObserver;\n-import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopReadObserver;\n-import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopSecurityHandshakeObserver;\n-import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopStreamObserver;\n-import io.servicetalk.transport.netty.internal.NoopTransportObserver.NoopWriteObserver;\n+import io.servicetalk.transport.api.NoopTransportObserver.NoopConnectionObserver;\n+import io.servicetalk.transport.api.NoopTransportObserver.NoopDataObserver;\n+import io.servicetalk.transport.api.NoopTransportObserver.NoopMultiplexedObserver;\n+import io.servicetalk.transport.api.NoopTransportObserver.NoopReadObserver;\n+import io.servicetalk.transport.api.NoopTransportObserver.NoopSecurityHandshakeObserver;\n+import io.servicetalk.transport.api.NoopTransportObserver.NoopStreamObserver;\n+import io.servicetalk.transport.api.NoopTransportObserver.NoopWriteObserver;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"oid": "bc0706b79d72f89c3cf203b509edf2b5d276fc83", "url": "https://github.com/apple/servicetalk/commit/bc0706b79d72f89c3cf203b509edf2b5d276fc83", "message": "Introduce `TransportObservers`", "committedDate": "2020-08-10T19:17:12Z", "type": "commit"}, {"oid": "8f35da1cef4fbec11c2b478e4b5cc45157b2c085", "url": "https://github.com/apple/servicetalk/commit/8f35da1cef4fbec11c2b478e4b5cc45157b2c085", "message": "Merge remote-tracking branch 'upstream/transport-observability' into catch-all-to", "committedDate": "2020-08-10T19:19:03Z", "type": "commit"}]}