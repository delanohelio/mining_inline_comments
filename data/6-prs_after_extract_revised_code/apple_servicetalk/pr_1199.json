{"pr_number": 1199, "pr_title": "Introduce primitives to control internal log level", "pr_createdAt": "2020-11-06T05:46:46Z", "pr_url": "https://github.com/apple/servicetalk/pull/1199", "timeline": [{"oid": "bbe905e8ac6d4a41acd1f156e35ecb05fd1c7436", "url": "https://github.com/apple/servicetalk/commit/bbe905e8ac6d4a41acd1f156e35ecb05fd1c7436", "message": "Introduce primitives to control internal log level\n\nMotivation:\nServiceTalk can generate logs internally. These logs are either at a\nfixed level hard coded by ServiceTalk devs, or taken dynamically at the\ntime of creation based upon the logging configuration. The first\napproach is too ridged and may not be appropriate for the application's\nlogging level filtering (e.g. trace logs are never logged, or go against\nlogging configuration policies), or take the log level at a snapshot in\ntime which doesn't allow for practical filtering (e.g. log level may\nstart at OFF, and be switched to non-OFF value later when debugging, and\nThresholdFilters are not commonly used and introduce performance\noverhead because isEnabled() pre-checks will succeed resulting in\nwasted string building).\n\nModifications:\n- Introduce a way to explicitly configure the logging level for\ninteresting cases (e.g. wire logging, h2 frame logging, zipkin logging\nreporter)\n- Introduce a way to avoid logging user data for wire logging and h2\nframe logging so it can be enabled in production.\n\nResult:\nPrimitives exits such that Applications can more explicitly control the\nlog level used internally by ServiceTalk.", "committedDate": "2020-11-06T05:36:27Z", "type": "commit"}, {"oid": "e6e0d1a2e55d08c7e476ed04bc11faf17628308c", "url": "https://github.com/apple/servicetalk/commit/e6e0d1a2e55d08c7e476ed04bc11faf17628308c", "message": "default to not logging user data", "committedDate": "2020-11-06T21:29:21Z", "type": "commit"}, {"oid": "7a29d9e7530828e51e6df06fb7e90ffb4b8e8612", "url": "https://github.com/apple/servicetalk/commit/7a29d9e7530828e51e6df06fb7e90ffb4b8e8612", "message": "add APIs to use the new wire log config at the builder", "committedDate": "2020-11-06T23:05:40Z", "type": "commit"}, {"oid": "7044adb6196472e913261f7e9f40fa9a36246d79", "url": "https://github.com/apple/servicetalk/commit/7044adb6196472e913261f7e9f40fa9a36246d79", "message": "remove debug log config", "committedDate": "2020-11-06T23:09:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NzU5MA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519057590", "bodyText": "IIUC, this is the only place that exposes FixedLevelLogger at public API. I worry that people will use the FixedLevelLogger interface in their apps.\nWDYT if we will move FixedLevelLogger to servicetalk-logging-slf4j-internal module and instead will just provide something like LoggerConfig interface/class (LoggerConfig.of(...)?) that will have a name and level (maybe even \"userData\" flag)?\nBenefits:\n\nIt will simplify H2ProtocolConfig API. Users who decided to have their own implementation won't need to implement FixedLevelLogger interface.\nThere are cases when we do not need FixedLevelLogger at all. For example, netty's LoggingHandler can be configured based on LoggerConfig.", "author": "idelpivnitskiy", "createdAt": "2020-11-06T23:43:14Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java", "diffHunk": "@@ -46,14 +45,20 @@ default String alpnId() {\n     BiPredicate<CharSequence, CharSequence> headersSensitivityDetector();\n \n     /**\n-     * Logger name for HTTP/2 frames.\n-     * <p>\n-     * All frames will be logged at {@link Level#TRACE TRACE} level.\n+     * Logger for HTTP/2 frames.\n      *\n-     * @return the name of the logger to log HTTP/2 frames or {@code null} to disable it\n+     * @return the logger to use for HTTP/2 frames or {@code null} to disable it\n      */\n     @Nullable\n-    String frameLoggerName();\n+    FixedLevelLogger frameLogger();", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2ODcwMg==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520168702", "bodyText": "I agree the visibility of FixedLevelLogger should be reduced out of API.", "author": "Scottmitch", "createdAt": "2020-11-09T22:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NzU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java\nindex e0c57bc48..4be58f45b 100644\n--- a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java\n+++ b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java\n\n@@ -45,20 +45,12 @@ public interface H2ProtocolConfig extends HttpProtocolConfig {\n     BiPredicate<CharSequence, CharSequence> headersSensitivityDetector();\n \n     /**\n-     * Logger for HTTP/2 frames.\n+     * Get the logger configuration for HTTP/2 frames.\n      *\n-     * @return the logger to use for HTTP/2 frames or {@code null} to disable it\n+     * @return the logger configuration to use for HTTP/2 frames or {@code null} to disable it.\n      */\n     @Nullable\n-    FixedLevelLogger frameLogger();\n-\n-    /**\n-     * Determine if {@link #frameLogger()} (if present) should be used to log user data (e.g. data, headers, etc.).\n-     *\n-     * @return {@code true} if {@link #frameLogger()} should be used to log user data (e.g. data, headers, etc.).\n-     * {@code false} to exclude user data.\n-     */\n-    boolean frameLoggerUserData();\n+    UserDataLoggerConfig frameLoggerConfig();\n \n     /**\n      * Configured {@link KeepAlivePolicy}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1OTA0OQ==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519059049", "bodyText": "Then we can reuse LoggerConfig here as well to make configuration consistent.", "author": "idelpivnitskiy", "createdAt": "2020-11-06T23:49:23Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpServerBuilder.java", "diffHunk": "@@ -116,14 +115,23 @@\n \n     /**\n      * Enables wire-logging for this server.\n-     * <p>\n-     * All wire events will be logged at {@link Level#TRACE TRACE} level.\n      *\n      * @param loggerName The name of the logger to log wire events.\n      * @return {@code this}.\n      */\n     public abstract HttpServerBuilder enableWireLogging(String loggerName);\n \n+    /**\n+     * Enables wire-logging for this server.\n+     *\n+     * @param loggerName The name of the logger to log wire events.\n+     * @param logLevel The level to log at.\n+     * @param logUserData {@code true} to include user data (e.g. data, headers, etc.). {@code false} to exclude this\n+     * data.\n+     * @return {@code this}.\n+     */\n+    public abstract HttpServerBuilder enableWireLogging(String loggerName, LogLevel logLevel, boolean logUserData);", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpServerBuilder.java b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpServerBuilder.java\nindex a95feaba3..19fedc9df 100644\n--- a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpServerBuilder.java\n+++ b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpServerBuilder.java\n\n@@ -115,10 +116,12 @@ public abstract class HttpServerBuilder {\n \n     /**\n      * Enables wire-logging for this server.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #enableWireLogging(String, LogLevel, BooleanSupplier)} instead.\n      * @param loggerName The name of the logger to log wire events.\n      * @return {@code this}.\n      */\n+    @Deprecated\n     public abstract HttpServerBuilder enableWireLogging(String loggerName);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1OTgwMw==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519059803", "bodyText": "Thinking about enabling logging at runtime... It seems useful to be able to contol ability to log user data via logger configuration as well.\nWe may consider configuring 2 wire logging handlers internally with different names: one that includes user data and one without user data. Then users can reload log4j2 configuration to enable one of these 2 loggers, depending on the issue they need to debug.", "author": "idelpivnitskiy", "createdAt": "2020-11-06T23:52:38Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java", "diffHunk": "@@ -73,14 +72,25 @@\n \n     /**\n      * Enables wire-logging for connections created by this builder.\n-     * <p>\n-     * All wire events will be logged at {@link Level#TRACE TRACE} level.\n      *\n      * @param loggerName The name of the logger to log wire events.\n      * @return {@code this}.\n      */\n     public abstract BaseHttpBuilder<ResolvedAddress> enableWireLogging(String loggerName);\n \n+    /**\n+     * Enables wire-logging for connections created by this builder.\n+     *\n+     * @param loggerName The name of the logger to log wire events.\n+     * @param logLevel The level to log at.\n+     * @param logUserData {@code true} to include user data (e.g. data, headers, etc.). {@code false} to exclude this\n+     * data.\n+     * @return {@code this}.\n+     */\n+    public abstract BaseHttpBuilder<ResolvedAddress> enableWireLogging(String loggerName,\n+                                                                       LogLevel logLevel,\n+                                                                       boolean logUserData);", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3MTg1Mg==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520171852", "bodyText": "I'm not sure this level of dynamic switching is necessary but it can be accomplished with minimal overhead by using a BooleanSupplier.", "author": "Scottmitch", "createdAt": "2020-11-09T22:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1OTgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNzY1MA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520207650", "bodyText": "Good idea with BooleanSupplier \ud83c\udf96\ufe0f", "author": "idelpivnitskiy", "createdAt": "2020-11-10T00:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1OTgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\nindex 879cfc9ef..6551ef329 100644\n--- a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\n+++ b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\n\n@@ -72,10 +73,12 @@ abstract class BaseHttpBuilder<ResolvedAddress> {\n \n     /**\n      * Enables wire-logging for connections created by this builder.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #enableWireLogging(String, LogLevel, BooleanSupplier)} instead.\n      * @param loggerName The name of the logger to log wire events.\n      * @return {@code this}.\n      */\n+    @Deprecated\n     public abstract BaseHttpBuilder<ResolvedAddress> enableWireLogging(String loggerName);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MjAzNg==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519062036", "bodyText": "This code duplicates what we do in H2ClientParentChannelInitializer. Consider moving it to a utility method and reusing. It can be in one of these h2-initializers or in ServiceTalkHttp2FrameLogger.", "author": "idelpivnitskiy", "createdAt": "2020-11-07T00:02:05Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java", "diffHunk": "@@ -54,12 +52,10 @@ public void init(final Channel channel) {\n                 config.headersSensitivityDetector();\n         multiplexCodecBuilder.headerSensitivityDetector(headersSensitivityDetector::test);\n \n-        final String frameLoggerName = config.frameLoggerName();\n-        if (frameLoggerName != null) {\n-            LogLevel logLevel = getNettyLogLevel(frameLoggerName);\n-            if (logLevel != null) {\n-                multiplexCodecBuilder.frameLogger(new Http2FrameLogger(logLevel, frameLoggerName));\n-            }\n+        final FixedLevelLogger frameLogger = config.frameLogger();\n+        if (frameLogger != null) {\n+            multiplexCodecBuilder.frameLogger(\n+                    new ServiceTalkHttp2FrameLogger(frameLogger, config.frameLoggerUserData()));", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java\nindex 8f01d04d0..4658e2186 100644\n--- a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java\n+++ b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java\n\n@@ -52,14 +54,19 @@ final class H2ServerParentChannelInitializer implements ChannelInitializer {\n                 config.headersSensitivityDetector();\n         multiplexCodecBuilder.headerSensitivityDetector(headersSensitivityDetector::test);\n \n-        final FixedLevelLogger frameLogger = config.frameLogger();\n-        if (frameLogger != null) {\n-            multiplexCodecBuilder.frameLogger(\n-                    new ServiceTalkHttp2FrameLogger(frameLogger, config.frameLoggerUserData()));\n-        }\n+        initFrameLogger(multiplexCodecBuilder, config.frameLoggerConfig());\n \n         // TODO(scott): more configuration. header validation, settings stream, etc...\n \n         channel.pipeline().addLast(multiplexCodecBuilder.build(), new Http2MultiplexHandler(streamChannelInitializer));\n     }\n+\n+    static void initFrameLogger(final Http2FrameCodecBuilder multiplexCodecBuilder,\n+                                        @Nullable final UserDataLoggerConfig frameLoggerConfig) {\n+        if (frameLoggerConfig != null) {\n+            multiplexCodecBuilder.frameLogger(\n+                    new ServiceTalkHttp2FrameLogger(newLogger(frameLoggerConfig.loggerName(),\n+                            frameLoggerConfig.logLevel()), frameLoggerConfig.logUserData()));\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MjM2MQ==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519062361", "bodyText": "Will be great to enhance Http2FrameLogger in netty to support \"logUserData\" option in future. Looks like a useful feature for all netty users.", "author": "idelpivnitskiy", "createdAt": "2020-11-07T00:03:31Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ServiceTalkHttp2FrameLogger.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.logging.api.FixedLevelLogger;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http2.Http2Flags;\n+import io.netty.handler.codec.http2.Http2FrameLogger;\n+import io.netty.handler.codec.http2.Http2Headers;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.logging.LogLevel;\n+\n+final class ServiceTalkHttp2FrameLogger extends Http2FrameLogger {\n+    private static final int BUFFER_LENGTH_THRESHOLD = 64;\n+    private final FixedLevelLogger logger;\n+    private final boolean logUserData;\n+\n+    ServiceTalkHttp2FrameLogger(final FixedLevelLogger logger, final boolean logUserData) {", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4MTgyOQ==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519081829", "bodyText": "agreed this is a candidate to upstream", "author": "Scottmitch", "createdAt": "2020-11-07T02:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MjM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ServiceTalkHttp2FrameLogger.java b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ServiceTalkHttp2FrameLogger.java\nindex 395af6aeb..0dec9e2e4 100644\n--- a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ServiceTalkHttp2FrameLogger.java\n+++ b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ServiceTalkHttp2FrameLogger.java\n\n@@ -15,7 +15,7 @@\n  */\n package io.servicetalk.http.netty;\n \n-import io.servicetalk.logging.api.FixedLevelLogger;\n+import io.servicetalk.logging.slf4j.internal.FixedLevelLogger;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufUtil;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MzYxMw==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519063613", "bodyText": "Comment for all occurances of enableWireLogging method:\nShould we mark the existing enableWireLogging methods as deprecated? If not and you prefer to keep both, it's better to keep this info in javadoc, add desciption that this method logs all user data, and reference another overload if users need more customization.", "author": "idelpivnitskiy", "createdAt": "2020-11-07T00:09:26Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java", "diffHunk": "@@ -73,14 +72,25 @@\n \n     /**\n      * Enables wire-logging for connections created by this builder.\n-     * <p>\n-     * All wire events will be logged at {@link Level#TRACE TRACE} level.", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MDgyNw==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520180827", "bodyText": "I'll just deprecate the methods and remove the logs for now, we can remove them in the next release.", "author": "Scottmitch", "createdAt": "2020-11-09T23:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MzYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\nindex 879cfc9ef..6551ef329 100644\n--- a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\n+++ b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\n\n@@ -72,10 +73,12 @@ abstract class BaseHttpBuilder<ResolvedAddress> {\n \n     /**\n      * Enables wire-logging for connections created by this builder.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #enableWireLogging(String, LogLevel, BooleanSupplier)} instead.\n      * @param loggerName The name of the logger to log wire events.\n      * @return {@code this}.\n      */\n+    @Deprecated\n     public abstract BaseHttpBuilder<ResolvedAddress> enableWireLogging(String loggerName);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NDE5OA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519064198", "bodyText": "\"to exclude this data\" is a bit confusing because you do not know what to expect in this case. Consider clarifying: {@code false} to exclude this data and log only network events", "author": "idelpivnitskiy", "createdAt": "2020-11-07T00:12:20Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java", "diffHunk": "@@ -73,14 +72,25 @@\n \n     /**\n      * Enables wire-logging for connections created by this builder.\n-     * <p>\n-     * All wire events will be logged at {@link Level#TRACE TRACE} level.\n      *\n      * @param loggerName The name of the logger to log wire events.\n      * @return {@code this}.\n      */\n     public abstract BaseHttpBuilder<ResolvedAddress> enableWireLogging(String loggerName);\n \n+    /**\n+     * Enables wire-logging for connections created by this builder.\n+     *\n+     * @param loggerName The name of the logger to log wire events.\n+     * @param logLevel The level to log at.\n+     * @param logUserData {@code true} to include user data (e.g. data, headers, etc.). {@code false} to exclude this\n+     * data.", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\nindex 879cfc9ef..6551ef329 100644\n--- a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\n+++ b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/BaseHttpBuilder.java\n\n@@ -72,10 +73,12 @@ abstract class BaseHttpBuilder<ResolvedAddress> {\n \n     /**\n      * Enables wire-logging for connections created by this builder.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #enableWireLogging(String, LogLevel, BooleanSupplier)} instead.\n      * @param loggerName The name of the logger to log wire events.\n      * @return {@code this}.\n      */\n+    @Deprecated\n     public abstract BaseHttpBuilder<ResolvedAddress> enableWireLogging(String loggerName);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NTIyNg==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519065226", "bodyText": "Instead of introducing a custom ServiceTalkWireLogger can we use LoggingHandler(name, level, logUserData ? ByteBufFormat.HEX_DUMP : ByteBufFormat.SIMPLE) from netty?", "author": "idelpivnitskiy", "createdAt": "2020-11-07T00:17:09Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java", "diffHunk": "@@ -15,36 +15,30 @@\n  */\n package io.servicetalk.transport.netty.internal;\n \n-import io.netty.channel.Channel;\n-import io.netty.handler.logging.LogLevel;\n-import io.netty.handler.logging.LoggingHandler;\n-\n-import javax.annotation.Nullable;\n+import io.servicetalk.logging.api.FixedLevelLogger;\n \n-import static io.servicetalk.transport.netty.internal.NettyLoggerUtils.getNettyLogLevel;\n+import io.netty.channel.Channel;\n \n /**\n  * A {@link ChannelInitializer} that enables wire-logging for all channels.\n  * All wire events will be logged at trace level.\n  */\n public class WireLoggingInitializer implements ChannelInitializer {\n-    @Nullable\n-    private final LoggingHandler loggingHandler;\n+    private final ServiceTalkWireLogger loggingHandler;\n \n     /**\n-     * Create an instance that logs at trace level.\n+     * Create an instance.\n      *\n-     * @param loggerName The name of the logger to log wire events.\n+     * @param logger The logger to use for log wire events.\n+     * @param logUserData {@code true} to log user data. {@code false} to not log user data.\n      */\n-    public WireLoggingInitializer(final String loggerName) {\n-        LogLevel logLevel = getNettyLogLevel(loggerName);\n-        loggingHandler = logLevel != null ? new LoggingHandler(loggerName, logLevel) : null;\n+    public WireLoggingInitializer(final FixedLevelLogger logger,\n+                                  final boolean logUserData) {\n+        loggingHandler = new ServiceTalkWireLogger(logger, logUserData);", "originalCommit": "7044adb6196472e913261f7e9f40fa9a36246d79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4MTc0Ng==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519081746", "bodyText": "Netty's LoggingHandler will use toString() on messages, so depending upon what types are in the pipeline this may log user data (e.g. headers, full http message, etc.).", "author": "Scottmitch", "createdAt": "2020-11-07T02:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4NzM3NA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r519087374", "bodyText": "We insert it as the first handler at tcp level where only buffers are expected. If something will change for our tcp initializer in future, we can reconsider approach.", "author": "idelpivnitskiy", "createdAt": "2020-11-07T03:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NjkwOA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520186908", "bodyText": "latest round of review changes introduces BoolenSupplier to dynamically include/exclude data. there is some duplication but I think its simpler just to keep this for now. it is internal so we can consolidate later if we enhance upstream or find a better way.", "author": "Scottmitch", "createdAt": "2020-11-09T23:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NTIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "17beed78aa568c77288a12201a89af113efcf957", "chunk": "diff --git a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java\nindex 7bc72be44..dad69bf81 100644\n--- a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java\n+++ b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java\n\n@@ -15,10 +15,14 @@\n  */\n package io.servicetalk.transport.netty.internal;\n \n-import io.servicetalk.logging.api.FixedLevelLogger;\n+import io.servicetalk.logging.api.LogLevel;\n \n import io.netty.channel.Channel;\n \n+import java.util.function.BooleanSupplier;\n+\n+import static io.servicetalk.logging.slf4j.internal.Slf4jFixedLevelLoggers.newLogger;\n+\n /**\n  * A {@link ChannelInitializer} that enables wire-logging for all channels.\n  * All wire events will be logged at trace level.\n"}}, {"oid": "17beed78aa568c77288a12201a89af113efcf957", "url": "https://github.com/apple/servicetalk/commit/17beed78aa568c77288a12201a89af113efcf957", "message": "review comments", "committedDate": "2020-11-09T23:26:33Z", "type": "forcePushed"}, {"oid": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "url": "https://github.com/apple/servicetalk/commit/1921d581b0a0c701a87ee6f9d9ee06521e53c335", "message": "review comments", "committedDate": "2020-11-09T23:36:43Z", "type": "commit"}, {"oid": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "url": "https://github.com/apple/servicetalk/commit/1921d581b0a0c701a87ee6f9d9ee06521e53c335", "message": "review comments", "committedDate": "2020-11-09T23:36:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MjA1Ng==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520192056", "bodyText": "nit: shifted indentation", "author": "idelpivnitskiy", "createdAt": "2020-11-09T23:43:13Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java", "diffHunk": "@@ -52,14 +54,19 @@ public void init(final Channel channel) {\n                 config.headersSensitivityDetector();\n         multiplexCodecBuilder.headerSensitivityDetector(headersSensitivityDetector::test);\n \n-        final FixedLevelLogger frameLogger = config.frameLogger();\n-        if (frameLogger != null) {\n-            multiplexCodecBuilder.frameLogger(\n-                    new ServiceTalkHttp2FrameLogger(frameLogger, config.frameLoggerUserData()));\n-        }\n+        initFrameLogger(multiplexCodecBuilder, config.frameLoggerConfig());\n \n         // TODO(scott): more configuration. header validation, settings stream, etc...\n \n         channel.pipeline().addLast(multiplexCodecBuilder.build(), new Http2MultiplexHandler(streamChannelInitializer));\n     }\n+\n+    static void initFrameLogger(final Http2FrameCodecBuilder multiplexCodecBuilder,\n+                                        @Nullable final UserDataLoggerConfig frameLoggerConfig) {", "originalCommit": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eef5fdccd80c7f026eedc8b2b475861e0438b2cd", "chunk": "diff --git a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java\nindex 4658e2186..f98f33dcc 100644\n--- a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java\n+++ b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ServerParentChannelInitializer.java\n\n@@ -62,7 +62,7 @@ final class H2ServerParentChannelInitializer implements ChannelInitializer {\n     }\n \n     static void initFrameLogger(final Http2FrameCodecBuilder multiplexCodecBuilder,\n-                                        @Nullable final UserDataLoggerConfig frameLoggerConfig) {\n+                                @Nullable final UserDataLoggerConfig frameLoggerConfig) {\n         if (frameLoggerConfig != null) {\n             multiplexCodecBuilder.frameLogger(\n                     new ServiceTalkHttp2FrameLogger(newLogger(frameLoggerConfig.loggerName(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5NDUyMw==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520194523", "bodyText": "requireNonNull for all fields?", "author": "idelpivnitskiy", "createdAt": "2020-11-09T23:50:02Z", "path": "servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.logging.slf4j.internal;\n+\n+import io.servicetalk.logging.api.LogLevel;\n+import io.servicetalk.logging.api.LoggerConfig;\n+import io.servicetalk.logging.api.UserDataLoggerConfig;\n+\n+import java.util.function.BooleanSupplier;\n+\n+/**\n+ * Default implementation of {@link LoggerConfig}.\n+ */\n+public final class DefaultUserDataLoggerConfig implements UserDataLoggerConfig {\n+    private final String loggerName;\n+    private final LogLevel logLevel;\n+    private final BooleanSupplier logUserData;\n+\n+    /**\n+     * Create a new instance.\n+     * @param loggerName the name of the logger to use.\n+     * @param logLevel the level to log at.\n+     * @param logUserData if user data (e.g. data, headers, etc.) should be included in logs.\n+     */\n+    public DefaultUserDataLoggerConfig(final String loggerName, final LogLevel logLevel,\n+                                       final BooleanSupplier logUserData) {\n+        this.loggerName = loggerName;\n+        this.logLevel = logLevel;\n+        this.logUserData = logUserData;", "originalCommit": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eef5fdccd80c7f026eedc8b2b475861e0438b2cd", "chunk": "diff --git a/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java b/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java\nindex df5a4fdf3..1adbefaba 100644\n--- a/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java\n+++ b/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java\n\n@@ -19,8 +19,11 @@ import io.servicetalk.logging.api.LogLevel;\n import io.servicetalk.logging.api.LoggerConfig;\n import io.servicetalk.logging.api.UserDataLoggerConfig;\n \n+import java.util.Objects;\n import java.util.function.BooleanSupplier;\n \n+import static java.util.Objects.requireNonNull;\n+\n /**\n  * Default implementation of {@link LoggerConfig}.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5NTE0OQ==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520195149", "bodyText": "We do not use them, but it does not hurt to generate equals/hashCode methods for this class in case users will somehow need it.\nAlso, consider implementing toString() method for better logging if necessary.", "author": "idelpivnitskiy", "createdAt": "2020-11-09T23:51:46Z", "path": "servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.logging.slf4j.internal;\n+\n+import io.servicetalk.logging.api.LogLevel;\n+import io.servicetalk.logging.api.LoggerConfig;\n+import io.servicetalk.logging.api.UserDataLoggerConfig;\n+\n+import java.util.function.BooleanSupplier;\n+\n+/**\n+ * Default implementation of {@link LoggerConfig}.\n+ */\n+public final class DefaultUserDataLoggerConfig implements UserDataLoggerConfig {\n+    private final String loggerName;\n+    private final LogLevel logLevel;\n+    private final BooleanSupplier logUserData;\n+\n+    /**\n+     * Create a new instance.\n+     * @param loggerName the name of the logger to use.\n+     * @param logLevel the level to log at.\n+     * @param logUserData if user data (e.g. data, headers, etc.) should be included in logs.\n+     */\n+    public DefaultUserDataLoggerConfig(final String loggerName, final LogLevel logLevel,\n+                                       final BooleanSupplier logUserData) {\n+        this.loggerName = loggerName;\n+        this.logLevel = logLevel;\n+        this.logUserData = logUserData;\n+    }\n+\n+    @Override\n+    public String loggerName() {\n+        return loggerName;\n+    }\n+\n+    @Override\n+    public LogLevel logLevel() {\n+        return logLevel;\n+    }\n+\n+    @Override\n+    public BooleanSupplier logUserData() {\n+        return logUserData;\n+    }", "originalCommit": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMTA2MA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520801060", "bodyText": "done", "author": "Scottmitch", "createdAt": "2020-11-10T18:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5NTE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eef5fdccd80c7f026eedc8b2b475861e0438b2cd", "chunk": "diff --git a/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java b/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java\nindex df5a4fdf3..1adbefaba 100644\n--- a/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java\n+++ b/servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/DefaultUserDataLoggerConfig.java\n\n@@ -19,8 +19,11 @@ import io.servicetalk.logging.api.LogLevel;\n import io.servicetalk.logging.api.LoggerConfig;\n import io.servicetalk.logging.api.UserDataLoggerConfig;\n \n+import java.util.Objects;\n import java.util.function.BooleanSupplier;\n \n+import static java.util.Objects.requireNonNull;\n+\n /**\n  * Default implementation of {@link LoggerConfig}.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5NjQxMA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520196410", "bodyText": "Consider keeping it true to preserve the existing behavior of the method.", "author": "idelpivnitskiy", "createdAt": "2020-11-09T23:54:54Z", "path": "servicetalk-tcp-netty-internal/src/main/java/io/servicetalk/tcp/netty/internal/AbstractTcpConfig.java", "diffHunk": "@@ -135,22 +130,21 @@ public final void flushStrategy(final FlushStrategy flushStrategy) {\n      * @param loggerName The name of the logger to log wire events\n      */\n     public final void enableWireLogging(final String loggerName) {\n-        enableWireLogging(loggerName, TRACE, true);\n+        enableWireLogging(loggerName, TRACE, () -> false);", "originalCommit": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzNDY5OQ==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520234699", "bodyText": "I think it is worth breaking behavior here now that we have the option. by default it is safer to not log user data, and if users opt-in then they accept the risk.", "author": "Scottmitch", "createdAt": "2020-11-10T01:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5NjQxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5NzM4MA==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520197380", "bodyText": "Consider also implementing public void read(final ChannelHandlerContext ctx) throws Exception method.\nNetty's LoggingHandler does not have it, but I think it's a useful event for debugging.", "author": "idelpivnitskiy", "createdAt": "2020-11-09T23:57:38Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ServiceTalkWireLogger.java", "diffHunk": "@@ -35,11 +36,11 @@\n \n final class ServiceTalkWireLogger extends ChannelDuplexHandler {", "originalCommit": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eef5fdccd80c7f026eedc8b2b475861e0438b2cd", "chunk": "diff --git a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ServiceTalkWireLogger.java b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ServiceTalkWireLogger.java\nindex 723d6d515..68d19057e 100644\n--- a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ServiceTalkWireLogger.java\n+++ b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ServiceTalkWireLogger.java\n\n@@ -46,7 +48,7 @@ final class ServiceTalkWireLogger extends ChannelDuplexHandler {\n     @Override\n     public void channelRegistered(ChannelHandlerContext ctx) {\n         if (logger.isEnabled()) {\n-            logger.log(\"{} REGISTERED\", ctx.channel());\n+            logger.log(contextToString(ctx) + \" REGISTERED\");\n         }\n         ctx.fireChannelRegistered();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwMjMzMg==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520202332", "bodyText": "No idea why it was pre-existing, but it looks like we need just a UserDataLoggerConfig on the AbstractReadOnlyTcpConfig API. We should create WireLoggingInitializer inside Tcp[Client|Server]ChannelInitializer to make it consistent with all the other initializers we create there. AbstractReadOnlyTcpConfig should be just a config object without knowledge of initializers.", "author": "idelpivnitskiy", "createdAt": "2020-11-10T00:12:20Z", "path": "servicetalk-tcp-netty-internal/src/main/java/io/servicetalk/tcp/netty/internal/AbstractReadOnlyTcpConfig.java", "diffHunk": "@@ -51,8 +52,10 @@ protected AbstractReadOnlyTcpConfig(final AbstractTcpConfig<SecurityConfig, Read\n         options = from.options() == null ? emptyMap() : unmodifiableMap(new HashMap<>(from.options()));\n         idleTimeoutMs = from.idleTimeoutMs();\n         flushStrategy = from.flushStrategy();\n-        final String wireLoggerName = from.wireLoggerName();\n-        wireLoggingInitializer = wireLoggerName != null ? new WireLoggingInitializer(wireLoggerName) : null;\n+        final UserDataLoggerConfig wireLoggerConfig = from.wireLoggerConfig();\n+        wireLoggingInitializer = wireLoggerConfig != null ?\n+                new WireLoggingInitializer(wireLoggerConfig.loggerName(),\n+                        wireLoggerConfig.logLevel(), wireLoggerConfig.logUserData()) : null;", "originalCommit": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eef5fdccd80c7f026eedc8b2b475861e0438b2cd", "chunk": "diff --git a/servicetalk-tcp-netty-internal/src/main/java/io/servicetalk/tcp/netty/internal/AbstractReadOnlyTcpConfig.java b/servicetalk-tcp-netty-internal/src/main/java/io/servicetalk/tcp/netty/internal/AbstractReadOnlyTcpConfig.java\nindex 2a2299765..ba2ae9cb0 100644\n--- a/servicetalk-tcp-netty-internal/src/main/java/io/servicetalk/tcp/netty/internal/AbstractReadOnlyTcpConfig.java\n+++ b/servicetalk-tcp-netty-internal/src/main/java/io/servicetalk/tcp/netty/internal/AbstractReadOnlyTcpConfig.java\n\n@@ -44,7 +43,7 @@ abstract class AbstractReadOnlyTcpConfig<SecurityConfig, ReadOnlyView> {\n     private final Long idleTimeoutMs;\n     private final FlushStrategy flushStrategy;\n     @Nullable\n-    private final WireLoggingInitializer wireLoggingInitializer;\n+    private final UserDataLoggerConfig wireLoggerConfig;\n     private final boolean alpnConfigured;\n \n     protected AbstractReadOnlyTcpConfig(final AbstractTcpConfig<SecurityConfig, ReadOnlyView> from,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTA1NQ==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520205055", "bodyText": "requireNonNull(loggerName)?", "author": "idelpivnitskiy", "createdAt": "2020-11-10T00:20:27Z", "path": "servicetalk-logging-slf4j-internal/src/main/java/io/servicetalk/logging/slf4j/internal/Slf4jFixedLevelLoggers.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.logging.slf4j.internal;\n+\n+import io.servicetalk.logging.api.LogLevel;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SLF4J implementations of {@link FixedLevelLogger}.\n+ */\n+public final class Slf4jFixedLevelLoggers {\n+    private Slf4jFixedLevelLoggers() {\n+    }\n+\n+    /**\n+     * Create a {@link FixedLevelLogger}.\n+     * @param loggerName the name of the logger to use.\n+     * @param level the level to log at.\n+     * @return a {@link FixedLevelLogger}.\n+     */\n+    public static FixedLevelLogger newLogger(final String loggerName, final LogLevel level) {\n+        final Logger logger = LoggerFactory.getLogger(loggerName);", "originalCommit": "1921d581b0a0c701a87ee6f9d9ee06521e53c335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMzQ5OQ==", "url": "https://github.com/apple/servicetalk/pull/1199#discussion_r520803499", "bodyText": "I'll let LoggerFactory.getLogger enforce this.", "author": "Scottmitch", "createdAt": "2020-11-10T19:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTA1NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "eef5fdccd80c7f026eedc8b2b475861e0438b2cd", "url": "https://github.com/apple/servicetalk/commit/eef5fdccd80c7f026eedc8b2b475861e0438b2cd", "message": "review comments", "committedDate": "2020-11-10T18:58:21Z", "type": "commit"}]}