{"pr_number": 1290, "pr_title": "Improve factories for `StepVerifier`s", "pr_createdAt": "2020-12-18T10:11:45Z", "pr_url": "https://github.com/apple/servicetalk/pull/1290", "timeline": [{"oid": "43e7bc6fe88991606348fd89a372e2f0ef924549", "url": "https://github.com/apple/servicetalk/commit/43e7bc6fe88991606348fd89a372e2f0ef924549", "message": "Improve factories for `StepVerifier`s\n\nMotivation:\n\n1. `StepVerifiers.create` is a confusing name for users who prefer static\nimports. Not obvious what the method is creating when you read the source\ncode of the test.\n2. `Processor`s is a most common way to create a source for which users\ncan control emitted signals. However, users always have to use\n`SourceAdapters.fromSource`, which is not convenient.\n\nModifications:\n\n- Rename `StepVerifiers.create` -> `Verifiers.stepVerifiers`;\n- Add `Verifiers.stepVerifiersForSource` methods for async sources;\n- Use `Assert.assertThrows` instead of `try-catch + Assert.fail()`;\n\nResult:\n\nMore convenient factory API for `StepVerifier`.", "committedDate": "2020-12-18T09:27:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMzc0OQ==", "url": "https://github.com/apple/servicetalk/pull/1290#discussion_r545733749", "bodyText": "If I use the same stepVerifier for PublisherSource, java is confused when an async source implements both types Publisher and PublisherSource (example: TestPublisher). Which approach will you prefer: different factory names or force users to use a concrete type?", "author": "idelpivnitskiy", "createdAt": "2020-12-18T10:14:42Z", "path": "servicetalk-concurrent-api-test/src/main/java/io/servicetalk/concurrent/api/test/Verifiers.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api.test;\n+\n+import io.servicetalk.concurrent.CompletableSource;\n+import io.servicetalk.concurrent.PublisherSource;\n+import io.servicetalk.concurrent.PublisherSource.Subscriber;\n+import io.servicetalk.concurrent.SingleSource;\n+import io.servicetalk.concurrent.api.Completable;\n+import io.servicetalk.concurrent.api.Publisher;\n+import io.servicetalk.concurrent.api.Single;\n+\n+import static io.servicetalk.concurrent.api.SourceAdapters.toSource;\n+import static io.servicetalk.concurrent.api.test.TimeSources.nanoTimeNormalized;\n+\n+/**\n+ * Factory for the first steps that lead to {@link StepVerifier} test utility to verify each step in the lifecycle of\n+ * asynchronous sources {@link Publisher}, {@link Single}, and {@link Completable}.\n+ * <p>\n+ * The steps are typically from the perspective of a {@link Subscriber}'s lifecycle.\n+ */\n+public final class Verifiers {\n+    private Verifiers() {\n+    }\n+\n+    /**\n+     * Create a new {@link PublisherFirstStep}.\n+     *\n+     * @param source The {@link Publisher} to verify.\n+     * @param <T> The type of {@link Publisher}.\n+     * @return A {@link PublisherFirstStep} that can be used to verify {@code source}'s signal emission(s).\n+     */\n+    public static <T> PublisherFirstStep<T> stepVerifier(Publisher<T> source) {\n+        return stepVerifierForSource(toSource(source));\n+    }\n+\n+    /**\n+     * Create a new {@link PublisherFirstStep}.\n+     *\n+     * @param source The {@link PublisherSource} to verify.\n+     * @param <T> The type of {@link PublisherSource}.\n+     * @return A {@link PublisherFirstStep} that can be used to verify {@code source}'s signal emission(s).\n+     */\n+    public static <T> PublisherFirstStep<T> stepVerifierForSource(PublisherSource<T> source) {", "originalCommit": "43e7bc6fe88991606348fd89a372e2f0ef924549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2MTgzMQ==", "url": "https://github.com/apple/servicetalk/pull/1290#discussion_r546061831", "bodyText": "I'm fine with different factory method name especially if it will come up in common cases and require additional casting/effort.\nfwiw ReactiveStreamsAdapters uses the same method name for both, but I guess this is less commonly used...", "author": "Scottmitch", "createdAt": "2020-12-18T19:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMzc0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2MDMxOQ==", "url": "https://github.com/apple/servicetalk/pull/1290#discussion_r546060319", "bodyText": "ah this is what you were asking for ... sorry I missed this and nice improvement \ud83d\udc4d", "author": "Scottmitch", "createdAt": "2020-12-18T19:54:52Z", "path": "servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java", "diffHunk": "@@ -729,19 +728,14 @@ private static void verifyException(Supplier<Duration> verifier, String failedTe\n     }\n \n     static void verifyException(Supplier<Duration> verifier, String classNamePrefix, String failedTestMethod) {\n-        try {\n-            verifier.get();\n-        } catch (StepAssertionError error) {\n-            StackTraceElement[] stackTraceElements = error.getStackTrace();\n-            assertThat(stackTraceElements.length, greaterThanOrEqualTo(1));\n-            assertThat(\"first stacktrace element expected <class: \" + classNamePrefix +\n-                    \"> actual: \" + stackTraceElements[0] + \" error: \" + error,\n-                    stackTraceElements[0].getClassName(), startsWith(classNamePrefix));\n-            StackTraceElement testMethodStackTrace = error.testMethodStackTrace();\n-            assertEquals(\"unexpected test method failure: \" + testMethodStackTrace, failedTestMethod,\n-                    testMethodStackTrace.getMethodName());\n-            return;\n-        }\n-        fail();\n+        StepAssertionError error = assertThrows(StepAssertionError.class, verifier::get);", "originalCommit": "43e7bc6fe88991606348fd89a372e2f0ef924549", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d8f1c853a1a34d3af094adfd03d9cbce6cc714f", "chunk": "diff --git a/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java b/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java\nindex ab7b6f024..73884e5ce 100644\n--- a/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java\n+++ b/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java\n\n@@ -731,8 +731,8 @@ public class PublisherStepVerifierTest {\n         StepAssertionError error = assertThrows(StepAssertionError.class, verifier::get);\n         StackTraceElement[] stackTraceElements = error.getStackTrace();\n         assertThat(stackTraceElements.length, greaterThanOrEqualTo(1));\n-        assertThat(\"first stacktrace element expected <class: \" + classNamePrefix +\n-                        \"> actual: \" + stackTraceElements[0] + \" error: \" + error,\n+        assertThat(\"first stacktrace element expected <class: \" + classNamePrefix + \"> actual: \" +\n+                        stackTraceElements[0] + \" error: \" + error,\n                 stackTraceElements[0].getClassName(), startsWith(classNamePrefix));\n         StackTraceElement testMethodStackTrace = error.testMethodStackTrace();\n         assertEquals(\"unexpected test method failure: \" + testMethodStackTrace, failedTestMethod,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2MDUwNg==", "url": "https://github.com/apple/servicetalk/pull/1290#discussion_r546060506", "bodyText": "nit: consider putting more content on the previous line now that indentation has changed.", "author": "Scottmitch", "createdAt": "2020-12-18T19:55:17Z", "path": "servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java", "diffHunk": "@@ -729,19 +728,14 @@ private static void verifyException(Supplier<Duration> verifier, String failedTe\n     }\n \n     static void verifyException(Supplier<Duration> verifier, String classNamePrefix, String failedTestMethod) {\n-        try {\n-            verifier.get();\n-        } catch (StepAssertionError error) {\n-            StackTraceElement[] stackTraceElements = error.getStackTrace();\n-            assertThat(stackTraceElements.length, greaterThanOrEqualTo(1));\n-            assertThat(\"first stacktrace element expected <class: \" + classNamePrefix +\n-                    \"> actual: \" + stackTraceElements[0] + \" error: \" + error,\n-                    stackTraceElements[0].getClassName(), startsWith(classNamePrefix));\n-            StackTraceElement testMethodStackTrace = error.testMethodStackTrace();\n-            assertEquals(\"unexpected test method failure: \" + testMethodStackTrace, failedTestMethod,\n-                    testMethodStackTrace.getMethodName());\n-            return;\n-        }\n-        fail();\n+        StepAssertionError error = assertThrows(StepAssertionError.class, verifier::get);\n+        StackTraceElement[] stackTraceElements = error.getStackTrace();\n+        assertThat(stackTraceElements.length, greaterThanOrEqualTo(1));\n+        assertThat(\"first stacktrace element expected <class: \" + classNamePrefix +\n+                        \"> actual: \" + stackTraceElements[0] + \" error: \" + error,", "originalCommit": "43e7bc6fe88991606348fd89a372e2f0ef924549", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d8f1c853a1a34d3af094adfd03d9cbce6cc714f", "chunk": "diff --git a/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java b/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java\nindex ab7b6f024..73884e5ce 100644\n--- a/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java\n+++ b/servicetalk-concurrent-api-test/src/test/java/io/servicetalk/concurrent/api/test/PublisherStepVerifierTest.java\n\n@@ -731,8 +731,8 @@ public class PublisherStepVerifierTest {\n         StepAssertionError error = assertThrows(StepAssertionError.class, verifier::get);\n         StackTraceElement[] stackTraceElements = error.getStackTrace();\n         assertThat(stackTraceElements.length, greaterThanOrEqualTo(1));\n-        assertThat(\"first stacktrace element expected <class: \" + classNamePrefix +\n-                        \"> actual: \" + stackTraceElements[0] + \" error: \" + error,\n+        assertThat(\"first stacktrace element expected <class: \" + classNamePrefix + \"> actual: \" +\n+                        stackTraceElements[0] + \" error: \" + error,\n                 stackTraceElements[0].getClassName(), startsWith(classNamePrefix));\n         StackTraceElement testMethodStackTrace = error.testMethodStackTrace();\n         assertEquals(\"unexpected test method failure: \" + testMethodStackTrace, failedTestMethod,\n"}}, {"oid": "74cede5d0602a5d23aa915301a9c442c3ebe115f", "url": "https://github.com/apple/servicetalk/commit/74cede5d0602a5d23aa915301a9c442c3ebe115f", "message": "Merge remote-tracking branch 'upstream/main' into verifiers", "committedDate": "2020-12-18T22:18:44Z", "type": "commit"}, {"oid": "37c9bebe1f086c33024473fde90077d3b132a79d", "url": "https://github.com/apple/servicetalk/commit/37c9bebe1f086c33024473fde90077d3b132a79d", "message": "Update AbstractSslCloseNotifyAlertHandlingTest", "committedDate": "2020-12-18T22:22:03Z", "type": "commit"}, {"oid": "2d8f1c853a1a34d3af094adfd03d9cbce6cc714f", "url": "https://github.com/apple/servicetalk/commit/2d8f1c853a1a34d3af094adfd03d9cbce6cc714f", "message": "fix nit", "committedDate": "2020-12-18T22:25:05Z", "type": "commit"}]}