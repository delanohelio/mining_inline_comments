{"pr_number": 1012, "pr_title": "Publisher#flatMapMergeSingle terminal condition race", "pr_createdAt": "2020-04-14T20:03:19Z", "pr_url": "https://github.com/apple/servicetalk/pull/1012", "timeline": [{"oid": "bdacfefe8f7db5d4e53bc32beaf6f663f0bd4d66", "url": "https://github.com/apple/servicetalk/commit/bdacfefe8f7db5d4e53bc32beaf6f663f0bd4d66", "message": "Publisher#flatMapMergeSingle terminal condition race\n\nMotivation:\nPublisher#flatMapMergeSingle has the following race condition:\nT1 - FlatMapSubscriber#onComplete (the outer Subscriber)\nT2 - FlatMapSingleSubscriber#onComplete (the inner Subscriber)\nT1 - terminal.cas(onComplete()) -> true, active == 0 -> false\nT2 - active.dec() -> 0, terminal == null -> true\nThere is no guarantee that T2 will see the terminal.cas() from T1\n\nPublisher#flatMapMerge was recently introduced, shares some control flow\nlogic with Publisher#flatMapMergeSingle that is now inconsistent.\n\nModifications:\n- use atomic operations on the active count to flip to negative when the\nouter source completes to ensure visibility on termination between\ndifferen threads.\n\nResult:\nMore correct termination of Publisher#flatMapMergeSingle", "committedDate": "2020-04-14T20:02:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzM5MQ==", "url": "https://github.com/apple/servicetalk/pull/1012#discussion_r418233391", "bodyText": "prevActivePublishers -> prevActiveSingles", "author": "NiteshKant", "createdAt": "2020-04-30T19:16:55Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java", "diffHunk": "@@ -193,16 +192,42 @@ public void onError(Throwable t) {\n \n         @Override\n         public void onComplete() {\n-            // active must be checked after setting the terminal event, because they are accessed in the reverse way in\n-            // FlatMapSingleSubscriber and if it were reversed here the FlatMapSingleSubscriber would be racy and may\n-            // not detect the terminal event.\n-            if (trySetTerminal(complete(), false, terminalNotificationUpdater, this) && active == 0) {\n-                // Since onComplete and onNext can not be concurrent and onNext must not be invoked post onComplete,\n-                // if we see active == 0 here, active must not change after this.\n+            // Setting terminal must be done before terminateActiveMappedSources to ensure visibility of the terminal.\n+            final boolean setTerminal = trySetTerminal(complete(), false, terminalNotificationUpdater, this);\n+            final boolean allSourcesTerminated = terminateActiveMappedSources();\n+            if (setTerminal && allSourcesTerminated) {\n                 enqueueAndDrain(complete());\n             }\n         }\n \n+        private boolean terminateActiveMappedSources() {\n+            for (;;) {\n+                final int prevActiveMappedSources = activeMappedSources;\n+                // Should always be >= 0, but just in case there is a bug in user code that results in multiple terminal\n+                // events we avoid corrupting our internal state.\n+                if (prevActiveMappedSources < 0 || activeMappedSourcesUpdater.compareAndSet(this,\n+                        prevActiveMappedSources, -prevActiveMappedSources)) {\n+                    return prevActiveMappedSources == 0;\n+                }\n+            }\n+        }\n+\n+        private boolean decrementActiveMappedSources() {\n+            for (;;) {\n+                final int prevActivePublishers = activeMappedSources;", "originalCommit": "bdacfefe8f7db5d4e53bc32beaf6f663f0bd4d66", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f99f8e658ac58bf22c9bce0f964c51bdbd7a2ac0", "chunk": "diff --git a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\nindex 2ea13dca7..a3d05816a 100644\n--- a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\n+++ b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\n\n@@ -203,10 +204,8 @@ final class PublisherFlatMapSingle<T, R> extends AbstractAsynchronousPublisherOp\n         private boolean terminateActiveMappedSources() {\n             for (;;) {\n                 final int prevActiveMappedSources = activeMappedSources;\n-                // Should always be >= 0, but just in case there is a bug in user code that results in multiple terminal\n-                // events we avoid corrupting our internal state.\n-                if (prevActiveMappedSources < 0 || activeMappedSourcesUpdater.compareAndSet(this,\n-                        prevActiveMappedSources, -prevActiveMappedSources)) {\n+                assert prevActiveMappedSources >= 0; // otherwise we have seen multiple onComplete signals\n+                if (activeMappedSourcesUpdater.compareAndSet(this, prevActiveMappedSources, -prevActiveMappedSources)) {\n                     return prevActiveMappedSources == 0;\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzOTI2Mw==", "url": "https://github.com/apple/servicetalk/pull/1012#discussion_r418239263", "bodyText": "Is this comment saying that prevActiveMappedSources should always be >= 0? We are setting it to -prevActiveMappedSources, so this is confusing. Maybe just elaborate more like:\n// prevActiveMappedSources >= 0 if only a single terminal event is received (expected)\n// prevActiveMappedSources < 0 if multiple terminal events are received (unexpected)\n// We return true only for the first terminal event.", "author": "NiteshKant", "createdAt": "2020-04-30T19:28:19Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java", "diffHunk": "@@ -193,16 +192,42 @@ public void onError(Throwable t) {\n \n         @Override\n         public void onComplete() {\n-            // active must be checked after setting the terminal event, because they are accessed in the reverse way in\n-            // FlatMapSingleSubscriber and if it were reversed here the FlatMapSingleSubscriber would be racy and may\n-            // not detect the terminal event.\n-            if (trySetTerminal(complete(), false, terminalNotificationUpdater, this) && active == 0) {\n-                // Since onComplete and onNext can not be concurrent and onNext must not be invoked post onComplete,\n-                // if we see active == 0 here, active must not change after this.\n+            // Setting terminal must be done before terminateActiveMappedSources to ensure visibility of the terminal.\n+            final boolean setTerminal = trySetTerminal(complete(), false, terminalNotificationUpdater, this);\n+            final boolean allSourcesTerminated = terminateActiveMappedSources();\n+            if (setTerminal && allSourcesTerminated) {\n                 enqueueAndDrain(complete());\n             }\n         }\n \n+        private boolean terminateActiveMappedSources() {\n+            for (;;) {\n+                final int prevActiveMappedSources = activeMappedSources;\n+                // Should always be >= 0, but just in case there is a bug in user code that results in multiple terminal", "originalCommit": "bdacfefe8f7db5d4e53bc32beaf6f663f0bd4d66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDYyNQ==", "url": "https://github.com/apple/servicetalk/pull/1012#discussion_r418324625", "bodyText": "good point. I'll simplify to an asset and clarify the comment.", "author": "Scottmitch", "createdAt": "2020-04-30T22:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzOTI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f99f8e658ac58bf22c9bce0f964c51bdbd7a2ac0", "chunk": "diff --git a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\nindex 2ea13dca7..a3d05816a 100644\n--- a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\n+++ b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\n\n@@ -203,10 +204,8 @@ final class PublisherFlatMapSingle<T, R> extends AbstractAsynchronousPublisherOp\n         private boolean terminateActiveMappedSources() {\n             for (;;) {\n                 final int prevActiveMappedSources = activeMappedSources;\n-                // Should always be >= 0, but just in case there is a bug in user code that results in multiple terminal\n-                // events we avoid corrupting our internal state.\n-                if (prevActiveMappedSources < 0 || activeMappedSourcesUpdater.compareAndSet(this,\n-                        prevActiveMappedSources, -prevActiveMappedSources)) {\n+                assert prevActiveMappedSources >= 0; // otherwise we have seen multiple onComplete signals\n+                if (activeMappedSourcesUpdater.compareAndSet(this, prevActiveMappedSources, -prevActiveMappedSources)) {\n                     return prevActiveMappedSources == 0;\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0MDQ0Mw==", "url": "https://github.com/apple/servicetalk/pull/1012#discussion_r418240443", "bodyText": "Since we are setting a negative value to this variable; should we instead use:\nactiveMappedSourcesUpdater.accumulateAndGet(this, 1, (prev, next) -> prev >= 0 ? prev + next : prev);", "author": "NiteshKant", "createdAt": "2020-04-30T19:30:38Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java", "diffHunk": "@@ -180,7 +179,7 @@ public void onNext(T t) {\n             // If we are cancelled the activeUpdater count is best effort depending upon which sources finish. This best\n             // effort behavior mimics the semantics of cancel though so we don't take any special action to try to\n             // adjust the count or prematurely terminate.\n-            activeUpdater.incrementAndGet(this);\n+            activeMappedSourcesUpdater.incrementAndGet(this);", "originalCommit": "bdacfefe8f7db5d4e53bc32beaf6f663f0bd4d66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMzcyOQ==", "url": "https://github.com/apple/servicetalk/pull/1012#discussion_r418323729", "bodyText": "good question. activeMappedSources is set to a negative value in this Subscriber's onComplete method, so onNext should not see a negative value and I'll add an assert to clarify expectations.", "author": "Scottmitch", "createdAt": "2020-04-30T22:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0MDQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f99f8e658ac58bf22c9bce0f964c51bdbd7a2ac0", "chunk": "diff --git a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\nindex 2ea13dca7..a3d05816a 100644\n--- a/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\n+++ b/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java\n\n@@ -179,7 +179,8 @@ final class PublisherFlatMapSingle<T, R> extends AbstractAsynchronousPublisherOp\n             // If we are cancelled the activeUpdater count is best effort depending upon which sources finish. This best\n             // effort behavior mimics the semantics of cancel though so we don't take any special action to try to\n             // adjust the count or prematurely terminate.\n-            activeMappedSourcesUpdater.incrementAndGet(this);\n+            final int activeMappedSources = activeMappedSourcesUpdater.incrementAndGet(this);\n+            assert activeMappedSources > 0; // otherwise onComplete was previously invoked, which is invalid.\n             next.subscribeInternal(new FlatMapSingleSubscriber());\n         }\n \n"}}, {"oid": "f99f8e658ac58bf22c9bce0f964c51bdbd7a2ac0", "url": "https://github.com/apple/servicetalk/commit/f99f8e658ac58bf22c9bce0f964c51bdbd7a2ac0", "message": "review comments", "committedDate": "2020-04-30T22:28:24Z", "type": "commit"}, {"oid": "ede71dea5b8d41f650166be305677ad00425d206", "url": "https://github.com/apple/servicetalk/commit/ede71dea5b8d41f650166be305677ad00425d206", "message": "fix formatting", "committedDate": "2020-04-30T22:34:00Z", "type": "commit"}]}