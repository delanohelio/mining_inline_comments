{"pr_number": 1103, "pr_title": "opentracing upgrade from 0.31 to 0.33", "pr_createdAt": "2020-07-24T18:35:29Z", "pr_url": "https://github.com/apple/servicetalk/pull/1103", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNjQ4Nw==", "url": "https://github.com/apple/servicetalk/pull/1103#discussion_r460306487", "bodyText": "can you make this package private (least access required)?", "author": "Scottmitch", "createdAt": "2020-07-24T22:00:49Z", "path": "servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/AbstractTracingHttpFilter.java", "diffHunk": "@@ -116,8 +126,20 @@ protected boolean isError(final HttpResponseMetaData metaData) {\n \n         private void tagStatusCode() {\n             if (metaData != null) {\n-                HTTP_STATUS.set(currentScope.span(), metaData.status().code());\n+                HTTP_STATUS.set(span, metaData.status().code());\n             }\n         }\n+\n+        private void closeAll() {\n+            try {\n+                currentScope.close();\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+\n+        protected final Span getSpan() {", "originalCommit": "8bba6ddbb480ee510c30385dbd76c9b8399e3068", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31360a1048e397ffae4e6f088555b49ceb922bc1", "chunk": "diff --git a/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/AbstractTracingHttpFilter.java b/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/AbstractTracingHttpFilter.java\nindex 356746fe9..089904241 100644\n--- a/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/AbstractTracingHttpFilter.java\n+++ b/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/AbstractTracingHttpFilter.java\n\n@@ -138,7 +138,7 @@ abstract class AbstractTracingHttpFilter {\n             }\n         }\n \n-        protected final Span getSpan() {\n+        final Span getSpan() {\n             return span;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNjY4MQ==", "url": "https://github.com/apple/servicetalk/pull/1103#discussion_r460306681", "bodyText": "can you make this method static?", "author": "Scottmitch", "createdAt": "2020-07-24T22:01:33Z", "path": "servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilter.java", "diffHunk": "@@ -133,8 +134,26 @@ private ScopeTracker newTracker(final HttpRequestMetaData request) {\n         if (activeSpan != null) {\n             spanBuilder = spanBuilder.asChildOf(activeSpan);\n         }\n-        Scope scope = spanBuilder.startActive(true);\n-        tracer.inject(scope.span().context(), formatter, request.headers());\n-        return new ScopeTracker(scope);\n+        Span span = spanBuilder.start();\n+        Scope scope = tracer.activateSpan(span);\n+        try {\n+            tracer.inject(span.context(), formatter, request.headers());\n+            return new ScopeTracker(scope, span);\n+        } catch (Throwable cause) {\n+            handlePrematureError(span, scope);\n+            throw cause;\n+        }\n+    }\n+\n+    private void handlePrematureError(Span span, Scope scope) {", "originalCommit": "8bba6ddbb480ee510c30385dbd76c9b8399e3068", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31360a1048e397ffae4e6f088555b49ceb922bc1", "chunk": "diff --git a/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilter.java b/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilter.java\nindex 3f1db5bdc..a6eda21b2 100644\n--- a/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilter.java\n+++ b/servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilter.java\n\n@@ -145,7 +145,7 @@ public class TracingHttpRequesterFilter extends AbstractTracingHttpFilter\n         }\n     }\n \n-    private void handlePrematureError(Span span, Scope scope) {\n+    private static void handlePrematureError(Span span, Scope scope) {\n         try {\n             scope.close();\n         } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNzM1MA==", "url": "https://github.com/apple/servicetalk/pull/1103#discussion_r460307350", "bodyText": "can you add the following:\n finally {\n  clientSpan.finish();\n}", "author": "Scottmitch", "createdAt": "2020-07-24T22:04:00Z", "path": "servicetalk-opentracing-http/src/test/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilterTest.java", "diffHunk": "@@ -158,33 +158,34 @@ public void testInjectWithParent() throws Exception {\n             try (HttpClient client = forSingleAddress(serverHostAndPort(context))\n                     .appendClientFilter(new TracingHttpRequesterFilter(tracer, \"testClient\"))\n                     .appendClientFilter(new TestTracingLoggerFilter(TRACING_TEST_LOG_LINE_PREFIX)).build()) {\n-                try (InMemoryScope clientScope = tracer.buildSpan(\"test\").startActive(true)) {\n-                    HttpResponse response = client.request(client.get(requestUrl)).toFuture().get();\n-                    TestSpanState serverSpanState = response.payloadBody(httpSerializer.deserializerFor(\n+                    InMemorySpan clientSpan = tracer.buildSpan(\"test\").start();\n+                    try (Scope ignored = tracer.activateSpan(clientSpan)) {\n+                        HttpResponse response = client.request(client.get(requestUrl)).toFuture().get();\n+                        TestSpanState serverSpanState = response.payloadBody(httpSerializer.deserializerFor(\n                             TestSpanState.class));\n \n-                    assertThat(serverSpanState.traceId, isHexId());\n-                    assertThat(serverSpanState.spanId, isHexId());\n-                    assertThat(serverSpanState.parentSpanId, isHexId());\n+                        assertThat(serverSpanState.traceId, isHexId());\n+                        assertThat(serverSpanState.spanId, isHexId());\n+                        assertThat(serverSpanState.parentSpanId, isHexId());\n \n-                    assertThat(serverSpanState.traceId, equalToIgnoringCase(clientScope.span().traceIdHex()));\n-                    assertThat(serverSpanState.parentSpanId, equalToIgnoringCase(clientScope.span().spanIdHex()));\n+                        assertThat(serverSpanState.traceId, equalToIgnoringCase(clientSpan.traceIdHex()));\n+                        assertThat(serverSpanState.parentSpanId, equalToIgnoringCase(clientSpan.spanIdHex()));\n \n-                    // don't mess with caller span state\n-                    assertEquals(clientScope.span(), tracer.activeSpan());\n+                        // don't mess with caller span state\n+                        assertEquals(clientSpan, tracer.activeSpan());\n \n-                    assertEquals(1, spanListener.spanFinishedCount());\n-                    InMemorySpan lastFinishedSpan = spanListener.lastFinishedSpan();\n-                    assertNotNull(lastFinishedSpan);\n-                    assertEquals(SPAN_KIND_CLIENT, lastFinishedSpan.tags().get(SPAN_KIND.getKey()));\n-                    assertEquals(GET.name(), lastFinishedSpan.tags().get(HTTP_METHOD.getKey()));\n-                    assertEquals(requestUrl, lastFinishedSpan.tags().get(HTTP_URL.getKey()));\n-                    assertEquals(OK.code(), lastFinishedSpan.tags().get(HTTP_STATUS.getKey()));\n-                    assertFalse(lastFinishedSpan.tags().containsKey(ERROR.getKey()));\n+                        assertEquals(1, spanListener.spanFinishedCount());\n+                        InMemorySpan lastFinishedSpan = spanListener.lastFinishedSpan();\n+                        assertNotNull(lastFinishedSpan);\n+                        assertEquals(SPAN_KIND_CLIENT, lastFinishedSpan.tags().get(SPAN_KIND.getKey()));\n+                        assertEquals(GET.name(), lastFinishedSpan.tags().get(HTTP_METHOD.getKey()));\n+                        assertEquals(requestUrl, lastFinishedSpan.tags().get(HTTP_URL.getKey()));\n+                        assertEquals(OK.code(), lastFinishedSpan.tags().get(HTTP_STATUS.getKey()));\n+                        assertFalse(lastFinishedSpan.tags().containsKey(ERROR.getKey()));\n \n-                    verifyTraceIdPresentInLogs(stableAccumulated(1000), requestUrl, serverSpanState.traceId,\n+                        verifyTraceIdPresentInLogs(stableAccumulated(1000), requestUrl, serverSpanState.traceId,\n                             serverSpanState.spanId, serverSpanState.parentSpanId, TRACING_TEST_LOG_LINE_PREFIX);\n-                }\n+                    }", "originalCommit": "8bba6ddbb480ee510c30385dbd76c9b8399e3068", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31360a1048e397ffae4e6f088555b49ceb922bc1", "chunk": "diff --git a/servicetalk-opentracing-http/src/test/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilterTest.java b/servicetalk-opentracing-http/src/test/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilterTest.java\nindex 9effed17d..b3a7139db 100644\n--- a/servicetalk-opentracing-http/src/test/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilterTest.java\n+++ b/servicetalk-opentracing-http/src/test/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilterTest.java\n\n@@ -185,6 +185,8 @@ public class TracingHttpRequesterFilterTest {\n \n                         verifyTraceIdPresentInLogs(stableAccumulated(1000), requestUrl, serverSpanState.traceId,\n                             serverSpanState.spanId, serverSpanState.parentSpanId, TRACING_TEST_LOG_LINE_PREFIX);\n+                    } finally {\n+                        clientSpan.finish();\n                     }\n             }\n         }\n"}}, {"oid": "31360a1048e397ffae4e6f088555b49ceb922bc1", "url": "https://github.com/apple/servicetalk/commit/31360a1048e397ffae4e6f088555b49ceb922bc1", "message": "opentracing upgrade from 0.31 to 0.33", "committedDate": "2020-07-24T22:24:27Z", "type": "commit"}, {"oid": "9f602771695137c497913e38d1e7bc2727af034b", "url": "https://github.com/apple/servicetalk/commit/9f602771695137c497913e38d1e7bc2727af034b", "message": "opentracing upgrade from 0.31 to 0.33", "committedDate": "2020-07-24T18:29:36Z", "type": "forcePushed"}, {"oid": "31360a1048e397ffae4e6f088555b49ceb922bc1", "url": "https://github.com/apple/servicetalk/commit/31360a1048e397ffae4e6f088555b49ceb922bc1", "message": "opentracing upgrade from 0.31 to 0.33", "committedDate": "2020-07-24T22:24:27Z", "type": "forcePushed"}]}