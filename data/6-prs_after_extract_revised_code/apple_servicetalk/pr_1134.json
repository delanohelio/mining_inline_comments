{"pr_number": 1134, "pr_title": "Avoid using nullable fields for observers", "pr_createdAt": "2020-08-22T00:50:05Z", "pr_url": "https://github.com/apple/servicetalk/pull/1134", "timeline": [{"oid": "1f390ff9ad9d0e5d97d5a7c229ba3524ef2d48cc", "url": "https://github.com/apple/servicetalk/commit/1f390ff9ad9d0e5d97d5a7c229ba3524ef2d48cc", "message": "Avoid using nullable fields for observers\n\nMotivation:\n\n`@Nullable` fields make the internal control flow more complex,\nas we always have to checks for `null` before using the field.\n\nModifications:\n\n- Use NOOP implementation of observers instead of handling `null`\neverywhere;\n\nResult:\n\nSimplified internal control flow.", "committedDate": "2020-08-21T23:39:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MjM3NA==", "url": "https://github.com/apple/servicetalk/pull/1134#discussion_r475762374", "bodyText": "We should avoid failing the normal operations due to issues with observability. Doing this make the observability failures non-recoverable which isn't desirable as opposed to continuing with degraded observability.", "author": "NiteshKant", "createdAt": "2020-08-24T17:02:28Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyPipelineSslUtils.java", "diffHunk": "@@ -60,7 +60,21 @@ public static SSLSession extractSslSessionAndReport(ChannelPipeline pipeline,\n                                                         SslHandshakeCompletionEvent sslEvent,\n                                                         Consumer<Throwable> failureConsumer,\n                                                         boolean shouldReport) {\n-        final SecurityHandshakeObserver observer = shouldReport ? handshakeObserver(pipeline) : null;\n+        final SecurityHandshakeObserver observer;\n+        if (shouldReport) {\n+            try {\n+                observer = handshakeObserver(pipeline);\n+            } catch (Exception e) {\n+                if (!sslEvent.isSuccess()) {\n+                    e.addSuppressed(sslEvent.cause());\n+                }\n+                deliverFailureCause(failureConsumer, e, null);", "originalCommit": "1f390ff9ad9d0e5d97d5a7c229ba3524ef2d48cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NjYwMg==", "url": "https://github.com/apple/servicetalk/pull/1134#discussion_r475876602", "bodyText": "There is nothing that users can do to misconfigure and hit this error. If they pass a custom transport observer, it won't happen. Also, users don't have ways to modify the pipeline.\nThis is only for us, as developers, to make sure that new protocols that we add do not have misconfiguration around observability. Any test that uses SSL for a new protocol will fail if shouldReport is true, but pipeline does not have a handler. It helps to avoid writing an additional test to verify that new protocol reports handshake status to SecurityHandshakeObserver.\nI don't have a strong opinion here, can remove it if it's not necessary.", "author": "idelpivnitskiy", "createdAt": "2020-08-24T20:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2MDg3Ng==", "url": "https://github.com/apple/servicetalk/pull/1134#discussion_r475960876", "bodyText": "known errors are avoidable, unknown errors are the problem with such things. Being pessimistic is better, so will suggest removing.", "author": "NiteshKant", "createdAt": "2020-08-24T23:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MjM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6fecc32d2b50c96b5ae75c8f7ac55a296191ba86", "chunk": "diff --git a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyPipelineSslUtils.java b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyPipelineSslUtils.java\nindex aa8d5b9c0..5395ab515 100644\n--- a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyPipelineSslUtils.java\n+++ b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyPipelineSslUtils.java\n\n@@ -52,29 +52,13 @@ public final class NettyPipelineSslUtils {\n      * @param pipeline the {@link ChannelPipeline} which contains handler containing the {@link SSLSession}.\n      * @param sslEvent the event indicating a SSL/TLS handshake completed.\n      * @param failureConsumer invoked if a failure is encountered.\n-     * @param shouldReport {@code true} if the handshake status should be reported to {@link SecurityHandshakeObserver}.\n      * @return The {@link SSLSession} or {@code null} if none can be found.\n      */\n     @Nullable\n     public static SSLSession extractSslSessionAndReport(ChannelPipeline pipeline,\n                                                         SslHandshakeCompletionEvent sslEvent,\n-                                                        Consumer<Throwable> failureConsumer,\n-                                                        boolean shouldReport) {\n-        final SecurityHandshakeObserver observer;\n-        if (shouldReport) {\n-            try {\n-                observer = handshakeObserver(pipeline);\n-            } catch (Exception e) {\n-                if (!sslEvent.isSuccess()) {\n-                    e.addSuppressed(sslEvent.cause());\n-                }\n-                deliverFailureCause(failureConsumer, e, null);\n-                return null;\n-            }\n-        } else {\n-            observer = null;\n-        }\n-\n+                                                        Consumer<Throwable> failureConsumer) {\n+        final SecurityHandshakeObserver observer = handshakeObserver(pipeline);\n         if (sslEvent.isSuccess()) {\n             final SslHandler sslHandler = pipeline.get(SslHandler.class);\n             if (sslHandler != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3Njg0Nw==", "url": "https://github.com/apple/servicetalk/pull/1134#discussion_r475776847", "bodyText": "I was hoping shouldReport to go away. AFAIU, it is required because we are adding the ConnectionObserverHandler conditionally. Can we add the handler unconditionally?\nMy motivation here is to remove conditional code based on instance checks which assumes that an observer is homogeneous => an observer can not be partially NOOP.", "author": "NiteshKant", "createdAt": "2020-08-24T17:24:12Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -641,7 +640,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n                 connection.nettyChannelPublisher.channelInboundClosed();\n             } else if (evt instanceof SslHandshakeCompletionEvent) {\n                 connection.sslSession = extractSslSessionAndReport(ctx.pipeline(), (SslHandshakeCompletionEvent) evt,\n-                        this::tryFailSubscriber, observer != null);\n+                        this::tryFailSubscriber, observer != NoopConnectionObserver.INSTANCE);", "originalCommit": "1f390ff9ad9d0e5d97d5a7c229ba3524ef2d48cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3NjYyNQ==", "url": "https://github.com/apple/servicetalk/pull/1134#discussion_r475876625", "bodyText": "Because we anyway need to have some NOOP impl, I use an internal NoopTransportObserver as a default when no observer is configured by users. For this case we have an opportunity to optimize and skip unnecessary handlers and operators.\nFor the case when users add a custom observer (even partially NOOP), we don't need to optimize those use-cases. Therefore, a reference check only for out impl is enough.\nInstead of adding ConnectionObserverHandler unconditionally, we can simplify extractSslSessionAndReport and look up for the handler unconditionally. But it will require us to write a test for SecurityHandshakeObserver every time we add a new protocol, as described in my previous comment.", "author": "idelpivnitskiy", "createdAt": "2020-08-24T20:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3Njg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2MjE4NA==", "url": "https://github.com/apple/servicetalk/pull/1134#discussion_r475962184", "bodyText": "But it will require us to write a test for SecurityHandshakeObserver every time we add a new protocol\n\nAs adding new protocols is less frequent, I think it is fair to trade-off code clarity in this case.\n\nlook up for the handler unconditionally.\n\nsgtm", "author": "NiteshKant", "createdAt": "2020-08-24T23:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3Njg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6fecc32d2b50c96b5ae75c8f7ac55a296191ba86", "chunk": "diff --git a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java\nindex 8a485f3a3..af5b87d22 100644\n--- a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java\n+++ b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java\n\n@@ -640,7 +640,7 @@ public final class DefaultNettyConnection<Read, Write> extends NettyChannelListe\n                 connection.nettyChannelPublisher.channelInboundClosed();\n             } else if (evt instanceof SslHandshakeCompletionEvent) {\n                 connection.sslSession = extractSslSessionAndReport(ctx.pipeline(), (SslHandshakeCompletionEvent) evt,\n-                        this::tryFailSubscriber, observer != NoopConnectionObserver.INSTANCE);\n+                        this::tryFailSubscriber);\n                 if (subscriber != null) {\n                     assert waitForSslHandshake;\n                     completeSubscriber();\n"}}, {"oid": "6fecc32d2b50c96b5ae75c8f7ac55a296191ba86", "url": "https://github.com/apple/servicetalk/commit/6fecc32d2b50c96b5ae75c8f7ac55a296191ba86", "message": "Address comments", "committedDate": "2020-08-24T23:58:08Z", "type": "commit"}, {"oid": "c3511393dfa917fa0bbab91b83042fb899a75fb2", "url": "https://github.com/apple/servicetalk/commit/c3511393dfa917fa0bbab91b83042fb899a75fb2", "message": "Suppress false positive spotbugs warnings", "committedDate": "2020-08-25T00:10:01Z", "type": "commit"}, {"oid": "ff97d58cd511ed05a4185620a658564d160311af", "url": "https://github.com/apple/servicetalk/commit/ff97d58cd511ed05a4185620a658564d160311af", "message": "Improve HttpTransportObserverTest.echoRequestResponse", "committedDate": "2020-08-25T00:39:51Z", "type": "commit"}, {"oid": "d7c6ae41c3c73770e48341389b2b946a756e5039", "url": "https://github.com/apple/servicetalk/commit/d7c6ae41c3c73770e48341389b2b946a756e5039", "message": "Revert \"Address comments\"\n\nThis reverts commit 6fecc32d2b50c96b5ae75c8f7ac55a296191ba86.", "committedDate": "2020-08-25T01:59:04Z", "type": "commit"}, {"oid": "dee935a1281d9a1e918a1efc943d770a3450ecaf", "url": "https://github.com/apple/servicetalk/commit/dee935a1281d9a1e918a1efc943d770a3450ecaf", "message": "Log errors during handshake observer look up instead of failing the subscriber", "committedDate": "2020-08-25T02:07:50Z", "type": "commit"}]}