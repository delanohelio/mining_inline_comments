{"pr_number": 1057, "pr_title": "CancellableThenSubscription avoiding infinite loop", "pr_createdAt": "2020-05-15T19:43:38Z", "pr_url": "https://github.com/apple/servicetalk/pull/1057", "timeline": [{"oid": "a8c858c1806f0b54e4c7c47243f0ffadf33813d6", "url": "https://github.com/apple/servicetalk/commit/a8c858c1806f0b54e4c7c47243f0ffadf33813d6", "message": "CancellableThenSubscription avoiding infinite loop\n\nMotivation:\nCancellableThenSubscription may get into an infinite loop if\nsetSubscription method is called twice. This is invalid usage as\ndescribed by the API but there are issues that suggest this may be\noccurring [1][2][3] and if it does we should avoid infinite looping.\n\n[1] https://github.com/apple/servicetalk/issues/744\n[2] https://github.com/apple/servicetalk/issues/1040\n[3] https://github.com/apple/servicetalk/issues/1053\n\nModifications:\n- Rename CancellableThenSubscription to\nDelayedCancellableThenSubscription\n- Leverage DelayedCancellable and DelayedSubscription existing code to\nconstruct DelayedCancellableThenSubscription to share code and lower\ncomplexity\n\nResult:\nDelayedCancellableThenSubscription prevents infinite loops. This may\nimpact the following operators:\n- Single#flatMapPublisher(..)\n- Completable#concat(Publisher)\n- Single#concat(Publisher)", "committedDate": "2020-05-15T19:42:38Z", "type": "commit"}, {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468", "url": "https://github.com/apple/servicetalk/commit/6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468", "message": "make tests more forgiving with invalid requestn matching", "committedDate": "2020-05-15T19:51:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5Mjc0NA==", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r426792744", "bodyText": "Is this useful anywhere else but for the concat case?\nCan the switch between cancellable and subscription be local to DelayedCancellableThenSubscription?", "author": "NiteshKant", "createdAt": "2020-05-18T17:42:56Z", "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java", "diffHunk": "@@ -52,4 +52,12 @@ public void cancel() {\n             oldCancellable.cancel();\n         }\n     }\n+\n+    /**\n+     * Dereference the internal {@link Cancellable} and prevent future calls to\n+     * {@link #delayedCancellable(Cancellable)}.\n+     */\n+    protected final void disableCancellable() {", "originalCommit": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Mzk3NQ==", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r427683975", "bodyText": "DelayedCancellableThenSubscription is the only consumer of this API.\nOptions to accomplish dereference:\n\nDelayedCancellable#cancel() - this may involve additional offloading and complicates the control flow a bit.\nDelayedCancellable#disableCancellable - adds extra protected method to the API. The API\nDelayedCancellableThenSubscription to duplicate DelayedCancellable logic - logic isn't overly complicated so may not be a deal breaker, but more code duplication.\n\nI'll update to the last option to avoid API change.", "author": "Scottmitch", "createdAt": "2020-05-20T01:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5Mjc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "08d5bb85457a9c2028289b2f22952bee0cb0b80e", "chunk": "diff --git a/servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java b/servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java\nindex 1f7257737..df4cd1954 100644\n--- a/servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java\n+++ b/servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java\n\n@@ -52,12 +52,4 @@ public class DelayedCancellable implements Cancellable {\n             oldCancellable.cancel();\n         }\n     }\n-\n-    /**\n-     * Dereference the internal {@link Cancellable} and prevent future calls to\n-     * {@link #delayedCancellable(Cancellable)}.\n-     */\n-    protected final void disableCancellable() {\n-        current = IGNORE_CANCEL;\n-    }\n }\n"}}, {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e", "url": "https://github.com/apple/servicetalk/commit/08d5bb85457a9c2028289b2f22952bee0cb0b80e", "message": "internalize DelayedCancellable", "committedDate": "2020-05-20T01:04:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NTA3MQ==", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r427685071", "bodyText": "I considered making DelayedSubscription non-final and extending it, but lets defer this for a followup PR if necessary.", "author": "Scottmitch", "createdAt": "2020-05-20T01:06:26Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+/**\n+ * An implementation of {@link Subscription} that starts as a {@link Cancellable} but then is replaced with an actual\n+ * {@link Subscription}. The expected sequence of events is:\n+ * <ul>\n+ *     <li>{@link #delayedCancellable(Cancellable)}</li>\n+ *     <li>{@link #delayedSubscription(Subscription)}</li>\n+ * </ul>\n+ * The {@link Subscription} methods can be invoked at any time.\n+ */\n+class DelayedCancellableThenSubscription implements Subscription {\n+    private final DelayedSubscription delayedSubscription = new DelayedSubscription();", "originalCommit": "08d5bb85457a9c2028289b2f22952bee0cb0b80e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNjcyMg==", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r428126722", "bodyText": "This LGTM", "author": "NiteshKant", "createdAt": "2020-05-20T15:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NTA3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDU0Ng==", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r428190546", "bodyText": "small followup #1061 to just use current instead of current and delayedSubscription", "author": "NiteshKant", "createdAt": "2020-05-20T17:37:12Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+/**\n+ * An implementation of {@link Subscription} that starts as a {@link Cancellable} but then is replaced with an actual\n+ * {@link Subscription}. The expected sequence of events is:\n+ * <ul>\n+ *     <li>{@link #delayedCancellable(Cancellable)}</li>\n+ *     <li>{@link #delayedSubscription(Subscription)}</li>\n+ * </ul>\n+ * The {@link Subscription} methods can be invoked at any time.\n+ */\n+class DelayedCancellableThenSubscription implements Subscription {\n+    private final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+    private static final AtomicReferenceFieldUpdater<DelayedCancellableThenSubscription, Cancellable> currentUpdater =\n+            newUpdater(DelayedCancellableThenSubscription.class, Cancellable.class, \"current\");\n+    @Nullable\n+    private volatile Cancellable current;\n+\n+    @Override\n+    public void request(final long n) {\n+        delayedSubscription.request(n);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        try {", "originalCommit": "08d5bb85457a9c2028289b2f22952bee0cb0b80e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}