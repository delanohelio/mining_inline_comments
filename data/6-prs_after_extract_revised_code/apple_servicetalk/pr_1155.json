{"pr_number": 1155, "pr_title": "Do not complete server write if there are still pending requests", "pr_createdAt": "2020-09-18T04:31:35Z", "pr_url": "https://github.com/apple/servicetalk/pull/1155", "timeline": [{"oid": "fa61c5bc66fc77a3e2b07351a8acc77a770060ba", "url": "https://github.com/apple/servicetalk/commit/fa61c5bc66fc77a3e2b07351a8acc77a770060ba", "message": "Do not complete server write if there are still pending requests\n\nMotivation:\n\n`RequestResponseCloseHandler.protocolPayloadEndOutbound` callback triggers\n`ProtocolPayloadEndEvent` when server is in closing state without accounting\nfor pending requests. As the result, server will not send a response for the\nsecond pipelined request, will not transition to idle state, and will never\ncomplete graceful closure.\n\nModifications:\n\n- Account for `pending` value before emitting `ProtocolPayloadEndEvent`;\n- Add a test to verify server does not trigger `ProtocolPayloadEndEvent`\nwhile requests are pending;\n\nResult:\n\nServer closes gracefully if graceful closure was initiated while it was\nprocessing 2+ pipelined requests.", "committedDate": "2020-09-17T22:36:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDY4OQ==", "url": "https://github.com/apple/servicetalk/pull/1155#discussion_r491244689", "bodyText": "I think the real problem is that we are not cancelling the Subscription when we are prematurely completing the write source in WriteStreamSubscriber.\nThis event is meant to indicate payload end so I don't think we should further override it to mean \"last\" payload end.", "author": "NiteshKant", "createdAt": "2020-09-19T00:33:44Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -164,7 +164,7 @@ public void protocolPayloadBeginOutbound(final ChannelHandlerContext ctx) {\n \n     @Override\n     public void protocolPayloadEndOutbound(final ChannelHandlerContext ctx) {\n-        if (isClient || has(state, CLOSING)) {\n+        if (isClient || (has(state, CLOSING) && pending == 0)) {", "originalCommit": "fa61c5bc66fc77a3e2b07351a8acc77a770060ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0ODEzMA==", "url": "https://github.com/apple/servicetalk/pull/1155#discussion_r491248130", "bodyText": "You had a similar discussion with Jo a while ago: #919 (comment)\nAs was said:\n\nthis event is only valuable to determine if we expect any other write on this connection\n\nTaking into account how the read/write is used on H1 server:\n\nwe have to suppress this event before it reaches WSS in the case of H1 server\n\nThe only thing that was not accounted in this statement is that server may already receive 2+ requests, while graceful closure is triggered. Therefore, pending == 0 is added. Only internal state of RequestResponseCloseHandler knows if there are some requests pending or not.\nI'm not sure we need to cancel the Subscription as we want to continue processing until pending == 0.", "author": "idelpivnitskiy", "createdAt": "2020-09-19T01:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMTgxNg==", "url": "https://github.com/apple/servicetalk/pull/1155#discussion_r492221816", "bodyText": "This is the write method we are discussing (reducing signature for brevity)\nCompletable write(Publisher)\nFor this method WriteStreamSubscriber is terminating the Subscriber of the returned Completable but not cancelling the Subscription of the Publisher. So we have a  Subscription which has no way to be cancelled and no more items can be requested. That is the problem why the server does not ever complete as it does not read any more and does not receive any error.\nRe: event semantics\nI think that statement is overloaded. I do not think the statement was made w.r.t multiple different Publisher (requests) but multiple items from a single Publisher.\nWith this change would we wait for pending responses to be written if the user adds a Connection: Close header in one of the responses when more requests are pipelined?", "author": "NiteshKant", "createdAt": "2020-09-21T17:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MzA4Nw==", "url": "https://github.com/apple/servicetalk/pull/1155#discussion_r496093087", "bodyText": "After further investigation, I can conclude that the same issue happens not only for USER_CLOSING case, but also for PROTOCOL_CLOSING_INBOUND. If a pipelined server connection already read 2 requests, then users initiated a graceful closure or the 2nd request had Connection: close header, server will send a response only for the 1st request. Then ProtocolPayloadEndEvent will be emitted that is closing WSS => 2nd response will never send back => connection won't become idle and won't be closed.\nFor the PROTOCOL_CLOSING_OUTBOUND this PR does not change the behavior, because we reset pending to 0 in this case:\n\n  \n    \n      servicetalk/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java\n    \n    \n        Lines 267 to 274\n      in\n      1aac864\n    \n    \n    \n    \n\n        \n          \n           } else if (evt == PROTOCOL_CLOSING_OUTBOUND) { // Server \n        \n\n        \n          \n               // eagerly close inbound channel on an outbound close command, unless we are still reading \n        \n\n        \n          \n               // the current request, no eager close on PROTOCOL_CLOSING_INBOUND \n        \n\n        \n          \n               if (pending != 0 || !has(state, READ)) { // Don't abort current request \n        \n\n        \n          \n                   serverHalfCloseInbound(channel); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               // discards extra pending requests when closing, ensures an eventual \"idle\" state \n        \n\n        \n          \n               pending = 0;", "author": "idelpivnitskiy", "createdAt": "2020-09-28T16:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MzU4Mg==", "url": "https://github.com/apple/servicetalk/pull/1155#discussion_r496093582", "bodyText": "I'm agreed that there is also an issue that we do not cancel Subscription in WSS. We will need to fix that one as well in a separate PR, because it's not related to this issue.", "author": "idelpivnitskiy", "createdAt": "2020-09-28T16:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2ODUyNQ==", "url": "https://github.com/apple/servicetalk/pull/1155#discussion_r497068525", "bodyText": "As we discussed offline, I've renamed the event to OutboundDataEndEvent.\nAlso added tests to verify that all use-cases that we discussed in this thread work correctly.", "author": "idelpivnitskiy", "createdAt": "2020-09-29T21:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1OTU1NA==", "url": "https://github.com/apple/servicetalk/pull/1155#discussion_r497159554", "bodyText": "For this method WriteStreamSubscriber is terminating the Subscriber of the returned Completable but not cancelling the Subscription of the Publisher. So we have a  Subscription which has no way to be cancelled and no more items can be requested.\n\n@NiteshKant submitted a follow-up for the WSS issue you described: #1160", "author": "idelpivnitskiy", "createdAt": "2020-09-29T23:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "923a90f4cf8ab6e7d23208e763125b281f6afdd7", "chunk": "diff --git a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java\nindex cda3e5a9f..d1fc98e5c 100644\n--- a/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java\n+++ b/servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java\n\n@@ -165,7 +165,7 @@ class RequestResponseCloseHandler extends CloseHandler {\n     @Override\n     public void protocolPayloadEndOutbound(final ChannelHandlerContext ctx) {\n         if (isClient || (has(state, CLOSING) && pending == 0)) {\n-            ctx.pipeline().fireUserEventTriggered(ProtocolPayloadEndEvent.OUTBOUND);\n+            ctx.pipeline().fireUserEventTriggered(OutboundDataEndEvent.INSTANCE);\n         }\n     }\n \n"}}, {"oid": "92a78e7ea3b39fbfabf59b341a3686502ff75610", "url": "https://github.com/apple/servicetalk/commit/92a78e7ea3b39fbfabf59b341a3686502ff75610", "message": "Improve ConnectionCloseHeaderHandlingTest", "committedDate": "2020-09-29T19:03:22Z", "type": "commit"}, {"oid": "923a90f4cf8ab6e7d23208e763125b281f6afdd7", "url": "https://github.com/apple/servicetalk/commit/923a90f4cf8ab6e7d23208e763125b281f6afdd7", "message": "Rename ProtocolPayloadEndEvent -> OutboundDataEndEvent", "committedDate": "2020-09-29T19:13:03Z", "type": "commit"}, {"oid": "f3c25afff79d48c64277c89f4ca354f7bdd90f9c", "url": "https://github.com/apple/servicetalk/commit/f3c25afff79d48c64277c89f4ca354f7bdd90f9c", "message": "Add ServerRespondsOnClosingTest", "committedDate": "2020-09-29T21:21:23Z", "type": "commit"}, {"oid": "70700bee32aabfa86ff1183e2437cd94b33c4339", "url": "https://github.com/apple/servicetalk/commit/70700bee32aabfa86ff1183e2437cd94b33c4339", "message": "Use TLSv1.2 to workaround #1156", "committedDate": "2020-09-29T21:49:34Z", "type": "commit"}, {"oid": "d60b79dcd6e7fcb1a05d1e1360f29c13ca4f1d61", "url": "https://github.com/apple/servicetalk/commit/d60b79dcd6e7fcb1a05d1e1360f29c13ca4f1d61", "message": "Temporary relax some tests until #1141 is merged", "committedDate": "2020-09-30T05:36:09Z", "type": "commit"}]}