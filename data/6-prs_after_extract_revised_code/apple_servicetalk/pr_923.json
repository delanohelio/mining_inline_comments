{"pr_number": 923, "pr_title": "WriteStreamSubscriber and WriteListener cleanup", "pr_createdAt": "2020-01-17T15:40:37Z", "pr_url": "https://github.com/apple/servicetalk/pull/923", "timeline": [{"oid": "94dd0aec354d11e9d83d05ebc4608d4e09904c94", "url": "https://github.com/apple/servicetalk/commit/94dd0aec354d11e9d83d05ebc4608d4e09904c94", "message": "WriteStreamSubscriber and WriteListener cleanup\n\nMotivation:\nThe WriteListener interface has grown over time and its naming conventions have\nbecome less clear. For example \"closeGracefully\" implies that some action is\nexpected to be taken to account for pending writes, but in reality this is just\na notification that the transport's outbound side has been closed and should be\ninterpreted accordingly by the implementation.\nThe CloseHandler introduced a new class and public static variable which is\nintended for use in the http/2.0 codec. However the CloseHandler isn't protocol\nspecific and the naming of this class implies an inverted dependency\nrelationship.\n\nModifications:\n- Rename WritableListener to ChannelOutboundListener. Rename method names on\nthis interface to indicate they are notification of channel events and\nimplementations can react however they need to.\n- Rename H2ProtocolHandler to ProtocolOutboundCloseEventHandler to be more\nagnositc to specific protocols which may use this class and associated public\nstatic singleton instance.\n- DefaultNettyConnectionTest writes a static buffer, but doesn't duplicate() on\neach use. The test now duplicates the buffer to avoid shared indexes.\n- Avoid forcing error logs from WriteSingleSubscriber because the async\ncontrol flow has already been completed and the additional noise/overhead of the\nlog may not be necessary.\n\nResult:\nMore clarity around ChannelOutboundListener interfaces and implementations.", "committedDate": "2020-01-17T15:37:53Z", "type": "commit"}, {"oid": "d580f8419590521cc90ce0e066e53e6385c15423", "url": "https://github.com/apple/servicetalk/commit/d580f8419590521cc90ce0e066e53e6385c15423", "message": "flip copare order on TRAILERs to avoid potential NPE", "committedDate": "2020-01-17T15:43:21Z", "type": "commit"}, {"oid": "1638ff22a7f630a8b958e1db5119fea700ef72e4", "url": "https://github.com/apple/servicetalk/commit/1638ff22a7f630a8b958e1db5119fea700ef72e4", "message": "checkstyle", "committedDate": "2020-01-17T16:21:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjg0MQ==", "url": "https://github.com/apple/servicetalk/pull/923#discussion_r368036841", "bodyText": "We call this method when we receive ProtocolPayloadEndEvent.OUTBOUND which is different than channel outbound closed. I am not convinced this is the correct nomenclature here.\nFrom the perspective of a write, outbound closure is the only interesting event and we intentionally wanted to remove the older approach of handling outbound closure and channel closure differently. Although this renaming does not alter behavior but it has the potential of adding confusion that outbound closure and full channel closure should be handled differently.", "author": "NiteshKant", "createdAt": "2020-01-17T16:54:42Z", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -459,37 +464,34 @@ public FlushStrategy defaultFlushStrategy() {\n         void channelWritable();\n \n         /**\n-         * Close the channel after the pending writes complete.\n-         *\n+         * Notification that the channel's outbound side has been closed and will no longer accept writes.s\n          * <p>\n-         * Calling {@link #close(Throwable)} after {@link #closeGracefully()} will be ignored.\n-         * <p>\n-         * This event is expected be called from the eventloop.\n+         * Always called from the event loop thread.\n          */\n-        void closeGracefully();\n+        void channelOutboundClosed();\n \n         /**\n          * Notification that the channel has been closed.\n          * <p>\n-         * This may not always be called from the event loop. For example if the channel is closed when a new write\n-         * happens then this method will be called from the writer thread.\n+         * This may not always be called from the event loop thread. For example if the channel is closed when a new\n+         * write happens then this method will be called from the writer thread.\n          *\n          * @param closedException the exception which describes the close rational.\n          */\n-        void close(Throwable closedException);\n+        void channelClosed(Throwable closedException);\n     }\n \n-    private static final class NoopWritableListener implements WritableListener {\n+    private static final class NoopChannelOutboundListener implements ChannelOutboundListener {\n         @Override\n         public void channelWritable() {\n         }\n \n         @Override\n-        public void closeGracefully() {\n+        public void channelOutboundClosed() {", "originalCommit": "1638ff22a7f630a8b958e1db5119fea700ef72e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5NDQ1NA==", "url": "https://github.com/apple/servicetalk/pull/923#discussion_r368094454", "bodyText": "(I meant to link the related discussion #919 (comment) here)\nIMHO the interface naming (prior to this PR) has confusing semantics. From a functional perspective this interface provides methods that are called when certain channel/protocol events occur (e.g. writability change, channel close, protocol write close, etc...). However the method names are targeted toward how the implementations are assumed to react. The closeGracefully creates confusion IMHO because it isn't clear how implementations are expected to change their internal state related to any writes/events (which maybe concurrent) that may occur (e.g. found myself asking these types of questions looking at WSS in isolation).\nI see how channelOutboundClosed maybe ambiguous between \"transport closure\" and \"protocol not accepting any more writes\" and happy to consider renaming, but I think it makes more sense to target the event name (rather than the assumed action this event results in). What about channelProtocolOutboundClosed or protocolOutboundClosed ?", "author": "Scottmitch", "createdAt": "2020-01-17T19:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1OTMwNw==", "url": "https://github.com/apple/servicetalk/pull/923#discussion_r376459307", "bodyText": "@NiteshKant - wdyt?", "author": "Scottmitch", "createdAt": "2020-02-07T15:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MzMwNg==", "url": "https://github.com/apple/servicetalk/pull/923#discussion_r376543306", "bodyText": "I am not convinced that the method name should be targetted to the event name that we know about today (assuming we will not have any other case in which we need similar behavior, i.e. to wait for all writes to finish before closure) but this is an internal class and the naming is more about us to understand behavior. So, if you are convinced, lets go ahead.", "author": "NiteshKant", "createdAt": "2020-02-07T18:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjg0MQ=="}], "type": "inlineReview", "revised_code": null}]}