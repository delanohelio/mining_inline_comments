{"pr_number": 1196, "pr_title": "Improve DefaultHttpRequestMetaData query manipulator methods", "pr_createdAt": "2020-11-03T23:39:55Z", "pr_url": "https://github.com/apple/servicetalk/pull/1196", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODc5NQ==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517018795", "bodyText": "the null check and method name setQueryParams -> query are the only changes in this method.", "author": "Scottmitch", "createdAt": "2020-11-03T23:40:37Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -356,6 +366,79 @@ private Uri lazyParseRequestTarget() {\n         return requestTargetUri;\n     }\n \n+    private void query(final Map<String, List<String>> params) {\n+        Uri httpUri = lazyParseRequestTarget();\n+        StringBuilder sb = new StringBuilder(httpUri.uri().length() + params.size() * 8);\n+\n+        appendScheme(sb, httpUri);\n+        appendAuthority(sb, httpUri);\n+        sb.append(httpUri.path());\n+\n+        // Append query params\n+        Iterator<Entry<String, List<String>>> itr = params.entrySet().iterator();\n+        char prefixChar = '?';\n+        while (itr.hasNext()) {\n+            Entry<String, List<String>> next = itr.next();\n+            String encodedKey = encodeComponent(QUERY, next.getKey(), REQUEST_TARGET_CHARSET, true);\n+            sb.append(prefixChar).append(encodedKey);\n+            List<String> values = next.getValue();\n+            if (values != null) {", "originalCommit": "a27d8b30107e3f455b80816d825b9c3de36dc6cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "url": "https://github.com/apple/servicetalk/commit/9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "message": "Improve DefaultHttpRequestMetaData query manipulator methods\n\nMotivation:\nDefaultHttpRequestMetaData has methods that focus on mainpulating the\nquery string such as addQueryParameters and setQueryParameter. These\nmethods all re-encode the entire query string and request target on each\nmodification. However these methods are often used multiple times\nsequentially, and the duplicate encoding is wasteful.\n\nModifications:\n- Defer encoding the query string and request target until other methods\non the DefaultHttpRequestMetaData require it (e.g. requestTarget() and\nother query accessor methods).\n\nResult:\nLess overhead for DefaultHttpRequestMetaData#addQueryParameters and\nrelated query manipulator methods.", "committedDate": "2020-11-03T23:43:56Z", "type": "commit"}, {"oid": "9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "url": "https://github.com/apple/servicetalk/commit/9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "message": "Improve DefaultHttpRequestMetaData query manipulator methods\n\nMotivation:\nDefaultHttpRequestMetaData has methods that focus on mainpulating the\nquery string such as addQueryParameters and setQueryParameter. These\nmethods all re-encode the entire query string and request target on each\nmodification. However these methods are often used multiple times\nsequentially, and the duplicate encoding is wasteful.\n\nModifications:\n- Defer encoding the query string and request target until other methods\non the DefaultHttpRequestMetaData require it (e.g. requestTarget() and\nother query accessor methods).\n\nResult:\nLess overhead for DefaultHttpRequestMetaData#addQueryParameters and\nrelated query manipulator methods.", "committedDate": "2020-11-03T23:43:56Z", "type": "forcePushed"}, {"oid": "c19a84f7ac15c708213158a6c1c6091aca78ac5f", "url": "https://github.com/apple/servicetalk/commit/c19a84f7ac15c708213158a6c1c6091aca78ac5f", "message": "more tests", "committedDate": "2020-11-03T23:50:51Z", "type": "commit"}, {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0", "url": "https://github.com/apple/servicetalk/commit/256e4462feaebc491c21f7d9859fbf791808f8a0", "message": "more tests", "committedDate": "2020-11-03T23:53:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMzUyMQ==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517023521", "bodyText": "uri is always an empty string, can we remove it?\nthe query is always a non-null", "author": "idelpivnitskiy", "createdAt": "2020-11-03T23:56:37Z", "path": "servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n+import static io.servicetalk.http.api.HttpRequestMethod.GET;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+@Fork(value = 1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+public class QueryStringEncodingBenchmark {\n+    private String value;\n+    @Param({\"100\", \"1000\", \"10000\"})\n+    private int length;\n+    @Param({\"false\", \"true\"})\n+    private boolean needsEncoding;\n+    private DefaultHttpRequestMetaData stMetaData;\n+    private final HttpHeaders headers = new DefaultHttpHeadersFactory(false, false).newHeaders();\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        StringBuilder sb = new StringBuilder(length);\n+        if (needsEncoding) {\n+            final int halfLength = length >>> 1;\n+            int i = 0;\n+            for (; i < halfLength; ++i) {\n+                sb.append('a');\n+            }\n+            sb.append(' ');\n+            for (; i < length; ++i) {\n+                sb.append('b');\n+            }\n+        } else {\n+            for (int i = 0; i < length; ++i) {\n+                sb.append('a');\n+            }\n+        }\n+        value = sb.toString();\n+        stMetaData = new DefaultHttpRequestMetaData(GET, \"\", HTTP_1_1, headers);\n+    }\n+\n+    @Benchmark\n+    public HttpRequestMetaData stEncoding() {\n+        return stMetaData.query(value);\n+    }\n+\n+    @Benchmark\n+    public String jdkURLEncoder() throws UnsupportedEncodingException {\n+        return jdkBuildURL(\"\", URLEncoder.encode(value, UTF_8.name()));\n+    }\n+\n+    private static String jdkBuildURL(final String uri, @Nullable String query) {", "originalCommit": "256e4462feaebc491c21f7d9859fbf791808f8a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4MzY2MQ==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517583661", "bodyText": "this code is meant to replicate the copying done in DefaultHttpRequestMetaData which would be required to apply the URI. It doesn't include all the components (e.g. scheme, host, etc.) but the goal is to keep them similar and representative of what needs to be done in either case (e.g. build the URI as a single String).", "author": "Scottmitch", "createdAt": "2020-11-04T19:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMzUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "chunk": "diff --git a/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java b/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\nindex 0b20ef266..97f4add70 100644\n--- a/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\n+++ b/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\n\n@@ -31,6 +31,7 @@ import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n import javax.annotation.Nullable;\n \n+import static io.servicetalk.http.api.DefaultHttpHeadersFactory.INSTANCE;\n import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n import static io.servicetalk.http.api.HttpRequestMethod.GET;\n import static java.nio.charset.StandardCharsets.UTF_8;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMzgzOA==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517023838", "bodyText": "The ? will always trigger resize of the internal array, which is impacting numbers", "author": "idelpivnitskiy", "createdAt": "2020-11-03T23:57:42Z", "path": "servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n+import static io.servicetalk.http.api.HttpRequestMethod.GET;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+@Fork(value = 1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+public class QueryStringEncodingBenchmark {\n+    private String value;\n+    @Param({\"100\", \"1000\", \"10000\"})\n+    private int length;\n+    @Param({\"false\", \"true\"})\n+    private boolean needsEncoding;\n+    private DefaultHttpRequestMetaData stMetaData;\n+    private final HttpHeaders headers = new DefaultHttpHeadersFactory(false, false).newHeaders();\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        StringBuilder sb = new StringBuilder(length);\n+        if (needsEncoding) {\n+            final int halfLength = length >>> 1;\n+            int i = 0;\n+            for (; i < halfLength; ++i) {\n+                sb.append('a');\n+            }\n+            sb.append(' ');\n+            for (; i < length; ++i) {\n+                sb.append('b');\n+            }\n+        } else {\n+            for (int i = 0; i < length; ++i) {\n+                sb.append('a');\n+            }\n+        }\n+        value = sb.toString();\n+        stMetaData = new DefaultHttpRequestMetaData(GET, \"\", HTTP_1_1, headers);\n+    }\n+\n+    @Benchmark\n+    public HttpRequestMetaData stEncoding() {\n+        return stMetaData.query(value);\n+    }\n+\n+    @Benchmark\n+    public String jdkURLEncoder() throws UnsupportedEncodingException {\n+        return jdkBuildURL(\"\", URLEncoder.encode(value, UTF_8.name()));\n+    }\n+\n+    private static String jdkBuildURL(final String uri, @Nullable String query) {\n+        // replicating what is done in DefaultHttpHeadersFactory to build the URI\n+        StringBuilder sb = query != null ? new StringBuilder(uri.length() + query.length()) :", "originalCommit": "256e4462feaebc491c21f7d9859fbf791808f8a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4MzczMA==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517583730", "bodyText": "good catch, I'll fix in real code too", "author": "Scottmitch", "createdAt": "2020-11-04T19:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMzgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "chunk": "diff --git a/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java b/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\nindex 0b20ef266..97f4add70 100644\n--- a/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\n+++ b/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\n\n@@ -31,6 +31,7 @@ import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n import javax.annotation.Nullable;\n \n+import static io.servicetalk.http.api.DefaultHttpHeadersFactory.INSTANCE;\n import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n import static io.servicetalk.http.api.HttpRequestMethod.GET;\n import static java.nio.charset.StandardCharsets.UTF_8;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDEzMg==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517024132", "bodyText": "Headers are not plain a role in these 2 benchmarks, DefaultHttpHeadersFactory.INSTANCE can be used", "author": "idelpivnitskiy", "createdAt": "2020-11-03T23:58:47Z", "path": "servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n+import static io.servicetalk.http.api.HttpRequestMethod.GET;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+@Fork(value = 1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+public class QueryStringEncodingBenchmark {\n+    private String value;\n+    @Param({\"100\", \"1000\", \"10000\"})\n+    private int length;\n+    @Param({\"false\", \"true\"})\n+    private boolean needsEncoding;\n+    private DefaultHttpRequestMetaData stMetaData;\n+    private final HttpHeaders headers = new DefaultHttpHeadersFactory(false, false).newHeaders();\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        StringBuilder sb = new StringBuilder(length);\n+        if (needsEncoding) {\n+            final int halfLength = length >>> 1;\n+            int i = 0;\n+            for (; i < halfLength; ++i) {\n+                sb.append('a');\n+            }\n+            sb.append(' ');\n+            for (; i < length; ++i) {\n+                sb.append('b');\n+            }\n+        } else {\n+            for (int i = 0; i < length; ++i) {\n+                sb.append('a');\n+            }\n+        }\n+        value = sb.toString();\n+        stMetaData = new DefaultHttpRequestMetaData(GET, \"\", HTTP_1_1, headers);", "originalCommit": "256e4462feaebc491c21f7d9859fbf791808f8a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "chunk": "diff --git a/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java b/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\nindex 0b20ef266..97f4add70 100644\n--- a/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\n+++ b/servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java\n\n@@ -31,6 +31,7 @@ import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n import javax.annotation.Nullable;\n \n+import static io.servicetalk.http.api.DefaultHttpHeadersFactory.INSTANCE;\n import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n import static io.servicetalk.http.api.HttpRequestMethod.GET;\n import static java.nio.charset.StandardCharsets.UTF_8;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDY1MQ==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517030651", "bodyText": "Consider using markDirty() everywhere", "author": "idelpivnitskiy", "createdAt": "2020-11-04T00:21:47Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpQuery.java", "diffHunk": "@@ -179,7 +162,7 @@ public boolean remove(final String key, final String value) {\n         while (values.hasNext()) {\n             if (value.equals(values.next())) {\n                 values.remove();\n-                updateQueryParams();\n+                dirty = true;", "originalCommit": "256e4462feaebc491c21f7d9859fbf791808f8a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5MDU5Mw==", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517590593", "bodyText": "done", "author": "Scottmitch", "createdAt": "2020-11-04T19:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "chunk": "diff --git a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpQuery.java b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpQuery.java\nindex f30d92187..14af251ee 100644\n--- a/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpQuery.java\n+++ b/servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpQuery.java\n\n@@ -149,12 +151,11 @@ final class HttpQuery implements Iterable<Map.Entry<String, String>> {\n     }\n \n     public boolean remove(final String key) {\n-        final List<String> removedValues = params.remove(key);\n-        boolean removed = removedValues != null && !removedValues.isEmpty();\n-        if (removed) {\n-            dirty = true;\n+        if (params.remove(key) != null) {\n+            markDirty();\n+            return true;\n         }\n-        return removed;\n+        return false;\n     }\n \n     public boolean remove(final String key, final String value) {\n"}}, {"oid": "90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "url": "https://github.com/apple/servicetalk/commit/90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "message": "review comments", "committedDate": "2020-11-04T19:50:28Z", "type": "commit"}, {"oid": "c8274cd96ebe810266cc7f0b94afe67548d12196", "url": "https://github.com/apple/servicetalk/commit/c8274cd96ebe810266cc7f0b94afe67548d12196", "message": "modify benchmark to get before/after removal uri", "committedDate": "2020-11-04T19:59:29Z", "type": "commit"}]}