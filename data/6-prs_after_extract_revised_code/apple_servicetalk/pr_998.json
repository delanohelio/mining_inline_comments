{"pr_number": 998, "pr_title": "Work around SpotBugs JDK11 bug, make code more robust", "pr_createdAt": "2020-04-03T00:30:44Z", "pr_url": "https://github.com/apple/servicetalk/pull/998", "timeline": [{"oid": "af98928a486c937250eb418ca26f5998cfeb9ab0", "url": "https://github.com/apple/servicetalk/commit/af98928a486c937250eb418ca26f5998cfeb9ab0", "message": "Work around SpotBugs JDK11 bug, make code more robust\n\nMotivation:\nSpotBugs has a bug impacting builds on JDK11 https://github.com/spotbugs/spotbugs/issues/756. This also hinted at an area that could be made more robust.\n\nModifications:\n- Ignore SpotBugs warning due to bug\n- Improve robustness of handling null element from iterator\n\nResult:\nSpotBugs no longer fails on JDK11 builds.", "committedDate": "2020-04-03T00:30:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3NTc1Ng==", "url": "https://github.com/apple/servicetalk/pull/998#discussion_r402675756", "bodyText": "null value here is essentially OK from the context of this call and we generally pass through null.", "author": "NiteshKant", "createdAt": "2020-04-03T00:45:22Z", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "diffHunk": "@@ -155,7 +156,10 @@\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n             try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n-                final Resp firstItem = iterator.next();\n+                final Resp firstItem;\n+                if (!iterator.hasNext() || (firstItem = iterator.next()) == null) {", "originalCommit": "af98928a486c937250eb418ca26f5998cfeb9ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3NzkyMQ==", "url": "https://github.com/apple/servicetalk/pull/998#discussion_r402677921", "bodyText": "Can you clarify in which situations we expect to return a null value for a scalar blocking RPC call?", "author": "Scottmitch", "createdAt": "2020-04-03T00:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3NTc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczOTQ4OQ==", "url": "https://github.com/apple/servicetalk/pull/998#discussion_r402739489", "bodyText": "The scalar/streaming blocking/async variant is immaterial here and no we do not expect a null value but neither do we use the Resp here in a way that it can not be null.\nHypothesizing situations, streamingClientCall that is giving the BlockingIterator here is created using a StreamingHttpClient that is provided by the user of GrpcClientCallFactory API. It is nowhere we check that the payload of the response returned by the client can not be null unless we actually use it, eg: while deserializing. Deserializer here also is provided by the user. So really a user can pass null from everywhere and get back a null response and we really do not care.\nSo the point here isn't whether it is fair to make that assumption, it is really about whether there is any positive of making that assumption. Same argument as passing null through async sources, we do not care about it being null unless we use it.", "author": "NiteshKant", "createdAt": "2020-04-03T05:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3NTc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "625e5666a68456f4c88d30922d4f24c64dacaf2e", "chunk": "diff --git a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\nindex 9e2388080..e5ba3069e 100644\n--- a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\n+++ b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\n\n@@ -156,10 +155,8 @@ final class DefaultGrpcClientCallFactory implements GrpcClientCallFactory {\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n             try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n-                final Resp firstItem;\n-                if (!iterator.hasNext() || (firstItem = iterator.next()) == null) {\n-                    throw new NoSuchElementException(\"Empty or null return value is not supported\");\n-                }\n+                final Resp firstItem = iterator.next();\n+                assert firstItem != null;\n                 if (iterator.hasNext()) {\n                     iterator.next(); // Consume the next item to make sure it's not a TerminalNotification with an error\n                     throw new IllegalArgumentException(\"More than one response message received\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3NjAzMg==", "url": "https://github.com/apple/servicetalk/pull/998#discussion_r402676032", "bodyText": "Same here, we should pass through null values.", "author": "NiteshKant", "createdAt": "2020-04-03T00:46:26Z", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -593,11 +593,10 @@ public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> req\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n                             final Req firstItem;\n                             try (BlockingIterator<Req> requestIterator = request.iterator()) {\n-                                if (!requestIterator.hasNext()) {\n+                                if (!requestIterator.hasNext() || (firstItem = requestIterator.next()) == null) {", "originalCommit": "af98928a486c937250eb418ca26f5998cfeb9ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "625e5666a68456f4c88d30922d4f24c64dacaf2e", "chunk": "diff --git a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\nindex b266a98f0..6e3805b06 100644\n--- a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\n+++ b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\n\n@@ -593,10 +593,12 @@ final class GrpcRouter {\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n                             final Req firstItem;\n                             try (BlockingIterator<Req> requestIterator = request.iterator()) {\n-                                if (!requestIterator.hasNext() || (firstItem = requestIterator.next()) == null) {\n+                                if (!requestIterator.hasNext()) {\n                                     throw new GrpcStatus(INVALID_ARGUMENT, null,\n                                             SINGLE_MESSAGE_EXPECTED_NONE_RECEIVED_MSG).asException();\n                                 }\n+                                firstItem = requestIterator.next();\n+                                assert firstItem != null;\n                                 if (requestIterator.hasNext()) {\n                                     // Consume the next item to make sure it's not a TerminalNotification with an error\n                                     requestIterator.next();\n"}}, {"oid": "625e5666a68456f4c88d30922d4f24c64dacaf2e", "url": "https://github.com/apple/servicetalk/commit/625e5666a68456f4c88d30922d4f24c64dacaf2e", "message": "use assert instead of runtime check per review", "committedDate": "2020-04-03T18:55:55Z", "type": "commit"}]}