{"pr_number": 969, "pr_title": "More strict decoding of HTTP/1.x start-line", "pr_createdAt": "2020-03-17T23:08:58Z", "pr_url": "https://github.com/apple/servicetalk/pull/969", "timeline": [{"oid": "2fc14a6cc4af368886bbc6afd80e29e7d0155029", "url": "https://github.com/apple/servicetalk/commit/2fc14a6cc4af368886bbc6afd80e29e7d0155029", "message": "More strict decoding of HTTP/1.x start-line\n\nMotivation:\n\nRFC7230 allows only a single SP between start-line components:\nhttps://tools.ietf.org/html/rfc7230#section-3.1\nAnd it adds additional restrictions for which characters are\nallowed for each individual component.\n\nModifications:\n\n- Skip only limited number of prefacing control characters;\n- Do not allow leading/trailing WS for start-line;\n- Expect only a single SP/HTAB as a delimiter between start-line\ncomponents;\n- Verify that request-target and reason-phrase has only allowed\ncharacters;\n- Allow only upper-case letters for HTTP-method;\n- Simplify header field-name/field-value parsing;\n- Improved parsing for HTTP version;\n- Share common code between `HttpRequestDecoderTest` and\n`HttpResponseDecoderTest`;\n- Address issues with existing tests and add more tests\nfor decoders;\n\nResult:\n\nMore strict decoding of HTTP/1.x start-line.", "committedDate": "2020-03-09T18:42:31Z", "type": "commit"}, {"oid": "48a177c804e656532cae2dd96b6a1844b1562dd5", "url": "https://github.com/apple/servicetalk/commit/48a177c804e656532cae2dd96b6a1844b1562dd5", "message": "address comments", "committedDate": "2020-03-12T00:09:18Z", "type": "commit"}, {"oid": "acbc88af1e1dac2e3929c71e78922450921bcdb7", "url": "https://github.com/apple/servicetalk/commit/acbc88af1e1dac2e3929c71e78922450921bcdb7", "message": "unroll loop in handlePartialInitialLine", "committedDate": "2020-03-12T23:07:28Z", "type": "commit"}, {"oid": "7baef07ac9ab92495dd17f5fb51a84c023eb84b7", "url": "https://github.com/apple/servicetalk/commit/7baef07ac9ab92495dd17f5fb51a84c023eb84b7", "message": "Merge remote-tracking branch 'upstream/master' into strict-http-parsing", "committedDate": "2020-03-14T01:17:49Z", "type": "commit"}, {"oid": "3a9f80489bd40ec93b810d3ca66fc728c06d8c2d", "url": "https://github.com/apple/servicetalk/commit/3a9f80489bd40ec93b810d3ca66fc728c06d8c2d", "message": "handlePartialInitialLine: ensure there is at least one byte", "committedDate": "2020-03-14T01:24:51Z", "type": "commit"}, {"oid": "27edd1890693f0a8f8d604513eda43a53b1d833d", "url": "https://github.com/apple/servicetalk/commit/27edd1890693f0a8f8d604513eda43a53b1d833d", "message": "Merge remote-tracking branch 'upstream/master' into strict-http-parsing", "committedDate": "2020-03-17T23:07:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODQyMw==", "url": "https://github.com/apple/servicetalk/pull/969#discussion_r394078423", "bodyText": "any reason not to use a ByteProcessor here to reduce calls to getByte?", "author": "Scottmitch", "createdAt": "2020-03-18T02:49:43Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java", "diffHunk": "@@ -58,19 +62,27 @@ protected boolean isDecodingRequest() {\n \n     @Override\n     protected void handlePartialInitialLine(final ChannelHandlerContext ctx, final ByteBuf buffer) {\n-        final int len = min(3, buffer.readableBytes());\n-        for (int i = 0; i < len; ++i) {\n-            byte b = buffer.getByte(buffer.readerIndex() + i);\n-            if (b == ' ' && i > 0) {\n-                // If we find a space after at least one capital letter, accept this as valid.\n+        final int writerIndex = buffer.writerIndex();\n+        int readerIndex = buffer.readerIndex();\n+        if (readerIndex == writerIndex) {   // ByteBuf is not readable\n+            return;\n+        }\n+        byte b = buffer.getByte(readerIndex);", "originalCommit": "27edd1890693f0a8f8d604513eda43a53b1d833d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16d05e51d963601601e1c97252cdb122aa82c40f", "chunk": "diff --git a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java\nindex c09c9cd44..2520ede97 100644\n--- a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java\n+++ b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java\n\n@@ -62,20 +69,7 @@ final class HttpRequestDecoder extends HttpObjectDecoder<HttpRequestMetaData> {\n \n     @Override\n     protected void handlePartialInitialLine(final ChannelHandlerContext ctx, final ByteBuf buffer) {\n-        final int writerIndex = buffer.writerIndex();\n-        int readerIndex = buffer.readerIndex();\n-        if (readerIndex == writerIndex) {   // ByteBuf is not readable\n-            return;\n-        }\n-        byte b = buffer.getByte(readerIndex);\n-        ensureUpperCase(b);\n-        while (++readerIndex < writerIndex) {\n-            b = buffer.getByte(readerIndex);\n-            if (isWS(b)) {\n-                return;\n-            }\n-            ensureUpperCase(b);\n-        }\n+        buffer.forEachByte(FIND_WS_AFTER_METHOD_NAME);\n     }\n \n     private static void ensureUpperCase(final byte value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODc1OA==", "url": "https://github.com/apple/servicetalk/pull/969#discussion_r394078758", "bodyText": "consider doing validation only for custom header names, most of the time we shouldn't have to do the validation because it is handled in the lookup (e.g. if it matches a cached entry it is upper case). It is worth paying the string conversion costs assuming most of the time we will get a valid string.", "author": "Scottmitch", "createdAt": "2020-03-18T02:51:06Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java", "diffHunk": "@@ -79,17 +91,15 @@ protected HttpRequestMetaData createMessage(final ByteBuf buffer,\n                                                 final int firstStart, final int firstLength,\n                                                 final int secondStart, final int secondLength,\n                                                 final int thirdStart, final int thirdLength) {\n-        if (thirdLength < 0) {\n-            splitInitialLineError();\n-        }\n-\n         return newRequestMetaData(nettyBufferToHttpVersion(buffer, thirdStart, thirdLength),\n-                decodeHttpMethod(buffer.toString(firstStart, firstLength, US_ASCII)),\n+                decodeHttpMethod(buffer, firstStart, firstLength),\n                 buffer.toString(secondStart, secondLength, US_ASCII),\n                 headersFactory().newHeaders());\n     }\n \n-    private static HttpRequestMethod decodeHttpMethod(final String methodName) {\n+    private static HttpRequestMethod decodeHttpMethod(final ByteBuf buffer, final int start, final int length) {\n+        buffer.forEachByte(start, length, ENSURE_UPPER_CASE);", "originalCommit": "27edd1890693f0a8f8d604513eda43a53b1d833d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16d05e51d963601601e1c97252cdb122aa82c40f", "chunk": "diff --git a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java\nindex c09c9cd44..2520ede97 100644\n--- a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java\n+++ b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpRequestDecoder.java\n\n@@ -98,10 +92,13 @@ final class HttpRequestDecoder extends HttpObjectDecoder<HttpRequestMetaData> {\n     }\n \n     private static HttpRequestMethod decodeHttpMethod(final ByteBuf buffer, final int start, final int length) {\n-        buffer.forEachByte(start, length, ENSURE_UPPER_CASE);\n         final String methodName = buffer.toString(start, length, US_ASCII);\n         final HttpRequestMethod method = HttpRequestMethod.of(methodName);\n-        return method != null ? method : HttpRequestMethod.of(methodName, NONE);\n+        if (method != null) {\n+            return method;\n+        }\n+        buffer.forEachByte(start, length, ENSURE_UPPER_CASE);\n+        return HttpRequestMethod.of(methodName, NONE);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTQ1Nw==", "url": "https://github.com/apple/servicetalk/pull/969#discussion_r394079457", "bodyText": "nit: consider combining conditionals:\nif (value != HT && isISOControl(value) {\n  throw ...\n}\nreturn true;", "author": "Scottmitch", "createdAt": "2020-03-18T02:53:47Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java", "diffHunk": "@@ -38,13 +41,23 @@\n import static io.servicetalk.http.api.HttpResponseStatus.SWITCHING_PROTOCOLS;\n import static io.servicetalk.http.api.HttpResponseStatus.StatusClass.INFORMATIONAL_1XX;\n import static io.servicetalk.transport.netty.internal.CloseHandler.UNSUPPORTED_PROTOCOL_CLOSE_HANDLER;\n+import static java.lang.Character.isISOControl;\n import static java.lang.Math.min;\n import static java.nio.charset.StandardCharsets.US_ASCII;\n import static java.util.Objects.requireNonNull;\n \n final class HttpResponseDecoder extends HttpObjectDecoder<HttpResponseMetaData> {\n \n     private static final byte[] FIRST_BYTES = \"HTTP\".getBytes(US_ASCII);\n+    private static final ByteProcessor ENSURE_NO_CONTROL_CHARS = value -> {\n+        if (value == HT) {\n+            return true;    // allow HTAB\n+        }\n+        if (isISOControl(value)) {", "originalCommit": "27edd1890693f0a8f8d604513eda43a53b1d833d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16d05e51d963601601e1c97252cdb122aa82c40f", "chunk": "diff --git a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java\nindex 14beb313a..08aa7bc9e 100644\n--- a/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java\n+++ b/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java\n\n@@ -50,10 +50,7 @@ final class HttpResponseDecoder extends HttpObjectDecoder<HttpResponseMetaData>\n \n     private static final byte[] FIRST_BYTES = \"HTTP\".getBytes(US_ASCII);\n     private static final ByteProcessor ENSURE_NO_CONTROL_CHARS = value -> {\n-        if (value == HT) {\n-            return true;    // allow HTAB\n-        }\n-        if (isISOControl(value)) {\n+        if (value != HT && isISOControl(value)) {   // allow HTAB\n             throw newIllegalCharacter(value);\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTg0Ng==", "url": "https://github.com/apple/servicetalk/pull/969#discussion_r394079846", "bodyText": "https://tools.ietf.org/html/rfc7230#section-3.1.2\n\nA client SHOULD ignore the reason-phrase content.\n\nsad to waste cycles validating something that should be ignored \ud83d\ude22", "author": "Scottmitch", "createdAt": "2020-03-18T02:55:23Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java", "diffHunk": "@@ -84,10 +97,19 @@ protected HttpResponseMetaData createMessage(final ByteBuf buffer, final int fir\n                                                  final int thirdStart, final int thirdLength) {\n         return newResponseMetaData(nettyBufferToHttpVersion(buffer, firstStart, firstLength),\n                 HttpResponseStatus.of(nettyBufferToStatusCode(buffer, secondStart, secondLength),\n-                        thirdLength >= 0 ? buffer.toString(thirdStart, thirdLength, US_ASCII) : \"\"),\n+                        reasonPhrase(buffer, thirdStart, thirdLength)),\n                 headersFactory().newHeaders());\n     }\n \n+    private static String reasonPhrase(final ByteBuf buffer, final int start, final int length) {\n+        if (length <= 0) {\n+            return EMPTY_STRING;\n+        }\n+        // Verify reason-phrase = *( HTAB / SP / VCHAR / obs-text )\n+        buffer.forEachByte(start, length, ENSURE_NO_CONTROL_CHARS);", "originalCommit": "27edd1890693f0a8f8d604513eda43a53b1d833d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMzUyMg==", "url": "https://github.com/apple/servicetalk/pull/969#discussion_r394103522", "bodyText": "We can optimize the \"most-likely path\" of hitting the known status code if we will make HttpResponseStatus.valueOf(int) public. Right know, there is no cheap way to check if we already have a constant for the status-code because we always fallback to new HttpResponseStatus that is relatively expensive. We can do that in a follow up. Something like:\n\nCheck if the status-code is known.\nIf yes, return the constant. If no, do the validation and create a new HttpResponseStatus.", "author": "idelpivnitskiy", "createdAt": "2020-03-18T04:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTg0Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "16d05e51d963601601e1c97252cdb122aa82c40f", "url": "https://github.com/apple/servicetalk/commit/16d05e51d963601601e1c97252cdb122aa82c40f", "message": "Address comments", "committedDate": "2020-03-18T04:42:42Z", "type": "commit"}]}