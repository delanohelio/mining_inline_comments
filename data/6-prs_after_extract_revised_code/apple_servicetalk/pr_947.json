{"pr_number": 947, "pr_title": "gRPC `BlockingResponseStreamingRoute` expects only one request item", "pr_createdAt": "2020-02-25T02:16:47Z", "pr_url": "https://github.com/apple/servicetalk/pull/947", "timeline": [{"oid": "b0f240013abadd889602bd28ef3a07dcab926397", "url": "https://github.com/apple/servicetalk/commit/b0f240013abadd889602bd28ef3a07dcab926397", "message": "gRPC `BlockingResponseStreamingRoute` expects only one request item\n\nMotivation:\n\ngRPC `BlockingResponseStreamingRoute` is implemented as a conversion\nbased on `BlockingStreamingRoute`, but must ensure that there is\nonly one proto item in the request and fail if there are more.\nOtherwise, it does not drain request `BlockingIterable` and may lead\nto the leaked resources.\n\nModifications:\n\n- Throw if `BlockingResponseStreamingRoute` sees the second item\nin the request `BlockingIterable`;\n- Require non-null response item in `BlockingRequestStreamingCall`;\n- Add tests to verify these cases work as expected;\n\nResult:\n\n`BlockingResponseStreamingRoute` fails if a client sends more than\none proto items in the request.", "committedDate": "2020-02-25T02:15:14Z", "type": "commit"}, {"oid": "49722537cddd1d3b7774da61f7ce71eb867c5609", "url": "https://github.com/apple/servicetalk/commit/49722537cddd1d3b7774da61f7ce71eb867c5609", "message": "Consume the next item from iterator to make sure it's not a TerminalNotification with an error", "committedDate": "2020-02-25T18:47:24Z", "type": "commit"}, {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808", "url": "https://github.com/apple/servicetalk/commit/e0ad876faf025156b730fd2c77b1c5583b6c5808", "message": "fix spotbugs error", "committedDate": "2020-02-25T18:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNDk1Mg==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384114952", "bodyText": "nit: perhaps better to do this switch on the client as the client is intending to make \"incorrect requests\"", "author": "NiteshKant", "createdAt": "2020-02-25T20:43:12Z", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.netty;\n+\n+import io.servicetalk.concurrent.BlockingIterable;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.grpc.api.GrpcPayloadWriter;\n+import io.servicetalk.grpc.api.GrpcServiceContext;\n+import io.servicetalk.grpc.api.GrpcStatusException;\n+import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n+import io.servicetalk.grpc.netty.TesterProto.TestResponse;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestBiDiStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestRequestStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestResponseStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterClient;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterService;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ClientFactory;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ServiceFactory;\n+import io.servicetalk.http.api.HttpServiceContext;\n+import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpResponse;\n+import io.servicetalk.http.api.StreamingHttpResponseFactory;\n+import io.servicetalk.http.api.StreamingHttpServiceFilter;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import static io.servicetalk.grpc.api.GrpcStatusCode.INVALID_ARGUMENT;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+import static org.junit.Assert.assertThrows;\n+\n+public class BlockingApiCorrectnessTest {\n+\n+    @Rule\n+    public Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final ServerContext serverContext;\n+\n+    public BlockingApiCorrectnessTest() throws Exception {\n+        serverContext = GrpcServers.forAddress(localAddress(0))\n+                // HTTP filter to modify paths to workaround API restrictions:\n+                .appendHttpServiceFilter(service -> new StreamingHttpServiceFilter(service) {", "originalCommit": "b0f240013abadd889602bd28ef3a07dcab926397", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "chunk": "diff --git a/servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java b/servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java\nindex 1ff2939a8..13ca45594 100644\n--- a/servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java\n+++ b/servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java\n\n@@ -24,17 +24,16 @@ import io.servicetalk.grpc.api.GrpcStatusException;\n import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n import io.servicetalk.grpc.netty.TesterProto.TestResponse;\n import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestBiDiStreamRpc;\n-import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestRequestStreamRpc;\n import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestResponseStreamRpc;\n import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterClient;\n import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterService;\n import io.servicetalk.grpc.netty.TesterProto.Tester.ClientFactory;\n import io.servicetalk.grpc.netty.TesterProto.Tester.ServiceFactory;\n-import io.servicetalk.http.api.HttpServiceContext;\n+import io.servicetalk.http.api.HttpExecutionStrategy;\n+import io.servicetalk.http.api.StreamingHttpClientFilter;\n import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpRequester;\n import io.servicetalk.http.api.StreamingHttpResponse;\n-import io.servicetalk.http.api.StreamingHttpResponseFactory;\n-import io.servicetalk.http.api.StreamingHttpServiceFilter;\n import io.servicetalk.transport.api.ServerContext;\n \n import org.junit.After;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTc4MA==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384115780", "bodyText": "Not changed in this PR but as you are changing code; this would be a better message.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                        \"Only a single request item is expected, but saw the second one\")\n          \n          \n            \n                                                        \"More than one request message received.\")", "author": "NiteshKant", "createdAt": "2020-02-25T20:45:03Z", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");\n+                                if (requestIterator.hasNext()) {\n+                                    // Consume the next item to make sure it's not a TerminalNotification with an error\n+                                    requestIterator.next();\n+                                    throw new GrpcStatus(INVALID_ARGUMENT, null,\n+                                            \"Only a single request item is expected, but saw the second one\")", "originalCommit": "e0ad876faf025156b730fd2c77b1c5583b6c5808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "chunk": "diff --git a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\nindex 144735f71..bd3c2fbe6 100644\n--- a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\n+++ b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\n\n@@ -581,8 +581,7 @@ final class GrpcRouter {\n                                     // Consume the next item to make sure it's not a TerminalNotification with an error\n                                     requestIterator.next();\n                                     throw new GrpcStatus(INVALID_ARGUMENT, null,\n-                                            \"Only a single request item is expected, but saw the second one\")\n-                                            .asException();\n+                                            \"More than one request message received\").asException();\n                                 }\n                             }\n                             route.handle(ctx, firstItem, responseWriter);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjM4MA==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384116380", "bodyText": "Not changed in this PR but as you are changing code; this would be a better message.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");\n          \n          \n            \n                                throw new IllegalStateException(\"More than one response message received.\");", "author": "NiteshKant", "createdAt": "2020-02-25T20:46:23Z", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "diffHunk": "@@ -154,13 +154,14 @@\n         final BlockingStreamingClientCall<Req, Resp> streamingClientCall =\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n-            final BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator();\n-            final Resp firstItem = iterator.next();\n-            if (iterator.hasNext()) {\n-                throw new IllegalArgumentException(\"Only a single item expected, but saw the second value: \" +\n-                        iterator.next());\n+            try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n+                final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");\n+                if (iterator.hasNext()) {\n+                    iterator.next(); // Consume the next item to make sure it's not a TerminalNotification with an error\n+                    throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");", "originalCommit": "e0ad876faf025156b730fd2c77b1c5583b6c5808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "chunk": "diff --git a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\nindex c263f1bc4..8dced3b89 100644\n--- a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\n+++ b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\n\n@@ -158,7 +158,7 @@ final class DefaultGrpcClientCallFactory implements GrpcClientCallFactory {\n                 final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");\n                 if (iterator.hasNext()) {\n                     iterator.next(); // Consume the next item to make sure it's not a TerminalNotification with an error\n-                    throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");\n+                    throw new IllegalStateException(\"More than one response message received\");\n                 }\n                 return firstItem;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384116869", "bodyText": "It isn't changed in this PR but I think null should pass-through.", "author": "NiteshKant", "createdAt": "2020-02-25T20:47:25Z", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");", "originalCommit": "e0ad876faf025156b730fd2c77b1c5583b6c5808", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjU2OQ==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384166569", "bodyText": "Our API for gRPC currently does not annotate client calls with @Nullable annotation. If I don't do a null check, intellij idea warns that we return a possible null value from @Nonnull method.\nAnd the ProtoBufSerializationProvider never returns null, even if the Buffer was empty: \n  \n    \n      servicetalk/servicetalk-grpc-protobuf/src/main/java/io/servicetalk/grpc/protobuf/ProtoBufSerializationProvider.java\n    \n    \n        Lines 121 to 123\n      in\n      c4ab887\n    \n    \n    \n    \n\n        \n          \n           if (toDeserialize.readableBytes() <= 0) { \n        \n\n        \n          \n               return emptyList(); // We don't have any additional data to process, so bail for now. \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nTherefore, it will never be null. Only NoSuchElementException is possible here.\nBtw, on the client-side we can simply throw NoSuchElementException. But on the server-side, do we need to generate a GrpcStatusException with INVALID_ARGUMENT if there were no items in the request?", "author": "idelpivnitskiy", "createdAt": "2020-02-25T22:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MzU0Mw==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384283543", "bodyText": "Therefore, it will never be null. Only NoSuchElementException is possible here.\n\n\nCan a filter modify the request payload to pass null since we allow null for our async sources?\nThe meta point here is that unless we require the item to be non-null, we should allow for null values to pass through as we do in all our async sources. If the intent is only to avoid code style/spotbugs warnings then we can ignore/suppress.", "author": "NiteshKant", "createdAt": "2020-02-26T05:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NTEwNg==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384285106", "bodyText": "Emitting a GrpcStatusException SGTM", "author": "NiteshKant", "createdAt": "2020-02-26T05:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "chunk": "diff --git a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\nindex 144735f71..bd3c2fbe6 100644\n--- a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\n+++ b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\n\n@@ -581,8 +581,7 @@ final class GrpcRouter {\n                                     // Consume the next item to make sure it's not a TerminalNotification with an error\n                                     requestIterator.next();\n                                     throw new GrpcStatus(INVALID_ARGUMENT, null,\n-                                            \"Only a single request item is expected, but saw the second one\")\n-                                            .asException();\n+                                            \"More than one request message received\").asException();\n                                 }\n                             }\n                             route.handle(ctx, firstItem, responseWriter);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExODA4Nw==", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384118087", "bodyText": "I think we should pass through null values.", "author": "NiteshKant", "createdAt": "2020-02-25T20:50:01Z", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "diffHunk": "@@ -154,13 +154,14 @@\n         final BlockingStreamingClientCall<Req, Resp> streamingClientCall =\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n-            final BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator();\n-            final Resp firstItem = iterator.next();\n-            if (iterator.hasNext()) {\n-                throw new IllegalArgumentException(\"Only a single item expected, but saw the second value: \" +\n-                        iterator.next());\n+            try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n+                final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");", "originalCommit": "e0ad876faf025156b730fd2c77b1c5583b6c5808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "chunk": "diff --git a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\nindex c263f1bc4..8dced3b89 100644\n--- a/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\n+++ b/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java\n\n@@ -158,7 +158,7 @@ final class DefaultGrpcClientCallFactory implements GrpcClientCallFactory {\n                 final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");\n                 if (iterator.hasNext()) {\n                     iterator.next(); // Consume the next item to make sure it's not a TerminalNotification with an error\n-                    throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");\n+                    throw new IllegalStateException(\"More than one response message received\");\n                 }\n                 return firstItem;\n             }\n"}}, {"oid": "9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "url": "https://github.com/apple/servicetalk/commit/9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "message": "Address comments", "committedDate": "2020-02-25T22:21:17Z", "type": "commit"}, {"oid": "6a2fa6355dd307dbc2267fb5bcb29f9b03e72129", "url": "https://github.com/apple/servicetalk/commit/6a2fa6355dd307dbc2267fb5bcb29f9b03e72129", "message": "Make blocking and streaming API consistent", "committedDate": "2020-02-25T23:58:17Z", "type": "commit"}, {"oid": "0a8a7b073a9dc34104bd706b6273e51042048fc3", "url": "https://github.com/apple/servicetalk/commit/0a8a7b073a9dc34104bd706b6273e51042048fc3", "message": "Test async and blocking client consistency", "committedDate": "2020-02-26T00:28:26Z", "type": "commit"}, {"oid": "04a15e8932773a20c091d8e097bb397cab4c55af", "url": "https://github.com/apple/servicetalk/commit/04a15e8932773a20c091d8e097bb397cab4c55af", "message": "Revert requireNonNull", "committedDate": "2020-02-26T18:21:50Z", "type": "commit"}, {"oid": "be74b81adedc7b895c37ec7f95bc6667924fa31c", "url": "https://github.com/apple/servicetalk/commit/be74b81adedc7b895c37ec7f95bc6667924fa31c", "message": "Merge remote-tracking branch 'upstream/master' into BlockingResponseStreamingRoute", "committedDate": "2020-02-27T21:40:15Z", "type": "commit"}]}