{"pr_number": 1242, "pr_title": "Jersey to return 400 response for invalid URI", "pr_createdAt": "2020-12-07T16:41:31Z", "pr_url": "https://github.com/apple/servicetalk/pull/1242", "timeline": [{"oid": "59e1b0a24082ea9bf0e10f8baa48b1e0dc83c666", "url": "https://github.com/apple/servicetalk/commit/59e1b0a24082ea9bf0e10f8baa48b1e0dc83c666", "message": "Jersey to return 400 response for invalid URI\n\nMotivation:\nDefaultJerseyStreamingHttpRouter must create two URI objects in order to\ninitialize Jersey's ContainerRequest object. URI creation will also do\nvalidation, and may throw. In this case we should return a 400 response\ninstead of a 500 internal server error.\n\nModifications:\n- DefaultJerseyStreamingHttpRouter to try/catch creation of URIs and\nreturn a 400 if an exception is thrown.\n\nResult:\nMore correct error returned in the event of invalid URI when using\nJersey.", "committedDate": "2020-12-07T16:39:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4NTg1Mg==", "url": "https://github.com/apple/servicetalk/pull/1242#discussion_r537785852", "bodyText": "Exception msg may leak some server details, which is hard to control if this try block changes in future. Consider logging the exception and generating a response without payload body. Alternatively, consider catching only specific exception types relevant to URI.", "author": "idelpivnitskiy", "createdAt": "2020-12-07T19:49:52Z", "path": "servicetalk-http-router-jersey/src/main/java/io/servicetalk/http/router/jersey/DefaultJerseyStreamingHttpRouter.java", "diffHunk": "@@ -202,9 +207,23 @@ private void handle0(final HttpServiceContext serviceCtx, final StreamingHttpReq\n             requestUriBuilder.append(requestTarget);\n         }\n \n+        final URI baseURI;\n+        final URI requestURI;\n+        try {\n+            baseURI = URI.create(baseUri.toString());\n+            requestURI = URI.create(requestUriBuilder.toString());\n+        } catch (Throwable cause) {\n+            Buffer message = serviceCtx.executionContext().bufferAllocator().fromAscii(cause.getMessage());", "originalCommit": "59e1b0a24082ea9bf0e10f8baa48b1e0dc83c666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxNDIxNw==", "url": "https://github.com/apple/servicetalk/pull/1242#discussion_r537914217", "bodyText": "I'll refine/narrow the exceptions type", "author": "Scottmitch", "createdAt": "2020-12-07T23:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4NTg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "862754d9a9cb3f9bcbcd30c8457e989fa9894e07", "chunk": "diff --git a/servicetalk-http-router-jersey/src/main/java/io/servicetalk/http/router/jersey/DefaultJerseyStreamingHttpRouter.java b/servicetalk-http-router-jersey/src/main/java/io/servicetalk/http/router/jersey/DefaultJerseyStreamingHttpRouter.java\nindex a0b00f35c..cfcbfcdb3 100644\n--- a/servicetalk-http-router-jersey/src/main/java/io/servicetalk/http/router/jersey/DefaultJerseyStreamingHttpRouter.java\n+++ b/servicetalk-http-router-jersey/src/main/java/io/servicetalk/http/router/jersey/DefaultJerseyStreamingHttpRouter.java\n\n@@ -212,7 +212,7 @@ final class DefaultJerseyStreamingHttpRouter implements StreamingHttpService {\n         try {\n             baseURI = URI.create(baseUri.toString());\n             requestURI = URI.create(requestUriBuilder.toString());\n-        } catch (Throwable cause) {\n+        } catch (IllegalArgumentException cause) {\n             Buffer message = serviceCtx.executionContext().bufferAllocator().fromAscii(cause.getMessage());\n             StreamingHttpResponse response = factory.badRequest().payloadBody(from(message));\n             response.headers().add(CONTENT_LENGTH, Integer.toString(message.readableBytes()));\n"}}, {"oid": "862754d9a9cb3f9bcbcd30c8457e989fa9894e07", "url": "https://github.com/apple/servicetalk/commit/862754d9a9cb3f9bcbcd30c8457e989fa9894e07", "message": "Throwable -> IllegalArgumentException", "committedDate": "2020-12-07T21:30:26Z", "type": "commit"}]}