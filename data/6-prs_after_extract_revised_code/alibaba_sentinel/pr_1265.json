{"pr_number": 1265, "pr_title": "Add SPI for logger", "pr_createdAt": "2020-01-18T15:48:46Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1265", "timeline": [{"oid": "986117abce6b7a69f0fa4b079281bd65a78edce1", "url": "https://github.com/alibaba/Sentinel/commit/986117abce6b7a69f0fa4b079281bd65a78edce1", "message": "Fix hardcoded file separator", "committedDate": "2020-01-13T02:44:06Z", "type": "commit"}, {"oid": "baffb93b837e17aa4dcfa2bce0955003d6e27e51", "url": "https://github.com/alibaba/Sentinel/commit/baffb93b837e17aa4dcfa2bce0955003d6e27e51", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-01-18T13:18:00Z", "type": "commit"}, {"oid": "7124a6178738ade54615754e8afb338cc3d28bc4", "url": "https://github.com/alibaba/Sentinel/commit/7124a6178738ade54615754e8afb338cc3d28bc4", "message": "Add SPI for logger", "committedDate": "2020-01-18T15:38:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NjIxNA==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368286214", "bodyText": "Because types in LogType share the same interface is it necessary enabling users specify the same implementation and merging all the logs?\nSomething like LogType[] value() and new type ALL in LogType.", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:22:11Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/LogTarget.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.alibaba.csp.sentinel.log;\n+\n+import java.lang.annotation.*;\n+\n+/**\n+ * @author xue8\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@Documented\n+public @interface LogTarget {\n+    LogType value() default LogType.RECORD_LOG;", "originalCommit": "7124a6178738ade54615754e8afb338cc3d28bc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzUwMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368287501", "bodyText": "And maybe we should add a new property something like order to specify the priority because of we may implement several extensions for general logger like log4j/log4j2, logback, slf4j, commons-logging, etc.", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NjIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5NDQ1MA==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368294450", "bodyText": "Ok, i will do it as soon as possible.", "author": "xue8", "createdAt": "2020-01-19T13:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NjIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwNjY1NQ==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368306655", "bodyText": "Because types in LogType share the same interface is it necessary enabling users specify the same implementation and merging all the logs?\nSomething like LogType[] value() and new type ALL in LogType.\n\nBecause the log and logger are one-to-one, if all the logs use the same implementation, they will be using the same logger, then it is impossible to configure the logger configuration different in XML.", "author": "xue8", "createdAt": "2020-01-19T16:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NjIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0MTExNw==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368341117", "bodyText": "Because types in LogType share the same interface is it necessary enabling users specify the same implementation and merging all the logs?\nSomething like LogType[] value() and new type ALL in LogType.\n\nBecause the log and logger are one-to-one, if all the logs use the same implementation, they will be using the same logger, then it is impossible to configure the logger configuration different in XML.\n\nOkay i know. So they are stateful. That's fine.", "author": "jasonjoo2010", "createdAt": "2020-01-20T01:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NjIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "da0551109b490a77a0abadb8a7635ab86afa405c", "chunk": "diff --git a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/LogTarget.java b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/LogTarget.java\nindex cb8f649a..0dc3ef97 100644\n--- a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/LogTarget.java\n+++ b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/LogTarget.java\n\n@@ -1,3 +1,18 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.csp.sentinel.log;\n \n import java.lang.annotation.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NjI3MA==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368286270", "bodyText": "Is it necessary for us adding more levels like error, debug?", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:23:11Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.alibaba.csp.sentinel.log;\n+\n+/**\n+ * Provide logger SPI interface\n+ * @author xue8\n+ */\n+public interface Logger {", "originalCommit": "7124a6178738ade54615754e8afb338cc3d28bc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNDgwNQ==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368604805", "bodyText": "@sczyh30 How to resolve the compatibility between different loggers?\nOne proposal is that we can clarify to use one and adapt it in actually implementations.", "author": "jasonjoo2010", "createdAt": "2020-01-20T15:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NjI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "da0551109b490a77a0abadb8a7635ab86afa405c", "chunk": "diff --git a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\nindex f5ec1b67..49846e10 100644\n--- a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\n+++ b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\n\n@@ -1,15 +1,114 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.csp.sentinel.log;\n \n /**\n- * Provide logger SPI interface\n+ * Provide logger SPI interface.\n+ * The default implementation is {@link java.util.logging}.\n+ * In the default implementation, use \"{n}\" to placeholder.\n+ * For example a format string \"{0} {1}\" would format two parameters as strings.\n+ * In the user customized implementation, there different implementation for placeholder in different logging system.\n+ * For example in the SLF4J, use \"{}\" to placeholder.\n+ *\n  * @author xue8\n  */\n public interface Logger {\n-    void info(String detail, Object... params);\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void info(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the INFO level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void info(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void warn(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the WARN level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void warn(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void trace(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void trace(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void debug(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the DEBUG level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void debug(String msg, Throwable e);\n \n-    void info(String detail, Throwable e);\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void error(String format, Object... arguments);\n \n-    void warn(String detail, Object... params);\n+    /**\n+     * Log an exception (throwable) at the ERROR level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void error(String msg, Throwable e);\n \n-    void warn(String detail, Throwable e);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Njk2MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368286961", "bodyText": "And don't forget to add license to new files.", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:34:39Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.alibaba.csp.sentinel.log;", "originalCommit": "7124a6178738ade54615754e8afb338cc3d28bc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da0551109b490a77a0abadb8a7635ab86afa405c", "chunk": "diff --git a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\nindex f5ec1b67..49846e10 100644\n--- a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\n+++ b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\n\n@@ -1,15 +1,114 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.csp.sentinel.log;\n \n /**\n- * Provide logger SPI interface\n+ * Provide logger SPI interface.\n+ * The default implementation is {@link java.util.logging}.\n+ * In the default implementation, use \"{n}\" to placeholder.\n+ * For example a format string \"{0} {1}\" would format two parameters as strings.\n+ * In the user customized implementation, there different implementation for placeholder in different logging system.\n+ * For example in the SLF4J, use \"{}\" to placeholder.\n+ *\n  * @author xue8\n  */\n public interface Logger {\n-    void info(String detail, Object... params);\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void info(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the INFO level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void info(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void warn(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the WARN level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void warn(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void trace(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void trace(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void debug(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the DEBUG level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void debug(String msg, Throwable e);\n \n-    void info(String detail, Throwable e);\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void error(String format, Object... arguments);\n \n-    void warn(String detail, Object... params);\n+    /**\n+     * Log an exception (throwable) at the ERROR level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void error(String msg, Throwable e);\n \n-    void warn(String detail, Throwable e);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzMxOQ==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368287319", "bodyText": "May be the modifier should be clear as private and same as another implementation.", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:40:52Z", "path": "sentinel-demo/sentinel-demo-log-logback/src/main/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogLoggerImpl.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.alibaba.csp.sentinel.demo.log.logback;\n+\n+import com.alibaba.csp.sentinel.log.LogTarget;\n+import com.alibaba.csp.sentinel.log.LogType;\n+import com.alibaba.csp.sentinel.log.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@LogTarget(value = LogType.COMMAND_CENTER_LOG)\n+public class CommandCenterLogLoggerImpl implements Logger {\n+    org.slf4j.Logger logger = LoggerFactory.getLogger(\"commandCenterLogLogger\");", "originalCommit": "7124a6178738ade54615754e8afb338cc3d28bc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da0551109b490a77a0abadb8a7635ab86afa405c", "chunk": "diff --git a/sentinel-demo/sentinel-demo-log-logback/src/main/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogLoggerImpl.java b/sentinel-demo/sentinel-demo-log-logback/src/main/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogLoggerImpl.java\nindex 13534e4f..9a144485 100644\n--- a/sentinel-demo/sentinel-demo-log-logback/src/main/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogLoggerImpl.java\n+++ b/sentinel-demo/sentinel-demo-log-logback/src/main/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogLoggerImpl.java\n\n@@ -1,3 +1,18 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.csp.sentinel.demo.log.logback;\n \n import com.alibaba.csp.sentinel.log.LogTarget;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzU2MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368287561", "bodyText": "Shall we add some assertion in this unit test?", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:45:10Z", "path": "sentinel-demo/sentinel-demo-log-logback/src/test/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.alibaba.csp.sentinel.demo.log.logback;\n+\n+import com.alibaba.csp.sentinel.log.CommandCenterLog;\n+import org.junit.Test;\n+\n+/**\n+ * @author xue8\n+ */\n+public class CommandCenterLogTest {\n+    @Test\n+    public void testLogException() {\n+        Exception e = new Exception(\"ex\");\n+        CommandCenterLog.info(\"Error\", e);", "originalCommit": "7124a6178738ade54615754e8afb338cc3d28bc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da0551109b490a77a0abadb8a7635ab86afa405c", "chunk": "diff --git a/sentinel-demo/sentinel-demo-log-logback/src/test/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogTest.java b/sentinel-demo/sentinel-demo-log-logback/src/test/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogTest.java\nindex 7c5336d0..ae348bc5 100644\n--- a/sentinel-demo/sentinel-demo-log-logback/src/test/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogTest.java\n+++ b/sentinel-demo/sentinel-demo-log-logback/src/test/java/com/alibaba/csp/sentinel/demo/log/logback/CommandCenterLogTest.java\n\n@@ -1,23 +1,116 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.csp.sentinel.demo.log.logback;\n \n import com.alibaba.csp.sentinel.log.CommandCenterLog;\n+import org.junit.Assert;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n \n /**\n  * @author xue8\n  */\n public class CommandCenterLogTest {\n+    @Rule\n+    public SystemOutRule log = new SystemOutRule().enableLog();\n+\n+    @Test\n+    public void testLog() {\n+        CommandCenterLog.info(\"init\");\n+        log.clearLog();\n+        int count = 0;\n+\n+        // info test\n+        while (count++ < 1000) {\n+            log.clearLog();\n+            CommandCenterLog.info(\"Count {}\", count);\n+            String str = String.format(\"INFO  commandCenterLogLogger - Count %d\\r\\n\", count);\n+            Assert.assertEquals(str, log.getLog());\n+        }\n+\n+        // warn test\n+        while (count++ < 2000) {\n+            log.clearLog();\n+            CommandCenterLog.warn(\"Count {}\", count);\n+            String str = String.format(\"WARN  commandCenterLogLogger - Count %d\\r\\n\", count);\n+            Assert.assertEquals(str, log.getLog());\n+        }\n+\n+        // trace test\n+        while (count++ < 3000) {\n+            log.clearLog();\n+            CommandCenterLog.trace(\"Count {}\", count);\n+            String str = String.format(\"TRACE commandCenterLogLogger - Count %d\\r\\n\", count);\n+            Assert.assertEquals(str, log.getLog());\n+        }\n+\n+        // debug test\n+        while (count++ < 4000) {\n+            log.clearLog();\n+            CommandCenterLog.debug(\"Count {}\", count);\n+            String str = String.format(\"DEBUG commandCenterLogLogger - Count %d\\r\\n\", count);\n+            Assert.assertEquals(str, log.getLog());\n+        }\n+\n+        // test error\n+        while (count++ < 5000) {\n+            log.clearLog();\n+            CommandCenterLog.error(\"Count {}\", count);\n+            String str = String.format(\"ERROR commandCenterLogLogger - Count %d\\r\\n\", count);\n+            Assert.assertEquals(str, log.getLog());\n+        }\n+    }\n+\n     @Test\n     public void testLogException() {\n+        CommandCenterLog.info(\"init\");\n+        log.clearLog();\n         Exception e = new Exception(\"ex\");\n+\n+        // info test\n         CommandCenterLog.info(\"Error\", e);\n-    }\n+        // split the log for test\n+        String[] logSplit = log.getLog().split(\"\\r\\n\");\n+        Assert.assertEquals(\"INFO  commandCenterLogLogger - Error\", logSplit[0]);\n \n-    @Test\n-    public void testLogRolling() {\n-        int count = 1000;\n-        while (--count > 0) {\n-            CommandCenterLog.info(\"Count \" + count);\n-        }\n+        // warn test\n+        log.clearLog();\n+        CommandCenterLog.warn(\"Error\", e);\n+        logSplit = log.getLog().split(\"\\r\\n\");\n+        Assert.assertEquals(\"WARN  commandCenterLogLogger - Error\", logSplit[0]);\n+\n+        // trace test\n+        log.clearLog();\n+        CommandCenterLog.trace(\"Error\", e);\n+        logSplit = log.getLog().split(\"\\r\\n\");\n+        Assert.assertEquals(\"TRACE commandCenterLogLogger - Error\", logSplit[0]);\n+\n+        // debug test\n+        log.clearLog();\n+        CommandCenterLog.debug(\"Error\", e);\n+        logSplit = log.getLog().split(\"\\r\\n\");\n+        Assert.assertEquals(\"DEBUG commandCenterLogLogger - Error\", logSplit[0]);\n+\n+        // error test\n+        log.clearLog();\n+        CommandCenterLog.error(\"Error\", e);\n+        logSplit = log.getLog().split(\"\\r\\n\");\n+        Assert.assertEquals(\"ERROR commandCenterLogLogger - Error\", logSplit[0]);\n     }\n+\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4ODExNA==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368288114", "bodyText": "Because we will not use it statically any more the handler can be non-static.", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:55:40Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/RecordLogLogging.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.alibaba.csp.sentinel.log;\n+\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Default logger implementation.\n+ * @author xue8\n+ */\n+public class RecordLogLogging extends LogBase implements com.alibaba.csp.sentinel.log.Logger {\n+    private static final Logger heliumRecordLog = Logger.getLogger(\"cspSentinelRecordLog\");\n+    private static final String FILE_NAME = \"sentinel-record.log\";\n+    private static Handler logHandler = null;\n+\n+    static {", "originalCommit": "7124a6178738ade54615754e8afb338cc3d28bc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da0551109b490a77a0abadb8a7635ab86afa405c", "chunk": "diff --git a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/RecordLogLogging.java b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/RecordLogLogging.java\nindex 6635015e..2a6bac6c 100644\n--- a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/RecordLogLogging.java\n+++ b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/RecordLogLogging.java\n\n@@ -1,7 +1,21 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.csp.sentinel.log;\n \n import java.util.logging.Handler;\n-import java.util.logging.Level;\n import java.util.logging.Logger;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4ODMzMw==", "url": "https://github.com/alibaba/Sentinel/pull/1265#discussion_r368288333", "bodyText": "Because there maybe different implementation for placeholder in different logging system we'd better to clarify what kind of placeholder we use.\nFor example {}.", "author": "jasonjoo2010", "createdAt": "2020-01-19T11:59:11Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.alibaba.csp.sentinel.log;\n+\n+/**\n+ * Provide logger SPI interface\n+ * @author xue8\n+ */\n+public interface Logger {\n+    void info(String detail, Object... params);", "originalCommit": "7124a6178738ade54615754e8afb338cc3d28bc4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da0551109b490a77a0abadb8a7635ab86afa405c", "chunk": "diff --git a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\nindex f5ec1b67..49846e10 100644\n--- a/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\n+++ b/sentinel-core/src/main/java/com/alibaba/csp/sentinel/log/Logger.java\n\n@@ -1,15 +1,114 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.csp.sentinel.log;\n \n /**\n- * Provide logger SPI interface\n+ * Provide logger SPI interface.\n+ * The default implementation is {@link java.util.logging}.\n+ * In the default implementation, use \"{n}\" to placeholder.\n+ * For example a format string \"{0} {1}\" would format two parameters as strings.\n+ * In the user customized implementation, there different implementation for placeholder in different logging system.\n+ * For example in the SLF4J, use \"{}\" to placeholder.\n+ *\n  * @author xue8\n  */\n public interface Logger {\n-    void info(String detail, Object... params);\n+    /**\n+     * Log a message at the INFO level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void info(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the INFO level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void info(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the WARN level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void warn(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the WARN level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void warn(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the TRACE level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void trace(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the TRACE level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void trace(String msg, Throwable e);\n+\n+    /**\n+     * Log a message at the DEBUG level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void debug(String format, Object... arguments);\n+\n+    /**\n+     * Log an exception (throwable) at the DEBUG level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void debug(String msg, Throwable e);\n \n-    void info(String detail, Throwable e);\n+    /**\n+     * Log a message at the ERROR level according to the specified format\n+     * and arguments.\n+     * @param format    the format string\n+     * @param arguments a list of arguments\n+     */\n+    void error(String format, Object... arguments);\n \n-    void warn(String detail, Object... params);\n+    /**\n+     * Log an exception (throwable) at the ERROR level with an\n+     * accompanying message.\n+     *\n+     * @param msg the message accompanying the exception\n+     * @param e   the exception (throwable) to log\n+     */\n+    void error(String msg, Throwable e);\n \n-    void warn(String detail, Throwable e);\n }\n"}}, {"oid": "da0551109b490a77a0abadb8a7635ab86afa405c", "url": "https://github.com/alibaba/Sentinel/commit/da0551109b490a77a0abadb8a7635ab86afa405c", "message": "code fix", "committedDate": "2020-01-20T04:40:19Z", "type": "commit"}, {"oid": "effad14ecc74e3683d9df8dc6f5c661891d84b9d", "url": "https://github.com/alibaba/Sentinel/commit/effad14ecc74e3683d9df8dc6f5c661891d84b9d", "message": "fix line separator hard-coded", "committedDate": "2020-01-20T06:19:31Z", "type": "commit"}, {"oid": "604898e5303e650cfc4183711fd5c7ab4612722d", "url": "https://github.com/alibaba/Sentinel/commit/604898e5303e650cfc4183711fd5c7ab4612722d", "message": "create adapters compatible with placeholders \u2018'{}'", "committedDate": "2020-01-22T07:06:54Z", "type": "commit"}, {"oid": "971b127edfb7af29bbd572fb8ba7c7c6f2699e14", "url": "https://github.com/alibaba/Sentinel/commit/971b127edfb7af29bbd572fb8ba7c7c6f2699e14", "message": "add {}", "committedDate": "2020-01-22T07:19:09Z", "type": "commit"}]}