{"pr_number": 1396, "pr_title": "support jax-rs", "pr_createdAt": "2020-04-12T14:04:36Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1396", "timeline": [{"oid": "ca91234613e83c0617b249d1cc4cf2427a9307fa", "url": "https://github.com/alibaba/Sentinel/commit/ca91234613e83c0617b249d1cc4cf2427a9307fa", "message": "support jax-rs", "committedDate": "2020-04-13T14:29:07Z", "type": "commit"}, {"oid": "ca91234613e83c0617b249d1cc4cf2427a9307fa", "url": "https://github.com/alibaba/Sentinel/commit/ca91234613e83c0617b249d1cc4cf2427a9307fa", "message": "support jax-rs", "committedDate": "2020-04-13T14:29:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODg2MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1396#discussion_r408228861", "bodyText": "Will the response filter method still be executed when unexpected error occurs? We need to guarantee the Entry exited finally.", "author": "sczyh30", "createdAt": "2020-04-14T15:28:35Z", "path": "sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 1999-2020 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.adapter.jaxrs;\n+\n+import com.alibaba.csp.sentinel.Entry;\n+import com.alibaba.csp.sentinel.EntryType;\n+import com.alibaba.csp.sentinel.ResourceTypeConstants;\n+import com.alibaba.csp.sentinel.SphU;\n+import com.alibaba.csp.sentinel.adapter.jaxrs.config.SentinelJaxRsConfig;\n+import com.alibaba.csp.sentinel.context.ContextUtil;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.util.StringUtil;\n+\n+import javax.ws.rs.client.ClientRequestContext;\n+import javax.ws.rs.client.ClientRequestFilter;\n+import javax.ws.rs.client.ClientResponseContext;\n+import javax.ws.rs.client.ClientResponseFilter;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import java.io.IOException;\n+\n+/**\n+ * @author sea\n+ */\n+public class SentinelJaxRsClientFilter implements ClientRequestFilter, ClientResponseFilter {\n+\n+    private static final String SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY = \"sentinel_jax_rs_client_entry_property\";\n+\n+    @Context\n+    private ResourceInfo resourceInfo;\n+\n+\n+    @Override\n+    public void filter(ClientRequestContext requestContext) throws IOException {\n+        try {\n+            String resourceName = getResourceName(requestContext);\n+\n+            if (StringUtil.isNotEmpty(resourceName)) {\n+                Entry entry = SphU.entry(resourceName, ResourceTypeConstants.COMMON_WEB, EntryType.OUT);\n+\n+                requestContext.setProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY, entry);\n+            }\n+        } catch (BlockException e) {\n+            try {\n+                requestContext.abortWith(SentinelJaxRsConfig.getJaxRsFallback().fallbackResponse(requestContext.getUri().toString(), e));\n+            } finally {\n+                ContextUtil.exit();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ClientRequestContext requestContext, ClientResponseContext responseContext) throws IOException {\n+        Entry entry = (Entry) requestContext.getProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY);\n+        if (entry != null) {\n+            entry.exit();", "originalCommit": "ca91234613e83c0617b249d1cc4cf2427a9307fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MDkwNQ==", "url": "https://github.com/alibaba/Sentinel/pull/1396#discussion_r408940905", "bodyText": "for provider side\naccording to 3.3.4 Exceptions of jaxrs-2_1-final-spec:\n\nChecked exceptions and throwables that have not been mapped and cannot be thrown directly MUSTbe wrapped in a container-specific exception that is then thrown and allowed to propagate to the un-derlying container.\n\nif WebApplicationException or its subclasses is thrown, there are automated converted to Response and can enter response filter.\nif throw exception which is not WebApplicationException or its subclass, and not matched by custom exception mapper, then the response filter cannot be called. for this case, I thank a default exception mapper maybe introduced.\naccording to 4.4 Exception Mapping Providers of jaxrs-2_1-final-spec:\n\nWhen choosing an exception mapping provider to map an exception,  an implementation MUST use theprovider whose generic type is the nearest superclass of the exception.  If two or more exception providers are applicable, the one with the highest priority MUST be chosen as described in Section 4.1.3.\n\nin case of misuse, maybe a default exception mapper of Throwable can be provided by default, then the response filter can be called.\nif user also provide custom exception mapper of Throwable, then user has the responsibility to convert it to response and then the response filter can be called.\nas describe in 6.7.1 exceptions of jaxrs-2_1-final-spec:\n\nA response mapped from an exception MUST be processed using the ContainerResponsefilter chain and theWriteTointerceptor chain (if an entity is present in the mapped response).", "author": "seasidesky", "createdAt": "2020-04-15T15:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzNDQzOQ==", "url": "https://github.com/alibaba/Sentinel/pull/1396#discussion_r409234439", "bodyText": "Are there any similar problems on client side?", "author": "sczyh30", "createdAt": "2020-04-16T01:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNDA0Mw==", "url": "https://github.com/alibaba/Sentinel/pull/1396#discussion_r410614043", "bodyText": "client side may have similar problems, according to 4.4 Exception Mapping Providers of jaxrs-2_1-final-spec\n\nNote that exception mapping providers are not supported as part of the Client API.\n\nI introduce SentinelJaxRsClientTemplate to replace the original SentinelJaxRsClientFilter to fix it.", "author": "seasidesky", "createdAt": "2020-04-18T04:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb86c3968ef2415ae6c72f5cbe6e584142767d73", "chunk": "diff --git a/sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java b/sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java\ndeleted file mode 100644\nindex 83647b4d..00000000\n--- a/sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-/*\n- * Copyright 1999-2020 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.alibaba.csp.sentinel.adapter.jaxrs;\n-\n-import com.alibaba.csp.sentinel.Entry;\n-import com.alibaba.csp.sentinel.EntryType;\n-import com.alibaba.csp.sentinel.ResourceTypeConstants;\n-import com.alibaba.csp.sentinel.SphU;\n-import com.alibaba.csp.sentinel.adapter.jaxrs.config.SentinelJaxRsConfig;\n-import com.alibaba.csp.sentinel.context.ContextUtil;\n-import com.alibaba.csp.sentinel.slots.block.BlockException;\n-import com.alibaba.csp.sentinel.util.StringUtil;\n-\n-import javax.ws.rs.client.ClientRequestContext;\n-import javax.ws.rs.client.ClientRequestFilter;\n-import javax.ws.rs.client.ClientResponseContext;\n-import javax.ws.rs.client.ClientResponseFilter;\n-import javax.ws.rs.container.ResourceInfo;\n-import javax.ws.rs.core.Context;\n-import java.io.IOException;\n-\n-/**\n- * @author sea\n- */\n-public class SentinelJaxRsClientFilter implements ClientRequestFilter, ClientResponseFilter {\n-\n-    private static final String SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY = \"sentinel_jax_rs_client_entry_property\";\n-\n-    @Context\n-    private ResourceInfo resourceInfo;\n-\n-\n-    @Override\n-    public void filter(ClientRequestContext requestContext) throws IOException {\n-        try {\n-            String resourceName = getResourceName(requestContext);\n-\n-            if (StringUtil.isNotEmpty(resourceName)) {\n-                Entry entry = SphU.entry(resourceName, ResourceTypeConstants.COMMON_WEB, EntryType.OUT);\n-\n-                requestContext.setProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY, entry);\n-            }\n-        } catch (BlockException e) {\n-            try {\n-                requestContext.abortWith(SentinelJaxRsConfig.getJaxRsFallback().fallbackResponse(requestContext.getUri().toString(), e));\n-            } finally {\n-                ContextUtil.exit();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void filter(ClientRequestContext requestContext, ClientResponseContext responseContext) throws IOException {\n-        Entry entry = (Entry) requestContext.getProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY);\n-        if (entry != null) {\n-            entry.exit();\n-        }\n-        requestContext.removeProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY);\n-    }\n-\n-    public String getResourceName(ClientRequestContext requestContext) {\n-        return SentinelJaxRsConfig.getResourceNameParser().parse(requestContext);\n-    }\n-}\n"}}, {"oid": "df47ad67f3da92b5126e4d6ee32e8c8bdb61849f", "url": "https://github.com/alibaba/Sentinel/commit/df47ad67f3da92b5126e4d6ee32e8c8bdb61849f", "message": "add default exception mapper", "committedDate": "2020-04-15T16:50:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzNDc3Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1396#discussion_r409234777", "bodyText": "For client side we don't need to exit the context here.", "author": "sczyh30", "createdAt": "2020-04-16T01:55:07Z", "path": "sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 1999-2020 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.adapter.jaxrs;\n+\n+import com.alibaba.csp.sentinel.Entry;\n+import com.alibaba.csp.sentinel.EntryType;\n+import com.alibaba.csp.sentinel.ResourceTypeConstants;\n+import com.alibaba.csp.sentinel.SphU;\n+import com.alibaba.csp.sentinel.adapter.jaxrs.config.SentinelJaxRsConfig;\n+import com.alibaba.csp.sentinel.context.ContextUtil;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.util.StringUtil;\n+\n+import javax.ws.rs.client.ClientRequestContext;\n+import javax.ws.rs.client.ClientRequestFilter;\n+import javax.ws.rs.client.ClientResponseContext;\n+import javax.ws.rs.client.ClientResponseFilter;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import java.io.IOException;\n+\n+/**\n+ * @author sea\n+ */\n+public class SentinelJaxRsClientFilter implements ClientRequestFilter, ClientResponseFilter {\n+\n+    private static final String SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY = \"sentinel_jax_rs_client_entry_property\";\n+\n+    @Context\n+    private ResourceInfo resourceInfo;\n+\n+\n+    @Override\n+    public void filter(ClientRequestContext requestContext) throws IOException {\n+        try {\n+            String resourceName = getResourceName(requestContext);\n+\n+            if (StringUtil.isNotEmpty(resourceName)) {\n+                Entry entry = SphU.entry(resourceName, ResourceTypeConstants.COMMON_WEB, EntryType.OUT);\n+\n+                requestContext.setProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY, entry);\n+            }\n+        } catch (BlockException e) {\n+            try {\n+                requestContext.abortWith(SentinelJaxRsConfig.getJaxRsFallback().fallbackResponse(requestContext.getUri().toString(), e));\n+            } finally {\n+                ContextUtil.exit();", "originalCommit": "df47ad67f3da92b5126e4d6ee32e8c8bdb61849f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNDgzOQ==", "url": "https://github.com/alibaba/Sentinel/pull/1396#discussion_r410614839", "bodyText": "fixed, in the latest commit, the original SentinelJaxRsClientFilter is replaced by SentinelJaxRsClientTemplate to handle the exception and exit entry.", "author": "seasidesky", "createdAt": "2020-04-18T04:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzNDc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eb86c3968ef2415ae6c72f5cbe6e584142767d73", "chunk": "diff --git a/sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java b/sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java\ndeleted file mode 100644\nindex 83647b4d..00000000\n--- a/sentinel-adapter/sentinel-jax-rs-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/jaxrs/SentinelJaxRsClientFilter.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-/*\n- * Copyright 1999-2020 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.alibaba.csp.sentinel.adapter.jaxrs;\n-\n-import com.alibaba.csp.sentinel.Entry;\n-import com.alibaba.csp.sentinel.EntryType;\n-import com.alibaba.csp.sentinel.ResourceTypeConstants;\n-import com.alibaba.csp.sentinel.SphU;\n-import com.alibaba.csp.sentinel.adapter.jaxrs.config.SentinelJaxRsConfig;\n-import com.alibaba.csp.sentinel.context.ContextUtil;\n-import com.alibaba.csp.sentinel.slots.block.BlockException;\n-import com.alibaba.csp.sentinel.util.StringUtil;\n-\n-import javax.ws.rs.client.ClientRequestContext;\n-import javax.ws.rs.client.ClientRequestFilter;\n-import javax.ws.rs.client.ClientResponseContext;\n-import javax.ws.rs.client.ClientResponseFilter;\n-import javax.ws.rs.container.ResourceInfo;\n-import javax.ws.rs.core.Context;\n-import java.io.IOException;\n-\n-/**\n- * @author sea\n- */\n-public class SentinelJaxRsClientFilter implements ClientRequestFilter, ClientResponseFilter {\n-\n-    private static final String SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY = \"sentinel_jax_rs_client_entry_property\";\n-\n-    @Context\n-    private ResourceInfo resourceInfo;\n-\n-\n-    @Override\n-    public void filter(ClientRequestContext requestContext) throws IOException {\n-        try {\n-            String resourceName = getResourceName(requestContext);\n-\n-            if (StringUtil.isNotEmpty(resourceName)) {\n-                Entry entry = SphU.entry(resourceName, ResourceTypeConstants.COMMON_WEB, EntryType.OUT);\n-\n-                requestContext.setProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY, entry);\n-            }\n-        } catch (BlockException e) {\n-            try {\n-                requestContext.abortWith(SentinelJaxRsConfig.getJaxRsFallback().fallbackResponse(requestContext.getUri().toString(), e));\n-            } finally {\n-                ContextUtil.exit();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void filter(ClientRequestContext requestContext, ClientResponseContext responseContext) throws IOException {\n-        Entry entry = (Entry) requestContext.getProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY);\n-        if (entry != null) {\n-            entry.exit();\n-        }\n-        requestContext.removeProperty(SENTINEL_JAX_RS_CLIENT_ENTRY_PROPERTY);\n-    }\n-\n-    public String getResourceName(ClientRequestContext requestContext) {\n-        return SentinelJaxRsConfig.getResourceNameParser().parse(requestContext);\n-    }\n-}\n"}}, {"oid": "eb86c3968ef2415ae6c72f5cbe6e584142767d73", "url": "https://github.com/alibaba/Sentinel/commit/eb86c3968ef2415ae6c72f5cbe6e584142767d73", "message": "handle jax rs client exception", "committedDate": "2020-04-18T04:27:42Z", "type": "commit"}, {"oid": "c00ce6ceead385013598a298227e9688e0b038e7", "url": "https://github.com/alibaba/Sentinel/commit/c00ce6ceead385013598a298227e9688e0b038e7", "message": "fix document-lint", "committedDate": "2020-04-18T04:54:45Z", "type": "commit"}]}