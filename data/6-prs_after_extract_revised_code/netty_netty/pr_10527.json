{"pr_number": 10527, "pr_title": "Add `null` rule check in `rules` array of RuleBasedIpFilter", "pr_createdAt": "2020-09-02T09:25:42Z", "pr_url": "https://github.com/netty/netty/pull/10527", "timeline": [{"oid": "6a87d76efb29a2c0d879b81d7b2e70336e8dcb2d", "url": "https://github.com/netty/netty/commit/6a87d76efb29a2c0d879b81d7b2e70336e8dcb2d", "message": "Merge pull request #1 from netty/4.1\n\nUpdate repo", "committedDate": "2020-08-30T08:30:58Z", "type": "commit"}, {"oid": "11732da88d714f610574f420b8c863f17a7191d2", "url": "https://github.com/netty/netty/commit/11732da88d714f610574f420b8c863f17a7191d2", "message": "Merge pull request #2 from netty/4.1\n\nSync", "committedDate": "2020-09-02T09:10:21Z", "type": "commit"}, {"oid": "4c03c78690fa3e8bf7eeae4089421ce1711a0af0", "url": "https://github.com/netty/netty/commit/4c03c78690fa3e8bf7eeae4089421ce1711a0af0", "message": "Add null check in rules array and update JavaDoc", "committedDate": "2020-09-02T09:22:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MzY5MQ==", "url": "https://github.com/netty/netty/pull/10527#discussion_r481993691", "bodyText": "This is a non-compatible change as a user may have override the method with the throws Exception declaration", "author": "normanmaurer", "createdAt": "2020-09-02T11:21:46Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java", "diffHunk": "@@ -24,29 +24,41 @@\n import java.net.SocketAddress;\n \n /**\n+ * <p>\n  * This class allows one to filter new {@link Channel}s based on the\n  * {@link IpFilterRule}s passed to its constructor. If no rules are provided, all connections\n  * will be accepted.\n+ * </p>\n  *\n+ * <p>\n  * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n  * {@link AbstractRemoteAddressFilter#channelRejected(ChannelHandlerContext, SocketAddress)}.\n+ * </p>\n  */\n @Sharable\n public class RuleBasedIpFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n \n     private final IpFilterRule[] rules;\n \n-    public RuleBasedIpFilter(IpFilterRule... rules) {\n+    /**\n+     * Create new Instance of {@link RuleBasedIpFilter} and filter incoming connections\n+     * based on their IP address and {@code rules} applied.\n+     *\n+     * @param rules An array of {@link IpFilterRule} containing all rules.\n+     * @throws NullPointerException If {@code rules} array or {@code rule} in\n+     *                              {@code rules} array is {@code null}.\n+     */\n+    public RuleBasedIpFilter(IpFilterRule... rules) throws NullPointerException {\n         this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        for (IpFilterRule rule : this.rules) {\n+            ObjectUtil.checkNotNull(rule, \"rule\");\n+        }\n     }\n \n     @Override\n-    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) throws Exception {\n+    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) {", "originalCommit": "4c03c78690fa3e8bf7eeae4089421ce1711a0af0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "206f4ca74d1e20e151bdcb7649eba049b34e85db", "chunk": "diff --git a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\nindex 16d6deddd7..4ad176d0ea 100644\n--- a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n+++ b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n\n@@ -43,12 +43,8 @@ public class RuleBasedIpFilter extends AbstractRemoteAddressFilter<InetSocketAdd\n     /**\n      * Create new Instance of {@link RuleBasedIpFilter} and filter incoming connections\n      * based on their IP address and {@code rules} applied.\n-     *\n-     * @param rules An array of {@link IpFilterRule} containing all rules.\n-     * @throws NullPointerException If {@code rules} array or {@code rule} in\n-     *                              {@code rules} array is {@code null}.\n      */\n-    public RuleBasedIpFilter(IpFilterRule... rules) throws NullPointerException {\n+    public RuleBasedIpFilter(IpFilterRule... rules) {\n         this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n \n         for (IpFilterRule rule : this.rules) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Mzk1OQ==", "url": "https://github.com/netty/netty/pull/10527#discussion_r481993959", "bodyText": "This is a non compatible change in behaviour imho...", "author": "normanmaurer", "createdAt": "2020-09-02T11:22:12Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java", "diffHunk": "@@ -24,29 +24,41 @@\n import java.net.SocketAddress;\n \n /**\n+ * <p>\n  * This class allows one to filter new {@link Channel}s based on the\n  * {@link IpFilterRule}s passed to its constructor. If no rules are provided, all connections\n  * will be accepted.\n+ * </p>\n  *\n+ * <p>\n  * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n  * {@link AbstractRemoteAddressFilter#channelRejected(ChannelHandlerContext, SocketAddress)}.\n+ * </p>\n  */\n @Sharable\n public class RuleBasedIpFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n \n     private final IpFilterRule[] rules;\n \n-    public RuleBasedIpFilter(IpFilterRule... rules) {\n+    /**\n+     * Create new Instance of {@link RuleBasedIpFilter} and filter incoming connections\n+     * based on their IP address and {@code rules} applied.\n+     *\n+     * @param rules An array of {@link IpFilterRule} containing all rules.\n+     * @throws NullPointerException If {@code rules} array or {@code rule} in\n+     *                              {@code rules} array is {@code null}.\n+     */\n+    public RuleBasedIpFilter(IpFilterRule... rules) throws NullPointerException {\n         this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        for (IpFilterRule rule : this.rules) {\n+            ObjectUtil.checkNotNull(rule, \"rule\");", "originalCommit": "4c03c78690fa3e8bf7eeae4089421ce1711a0af0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NTM0Ng==", "url": "https://github.com/netty/netty/pull/10527#discussion_r481995346", "bodyText": "So how to tackle this? By removing throws NullPointerException?", "author": "hyperxpro", "createdAt": "2020-09-02T11:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Mzk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NTg4Mg==", "url": "https://github.com/netty/netty/pull/10527#discussion_r481995882", "bodyText": "Since we're already throwing NullPointerException, I can remove throws NullPointerException and let it throw NullPointerException normally.", "author": "hyperxpro", "createdAt": "2020-09-02T11:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Mzk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNjQ3NA==", "url": "https://github.com/netty/netty/pull/10527#discussion_r482106474", "bodyText": "It's sort of a strange behaviour that rule processing stops at the first null element.\nYou can scan the array to see if there are any nulls, and if so, replace the array with its first non-null sub-sequence. Assuming the mutability of the array is not part of the API. It's not clear.", "author": "chrisvest", "createdAt": "2020-09-02T14:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Mzk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMDU2Mg==", "url": "https://github.com/netty/netty/pull/10527#discussion_r482110562", "bodyText": "Yeah, I think this will work. We should remove not null rules.", "author": "hyperxpro", "createdAt": "2020-09-02T14:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Mzk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "206f4ca74d1e20e151bdcb7649eba049b34e85db", "chunk": "diff --git a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\nindex 16d6deddd7..4ad176d0ea 100644\n--- a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n+++ b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n\n@@ -43,12 +43,8 @@ public class RuleBasedIpFilter extends AbstractRemoteAddressFilter<InetSocketAdd\n     /**\n      * Create new Instance of {@link RuleBasedIpFilter} and filter incoming connections\n      * based on their IP address and {@code rules} applied.\n-     *\n-     * @param rules An array of {@link IpFilterRule} containing all rules.\n-     * @throws NullPointerException If {@code rules} array or {@code rule} in\n-     *                              {@code rules} array is {@code null}.\n      */\n-    public RuleBasedIpFilter(IpFilterRule... rules) throws NullPointerException {\n+    public RuleBasedIpFilter(IpFilterRule... rules) {\n         this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n \n         for (IpFilterRule rule : this.rules) {\n"}}, {"oid": "206f4ca74d1e20e151bdcb7649eba049b34e85db", "url": "https://github.com/netty/netty/commit/206f4ca74d1e20e151bdcb7649eba049b34e85db", "message": "prevent API breakage", "committedDate": "2020-09-02T11:29:40Z", "type": "commit"}, {"oid": "0d1fd900026df7b4c4bb116e9a4ecddbe7019ee4", "url": "https://github.com/netty/netty/commit/0d1fd900026df7b4c4bb116e9a4ecddbe7019ee4", "message": "address @chrisvest suggestions", "committedDate": "2020-09-02T12:07:59Z", "type": "commit"}, {"oid": "bf9232102c2cfb52b15acc2b472598f5c6fb8987", "url": "https://github.com/netty/netty/commit/bf9232102c2cfb52b15acc2b472598f5c6fb8987", "message": "Only add `not null` rules into List and add `acceptIfNotFound` condition", "committedDate": "2020-09-02T15:31:20Z", "type": "commit"}, {"oid": "384954c7afa0d164aadd8c47f1eb1b30dbd52022", "url": "https://github.com/netty/netty/commit/384954c7afa0d164aadd8c47f1eb1b30dbd52022", "message": "fix JavaDoc", "committedDate": "2020-09-02T15:33:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MTE3NA==", "url": "https://github.com/netty/netty/pull/10527#discussion_r505491174", "bodyText": "nit: I would remove \"super fast\" here... what does this even mean ?", "author": "normanmaurer", "createdAt": "2020-10-15T12:13:10Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java", "diffHunk": "@@ -22,36 +22,71 @@\n \n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n+ * <p>\n  * This class allows one to filter new {@link Channel}s based on the\n  * {@link IpFilterRule}s passed to its constructor. If no rules are provided, all connections\n  * will be accepted.\n+ * </p>\n  *\n+ * <p>\n  * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n  * {@link AbstractRemoteAddressFilter#channelRejected(ChannelHandlerContext, SocketAddress)}.\n+ * </p>\n+ *\n+ * <p> You can also consider using {@link IpSubnetFilter} which uses Binary Search Algorithm\n+ * for super fast IP Address filtering. </p>", "originalCommit": "384954c7afa0d164aadd8c47f1eb1b30dbd52022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5NTA1MA==", "url": "https://github.com/netty/netty/pull/10527#discussion_r505495050", "bodyText": "RuleBasedIpFilter uses a for-each loop but IpSubnetFilter uses Binary Search which is a lot faster and should be considered over RuleBasedIpFilter that's why I added \"Super fast\" there.\nShould I remove?", "author": "hyperxpro", "createdAt": "2020-10-15T12:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5NTk2MA==", "url": "https://github.com/netty/netty/pull/10527#discussion_r505495960", "bodyText": "Maybe just use something like:\nConsider using {@link IpSubnetFilter} for better performance while not as general purpose as this filter.", "author": "normanmaurer", "createdAt": "2020-10-15T12:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "0f8b849bdfcdfe1f80441976c70e0c3de3d938a9", "chunk": "diff --git a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\nindex 3f43d8c3cd..1bb1d82226 100644\n--- a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n+++ b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n\n@@ -37,8 +37,8 @@ import java.util.List;\n  * {@link AbstractRemoteAddressFilter#channelRejected(ChannelHandlerContext, SocketAddress)}.\n  * </p>\n  *\n- * <p> You can also consider using {@link IpSubnetFilter} which uses Binary Search Algorithm\n- * for super fast IP Address filtering. </p>\n+ * <p> Consider using {@link IpSubnetFilter} for better performance while not as\n+ * general purpose as this filter. </p>\n  */\n @Sharable\n public class RuleBasedIpFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n"}}, {"oid": "0f8b849bdfcdfe1f80441976c70e0c3de3d938a9", "url": "https://github.com/netty/netty/commit/0f8b849bdfcdfe1f80441976c70e0c3de3d938a9", "message": "Fix JavaDoc", "committedDate": "2020-10-16T06:27:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MjEyNw==", "url": "https://github.com/netty/netty/pull/10527#discussion_r506862127", "bodyText": "nit: Please do use new ArrayList(rules.length)", "author": "normanmaurer", "createdAt": "2020-10-17T07:59:29Z", "path": "handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java", "diffHunk": "@@ -22,36 +22,71 @@\n \n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n+ * <p>\n  * This class allows one to filter new {@link Channel}s based on the\n  * {@link IpFilterRule}s passed to its constructor. If no rules are provided, all connections\n  * will be accepted.\n+ * </p>\n  *\n+ * <p>\n  * If you would like to explicitly take action on rejected {@link Channel}s, you should override\n  * {@link AbstractRemoteAddressFilter#channelRejected(ChannelHandlerContext, SocketAddress)}.\n+ * </p>\n+ *\n+ * <p> Consider using {@link IpSubnetFilter} for better performance while not as\n+ * general purpose as this filter. </p>\n  */\n @Sharable\n public class RuleBasedIpFilter extends AbstractRemoteAddressFilter<InetSocketAddress> {\n \n-    private final IpFilterRule[] rules;\n+    private final boolean acceptIfNotFound;\n+    private final List<IpFilterRule> rules;\n \n+    /**\n+     * <p> Create new Instance of {@link RuleBasedIpFilter} and filter incoming connections\n+     * based on their IP address and {@code rules} applied. </p>\n+     *\n+     * <p> {@code acceptIfNotFound} is set to {@code true}. </p>\n+     *\n+     * @param rules An array of {@link IpFilterRule} containing all rules.\n+     */\n     public RuleBasedIpFilter(IpFilterRule... rules) {\n-        this.rules = ObjectUtil.checkNotNull(rules, \"rules\");\n+        this(true, rules);\n     }\n \n-    @Override\n-    protected boolean accept(ChannelHandlerContext ctx, InetSocketAddress remoteAddress) throws Exception {\n+    /**\n+     * Create new Instance of {@link RuleBasedIpFilter} and filter incoming connections\n+     * based on their IP address and {@code rules} applied.\n+     *\n+     * @param acceptIfNotFound If {@code true} then accept connection from IP Address if it\n+     *                         doesn't match any rule.\n+     * @param rules            An array of {@link IpFilterRule} containing all rules.\n+     */\n+    public RuleBasedIpFilter(boolean acceptIfNotFound, IpFilterRule... rules) {\n+        ObjectUtil.checkNotNull(rules, \"rules\");\n+\n+        this.acceptIfNotFound = acceptIfNotFound;\n+        this.rules = new ArrayList<IpFilterRule>();", "originalCommit": "0f8b849bdfcdfe1f80441976c70e0c3de3d938a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MjgzOA==", "url": "https://github.com/netty/netty/pull/10527#discussion_r506862838", "bodyText": "If the rules array contains null, we will waste Arraylist capacity because we filter null rules later on.", "author": "hyperxpro", "createdAt": "2020-10-17T08:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MjEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2NTA5NA==", "url": "https://github.com/netty/netty/pull/10527#discussion_r506865094", "bodyText": "its very unlikely it contains null... so better use the length so we not need to \"grow\" the list.", "author": "normanmaurer", "createdAt": "2020-10-17T08:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MjEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2NzUwNg==", "url": "https://github.com/netty/netty/pull/10527#discussion_r506867506", "bodyText": "Done", "author": "hyperxpro", "createdAt": "2020-10-17T08:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MjEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "4b26dc5a6e7cef47a67ab9f60d7cd6bf4a3bdcd4", "chunk": "diff --git a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\nindex 1bb1d82226..8cf567c866 100644\n--- a/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n+++ b/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java\n\n@@ -70,7 +70,7 @@ public class RuleBasedIpFilter extends AbstractRemoteAddressFilter<InetSocketAdd\n         ObjectUtil.checkNotNull(rules, \"rules\");\n \n         this.acceptIfNotFound = acceptIfNotFound;\n-        this.rules = new ArrayList<IpFilterRule>();\n+        this.rules = new ArrayList<IpFilterRule>(rules.length);\n \n         for (IpFilterRule rule : rules) {\n             if (rule != null) {\n"}}, {"oid": "4b26dc5a6e7cef47a67ab9f60d7cd6bf4a3bdcd4", "url": "https://github.com/netty/netty/commit/4b26dc5a6e7cef47a67ab9f60d7cd6bf4a3bdcd4", "message": "use new ArrayList(int)", "committedDate": "2020-10-17T08:07:20Z", "type": "commit"}]}