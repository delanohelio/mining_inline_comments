{"pr_number": 10291, "pr_title": "Use allocation free algorithm to detect CNAME cache loops", "pr_createdAt": "2020-05-14T08:38:22Z", "pr_url": "https://github.com/netty/netty/pull/10291", "timeline": [{"oid": "6f2cc658cf8798101049e322b896bc193885fc67", "url": "https://github.com/netty/netty/commit/6f2cc658cf8798101049e322b896bc193885fc67", "message": "Use allocation free algorithm to detect CNAME cache loops\n\nMotivation:\n\nWe did use a HashSet to detect CNAME cache loops which needs allocations. We can use an algorithm that doesnt need any allocations\n\nModifications:\n\nUse algorithm that doesnt need allocations\n\nResult:\n\nLess allocations on the slow path", "committedDate": "2020-05-14T08:36:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNjMwMw==", "url": "https://github.com/netty/netty/pull/10291#discussion_r425206303", "bodyText": "May want to reference this (instead of or in addition to Guava):\nhttps://en.wikipedia.org/wiki/Cycle_detection#Floyd's_Tortoise_and_Hare", "author": "Bennett-Lynch", "createdAt": "2020-05-14T15:01:10Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java", "diffHunk": "@@ -301,20 +300,24 @@ private String cnameResolveFromCache(String name) {\n     }\n \n     private String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n-        // Detect loops using a HashSet. We use this as last resort implementation to reduce allocations in the most\n-        // common cases.\n-        Set<String> cnames = new HashSet<String>(4);\n-        cnames.add(first);\n-        cnames.add(mapping);\n+        // Detect loops by advance only every other iteration. This is the same concept as used in guava", "originalCommit": "79d510f80941cd77fcce782d898420d0dbf6daf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9e67febe719ab6f15104f1905ddd44520a60185", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\nindex 98f4e38313..7744302209 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n\n@@ -300,7 +300,8 @@ abstract class DnsResolveContext<T> {\n     }\n \n     private String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n-        // Detect loops by advance only every other iteration. This is the same concept as used in guava\n+        // Detect loops by advance only every other iteration.\n+        // See https://en.wikipedia.org/wiki/Cycle_detection#Floyd's_Tortoise_and_Hare\n         String otherMapping = first;\n         boolean advance = false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNjM3Mw==", "url": "https://github.com/netty/netty/pull/10291#discussion_r425206373", "bodyText": "Unrelated to this PR but does it make more sense to break or to throw?", "author": "Bennett-Lynch", "createdAt": "2020-05-14T15:01:16Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java", "diffHunk": "@@ -301,20 +300,24 @@ private String cnameResolveFromCache(String name) {\n     }\n \n     private String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n-        // Detect loops using a HashSet. We use this as last resort implementation to reduce allocations in the most\n-        // common cases.\n-        Set<String> cnames = new HashSet<String>(4);\n-        cnames.add(first);\n-        cnames.add(mapping);\n+        // Detect loops by advance only every other iteration. This is the same concept as used in guava\n+        String otherMapping = first;\n+        boolean advance = false;\n \n         String name = mapping;\n         // Resolve from cnameCache() until there is no more cname entry cached.\n         while ((mapping = cnameCache.get(hostnameWithDot(name))) != null) {\n-            if (!cnames.add(mapping)) {\n+            if (otherMapping.equals(mapping)) {\n                 // Follow CNAME from cache would loop. Lets break here.\n                 break;", "originalCommit": "79d510f80941cd77fcce782d898420d0dbf6daf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4MjA0MA==", "url": "https://github.com/netty/netty/pull/10291#discussion_r425282040", "bodyText": "good question. Let me do this in a followup... Most likely throw as it will fail the resolution anyway at the end", "author": "normanmaurer", "createdAt": "2020-05-14T16:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNjM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f9e67febe719ab6f15104f1905ddd44520a60185", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\nindex 98f4e38313..7744302209 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n\n@@ -300,7 +300,8 @@ abstract class DnsResolveContext<T> {\n     }\n \n     private String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n-        // Detect loops by advance only every other iteration. This is the same concept as used in guava\n+        // Detect loops by advance only every other iteration.\n+        // See https://en.wikipedia.org/wiki/Cycle_detection#Floyd's_Tortoise_and_Hare\n         String otherMapping = first;\n         boolean advance = false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNzI2NQ==", "url": "https://github.com/netty/netty/pull/10291#discussion_r425207265", "bodyText": "Nit: I find advance = !advance (outside of the if block) a little more intuitive.", "author": "Bennett-Lynch", "createdAt": "2020-05-14T15:02:32Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java", "diffHunk": "@@ -301,20 +300,24 @@ private String cnameResolveFromCache(String name) {\n     }\n \n     private String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n-        // Detect loops using a HashSet. We use this as last resort implementation to reduce allocations in the most\n-        // common cases.\n-        Set<String> cnames = new HashSet<String>(4);\n-        cnames.add(first);\n-        cnames.add(mapping);\n+        // Detect loops by advance only every other iteration. This is the same concept as used in guava\n+        String otherMapping = first;\n+        boolean advance = false;\n \n         String name = mapping;\n         // Resolve from cnameCache() until there is no more cname entry cached.\n         while ((mapping = cnameCache.get(hostnameWithDot(name))) != null) {\n-            if (!cnames.add(mapping)) {\n+            if (otherMapping.equals(mapping)) {\n                 // Follow CNAME from cache would loop. Lets break here.\n                 break;\n             }\n             name = mapping;\n+            if (advance) {\n+                otherMapping = mapping;\n+                advance = false;\n+            } else {\n+                advance = true;", "originalCommit": "79d510f80941cd77fcce782d898420d0dbf6daf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9e67febe719ab6f15104f1905ddd44520a60185", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\nindex 98f4e38313..7744302209 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n\n@@ -300,7 +300,8 @@ abstract class DnsResolveContext<T> {\n     }\n \n     private String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n-        // Detect loops by advance only every other iteration. This is the same concept as used in guava\n+        // Detect loops by advance only every other iteration.\n+        // See https://en.wikipedia.org/wiki/Cycle_detection#Floyd's_Tortoise_and_Hare\n         String otherMapping = first;\n         boolean advance = false;\n \n"}}, {"oid": "f9e67febe719ab6f15104f1905ddd44520a60185", "url": "https://github.com/netty/netty/commit/f9e67febe719ab6f15104f1905ddd44520a60185", "message": "Address comments", "committedDate": "2020-05-15T07:11:40Z", "type": "commit"}, {"oid": "f9e67febe719ab6f15104f1905ddd44520a60185", "url": "https://github.com/netty/netty/commit/f9e67febe719ab6f15104f1905ddd44520a60185", "message": "Address comments", "committedDate": "2020-05-15T07:11:40Z", "type": "forcePushed"}, {"oid": "1ee26f3c9579420be95e868471a3bf0f7888ef29", "url": "https://github.com/netty/netty/commit/1ee26f3c9579420be95e868471a3bf0f7888ef29", "message": "Correctly implement algo", "committedDate": "2020-05-15T09:23:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0MTQ0Nw==", "url": "https://github.com/netty/netty/pull/10291#discussion_r426141447", "bodyText": "Just out of curiosity ,why you need field  otherMapping  to instead of first  which you never use .", "author": "prgitpr", "createdAt": "2020-05-16T10:33:12Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java", "diffHunk": "@@ -300,28 +300,31 @@ private String cnameResolveFromCache(String name) {\n         return cnameResolveFromCacheLoop(cnameCache, first, second);\n     }\n \n-    private String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n-        // Detect loops using a HashSet. We use this as last resort implementation to reduce allocations in the most\n-        // common cases.\n-        Set<String> cnames = new HashSet<String>(4);\n-        cnames.add(first);\n-        cnames.add(mapping);\n+    static String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n+        // Detect loops by advance only every other iteration.\n+        // See https://en.wikipedia.org/wiki/Cycle_detection#Floyd's_Tortoise_and_Hare\n+        String otherMapping = first;", "originalCommit": "1ee26f3c9579420be95e868471a3bf0f7888ef29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNzA3Ng==", "url": "https://github.com/netty/netty/pull/10291#discussion_r426437076", "bodyText": "@prgitpr yep we can simplify.", "author": "normanmaurer", "createdAt": "2020-05-18T08:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0MTQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ecc46953d5ed1690a4c7f02f7405ed90b5c83026", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\nindex 8b2a8f3d70..3ba521b2c2 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java\n\n@@ -303,19 +303,18 @@ abstract class DnsResolveContext<T> {\n     static String cnameResolveFromCacheLoop(DnsCnameCache cnameCache, String first, String mapping) {\n         // Detect loops by advance only every other iteration.\n         // See https://en.wikipedia.org/wiki/Cycle_detection#Floyd's_Tortoise_and_Hare\n-        String otherMapping = first;\n         boolean advance = false;\n \n         String name = mapping;\n         // Resolve from cnameCache() until there is no more cname entry cached.\n         while ((mapping = cnameCache.get(hostnameWithDot(name))) != null) {\n-            if (otherMapping.equals(mapping)) {\n+            if (first.equals(mapping)) {\n                 // Follow CNAME from cache would loop. Lets break here.\n                 break;\n             }\n             name = mapping;\n             if (advance) {\n-                otherMapping = cnameCache.get(otherMapping);\n+                first = cnameCache.get(first);\n             }\n             advance = !advance;\n         }\n"}}, {"oid": "ecc46953d5ed1690a4c7f02f7405ed90b5c83026", "url": "https://github.com/netty/netty/commit/ecc46953d5ed1690a4c7f02f7405ed90b5c83026", "message": "Simplify", "committedDate": "2020-05-18T08:06:16Z", "type": "commit"}]}