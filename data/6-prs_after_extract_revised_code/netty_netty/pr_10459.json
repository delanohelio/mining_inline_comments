{"pr_number": 10459, "pr_title": "Add whitelist entry to BlockHound config to workaround issue when TLS\u2026", "pr_createdAt": "2020-08-07T13:34:50Z", "pr_url": "https://github.com/netty/netty/pull/10459", "timeline": [{"oid": "b1c2c912227c8ccca9f99045986e6bf434abd6b0", "url": "https://github.com/netty/netty/commit/b1c2c912227c8ccca9f99045986e6bf434abd6b0", "message": "Add whitelist entry to BlockHound config to workaround issue when TLS1.3 is enabled and the SslProvider.JDK is used\n\nMotivation:\n\nSSLEngineImpl.unwrap(...) may call FileInputStream.read(...) internally when TLS1.3 is used. This will cause an BlockingOperationError when BlockHound is enabled.\n\nFor more details see https://mail.openjdk.java.net/pipermail/security-dev/2020-August/022271.html\n\nModifications:\n\n- Add whitelist entry to BlockHound config for now\n- Update NettyBlockHoundIntegrationTest to include testing for this workaround\n\nResult:\n\nNo BlockingOperationError when TLS1.3 is used with JDK SSL implementation and BlockHound is enabled", "committedDate": "2020-08-07T13:31:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3Nzg1Ng==", "url": "https://github.com/netty/netty/pull/10459#discussion_r467077856", "bodyText": "This check should be applied to the method testTrustManagerVerifyTLSv13 not this one", "author": "violetagg", "createdAt": "2020-08-07T14:30:56Z", "path": "transport-blockhound-tests/src/test/java/io/netty/util/internal/NettyBlockHoundIntegrationTest.java", "diffHunk": "@@ -130,40 +130,84 @@ private static void testEventExecutorTakeTask(EventExecutor eventExecutor) throw\n     // Tests copied from io.netty.handler.ssl.SslHandlerTest\n     @Test\n     public void testHandshakeWithExecutorThatExecuteDirectory() throws Exception {\n-        testHandshakeWithExecutor(Runnable::run);\n+        testHandshakeWithExecutor(Runnable::run, \"TLSv1.2\");\n+    }\n+\n+    @Test\n+    public void testHandshakeWithExecutorThatExecuteDirectoryTLSv13() throws Exception {\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.JDK));\n+        testHandshakeWithExecutor(Runnable::run, \"TLSv1.3\");\n     }\n \n     @Test\n     public void testHandshakeWithImmediateExecutor() throws Exception {\n-        testHandshakeWithExecutor(ImmediateExecutor.INSTANCE);\n+        testHandshakeWithExecutor(ImmediateExecutor.INSTANCE, \"TLSv1.2\");\n+    }\n+\n+    @Test\n+    public void testHandshakeWithImmediateExecutorTLSv13() throws Exception {\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.JDK));\n+        testHandshakeWithExecutor(ImmediateExecutor.INSTANCE, \"TLSv1.3\");\n     }\n \n     @Test\n     public void testHandshakeWithImmediateEventExecutor() throws Exception {\n-        testHandshakeWithExecutor(ImmediateEventExecutor.INSTANCE);\n+        testHandshakeWithExecutor(ImmediateEventExecutor.INSTANCE, \"TLSv1.2\");\n+    }\n+\n+    @Test\n+    public void testHandshakeWithImmediateEventExecutorTLSv13() throws Exception {\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.JDK));\n+        testHandshakeWithExecutor(ImmediateEventExecutor.INSTANCE, \"TLSv1.3\");\n     }\n \n     @Test\n     public void testHandshakeWithExecutor() throws Exception {\n         ExecutorService executorService = Executors.newCachedThreadPool();\n         try {\n-            testHandshakeWithExecutor(executorService);\n+            testHandshakeWithExecutor(executorService, \"TLSv1.2\");\n+        } finally {\n+            executorService.shutdown();\n+        }\n+    }\n+\n+    @Test\n+    public void testHandshakeWithExecutorTLSv13() throws Exception {\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.JDK));\n+        ExecutorService executorService = Executors.newCachedThreadPool();\n+        try {\n+            testHandshakeWithExecutor(executorService, \"TLSv1.3\");\n         } finally {\n             executorService.shutdown();\n         }\n     }\n \n     @Test\n     public void testTrustManagerVerify() throws Exception {\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.JDK));", "originalCommit": "b1c2c912227c8ccca9f99045986e6bf434abd6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3OTUzNQ==", "url": "https://github.com/netty/netty/pull/10459#discussion_r467079535", "bodyText": "doh... good catch", "author": "normanmaurer", "createdAt": "2020-08-07T14:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3Nzg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7e328aa250029ef32925c227f948de767e9f22e5", "chunk": "diff --git a/transport-blockhound-tests/src/test/java/io/netty/util/internal/NettyBlockHoundIntegrationTest.java b/transport-blockhound-tests/src/test/java/io/netty/util/internal/NettyBlockHoundIntegrationTest.java\nindex f49ef7573c..4a2d5c3328 100644\n--- a/transport-blockhound-tests/src/test/java/io/netty/util/internal/NettyBlockHoundIntegrationTest.java\n+++ b/transport-blockhound-tests/src/test/java/io/netty/util/internal/NettyBlockHoundIntegrationTest.java\n\n@@ -184,12 +184,12 @@ public class NettyBlockHoundIntegrationTest {\n \n     @Test\n     public void testTrustManagerVerify() throws Exception {\n-        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.JDK));\n         testTrustManagerVerify(\"TLSv1.2\");\n     }\n \n     @Test\n     public void testTrustManagerVerifyTLSv13() throws Exception {\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.JDK));\n         testTrustManagerVerify(\"TLSv1.3\");\n     }\n \n"}}, {"oid": "7e328aa250029ef32925c227f948de767e9f22e5", "url": "https://github.com/netty/netty/commit/7e328aa250029ef32925c227f948de767e9f22e5", "message": "Fix assume", "committedDate": "2020-08-07T14:34:12Z", "type": "commit"}, {"oid": "7e328aa250029ef32925c227f948de767e9f22e5", "url": "https://github.com/netty/netty/commit/7e328aa250029ef32925c227f948de767e9f22e5", "message": "Fix assume", "committedDate": "2020-08-07T14:34:12Z", "type": "forcePushed"}]}