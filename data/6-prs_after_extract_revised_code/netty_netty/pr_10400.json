{"pr_number": 10400, "pr_title": "Improve MqttMessageType::valueOf cost", "pr_createdAt": "2020-07-13T09:35:32Z", "pr_url": "https://github.com/netty/netty/pull/10400", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyMzEwOQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r453523109", "bodyText": "nit: remove () around VALUES.length", "author": "normanmaurer", "createdAt": "2020-07-13T09:37:39Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -46,12 +63,10 @@ public int value() {\n     }\n \n     public static MqttMessageType valueOf(int type) {\n-        for (MqttMessageType t : values()) {\n-            if (t.value == type) {\n-                return t;\n-            }\n+        if (type <= 0 || type >= (VALUES.length)) {", "originalCommit": "fddf8a42d9e354d84a3a6486497891cb4b7a257a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MjQwNA==", "url": "https://github.com/netty/netty/pull/10400#discussion_r453542404", "bodyText": "Done :)", "author": "franz1981", "createdAt": "2020-07-13T10:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyMzEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "316e8ef5d085e6263fc97987434f3512cb847163", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\nindex 012b209486..32c0440126 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n\n@@ -63,7 +63,7 @@ public enum MqttMessageType {\n     }\n \n     public static MqttMessageType valueOf(int type) {\n-        if (type <= 0 || type >= (VALUES.length)) {\n+        if (type <= 0 || type >= VALUES.length) {\n             throw new IllegalArgumentException(\"unknown message type: \" + type);\n         }\n         return VALUES[type];\n"}}, {"oid": "316e8ef5d085e6263fc97987434f3512cb847163", "url": "https://github.com/netty/netty/commit/316e8ef5d085e6263fc97987434f3512cb847163", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-07-13T09:45:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg==", "url": "https://github.com/netty/netty/pull/10400#discussion_r453643792", "bodyText": "What about simple switch statement? In that case we don't need to create and hold static variable.", "author": "doom369", "createdAt": "2020-07-13T13:20:48Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -46,12 +63,10 @@ public int value() {\n     }\n \n     public static MqttMessageType valueOf(int type) {", "originalCommit": "316e8ef5d085e6263fc97987434f3512cb847163", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MjM4OQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r453652389", "bodyText": "I see some reasons, the switch statement is:\n\ntied to the encoding of MqttMessageType (if the type will change, you'd need to change both, but is very unlikely to happen)\nis likely using many branches that the JVM will try to order accordly to some profiling/counter policy (for no reasons, given that this is for pure encoding reasons)\nhas a bigger byte code size, reducing the chances to be inlined or that its caller will be inlined when compiled into a bigger method\n\nIn general I see that the lookup tables perform a bit better for cases like these, but I haven't produced a reliable bench yet for this one to be 100% sure\nThe second statement could be not precise if the JIT Is going to produce a jump table in ASM but still the other statements apply.", "author": "franz1981", "createdAt": "2020-07-13T13:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3ODA3MQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r453878071", "bodyText": "I see from http://hg.openjdk.java.net/jdk8/jdk8/hotspot/rev/34bd5e86aadb that C2 should generate a jump table in ASM here (using jmpq with x86 CPUs) due to the number of choices, saving the binary jump table approach that wouldn be used otherwise: I admit I am curious to check how it perform vs this PR, given that jmpq should perform an unconditional jump not getting any misprediction cost...", "author": "franz1981", "createdAt": "2020-07-13T19:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0NzY3Ng==", "url": "https://github.com/netty/netty/pull/10400#discussion_r454147676", "bodyText": "@franz1981 so you want to pull this in or do some more experiments first ? I am cool with both btw", "author": "normanmaurer", "createdAt": "2020-07-14T07:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MTg0Mw==", "url": "https://github.com/netty/netty/pull/10400#discussion_r454151843", "bodyText": "My test shows that switch is faster rather than static field array access (probably because you do the bounds checks in merthod + most likely JVM does that). However, your comment regarding byte code size may be valid. So you need to check that with full decoder flow to prove that.", "author": "doom369", "createdAt": "2020-07-14T07:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MjM4OQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r454152389", "bodyText": "Let me try writing a small bench here bud: I see other points on MQTT where enums valueOf lookup could be simplified like this and it's used on the hot paths.", "author": "franz1981", "createdAt": "2020-07-14T07:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1NDkzMw==", "url": "https://github.com/netty/netty/pull/10400#discussion_r454154933", "bodyText": "@doom369\nRe\n\nMy test shows that switch is faster rather than static field array access\n\nThat surprise me: the pattern of message types you've used to perform the lookup is long enough to trick the branch predictor?\nI see that can make a lot of difference while dealing with real use case vs synthetic workload\n\nHowever, your comment regarding byte code size may be valid\n\nYep, I have been recently bitten by inlining budget/threshold exhaustion with Netty (see #10368)", "author": "franz1981", "createdAt": "2020-07-14T07:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1ODM2MQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r454158361", "bodyText": "@franz1981 well, I didn't dig into root cause. Here is my benchmark:\n@BenchmarkMode(Mode.AverageTime)\n@Fork(1)\n@State(Scope.Thread)\n@Warmup(iterations = 5, time = 1)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@Measurement(iterations = 10, time = 1)\npublic class ArrayVsSwitch {\n\n    @Param({\"1\", \"14\"})\n    int type;\n\n    @Benchmark\n    public MqttMessageType getViaArray() {\n        return MqttMessageType.valueOf(type);\n    }\n\n    @Benchmark\n    public MqttMessageType getViaSwitch() {\n        switch (type) {\n            case 1 :\n                return MqttMessageType.CONNECT;\n            case 2 :\n                return MqttMessageType.CONNACK;\n            case 3 :\n                return MqttMessageType.PUBLISH;\n            case 4 :\n                return MqttMessageType.PUBACK;\n            case 5 :\n                return MqttMessageType.PUBREC;\n            case 6 :\n                return MqttMessageType.PUBREL;\n            case 7 :\n                return MqttMessageType.PUBCOMP;\n            case 8 :\n                return MqttMessageType.SUBSCRIBE;\n            case 9 :\n                return MqttMessageType.SUBACK;\n            case 10 :\n                return MqttMessageType.UNSUBSCRIBE;\n            case 11 :\n                return MqttMessageType.UNSUBACK;\n            case 12 :\n                return MqttMessageType.PINGREQ;\n            case 13 :\n                return MqttMessageType.PINGRESP;\n            case 14 :\n                return MqttMessageType.DISCONNECT;\n            default:\n                throw new IllegalArgumentException(\"unknown message type: \" + type);\n        }\n    }\n\n    public enum MqttMessageType {\n        CONNECT(1),\n        CONNACK(2),\n        PUBLISH(3),\n        PUBACK(4),\n        PUBREC(5),\n        PUBREL(6),\n        PUBCOMP(7),\n        SUBSCRIBE(8),\n        SUBACK(9),\n        UNSUBSCRIBE(10),\n        UNSUBACK(11),\n        PINGREQ(12),\n        PINGRESP(13),\n        DISCONNECT(14);\n\n        private static final MqttMessageType[] VALUES;\n\n        static {\n            // this prevent values to be assigned with the wrong order\n            // and ensure valueOf to work fine\n            MqttMessageType[] values = values();\n            VALUES = new MqttMessageType[values.length + 1];\n            for (MqttMessageType mqttMessageType : values) {\n                int value = mqttMessageType.value;\n                if (VALUES[value] != null) {\n                    throw new AssertionError(\"value already in use: \" + value);\n                }\n                VALUES[value] = mqttMessageType;\n            }\n        }\n\n        private final int value;\n\n        MqttMessageType(int value) {\n            this.value = value;\n        }\n\n        public int value() {\n            return value;\n        }\n\n        public static MqttMessageType valueOf(int type) {\n            if (type <= 0 || type >= VALUES.length) {\n                throw new IllegalArgumentException(\"unknown message type: \" + type);\n            }\n            return VALUES[type];\n        }\n    }\n}\n\nResult:\nBenchmark                   (type)  Mode  Cnt  Score   Error  Units\nArrayVsSwitch.getViaArray        1  avgt   10  3.464 \u00b1 0.012  ns/op\nArrayVsSwitch.getViaArray       14  avgt   10  3.466 \u00b1 0.012  ns/op\nArrayVsSwitch.getViaSwitch       1  avgt   10  3.169 \u00b1 0.022  ns/op\nArrayVsSwitch.getViaSwitch      14  avgt   10  3.174 \u00b1 0.044  ns/op\n\nP. S. getViaSwitch is not wrapped into a method, but valueOf inlined as well. So it doesn't matter for that test.", "author": "doom369", "createdAt": "2020-07-14T07:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bfa1ae16928caff6972ce09ae00dfad38f5638c5", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\nindex 32c0440126..cadb303fac 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n\n@@ -64,7 +63,7 @@ public enum MqttMessageType {\n \n     public static MqttMessageType valueOf(int type) {\n         if (type <= 0 || type >= VALUES.length) {\n-            throw new IllegalArgumentException(\"unknown message type: \" + type);\n+            throw new IllegalArgumentException(\"Unknown message type: \" + type);\n         }\n         return VALUES[type];\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MzUyMQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r454153521", "bodyText": "you can use for each here", "author": "doom369", "createdAt": "2020-07-14T07:19:05Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -35,6 +35,23 @@\n     PINGRESP(13),\n     DISCONNECT(14);\n \n+    private static final MqttMessageType[] VALUES;\n+\n+    static {\n+        // this prevent values to be assigned with the wrong order\n+        // and ensure valueOf to work fine\n+        final MqttMessageType[] values = values();\n+        VALUES = new MqttMessageType[values.length + 1];\n+        for (int i = 0; i < values.length; i++) {", "originalCommit": "316e8ef5d085e6263fc97987434f3512cb847163", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3cf7008d19344912d2c66be94f4fd825b1f659af", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\nindex 32c0440126..f073ca06c9 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n\n@@ -42,8 +42,7 @@ public enum MqttMessageType {\n         // and ensure valueOf to work fine\n         final MqttMessageType[] values = values();\n         VALUES = new MqttMessageType[values.length + 1];\n-        for (int i = 0; i < values.length; i++) {\n-            final MqttMessageType mqttMessageType = values[i];\n+        for (MqttMessageType mqttMessageType : values) {\n             final int value = mqttMessageType.value;\n             if (VALUES[value] != null) {\n                 throw new AssertionError(\"value already in use: \" + value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNTc5MA==", "url": "https://github.com/netty/netty/pull/10400#discussion_r456525790", "bodyText": "This is going to cause a lot of contention on this.next. Why not just use a for loop and iterate over all of them, instead of trying to do measure just a single one?", "author": "alblue", "createdAt": "2020-07-17T15:47:50Z", "path": "microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.jctools.util.Pow2;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n+\n+    private static final int[] DATASET = new int[] {\n+            9, 5, 2, 9, 8, 4, 3, 7, 7, 9, 6, 11, 10, 4, 10, 6, 12, 6, 14, 8, 2, 2, 5, 7, 13, 3, 10, 12, 6, 2, 8, 1, 6,\n+            4, 10, 8, 13, 9, 9, 2, 7, 12, 2, 3, 12, 9, 3, 12,\n+            11, 4, 10, 11, 9, 10, 5, 9, 4, 14, 6, 10, 13, 9, 12, 7, 5, 3, 1, 2, 7, 11, 1, 8, 4, 9, 5, 11, 14, 6, 3, 4,\n+            3, 1, 12, 9, 6, 1, 10, 2, 9, 5, 10, 4, 5, 1, 8,\n+            2, 11, 9, 7, 10, 14, 9, 12, 14, 6, 13, 6, 14, 6, 1, 3, 1, 10, 13, 13, 2, 2, 8, 7, 10, 9, 9, 4, 7, 13, 4, 10,\n+            3, 14, 14, 4, 3, 6, 7, 13, 13, 2, 3, 13, 5, 2,\n+            14, 11, 1, 5, 6, 14, 13, 12, 3, 9, 10, 1, 4, 1, 1, 13, 5, 8, 1, 8, 2, 7, 9, 14, 13, 2, 11, 10, 11, 5, 9, 13,\n+            13, 12, 11, 6, 1, 7, 11, 1, 11, 7, 8, 1, 13,\n+            12, 1, 5, 10, 2, 13, 4, 8, 2, 14, 8, 8, 9, 14, 12, 11, 1, 10, 6, 7, 2, 1, 12, 11, 8, 9, 10, 13, 2, 12, 3, 8,\n+            1, 13, 11, 8, 6, 4, 5, 8, 5, 12, 10, 9, 4, 7,\n+            2, 1, 11, 6, 7, 11, 5, 1, 5, 2, 7, 7, 14, 14, 3, 2, 1, 8, 5, 7, 4, 13, 13, 7, 8, 2, 14, 1, 12, 7, 8, 8, 3,\n+            9, 8, 1, 11, 10, 13, 10, 2, 1, 12, 5, 3, 3, 12, 5,\n+            7, 12, 13, 10, 14, 9, 2, 4, 12, 4, 10, 10, 2, 9, 2, 7, 5, 6, 2, 14, 10, 3, 4, 5, 8, 1, 14, 13, 1, 2, 5, 11,\n+            8, 6, 8, 3, 8, 13, 12, 8, 2, 12, 6, 2, 5, 4, 13,\n+            5, 11, 11, 5, 12, 9, 9, 9, 6, 4, 4, 11, 14, 12, 9, 3, 4, 12, 10, 10, 6, 3, 2, 12, 3, 2, 10, 8, 7, 10, 12,\n+            13, 1, 2, 7, 13, 2, 13, 4, 13, 14, 10, 14, 7, 5,\n+            11, 10, 9, 9, 1, 9, 10, 3, 9, 1, 13, 7, 9, 7, 1, 8, 14, 2, 6, 11, 2, 2, 11, 4, 10, 10, 9, 4, 4, 13, 7, 2, 1,\n+            4, 14, 6, 11, 5, 2, 5, 9, 5, 8, 4, 5, 6, 2, 12, 2,\n+            5, 2, 14, 3, 11, 5, 4, 14, 14, 2, 7, 7, 2, 3, 11, 2, 10, 9, 13, 3, 4, 2, 10, 1, 2, 10, 7, 7, 6, 8, 8, 12,\n+            14, 8, 13, 1, 9, 5, 9, 1, 14, 2, 5, 5, 5, 3, 13, 11,\n+            9, 6, 11, 1, 10, 13, 4, 7, 9, 6, 3, 4, 11, 8, 13, 3, 13, 12, 7, 7, 5, 9, 11, 3, 9, 6, 5, 6, 6, 11, 9, 2, 7,\n+            1, 12, 7, 5, 8, 11, 4, 9, 10, 11, 12, 7, 8, 1, 2,\n+            3, 14, 3, 9, 11, 9, 7, 4, 4, 4, 8, 4, 4, 2, 5, 8, 2, 11, 7, 13, 2, 14, 3, 6, 7, 14, 12, 6, 9, 11, 10, 9, 6,\n+            10, 6, 14, 4, 1, 7, 12, 4, 13, 10, 2, 2, 3, 3, 14,\n+            14, 2, 9, 12, 3, 9, 7, 6, 12, 8, 9, 5, 11, 13, 14, 14, 4, 1, 11, 14, 5, 9, 7, 14, 7, 13, 7, 14, 3, 14, 2, 8,\n+            2, 5, 10, 12, 14, 9, 11, 3, 14, 8, 12, 12, 5, 2,\n+            6, 2, 1, 14, 12, 8, 14, 1, 11, 14, 8, 9, 9, 1, 12, 13, 7, 8, 10, 5, 8, 5, 14, 13, 14, 3, 14, 2, 9, 12, 3,\n+            10, 3, 2, 4, 3, 5, 5, 10, 10, 13, 10, 7, 6, 4, 2, 10,\n+            8, 14, 2, 7, 1, 2, 7, 13, 2, 3, 6, 14, 3, 8, 12, 3, 4, 12, 6, 3, 10, 6, 14, 9, 1, 6, 3, 14, 7, 1, 7, 2, 12,\n+            9, 5, 9, 6, 13, 5, 11, 13, 11, 10, 1, 14, 9, 13, 8,\n+            12, 14, 14, 8, 13, 2, 6, 14, 2, 2, 9, 12, 9, 7, 2, 11, 4, 6, 8, 10, 12, 10, 11, 2, 9, 9, 5, 4, 3, 4, 4, 10,\n+            3, 1, 12, 13, 9, 8, 1, 9, 9, 4, 2, 7, 3, 4, 11, 11,\n+            8, 10, 14, 5, 14, 1, 10, 10, 13, 5, 6, 13, 14, 5, 7, 11, 4, 13, 3, 14, 7, 2, 10, 13, 2, 4, 14, 5, 1, 12, 3,\n+            13, 11, 2, 11, 14, 2, 5, 8, 13, 4, 13, 13, 3, 3,\n+            3, 13, 6, 11, 5, 3, 2, 13, 9, 2, 10, 8, 3, 11, 4, 6, 12, 14, 6, 2, 14, 1, 2, 6, 8, 4, 12, 8, 11, 9, 1, 7, 1,\n+            10, 4, 10, 9, 9, 3, 11, 5, 10, 8, 9, 4, 13, 4,\n+            5, 7, 12, 14, 12, 6, 1, 2, 10, 9, 10, 12, 1, 2, 6, 9, 5, 13, 4, 6, 11, 7, 1, 3, 10, 2, 1, 13, 14, 3, 5, 5,\n+            5, 7, 14, 9, 9, 3, 12, 1, 1, 1, 3, 12, 6, 9, 7, 8, 1,\n+            8, 2, 8, 13, 1, 11, 11, 1, 4, 10, 4, 3, 10, 3, 2, 2, 8, 2, 4, 13, 14, 4, 12, 14, 7, 6, 7, 13, 7, 11, 13, 12,\n+            14, 1, 14, 3, 4, 13, 12, 10, 5, 12, 12, 4, 5, 6,\n+            9, 12, 13, 3, 4, 13, 8, 14, 3, 2, 8, 5, 6, 13, 8, 7, 4, 5, 8, 14, 8, 14, 7, 5, 4, 9, 12, 12, 10, 3, 1, 12,\n+            5, 1, 11, 6, 10, 5, 14, 4, 5, 13, 8, 11, 13, 4, 9,\n+            9, 7, 6, 2, 2, 5, 12, 13, 13, 6, 11, 13, 12, 10, 6, 7, 1, 2, 6, 1, 9, 10, 14, 7, 9, 2, 2, 2, 8, 8, 11, 14,\n+            12, 9, 13, 1\n+    };\n+\n+    int[] types;\n+    int mask;\n+    long next;\n+\n+    @Setup\n+    public void initDataSet() {\n+        this.types = DATASET;\n+        if (!Pow2.isPowerOfTwo(DATASET.length)) {\n+            System.err.println(\"the DATASET length should be power of 2 sized!\");\n+            System.exit(-1);\n+        }\n+        this.mask = DATASET.length - 1;\n+        this.next = 0;\n+    }\n+\n+    @Benchmark\n+    public MqttMessageType getViaArray() {\n+        long next = this.next;\n+        int nextIndex = (int) (next & mask);\n+        MqttMessageType type = MqttMessageTypeArray.valueOf(types[nextIndex]);", "originalCommit": "e6c575b6f5ae1a550a5d894834e90969a834b1b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyODMxNA==", "url": "https://github.com/netty/netty/pull/10400#discussion_r456528314", "bodyText": "I've tried that here: #10400 (comment)\nAnd the results gotten were quite similar: on b30c74b instead you can check the \"wrong\" version of the benchmark on #10400 (comment), because not using BlackHole on each iteration can cause the for loop to get unrolled, making the getViaArray to look better then it is.\nI'm still not 100% sure if I should use #10400 (comment) or this benchmark (using the & trick) TBH...\n\nhis is going to cause a lot of contention on this.next.\n\nwdym with contention?", "author": "franz1981", "createdAt": "2020-07-17T15:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzMjU1MQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r456532551", "bodyText": "I think your approach with the blackhole.consume() in the for loop is probably the right one, in that it shows that when you iterate over multiple values (and you consume the results) then the lookup through the array is faster than looking up with the switch.\nThis approach (reading/writing the local state) might end up being an unnecessary overhead, and you'll have a lot of write traffic happening on each loop. I still don't see the benefit in trying to benchmark each lookup individually, when you can lookup in a for loop (with bh.consume) and it will give you the data that suggests array lookups are faster than switch statements.", "author": "alblue", "createdAt": "2020-07-17T15:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzNzgxMg==", "url": "https://github.com/netty/netty/pull/10400#discussion_r456537812", "bodyText": "Yep, agree, you've convinced me: trying to get numbers for the single case isn't meaningful for the purpose of the benchmark and it just create unneeded noise in the results :+1\nLet me send a new commit with very last iteration of the bench, thanks for good advices :)", "author": "franz1981", "createdAt": "2020-07-17T16:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI4MzI2Nw==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457283267", "bodyText": "@alblue if the state scope it Thread there should be no contention. The risk with writing loops into benchmarks is that either:\n\nYou'll get loop unrolling\nYou'll get OSR compilations\n\nResulting in confusing results. I have used the \"one element\" benchmark in the past with no issues. The overhead of elements load is very small and easily measurable, so I would generally go for that method rather than the loop.\nA further point for consideration is using the \"alternative\" blackhole method (a dontinline empty method), which might be appropriate given the very small operation we are examining here.\nI think there's no point to invest further in measurement here, but commenting for feedback/clarity.", "author": "nitsanw", "createdAt": "2020-07-20T11:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI5MjQ4MQ==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457292481", "bodyText": "@nitsanw\n\nYou'll get OSR compilations\n\nurgh, now I've remembered...this one was the main reason why I've switched to the single iteration method, you're right", "author": "franz1981", "createdAt": "2020-07-20T11:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNTc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "3cf7008d19344912d2c66be94f4fd825b1f659af", "chunk": "diff --git a/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java b/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\nindex ab45181e10..35f3f9385d 100644\n--- a/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\n+++ b/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\n\n@@ -16,14 +16,15 @@\n package io.netty.handler.codec.mqtt;\n \n import io.netty.microbench.util.AbstractMicrobenchmark;\n-import org.jctools.util.Pow2;\n import org.openjdk.jmh.annotations.Benchmark;\n import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n import org.openjdk.jmh.annotations.Measurement;\n import org.openjdk.jmh.annotations.Mode;\n import org.openjdk.jmh.annotations.OutputTimeUnit;\n import org.openjdk.jmh.annotations.Setup;\n import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n \n import java.util.concurrent.TimeUnit;\n \n"}}, {"oid": "3cf7008d19344912d2c66be94f4fd825b1f659af", "url": "https://github.com/netty/netty/commit/3cf7008d19344912d2c66be94f4fd825b1f659af", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-07-17T16:24:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1MDI2Mg==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457250262", "bodyText": "Nit: please make sure files end with line breaks.", "author": "chrisvest", "createdAt": "2020-07-20T10:12:56Z", "path": "microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n+\n+    private static final int[] DATASET = new int[] {\n+            9, 5, 2, 9, 8, 4, 3, 7, 7, 9, 6, 11, 10, 4, 10, 6, 12, 6, 14, 8, 2, 2, 5, 7, 13, 3, 10, 12, 6, 2, 8, 1, 6,\n+            4, 10, 8, 13, 9, 9, 2, 7, 12, 2, 3, 12, 9, 3, 12,\n+            11, 4, 10, 11, 9, 10, 5, 9, 4, 14, 6, 10, 13, 9, 12, 7, 5, 3, 1, 2, 7, 11, 1, 8, 4, 9, 5, 11, 14, 6, 3, 4,\n+            3, 1, 12, 9, 6, 1, 10, 2, 9, 5, 10, 4, 5, 1, 8,\n+            2, 11, 9, 7, 10, 14, 9, 12, 14, 6, 13, 6, 14, 6, 1, 3, 1, 10, 13, 13, 2, 2, 8, 7, 10, 9, 9, 4, 7, 13, 4, 10,\n+            3, 14, 14, 4, 3, 6, 7, 13, 13, 2, 3, 13, 5, 2,\n+            14, 11, 1, 5, 6, 14, 13, 12, 3, 9, 10, 1, 4, 1, 1, 13, 5, 8, 1, 8, 2, 7, 9, 14, 13, 2, 11, 10, 11, 5, 9, 13,\n+            13, 12, 11, 6, 1, 7, 11, 1, 11, 7, 8, 1, 13,\n+            12, 1, 5, 10, 2, 13, 4, 8, 2, 14, 8, 8, 9, 14, 12, 11, 1, 10, 6, 7, 2, 1, 12, 11, 8, 9, 10, 13, 2, 12, 3, 8,\n+            1, 13, 11, 8, 6, 4, 5, 8, 5, 12, 10, 9, 4, 7,\n+            2, 1, 11, 6, 7, 11, 5, 1, 5, 2, 7, 7, 14, 14, 3, 2, 1, 8, 5, 7, 4, 13, 13, 7, 8, 2, 14, 1, 12, 7, 8, 8, 3,\n+            9, 8, 1, 11, 10, 13, 10, 2, 1, 12, 5, 3, 3, 12, 5,\n+            7, 12, 13, 10, 14, 9, 2, 4, 12, 4, 10, 10, 2, 9, 2, 7, 5, 6, 2, 14, 10, 3, 4, 5, 8, 1, 14, 13, 1, 2, 5, 11,\n+            8, 6, 8, 3, 8, 13, 12, 8, 2, 12, 6, 2, 5, 4, 13,\n+            5, 11, 11, 5, 12, 9, 9, 9, 6, 4, 4, 11, 14, 12, 9, 3, 4, 12, 10, 10, 6, 3, 2, 12, 3, 2, 10, 8, 7, 10, 12,\n+            13, 1, 2, 7, 13, 2, 13, 4, 13, 14, 10, 14, 7, 5,\n+            11, 10, 9, 9, 1, 9, 10, 3, 9, 1, 13, 7, 9, 7, 1, 8, 14, 2, 6, 11, 2, 2, 11, 4, 10, 10, 9, 4, 4, 13, 7, 2, 1,\n+            4, 14, 6, 11, 5, 2, 5, 9, 5, 8, 4, 5, 6, 2, 12, 2,\n+            5, 2, 14, 3, 11, 5, 4, 14, 14, 2, 7, 7, 2, 3, 11, 2, 10, 9, 13, 3, 4, 2, 10, 1, 2, 10, 7, 7, 6, 8, 8, 12,\n+            14, 8, 13, 1, 9, 5, 9, 1, 14, 2, 5, 5, 5, 3, 13, 11,\n+            9, 6, 11, 1, 10, 13, 4, 7, 9, 6, 3, 4, 11, 8, 13, 3, 13, 12, 7, 7, 5, 9, 11, 3, 9, 6, 5, 6, 6, 11, 9, 2, 7,\n+            1, 12, 7, 5, 8, 11, 4, 9, 10, 11, 12, 7, 8, 1, 2,\n+            3, 14, 3, 9, 11, 9, 7, 4, 4, 4, 8, 4, 4, 2, 5, 8, 2, 11, 7, 13, 2, 14, 3, 6, 7, 14, 12, 6, 9, 11, 10, 9, 6,\n+            10, 6, 14, 4, 1, 7, 12, 4, 13, 10, 2, 2, 3, 3, 14,\n+            14, 2, 9, 12, 3, 9, 7, 6, 12, 8, 9, 5, 11, 13, 14, 14, 4, 1, 11, 14, 5, 9, 7, 14, 7, 13, 7, 14, 3, 14, 2, 8,\n+            2, 5, 10, 12, 14, 9, 11, 3, 14, 8, 12, 12, 5, 2,\n+            6, 2, 1, 14, 12, 8, 14, 1, 11, 14, 8, 9, 9, 1, 12, 13, 7, 8, 10, 5, 8, 5, 14, 13, 14, 3, 14, 2, 9, 12, 3,\n+            10, 3, 2, 4, 3, 5, 5, 10, 10, 13, 10, 7, 6, 4, 2, 10,\n+            8, 14, 2, 7, 1, 2, 7, 13, 2, 3, 6, 14, 3, 8, 12, 3, 4, 12, 6, 3, 10, 6, 14, 9, 1, 6, 3, 14, 7, 1, 7, 2, 12,\n+            9, 5, 9, 6, 13, 5, 11, 13, 11, 10, 1, 14, 9, 13, 8,\n+            12, 14, 14, 8, 13, 2, 6, 14, 2, 2, 9, 12, 9, 7, 2, 11, 4, 6, 8, 10, 12, 10, 11, 2, 9, 9, 5, 4, 3, 4, 4, 10,\n+            3, 1, 12, 13, 9, 8, 1, 9, 9, 4, 2, 7, 3, 4, 11, 11,\n+            8, 10, 14, 5, 14, 1, 10, 10, 13, 5, 6, 13, 14, 5, 7, 11, 4, 13, 3, 14, 7, 2, 10, 13, 2, 4, 14, 5, 1, 12, 3,\n+            13, 11, 2, 11, 14, 2, 5, 8, 13, 4, 13, 13, 3, 3,\n+            3, 13, 6, 11, 5, 3, 2, 13, 9, 2, 10, 8, 3, 11, 4, 6, 12, 14, 6, 2, 14, 1, 2, 6, 8, 4, 12, 8, 11, 9, 1, 7, 1,\n+            10, 4, 10, 9, 9, 3, 11, 5, 10, 8, 9, 4, 13, 4,\n+            5, 7, 12, 14, 12, 6, 1, 2, 10, 9, 10, 12, 1, 2, 6, 9, 5, 13, 4, 6, 11, 7, 1, 3, 10, 2, 1, 13, 14, 3, 5, 5,\n+            5, 7, 14, 9, 9, 3, 12, 1, 1, 1, 3, 12, 6, 9, 7, 8, 1,\n+            8, 2, 8, 13, 1, 11, 11, 1, 4, 10, 4, 3, 10, 3, 2, 2, 8, 2, 4, 13, 14, 4, 12, 14, 7, 6, 7, 13, 7, 11, 13, 12,\n+            14, 1, 14, 3, 4, 13, 12, 10, 5, 12, 12, 4, 5, 6,\n+            9, 12, 13, 3, 4, 13, 8, 14, 3, 2, 8, 5, 6, 13, 8, 7, 4, 5, 8, 14, 8, 14, 7, 5, 4, 9, 12, 12, 10, 3, 1, 12,\n+            5, 1, 11, 6, 10, 5, 14, 4, 5, 13, 8, 11, 13, 4, 9,\n+            9, 7, 6, 2, 2, 5, 12, 13, 13, 6, 11, 13, 12, 10, 6, 7, 1, 2, 6, 1, 9, 10, 14, 7, 9, 2, 2, 2, 8, 8, 11, 14,\n+            12, 9, 13, 1\n+    };\n+\n+    int[] types;\n+\n+    @Setup\n+    public void initDataSet() {\n+        this.types = DATASET;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaArray(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(MqttMessageTypeArray.valueOf(type));\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaSwitch(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(switchValueOf(type));\n+        }\n+    }\n+\n+    private static MqttMessageType switchValueOf(int type) {\n+        switch (type) {\n+        case 1:\n+            return MqttMessageType.CONNECT;\n+        case 2:\n+            return MqttMessageType.CONNACK;\n+        case 3:\n+            return MqttMessageType.PUBLISH;\n+        case 4:\n+            return MqttMessageType.PUBACK;\n+        case 5:\n+            return MqttMessageType.PUBREC;\n+        case 6:\n+            return MqttMessageType.PUBREL;\n+        case 7:\n+            return MqttMessageType.PUBCOMP;\n+        case 8:\n+            return MqttMessageType.SUBSCRIBE;\n+        case 9:\n+            return MqttMessageType.SUBACK;\n+        case 10:\n+            return MqttMessageType.UNSUBSCRIBE;\n+        case 11:\n+            return MqttMessageType.UNSUBACK;\n+        case 12:\n+            return MqttMessageType.PINGREQ;\n+        case 13:\n+            return MqttMessageType.PINGRESP;\n+        case 14:\n+            return MqttMessageType.DISCONNECT;\n+        default:\n+            throw new IllegalArgumentException(\"unknown message type: \" + type);\n+        }\n+    }\n+\n+    private static class MqttMessageTypeArray {\n+        private static final MqttMessageType[] VALUES;\n+\n+        static {\n+            // this prevent values to be assigned with the wrong order\n+            // and ensure valueOf to work fine\n+            MqttMessageType[] values = MqttMessageType.values();\n+            VALUES = new MqttMessageType[values.length + 1];\n+            for (MqttMessageType mqttMessageType : values) {\n+                int value = mqttMessageType.value();\n+                if (VALUES[value] != null) {\n+                    throw new AssertionError(\"value already in use: \" + value);\n+                }\n+                VALUES[value] = mqttMessageType;\n+            }\n+        }\n+\n+        private static MqttMessageType valueOf(int type) {\n+            if (type <= 0 || type >= VALUES.length) {\n+                throw new IllegalArgumentException(\"unknown message type: \" + type);\n+            }\n+            return VALUES[type];\n+        }\n+    }\n+}", "originalCommit": "3cf7008d19344912d2c66be94f4fd825b1f659af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI5MTQ2NA==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457291464", "bodyText": "good idea!", "author": "franz1981", "createdAt": "2020-07-20T11:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1MDI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bfa1ae16928caff6972ce09ae00dfad38f5638c5", "chunk": "diff --git a/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java b/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\nindex 35f3f9385d..5fb3fc4ebf 100644\n--- a/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\n+++ b/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\n\n@@ -82,26 +82,35 @@ public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n     };\n \n     int[] types;\n+    long next;\n+    long mask;\n \n     @Setup\n     public void initDataSet() {\n-        this.types = DATASET;\n+        types = DATASET;\n+        next = 0;\n+        mask = types.length - 1;\n+        if (Integer.bitCount(types.length) != 1) {\n+            throw new AssertionError(\"The data set should contains power of 2 items\");\n+        }\n     }\n \n     @Benchmark\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void getViaArray(Blackhole bh) {\n-        for (int type : types) {\n-            bh.consume(MqttMessageTypeArray.valueOf(type));\n-        }\n+    public MqttMessageType getViaArray() {\n+        long next = this.next;\n+        int nextIndex = (int) (next & mask);\n+        MqttMessageType type = MqttMessageType.valueOf(types[nextIndex]);\n+        this.next = next + 1;\n+        return type;\n     }\n \n     @Benchmark\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void getViaSwitch(Blackhole bh) {\n-        for (int type : types) {\n-            bh.consume(switchValueOf(type));\n-        }\n+    public MqttMessageType getViaSwitch() {\n+        long next = this.next;\n+        int nextIndex = (int) (next & mask);\n+        MqttMessageType type = switchValueOf(types[nextIndex]);\n+        this.next = next + 1;\n+        return type;\n     }\n \n     private static MqttMessageType switchValueOf(int type) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1NzEyMg==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457257122", "bodyText": "Exception messages should start capitalised. \"Unknown \u2026\"", "author": "chrisvest", "createdAt": "2020-07-20T10:23:25Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -46,12 +62,10 @@ public int value() {\n     }\n \n     public static MqttMessageType valueOf(int type) {\n-        for (MqttMessageType t : values()) {\n-            if (t.value == type) {\n-                return t;\n-            }\n+        if (type <= 0 || type >= VALUES.length) {\n+            throw new IllegalArgumentException(\"unknown message type: \" + type);", "originalCommit": "3cf7008d19344912d2c66be94f4fd825b1f659af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI5MTM3MA==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457291370", "bodyText": "I will fix this, but I've just copied the original exception here", "author": "franz1981", "createdAt": "2020-07-20T11:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1NzEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "bfa1ae16928caff6972ce09ae00dfad38f5638c5", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\nindex f073ca06c9..cadb303fac 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java\n\n@@ -63,7 +63,7 @@ public enum MqttMessageType {\n \n     public static MqttMessageType valueOf(int type) {\n         if (type <= 0 || type >= VALUES.length) {\n-            throw new IllegalArgumentException(\"unknown message type: \" + type);\n+            throw new IllegalArgumentException(\"Unknown message type: \" + type);\n         }\n         return VALUES[type];\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2MDE2Mw==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457260163", "bodyText": "Not sure we need to keep this copy around if we're decided on going with the array?", "author": "chrisvest", "createdAt": "2020-07-20T10:28:05Z", "path": "microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n+\n+    private static final int[] DATASET = new int[] {\n+            9, 5, 2, 9, 8, 4, 3, 7, 7, 9, 6, 11, 10, 4, 10, 6, 12, 6, 14, 8, 2, 2, 5, 7, 13, 3, 10, 12, 6, 2, 8, 1, 6,\n+            4, 10, 8, 13, 9, 9, 2, 7, 12, 2, 3, 12, 9, 3, 12,\n+            11, 4, 10, 11, 9, 10, 5, 9, 4, 14, 6, 10, 13, 9, 12, 7, 5, 3, 1, 2, 7, 11, 1, 8, 4, 9, 5, 11, 14, 6, 3, 4,\n+            3, 1, 12, 9, 6, 1, 10, 2, 9, 5, 10, 4, 5, 1, 8,\n+            2, 11, 9, 7, 10, 14, 9, 12, 14, 6, 13, 6, 14, 6, 1, 3, 1, 10, 13, 13, 2, 2, 8, 7, 10, 9, 9, 4, 7, 13, 4, 10,\n+            3, 14, 14, 4, 3, 6, 7, 13, 13, 2, 3, 13, 5, 2,\n+            14, 11, 1, 5, 6, 14, 13, 12, 3, 9, 10, 1, 4, 1, 1, 13, 5, 8, 1, 8, 2, 7, 9, 14, 13, 2, 11, 10, 11, 5, 9, 13,\n+            13, 12, 11, 6, 1, 7, 11, 1, 11, 7, 8, 1, 13,\n+            12, 1, 5, 10, 2, 13, 4, 8, 2, 14, 8, 8, 9, 14, 12, 11, 1, 10, 6, 7, 2, 1, 12, 11, 8, 9, 10, 13, 2, 12, 3, 8,\n+            1, 13, 11, 8, 6, 4, 5, 8, 5, 12, 10, 9, 4, 7,\n+            2, 1, 11, 6, 7, 11, 5, 1, 5, 2, 7, 7, 14, 14, 3, 2, 1, 8, 5, 7, 4, 13, 13, 7, 8, 2, 14, 1, 12, 7, 8, 8, 3,\n+            9, 8, 1, 11, 10, 13, 10, 2, 1, 12, 5, 3, 3, 12, 5,\n+            7, 12, 13, 10, 14, 9, 2, 4, 12, 4, 10, 10, 2, 9, 2, 7, 5, 6, 2, 14, 10, 3, 4, 5, 8, 1, 14, 13, 1, 2, 5, 11,\n+            8, 6, 8, 3, 8, 13, 12, 8, 2, 12, 6, 2, 5, 4, 13,\n+            5, 11, 11, 5, 12, 9, 9, 9, 6, 4, 4, 11, 14, 12, 9, 3, 4, 12, 10, 10, 6, 3, 2, 12, 3, 2, 10, 8, 7, 10, 12,\n+            13, 1, 2, 7, 13, 2, 13, 4, 13, 14, 10, 14, 7, 5,\n+            11, 10, 9, 9, 1, 9, 10, 3, 9, 1, 13, 7, 9, 7, 1, 8, 14, 2, 6, 11, 2, 2, 11, 4, 10, 10, 9, 4, 4, 13, 7, 2, 1,\n+            4, 14, 6, 11, 5, 2, 5, 9, 5, 8, 4, 5, 6, 2, 12, 2,\n+            5, 2, 14, 3, 11, 5, 4, 14, 14, 2, 7, 7, 2, 3, 11, 2, 10, 9, 13, 3, 4, 2, 10, 1, 2, 10, 7, 7, 6, 8, 8, 12,\n+            14, 8, 13, 1, 9, 5, 9, 1, 14, 2, 5, 5, 5, 3, 13, 11,\n+            9, 6, 11, 1, 10, 13, 4, 7, 9, 6, 3, 4, 11, 8, 13, 3, 13, 12, 7, 7, 5, 9, 11, 3, 9, 6, 5, 6, 6, 11, 9, 2, 7,\n+            1, 12, 7, 5, 8, 11, 4, 9, 10, 11, 12, 7, 8, 1, 2,\n+            3, 14, 3, 9, 11, 9, 7, 4, 4, 4, 8, 4, 4, 2, 5, 8, 2, 11, 7, 13, 2, 14, 3, 6, 7, 14, 12, 6, 9, 11, 10, 9, 6,\n+            10, 6, 14, 4, 1, 7, 12, 4, 13, 10, 2, 2, 3, 3, 14,\n+            14, 2, 9, 12, 3, 9, 7, 6, 12, 8, 9, 5, 11, 13, 14, 14, 4, 1, 11, 14, 5, 9, 7, 14, 7, 13, 7, 14, 3, 14, 2, 8,\n+            2, 5, 10, 12, 14, 9, 11, 3, 14, 8, 12, 12, 5, 2,\n+            6, 2, 1, 14, 12, 8, 14, 1, 11, 14, 8, 9, 9, 1, 12, 13, 7, 8, 10, 5, 8, 5, 14, 13, 14, 3, 14, 2, 9, 12, 3,\n+            10, 3, 2, 4, 3, 5, 5, 10, 10, 13, 10, 7, 6, 4, 2, 10,\n+            8, 14, 2, 7, 1, 2, 7, 13, 2, 3, 6, 14, 3, 8, 12, 3, 4, 12, 6, 3, 10, 6, 14, 9, 1, 6, 3, 14, 7, 1, 7, 2, 12,\n+            9, 5, 9, 6, 13, 5, 11, 13, 11, 10, 1, 14, 9, 13, 8,\n+            12, 14, 14, 8, 13, 2, 6, 14, 2, 2, 9, 12, 9, 7, 2, 11, 4, 6, 8, 10, 12, 10, 11, 2, 9, 9, 5, 4, 3, 4, 4, 10,\n+            3, 1, 12, 13, 9, 8, 1, 9, 9, 4, 2, 7, 3, 4, 11, 11,\n+            8, 10, 14, 5, 14, 1, 10, 10, 13, 5, 6, 13, 14, 5, 7, 11, 4, 13, 3, 14, 7, 2, 10, 13, 2, 4, 14, 5, 1, 12, 3,\n+            13, 11, 2, 11, 14, 2, 5, 8, 13, 4, 13, 13, 3, 3,\n+            3, 13, 6, 11, 5, 3, 2, 13, 9, 2, 10, 8, 3, 11, 4, 6, 12, 14, 6, 2, 14, 1, 2, 6, 8, 4, 12, 8, 11, 9, 1, 7, 1,\n+            10, 4, 10, 9, 9, 3, 11, 5, 10, 8, 9, 4, 13, 4,\n+            5, 7, 12, 14, 12, 6, 1, 2, 10, 9, 10, 12, 1, 2, 6, 9, 5, 13, 4, 6, 11, 7, 1, 3, 10, 2, 1, 13, 14, 3, 5, 5,\n+            5, 7, 14, 9, 9, 3, 12, 1, 1, 1, 3, 12, 6, 9, 7, 8, 1,\n+            8, 2, 8, 13, 1, 11, 11, 1, 4, 10, 4, 3, 10, 3, 2, 2, 8, 2, 4, 13, 14, 4, 12, 14, 7, 6, 7, 13, 7, 11, 13, 12,\n+            14, 1, 14, 3, 4, 13, 12, 10, 5, 12, 12, 4, 5, 6,\n+            9, 12, 13, 3, 4, 13, 8, 14, 3, 2, 8, 5, 6, 13, 8, 7, 4, 5, 8, 14, 8, 14, 7, 5, 4, 9, 12, 12, 10, 3, 1, 12,\n+            5, 1, 11, 6, 10, 5, 14, 4, 5, 13, 8, 11, 13, 4, 9,\n+            9, 7, 6, 2, 2, 5, 12, 13, 13, 6, 11, 13, 12, 10, 6, 7, 1, 2, 6, 1, 9, 10, 14, 7, 9, 2, 2, 2, 8, 8, 11, 14,\n+            12, 9, 13, 1\n+    };\n+\n+    int[] types;\n+\n+    @Setup\n+    public void initDataSet() {\n+        this.types = DATASET;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaArray(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(MqttMessageTypeArray.valueOf(type));\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaSwitch(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(switchValueOf(type));\n+        }\n+    }\n+\n+    private static MqttMessageType switchValueOf(int type) {\n+        switch (type) {\n+        case 1:\n+            return MqttMessageType.CONNECT;\n+        case 2:\n+            return MqttMessageType.CONNACK;\n+        case 3:\n+            return MqttMessageType.PUBLISH;\n+        case 4:\n+            return MqttMessageType.PUBACK;\n+        case 5:\n+            return MqttMessageType.PUBREC;\n+        case 6:\n+            return MqttMessageType.PUBREL;\n+        case 7:\n+            return MqttMessageType.PUBCOMP;\n+        case 8:\n+            return MqttMessageType.SUBSCRIBE;\n+        case 9:\n+            return MqttMessageType.SUBACK;\n+        case 10:\n+            return MqttMessageType.UNSUBSCRIBE;\n+        case 11:\n+            return MqttMessageType.UNSUBACK;\n+        case 12:\n+            return MqttMessageType.PINGREQ;\n+        case 13:\n+            return MqttMessageType.PINGRESP;\n+        case 14:\n+            return MqttMessageType.DISCONNECT;\n+        default:\n+            throw new IllegalArgumentException(\"unknown message type: \" + type);\n+        }\n+    }\n+\n+    private static class MqttMessageTypeArray {\n+        private static final MqttMessageType[] VALUES;", "originalCommit": "3cf7008d19344912d2c66be94f4fd825b1f659af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI5MTE5Mw==", "url": "https://github.com/netty/netty/pull/10400#discussion_r457291193", "bodyText": "we won't indeed, good point!", "author": "franz1981", "createdAt": "2020-07-20T11:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2MDE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bfa1ae16928caff6972ce09ae00dfad38f5638c5", "chunk": "diff --git a/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java b/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\nindex 35f3f9385d..5fb3fc4ebf 100644\n--- a/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\n+++ b/microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java\n\n@@ -82,26 +82,35 @@ public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n     };\n \n     int[] types;\n+    long next;\n+    long mask;\n \n     @Setup\n     public void initDataSet() {\n-        this.types = DATASET;\n+        types = DATASET;\n+        next = 0;\n+        mask = types.length - 1;\n+        if (Integer.bitCount(types.length) != 1) {\n+            throw new AssertionError(\"The data set should contains power of 2 items\");\n+        }\n     }\n \n     @Benchmark\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void getViaArray(Blackhole bh) {\n-        for (int type : types) {\n-            bh.consume(MqttMessageTypeArray.valueOf(type));\n-        }\n+    public MqttMessageType getViaArray() {\n+        long next = this.next;\n+        int nextIndex = (int) (next & mask);\n+        MqttMessageType type = MqttMessageType.valueOf(types[nextIndex]);\n+        this.next = next + 1;\n+        return type;\n     }\n \n     @Benchmark\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void getViaSwitch(Blackhole bh) {\n-        for (int type : types) {\n-            bh.consume(switchValueOf(type));\n-        }\n+    public MqttMessageType getViaSwitch() {\n+        long next = this.next;\n+        int nextIndex = (int) (next & mask);\n+        MqttMessageType type = switchValueOf(types[nextIndex]);\n+        this.next = next + 1;\n+        return type;\n     }\n \n     private static MqttMessageType switchValueOf(int type) {\n"}}, {"oid": "bfa1ae16928caff6972ce09ae00dfad38f5638c5", "url": "https://github.com/netty/netty/commit/bfa1ae16928caff6972ce09ae00dfad38f5638c5", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-08-27T08:24:24Z", "type": "forcePushed"}, {"oid": "c2c7bfa4cdf42329166d053a1814a97f3fe064fc", "url": "https://github.com/netty/netty/commit/c2c7bfa4cdf42329166d053a1814a97f3fe064fc", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-08-27T08:26:56Z", "type": "forcePushed"}, {"oid": "964654f9f878af0c1b4e458c74e4a78ea8cde663", "url": "https://github.com/netty/netty/commit/964654f9f878af0c1b4e458c74e4a78ea8cde663", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-08-27T08:28:37Z", "type": "forcePushed"}, {"oid": "ea6e1cce6cbb7033af8fe83ffcf3e4aafc44e380", "url": "https://github.com/netty/netty/commit/ea6e1cce6cbb7033af8fe83ffcf3e4aafc44e380", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-08-27T11:49:04Z", "type": "forcePushed"}, {"oid": "6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "url": "https://github.com/netty/netty/commit/6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-08-28T08:54:55Z", "type": "commit"}, {"oid": "6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "url": "https://github.com/netty/netty/commit/6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost", "committedDate": "2020-08-28T08:54:55Z", "type": "forcePushed"}]}