{"pr_number": 10648, "pr_title": "Avoid integer overflow in ByteBuf.ensureWritable", "pr_createdAt": "2020-10-06T20:19:19Z", "pr_url": "https://github.com/netty/netty/pull/10648", "timeline": [{"oid": "05ed2cfb5fd181943431f905fc41d12110af5715", "url": "https://github.com/netty/netty/commit/05ed2cfb5fd181943431f905fc41d12110af5715", "message": "Avoid integer overflow in ByteBuf.ensureWritable\n\nMotivation:\n\n- To make ensureWritable throw IOOBE when maxCapacity is exceeded, even if\nthe requested new capacity would overflow Integer.MAX_VALUE\n\nModification:\n\n- AbstractByteBuf.ensureWritable0 is modified to detect when\ntargetCapacity has wrapped around\n- Test added for correct behaviour in AbstractByteBufTest\n\nResult:\n\n- Calls to ensureWritable will always throw IOOBE when maxCapacity is\nexceeded (and bounds checking is enabled)", "committedDate": "2020-10-07T12:07:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NjY5Mg==", "url": "https://github.com/netty/netty/pull/10648#discussion_r501046692", "bodyText": "Since this could be on hot code paths I'm curious whether using & instead of && here would make any noticeable difference performance-wise", "author": "njhill", "createdAt": "2020-10-07T14:13:23Z", "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "diffHunk": "@@ -286,11 +286,11 @@ public ByteBuf ensureWritable(int minWritableBytes) {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n-        if (targetCapacity <= capacity()) {\n+        if (targetCapacity >= 0 && targetCapacity <= capacity()) {", "originalCommit": "05ed2cfb5fd181943431f905fc41d12110af5715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MTAyOA==", "url": "https://github.com/netty/netty/pull/10648#discussion_r501061028", "bodyText": "I'm not very familiar with optimisation at this level, but I don't think it'd hurt. We'd be evaluating the second condition in almost every case anyway.", "author": "mkavanagh", "createdAt": "2020-10-07T14:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NjY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8751a7b4bbd154a7da5ffa280de425e0b3059c6c", "chunk": "diff --git a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java\nindex 4fcb8c475c..9c608c8d27 100644\n--- a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java\n+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java\n\n@@ -286,7 +286,7 @@ public abstract class AbstractByteBuf extends ByteBuf {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n-        if (targetCapacity >= 0 && targetCapacity <= capacity()) {\n+        if (targetCapacity >= 0 & targetCapacity <= capacity()) {\n             ensureAccessible();\n             return;\n         }\n"}}, {"oid": "8751a7b4bbd154a7da5ffa280de425e0b3059c6c", "url": "https://github.com/netty/netty/commit/8751a7b4bbd154a7da5ffa280de425e0b3059c6c", "message": "Avoid integer overflow in ByteBuf.ensureWritable\n\nMotivation:\n\n- To make ensureWritable throw IOOBE when maxCapacity is exceeded, even if\nthe requested new capacity would overflow Integer.MAX_VALUE\n\nModification:\n\n- AbstractByteBuf.ensureWritable0 is modified to detect when\ntargetCapacity has wrapped around\n- Test added for correct behaviour in AbstractByteBufTest\n\nResult:\n\n- Calls to ensureWritable will always throw IOOBE when maxCapacity is\nexceeded (and bounds checking is enabled)", "committedDate": "2020-10-07T14:36:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwNTc2MA==", "url": "https://github.com/netty/netty/pull/10648#discussion_r502305760", "bodyText": "Buffer release should be in a finally clause.", "author": "chrisvest", "createdAt": "2020-10-09T09:30:06Z", "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "diffHunk": "@@ -4924,4 +4924,18 @@ public void testMaxFastWritableBytes() {\n         assertEquals(50, buffer.maxFastWritableBytes());\n         buffer.release();\n     }\n+\n+    @Test\n+    public void testEnsureWritableIntegerOverflow() {\n+        ByteBuf buffer = newBuffer(CAPACITY);\n+        buffer.writerIndex(buffer.readerIndex());\n+        buffer.writeByte(1);\n+        try {\n+            buffer.ensureWritable(Integer.MAX_VALUE);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+            buffer.release();", "originalCommit": "8751a7b4bbd154a7da5ffa280de425e0b3059c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "952bbd7a974fda539407f3dbcb143b18af75602a", "chunk": "diff --git a/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java\nindex 58d429c597..c386ff8a3a 100644\n--- a/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java\n+++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java\n\n@@ -4935,6 +4935,7 @@ public abstract class AbstractByteBufTest {\n             fail();\n         } catch (IndexOutOfBoundsException e) {\n             // expected\n+        } finally {\n             buffer.release();\n         }\n     }\n"}}, {"oid": "952bbd7a974fda539407f3dbcb143b18af75602a", "url": "https://github.com/netty/netty/commit/952bbd7a974fda539407f3dbcb143b18af75602a", "message": "Avoid integer overflow in ByteBuf.ensureWritable\n\nMotivation:\n\n- To make ensureWritable throw IOOBE when maxCapacity is exceeded, even if\nthe requested new capacity would overflow Integer.MAX_VALUE\n\nModification:\n\n- AbstractByteBuf.ensureWritable0 is modified to detect when\ntargetCapacity has wrapped around\n- Test added for correct behaviour in AbstractByteBufTest\n\nResult:\n\n- Calls to ensureWritable will always throw IOOBE when maxCapacity is\nexceeded (and bounds checking is enabled)", "committedDate": "2020-10-09T10:20:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NTcxOQ==", "url": "https://github.com/netty/netty/pull/10648#discussion_r502755719", "bodyText": "Can we please add a comment that & is really what we want here and not && ? This will make it easier in the future to not get confused by this.", "author": "normanmaurer", "createdAt": "2020-10-10T06:51:29Z", "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "diffHunk": "@@ -286,11 +286,11 @@ public ByteBuf ensureWritable(int minWritableBytes) {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n-        if (targetCapacity <= capacity()) {\n+        if (targetCapacity >= 0 & targetCapacity <= capacity()) {", "originalCommit": "952bbd7a974fda539407f3dbcb143b18af75602a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4ODI0OQ==", "url": "https://github.com/netty/netty/pull/10648#discussion_r502788249", "bodyText": "added a comment with rationale", "author": "mkavanagh", "createdAt": "2020-10-10T12:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NTcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b48b92bdc6b6d3ca201a55aca826ecce5a95c5ff", "chunk": "diff --git a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java\nindex 9c608c8d27..f747368301 100644\n--- a/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java\n+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java\n\n@@ -286,6 +286,7 @@ public abstract class AbstractByteBuf extends ByteBuf {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n+        // using non-short-circuit & to reduce branching - this is a hot path and targetCapacity should rarely overflow\n         if (targetCapacity >= 0 & targetCapacity <= capacity()) {\n             ensureAccessible();\n             return;\n"}}, {"oid": "b48b92bdc6b6d3ca201a55aca826ecce5a95c5ff", "url": "https://github.com/netty/netty/commit/b48b92bdc6b6d3ca201a55aca826ecce5a95c5ff", "message": "Avoid integer overflow in ByteBuf.ensureWritable\n\nMotivation:\n\n- To make ensureWritable throw IOOBE when maxCapacity is exceeded, even if\nthe requested new capacity would overflow Integer.MAX_VALUE\n\nModification:\n\n- AbstractByteBuf.ensureWritable0 is modified to detect when\ntargetCapacity has wrapped around\n- Test added for correct behaviour in AbstractByteBufTest\n\nResult:\n\n- Calls to ensureWritable will always throw IOOBE when maxCapacity is\nexceeded (and bounds checking is enabled)", "committedDate": "2020-10-10T09:19:25Z", "type": "commit"}, {"oid": "b48b92bdc6b6d3ca201a55aca826ecce5a95c5ff", "url": "https://github.com/netty/netty/commit/b48b92bdc6b6d3ca201a55aca826ecce5a95c5ff", "message": "Avoid integer overflow in ByteBuf.ensureWritable\n\nMotivation:\n\n- To make ensureWritable throw IOOBE when maxCapacity is exceeded, even if\nthe requested new capacity would overflow Integer.MAX_VALUE\n\nModification:\n\n- AbstractByteBuf.ensureWritable0 is modified to detect when\ntargetCapacity has wrapped around\n- Test added for correct behaviour in AbstractByteBufTest\n\nResult:\n\n- Calls to ensureWritable will always throw IOOBE when maxCapacity is\nexceeded (and bounds checking is enabled)", "committedDate": "2020-10-10T09:19:25Z", "type": "forcePushed"}]}