{"pr_number": 10560, "pr_title": "Fix DeleteOnExitHook cause memory leak", "pr_createdAt": "2020-09-10T04:05:49Z", "pr_url": "https://github.com/netty/netty/pull/10560", "timeline": [{"oid": "df34318c99eff2671f8cc75e2e6af4b0eaa68ee2", "url": "https://github.com/netty/netty/commit/df34318c99eff2671f8cc75e2e6af4b0eaa68ee2", "message": "Fix https://github.com/netty/netty/issues/10434", "committedDate": "2020-08-07T06:23:27Z", "type": "commit"}, {"oid": "f5d9498561c084f68e993a9f633d63b5e83a3afc", "url": "https://github.com/netty/netty/commit/f5d9498561c084f68e993a9f633d63b5e83a3afc", "message": "Fix https://github.com/netty/netty/issues/10434", "committedDate": "2020-08-07T06:29:41Z", "type": "commit"}, {"oid": "96619d74d5604ec4080dd0b242e93310d643ff3b", "url": "https://github.com/netty/netty/commit/96619d74d5604ec4080dd0b242e93310d643ff3b", "message": "Fix https://github.com/netty/netty/issues/10351", "committedDate": "2020-09-10T03:20:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3OTEyNA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486179124", "bodyText": "Use Collections.newSetFromMap(new ConcurrentHashMap<String,Boolean>()) instead. Then we can remove the synchronised in the add and remove methods bellow.", "author": "chrisvest", "createdAt": "2020-09-10T08:59:43Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Extend {@link java.io.DeleteOnExitHook} to dynamically manipulate hook records.\n+ */\n+public final class DeleteFileOnExitHook {\n+    private static Set<String> files = new HashSet<String>();", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNTk4MA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486235980", "bodyText": "Good idea.", "author": "wuxiansen", "createdAt": "2020-09-10T10:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3OTEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 45b93ebe88..82626a1885 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3OTg5Nw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486179897", "bodyText": "I'm not able to make sense of this comment. We don't actually extend that class.", "author": "chrisvest", "createdAt": "2020-09-10T09:00:52Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Extend {@link java.io.DeleteOnExitHook} to dynamically manipulate hook records.", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNjAxOA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486236018", "bodyText": "You right.", "author": "wuxiansen", "createdAt": "2020-09-10T10:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3OTg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 45b93ebe88..82626a1885 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4MDAxMA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486180010", "bodyText": "Does this class really need to be public?", "author": "chrisvest", "createdAt": "2020-09-10T09:01:03Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Extend {@link java.io.DeleteOnExitHook} to dynamically manipulate hook records.\n+ */\n+public final class DeleteFileOnExitHook {", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNjA1NQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486236055", "bodyText": "At first I thought maybe it would be used elsewhere.", "author": "wuxiansen", "createdAt": "2020-09-10T10:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MDcwNA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486280704", "bodyText": "please declare it package-private", "author": "normanmaurer", "createdAt": "2020-09-10T12:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5MDk4OQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486290989", "bodyText": "OK.", "author": "wuxiansen", "createdAt": "2020-09-10T12:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4MDAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 45b93ebe88..82626a1885 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4NTkwOA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486185908", "bodyText": "I don't think there's any exception that can happen here?", "author": "chrisvest", "createdAt": "2020-09-10T09:10:19Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Extend {@link java.io.DeleteOnExitHook} to dynamically manipulate hook records.\n+ */\n+public final class DeleteFileOnExitHook {\n+    private static Set<String> files = new HashSet<String>();\n+    static final InternalLogger logger = InternalLoggerFactory.getInstance(DeleteFileOnExitHook.class);\n+\n+    private DeleteFileOnExitHook() {\n+    }\n+\n+    static {\n+        // DeleteOnExitHook must be the last shutdown hook to be invoked.\n+        // Application shutdown hooks may add the first file to the\n+        // delete on exit list and cause the DeleteOnExitHook to be\n+        // registered during shutdown in progress.\n+        Runtime.getRuntime().addShutdownHook(new Thread() {\n+\n+            @Override\n+            public void run() {\n+                runHooks();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Remove from the pool to reduce space footprint.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static synchronized void remove(String file) {\n+        try {\n+            if (files != null) {\n+                files.remove(file);\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"The cleanup file path failed.\", e);\n+        }", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNjE2Mg==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486236162", "bodyText": "Maybe it is redundant\uff0cIf an unknown problem occurs with add and remove, I just want to make sure that it will not affect the normal process.\nOr am I thinking a little too much?", "author": "wuxiansen", "createdAt": "2020-09-10T10:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4NTkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NTI0Mw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486265243", "bodyText": "Yeah, they're just methods on Set. They can only throw Errors or RuntimeExceptions, and I think we should just let those bubble out if they ever happen.", "author": "chrisvest", "createdAt": "2020-09-10T11:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4NTkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTE2OQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486281169", "bodyText": "I agree with @chrisvest here..", "author": "normanmaurer", "createdAt": "2020-09-10T12:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4NTkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjYxNA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486286614", "bodyText": "Okay, I've adjusted it.", "author": "wuxiansen", "createdAt": "2020-09-10T12:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4NTkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 45b93ebe88..82626a1885 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4Njk1MQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486186951", "bodyText": "With a Set based on ConcurrentHashMap, we can just iterate it directly. Since we are at JVM shut down at this point, I don't think we need to clear the set.", "author": "chrisvest", "createdAt": "2020-09-10T09:11:58Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Extend {@link java.io.DeleteOnExitHook} to dynamically manipulate hook records.\n+ */\n+public final class DeleteFileOnExitHook {\n+    private static Set<String> files = new HashSet<String>();\n+    static final InternalLogger logger = InternalLoggerFactory.getInstance(DeleteFileOnExitHook.class);\n+\n+    private DeleteFileOnExitHook() {\n+    }\n+\n+    static {\n+        // DeleteOnExitHook must be the last shutdown hook to be invoked.\n+        // Application shutdown hooks may add the first file to the\n+        // delete on exit list and cause the DeleteOnExitHook to be\n+        // registered during shutdown in progress.\n+        Runtime.getRuntime().addShutdownHook(new Thread() {\n+\n+            @Override\n+            public void run() {\n+                runHooks();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Remove from the pool to reduce space footprint.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static synchronized void remove(String file) {\n+        try {\n+            if (files != null) {\n+                files.remove(file);\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"The cleanup file path failed.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Add to the hook and clean up when the program exits.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static synchronized void add(String file) {\n+        if (files == null) {\n+            files = new HashSet<String>();\n+        }\n+\n+        files.add(file);\n+    }\n+\n+    static void runHooks() {\n+        Set<String> toBeDeleted;\n+\n+        synchronized (DeleteFileOnExitHook.class) {\n+            toBeDeleted = files;\n+            files = null;\n+        }\n+\n+        if (!toBeDeleted.isEmpty()) {\n+            for (String filename : toBeDeleted) {\n+                (new File(filename)).delete();\n+            }\n+        }", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIzNjMwNQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486236305", "bodyText": "Ok", "author": "wuxiansen", "createdAt": "2020-09-10T10:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4Njk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 45b93ebe88..82626a1885 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4NzcwMw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486187703", "bodyText": "Remove comment.", "author": "chrisvest", "createdAt": "2020-09-10T09:13:09Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+\n+    @Test\n+    public void customBaseDirAndDeleteOnHookExit() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        final String dir = \"target/DeleteFileOnExitHookTest/customBaseDirAndDeleteOnHookExit\";\n+        File baseDir = new File(dir);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(dir);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final Attribute attr = defaultHttpDataFactory.createAttribute(req1, \"attribute1\");\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                req1, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+        //DeleteFileOnExitHook.add(new File(dir, fu.getFilename()).getAbsolutePath());", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4ODIxMA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486188210", "bodyText": "Easier to do the casts at variable declaration site.", "author": "chrisvest", "createdAt": "2020-09-10T09:13:59Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+\n+    @Test\n+    public void customBaseDirAndDeleteOnHookExit() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        final String dir = \"target/DeleteFileOnExitHookTest/customBaseDirAndDeleteOnHookExit\";\n+        File baseDir = new File(dir);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(dir);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final Attribute attr = defaultHttpDataFactory.createAttribute(req1, \"attribute1\");\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                req1, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+        //DeleteFileOnExitHook.add(new File(dir, fu.getFilename()).getAbsolutePath());\n+\n+        assertEquals(dir, DiskAttribute.class.cast(attr).getBaseDirectory());\n+        assertEquals(dir, DiskFileUpload.class.cast(fu).getBaseDirectory());\n+        assertTrue(DiskAttribute.class.cast(attr).deleteOnExit());\n+        assertTrue(DiskFileUpload.class.cast(fu).deleteOnExit());", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4OTQxOA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486189418", "bodyText": "What behaviour are we trying to verify?", "author": "chrisvest", "createdAt": "2020-09-10T09:15:51Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+\n+    @Test\n+    public void customBaseDirAndDeleteOnHookExit() throws IOException {", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NzUxOA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486247518", "bodyText": "Okay, I got it.", "author": "wuxiansen", "createdAt": "2020-09-10T10:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4OTQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5MDczMg==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486190732", "bodyText": "Remove comment.", "author": "chrisvest", "createdAt": "2020-09-10T09:18:00Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+\n+    @Test\n+    public void customBaseDirAndDeleteOnHookExit() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        final String dir = \"target/DeleteFileOnExitHookTest/customBaseDirAndDeleteOnHookExit\";\n+        File baseDir = new File(dir);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(dir);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final Attribute attr = defaultHttpDataFactory.createAttribute(req1, \"attribute1\");\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                req1, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+        //DeleteFileOnExitHook.add(new File(dir, fu.getFilename()).getAbsolutePath());\n+\n+        assertEquals(dir, DiskAttribute.class.cast(attr).getBaseDirectory());\n+        assertEquals(dir, DiskFileUpload.class.cast(fu).getBaseDirectory());\n+        assertTrue(DiskAttribute.class.cast(attr).deleteOnExit());\n+        assertTrue(DiskFileUpload.class.cast(fu).deleteOnExit());\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+        //fu.delete();", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5MjYwNA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486192604", "bodyText": "Why is the length zero when we set 4 bytes of content?", "author": "chrisvest", "createdAt": "2020-09-10T09:21:01Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+\n+    @Test\n+    public void customBaseDirAndDeleteOnHookExit() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        final String dir = \"target/DeleteFileOnExitHookTest/customBaseDirAndDeleteOnHookExit\";\n+        File baseDir = new File(dir);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(dir);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final Attribute attr = defaultHttpDataFactory.createAttribute(req1, \"attribute1\");\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                req1, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+        //DeleteFileOnExitHook.add(new File(dir, fu.getFilename()).getAbsolutePath());\n+\n+        assertEquals(dir, DiskAttribute.class.cast(attr).getBaseDirectory());\n+        assertEquals(dir, DiskFileUpload.class.cast(fu).getBaseDirectory());\n+        assertTrue(DiskAttribute.class.cast(attr).deleteOnExit());\n+        assertTrue(DiskFileUpload.class.cast(fu).deleteOnExit());\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+        //fu.delete();\n+\n+        assertEquals(0, fu.getFile().length());", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NTgzNQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486245835", "bodyText": "Throw an exception to test whether the hook will execute properly at the end of the program.", "author": "wuxiansen", "createdAt": "2020-09-10T10:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5MjYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5MzMyNg==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486193326", "bodyText": "Remove comment. Also, we should verify that the file no longer exists, and that it's pathname is no longer in the set of files to delete on shut down.", "author": "chrisvest", "createdAt": "2020-09-10T09:22:12Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+\n+    @Test\n+    public void customBaseDirAndDeleteOnHookExit() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        final String dir = \"target/DeleteFileOnExitHookTest/customBaseDirAndDeleteOnHookExit\";\n+        File baseDir = new File(dir);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(dir);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final Attribute attr = defaultHttpDataFactory.createAttribute(req1, \"attribute1\");\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                req1, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+        //DeleteFileOnExitHook.add(new File(dir, fu.getFilename()).getAbsolutePath());\n+\n+        assertEquals(dir, DiskAttribute.class.cast(attr).getBaseDirectory());\n+        assertEquals(dir, DiskFileUpload.class.cast(fu).getBaseDirectory());\n+        assertTrue(DiskAttribute.class.cast(attr).deleteOnExit());\n+        assertTrue(DiskFileUpload.class.cast(fu).deleteOnExit());\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+        //fu.delete();\n+\n+        assertEquals(0, fu.getFile().length());\n+        fu.delete();\n+        //fu.release();", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NDQ0Nw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486194447", "bodyText": "We should also have a test that verifies that the registered files are deleted by the shut down hook.", "author": "chrisvest", "createdAt": "2020-09-10T09:23:59Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+\n+    @Test\n+    public void customBaseDirAndDeleteOnHookExit() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        final String dir = \"target/DeleteFileOnExitHookTest/customBaseDirAndDeleteOnHookExit\";\n+        File baseDir = new File(dir);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(dir);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final Attribute attr = defaultHttpDataFactory.createAttribute(req1, \"attribute1\");\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                req1, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+        //DeleteFileOnExitHook.add(new File(dir, fu.getFilename()).getAbsolutePath());\n+\n+        assertEquals(dir, DiskAttribute.class.cast(attr).getBaseDirectory());\n+        assertEquals(dir, DiskFileUpload.class.cast(fu).getBaseDirectory());\n+        assertTrue(DiskAttribute.class.cast(attr).deleteOnExit());\n+        assertTrue(DiskFileUpload.class.cast(fu).deleteOnExit());\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+        //fu.delete();\n+\n+        assertEquals(0, fu.getFile().length());\n+        fu.delete();\n+        //fu.release();\n+    }", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2Nzc4Mw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486267783", "bodyText": "Ok", "author": "wuxiansen", "createdAt": "2020-09-10T11:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NDQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MDU3Nw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486280577", "bodyText": "nit: 2020", "author": "normanmaurer", "createdAt": "2020-09-10T12:01:18Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2012 The Netty Project", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMTkzOQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486311939", "bodyText": "ok", "author": "wuxiansen", "createdAt": "2020-09-10T12:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MDU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 45b93ebe88..82626a1885 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTQyNg==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486281426", "bodyText": "2020", "author": "normanmaurer", "createdAt": "2020-09-10T12:02:55Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2017 The Netty Project", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "015eba3348d2f89b84793a03d25bd9cab6894791", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 8a0b67936f..4bce2c51c5 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTg3Nw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486281877", "bodyText": "This change doesn't seem to be related to this pr ... please revert", "author": "normanmaurer", "createdAt": "2020-09-10T12:03:51Z", "path": "transport/src/main/java/io/netty/channel/oio/AbstractOioByteChannel.java", "diffHunk": "@@ -93,7 +93,10 @@ private void handleReadException(ChannelPipeline pipeline, ByteBuf byteBuf, Thro\n         allocHandle.readComplete();\n         pipeline.fireChannelReadComplete();\n         pipeline.fireExceptionCaught(cause);\n-        if (close || cause instanceof IOException) {\n+\n+        // If oom will close the read event, release connection.\n+        // See https://github.com/netty/netty/issues/10434\n+        if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMDgxMg==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486310812", "bodyText": "Ok", "author": "wuxiansen", "createdAt": "2020-09-10T12:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e6a4a30daa899645b6e981b7bad46c649b320ffc", "chunk": "diff --git a/transport/src/main/java/io/netty/channel/oio/AbstractOioByteChannel.java b/transport/src/main/java/io/netty/channel/oio/AbstractOioByteChannel.java\nindex 87c24b7dce..54ea0deadd 100644\n--- a/transport/src/main/java/io/netty/channel/oio/AbstractOioByteChannel.java\n+++ b/transport/src/main/java/io/netty/channel/oio/AbstractOioByteChannel.java\n\n@@ -93,10 +93,7 @@ public abstract class AbstractOioByteChannel extends AbstractOioChannel {\n         allocHandle.readComplete();\n         pipeline.fireChannelReadComplete();\n         pipeline.fireExceptionCaught(cause);\n-\n-        // If oom will close the read event, release connection.\n-        // See https://github.com/netty/netty/issues/10434\n-        if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {\n+        if (close || cause instanceof IOException) {\n             closeOnRead(pipeline);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTg5Nw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486281897", "bodyText": "This change doesn't seem to be related to this pr ... please revert", "author": "normanmaurer", "createdAt": "2020-09-10T12:03:55Z", "path": "transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java", "diffHunk": "@@ -123,7 +123,10 @@ private void handleReadException(ChannelPipeline pipeline, ByteBuf byteBuf, Thro\n             allocHandle.readComplete();\n             pipeline.fireChannelReadComplete();\n             pipeline.fireExceptionCaught(cause);\n-            if (close || cause instanceof IOException) {\n+\n+            // If oom will close the read event, release connection.\n+            // See https://github.com/netty/netty/issues/10434\n+            if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMDc2NQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486310765", "bodyText": "Ok", "author": "wuxiansen", "createdAt": "2020-09-10T12:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "99035cd2434d4ef50712de26042816123f67eb5c", "chunk": "diff --git a/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java\nindex d0b6acd880..db87b100b0 100644\n--- a/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java\n+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java\n\n@@ -123,10 +123,7 @@ public abstract class AbstractNioByteChannel extends AbstractNioChannel {\n             allocHandle.readComplete();\n             pipeline.fireChannelReadComplete();\n             pipeline.fireExceptionCaught(cause);\n-\n-            // If oom will close the read event, release connection.\n-            // See https://github.com/netty/netty/issues/10434\n-            if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {\n+            if (close || cause instanceof IOException) {\n                 closeOnRead(pipeline);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTkyOQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486281929", "bodyText": "This change doesn't seem to be related to this pr ... please revert", "author": "normanmaurer", "createdAt": "2020-09-10T12:03:59Z", "path": "transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueStreamChannel.java", "diffHunk": "@@ -587,7 +587,10 @@ private void handleReadException(ChannelPipeline pipeline, ByteBuf byteBuf, Thro\n                 allocHandle.readComplete();\n                 pipeline.fireChannelReadComplete();\n                 pipeline.fireExceptionCaught(cause);\n-                if (close || cause instanceof IOException) {\n+\n+                // If oom will close the read event, release connection.\n+                // See https://github.com/netty/netty/issues/10434\n+                if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMDc1MQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486310751", "bodyText": "Ok", "author": "wuxiansen", "createdAt": "2020-09-10T12:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "99035cd2434d4ef50712de26042816123f67eb5c", "chunk": "diff --git a/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueStreamChannel.java b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueStreamChannel.java\nindex a412d6ac82..4b7f4e06e5 100644\n--- a/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueStreamChannel.java\n+++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueStreamChannel.java\n\n@@ -587,10 +587,7 @@ public abstract class AbstractKQueueStreamChannel extends AbstractKQueueChannel\n                 allocHandle.readComplete();\n                 pipeline.fireChannelReadComplete();\n                 pipeline.fireExceptionCaught(cause);\n-\n-                // If oom will close the read event, release connection.\n-                // See https://github.com/netty/netty/issues/10434\n-                if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {\n+                if (close || cause instanceof IOException) {\n                     shutdownInput(false);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTk1Nw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486281957", "bodyText": "This change doesn't seem to be related to this pr ... please revert", "author": "normanmaurer", "createdAt": "2020-09-10T12:04:02Z", "path": "transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java", "diffHunk": "@@ -726,7 +726,10 @@ private void handleReadException(ChannelPipeline pipeline, ByteBuf byteBuf, Thro\n             allocHandle.readComplete();\n             pipeline.fireChannelReadComplete();\n             pipeline.fireExceptionCaught(cause);\n-            if (close || cause instanceof IOException) {\n+\n+            // If oom will close the read event, release connection.\n+            // See https://github.com/netty/netty/issues/10434\n+            if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {", "originalCommit": "96619d74d5604ec4080dd0b242e93310d643ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxMDcyMQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486310721", "bodyText": "Ok", "author": "wuxiansen", "createdAt": "2020-09-10T12:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "99035cd2434d4ef50712de26042816123f67eb5c", "chunk": "diff --git a/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java\nindex 8a5b79d493..95e31b380f 100644\n--- a/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java\n+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java\n\n@@ -726,10 +726,7 @@ public abstract class AbstractEpollStreamChannel extends AbstractEpollChannel im\n             allocHandle.readComplete();\n             pipeline.fireChannelReadComplete();\n             pipeline.fireExceptionCaught(cause);\n-\n-            // If oom will close the read event, release connection.\n-            // See https://github.com/netty/netty/issues/10434\n-            if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {\n+            if (close || cause instanceof IOException) {\n                 shutdownInput(false);\n             }\n         }\n"}}, {"oid": "99035cd2434d4ef50712de26042816123f67eb5c", "url": "https://github.com/netty/netty/commit/99035cd2434d4ef50712de26042816123f67eb5c", "message": "revert", "committedDate": "2020-09-10T12:28:01Z", "type": "commit"}, {"oid": "015eba3348d2f89b84793a03d25bd9cab6894791", "url": "https://github.com/netty/netty/commit/015eba3348d2f89b84793a03d25bd9cab6894791", "message": "Optimized code.", "committedDate": "2020-09-10T12:41:09Z", "type": "commit"}, {"oid": "e6a4a30daa899645b6e981b7bad46c649b320ffc", "url": "https://github.com/netty/netty/commit/e6a4a30daa899645b6e981b7bad46c649b320ffc", "message": "revert", "committedDate": "2020-09-10T12:55:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NTY4NA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486395684", "bodyText": "nit remove empty line", "author": "normanmaurer", "createdAt": "2020-09-10T14:36:35Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * DeleteFileOnExitHook.\n+ */\n+final class DeleteFileOnExitHook {\n+    private final static Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n+\n+    private DeleteFileOnExitHook() {\n+    }\n+\n+    static {\n+        // DeleteOnExitHook must be the last shutdown hook to be invoked.\n+        // Application shutdown hooks may add the first file to the\n+        // delete on exit list and cause the DeleteOnExitHook to be\n+        // registered during shutdown in progress.\n+        Runtime.getRuntime().addShutdownHook(new Thread() {\n+\n+            @Override\n+            public void run() {\n+                runHooks();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Remove from the pool to reduce space footprint.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static void remove(String file) {\n+        FILES.remove(file);\n+    }\n+\n+    /**\n+     * Add to the hook and clean up when the program exits.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static void add(String file) {\n+        FILES.add(file);\n+    }\n+\n+    /**\n+     * check in records.\n+     *\n+     * @param file target file\n+     * @return true or false\n+     */\n+    public static boolean checkFileExist(String file) {\n+        return FILES.contains(file);\n+    }\n+\n+", "originalCommit": "e6a4a30daa899645b6e981b7bad46c649b320ffc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "929465d49b3818d900893dbc6749501065eb9282", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 82626a1885..cc0a5b3e2f 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -24,7 +24,7 @@ import java.util.concurrent.ConcurrentHashMap;\n  * DeleteFileOnExitHook.\n  */\n final class DeleteFileOnExitHook {\n-    private final static Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n+    private static final Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n \n     private DeleteFileOnExitHook() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NTk5OA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486395998", "bodyText": "remove outer ()", "author": "normanmaurer", "createdAt": "2020-09-10T14:36:59Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * DeleteFileOnExitHook.\n+ */\n+final class DeleteFileOnExitHook {\n+    private final static Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n+\n+    private DeleteFileOnExitHook() {\n+    }\n+\n+    static {\n+        // DeleteOnExitHook must be the last shutdown hook to be invoked.\n+        // Application shutdown hooks may add the first file to the\n+        // delete on exit list and cause the DeleteOnExitHook to be\n+        // registered during shutdown in progress.\n+        Runtime.getRuntime().addShutdownHook(new Thread() {\n+\n+            @Override\n+            public void run() {\n+                runHooks();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Remove from the pool to reduce space footprint.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static void remove(String file) {\n+        FILES.remove(file);\n+    }\n+\n+    /**\n+     * Add to the hook and clean up when the program exits.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static void add(String file) {\n+        FILES.add(file);\n+    }\n+\n+    /**\n+     * check in records.\n+     *\n+     * @param file target file\n+     * @return true or false\n+     */\n+    public static boolean checkFileExist(String file) {\n+        return FILES.contains(file);\n+    }\n+\n+\n+    static void runHooks() {\n+        for (String filename : FILES) {\n+            (new File(filename)).delete();", "originalCommit": "e6a4a30daa899645b6e981b7bad46c649b320ffc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "929465d49b3818d900893dbc6749501065eb9282", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 82626a1885..cc0a5b3e2f 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -24,7 +24,7 @@ import java.util.concurrent.ConcurrentHashMap;\n  * DeleteFileOnExitHook.\n  */\n final class DeleteFileOnExitHook {\n-    private final static Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n+    private static final Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n \n     private DeleteFileOnExitHook() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NjExMA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486396110", "bodyText": "private ?", "author": "normanmaurer", "createdAt": "2020-09-10T14:37:08Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+    final String dir = \"target/DeleteFileOnExitHookTest/tmp\";", "originalCommit": "e6a4a30daa899645b6e981b7bad46c649b320ffc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "929465d49b3818d900893dbc6749501065eb9282", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 4bce2c51c5..5e0e23793e 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -32,19 +32,19 @@ import static org.junit.Assert.*;\n  * Test DeleteFileOnExitHook\n  */\n public class DeleteFileOnExitHookTest {\n-    private static final HttpRequest req1 = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n-    final String dir = \"target/DeleteFileOnExitHookTest/tmp\";\n+    private static final HttpRequest REQUEST = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+    private static final String HOOK_TEST_TMP = \"target/DeleteFileOnExitHookTest/tmp\";\n \n     @Test\n     public void testTriggerDeleteFileOnExitHook() throws IOException {\n         final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n-        File baseDir = new File(dir);\n+        File baseDir = new File(HOOK_TEST_TMP);\n         baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n \n-        defaultHttpDataFactory.setBaseDir(dir);\n+        defaultHttpDataFactory.setBaseDir(HOOK_TEST_TMP);\n         defaultHttpDataFactory.setDeleteOnExit(true);\n         final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n-                req1, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+                REQUEST, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n \n         fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n         assertTrue(fu.getFile().exists());\n"}}, {"oid": "929465d49b3818d900893dbc6749501065eb9282", "url": "https://github.com/netty/netty/commit/929465d49b3818d900893dbc6749501065eb9282", "message": "Optimized code.", "committedDate": "2020-09-11T01:56:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjUwMQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486866501", "bodyText": "Nit: make sure files end with a line-break.", "author": "chrisvest", "createdAt": "2020-09-11T08:44:14Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * DeleteFileOnExitHook.\n+ */\n+final class DeleteFileOnExitHook {\n+    private static final Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n+\n+    private DeleteFileOnExitHook() {\n+    }\n+\n+    static {\n+        // DeleteOnExitHook must be the last shutdown hook to be invoked.\n+        // Application shutdown hooks may add the first file to the\n+        // delete on exit list and cause the DeleteOnExitHook to be\n+        // registered during shutdown in progress.\n+        Runtime.getRuntime().addShutdownHook(new Thread() {\n+\n+            @Override\n+            public void run() {\n+                runHooks();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Remove from the pool to reduce space footprint.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static void remove(String file) {\n+        FILES.remove(file);\n+    }\n+\n+    /**\n+     * Add to the hook and clean up when the program exits.\n+     *\n+     * @param file tmp file path\n+     */\n+    public static void add(String file) {\n+        FILES.add(file);\n+    }\n+\n+    /**\n+     * Check in the hook files.\n+     *\n+     * @param file target file\n+     * @return true or false\n+     */\n+    public static boolean checkFileExist(String file) {\n+        return FILES.contains(file);\n+    }\n+\n+    /**\n+     * Clean up all the files.\n+     */\n+    private static void runHooks() {\n+        for (String filename : FILES) {\n+            new File(filename).delete();\n+        }\n+    }\n+}", "originalCommit": "929465d49b3818d900893dbc6749501065eb9282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTI3OA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486965278", "bodyText": "Done.", "author": "wuxiansen", "createdAt": "2020-09-11T10:47:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "29250260368c44e52e8d15c35090a3750b9bcaed", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex cc0a5b3e2f..86e8f83460 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -74,9 +74,9 @@ final class DeleteFileOnExitHook {\n     /**\n      * Clean up all the files.\n      */\n-    private static void runHooks() {\n+    static void runHooks() {\n         for (String filename : FILES) {\n             new File(filename).delete();\n         }\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NzUxOQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486867519", "bodyText": "Nit: another line break, please.", "author": "chrisvest", "createdAt": "2020-09-11T08:45:58Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest REQUEST = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+    private static final String HOOK_TEST_TMP = \"target/DeleteFileOnExitHookTest/tmp\";\n+\n+    @Test\n+    public void testTriggerDeleteFileOnExitHook() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        File baseDir = new File(HOOK_TEST_TMP);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(HOOK_TEST_TMP);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                REQUEST, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+    }\n+\n+    @Test\n+    public void testDeleteFileOnExitHookExecutionSuccessful() {\n+        File[] files = new File(HOOK_TEST_TMP).listFiles(new FilenameFilter() {\n+            @Override\n+            public boolean accept(File dir, String name) {\n+                return name.startsWith(DiskFileUpload.prefix);\n+            }\n+        });\n+\n+        assertEquals(0, files.length);\n+    }\n+\n+    @Test\n+    public void testAfterHttpDataReleaseCheckFileExist() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        File baseDir = new File(HOOK_TEST_TMP);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(HOOK_TEST_TMP);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                REQUEST, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+\n+        String filePath = fu.getFile().getPath();\n+        assertTrue(DeleteFileOnExitHook.checkFileExist(filePath));\n+\n+        fu.release();\n+        assertFalse(DeleteFileOnExitHook.checkFileExist(filePath));\n+    }\n+}", "originalCommit": "929465d49b3818d900893dbc6749501065eb9282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29250260368c44e52e8d15c35090a3750b9bcaed", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 5e0e23793e..51416bd316 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -18,6 +18,7 @@ package io.netty.handler.codec.http.multipart;\n import io.netty.buffer.Unpooled;\n import io.netty.handler.codec.http.DefaultHttpRequest;\n import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Before;\n import org.junit.Test;\n \n import java.io.File;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2ODczMA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486868730", "bodyText": "Tests don't run in any particular order, so this test also needs to do the work to ensure that some file uploads are created. It can then call runHooks directly (since it has package visibility) to simulate the shutdown.", "author": "chrisvest", "createdAt": "2020-09-11T08:48:12Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest REQUEST = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+    private static final String HOOK_TEST_TMP = \"target/DeleteFileOnExitHookTest/tmp\";\n+\n+    @Test\n+    public void testTriggerDeleteFileOnExitHook() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        File baseDir = new File(HOOK_TEST_TMP);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(HOOK_TEST_TMP);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                REQUEST, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+    }\n+\n+    @Test\n+    public void testDeleteFileOnExitHookExecutionSuccessful() {\n+        File[] files = new File(HOOK_TEST_TMP).listFiles(new FilenameFilter() {\n+            @Override\n+            public boolean accept(File dir, String name) {\n+                return name.startsWith(DiskFileUpload.prefix);\n+            }\n+        });\n+\n+        assertEquals(0, files.length);", "originalCommit": "929465d49b3818d900893dbc6749501065eb9282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29250260368c44e52e8d15c35090a3750b9bcaed", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 5e0e23793e..51416bd316 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -18,6 +18,7 @@ package io.netty.handler.codec.http.multipart;\n import io.netty.buffer.Unpooled;\n import io.netty.handler.codec.http.DefaultHttpRequest;\n import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Before;\n import org.junit.Test;\n \n import java.io.File;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2OTc0NQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486869745", "bodyText": "This set-up work could be extracted to a test helper method.", "author": "chrisvest", "createdAt": "2020-09-11T08:49:59Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest REQUEST = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+    private static final String HOOK_TEST_TMP = \"target/DeleteFileOnExitHookTest/tmp\";\n+\n+    @Test\n+    public void testTriggerDeleteFileOnExitHook() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        File baseDir = new File(HOOK_TEST_TMP);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(HOOK_TEST_TMP);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                REQUEST, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);\n+\n+        fu.setContent(Unpooled.wrappedBuffer(new byte[]{1, 2, 3, 4}));\n+        assertTrue(fu.getFile().exists());\n+    }\n+\n+    @Test\n+    public void testDeleteFileOnExitHookExecutionSuccessful() {\n+        File[] files = new File(HOOK_TEST_TMP).listFiles(new FilenameFilter() {\n+            @Override\n+            public boolean accept(File dir, String name) {\n+                return name.startsWith(DiskFileUpload.prefix);\n+            }\n+        });\n+\n+        assertEquals(0, files.length);\n+    }\n+\n+    @Test\n+    public void testAfterHttpDataReleaseCheckFileExist() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        File baseDir = new File(HOOK_TEST_TMP);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(HOOK_TEST_TMP);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(\n+                REQUEST, \"attribute1\", \"tmp_f.txt\", \"text/plain\", null, null, 0);", "originalCommit": "929465d49b3818d900893dbc6749501065eb9282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29250260368c44e52e8d15c35090a3750b9bcaed", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 5e0e23793e..51416bd316 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -18,6 +18,7 @@ package io.netty.handler.codec.http.multipart;\n import io.netty.buffer.Unpooled;\n import io.netty.handler.codec.http.DefaultHttpRequest;\n import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Before;\n import org.junit.Test;\n \n import java.io.File;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2OTkzMA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r486869930", "bodyText": "This variable doesn't need to be final.", "author": "chrisvest", "createdAt": "2020-09-11T08:50:18Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+\n+import static io.netty.handler.codec.http.HttpMethod.POST;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test DeleteFileOnExitHook\n+ */\n+public class DeleteFileOnExitHookTest {\n+    private static final HttpRequest REQUEST = new DefaultHttpRequest(HTTP_1_1, POST, \"/form\");\n+    private static final String HOOK_TEST_TMP = \"target/DeleteFileOnExitHookTest/tmp\";\n+\n+    @Test\n+    public void testTriggerDeleteFileOnExitHook() throws IOException {\n+        final DefaultHttpDataFactory defaultHttpDataFactory = new DefaultHttpDataFactory(true);\n+        File baseDir = new File(HOOK_TEST_TMP);\n+        baseDir.mkdirs();  // we don't need to clean it since it is in volatile files anyway\n+\n+        defaultHttpDataFactory.setBaseDir(HOOK_TEST_TMP);\n+        defaultHttpDataFactory.setDeleteOnExit(true);\n+        final FileUpload fu = defaultHttpDataFactory.createFileUpload(", "originalCommit": "929465d49b3818d900893dbc6749501065eb9282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29250260368c44e52e8d15c35090a3750b9bcaed", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\nindex 5e0e23793e..51416bd316 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHookTest.java\n\n@@ -18,6 +18,7 @@ package io.netty.handler.codec.http.multipart;\n import io.netty.buffer.Unpooled;\n import io.netty.handler.codec.http.DefaultHttpRequest;\n import io.netty.handler.codec.http.HttpRequest;\n+import org.junit.Before;\n import org.junit.Test;\n \n import java.io.File;\n"}}, {"oid": "29250260368c44e52e8d15c35090a3750b9bcaed", "url": "https://github.com/netty/netty/commit/29250260368c44e52e8d15c35090a3750b9bcaed", "message": "Optimized code.", "committedDate": "2020-09-11T10:46:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNDY5OA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487024698", "bodyText": "Try catch ignore exception?", "author": "johnou", "createdAt": "2020-09-11T12:54:00Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -71,10 +71,12 @@ public static boolean checkFileExist(String file) {\n         return FILES.contains(file);\n     }\n \n-\n-    static void runHooks() {\n+    /**\n+     * Clean up all the files.\n+     */\n+    private static void runHooks() {\n         for (String filename : FILES) {\n-            (new File(filename)).delete();\n+            new File(filename).delete();", "originalCommit": "929465d49b3818d900893dbc6749501065eb9282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzODg2Nw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487038867", "bodyText": "If the file does not exist, return false .", "author": "wuxiansen", "createdAt": "2020-09-11T13:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNDY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1ODEyNA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487058124", "bodyText": "security manager still might throw an exception or NPE if null was passed as path.", "author": "johnou", "createdAt": "2020-09-11T13:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNDY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2ODYyOA==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487068628", "bodyText": "ConcurrentHashMap key not be null.  so avoided this problem", "author": "wuxiansen", "createdAt": "2020-09-11T14:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNDY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8bd693b8bfa21ee932d6f382c68749d72e5069d6", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex cc0a5b3e2f..0253e6578e 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -74,9 +74,9 @@ final class DeleteFileOnExitHook {\n     /**\n      * Clean up all the files.\n      */\n-    private static void runHooks() {\n+    static void runHook() {\n         for (String filename : FILES) {\n             new File(filename).delete();\n         }\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTA1OQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487025059", "bodyText": "run deletion hook?", "author": "johnou", "createdAt": "2020-09-11T12:54:33Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * DeleteFileOnExitHook.\n+ */\n+final class DeleteFileOnExitHook {\n+    private static final Set<String> FILES = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n+\n+    private DeleteFileOnExitHook() {\n+    }\n+\n+    static {\n+        // DeleteOnExitHook must be the last shutdown hook to be invoked.\n+        // Application shutdown hooks may add the first file to the\n+        // delete on exit list and cause the DeleteOnExitHook to be\n+        // registered during shutdown in progress.\n+        Runtime.getRuntime().addShutdownHook(new Thread() {\n+\n+            @Override\n+            public void run() {\n+                runHooks();", "originalCommit": "29250260368c44e52e8d15c35090a3750b9bcaed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MzAxNw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487043017", "bodyText": "\ud83d\ude35\uff0c  Change runHooks method name?", "author": "wuxiansen", "createdAt": "2020-09-11T13:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1ODY1Mw==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487058653", "bodyText": "right, eg. runDeletionHook, plural hooks doesn't make sense because it is only one hook.", "author": "johnou", "createdAt": "2020-09-11T13:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMDQ1Ng==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487600456", "bodyText": "Good advice ! \ud83d\ude0a   I removed the plural because we will use the class name when using DeleteFileOnExitHook.runHook ,  So it looks pretty clear \uff01What do you think \uff1f", "author": "wuxiansen", "createdAt": "2020-09-14T00:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NDQ0MQ==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487794441", "bodyText": "did you forgot to push ?", "author": "normanmaurer", "createdAt": "2020-09-14T10:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDA5Mg==", "url": "https://github.com/netty/netty/pull/10560#discussion_r487800092", "bodyText": "did you forgot to push ?\n\n\u2299\ufe4f\u2299\u2016\u2223\nDone.", "author": "wuxiansen", "createdAt": "2020-09-14T10:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bd693b8bfa21ee932d6f382c68749d72e5069d6", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\nindex 86e8f83460..0253e6578e 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DeleteFileOnExitHook.java\n\n@@ -38,7 +38,7 @@ final class DeleteFileOnExitHook {\n \n             @Override\n             public void run() {\n-                runHooks();\n+                runHook();\n             }\n         });\n     }\n"}}, {"oid": "8bd693b8bfa21ee932d6f382c68749d72e5069d6", "url": "https://github.com/netty/netty/commit/8bd693b8bfa21ee932d6f382c68749d72e5069d6", "message": "Optimized code.", "committedDate": "2020-09-14T10:06:26Z", "type": "commit"}]}