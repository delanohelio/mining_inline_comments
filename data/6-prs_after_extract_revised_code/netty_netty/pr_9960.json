{"pr_number": 9960, "pr_title": "Reduce allocations in ChunkedWriteHandler when processing the queued \u2026", "pr_createdAt": "2020-01-21T16:13:03Z", "pr_url": "https://github.com/netty/netty/pull/9960", "timeline": [{"oid": "97a5839fb07f42f7ba001135e70f34cb87cb4449", "url": "https://github.com/netty/netty/commit/97a5839fb07f42f7ba001135e70f34cb87cb4449", "message": "Reduce allocations in ChunkedWriteHandler when processing the queued chunks\n\nMotivation:\n\nAt the moment we create a new ChannelFutureListener per chunk when trying to write these to the underlying transport. This can be optimized by replacing the seperate write and flush call with writeAndFlush and only allocate the listener if the future is not complete yet.\n\nModifications:\n\n- Replace seperate write and flush calls with writeAndFlush\n- Only create listener if needed, otherwise execute directly\n\nResult:\n\nLess allocations", "committedDate": "2020-01-21T16:08:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzQ1Ng==", "url": "https://github.com/netty/netty/pull/9960#discussion_r369107456", "bodyText": "\u2764\ufe0f", "author": "franz1981", "createdAt": "2020-01-21T16:30:17Z", "path": "handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java", "diffHunk": "@@ -261,61 +261,39 @@ private void doFlush(final ChannelHandlerContext ctx) {\n                     message = Unpooled.EMPTY_BUFFER;\n                 }\n \n-                ChannelFuture f = ctx.write(message);\n+                // Flush each chunk to conserve memory\n+                ChannelFuture f = ctx.writeAndFlush(message);\n                 if (endOfInput) {\n                     queue.remove();\n \n-                    // Register a listener which will close the input once the write is complete.\n-                    // This is needed because the Chunk may have some resource bound that can not\n-                    // be closed before its not written.\n-                    //\n-                    // See https://github.com/netty/netty/issues/303\n-                    f.addListener(new ChannelFutureListener() {\n-                        @Override\n-                        public void operationComplete(ChannelFuture future) throws Exception {\n-                            if (!future.isSuccess()) {\n-                                closeInput(chunks);\n-                                currentWrite.fail(future.cause());\n-                            } else {\n-                                // read state of the input in local variables before closing it\n-                                long inputProgress = chunks.progress();\n-                                long inputLength = chunks.length();\n-                                closeInput(chunks);\n-                                currentWrite.progress(inputProgress, inputLength);\n-                                currentWrite.success(inputLength);\n-                            }\n-                        }\n-                    });\n-                } else if (channel.isWritable()) {\n-                    f.addListener(new ChannelFutureListener() {\n-                        @Override\n-                        public void operationComplete(ChannelFuture future) throws Exception {\n-                            if (!future.isSuccess()) {\n-                                closeInput(chunks);\n-                                currentWrite.fail(future.cause());\n-                            } else {\n-                                currentWrite.progress(chunks.progress(), chunks.length());\n+                    if (f.isDone()) {", "originalCommit": "97a5839fb07f42f7ba001135e70f34cb87cb4449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "233a36866a671da36976e922c07863193a23c80a", "url": "https://github.com/netty/netty/commit/233a36866a671da36976e922c07863193a23c80a", "message": "make static", "committedDate": "2020-01-21T16:31:21Z", "type": "commit"}]}