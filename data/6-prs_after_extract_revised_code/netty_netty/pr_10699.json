{"pr_number": 10699, "pr_title": "Replace deprecated Assert.assertThat(...) with MatcherAssert.assertTh\u2026", "pr_createdAt": "2020-10-16T09:41:11Z", "pr_url": "https://github.com/netty/netty/pull/10699", "timeline": [{"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "url": "https://github.com/netty/netty/commit/434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "message": "Replace deprecated Assert.assertThat(...) with MatcherAssert.assertThat(...)\n\nMotivation:\n\njunit deprecated Assert.assertThat(...)\n\nModifications:\n\nUse MatcherAssert.assertThat(...) as replacement for deprecated method\n\nResult:\n\nLess deprecation warnings", "committedDate": "2020-10-16T09:39:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MjEzMQ==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506252131", "bodyText": "What's our preference on star-imports? I thought we were avoiding them everywhere. If so, we could \"organise import\" on the files already touched by this PR.", "author": "chrisvest", "createdAt": "2020-10-16T10:05:52Z", "path": "buffer/src/test/java/io/netty/buffer/ByteBufDerivationTest.java", "diffHunk": "@@ -21,8 +21,8 @@\n import java.nio.ByteOrder;\n import java.util.Random;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.*;\n-import static org.junit.Assert.*;", "originalCommit": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MTMxOA==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506281318", "bodyText": "I actually would like to remove these but I would do this in a followup pr", "author": "normanmaurer", "createdAt": "2020-10-16T10:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MjEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxMzkyNQ==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506313925", "bodyText": "Works for me \ud83d\udc4d", "author": "chrisvest", "createdAt": "2020-10-16T11:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MjEzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzAzNA==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506253034", "bodyText": "Static import?", "author": "chrisvest", "createdAt": "2020-10-16T10:07:19Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketCloseStatusTest.java", "diffHunk": "@@ -64,12 +65,12 @@ public void testKnownStatuses() {\n \n     @Test\n     public void testNaturalOrder() {\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(NORMAL_CLOSURE));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(valueOf(1001)));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(PROTOCOL_ERROR));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(valueOf(1002)));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(INVALID_MESSAGE_TYPE));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(valueOf(1007)));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(NORMAL_CLOSURE));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(valueOf(1001)));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(PROTOCOL_ERROR));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(valueOf(1002)));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(INVALID_MESSAGE_TYPE));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(valueOf(1007)));", "originalCommit": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e3583f569ecd77270f804b0982c5cc0dc47de33", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketCloseStatusTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketCloseStatusTest.java\nindex 2704596632..2b743d9469 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketCloseStatusTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketCloseStatusTest.java\n\n@@ -44,33 +47,33 @@ public class WebSocketCloseStatusTest {\n \n     @Test\n     public void testToString() {\n-        Assert.assertEquals(\"1000 Bye\", NORMAL_CLOSURE.toString());\n+        assertEquals(\"1000 Bye\", NORMAL_CLOSURE.toString());\n     }\n \n     @Test\n     public void testKnownStatuses() {\n-        Assert.assertSame(NORMAL_CLOSURE, valueOf(1000));\n-        Assert.assertSame(ENDPOINT_UNAVAILABLE, valueOf(1001));\n-        Assert.assertSame(PROTOCOL_ERROR, valueOf(1002));\n-        Assert.assertSame(INVALID_MESSAGE_TYPE, valueOf(1003));\n-        Assert.assertSame(INVALID_PAYLOAD_DATA, valueOf(1007));\n-        Assert.assertSame(POLICY_VIOLATION, valueOf(1008));\n-        Assert.assertSame(MESSAGE_TOO_BIG, valueOf(1009));\n-        Assert.assertSame(MANDATORY_EXTENSION, valueOf(1010));\n-        Assert.assertSame(INTERNAL_SERVER_ERROR, valueOf(1011));\n-        Assert.assertSame(SERVICE_RESTART, valueOf(1012));\n-        Assert.assertSame(TRY_AGAIN_LATER, valueOf(1013));\n-        Assert.assertSame(BAD_GATEWAY, valueOf(1014));\n+        assertSame(NORMAL_CLOSURE, valueOf(1000));\n+        assertSame(ENDPOINT_UNAVAILABLE, valueOf(1001));\n+        assertSame(PROTOCOL_ERROR, valueOf(1002));\n+        assertSame(INVALID_MESSAGE_TYPE, valueOf(1003));\n+        assertSame(INVALID_PAYLOAD_DATA, valueOf(1007));\n+        assertSame(POLICY_VIOLATION, valueOf(1008));\n+        assertSame(MESSAGE_TOO_BIG, valueOf(1009));\n+        assertSame(MANDATORY_EXTENSION, valueOf(1010));\n+        assertSame(INTERNAL_SERVER_ERROR, valueOf(1011));\n+        assertSame(SERVICE_RESTART, valueOf(1012));\n+        assertSame(TRY_AGAIN_LATER, valueOf(1013));\n+        assertSame(BAD_GATEWAY, valueOf(1014));\n     }\n \n     @Test\n     public void testNaturalOrder() {\n-        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(NORMAL_CLOSURE));\n-        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(valueOf(1001)));\n-        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(PROTOCOL_ERROR));\n-        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(valueOf(1002)));\n-        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(INVALID_MESSAGE_TYPE));\n-        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(valueOf(1007)));\n+        assertThat(PROTOCOL_ERROR, Matchers.greaterThan(NORMAL_CLOSURE));\n+        assertThat(PROTOCOL_ERROR, Matchers.greaterThan(valueOf(1001)));\n+        assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(PROTOCOL_ERROR));\n+        assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(valueOf(1002)));\n+        assertThat(PROTOCOL_ERROR, Matchers.lessThan(INVALID_MESSAGE_TYPE));\n+        assertThat(PROTOCOL_ERROR, Matchers.lessThan(valueOf(1007)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzE5MQ==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506253191", "bodyText": "Static import?", "author": "chrisvest", "createdAt": "2020-10-16T10:07:32Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java", "diffHunk": "@@ -103,7 +104,7 @@ private static void testCloseReason0(ChannelHandler... handlers) {\n             // expected\n         }\n         ReferenceCounted closeMessage = ch.readOutbound();\n-        Assert.assertThat(closeMessage, CoreMatchers.instanceOf(ByteBuf.class));\n+        MatcherAssert.assertThat(closeMessage, CoreMatchers.instanceOf(ByteBuf.class));", "originalCommit": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e3583f569ecd77270f804b0982c5cc0dc47de33", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java\nindex e39ca4e72a..177d4c2009 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java\n\n@@ -99,14 +102,14 @@ public class WebSocketServerHandshaker13Test extends WebSocketServerHandshakerTe\n         ByteBuf buffer = ch.readOutbound();\n         try {\n             ch.writeInbound(buffer);\n-            Assert.fail();\n+            fail();\n         } catch (CorruptedWebSocketFrameException expected) {\n             // expected\n         }\n         ReferenceCounted closeMessage = ch.readOutbound();\n-        MatcherAssert.assertThat(closeMessage, CoreMatchers.instanceOf(ByteBuf.class));\n+        assertThat(closeMessage, CoreMatchers.instanceOf(ByteBuf.class));\n         closeMessage.release();\n-        Assert.assertFalse(ch.finish());\n+        assertFalse(ch.finish());\n     }\n \n     private static void testUpgrade0(EmbeddedChannel ch, WebSocketServerHandshaker13 handshaker) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NzI1Mw==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506257253", "bodyText": "Static import?", "author": "chrisvest", "createdAt": "2020-10-16T10:14:15Z", "path": "resolver-dns-native-macos/src/test/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProviderTest.java", "diffHunk": "@@ -45,7 +46,7 @@ public void testStream() {\n \n     @Test\n     public void testDefaultUseCorrectInstance() {\n-        Assert.assertThat(DnsServerAddressStreamProviders.platformDefault(),\n+        MatcherAssert.assertThat(DnsServerAddressStreamProviders.platformDefault(),", "originalCommit": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e3583f569ecd77270f804b0982c5cc0dc47de33", "chunk": "diff --git a/resolver-dns-native-macos/src/test/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProviderTest.java b/resolver-dns-native-macos/src/test/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProviderTest.java\nindex 4a22078d5a..a336bcd586 100644\n--- a/resolver-dns-native-macos/src/test/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProviderTest.java\n+++ b/resolver-dns-native-macos/src/test/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProviderTest.java\n\n@@ -36,18 +38,18 @@ public class MacOSDnsServerAddressStreamProviderTest {\n     public void testStream() {\n         DnsServerAddressStreamProvider provider = new MacOSDnsServerAddressStreamProvider();\n         DnsServerAddressStream stream = provider.nameServerAddressStream(\"netty.io\");\n-        Assert.assertNotNull(stream);\n-        Assert.assertNotEquals(0, stream.size());\n+        assertNotNull(stream);\n+        assertNotEquals(0, stream.size());\n \n         for (int i = 0; i < stream.size(); i++) {\n-            Assert.assertNotEquals(0, stream.next().getPort());\n+            assertNotEquals(0, stream.next().getPort());\n         }\n     }\n \n     @Test\n     public void testDefaultUseCorrectInstance() {\n-        MatcherAssert.assertThat(DnsServerAddressStreamProviders.platformDefault(),\n-                Matchers.instanceOf(MacOSDnsServerAddressStreamProvider.class));\n+        assertThat(DnsServerAddressStreamProviders.platformDefault(),\n+                instanceOf(MacOSDnsServerAddressStreamProvider.class));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NzM5OQ==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506257399", "bodyText": "Static imports?", "author": "chrisvest", "createdAt": "2020-10-16T10:14:26Z", "path": "resolver-dns/src/test/java/io/netty/resolver/dns/DnsAddressResolverGroupTest.java", "diffHunk": "@@ -48,7 +49,8 @@ public void testUseConfiguredEventLoop() throws InterruptedException {\n                 @Override\n                 public void operationComplete(Future<Object> future) {\n                     try {\n-                        Assert.assertThat(future.cause(), Matchers.instanceOf(UnsupportedAddressTypeException.class));\n+                        MatcherAssert.assertThat(future.cause(),\n+                                Matchers.instanceOf(UnsupportedAddressTypeException.class));", "originalCommit": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e3583f569ecd77270f804b0982c5cc0dc47de33", "chunk": "diff --git a/resolver-dns/src/test/java/io/netty/resolver/dns/DnsAddressResolverGroupTest.java b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsAddressResolverGroupTest.java\nindex 1ff6c19009..0db68e6476 100644\n--- a/resolver-dns/src/test/java/io/netty/resolver/dns/DnsAddressResolverGroupTest.java\n+++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsAddressResolverGroupTest.java\n\n@@ -49,9 +50,9 @@ public class DnsAddressResolverGroupTest {\n                 @Override\n                 public void operationComplete(Future<Object> future) {\n                     try {\n-                        MatcherAssert.assertThat(future.cause(),\n-                                Matchers.instanceOf(UnsupportedAddressTypeException.class));\n-                        Assert.assertTrue(loop.inEventLoop());\n+                        assertThat(future.cause(),\n+                                instanceOf(UnsupportedAddressTypeException.class));\n+                        assertTrue(loop.inEventLoop());\n                         promise.setSuccess(null);\n                     } catch (Throwable cause) {\n                         promise.setFailure(cause);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NzYwNg==", "url": "https://github.com/netty/netty/pull/10699#discussion_r506257606", "bodyText": "Static import?", "author": "chrisvest", "createdAt": "2020-10-16T10:14:47Z", "path": "transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java", "diffHunk": "@@ -222,7 +223,7 @@ public void run() {\n             group.shutdownNow();\n             t.join();\n             group.terminationFuture().syncUninterruptibly();\n-            assertThat(error.get(), IsInstanceOf.instanceOf(RejectedExecutionException.class));\n+            assertThat(error.get(), Matchers.instanceOf(RejectedExecutionException.class));", "originalCommit": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e3583f569ecd77270f804b0982c5cc0dc47de33", "chunk": "diff --git a/transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java b/transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java\nindex c1ac22d950..c99d1808c2 100644\n--- a/transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java\n+++ b/transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java\n\n@@ -223,7 +223,7 @@ public class NioEventLoopTest extends AbstractEventLoopTest {\n             group.shutdownNow();\n             t.join();\n             group.terminationFuture().syncUninterruptibly();\n-            assertThat(error.get(), Matchers.instanceOf(RejectedExecutionException.class));\n+            assertThat(error.get(), instanceOf(RejectedExecutionException.class));\n             error.set(null);\n         }\n     }\n"}}, {"oid": "2e3583f569ecd77270f804b0982c5cc0dc47de33", "url": "https://github.com/netty/netty/commit/2e3583f569ecd77270f804b0982c5cc0dc47de33", "message": "address comments", "committedDate": "2020-10-17T07:42:45Z", "type": "commit"}]}