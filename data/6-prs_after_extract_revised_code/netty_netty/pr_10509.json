{"pr_number": 10509, "pr_title": "Reduce garbage on MQTT", "pr_createdAt": "2020-08-27T15:24:27Z", "pr_url": "https://github.com/netty/netty/pull/10509", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MTUwMA==", "url": "https://github.com/netty/netty/pull/10509#discussion_r478861500", "bodyText": "@franz1981 can we please not use wildcard imports :) ?", "author": "normanmaurer", "createdAt": "2020-08-28T06:38:56Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -22,11 +22,11 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.DecoderException;\n import io.netty.handler.codec.MessageToMessageEncoder;\n-import io.netty.util.CharsetUtil;\n import io.netty.util.internal.EmptyArrays;\n \n import java.util.List;\n \n+import static io.netty.buffer.ByteBufUtil.*;", "originalCommit": "d9bebc96955da549dd15f9cdc9ae66a713fe0d21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1239996eb1303e146562e2f2d468879acff748fd", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\nindex b0ac81ac4e..762be1b12c 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n\n@@ -26,7 +26,8 @@ import io.netty.util.internal.EmptyArrays;\n \n import java.util.List;\n \n-import static io.netty.buffer.ByteBufUtil.*;\n+import static io.netty.buffer.ByteBufUtil.reserveAndWriteUtf8;\n+import static io.netty.buffer.ByteBufUtil.utf8Bytes;\n import static io.netty.handler.codec.mqtt.MqttCodecUtil.*;\n \n /**\n"}}, {"oid": "1239996eb1303e146562e2f2d468879acff748fd", "url": "https://github.com/netty/netty/commit/1239996eb1303e146562e2f2d468879acff748fd", "message": "Reduce garbage on MQTT encoding\n\nMotivation:\n\nMqttEncoder create many byte[] to encode Strings into UTF-8 bytes\n\nModification:\n\nByteBufUtil::utf8Bytes and ByteBufUtil::reserveAndWriteUtf8 allows to perform the same operation GC-free\n\nResult:\nLess garbage produced on Mqtt encoding", "committedDate": "2020-08-28T07:13:56Z", "type": "forcePushed"}, {"oid": "b0bd0c470fecf05a24aff9d22763a0f4d93ef5db", "url": "https://github.com/netty/netty/commit/b0bd0c470fecf05a24aff9d22763a0f4d93ef5db", "message": "Reduce garbage on MQTT encoding\n\nMotivation:\n\nMqttEncoder create many byte[] to encode Strings into UTF-8 bytes\n\nModification:\n\nByteBufUtil::utf8Bytes and ByteBufUtil::reserveAndWriteUtf8 allows to perform the same operation GC-free\n\nResult:\nLess garbage produced on Mqtt encoding", "committedDate": "2020-09-01T10:51:31Z", "type": "forcePushed"}, {"oid": "395f64cfe58b619e7e770be446ccaa0e6a7c466f", "url": "https://github.com/netty/netty/commit/395f64cfe58b619e7e770be446ccaa0e6a7c466f", "message": "Reduce garbage on MQTT encoding\n\nMotivation:\n\nMqttEncoder create many byte[] to encode Strings into UTF-8 bytes\n\nModification:\n\nByteBufUtil::utf8Bytes and ByteBufUtil::reserveAndWriteUtf8 allows to perform the same operation GC-free\n\nResult:\nLess garbage produced on Mqtt encoding", "committedDate": "2020-09-01T11:32:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NzkyOA==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481247928", "bodyText": "I prefer to move the array allocations to the static block, so you don't have to hard code the array length like this. Same in MqttQoS.", "author": "chrisvest", "createdAt": "2020-09-01T15:52:58Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -67,6 +67,14 @@\n         CORRELATION_DATA(0x09),\n         AUTHENTICATION_DATA(0x16);\n \n+        private static final MqttPropertyType[] VALUES = new MqttPropertyType[43];", "originalCommit": "686e35ee4e56b15ec42dff1b8564ee2251a383f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTMxNw==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481341317", "bodyText": "\ud83d\udc4d", "author": "franz1981", "createdAt": "2020-09-01T18:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NzkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "6b309e1a890ffa6226bd239eb0a18e9dd1eee9de", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\nindex 2ba1aec5a8..9d06f1666b 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n\n@@ -67,9 +67,10 @@ public final class MqttProperties {\n         CORRELATION_DATA(0x09),\n         AUTHENTICATION_DATA(0x16);\n \n-        private static final MqttPropertyType[] VALUES = new MqttPropertyType[43];\n+        private static final MqttPropertyType[] VALUES;\n \n         static {\n+            VALUES = new MqttPropertyType[43];\n             for (MqttPropertyType v : values()) {\n                 VALUES[v.value] = v;\n             }\n"}}, {"oid": "6b309e1a890ffa6226bd239eb0a18e9dd1eee9de", "url": "https://github.com/netty/netty/commit/6b309e1a890ffa6226bd239eb0a18e9dd1eee9de", "message": "Reduce garbage on MQTT encoding/decoding\n\nMotivation:\n\nSome enums valueOf create unnecessary arrays on the hot paths\n\nModification:\n\nImplemented GC free const table lookup/switch valueOf\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-01T18:34:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1ODc0Mw==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481458743", "bodyText": "I don't think these changes to set max capacity == init capacity should be necessary, it won't affect how the buffer is allocated just the cap on how large it can grow beyond init capacity (which it won't because it's being sized precisely up-front IIUC).", "author": "njhill", "createdAt": "2020-09-01T22:06:36Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -169,7 +172,8 @@ private static ByteBuf encodeConnectMessage(\n \n                 int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n                 int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n-                ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n+                int totalSize = fixedHeaderBufferSize + variablePartSize;\n+                ByteBuf buf = ctx.alloc().buffer(totalSize, totalSize);", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab55da1a09b4ada89b3e613d3e3a24850995520f", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\nindex ab7c733307..94aebac1dd 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n\n@@ -172,8 +171,7 @@ public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {\n \n                 int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n                 int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n-                int totalSize = fixedHeaderBufferSize + variablePartSize;\n-                ByteBuf buf = ctx.alloc().buffer(totalSize, totalSize);\n+                ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n                 buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n                 writeVariableLengthInt(buf, variablePartSize);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTYyOA==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481459628", "bodyText": "Above lines could be moved inside the if block I think? (I know not strictly related to this PR)", "author": "njhill", "createdAt": "2020-09-01T22:08:58Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -125,23 +128,23 @@ private static ByteBuf encodeConnectMessage(\n         if (!isValidClientId(mqttVersion, clientIdentifier)) {\n             throw new MqttIdentifierRejectedException(\"invalid clientIdentifier: \" + clientIdentifier);\n         }\n-        byte[] clientIdentifierBytes = encodeStringUtf8(clientIdentifier);\n-        payloadBufferSize += 2 + clientIdentifierBytes.length;\n+        int clientIdentifierBytes = utf8Bytes(clientIdentifier);\n+        payloadBufferSize += 2 + clientIdentifierBytes;\n \n         // Will topic and message\n         String willTopic = payload.willTopic();\n-        byte[] willTopicBytes = willTopic != null ? encodeStringUtf8(willTopic) : EmptyArrays.EMPTY_BYTES;\n+        int willTopicBytes = nullableUtf8Bytes(willTopic);\n         byte[] willMessage = payload.willMessageInBytes();\n         byte[] willMessageBytes = willMessage != null ? willMessage : EmptyArrays.EMPTY_BYTES;", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2Mzg0NA==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481463844", "bodyText": "This should be preciseUtf8Length right?", "author": "njhill", "createdAt": "2020-09-01T22:19:08Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -689,10 +697,33 @@ private static void writeVariableLengthInt(ByteBuf buf, int num) {\n         } while (num > 0);\n     }\n \n-    static void writeUTF8String(ByteBuf buf, String s) {\n-        byte[] sBytes = encodeStringUtf8(s);\n-        buf.writeShort(sBytes.length);\n-        buf.writeBytes(sBytes, 0, sBytes.length);\n+    private static int nullableUtf8Bytes(String s) {\n+        if (s == null) {\n+            return 0;\n+        }\n+        return utf8Bytes(s);\n+    }\n+\n+    private static void writeUTF8String(ByteBuf buf, String s, int expectedUtf8Length) {", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab55da1a09b4ada89b3e613d3e3a24850995520f", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\nindex ab7c733307..94aebac1dd 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n\n@@ -698,31 +689,38 @@ public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {\n     }\n \n     private static int nullableUtf8Bytes(String s) {\n-        if (s == null) {\n-            return 0;\n-        }\n-        return utf8Bytes(s);\n+        return s == null? 0 : utf8Bytes(s);\n     }\n \n-    private static void writeUTF8String(ByteBuf buf, String s, int expectedUtf8Length) {\n-        assert nullableUtf8Bytes(s) == expectedUtf8Length;\n-        assert buf.isWritable(expectedUtf8Length + 2);\n-        buf.writeShort(expectedUtf8Length);\n-        if (expectedUtf8Length > 0) {\n-            final int utf8Length = reserveAndWriteUtf8(buf, s, expectedUtf8Length);\n-            assert expectedUtf8Length == utf8Length;\n+    private static int nullableMaxUtf8Bytes(String s) {\n+        return s == null? 0 : utf8MaxBytes(s);\n+    }\n+\n+    private static void writeExactUTF8String(ByteBuf buf, String s, int utf8Length) {\n+        buf.ensureWritable(utf8Length + 2);\n+        buf.writeShort(utf8Length);\n+        if (utf8Length > 0) {\n+            final int writtenUtf8Length = reserveAndWriteUtf8(buf, s, utf8Length);\n+            assert writtenUtf8Length == utf8Length;\n         }\n     }\n \n-    private static void writeUTF8String(ByteBuf buf, String s) {\n-        assert buf.isWritable(nullableUtf8Bytes(s) + 2);\n+    private static void writeEagerUTF8String(ByteBuf buf, String s) {\n+        final int maxUtf8Length = nullableMaxUtf8Bytes(s);\n+        buf.ensureWritable(maxUtf8Length + 2);\n+        final int writerIndex = buf.writerIndex();\n+        final int startUtf8String = writerIndex + 2;\n+        buf.writerIndex(startUtf8String);\n+        final int utf8Length = s != null? reserveAndWriteUtf8(buf, s, maxUtf8Length) : 0;\n+        buf.setShort(writerIndex, utf8Length);\n+    }\n+\n+    private static void writeUnsafeUTF8String(ByteBuf buf, String s) {\n         final int writerIndex = buf.writerIndex();\n-        buf.ensureWritable(buf.capacity() - writerIndex);\n         final int startUtf8String = writerIndex + 2;\n-        // no need to reserve any capacity here, already done earlier\n+        // no need to reserve any capacity here, already done earlier: that's why is Unsafe\n         buf.writerIndex(startUtf8String);\n         final int utf8Length = s != null? reserveAndWriteUtf8(buf, s, 0) : 0;\n-        assert nullableUtf8Bytes(s) == utf8Length;\n         buf.setShort(writerIndex, utf8Length);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NTgxOQ==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481465819", "bodyText": "This isn't necessary.. buf will be expanded inside reserveAndWriteUtf8 if needed", "author": "njhill", "createdAt": "2020-09-01T22:24:27Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -689,10 +697,33 @@ private static void writeVariableLengthInt(ByteBuf buf, int num) {\n         } while (num > 0);\n     }\n \n-    static void writeUTF8String(ByteBuf buf, String s) {\n-        byte[] sBytes = encodeStringUtf8(s);\n-        buf.writeShort(sBytes.length);\n-        buf.writeBytes(sBytes, 0, sBytes.length);\n+    private static int nullableUtf8Bytes(String s) {\n+        if (s == null) {\n+            return 0;\n+        }\n+        return utf8Bytes(s);\n+    }\n+\n+    private static void writeUTF8String(ByteBuf buf, String s, int expectedUtf8Length) {\n+        assert nullableUtf8Bytes(s) == expectedUtf8Length;\n+        assert buf.isWritable(expectedUtf8Length + 2);", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMDE0OA==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481810148", "bodyText": "I would like the whole required writable capacity to be already allocated and the assert should just check it.\nIn the current implementation writeUTF8String is using buf.ensureWritable(buf.capacity() - writerIndex); explicitly instead of relying on reserveAndWriteUtf8 because:\n\nthere are 0-length strings that still need buf.setShort(writerIndex, utf8Length); with 0 utf8length without calling reserveAndWriteUtf8\nbuf.writerIndex(startUtf8String); is moving the writerIndex with no clue that there are enough writable capacity to hold the short length prefix", "author": "franz1981", "createdAt": "2020-09-02T07:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NTgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ab55da1a09b4ada89b3e613d3e3a24850995520f", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\nindex ab7c733307..94aebac1dd 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n\n@@ -698,31 +689,38 @@ public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {\n     }\n \n     private static int nullableUtf8Bytes(String s) {\n-        if (s == null) {\n-            return 0;\n-        }\n-        return utf8Bytes(s);\n+        return s == null? 0 : utf8Bytes(s);\n     }\n \n-    private static void writeUTF8String(ByteBuf buf, String s, int expectedUtf8Length) {\n-        assert nullableUtf8Bytes(s) == expectedUtf8Length;\n-        assert buf.isWritable(expectedUtf8Length + 2);\n-        buf.writeShort(expectedUtf8Length);\n-        if (expectedUtf8Length > 0) {\n-            final int utf8Length = reserveAndWriteUtf8(buf, s, expectedUtf8Length);\n-            assert expectedUtf8Length == utf8Length;\n+    private static int nullableMaxUtf8Bytes(String s) {\n+        return s == null? 0 : utf8MaxBytes(s);\n+    }\n+\n+    private static void writeExactUTF8String(ByteBuf buf, String s, int utf8Length) {\n+        buf.ensureWritable(utf8Length + 2);\n+        buf.writeShort(utf8Length);\n+        if (utf8Length > 0) {\n+            final int writtenUtf8Length = reserveAndWriteUtf8(buf, s, utf8Length);\n+            assert writtenUtf8Length == utf8Length;\n         }\n     }\n \n-    private static void writeUTF8String(ByteBuf buf, String s) {\n-        assert buf.isWritable(nullableUtf8Bytes(s) + 2);\n+    private static void writeEagerUTF8String(ByteBuf buf, String s) {\n+        final int maxUtf8Length = nullableMaxUtf8Bytes(s);\n+        buf.ensureWritable(maxUtf8Length + 2);\n+        final int writerIndex = buf.writerIndex();\n+        final int startUtf8String = writerIndex + 2;\n+        buf.writerIndex(startUtf8String);\n+        final int utf8Length = s != null? reserveAndWriteUtf8(buf, s, maxUtf8Length) : 0;\n+        buf.setShort(writerIndex, utf8Length);\n+    }\n+\n+    private static void writeUnsafeUTF8String(ByteBuf buf, String s) {\n         final int writerIndex = buf.writerIndex();\n-        buf.ensureWritable(buf.capacity() - writerIndex);\n         final int startUtf8String = writerIndex + 2;\n-        // no need to reserve any capacity here, already done earlier\n+        // no need to reserve any capacity here, already done earlier: that's why is Unsafe\n         buf.writerIndex(startUtf8String);\n         final int utf8Length = s != null? reserveAndWriteUtf8(buf, s, 0) : 0;\n-        assert nullableUtf8Bytes(s) == utf8Length;\n         buf.setShort(writerIndex, utf8Length);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NjgwMw==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481466803", "bodyText": "nit: could use conditional operator", "author": "njhill", "createdAt": "2020-09-01T22:27:00Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -214,19 +234,35 @@ public void add(MqttProperty property) {\n                 }\n             }\n         } else {\n+            if (props == null) {\n+                props = new IntObjectHashMap<MqttProperty>();\n+                this.props = props;\n+            }\n             props.put(property.propertyId, property);\n         }\n     }\n \n     public Collection<? extends MqttProperty> listAll() {\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        if (props == null) {\n+            return Collections.emptyList();\n+        }\n         return props.values();", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ecaeb114a4d0eb00db0d849af6b4da696cddca7", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\nindex 643a596c5e..d5fbea2468 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n\n@@ -234,35 +214,19 @@ public final class MqttProperties {\n                 }\n             }\n         } else {\n-            if (props == null) {\n-                props = new IntObjectHashMap<MqttProperty>();\n-                this.props = props;\n-            }\n             props.put(property.propertyId, property);\n         }\n     }\n \n     public Collection<? extends MqttProperty> listAll() {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return Collections.emptyList();\n-        }\n         return props.values();\n     }\n \n     public boolean isEmpty() {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return true;\n-        }\n         return props.isEmpty();\n     }\n \n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return null;\n-        }\n         return props.get(propertyId);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2Njg1Mg==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481466852", "bodyText": "nit: conditional operator", "author": "njhill", "createdAt": "2020-09-01T22:27:10Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -214,19 +234,35 @@ public void add(MqttProperty property) {\n                 }\n             }\n         } else {\n+            if (props == null) {\n+                props = new IntObjectHashMap<MqttProperty>();\n+                this.props = props;\n+            }\n             props.put(property.propertyId, property);\n         }\n     }\n \n     public Collection<? extends MqttProperty> listAll() {\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        if (props == null) {\n+            return Collections.emptyList();\n+        }\n         return props.values();\n     }\n \n     public boolean isEmpty() {\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        if (props == null) {\n+            return true;\n+        }\n         return props.isEmpty();\n     }\n \n     public MqttProperty getProperty(int propertyId) {\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        if (props == null) {\n+            return null;\n+        }\n         return props.get(propertyId);", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ecaeb114a4d0eb00db0d849af6b4da696cddca7", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\nindex 643a596c5e..d5fbea2468 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n\n@@ -234,35 +214,19 @@ public final class MqttProperties {\n                 }\n             }\n         } else {\n-            if (props == null) {\n-                props = new IntObjectHashMap<MqttProperty>();\n-                this.props = props;\n-            }\n             props.put(property.propertyId, property);\n         }\n     }\n \n     public Collection<? extends MqttProperty> listAll() {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return Collections.emptyList();\n-        }\n         return props.values();\n     }\n \n     public boolean isEmpty() {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return true;\n-        }\n         return props.isEmpty();\n     }\n \n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return null;\n-        }\n         return props.get(propertyId);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2Njk3MQ==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481466971", "bodyText": "nit: return props == null || props.isEmpty()", "author": "njhill", "createdAt": "2020-09-01T22:27:31Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -214,19 +234,35 @@ public void add(MqttProperty property) {\n                 }\n             }\n         } else {\n+            if (props == null) {\n+                props = new IntObjectHashMap<MqttProperty>();\n+                this.props = props;\n+            }\n             props.put(property.propertyId, property);\n         }\n     }\n \n     public Collection<? extends MqttProperty> listAll() {\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        if (props == null) {\n+            return Collections.emptyList();\n+        }\n         return props.values();\n     }\n \n     public boolean isEmpty() {\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        if (props == null) {\n+            return true;\n+        }\n         return props.isEmpty();", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ecaeb114a4d0eb00db0d849af6b4da696cddca7", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\nindex 643a596c5e..d5fbea2468 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java\n\n@@ -234,35 +214,19 @@ public final class MqttProperties {\n                 }\n             }\n         } else {\n-            if (props == null) {\n-                props = new IntObjectHashMap<MqttProperty>();\n-                this.props = props;\n-            }\n             props.put(property.propertyId, property);\n         }\n     }\n \n     public Collection<? extends MqttProperty> listAll() {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return Collections.emptyList();\n-        }\n         return props.values();\n     }\n \n     public boolean isEmpty() {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return true;\n-        }\n         return props.isEmpty();\n     }\n \n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        if (props == null) {\n-            return null;\n-        }\n         return props.get(propertyId);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODU3Mg==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481468572", "bodyText": "This is redundant for the same reason, but this whole method should only be used when it's already known that the buffer has sufficient space.. maybe rename it writeUTF8StringUnsafe or something", "author": "njhill", "createdAt": "2020-09-01T22:32:19Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -689,10 +697,33 @@ private static void writeVariableLengthInt(ByteBuf buf, int num) {\n         } while (num > 0);\n     }\n \n-    static void writeUTF8String(ByteBuf buf, String s) {\n-        byte[] sBytes = encodeStringUtf8(s);\n-        buf.writeShort(sBytes.length);\n-        buf.writeBytes(sBytes, 0, sBytes.length);\n+    private static int nullableUtf8Bytes(String s) {\n+        if (s == null) {\n+            return 0;\n+        }\n+        return utf8Bytes(s);\n+    }\n+\n+    private static void writeUTF8String(ByteBuf buf, String s, int expectedUtf8Length) {\n+        assert nullableUtf8Bytes(s) == expectedUtf8Length;\n+        assert buf.isWritable(expectedUtf8Length + 2);\n+        buf.writeShort(expectedUtf8Length);\n+        if (expectedUtf8Length > 0) {\n+            final int utf8Length = reserveAndWriteUtf8(buf, s, expectedUtf8Length);\n+            assert expectedUtf8Length == utf8Length;\n+        }\n+    }\n+\n+    private static void writeUTF8String(ByteBuf buf, String s) {\n+        assert buf.isWritable(nullableUtf8Bytes(s) + 2);\n+        final int writerIndex = buf.writerIndex();\n+        buf.ensureWritable(buf.capacity() - writerIndex);", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDQxNg==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481820416", "bodyText": "this whole method should only be used when it's already known that the buffer has sufficient space\n\nAgree as I've said on #10509 (comment):\n\nI would like the whole required writable capacity to be already allocated and the assert should just check it.\n\nSo, how to do it?\nAs you've pointed on #10509 (comment)\n\nit won't affect how the buffer is allocated\n\nSo, the only way to ensure there is enough writable space is to call ensureWritable just once, right after allocating the whole buffer? Or it isn't needed at all if the initialCapacity of the allocated buffer is enough?", "author": "franz1981", "createdAt": "2020-09-02T07:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2MDk4Ng==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481860986", "bodyText": "I've changed it by assuming Or it isn't needed at all if the initialCapacity of the allocated buffer is enough? , please take a look and thanks for the detailed review Nick :)", "author": "franz1981", "createdAt": "2020-09-02T08:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ab55da1a09b4ada89b3e613d3e3a24850995520f", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\nindex ab7c733307..94aebac1dd 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n\n@@ -698,31 +689,38 @@ public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {\n     }\n \n     private static int nullableUtf8Bytes(String s) {\n-        if (s == null) {\n-            return 0;\n-        }\n-        return utf8Bytes(s);\n+        return s == null? 0 : utf8Bytes(s);\n     }\n \n-    private static void writeUTF8String(ByteBuf buf, String s, int expectedUtf8Length) {\n-        assert nullableUtf8Bytes(s) == expectedUtf8Length;\n-        assert buf.isWritable(expectedUtf8Length + 2);\n-        buf.writeShort(expectedUtf8Length);\n-        if (expectedUtf8Length > 0) {\n-            final int utf8Length = reserveAndWriteUtf8(buf, s, expectedUtf8Length);\n-            assert expectedUtf8Length == utf8Length;\n+    private static int nullableMaxUtf8Bytes(String s) {\n+        return s == null? 0 : utf8MaxBytes(s);\n+    }\n+\n+    private static void writeExactUTF8String(ByteBuf buf, String s, int utf8Length) {\n+        buf.ensureWritable(utf8Length + 2);\n+        buf.writeShort(utf8Length);\n+        if (utf8Length > 0) {\n+            final int writtenUtf8Length = reserveAndWriteUtf8(buf, s, utf8Length);\n+            assert writtenUtf8Length == utf8Length;\n         }\n     }\n \n-    private static void writeUTF8String(ByteBuf buf, String s) {\n-        assert buf.isWritable(nullableUtf8Bytes(s) + 2);\n+    private static void writeEagerUTF8String(ByteBuf buf, String s) {\n+        final int maxUtf8Length = nullableMaxUtf8Bytes(s);\n+        buf.ensureWritable(maxUtf8Length + 2);\n+        final int writerIndex = buf.writerIndex();\n+        final int startUtf8String = writerIndex + 2;\n+        buf.writerIndex(startUtf8String);\n+        final int utf8Length = s != null? reserveAndWriteUtf8(buf, s, maxUtf8Length) : 0;\n+        buf.setShort(writerIndex, utf8Length);\n+    }\n+\n+    private static void writeUnsafeUTF8String(ByteBuf buf, String s) {\n         final int writerIndex = buf.writerIndex();\n-        buf.ensureWritable(buf.capacity() - writerIndex);\n         final int startUtf8String = writerIndex + 2;\n-        // no need to reserve any capacity here, already done earlier\n+        // no need to reserve any capacity here, already done earlier: that's why is Unsafe\n         buf.writerIndex(startUtf8String);\n         final int utf8Length = s != null? reserveAndWriteUtf8(buf, s, 0) : 0;\n-        assert nullableUtf8Bytes(s) == utf8Length;\n         buf.setShort(writerIndex, utf8Length);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2OTQxMw==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481469413", "bodyText": "maxUtf8Bytes could be used to \"ensure\" space for these I think, filling in the length field retroactively", "author": "njhill", "createdAt": "2020-09-01T22:34:38Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -629,15 +634,18 @@ private static ByteBuf encodeProperties(ByteBufAllocator byteBufAllocator,\n                         case SERVER_REFERENCE:\n                         case REASON_STRING:\n                             writeVariableLengthInt(propertiesBuf, property.propertyId);\n-                            writeUTF8String(propertiesBuf, ((MqttProperties.StringProperty) property).value);\n+                            String value = ((MqttProperties.StringProperty) property).value;\n+                            writeUTF8String(propertiesBuf, value, nullableUtf8Bytes(value));\n                             break;\n                         case USER_PROPERTY:\n                             final List<MqttProperties.StringPair> pairs =\n                                     ((MqttProperties.UserProperties) property).value;\n                             for (MqttProperties.StringPair pair : pairs) {\n                                 writeVariableLengthInt(propertiesBuf, property.propertyId);\n-                                writeUTF8String(propertiesBuf, pair.key);\n-                                writeUTF8String(propertiesBuf, pair.value);\n+                                String k = pair.key;\n+                                String v = pair.value;\n+                                writeUTF8String(propertiesBuf, k, nullableUtf8Bytes(k));\n+                                writeUTF8String(propertiesBuf, v, nullableUtf8Bytes(v));", "originalCommit": "c3d43f1d0400b0dba5a9a77dcbe9f767c8201546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxNzczMg==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481817732", "bodyText": "Let me rethink this part to handle this one as you suggest (currently  the writeUTF8String semantic while using the exact length is a bit different), because it makes sense", "author": "franz1981", "createdAt": "2020-09-02T07:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2OTQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "ab55da1a09b4ada89b3e613d3e3a24850995520f", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\nindex ab7c733307..94aebac1dd 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java\n\n@@ -635,7 +626,7 @@ public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {\n                         case REASON_STRING:\n                             writeVariableLengthInt(propertiesBuf, property.propertyId);\n                             String value = ((MqttProperties.StringProperty) property).value;\n-                            writeUTF8String(propertiesBuf, value, nullableUtf8Bytes(value));\n+                            writeEagerUTF8String(propertiesBuf, value);\n                             break;\n                         case USER_PROPERTY:\n                             final List<MqttProperties.StringPair> pairs =\n"}}, {"oid": "ab55da1a09b4ada89b3e613d3e3a24850995520f", "url": "https://github.com/netty/netty/commit/ab55da1a09b4ada89b3e613d3e3a24850995520f", "message": "Reduce garbage on MqttProperties\n\nMotivation:\n\nMqttProperties uses Integer keys instead of int\n\nModification:\n\nMqttProperties uses a primitive key map\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T07:52:25Z", "type": "forcePushed"}, {"oid": "3ecaeb114a4d0eb00db0d849af6b4da696cddca7", "url": "https://github.com/netty/netty/commit/3ecaeb114a4d0eb00db0d849af6b4da696cddca7", "message": "Reduce garbage on MQTT encoding\n\nMotivation:\n\nMqttEncoder create many byte[] to encode Strings into UTF-8 bytes\n\nModification:\n\nByteBufUtil::utf8Bytes and ByteBufUtil::reserveAndWriteUtf8 allows to perform the same operation GC-free\n\nResult:\nLess garbage produced on Mqtt encoding", "committedDate": "2020-09-02T07:56:41Z", "type": "commit"}, {"oid": "70ee96a1cb524a4d634952d4dd5198b570367f75", "url": "https://github.com/netty/netty/commit/70ee96a1cb524a4d634952d4dd5198b570367f75", "message": "Reduce garbage on MqttProperties\n\nMotivation:\n\nMqttProperties uses Integer keys instead of int\n\nModification:\n\nMqttProperties uses a primitive key map\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T07:56:41Z", "type": "forcePushed"}, {"oid": "272fa37b463d1f010261a5e40a0960a75d97c741", "url": "https://github.com/netty/netty/commit/272fa37b463d1f010261a5e40a0960a75d97c741", "message": "Reduce garbage on MqttProperties\n\nMotivation:\n\nMqttProperties uses Integer keys instead of int\n\nModification:\n\nMqttProperties uses a primitive key map\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T08:02:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2MTgzOA==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481861838", "bodyText": "Why not make it final and avoid further null checks?", "author": "paul-lysak", "createdAt": "2020-09-02T08:04:46Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -190,20 +201,29 @@ public BinaryProperty(int propertyId, byte[] value) {\n     }\n \n     public MqttProperties() {\n-        this(new HashMap<Integer, MqttProperty>());\n+        this(true);\n     }\n \n-    private MqttProperties(Map<Integer, MqttProperty> props) {\n-        this.props = props;\n+    private MqttProperties(boolean canModify) {\n+        this.canModify = canModify;\n     }\n \n-    private final Map<Integer, MqttProperty> props;\n+    private IntObjectHashMap<MqttProperty> props;", "originalCommit": "272fa37b463d1f010261a5e40a0960a75d97c741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2MzUzNw==", "url": "https://github.com/netty/netty/pull/10509#discussion_r481863537", "bodyText": "because IntObjectHashMap is different from HashMap: the former allocate upfront arrays internally, while the latter, nope. I've used null to save any allocation, if possible, similarly (or better) then what HashMap achieve internally. The JVM will null-check anyway a final field, so I've used a weakness of the JVM to our advantage", "author": "franz1981", "createdAt": "2020-09-02T08:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2MTgzOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a02630406dccff5bf458b6ce4473e029cf6301a6", "url": "https://github.com/netty/netty/commit/a02630406dccff5bf458b6ce4473e029cf6301a6", "message": "Reduce garbage on MqttProperties\n\nMotivation:\n\nMqttProperties uses Integer keys instead of int\n\nModification:\n\nMqttProperties uses a primitive key map\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T08:50:43Z", "type": "forcePushed"}, {"oid": "b4a8e422b2312cc7be210280839bd78ece769b57", "url": "https://github.com/netty/netty/commit/b4a8e422b2312cc7be210280839bd78ece769b57", "message": "Reduce garbage on MqttProperties\n\nMotivation:\n\nMqttProperties uses Integer keys instead of int\n\nModification:\n\nMqttProperties uses a primitive key map\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T08:52:14Z", "type": "forcePushed"}, {"oid": "864beb975983816fe6dbd26e6e58af19370d9aea", "url": "https://github.com/netty/netty/commit/864beb975983816fe6dbd26e6e58af19370d9aea", "message": "Reduce garbage on MqttProperties\n\nMotivation:\n\nMqttProperties uses Integer keys instead of int\n\nModification:\n\nMqttProperties uses a primitive key map\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T10:33:00Z", "type": "forcePushed"}, {"oid": "aab55c456f7737d9c8a8452ecf8ae0212f4f303e", "url": "https://github.com/netty/netty/commit/aab55c456f7737d9c8a8452ecf8ae0212f4f303e", "message": "Reduce garbage on MqttProperties\n\nMotivation:\n\nMqttProperties uses Integer keys instead of int\n\nModification:\n\nMqttProperties uses a primitive key map\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T11:24:09Z", "type": "commit"}, {"oid": "9b32d69dcba8057c46eb5bba8dcbf1872ab81ce4", "url": "https://github.com/netty/netty/commit/9b32d69dcba8057c46eb5bba8dcbf1872ab81ce4", "message": "Reduce garbage on MQTT encoding/decoding\n\nMotivation:\n\nSome enums valueOf create unnecessary arrays on the hot paths\n\nModification:\n\nImplemented GC free const table lookup/switch valueOf\n\nResult:\nLess garbage produced on Mqtt", "committedDate": "2020-09-02T11:24:09Z", "type": "commit"}, {"oid": "d5a1e71cdf30791ddfc0f4a2fe68b4cdec7810e0", "url": "https://github.com/netty/netty/commit/d5a1e71cdf30791ddfc0f4a2fe68b4cdec7810e0", "message": "Reduce garbage on MQTT decodeMsbLsb\n\nMotivation:\n\nMqttDecoder was using a Result<Integer> on decodeMsbLsb\n\nModification:\n\nUse some bit-tricks to pack 2 ints into a single primitive long\nto store both result and  numberOfBytesConsumed\n\nResult:\nZero garbage produced on MQTT decodeMsbLsb", "committedDate": "2020-09-02T12:14:11Z", "type": "forcePushed"}, {"oid": "a900da1efcb64aa96f28a2f14e6595345064b795", "url": "https://github.com/netty/netty/commit/a900da1efcb64aa96f28a2f14e6595345064b795", "message": "Reduce garbage on MQTT decodeMsbLsb and decodeVariableByteInteger\n\nMotivation:\n\nMqttDecoder was using a Result<Integer> on decodeMsbLsb and decodeVariableByteInteger\n\nModification:\n\nUse some bit-tricks to pack 2 ints into a single primitive long\nto store both result ad  numberOfBytesConsumed\n\nResult:\nZero garbage produced on MQTT decodeMsbLsb and decodeVariableByteInteger", "committedDate": "2020-09-02T12:27:16Z", "type": "forcePushed"}, {"oid": "0bdd30eaec885fd885b670f2ce262ce115918188", "url": "https://github.com/netty/netty/commit/0bdd30eaec885fd885b670f2ce262ce115918188", "message": "Reduce garbage on MQTT Integer decoding\n\nMotivation:\n\nMqttDecoder was using a Result<Integer>\n\nModification:\n\nUse some bit-tricks to pack 2 ints into a single primitive long\nto store both result and numberOfBytesConsumed\n\nResult:\nZero garbage produced while decoding Integers on MQTT", "committedDate": "2020-09-02T12:55:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA1MjIxOQ==", "url": "https://github.com/netty/netty/pull/10509#discussion_r482052219", "bodyText": "seems that my codestyle IDEA Netty settings just apply to this forcibly", "author": "franz1981", "createdAt": "2020-09-02T13:04:58Z", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -672,80 +679,80 @@ private static MqttFixedHeader decodeFixedHeader(ChannelHandlerContext ctx, Byte\n     }\n \n     private static Result<MqttProperties> decodeProperties(ByteBuf buffer) {\n-        final Result<Integer> propertiesLength = decodeVariableByteInteger(buffer);\n-        int totalPropertiesLength = propertiesLength.value;\n-        int numberOfBytesConsumed = propertiesLength.numberOfBytesConsumed;\n+        final long propertiesLength = decodeVariableByteInteger(buffer);\n+        int totalPropertiesLength = unpackA(propertiesLength);\n+        int numberOfBytesConsumed = unpackB(propertiesLength);\n \n         MqttProperties decodedProperties = new MqttProperties();\n         while (numberOfBytesConsumed < totalPropertiesLength) {\n-            Result<Integer> propertyId = decodeVariableByteInteger(buffer);\n-            numberOfBytesConsumed += propertyId.numberOfBytesConsumed;\n-\n-            MqttProperties.MqttPropertyType propertyType = MqttProperties.MqttPropertyType.valueOf(propertyId.value);\n+            long propertyId = decodeVariableByteInteger(buffer);\n+            final int propertyIdValue = unpackA(propertyId);\n+            numberOfBytesConsumed += unpackB(propertyId);\n+            MqttProperties.MqttPropertyType propertyType = MqttProperties.MqttPropertyType.valueOf(propertyIdValue);", "originalCommit": "0bdd30eaec885fd885b670f2ce262ce115918188", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c77d4f2f4fe727ab706637577176d34a9a37392c", "chunk": "diff --git a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java\nindex 3d05c98a08..43679f7fb7 100644\n--- a/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java\n+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java\n\n@@ -743,9 +747,9 @@ public final class MqttDecoder extends ReplayingDecoder<DecoderState> {\n                 break;\n             case CORRELATION_DATA:\n             case AUTHENTICATION_DATA:\n-                final Result<byte[]> binaryDataResult = decodeByteArray(buffer);\n-                numberOfBytesConsumed += binaryDataResult.numberOfBytesConsumed;\n-                decodedProperties.add(new MqttProperties.BinaryProperty(propertyIdValue, binaryDataResult.value));\n+                final byte[] binaryDataResult = decodeByteArray(buffer);\n+                numberOfBytesConsumed += binaryDataResult.length + 2;\n+                decodedProperties.add(new MqttProperties.BinaryProperty(propertyIdValue, binaryDataResult));\n                 break;\n             default:\n                 //shouldn't reach here\n"}}, {"oid": "c77d4f2f4fe727ab706637577176d34a9a37392c", "url": "https://github.com/netty/netty/commit/c77d4f2f4fe727ab706637577176d34a9a37392c", "message": "Reduce garbage on MQTT decoding\n\nMotivation:\n\nMqttDecoder was using unecessary Result<T>\n\nModification:\n\nUse some bit-tricks to pack 2 ints into a single primitive long\nto store both result and numberOfBytesConsumed and\nuse byte[].length to compute numberOfByteConsumed on fly.\nThese changes allowed to save creating Result<T>.\n\nResult:\nZero additional garbage produced while decoding Integers and byte[] on MQTT", "committedDate": "2020-09-02T13:28:56Z", "type": "forcePushed"}, {"oid": "bbe5f01d94f99bae0a3f1edcc7a4b2f17282664c", "url": "https://github.com/netty/netty/commit/bbe5f01d94f99bae0a3f1edcc7a4b2f17282664c", "message": "Reduce garbage on MQTT decoding\n\nMotivation:\n\nMqttDecoder was using unecessary Result<T>\n\nModification:\n\nUse some bit-tricks to pack 2 ints into a single primitive long\nto store both result and numberOfBytesConsumed and\nuse byte[].length to compute numberOfByteConsumed on fly.\nThese changes allowed to save creating Result<T>.\n\nResult:\nZero additional garbage produced while decoding Integers and byte[] on MQTT", "committedDate": "2020-09-02T13:43:46Z", "type": "commit"}, {"oid": "bbe5f01d94f99bae0a3f1edcc7a4b2f17282664c", "url": "https://github.com/netty/netty/commit/bbe5f01d94f99bae0a3f1edcc7a4b2f17282664c", "message": "Reduce garbage on MQTT decoding\n\nMotivation:\n\nMqttDecoder was using unecessary Result<T>\n\nModification:\n\nUse some bit-tricks to pack 2 ints into a single primitive long\nto store both result and numberOfBytesConsumed and\nuse byte[].length to compute numberOfByteConsumed on fly.\nThese changes allowed to save creating Result<T>.\n\nResult:\nZero additional garbage produced while decoding Integers and byte[] on MQTT", "committedDate": "2020-09-02T13:43:46Z", "type": "forcePushed"}]}