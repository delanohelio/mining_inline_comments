{"pr_number": 10778, "pr_title": "Provide ability to extend StompSubframeEncoder and improve full stomp frame encoding", "pr_createdAt": "2020-11-06T07:13:17Z", "pr_url": "https://github.com/netty/netty/pull/10778", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4NTAwMg==", "url": "https://github.com/netty/netty/pull/10778#discussion_r518585002", "bodyText": "Fork should be at least 2 for dev purposes but way more for regressions benchs", "author": "franz1981", "createdAt": "2020-11-06T08:11:44Z", "path": "microbench/src/main/java/io/netty/microbench/stomp/StompEncoderBenchmark.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.stomp;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.stomp.DefaultStompFrame;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+import io.netty.microbench.channel.EmbeddedChannelWriteReleaseHandlerContext;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import io.netty.util.internal.ThreadLocalRandom;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+@Fork(1)", "originalCommit": "dd9ff3a681563343e4e2d92986bf39e358d0effd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NjY2Ng==", "url": "https://github.com/netty/netty/pull/10778#discussion_r518596666", "bodyText": "Thx", "author": "amizurov", "createdAt": "2020-11-06T08:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4NTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "0ab6ae05b784feec1506f156280ff5603caa6796", "chunk": "diff --git a/microbench/src/main/java/io/netty/microbench/stomp/StompEncoderBenchmark.java b/microbench/src/main/java/io/netty/microbench/stomp/StompEncoderBenchmark.java\nindex c416cfb442..d3894e3c0e 100644\n--- a/microbench/src/main/java/io/netty/microbench/stomp/StompEncoderBenchmark.java\n+++ b/microbench/src/main/java/io/netty/microbench/stomp/StompEncoderBenchmark.java\n\n@@ -39,9 +39,11 @@ import org.openjdk.jmh.annotations.State;\n import org.openjdk.jmh.annotations.TearDown;\n import org.openjdk.jmh.annotations.Threads;\n import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.profile.GCProfiler;\n+import org.openjdk.jmh.runner.options.ChainedOptionsBuilder;\n \n @State(Scope.Benchmark)\n-@Fork(1)\n+@Fork(value = 2)\n @Threads(1)\n @Warmup(iterations = 5)\n @Measurement(iterations = 10)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4ODE0NQ==", "url": "https://github.com/netty/netty/pull/10778#discussion_r518588145", "bodyText": "private static", "author": "franz1981", "createdAt": "2020-11-06T08:18:47Z", "path": "codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java", "diffHunk": "@@ -19,63 +19,91 @@\n import io.netty.buffer.ByteBufUtil;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageEncoder;\n-import io.netty.util.CharsetUtil;\n \n import java.util.List;\n import java.util.Map.Entry;\n \n+import static io.netty.handler.codec.stomp.StompConstants.*;\n+\n /**\n  * Encodes a {@link StompFrame} or a {@link StompSubframe} into a {@link ByteBuf}.\n  */\n public class StompSubframeEncoder extends MessageToMessageEncoder<StompSubframe> {\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {\n         if (msg instanceof StompFrame) {\n-            StompFrame frame = (StompFrame) msg;\n-            ByteBuf frameBuf = encodeFrame(frame, ctx);\n-            if (frame.content().isReadable()) {\n-                out.add(frameBuf);\n-                ByteBuf contentBuf = encodeContent(frame, ctx);\n-                out.add(contentBuf);\n-            } else {\n-                frameBuf.writeByte(StompConstants.NUL);\n-                out.add(frameBuf);\n-            }\n+            StompFrame stompFrame = (StompFrame) msg;\n+            ByteBuf buf = encodeFullFrame(stompFrame, ctx);\n+\n+            out.add(converter().convert(stompFrame, buf));\n         } else if (msg instanceof StompHeadersSubframe) {\n-            StompHeadersSubframe frame = (StompHeadersSubframe) msg;\n-            ByteBuf buf = encodeFrame(frame, ctx);\n-            out.add(buf);\n+            StompHeadersSubframe stompHeadersSubframe = (StompHeadersSubframe) msg;\n+            ByteBuf buf = ctx.alloc().buffer(headersSubFrameSize(stompHeadersSubframe));\n+            encodeHeaders(stompHeadersSubframe, buf);\n+\n+            out.add(converter().convert(stompHeadersSubframe, buf));\n         } else if (msg instanceof StompContentSubframe) {\n             StompContentSubframe stompContentSubframe = (StompContentSubframe) msg;\n             ByteBuf buf = encodeContent(stompContentSubframe, ctx);\n-            out.add(buf);\n+\n+            out.add(converter().convert(stompContentSubframe, buf));\n         }\n     }\n \n-    private static ByteBuf encodeContent(StompContentSubframe content, ChannelHandlerContext ctx) {\n-        if (content instanceof LastStompContentSubframe) {\n-            ByteBuf buf = ctx.alloc().buffer(content.content().readableBytes() + 1);\n-            buf.writeBytes(content.content());\n-            buf.writeByte(StompConstants.NUL);\n-            return buf;\n-        } else {\n-            return content.content().retain();\n+    protected StompEncodedSubframeConverter<?> converter() {\n+        return StompEncodedSubframeConverter.NOOP;\n+    }\n+\n+    /**\n+     * Returns a heuristic size for headers (32 bytes per header line) + (2 bytes for colon and eol)\n+     * + (additional command buffer).\n+     */\n+    protected int headersSubFrameSize(StompHeadersSubframe headersSubframe) {", "originalCommit": "dd9ff3a681563343e4e2d92986bf39e358d0effd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NzU2Ng==", "url": "https://github.com/netty/netty/pull/10778#discussion_r518597566", "bodyText": "I thought to leave it open so that somebody could override it since this is just a heuristic.", "author": "amizurov", "createdAt": "2020-11-06T08:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4ODE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ab6ae05b784feec1506f156280ff5603caa6796", "chunk": "diff --git a/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java\nindex d1e3e5b0ed..8bd20e2646 100644\n--- a/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java\n+++ b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java\n\n@@ -31,38 +31,64 @@ import static io.netty.handler.codec.stomp.StompConstants.*;\n public class StompSubframeEncoder extends MessageToMessageEncoder<StompSubframe> {\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {\n+    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n         if (msg instanceof StompFrame) {\n             StompFrame stompFrame = (StompFrame) msg;\n             ByteBuf buf = encodeFullFrame(stompFrame, ctx);\n \n-            out.add(converter().convert(stompFrame, buf));\n+            out.add(convertFullFrame(stompFrame, buf));\n         } else if (msg instanceof StompHeadersSubframe) {\n             StompHeadersSubframe stompHeadersSubframe = (StompHeadersSubframe) msg;\n             ByteBuf buf = ctx.alloc().buffer(headersSubFrameSize(stompHeadersSubframe));\n             encodeHeaders(stompHeadersSubframe, buf);\n \n-            out.add(converter().convert(stompHeadersSubframe, buf));\n+            out.add(convertHeadersSubFrame(stompHeadersSubframe, buf));\n         } else if (msg instanceof StompContentSubframe) {\n             StompContentSubframe stompContentSubframe = (StompContentSubframe) msg;\n             ByteBuf buf = encodeContent(stompContentSubframe, ctx);\n \n-            out.add(converter().convert(stompContentSubframe, buf));\n+            out.add(convertContentSubFrame(stompContentSubframe, buf));\n         }\n     }\n \n-    protected StompEncodedSubframeConverter<?> converter() {\n-        return StompEncodedSubframeConverter.NOOP;\n+    /**\n+     * An extension method to convert a STOMP encoded buffer to a different message type\n+     * based on an original {@link StompFrame} full frame.\n+     *\n+     * <p>By default an encoded buffer is returned as is.\n+     */\n+    protected Object convertFullFrame(StompFrame original, ByteBuf encoded) {\n+        return encoded;\n+    }\n+\n+    /**\n+     * An extension method to convert a STOMP encoded buffer to a different message type\n+     * based on an original {@link StompHeadersSubframe} headers sub frame.\n+     *\n+     * <p>By default an encoded buffer is returned as is.\n+     */\n+    protected Object convertHeadersSubFrame(StompHeadersSubframe original, ByteBuf encoded) {\n+        return encoded;\n+    }\n+\n+    /**\n+     * An extension method to convert a STOMP encoded buffer to a different message type\n+     * based on an original {@link StompHeadersSubframe} content sub frame.\n+     *\n+     * <p>By default an encoded buffer is returned as is.\n+     */\n+    protected Object convertContentSubFrame(StompContentSubframe original, ByteBuf encoded) {\n+        return encoded;\n     }\n \n     /**\n-     * Returns a heuristic size for headers (32 bytes per header line) + (2 bytes for colon and eol)\n-     * + (additional command buffer).\n+     * Returns a heuristic size for headers (32 bytes per header line) + (2 bytes for colon and eol) + (additional\n+     * command buffer).\n      */\n     protected int headersSubFrameSize(StompHeadersSubframe headersSubframe) {\n         int estimatedSize = headersSubframe.headers().size() * 34 + 48;\n         if (estimatedSize < 128) {\n-            return  128;\n+            return 128;\n         } else if (estimatedSize < 256) {\n             return 256;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwNzUwNw==", "url": "https://github.com/netty/netty/pull/10778#discussion_r521007507", "bodyText": "This methods may be override by some one.", "author": "timandy", "createdAt": "2020-11-11T01:46:55Z", "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -16,53 +16,64 @@\n package io.netty.example.stomp.websocket;\n \n import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.CompositeByteBuf;\n import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompContentSubframe;\n+import io.netty.handler.codec.stomp.StompEncodedSubframeConverter;\n import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeaders;\n import io.netty.handler.codec.stomp.StompHeadersSubframe;\n import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n-public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder\n+        implements StompEncodedSubframeConverter<WebSocketFrame> {\n \n     @Override\n-    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {\n         super.encode(ctx, msg, out);\n+    }\n+\n+    @Override\n+    protected StompEncodedSubframeConverter<?> converter() {\n+        return this;\n+    }\n \n-        if (out.isEmpty()) {\n-            return;\n+    @Override\n+    public WebSocketFrame convert(StompFrame original, ByteBuf encoded) {\n+        if (isTextFrame(original)) {\n+            return new TextWebSocketFrame(encoded);\n         }\n \n-        final WebSocketFrame webSocketFrame;\n-        if (msg instanceof StompFrame) {\n-            if (out.size() == 1) {\n-                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n-            } else {\n-                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n-                for (Object byteBuf : out) {\n-                    content.addComponent(true, (ByteBuf) byteBuf);\n-                }\n-                webSocketFrame = new TextWebSocketFrame(content);\n-            }\n-        } else if (msg instanceof StompHeadersSubframe) {\n-            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n-        } else if (msg instanceof LastStompContentSubframe) {\n-            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n-        } else {\n-            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        return new BinaryWebSocketFrame(encoded);\n+    }\n+\n+    @Override\n+    public WebSocketFrame convert(StompHeadersSubframe original, ByteBuf encoded) {\n+        if (isTextFrame(original)) {\n+            return new TextWebSocketFrame(false, 0, encoded);\n+        }\n+\n+        return new BinaryWebSocketFrame(false, 0, encoded);\n+    }\n+\n+    @Override\n+    public WebSocketFrame convert(StompContentSubframe original, ByteBuf encoded) {\n+        if (original instanceof LastStompContentSubframe) {\n+            return new ContinuationWebSocketFrame(true, 0, encoded);\n         }\n \n-        out.clear();\n-        out.add(webSocketFrame);\n+        return new ContinuationWebSocketFrame(false, 0, encoded);\n     }\n \n-    private static ByteBuf getFirst(List<Object> container) {\n-        return (ByteBuf) container.get(0);\n+    private static boolean isTextFrame(StompHeadersSubframe headersSubframe) {", "originalCommit": "dd9ff3a681563343e4e2d92986bf39e358d0effd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMTg1NQ==", "url": "https://github.com/netty/netty/pull/10778#discussion_r526801855", "bodyText": "This is just example for STOMP over WS you can easily write yourself encoder", "author": "amizurov", "createdAt": "2020-11-19T11:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwNzUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "0ab6ae05b784feec1506f156280ff5603caa6796", "chunk": "diff --git a/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java b/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java\nindex 8fd42bdcfa..141b57a487 100644\n--- a/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java\n+++ b/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java\n\n@@ -23,7 +23,6 @@ import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.stomp.LastStompContentSubframe;\n import io.netty.handler.codec.stomp.StompContentSubframe;\n-import io.netty.handler.codec.stomp.StompEncodedSubframeConverter;\n import io.netty.handler.codec.stomp.StompFrame;\n import io.netty.handler.codec.stomp.StompHeaders;\n import io.netty.handler.codec.stomp.StompHeadersSubframe;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NjY5Mg==", "url": "https://github.com/netty/netty/pull/10778#discussion_r529446692", "bodyText": "This a breaking change as someone may have override this method with throws in the signature", "author": "normanmaurer", "createdAt": "2020-11-24T10:51:17Z", "path": "codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java", "diffHunk": "@@ -19,63 +19,91 @@\n import io.netty.buffer.ByteBufUtil;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageEncoder;\n-import io.netty.util.CharsetUtil;\n \n import java.util.List;\n import java.util.Map.Entry;\n \n+import static io.netty.handler.codec.stomp.StompConstants.*;\n+\n /**\n  * Encodes a {@link StompFrame} or a {@link StompSubframe} into a {@link ByteBuf}.\n  */\n public class StompSubframeEncoder extends MessageToMessageEncoder<StompSubframe> {\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {", "originalCommit": "fd7ed3e9ebfa0fb832660939eb4d87e3ba47a365", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMzc0NQ==", "url": "https://github.com/netty/netty/pull/10778#discussion_r534123745", "bodyText": "fixed", "author": "amizurov", "createdAt": "2020-12-02T12:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NjY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0ab6ae05b784feec1506f156280ff5603caa6796", "chunk": "diff --git a/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java\nindex d1e3e5b0ed..8bd20e2646 100644\n--- a/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java\n+++ b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java\n\n@@ -31,38 +31,64 @@ import static io.netty.handler.codec.stomp.StompConstants.*;\n public class StompSubframeEncoder extends MessageToMessageEncoder<StompSubframe> {\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {\n+    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n         if (msg instanceof StompFrame) {\n             StompFrame stompFrame = (StompFrame) msg;\n             ByteBuf buf = encodeFullFrame(stompFrame, ctx);\n \n-            out.add(converter().convert(stompFrame, buf));\n+            out.add(convertFullFrame(stompFrame, buf));\n         } else if (msg instanceof StompHeadersSubframe) {\n             StompHeadersSubframe stompHeadersSubframe = (StompHeadersSubframe) msg;\n             ByteBuf buf = ctx.alloc().buffer(headersSubFrameSize(stompHeadersSubframe));\n             encodeHeaders(stompHeadersSubframe, buf);\n \n-            out.add(converter().convert(stompHeadersSubframe, buf));\n+            out.add(convertHeadersSubFrame(stompHeadersSubframe, buf));\n         } else if (msg instanceof StompContentSubframe) {\n             StompContentSubframe stompContentSubframe = (StompContentSubframe) msg;\n             ByteBuf buf = encodeContent(stompContentSubframe, ctx);\n \n-            out.add(converter().convert(stompContentSubframe, buf));\n+            out.add(convertContentSubFrame(stompContentSubframe, buf));\n         }\n     }\n \n-    protected StompEncodedSubframeConverter<?> converter() {\n-        return StompEncodedSubframeConverter.NOOP;\n+    /**\n+     * An extension method to convert a STOMP encoded buffer to a different message type\n+     * based on an original {@link StompFrame} full frame.\n+     *\n+     * <p>By default an encoded buffer is returned as is.\n+     */\n+    protected Object convertFullFrame(StompFrame original, ByteBuf encoded) {\n+        return encoded;\n+    }\n+\n+    /**\n+     * An extension method to convert a STOMP encoded buffer to a different message type\n+     * based on an original {@link StompHeadersSubframe} headers sub frame.\n+     *\n+     * <p>By default an encoded buffer is returned as is.\n+     */\n+    protected Object convertHeadersSubFrame(StompHeadersSubframe original, ByteBuf encoded) {\n+        return encoded;\n+    }\n+\n+    /**\n+     * An extension method to convert a STOMP encoded buffer to a different message type\n+     * based on an original {@link StompHeadersSubframe} content sub frame.\n+     *\n+     * <p>By default an encoded buffer is returned as is.\n+     */\n+    protected Object convertContentSubFrame(StompContentSubframe original, ByteBuf encoded) {\n+        return encoded;\n     }\n \n     /**\n-     * Returns a heuristic size for headers (32 bytes per header line) + (2 bytes for colon and eol)\n-     * + (additional command buffer).\n+     * Returns a heuristic size for headers (32 bytes per header line) + (2 bytes for colon and eol) + (additional\n+     * command buffer).\n      */\n     protected int headersSubFrameSize(StompHeadersSubframe headersSubframe) {\n         int estimatedSize = headersSubframe.headers().size() * 34 + 48;\n         if (estimatedSize < 128) {\n-            return  128;\n+            return 128;\n         } else if (estimatedSize < 256) {\n             return 256;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NzcyOA==", "url": "https://github.com/netty/netty/pull/10778#discussion_r529447728", "bodyText": "same comment as above... The throws  needs to stay", "author": "normanmaurer", "createdAt": "2020-11-24T10:52:11Z", "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -16,53 +16,64 @@\n package io.netty.example.stomp.websocket;\n \n import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.CompositeByteBuf;\n import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompContentSubframe;\n+import io.netty.handler.codec.stomp.StompEncodedSubframeConverter;\n import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeaders;\n import io.netty.handler.codec.stomp.StompHeadersSubframe;\n import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n-public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder\n+        implements StompEncodedSubframeConverter<WebSocketFrame> {\n \n     @Override\n-    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {", "originalCommit": "fd7ed3e9ebfa0fb832660939eb4d87e3ba47a365", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMzcxNA==", "url": "https://github.com/netty/netty/pull/10778#discussion_r534123714", "bodyText": "fixed", "author": "amizurov", "createdAt": "2020-12-02T12:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NzcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0ab6ae05b784feec1506f156280ff5603caa6796", "chunk": "diff --git a/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java b/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java\nindex 8fd42bdcfa..141b57a487 100644\n--- a/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java\n+++ b/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java\n\n@@ -23,7 +23,6 @@ import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.stomp.LastStompContentSubframe;\n import io.netty.handler.codec.stomp.StompContentSubframe;\n-import io.netty.handler.codec.stomp.StompEncodedSubframeConverter;\n import io.netty.handler.codec.stomp.StompFrame;\n import io.netty.handler.codec.stomp.StompHeaders;\n import io.netty.handler.codec.stomp.StompHeadersSubframe;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0OTA2MQ==", "url": "https://github.com/netty/netty/pull/10778#discussion_r529449061", "bodyText": "Can't we just add protected methods or something like that ? Adding another interface feels very \"heavyweight\" .", "author": "normanmaurer", "createdAt": "2020-11-24T10:53:19Z", "path": "codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompEncodedSubframeConverter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.stomp;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+/**\n+ * Converter is responsible to convert encoded {@link StompSubframe} to other message type.\n+ */\n+public interface StompEncodedSubframeConverter<T> {", "originalCommit": "fd7ed3e9ebfa0fb832660939eb4d87e3ba47a365", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMzYxMg==", "url": "https://github.com/netty/netty/pull/10778#discussion_r534123612", "bodyText": "let's do it", "author": "amizurov", "createdAt": "2020-12-02T12:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0OTA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ab6ae05b784feec1506f156280ff5603caa6796", "chunk": "diff --git a/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompEncodedSubframeConverter.java b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompEncodedSubframeConverter.java\ndeleted file mode 100644\nindex 8a5a1b9fbd..0000000000\n--- a/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompEncodedSubframeConverter.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Copyright 2020 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package io.netty.handler.codec.stomp;\n-\n-import io.netty.buffer.ByteBuf;\n-\n-/**\n- * Converter is responsible to convert encoded {@link StompSubframe} to other message type.\n- */\n-public interface StompEncodedSubframeConverter<T> {\n-\n-    /**\n-     * A 'no operation' converter which returns the encoded frame as is.\n-     */\n-    StompEncodedSubframeConverter<ByteBuf> NOOP = new StompEncodedSubframeConverter<ByteBuf>() {\n-        @Override\n-        public ByteBuf convert(StompFrame original, ByteBuf encoded) {\n-            return encoded;\n-        }\n-\n-        @Override\n-        public ByteBuf convert(StompHeadersSubframe original, ByteBuf encoded) {\n-            return encoded;\n-        }\n-\n-        @Override\n-        public ByteBuf convert(StompContentSubframe original, ByteBuf encoded) {\n-            return encoded;\n-        }\n-    };\n-\n-    T convert(StompFrame original, ByteBuf encoded);\n-\n-    T convert(StompHeadersSubframe original, ByteBuf encoded);\n-\n-    T convert(StompContentSubframe original, ByteBuf encoded);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzOTAxNQ==", "url": "https://github.com/netty/netty/pull/10778#discussion_r534239015", "bodyText": "This one still needs to propagate the exception from the frame encoder.", "author": "chrisvest", "createdAt": "2020-12-02T15:05:51Z", "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java", "diffHunk": "@@ -52,13 +53,13 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n     }\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe stompFrame, List<Object> out) throws Exception {", "originalCommit": "f21c05aef871978f7036e2bcb54b159c1632eaf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MjMxMQ==", "url": "https://github.com/netty/netty/pull/10778#discussion_r534242311", "bodyText": "Thx fixed, missed this one  :(", "author": "amizurov", "createdAt": "2020-12-02T15:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzOTAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ab6ae05b784feec1506f156280ff5603caa6796", "chunk": "diff --git a/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java b/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java\nindex be690b961c..1ed211728d 100644\n--- a/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java\n+++ b/example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java\n\n@@ -53,7 +53,7 @@ public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocket\n     }\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe stompFrame, List<Object> out) {\n+    protected void encode(ChannelHandlerContext ctx, StompSubframe stompFrame, List<Object> out) throws Exception {\n         stompWebSocketFrameEncoder.encode(ctx, stompFrame, out);\n     }\n \n"}}, {"oid": "0ab6ae05b784feec1506f156280ff5603caa6796", "url": "https://github.com/netty/netty/commit/0ab6ae05b784feec1506f156280ff5603caa6796", "message": "Provide ability to extend StompSubframeEncoder and improve full stomp frame encoding (allocate one buffer for full frame considering the size of the headers)", "committedDate": "2020-12-04T16:00:53Z", "type": "commit"}, {"oid": "0ab6ae05b784feec1506f156280ff5603caa6796", "url": "https://github.com/netty/netty/commit/0ab6ae05b784feec1506f156280ff5603caa6796", "message": "Provide ability to extend StompSubframeEncoder and improve full stomp frame encoding (allocate one buffer for full frame considering the size of the headers)", "committedDate": "2020-12-04T16:00:53Z", "type": "forcePushed"}]}