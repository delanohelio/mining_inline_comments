{"pr_number": 10585, "pr_title": "Directly write / read sockaddr_in and sockaddr_in6 from direct memory", "pr_createdAt": "2020-09-17T08:32:12Z", "pr_url": "https://github.com/netty/netty/pull/10585", "timeline": [{"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f", "url": "https://github.com/netty/netty/commit/f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f", "message": "Directly write / read sockaddr_in and sockaddr_in6 from direct memory\nwithout JNI\n\nMotivation:\n\nWe want to keep the amount of JNI as small as possible to reduce the\nperformance overhead now that we eliminated the overhead of the need of\nit for syscalls.\n\nModifications:\n\nWrite / read sockaddr_in / sockaddr_in6 via PlatformDependent and so\neliminate the need for JNI\n\nResult:\n\nLess JNI and so less overhead for crossing the border.", "committedDate": "2020-09-17T08:31:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA3NzY4NQ==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490077685", "bodyText": "I think I need that for SQPOLL for 5.8/5.9 as accept op is not supported", "author": "1Jo1", "createdAt": "2020-09-17T08:48:58Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringServerChannel.java", "diffHunk": "@@ -69,12 +69,10 @@ public AbstractIOUringChannel getChannel() {\n         return this;\n     }\n \n-    abstract Channel newChildChannel(int fd, byte[] address, int offset, int len) throws Exception;\n+    abstract Channel newChildChannel(\n+            int fd, long acceptedAddressMemoryAddress, long acceptedAddressLengthMemoryAddress) throws Exception;\n \n     final class UringServerChannelUnsafe extends AbstractIOUringChannel.AbstractUringUnsafe {\n-        // Will hold the remote address after accept4(...) was successful.\n-        // We need 24 bytes for the address as maximum\n-        private final byte[] acceptedAddress = new byte[24];", "originalCommit": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4NDI4OA==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490084288", "bodyText": "If you need it we can add it again for the use-case.", "author": "normanmaurer", "createdAt": "2020-09-17T08:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA3NzY4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1ODQ0MQ==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490358441", "bodyText": "any reason for not doing return PlatformDependent.setMemory(memoryAddress, length, 0);?", "author": "njhill", "createdAt": "2020-09-17T15:49:29Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+\n+import static io.netty.util.internal.PlatformDependent.BIG_ENDIAN_NATIVE_ORDER;\n+\n+final class SockaddrIn {\n+    static final byte[] IPV4_MAPPED_IPV6_PREFIX = {\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xff };\n+    private SockaddrIn() { }\n+\n+    /**\n+     *\n+     * struct sockaddr_in {\n+     *      sa_family_t    sin_family; // address family: AF_INET\n+     *      in_port_t      sin_port;   // port in network byte order\n+     *      struct in_addr sin_addr;   // internet address\n+     * };\n+     *\n+     * // Internet address.\n+     * struct in_addr {\n+     *     uint32_t       s_addr;     // address in network byte order\n+     * };\n+     *\n+     */\n+    static int writeIPv4(long memory, InetAddress address, int port) {\n+        int written = 0;\n+        PlatformDependent.putShort(memory, Native.AF_INET);\n+        written += 2;\n+        PlatformDependent.putShort(memory + written, handleNetworkOrder((short) port));\n+        written += 2;\n+        byte[] bytes = address.getAddress();\n+        int offset = 0;\n+        if (bytes.length == 16) {\n+            // IPV6 mapped IPV4 address\n+            offset = 12;\n+        }\n+        assert bytes.length == offset + 4;\n+        PlatformDependent.copyMemory(bytes, offset, memory + written, 4);\n+        written += 4;\n+\n+        written += writePadding(memory + written, Native.SIZEOF_SOCKADDR_IN - written);\n+        assert written == Native.SIZEOF_SOCKADDR_IN;\n+        return written;\n+    }\n+\n+    /**\n+     * struct sockaddr_in6 {\n+     *     sa_family_t     sin6_family;   // AF_INET6\n+     *     in_port_t       sin6_port;     // port number\n+     *     uint32_t        sin6_flowinfo; // IPv6 flow information\n+     *     struct in6_addr sin6_addr;     // IPv6 address\n+     *     uint32_t        sin6_scope_id; /* Scope ID (new in 2.4)\n+     * };\n+     *\n+     * struct in6_addr{\n+     *     unsigned char s6_addr[16];   // IPv6 address\n+     * };\n+     */\n+    static int writeIPv6(long memory, InetAddress address, int port) {\n+        int written = 0;\n+        // AF_INET6\n+        PlatformDependent.putShort(memory, Native.AF_INET6);\n+        written += 2;\n+        PlatformDependent.putShort(memory + written, handleNetworkOrder((short) port));\n+        written += 2;\n+        PlatformDependent.putInt(memory + written, 0);\n+        written += 4;\n+        byte[] bytes = address.getAddress();\n+        if  (bytes.length == 4) {\n+            PlatformDependent.copyMemory(IPV4_MAPPED_IPV6_PREFIX, 0, memory + written, IPV4_MAPPED_IPV6_PREFIX.length);\n+            written += IPV4_MAPPED_IPV6_PREFIX.length;\n+            PlatformDependent.copyMemory(bytes, 0, memory + written, 4);\n+            written += 4;\n+            PlatformDependent.putInt(memory + written, 0);\n+            written += 4;\n+        } else {\n+            PlatformDependent.copyMemory(bytes, 0, memory + written, 16);\n+            written += 16;\n+            PlatformDependent.putInt(memory + written, ((Inet6Address) address).getScopeId());\n+            written += 4;\n+        }\n+        written += writePadding(memory + written, Native.SIZEOF_SOCKADDR_IN6 - written);\n+        assert written == Native.SIZEOF_SOCKADDR_IN6;\n+        return written;\n+    }\n+\n+    static InetSocketAddress readIPv4(long memory, byte[] tmpArray) {\n+        assert tmpArray.length == 4;\n+        int port = handleNetworkOrder(PlatformDependent.getShort(memory + 2)) & 0xFFFF;\n+        PlatformDependent.copyMemory(memory + 4, tmpArray, 0, 4);\n+        try {\n+            return new InetSocketAddress(InetAddress.getByAddress(tmpArray), port);\n+        } catch (UnknownHostException ignore) {\n+            return null;\n+        }\n+    }\n+\n+    static InetSocketAddress readIPv6(long memory, byte[] tmpArray) {\n+        assert tmpArray.length == 16;\n+        int port = handleNetworkOrder(PlatformDependent.getShort(memory + 2)) & 0xFFFF;\n+        PlatformDependent.copyMemory(memory + 8, tmpArray, 0, 16);\n+        int scopeId = PlatformDependent.getInt(memory + 24);\n+        try {\n+            return new InetSocketAddress(Inet6Address.getByAddress(null, tmpArray, scopeId), port);\n+        } catch (UnknownHostException ignore) {\n+            return null;\n+        }\n+    }\n+\n+    private static short handleNetworkOrder(short v) {\n+        return BIG_ENDIAN_NATIVE_ORDER ? v : Short.reverseBytes(v);\n+    }\n+\n+    /**\n+     * Fill with {@code 0}s if any padding is needed.\n+     */\n+    private static int writePadding(long memoryAddress, int length) {", "originalCommit": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzNDAxNA==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490434014", "bodyText": "no other reason then that I missed it :) Thanks for the tip :)", "author": "normanmaurer", "createdAt": "2020-09-17T17:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1ODQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b869d7814637fd64c197e24106e90807afa9b724", "chunk": "diff --git a/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java b/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java\nindex bf91b0ad57..0a60964ef9 100644\n--- a/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java\n+++ b/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java\n\n@@ -59,7 +59,9 @@ final class SockaddrIn {\n         PlatformDependent.copyMemory(bytes, offset, memory + written, 4);\n         written += 4;\n \n-        written += writePadding(memory + written, Native.SIZEOF_SOCKADDR_IN - written);\n+        int padding = Native.SIZEOF_SOCKADDR_IN - written;\n+        PlatformDependent.setMemory(memory + written, padding, (byte) 0);\n+        written += padding;\n         assert written == Native.SIZEOF_SOCKADDR_IN;\n         return written;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2MDMyMA==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490360320", "bodyText": "nit: any reason for not just incrementing memory in this and writeIPv6?", "author": "njhill", "createdAt": "2020-09-17T15:52:09Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+\n+import static io.netty.util.internal.PlatformDependent.BIG_ENDIAN_NATIVE_ORDER;\n+\n+final class SockaddrIn {\n+    static final byte[] IPV4_MAPPED_IPV6_PREFIX = {\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xff };\n+    private SockaddrIn() { }\n+\n+    /**\n+     *\n+     * struct sockaddr_in {\n+     *      sa_family_t    sin_family; // address family: AF_INET\n+     *      in_port_t      sin_port;   // port in network byte order\n+     *      struct in_addr sin_addr;   // internet address\n+     * };\n+     *\n+     * // Internet address.\n+     * struct in_addr {\n+     *     uint32_t       s_addr;     // address in network byte order\n+     * };\n+     *\n+     */\n+    static int writeIPv4(long memory, InetAddress address, int port) {\n+        int written = 0;", "originalCommit": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzNDUyMA==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490434520", "bodyText": "I did this to be able to assert easily. Let's keep it for now", "author": "normanmaurer", "createdAt": "2020-09-17T17:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2MDMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b869d7814637fd64c197e24106e90807afa9b724", "chunk": "diff --git a/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java b/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java\nindex bf91b0ad57..0a60964ef9 100644\n--- a/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java\n+++ b/transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java\n\n@@ -59,7 +59,9 @@ final class SockaddrIn {\n         PlatformDependent.copyMemory(bytes, offset, memory + written, 4);\n         written += 4;\n \n-        written += writePadding(memory + written, Native.SIZEOF_SOCKADDR_IN - written);\n+        int padding = Native.SIZEOF_SOCKADDR_IN - written;\n+        PlatformDependent.setMemory(memory + written, padding, (byte) 0);\n+        written += padding;\n         assert written == Native.SIZEOF_SOCKADDR_IN;\n         return written;\n     }\n"}}, {"oid": "6837250e1f5d88c99a1ca2de4c170ed951cb4c20", "url": "https://github.com/netty/netty/commit/6837250e1f5d88c99a1ca2de4c170ed951cb4c20", "message": "Address nicks comment", "committedDate": "2020-09-17T17:46:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ1MDk3Ng==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490450976", "bodyText": "@normanmaurer hmm, this wasn't my comment :)", "author": "njhill", "createdAt": "2020-09-17T17:55:52Z", "path": "testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java", "diffHunk": "@@ -189,7 +189,7 @@ public void channelRead0(ChannelHandlerContext ctx, Object msgs) throws Exceptio\n             for (ChannelFuture future: futures) {\n                 future.sync();\n             }\n-            if (!latch.await(10, TimeUnit.SECONDS)) {\n+            if (!latch.await(100000, TimeUnit.SECONDS)) {", "originalCommit": "6837250e1f5d88c99a1ca2de4c170ed951cb4c20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ1MjkwMA==", "url": "https://github.com/netty/netty/pull/10585#discussion_r490452900", "bodyText": "Fixed... doh!", "author": "normanmaurer", "createdAt": "2020-09-17T17:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ1MDk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b869d7814637fd64c197e24106e90807afa9b724", "chunk": "diff --git a/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java\nindex 4ed1dd6c5a..aca8b607be 100644\n--- a/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java\n+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java\n\n@@ -189,7 +189,7 @@ public class DatagramUnicastTest extends AbstractDatagramTest {\n             for (ChannelFuture future: futures) {\n                 future.sync();\n             }\n-            if (!latch.await(100000, TimeUnit.SECONDS)) {\n+            if (!latch.await(10, TimeUnit.SECONDS)) {\n                 Throwable error = errorRef.get();\n                 if (error != null) {\n                     throw error;\n"}}, {"oid": "b869d7814637fd64c197e24106e90807afa9b724", "url": "https://github.com/netty/netty/commit/b869d7814637fd64c197e24106e90807afa9b724", "message": "Revert file change", "committedDate": "2020-09-17T17:58:15Z", "type": "commit"}]}