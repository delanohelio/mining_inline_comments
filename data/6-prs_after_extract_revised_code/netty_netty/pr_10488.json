{"pr_number": 10488, "pr_title": "Expose a LoggingDnsQueryLifeCycleObserverFactory", "pr_createdAt": "2020-08-19T11:21:37Z", "pr_url": "https://github.com/netty/netty/pull/10488", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MDYzMQ==", "url": "https://github.com/netty/netty/pull/10488#discussion_r472980631", "bodyText": "Should we use a static logger and so use InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class) ?", "author": "normanmaurer", "createdAt": "2020-08-19T12:11:19Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        logger = InternalLoggerFactory.getInstance(getClass());", "originalCommit": "9565d30b37a21fb3066bc440948ac605d3dadeda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5bf0297871a9489a1dc2bf70e8d874193bdac79", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\nindex 7b4fe59073..9714678387 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MDY5Ng==", "url": "https://github.com/netty/netty/pull/10488#discussion_r472980696", "bodyText": "final", "author": "normanmaurer", "createdAt": "2020-08-19T12:11:25Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {", "originalCommit": "9565d30b37a21fb3066bc440948ac605d3dadeda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5bf0297871a9489a1dc2bf70e8d874193bdac79", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\nindex 7b4fe59073..9714678387 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MTE2Mw==", "url": "https://github.com/netty/netty/pull/10488#discussion_r472981163", "bodyText": "2020", "author": "normanmaurer", "createdAt": "2020-08-19T12:12:15Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017 The Netty Project", "originalCommit": "9565d30b37a21fb3066bc440948ac605d3dadeda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5bf0297871a9489a1dc2bf70e8d874193bdac79", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\nindex 7b4fe59073..9714678387 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 The Netty Project\n+ * Copyright 2020 The Netty Project\n  *\n  * The Netty Project licenses this file to you under the Apache License,\n  * version 2.0 (the \"License\"); you may not use this file except in compliance\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NTYxOA==", "url": "https://github.com/netty/netty/pull/10488#discussion_r472995618", "bodyText": "private ?", "author": "normanmaurer", "createdAt": "2020-08-19T12:37:30Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -30,8 +30,9 @@\n  * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n  * cause of resolution failure.\n  */\n-public class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n-    private final InternalLogger logger;\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    public static final InternalLogger LOGGER =", "originalCommit": "e8381c377e80fb4049c1436b8bad13b0e8d51605", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NzQwNg==", "url": "https://github.com/netty/netty/pull/10488#discussion_r472997406", "bodyText": "", "author": "chrisvest", "createdAt": "2020-08-19T12:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NTYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "c5bf0297871a9489a1dc2bf70e8d874193bdac79", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\nindex 5db46dfb9b..9714678387 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n\n@@ -31,7 +31,7 @@ import static java.util.Objects.requireNonNull;\n  * cause of resolution failure.\n  */\n public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n-    public static final InternalLogger LOGGER =\n+    private static final InternalLogger LOGGER =\n             InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n     private final InternalLogLevel level;\n \n"}}, {"oid": "c5bf0297871a9489a1dc2bf70e8d874193bdac79", "url": "https://github.com/netty/netty/commit/c5bf0297871a9489a1dc2bf70e8d874193bdac79", "message": "Address PR comments\n\nMotivation:\n We prefer to not make public classes extensible by default, unless there's a formal need.\n\nModification:\n LoggingDnsQueryLifeCycleObserverFactory is now final, and the InternalLogger instance\n is a constant.\n Also updated license header.\n\nResult:\n PR comments addressed.", "committedDate": "2020-08-19T12:38:14Z", "type": "forcePushed"}, {"oid": "95f22efc8558670271af807a93c78cfe7d67548c", "url": "https://github.com/netty/netty/commit/95f22efc8558670271af807a93c78cfe7d67548c", "message": "Expose a LoggingDnsQueryLifeCycleObserverFactory\n\nMotivation:\n There is a use case for having logging in the DnsNameResolver, similar to the LoggingHandler.\n Previously, one could set `traceEnabled` on the DnsNameResolverBuilder, but this is not very configurable.\n Specifically, the log level and the logger context cannot be changed.\n\nModification:\n Expose a LoggingDnsQueryLifeCycleObserverFactory, that permit changing the log-level\n and logger context.\n\nResult:\n It is now possible to get logging in the DnsNameResolver at a custom log level and logger,\n without very much effort.\n\nFixes #10485", "committedDate": "2020-08-19T13:21:57Z", "type": "commit"}, {"oid": "95f22efc8558670271af807a93c78cfe7d67548c", "url": "https://github.com/netty/netty/commit/95f22efc8558670271af807a93c78cfe7d67548c", "message": "Expose a LoggingDnsQueryLifeCycleObserverFactory\n\nMotivation:\n There is a use case for having logging in the DnsNameResolver, similar to the LoggingHandler.\n Previously, one could set `traceEnabled` on the DnsNameResolverBuilder, but this is not very configurable.\n Specifically, the log level and the logger context cannot be changed.\n\nModification:\n Expose a LoggingDnsQueryLifeCycleObserverFactory, that permit changing the log-level\n and logger context.\n\nResult:\n It is now possible to get logging in the DnsNameResolver at a custom log level and logger,\n without very much effort.\n\nFixes #10485", "committedDate": "2020-08-19T13:21:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMzI3OQ==", "url": "https://github.com/netty/netty/pull/10488#discussion_r473033279", "bodyText": "May be add requireNonNull(classContext)", "author": "violetagg", "createdAt": "2020-08-19T13:34:37Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(classContext);", "originalCommit": "95f22efc8558670271af807a93c78cfe7d67548c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5a9cf8d23bd313fba07d521b8977aaac2823687", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\nindex 1d755ae911..f24222b353 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n\n@@ -60,18 +60,18 @@ public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLi\n      */\n     public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n         this.level = checkAndConvertLevel(level);\n-        logger = InternalLoggerFactory.getInstance(classContext);\n+        logger = InternalLoggerFactory.getInstance(requireNonNull(classContext, \"classContext\"));\n     }\n \n     /**\n      * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given name context,\n      * at the given log level.\n-     * @param nameContext The name context for the logger to use.\n+     * @param name The name for the logger to use.\n      * @param level The log level to use for logging resolver events.\n      */\n-    public LoggingDnsQueryLifeCycleObserverFactory(String nameContext, LogLevel level) {\n+    public LoggingDnsQueryLifeCycleObserverFactory(String name, LogLevel level) {\n         this.level = checkAndConvertLevel(level);\n-        logger = InternalLoggerFactory.getInstance(nameContext);\n+        logger = InternalLoggerFactory.getInstance(requireNonNull(name, \"name\"));\n     }\n \n     private static InternalLogLevel checkAndConvertLevel(LogLevel level) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMzYxNg==", "url": "https://github.com/netty/netty/pull/10488#discussion_r473033616", "bodyText": "May be add requireNonNull(nameContext)", "author": "violetagg", "createdAt": "2020-08-19T13:35:03Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(classContext);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given name context,\n+     * at the given log level.\n+     * @param nameContext The name context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(String nameContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(nameContext);", "originalCommit": "95f22efc8558670271af807a93c78cfe7d67548c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5a9cf8d23bd313fba07d521b8977aaac2823687", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\nindex 1d755ae911..f24222b353 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n\n@@ -60,18 +60,18 @@ public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLi\n      */\n     public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n         this.level = checkAndConvertLevel(level);\n-        logger = InternalLoggerFactory.getInstance(classContext);\n+        logger = InternalLoggerFactory.getInstance(requireNonNull(classContext, \"classContext\"));\n     }\n \n     /**\n      * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given name context,\n      * at the given log level.\n-     * @param nameContext The name context for the logger to use.\n+     * @param name The name for the logger to use.\n      * @param level The log level to use for logging resolver events.\n      */\n-    public LoggingDnsQueryLifeCycleObserverFactory(String nameContext, LogLevel level) {\n+    public LoggingDnsQueryLifeCycleObserverFactory(String name, LogLevel level) {\n         this.level = checkAndConvertLevel(level);\n-        logger = InternalLoggerFactory.getInstance(nameContext);\n+        logger = InternalLoggerFactory.getInstance(requireNonNull(name, \"name\"));\n     }\n \n     private static InternalLogLevel checkAndConvertLevel(LogLevel level) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNjE3OA==", "url": "https://github.com/netty/netty/pull/10488#discussion_r473036178", "bodyText": "nit: I would just call this name", "author": "normanmaurer", "createdAt": "2020-08-19T13:38:35Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(classContext);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given name context,\n+     * at the given log level.\n+     * @param nameContext The name context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(String nameContext, LogLevel level) {", "originalCommit": "95f22efc8558670271af807a93c78cfe7d67548c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5a9cf8d23bd313fba07d521b8977aaac2823687", "chunk": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\nindex 1d755ae911..f24222b353 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java\n\n@@ -60,18 +60,18 @@ public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLi\n      */\n     public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n         this.level = checkAndConvertLevel(level);\n-        logger = InternalLoggerFactory.getInstance(classContext);\n+        logger = InternalLoggerFactory.getInstance(requireNonNull(classContext, \"classContext\"));\n     }\n \n     /**\n      * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given name context,\n      * at the given log level.\n-     * @param nameContext The name context for the logger to use.\n+     * @param name The name for the logger to use.\n      * @param level The log level to use for logging resolver events.\n      */\n-    public LoggingDnsQueryLifeCycleObserverFactory(String nameContext, LogLevel level) {\n+    public LoggingDnsQueryLifeCycleObserverFactory(String name, LogLevel level) {\n         this.level = checkAndConvertLevel(level);\n-        logger = InternalLoggerFactory.getInstance(nameContext);\n+        logger = InternalLoggerFactory.getInstance(requireNonNull(name, \"name\"));\n     }\n \n     private static InternalLogLevel checkAndConvertLevel(LogLevel level) {\n"}}, {"oid": "f5a9cf8d23bd313fba07d521b8977aaac2823687", "url": "https://github.com/netty/netty/commit/f5a9cf8d23bd313fba07d521b8977aaac2823687", "message": "Fix PR comments", "committedDate": "2020-08-19T13:42:49Z", "type": "commit"}]}