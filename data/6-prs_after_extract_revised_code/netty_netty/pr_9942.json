{"pr_number": 9942, "pr_title": "DecodeHexBenchmark is too branch-predictor friendly", "pr_createdAt": "2020-01-10T16:02:00Z", "pr_url": "https://github.com/netty/netty/pull/9942", "timeline": [{"oid": "01bfbf1609f6885b80263b5c0b7a6da7da5bbafc", "url": "https://github.com/netty/netty/commit/01bfbf1609f6885b80263b5c0b7a6da7da5bbafc", "message": "DecodeHexBenchmark is too branch-predictor friendly\n\nMotivation:\n\nDecodeHexBenchmark needs to be less branch-predictor friendly\nto mimic the \"real\" behaviour while decoding\n\nModifications:\n\nDecodeHexBenchmark uses a larger sets of inputs, picking them at\nrandom on each iteration and the benchmarked method is made !inlineable\n\nResult:\n\nDecodeHexBenchmark is more trusty while showing the performance\ndifference between different decoding methods", "committedDate": "2020-01-10T15:59:03Z", "type": "commit"}, {"oid": "77f5480bf9f2c60907ddf52abcfdf5a73a00aa9d", "url": "https://github.com/netty/netty/commit/77f5480bf9f2c60907ddf52abcfdf5a73a00aa9d", "message": "Reduced GC, used a fixed seed to generate strings and used\nFisher\u2013Yates shuffle on input string", "committedDate": "2020-01-10T17:33:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MTkzMQ==", "url": "https://github.com/netty/netty/pull/9942#discussion_r366551931", "bodyText": "why long not int? and I guess something like ^= might be cheaper than +=? (maybe insignificant though...)", "author": "njhill", "createdAt": "2020-01-14T20:17:57Z", "path": "microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java", "diffHunk": "@@ -43,37 +47,71 @@\n             \"4DDeA5gDD1C6fE567E1b6gf0C40FEcDg\",\n     })\n     private String hex;\n-    private char[] hexDigits;\n+    @Param({ \"1\", \"10\" })\n+    private int inputs;\n+    private char[][] hexDigits;\n+    private static final long SEED = 1578675524L;\n \n     @Setup\n     public void init() {\n-        hexDigits = hex.toCharArray();\n+        final char[] hexCh = hex.toCharArray();\n+        hexDigits = new char[inputs][];\n+        hexDigits[0] = hexCh;\n+        if (inputs > 1) {\n+            final Random rnd = new Random(SEED);\n+            for (int i = 1; i < inputs; i++) {\n+                hexDigits[i] = shuffle(Arrays.copyOf(hexCh, hexCh.length), rnd);\n+            }\n+        }\n+    }\n+\n+    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n+    private static char[] shuffle(char[] chars, Random rnd) {\n+        int index;\n+        char tmp;\n+        for (int i = chars.length - 1; i > 0; i--) {\n+            index = rnd.nextInt(i + 1);\n+            tmp = chars[index];\n+            chars[index] = chars[i];\n+            chars[i] = tmp;\n+        }\n+        return chars;\n+    }\n+\n+    private int nextHexDigits() {\n+        // always use ThreadLocalRandom here:\n+        // we want the inputs = 1 and inputs > 1 to be comparable\n+        // and saving using ThreadLocalRandom have impacts!\n+        return ThreadLocalRandom.current().nextInt(0, inputs);\n     }\n \n     @Benchmark\n+    @CompilerControl(Mode.DONT_INLINE)\n     public long hexDigits() {\n         long v = 0;", "originalCommit": "77f5480bf9f2c60907ddf52abcfdf5a73a00aa9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3Mzg0MA==", "url": "https://github.com/netty/netty/pull/9942#discussion_r366773840", "bodyText": "(maybe insignificant though...)\n\nJust tried and on my laptop not getting any meaningful differences!", "author": "franz1981", "createdAt": "2020-01-15T09:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MTkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "43e4d3dce63cae9454ac46f577bd4a9f3d9bf1d7", "chunk": "diff --git a/microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java b/microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java\nindex 60bed3865e..e0323496ae 100644\n--- a/microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java\n+++ b/microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java\n\n@@ -47,14 +47,19 @@ public class DecodeHexBenchmark extends AbstractMicrobenchmark {\n             \"4DDeA5gDD1C6fE567E1b6gf0C40FEcDg\",\n     })\n     private String hex;\n-    @Param({ \"1\", \"10\" })\n+    // Needs to specify a high number of inputs to allow the current strategy\n+    // on nextHexDigits to produce enough branch-misses\n+    @Param({ \"2048\" })\n     private int inputs;\n     private char[][] hexDigits;\n     private static final long SEED = 1578675524L;\n+    private long next;\n \n     @Setup\n     public void init() {\n         final char[] hexCh = hex.toCharArray();\n+        next = 0;\n+        inputs = Pow2.roundToPowerOfTwo(inputs);\n         hexDigits = new char[inputs][];\n         hexDigits[0] = hexCh;\n         if (inputs > 1) {\n"}}, {"oid": "43e4d3dce63cae9454ac46f577bd4a9f3d9bf1d7", "url": "https://github.com/netty/netty/commit/43e4d3dce63cae9454ac46f577bd4a9f3d9bf1d7", "message": "Switching to an higher number of inputs and simplified nextHexDigits", "committedDate": "2020-01-15T13:39:06Z", "type": "commit"}]}