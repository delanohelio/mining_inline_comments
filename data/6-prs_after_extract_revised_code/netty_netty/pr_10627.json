{"pr_number": 10627, "pr_title": "Dont pool IovArray but just allocate on the fly", "pr_createdAt": "2020-10-01T08:28:27Z", "pr_url": "https://github.com/netty/netty/pull/10627", "timeline": [{"oid": "591b82def6e5108c7011d45466c031e196c2a517", "url": "https://github.com/netty/netty/commit/591b82def6e5108c7011d45466c031e196c2a517", "message": "Dont pool IovArray but just allocate on the fly\n\nMotivation:\n\nPooling and re-using IovArray works for now but is not safe in its\ncurrent form once SQPOLL is used as we can not assume we can re-use the\nIovArray once we called submit.\n\nModifications:\n\nJust allocate the IovArray on the fly when needed by using the\nByteBufAllocator\n\nResult:\n\nCode is safe even with SQPOLL", "committedDate": "2020-10-01T08:22:25Z", "type": "commit"}, {"oid": "8103e96da67e19ef8acfae5988391c5e08ef5b4a", "url": "https://github.com/netty/netty/commit/8103e96da67e19ef8acfae5988391c5e08ef5b4a", "message": "Merge branch 'io-uring' into iovarray_reuse", "committedDate": "2020-10-01T08:29:25Z", "type": "commit"}, {"oid": "ada396a609d0a559222e7d3920d4afc4b2761c66", "url": "https://github.com/netty/netty/commit/ada396a609d0a559222e7d3920d4afc4b2761c66", "message": "simplify", "committedDate": "2020-10-01T08:34:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTA2Nw==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498081067", "bodyText": "Hang on, what's up with the setLong?", "author": "chrisvest", "createdAt": "2020-10-01T08:44:20Z", "path": "transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java", "diffHunk": "@@ -141,17 +146,17 @@ private boolean add(long addr, int len) {\n                 PlatformDependent.putLong(baseOffset + memoryAddress, addr);\n                 PlatformDependent.putLong(lengthOffset + memoryAddress, len);\n             } else {\n-                memory.putLong(baseOffset, addr);\n-                memory.putLong(lengthOffset, len);\n+                memory.setLong(baseOffset, addr);\n+                memory.setLong(lengthOffset, len);\n             }\n         } else {\n             assert ADDRESS_SIZE == 4;\n             if (PlatformDependent.hasUnsafe()) {\n                 PlatformDependent.putInt(baseOffset + memoryAddress, (int) addr);\n                 PlatformDependent.putInt(lengthOffset + memoryAddress, len);\n             } else {\n-                memory.putInt(baseOffset, (int) addr);\n-                memory.putInt(lengthOffset, len);\n+                memory.setLong(baseOffset, (int) addr);\n+                memory.setLong(lengthOffset, len);", "originalCommit": "ada396a609d0a559222e7d3920d4afc4b2761c66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA5ODQ2Mw==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498098463", "bodyText": "arg... that should be setInt... Thanks", "author": "normanmaurer", "createdAt": "2020-10-01T09:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ed70dfe5a1a731f5a1d23e527009b454d07fab9e", "chunk": "diff --git a/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java b/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java\nindex 008279f9ff..372c44c67b 100644\n--- a/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java\n+++ b/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java\n\n@@ -155,8 +157,8 @@ public final class IovArray implements MessageProcessor {\n                 PlatformDependent.putInt(baseOffset + memoryAddress, (int) addr);\n                 PlatformDependent.putInt(lengthOffset + memoryAddress, len);\n             } else {\n-                memory.setLong(baseOffset, (int) addr);\n-                memory.setLong(lengthOffset, len);\n+                memory.setInt(baseOffset, (int) addr);\n+                memory.setInt(lengthOffset, len);\n             }\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMDQyNA==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498100424", "bodyText": "do we still need the submissionQueueCallback in the future?", "author": "1Jo1", "createdAt": "2020-10-01T09:16:58Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -65,14 +63,10 @@\n         // Ensure that we load all native bits as otherwise it may fail when try to use native methods in IovArray\n         IOUring.ensureAvailability();\n \n-        // TODO: Let's hard code this to 8 IovArrays to keep the memory overhead kind of small. We may want to consider\n-        //       allow to change this in the future.\n-        iovArrays = new IovArrays(8);\n         ringBuffer = Native.createRingBuffer(ringSize, iosqeAsyncThreshold, new Runnable() {\n             @Override\n             public void run() {\n-                // Once we submitted its safe to clear the IovArrays and so be able to re-use these.\n-                iovArrays.clear();\n+                // NOOP", "originalCommit": "ada396a609d0a559222e7d3920d4afc4b2761c66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMzI0Mw==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498103243", "bodyText": "maybe... not sure yet. We can rip it out if we find no usage. It doesn't hurt atm", "author": "normanmaurer", "createdAt": "2020-10-01T09:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMDQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwNjAxMg==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498106012", "bodyText": "let's remove it, @njhill what do you think?", "author": "1Jo1", "createdAt": "2020-10-01T09:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMDQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3OTA4Nw==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498179087", "bodyText": "ok let me do it...", "author": "normanmaurer", "createdAt": "2020-10-01T11:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMDQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "dccc73ce60ae989fb90a6544e9bfc0c4644f7c27", "chunk": "diff --git a/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java b/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\nindex 7128a4c3c6..7ddf4ddf8c 100644\n--- a/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\n+++ b/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\n\n@@ -63,12 +63,7 @@ final class IOUringEventLoop extends SingleThreadEventLoop implements IOUringCom\n         // Ensure that we load all native bits as otherwise it may fail when try to use native methods in IovArray\n         IOUring.ensureAvailability();\n \n-        ringBuffer = Native.createRingBuffer(ringSize, iosqeAsyncThreshold, new Runnable() {\n-            @Override\n-            public void run() {\n-                // NOOP\n-            }\n-        });\n+        ringBuffer = Native.createRingBuffer(ringSize, iosqeAsyncThreshold);\n \n         eventfd = Native.newBlockingEventFd();\n         logger.trace(\"New EventLoop: {}\", this.toString());\n"}}, {"oid": "ed70dfe5a1a731f5a1d23e527009b454d07fab9e", "url": "https://github.com/netty/netty/commit/ed70dfe5a1a731f5a1d23e527009b454d07fab9e", "message": "Use setInt(...) and also ensure we not try to write more than what the buffer supports", "committedDate": "2020-10-01T09:18:17Z", "type": "commit"}, {"oid": "b71f8e36ef709de609d98a402558aae9765173e0", "url": "https://github.com/netty/netty/commit/b71f8e36ef709de609d98a402558aae9765173e0", "message": "simplify", "committedDate": "2020-10-01T09:23:22Z", "type": "commit"}, {"oid": "dccc73ce60ae989fb90a6544e9bfc0c4644f7c27", "url": "https://github.com/netty/netty/commit/dccc73ce60ae989fb90a6544e9bfc0c4644f7c27", "message": "remove submit callback as its not used anymore", "committedDate": "2020-10-01T11:47:42Z", "type": "commit"}, {"oid": "739cf4b94c1e4a8ac27109f74cc6d0dcea66419c", "url": "https://github.com/netty/netty/commit/739cf4b94c1e4a8ac27109f74cc6d0dcea66419c", "message": "ordering", "committedDate": "2020-10-01T12:44:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxODg2NA==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498418864", "bodyText": "iovArray = null here?", "author": "njhill", "createdAt": "2020-10-01T17:52:08Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringStreamChannel.java", "diffHunk": "@@ -209,16 +210,22 @@ protected Executor prepareToClose() {\n         }\n \n         private ByteBuf readBuffer;\n+        private IovArray iovArray;\n \n         @Override\n         protected int scheduleWriteMultiple(ChannelOutboundBuffer in) {\n-            final IovArray iovecArray = ((IOUringEventLoop) eventLoop()).iovArray();\n+            assert iovArray == null;\n+            int numElements = Math.min(in.size(), Limits.IOV_MAX);\n+            ByteBuf iovArrayBuffer = alloc().directBuffer(numElements * IovArray.IOV_SIZE);\n+            iovArray = new IovArray(iovArrayBuffer);\n             try {\n-                int offset = iovecArray.count();\n-                in.forEachFlushedMessage(iovecArray);\n+                int offset = iovArray.count();\n+                in.forEachFlushedMessage(iovArray);\n                 submissionQueue().addWritev(socket.intValue(),\n-                        iovecArray.memoryAddress(offset), iovecArray.count() - offset, (short) 0);\n+                        iovArray.memoryAddress(offset), iovArray.count() - offset, (short) 0);\n             } catch (Exception e) {\n+                iovArray.release();", "originalCommit": "739cf4b94c1e4a8ac27109f74cc6d0dcea66419c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "777ed363d33315e25ea489f347baf92cae32ef38", "chunk": "diff --git a/transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringStreamChannel.java b/transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringStreamChannel.java\nindex 07424ec441..65782e3311 100644\n--- a/transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringStreamChannel.java\n+++ b/transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringStreamChannel.java\n\n@@ -225,6 +225,7 @@ abstract class AbstractIOUringStreamChannel extends AbstractIOUringChannel imple\n                         iovArray.memoryAddress(offset), iovArray.count() - offset, (short) 0);\n             } catch (Exception e) {\n                 iovArray.release();\n+                iovArray = null;\n \n                 // This should never happen, anyway fallback to single write.\n                 scheduleWriteSingle(in.current());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxOTc0Ng==", "url": "https://github.com/netty/netty/pull/10627#discussion_r498419746", "bodyText": "only do this if !PlatformDependent.hasUnsafe()? otherwise we're unnecessarily allocating/wrapping on intel", "author": "njhill", "createdAt": "2020-10-01T17:53:44Z", "path": "transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java", "diffHunk": "@@ -52,23 +54,29 @@\n      * The size of an {@code iovec} struct in bytes. This is calculated as we have 2 entries each of the size of the\n      * address.\n      */\n-    private static final int IOV_SIZE = 2 * ADDRESS_SIZE;\n+    public static final int IOV_SIZE = 2 * ADDRESS_SIZE;\n \n     /**\n      * The needed memory to hold up to {@code IOV_MAX} iov entries, where {@code IOV_MAX} signified\n      * the maximum number of {@code iovec} structs that can be passed to {@code writev(...)}.\n      */\n-    private static final int CAPACITY = IOV_MAX * IOV_SIZE;\n+    private static final int MAX_CAPACITY = IOV_MAX * IOV_SIZE;\n \n-    private final ByteBuffer memory;\n-    private final long memoryAddress;\n+    private final ByteBuf memory;\n     private int count;\n     private long size;\n     private long maxBytes = SSIZE_MAX;\n \n     public IovArray() {\n-        memory = Buffer.allocateDirectWithNativeOrder(CAPACITY);\n-        memoryAddress = Buffer.memoryAddress(memory);\n+        this(Unpooled.wrappedBuffer(Buffer.allocateDirectWithNativeOrder(MAX_CAPACITY)));\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    public IovArray(ByteBuf memory) {\n+        assert memory.writerIndex() == 0;\n+        assert memory.readerIndex() == 0;\n+        this.memory = memory.order(\n+                PlatformDependent.BIG_ENDIAN_NATIVE_ORDER ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);", "originalCommit": "739cf4b94c1e4a8ac27109f74cc6d0dcea66419c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "777ed363d33315e25ea489f347baf92cae32ef38", "chunk": "diff --git a/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java b/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java\nindex e9911dff35..0e28176d0a 100644\n--- a/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java\n+++ b/transport-native-unix-common/src/main/java/io/netty/channel/unix/IovArray.java\n\n@@ -75,7 +75,7 @@ public final class IovArray implements MessageProcessor {\n     public IovArray(ByteBuf memory) {\n         assert memory.writerIndex() == 0;\n         assert memory.readerIndex() == 0;\n-        this.memory = memory.order(\n+        this.memory = PlatformDependent.hasUnsafe() ? memory : memory.order(\n                 PlatformDependent.BIG_ENDIAN_NATIVE_ORDER ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);\n     }\n \n"}}, {"oid": "777ed363d33315e25ea489f347baf92cae32ef38", "url": "https://github.com/netty/netty/commit/777ed363d33315e25ea489f347baf92cae32ef38", "message": "Address comments", "committedDate": "2020-10-01T18:30:02Z", "type": "commit"}, {"oid": "aa02377cd0166e8fe30aaae5252edc746b9c5b37", "url": "https://github.com/netty/netty/commit/aa02377cd0166e8fe30aaae5252edc746b9c5b37", "message": "Update index", "committedDate": "2020-10-02T05:10:24Z", "type": "commit"}]}