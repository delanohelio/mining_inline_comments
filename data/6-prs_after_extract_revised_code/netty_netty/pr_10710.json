{"pr_number": 10710, "pr_title": "Minor performance improvement in websocket upgrade", "pr_createdAt": "2020-10-20T00:44:50Z", "pr_url": "https://github.com/netty/netty/pull/10710", "timeline": [{"oid": "1f2a3c3bd600cc17d8ba001c86093c4fc6158cd8", "url": "https://github.com/netty/netty/commit/1f2a3c3bd600cc17d8ba001c86093c4fc6158cd8", "message": "Minor performance improvement in websocket upgrade\n\nMotivation:\n\nI noticed WebSocketServerExtensionHandler taking up a non-trivial\namount of CPU time for a non-websocket based menchmark. This attempts\nto speed it up.\n\nModifications:\n\n- It is faster to check for a 101 response than to look at headers,\nso an initial response code check is done\n- Move all the actual upgrade code into its own method to increase\nchance of this method being inlined\n\nResult:\n\nA small but noticable performance increase.\n\nSigned-off-by: Stuart Douglas <stuart.w.douglas@gmail.com>", "committedDate": "2020-10-20T03:34:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1MTYzOQ==", "url": "https://github.com/netty/netty/pull/10710#discussion_r508251639", "bodyText": "nit: please use:\nHttpResponseStatus.SWITCHING_PROTOCOLS.equals(httpResponse.status())", "author": "normanmaurer", "createdAt": "2020-10-20T06:55:22Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java", "diffHunk": "@@ -104,50 +105,60 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n     @Override\n     public void write(final ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n         if (msg instanceof HttpResponse) {\n-            HttpHeaders headers = ((HttpResponse) msg).headers();\n+            HttpResponse httpResponse = (HttpResponse) msg;\n+            //checking the status is faster than looking at headers\n+            //so we do this first\n+            if (httpResponse.status().code() == HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {", "originalCommit": "1f2a3c3bd600cc17d8ba001c86093c4fc6158cd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9856446d76ef546aebac189e6bf2a635ba3f2e9", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java\nindex 0c2c8a39bf..9517b778cc 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java\n\n@@ -108,7 +108,7 @@ public class WebSocketServerExtensionHandler extends ChannelDuplexHandler {\n             HttpResponse httpResponse = (HttpResponse) msg;\n             //checking the status is faster than looking at headers\n             //so we do this first\n-            if (httpResponse.status().code() == HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {\n+            if (HttpResponseStatus.SWITCHING_PROTOCOLS.equals(httpResponse.status())) {\n                 handlePotentialUpgrade(ctx, promise, httpResponse);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2NTM5OQ==", "url": "https://github.com/netty/netty/pull/10710#discussion_r508265399", "bodyText": "As we're already here, we can move ctx.name() to own local variable out of the loop. That will help the compiler a bit.", "author": "doom369", "createdAt": "2020-10-20T07:21:32Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java", "diffHunk": "@@ -104,50 +105,60 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n     @Override\n     public void write(final ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n         if (msg instanceof HttpResponse) {\n-            HttpHeaders headers = ((HttpResponse) msg).headers();\n+            HttpResponse httpResponse = (HttpResponse) msg;\n+            //checking the status is faster than looking at headers\n+            //so we do this first\n+            if (httpResponse.status().code() == HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {\n+                handlePotentialUpgrade(ctx, promise, httpResponse);\n+            }\n+        }\n \n-            if (WebSocketExtensionUtil.isWebsocketUpgrade(headers)) {\n+        super.write(ctx, msg, promise);\n+    }\n \n-                if (validExtensions != null) {\n-                    String headerValue = headers.getAsString(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS);\n+    private void handlePotentialUpgrade(final ChannelHandlerContext ctx,\n+                                        ChannelPromise promise, HttpResponse httpResponse) {\n+        HttpHeaders headers = httpResponse.headers();\n \n-                    for (WebSocketServerExtension extension : validExtensions) {\n-                        WebSocketExtensionData extensionData = extension.newReponseData();\n-                        headerValue = WebSocketExtensionUtil.appendExtension(headerValue,\n-                                                                             extensionData.name(),\n-                                                                             extensionData.parameters());\n-                    }\n-                    promise.addListener(new ChannelFutureListener() {\n-                        @Override\n-                        public void operationComplete(ChannelFuture future) {\n-                            if (future.isSuccess()) {\n-                                for (WebSocketServerExtension extension : validExtensions) {\n-                                    WebSocketExtensionDecoder decoder = extension.newExtensionDecoder();\n-                                    WebSocketExtensionEncoder encoder = extension.newExtensionEncoder();\n-                                    ctx.pipeline()\n-                                       .addAfter(ctx.name(), decoder.getClass().getName(), decoder)\n-                                       .addAfter(ctx.name(), encoder.getClass().getName(), encoder);\n-                                }\n-                            }\n-                        }\n-                    });\n+        if (WebSocketExtensionUtil.isWebsocketUpgrade(headers)) {\n \n-                    if (headerValue != null) {\n-                        headers.set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, headerValue);\n-                    }\n-                }\n+            if (validExtensions != null) {\n+                String headerValue = headers.getAsString(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS);\n \n+                for (WebSocketServerExtension extension : validExtensions) {\n+                    WebSocketExtensionData extensionData = extension.newReponseData();\n+                    headerValue = WebSocketExtensionUtil.appendExtension(headerValue,\n+                        extensionData.name(),\n+                        extensionData.parameters());\n+                }\n                 promise.addListener(new ChannelFutureListener() {\n                     @Override\n                     public void operationComplete(ChannelFuture future) {\n                         if (future.isSuccess()) {\n-                            ctx.pipeline().remove(WebSocketServerExtensionHandler.this);\n+                            for (WebSocketServerExtension extension : validExtensions) {\n+                                WebSocketExtensionDecoder decoder = extension.newExtensionDecoder();\n+                                WebSocketExtensionEncoder encoder = extension.newExtensionEncoder();\n+                                ctx.pipeline()\n+                                    .addAfter(ctx.name(), decoder.getClass().getName(), decoder)\n+                                    .addAfter(ctx.name(), encoder.getClass().getName(), encoder);", "originalCommit": "1f2a3c3bd600cc17d8ba001c86093c4fc6158cd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2Njk4OA==", "url": "https://github.com/netty/netty/pull/10710#discussion_r508266988", "bodyText": "Good idea, especially if this code isn't going to get hot most of the time", "author": "franz1981", "createdAt": "2020-10-20T07:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2NTM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9856446d76ef546aebac189e6bf2a635ba3f2e9", "chunk": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java\nindex 0c2c8a39bf..9517b778cc 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandler.java\n\n@@ -108,7 +108,7 @@ public class WebSocketServerExtensionHandler extends ChannelDuplexHandler {\n             HttpResponse httpResponse = (HttpResponse) msg;\n             //checking the status is faster than looking at headers\n             //so we do this first\n-            if (httpResponse.status().code() == HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {\n+            if (HttpResponseStatus.SWITCHING_PROTOCOLS.equals(httpResponse.status())) {\n                 handlePotentialUpgrade(ctx, promise, httpResponse);\n             }\n         }\n"}}, {"oid": "c9856446d76ef546aebac189e6bf2a635ba3f2e9", "url": "https://github.com/netty/netty/commit/c9856446d76ef546aebac189e6bf2a635ba3f2e9", "message": "Minor performance improvement in websocket upgrade\n\nMotivation:\n\nI noticed WebSocketServerExtensionHandler taking up a non-trivial\namount of CPU time for a non-websocket based menchmark. This attempts\nto speed it up.\n\nModifications:\n\n- It is faster to check for a 101 response than to look at headers,\nso an initial response code check is done\n- Move all the actual upgrade code into its own method to increase\nchance of this method being inlined\n- Add an extra contains() check for the upgrade header, to avoid\nallocating an iterator if there is no upgrade header\n\nResult:\n\nA small but noticable performance increase.\n\nSigned-off-by: Stuart Douglas <stuart.w.douglas@gmail.com>", "committedDate": "2020-10-20T22:42:24Z", "type": "forcePushed"}, {"oid": "27da2cd734ecd58ffaa657ecb304cbae5aa84897", "url": "https://github.com/netty/netty/commit/27da2cd734ecd58ffaa657ecb304cbae5aa84897", "message": "Minor performance improvement in websocket upgrade\n\nMotivation:\n\nI noticed WebSocketServerExtensionHandler taking up a non-trivial\namount of CPU time for a non-websocket based menchmark. This attempts\nto speed it up.\n\nModifications:\n\n- It is faster to check for a 101 response than to look at headers,\nso an initial response code check is done\n- Move all the actual upgrade code into its own method to increase\nchance of this method being inlined\n- Add an extra contains() check for the upgrade header, to avoid\nallocating an iterator if there is no upgrade header\n\nResult:\n\nA small but noticable performance increase.\n\nSigned-off-by: Stuart Douglas <stuart.w.douglas@gmail.com>", "committedDate": "2020-10-20T22:51:41Z", "type": "commit"}, {"oid": "27da2cd734ecd58ffaa657ecb304cbae5aa84897", "url": "https://github.com/netty/netty/commit/27da2cd734ecd58ffaa657ecb304cbae5aa84897", "message": "Minor performance improvement in websocket upgrade\n\nMotivation:\n\nI noticed WebSocketServerExtensionHandler taking up a non-trivial\namount of CPU time for a non-websocket based menchmark. This attempts\nto speed it up.\n\nModifications:\n\n- It is faster to check for a 101 response than to look at headers,\nso an initial response code check is done\n- Move all the actual upgrade code into its own method to increase\nchance of this method being inlined\n- Add an extra contains() check for the upgrade header, to avoid\nallocating an iterator if there is no upgrade header\n\nResult:\n\nA small but noticable performance increase.\n\nSigned-off-by: Stuart Douglas <stuart.w.douglas@gmail.com>", "committedDate": "2020-10-20T22:51:41Z", "type": "forcePushed"}]}