{"pr_number": 10133, "pr_title": "Release the ByteBuf when IOException occurs in AbstractMemoryHttpData.", "pr_createdAt": "2020-03-24T15:58:10Z", "pr_url": "https://github.com/netty/netty/pull/10133", "timeline": [{"oid": "f14d57dfc5bbb25a22bce9ec74c788c2650854cd", "url": "https://github.com/netty/netty/commit/f14d57dfc5bbb25a22bce9ec74c788c2650854cd", "message": "Release the ByteBuf when IOException occurs in AbstractMemoryHttpData.", "committedDate": "2020-03-24T15:44:26Z", "type": "commit"}, {"oid": "973025324e8b1dbcc5406df8d2382db97c8b0027", "url": "https://github.com/netty/netty/commit/973025324e8b1dbcc5406df8d2382db97c8b0027", "message": "Add a test case.", "committedDate": "2020-03-25T14:02:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4MjEzOQ==", "url": "https://github.com/netty/netty/pull/10133#discussion_r398382139", "bodyText": "Create a new instance of UnpooledByteBufAllocator as otherwise this may break if tests are executed concurrently.", "author": "normanmaurer", "createdAt": "2020-03-26T08:10:57Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "diffHunk": "@@ -59,6 +62,36 @@ public void testSetContentFromStream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSetContentFromStreamExceptionally() throws Exception {\n+        TestHttpData data = new TestHttpData(\"test\", UTF_8, 0); //definedSize=0\n+        data.setMaxSize(10);\n+        byte[] bytes = new byte[16];\n+        UnpooledByteBufAllocator alloc = UnpooledByteBufAllocator.DEFAULT;", "originalCommit": "973025324e8b1dbcc5406df8d2382db97c8b0027", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MDQ1NA==", "url": "https://github.com/netty/netty/pull/10133#discussion_r398660454", "bodyText": "Creating a new instance of UnpooledByteBufAllocator is a good idea to handle the concurrent test cases. And we must make the temporary ByteBuf instance be allocated from this new allocator as well. But I found that buffer method called by setContent method is statically imported.\n\n  \n    \n      netty/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n    \n    \n        Lines 65 to 69\n      in\n      81513c3\n    \n    \n    \n    \n\n        \n          \n           @Override \n        \n\n        \n          \n           public void setContent(InputStream inputStream) throws IOException { \n        \n\n        \n          \n               ObjectUtil.checkNotNull(inputStream, \"inputStream\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n               ByteBuf buffer = buffer(); \n        \n    \n  \n\n\n\n  \n    \n      netty/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n    \n    \n        Lines 31 to 34\n      in\n      81513c3\n    \n    \n    \n    \n\n        \n          \n           import static io.netty.buffer.Unpooled.EMPTY_BUFFER; \n        \n\n        \n          \n           import static io.netty.buffer.Unpooled.buffer; \n        \n\n        \n          \n           import static io.netty.buffer.Unpooled.compositeBuffer; \n        \n\n        \n          \n           import static io.netty.buffer.Unpooled.wrappedBuffer; \n        \n    \n  \n\n\nMaybe I can extract it to a new protected method and override it so that I can make the ByteBuf be allocate from my new allocator. However, for test purpose, I'm not sure whether it's worthwhile. @normanmaurer Any suggestions?", "author": "seedeed", "createdAt": "2020-03-26T15:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4MjEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0OTQyOA==", "url": "https://github.com/netty/netty/pull/10133#discussion_r399149428", "bodyText": "just remove all of this... the leak detection will kick in if we leak the buffer anyway.", "author": "normanmaurer", "createdAt": "2020-03-27T09:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4MjEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2aae55bce7e704bdc0cca3ad13feb3d656c57f01", "chunk": "diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java\nindex 6e928333ca..d376985a02 100644\n--- a/codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java\n+++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java\n\n@@ -59,36 +75,7 @@ public class AbstractMemoryHttpDataTest {\n             assertEquals(0, buffer.readerIndex());\n             assertEquals(bytes.length, buffer.writerIndex());\n             assertArrayEquals(bytes, Arrays.copyOf(buffer.array(), bytes.length));\n-        }\n-    }\n-\n-    @Test\n-    public void testSetContentFromStreamExceptionally() throws Exception {\n-        TestHttpData data = new TestHttpData(\"test\", UTF_8, 0); //definedSize=0\n-        data.setMaxSize(10);\n-        byte[] bytes = new byte[16];\n-        UnpooledByteBufAllocator alloc = UnpooledByteBufAllocator.DEFAULT;\n-        long usedHeap = alloc.metric().usedHeapMemory();\n-        long usedDirect = alloc.metric().usedDirectMemory();\n-        try {\n-            data.setContent(new ByteArrayInputStream(bytes));\n-            fail(\"shouldn't reach here!\");\n-        } catch (IOException e) {\n-            //actual size of bytes over maxSize\n-            assertEquals(usedHeap, alloc.metric().usedHeapMemory());\n-            assertEquals(usedDirect, alloc.metric().usedDirectMemory());\n-        }\n-\n-        data = new TestHttpData(\"test\", UTF_8, 10); //definedSize=10\n-        usedHeap = alloc.metric().usedHeapMemory();\n-        usedDirect = alloc.metric().usedDirectMemory();\n-        try {\n-            data.setContent(new ByteArrayInputStream(bytes));\n-            fail(\"shouldn't reach here!\");\n-        } catch (IOException e) {\n-            //actual size of bytes over definedSize\n-            assertEquals(usedHeap, alloc.metric().usedHeapMemory());\n-            assertEquals(usedDirect, alloc.metric().usedDirectMemory());\n+            assertArrayEquals(bytes, data.get());\n         }\n     }\n \n"}}, {"oid": "2aae55bce7e704bdc0cca3ad13feb3d656c57f01", "url": "https://github.com/netty/netty/commit/2aae55bce7e704bdc0cca3ad13feb3d656c57f01", "message": "Remove testSetContentFromStreamExceptionally and add another test case.", "committedDate": "2020-03-27T12:56:25Z", "type": "commit"}, {"oid": "e557f45888ce67c47b41b085f482845d6a3b8928", "url": "https://github.com/netty/netty/commit/e557f45888ce67c47b41b085f482845d6a3b8928", "message": "Remove try-with-resources.", "committedDate": "2020-03-27T13:32:33Z", "type": "commit"}]}