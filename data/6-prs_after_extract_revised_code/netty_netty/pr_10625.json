{"pr_number": 10625, "pr_title": "Enable IOSQE_ASYNC depending on how many fds are handled", "pr_createdAt": "2020-09-30T13:41:54Z", "pr_url": "https://github.com/netty/netty/pull/10625", "timeline": [{"oid": "16b05a9ef0bab03c7b7ebe74dd39e39ee2eb68f2", "url": "https://github.com/netty/netty/commit/16b05a9ef0bab03c7b7ebe74dd39e39ee2eb68f2", "message": "Enable IOSQE_ASYNC depending on how many fds are handled\n\nMotivation:\n\nIt has shown in benchmarks that IOSQE_ASYNC can be harmful when there\nare not a lot of fds handled at the same time.\n\nModifications:\n\n- Dont use IOSEQ_ASYNC for IORING_IO_TIMEOUT, IORING_IO_POLLADD,\nIORING_IO_POLLREMOVE\n- Enable / disable the usage of IOSEQ_ASYNC for others IO ops based on\nthe number of fds that are handled\n\nResult:\n\nBetter performance without the need of the user to tune things", "committedDate": "2020-09-30T13:38:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDMyOQ==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497520329", "bodyText": "this was the number after which using the flag showed good results here...", "author": "normanmaurer", "createdAt": "2020-09-30T13:44:00Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java", "diffHunk": "@@ -32,7 +32,7 @@\n final class Native {\n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(Native.class);\n     static final int DEFAULT_RING_SIZE = Math.max(64, SystemPropertyUtil.getInt(\"io.netty.uring.ringSize\", 4096));\n-    static final boolean DEFAULT_USE_IOSEQ_ASYNC = true;\n+    static final int DEFAULT_IOSEQ_ASYNC_THRESHOLD = 25;", "originalCommit": "16b05a9ef0bab03c7b7ebe74dd39e39ee2eb68f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMTcxMA==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497521710", "bodyText": "let's use a sys prop here? That would be nice to help with tests", "author": "franz1981", "createdAt": "2020-09-30T13:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyNzIyMQ==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497527221", "bodyText": "sure why not", "author": "normanmaurer", "createdAt": "2020-09-30T13:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "819dae76a4e7a7fc2a6e1ff761b992788759c0a7", "chunk": "diff --git a/transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java b/transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java\nindex 380efcf77d..6010468cca 100644\n--- a/transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java\n+++ b/transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java\n\n@@ -32,7 +32,8 @@ import java.util.Locale;\n final class Native {\n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(Native.class);\n     static final int DEFAULT_RING_SIZE = Math.max(64, SystemPropertyUtil.getInt(\"io.netty.uring.ringSize\", 4096));\n-    static final int DEFAULT_IOSEQ_ASYNC_THRESHOLD = 25;\n+    static final int DEFAULT_IOSEQ_ASYNC_THRESHOLD =\n+            Math.max(0, SystemPropertyUtil.getInt(\"io.netty.uring.iosqeAsyncThreshold\", 25));\n \n     static {\n         Selector selector = null;\n"}}, {"oid": "819dae76a4e7a7fc2a6e1ff761b992788759c0a7", "url": "https://github.com/netty/netty/commit/819dae76a4e7a7fc2a6e1ff761b992788759c0a7", "message": "Use system property", "committedDate": "2020-09-30T13:53:59Z", "type": "commit"}, {"oid": "1969e93c5f9b86d4cc7da318c77f73a675ba029f", "url": "https://github.com/netty/netty/commit/1969e93c5f9b86d4cc7da318c77f73a675ba029f", "message": "fix decrement", "committedDate": "2020-09-30T14:01:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0MTA1MA==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497541050", "bodyText": "No need to compute the sqeFlagsAddress anymore. The variable isn't used.", "author": "chrisvest", "createdAt": "2020-09-30T14:10:19Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -86,21 +87,34 @@\n         this.tail = PlatformDependent.getIntVolatile(kTailAddress);\n \n         this.timeoutMemoryAddress = PlatformDependent.allocateMemory(KERNEL_TIMESPEC_SIZE);\n+        this.iosqeAsyncThreshold = iosqeAsyncThreshold;\n \n         // Zero the whole SQE array first\n         PlatformDependent.setMemory(submissionQueueArrayAddress, ringEntries * SQE_SIZE, (byte) 0);\n \n         // Fill SQ array indices (1-1 with SQE array) and set nonzero constant SQE fields\n         long address = kArrayAddress;\n         long sqeFlagsAddress = submissionQueueArrayAddress + SQE_FLAGS_FIELD;\n-        byte flag = iosqeAsync ? (byte) Native.IOSQE_ASYNC : 0;\n         for (int i = 0; i < ringEntries; i++, address += INT_SIZE, sqeFlagsAddress += SQE_SIZE) {\n             PlatformDependent.putInt(address, i);\n-            PlatformDependent.putByte(sqeFlagsAddress, flag);", "originalCommit": "1969e93c5f9b86d4cc7da318c77f73a675ba029f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1OTcwNQ==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497559705", "bodyText": "good catch", "author": "normanmaurer", "createdAt": "2020-09-30T14:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0MTA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "641873308954aa858cc3d8e460f73103a59dddde", "chunk": "diff --git a/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java b/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java\nindex fda2270b46..38c8f42ce2 100644\n--- a/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java\n+++ b/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java\n\n@@ -94,8 +94,7 @@ final class IOUringSubmissionQueue {\n \n         // Fill SQ array indices (1-1 with SQE array) and set nonzero constant SQE fields\n         long address = kArrayAddress;\n-        long sqeFlagsAddress = submissionQueueArrayAddress + SQE_FLAGS_FIELD;\n-        for (int i = 0; i < ringEntries; i++, address += INT_SIZE, sqeFlagsAddress += SQE_SIZE) {\n+        for (int i = 0; i < ringEntries; i++, address += INT_SIZE) {\n             PlatformDependent.putInt(address, i);\n         }\n     }\n"}}, {"oid": "641873308954aa858cc3d8e460f73103a59dddde", "url": "https://github.com/netty/netty/commit/641873308954aa858cc3d8e460f73103a59dddde", "message": "Address comment of chris", "committedDate": "2020-09-30T14:31:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497656049", "bodyText": "I think you don't want to increment here in the case that channels.put returns non-null, right?", "author": "njhill", "createdAt": "2020-09-30T16:47:15Z", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "originalCommit": "641873308954aa858cc3d8e460f73103a59dddde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3MjczMg==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497672732", "bodyText": "I think I actually want as I also always decrement... below. I am missing something ?", "author": "normanmaurer", "createdAt": "2020-09-30T17:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY5MzMyNQ==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497693325", "bodyText": "Maybe this isn't possible for other sequencing reasons, but what if the same fd is replaced 3 times in succession.. then count will be +3. Then when removed it will only be -1 since it's only decremented once (if called multiple times only the first will decrement). So we end up with no fd but still a positive count. I could also be missing something :)", "author": "njhill", "createdAt": "2020-09-30T17:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwMzA4Mw==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497703083", "bodyText": "That\u2019s  not possible", "author": "normanmaurer", "createdAt": "2020-09-30T18:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwNzQ2NA==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497707464", "bodyText": "Ok maybe the multiple case is not possible but you are saying that the put will never overwrite? If so what is the purpose of this check after remove https://github.com/netty/netty/pull/10625/files#diff-edc47287cb4c12155b5456eb05260bcbR118-R125?", "author": "njhill", "createdAt": "2020-09-30T18:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxMDE4NA==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497710184", "bodyText": "You are right ... I guess I should only increment here if null is returned and only decrement if we not put back the channel in the remove method ... WDYt ?", "author": "normanmaurer", "createdAt": "2020-09-30T18:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMzM4NA==", "url": "https://github.com/netty/netty/pull/10625#discussion_r497723384", "bodyText": "Yes I think if you just increment here if null is returned from put then the decrement can stay as you have it", "author": "njhill", "createdAt": "2020-09-30T18:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5b5c87ae5fb7fcf03dab1e74984cb07e9d5fe8f5", "chunk": "diff --git a/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java b/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\nindex 0d67c17a67..f541f28960 100644\n--- a/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\n+++ b/transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\n\n@@ -103,8 +103,9 @@ final class IOUringEventLoop extends SingleThreadEventLoop implements IOUringCom\n         logger.trace(\"Add Channel: {} \", ch.socket.intValue());\n         int fd = ch.socket.intValue();\n \n-        channels.put(fd, ch);\n-        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();\n+        if (channels.put(fd, ch) == null) {\n+            ringBuffer.ioUringSubmissionQueue().incrementHandledFds();\n+        }\n     }\n \n     void remove(AbstractIOUringChannel ch) {\n"}}, {"oid": "5b5c87ae5fb7fcf03dab1e74984cb07e9d5fe8f5", "url": "https://github.com/netty/netty/commit/5b5c87ae5fb7fcf03dab1e74984cb07e9d5fe8f5", "message": "Address nicks comment", "committedDate": "2020-09-30T17:44:23Z", "type": "commit"}]}