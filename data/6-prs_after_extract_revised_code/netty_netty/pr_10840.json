{"pr_number": 10840, "pr_title": "Improve performance of HPACK static table lookup", "pr_createdAt": "2020-12-05T07:45:51Z", "pr_url": "https://github.com/netty/netty/pull/10840", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwNjk0Nw==", "url": "https://github.com/netty/netty/pull/10840#discussion_r536906947", "bodyText": "Optional idea: at index values above 15 have no other duplicate values.  I think it should be possible to break the loop here if the index is above 15", "author": "carl-mastrangelo", "createdAt": "2020-12-05T22:43:21Z", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java", "diffHunk": "@@ -147,20 +149,26 @@ static int getIndex(CharSequence name) {\n      */\n     static int getIndexInsensitive(CharSequence name, CharSequence value) {\n         int index = getIndex(name);\n-        if (index == -1) {\n-            return -1;\n+        if (index == NOT_FOUND) {\n+            return NOT_FOUND;\n         }\n \n         // Note this assumes all entries for a given header field are sequential.\n         while (index <= length) {\n             HpackHeaderField entry = getEntry(index);\n-            if (equalsVariableTime(name, entry.name) && equalsVariableTime(value, entry.value)) {\n+            if (!equalsVariableTime(name, entry.name)) {\n+                // As far as fields with the same name are placed in the table sequentialy\n+                // and INDEX_BY_NAME returns index of the fist position, - it's safe to\n+                // exit immediatly.\n+                return NOT_FOUND;\n+            }\n+            if (equalsVariableTime(value, entry.value)) {\n                 return index;\n             }\n             index++;", "originalCommit": "62078dbf7e117c624c89183964af8af50f0bae51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2295f41d0a628c35480babecd7e84e9ef27d327", "chunk": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java\nindex 473908d967..f04c97ad26 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java\n\n@@ -153,9 +155,16 @@ final class HpackStaticTable {\n             return NOT_FOUND;\n         }\n \n+        // Compare values for the first name match\n+        HpackHeaderField entry = getEntry(index);\n+        if (equalsVariableTime(value, entry.value)) {\n+            return index;\n+        }\n+\n         // Note this assumes all entries for a given header field are sequential.\n-        while (index <= length) {\n-            HpackHeaderField entry = getEntry(index);\n+        index++;\n+        while (index <= MAX_SAME_NAME_FIELD_INDEX) {\n+            entry = getEntry(index);\n             if (!equalsVariableTime(name, entry.name)) {\n                 // As far as fields with the same name are placed in the table sequentialy\n                 // and INDEX_BY_NAME returns index of the fist position, - it's safe to\n"}}, {"oid": "f2295f41d0a628c35480babecd7e84e9ef27d327", "url": "https://github.com/netty/netty/commit/f2295f41d0a628c35480babecd7e84e9ef27d327", "message": "Improve performance of HPACK static table lookup\n\nMotivation:\n\nHPACK static table is organized in a way that fields with the same\nname are sequential. Which means when doing sequential scan we can\nshort-circuit scan on name mismatch.\n\nModifications:\n\n* `HpackStaticTable.getIndexIndensitive` returns -1 on name mismatch\nrather than keep scanning.\n* `HpackStaticTable` statically defined max position in the array\nwhere name duplication is possible (after the given index there's\nno need to check for other fields with the same name)\n* Benchmark for different lookup patterns\n\nResult:\n\nBetter HPACK static table lookup performance.", "committedDate": "2020-12-14T07:55:49Z", "type": "commit"}, {"oid": "f2295f41d0a628c35480babecd7e84e9ef27d327", "url": "https://github.com/netty/netty/commit/f2295f41d0a628c35480babecd7e84e9ef27d327", "message": "Improve performance of HPACK static table lookup\n\nMotivation:\n\nHPACK static table is organized in a way that fields with the same\nname are sequential. Which means when doing sequential scan we can\nshort-circuit scan on name mismatch.\n\nModifications:\n\n* `HpackStaticTable.getIndexIndensitive` returns -1 on name mismatch\nrather than keep scanning.\n* `HpackStaticTable` statically defined max position in the array\nwhere name duplication is possible (after the given index there's\nno need to check for other fields with the same name)\n* Benchmark for different lookup patterns\n\nResult:\n\nBetter HPACK static table lookup performance.", "committedDate": "2020-12-14T07:55:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5Nzc4OA==", "url": "https://github.com/netty/netty/pull/10840#discussion_r543097788", "bodyText": "You either should use a BlackHole or let the methods return something. Otherwise these calls may be optimised away ... This is true for all methods here", "author": "normanmaurer", "createdAt": "2020-12-15T07:09:30Z", "path": "microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.util.AsciiString;\n+\n+@Fork(1)\n+@Threads(1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class HpackStaticTableBenchmark extends AbstractMicrobenchmark {\n+\n+    private static final CharSequence X_CONTENT_ENCODING = new AsciiString(\"x-content-encoding\".getBytes(), false);\n+    private static final CharSequence X_GZIP = new AsciiString(\"x-gzip\".getBytes(), false);\n+    private static final CharSequence STATUS = new AsciiString(\":status\".getBytes(), false);\n+    private static final CharSequence STATUS_200 = new AsciiString(\"200\".getBytes(), false);\n+    private static final CharSequence STATUS_500 = new AsciiString(\"500\".getBytes(), false);\n+    private static final CharSequence AUTHORITY = new AsciiString(\":authority\".getBytes(), false);\n+    private static final CharSequence AUTHORITY_NETTY = new AsciiString(\"netty.io\".getBytes(), false);\n+    private static final CharSequence USER_AGENT = new AsciiString(\"user-agent\".getBytes(), false);\n+    private static final CharSequence USER_AGENT_CURL = new AsciiString(\"curl/7.64.1\".getBytes(), false);\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void lookupNoNameMatch() {\n+        HpackStaticTable.getIndexInsensitive(X_CONTENT_ENCODING, X_GZIP);\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void lookupNameAndValueMatchFirst() {", "originalCommit": "f2295f41d0a628c35480babecd7e84e9ef27d327", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09221ba7a6e94e4876f303f85d83dd7b6ad893bc", "chunk": "diff --git a/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java b/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java\nindex a2d6888b80..58c2ec8039 100644\n--- a/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java\n+++ b/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java\n\n@@ -51,32 +51,32 @@ public class HpackStaticTableBenchmark extends AbstractMicrobenchmark {\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNoNameMatch() {\n-        HpackStaticTable.getIndexInsensitive(X_CONTENT_ENCODING, X_GZIP);\n+    public int lookupNoNameMatch() {\n+        return HpackStaticTable.getIndexInsensitive(X_CONTENT_ENCODING, X_GZIP);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameAndValueMatchFirst() {\n-        HpackStaticTable.getIndexInsensitive(STATUS, STATUS_200);\n+    public int lookupNameAndValueMatchFirst() {\n+        return HpackStaticTable.getIndexInsensitive(STATUS, STATUS_200);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameAndValueMatchLast() {\n-        HpackStaticTable.getIndexInsensitive(STATUS, STATUS_500);\n+    public int lookupNameAndValueMatchLast() {\n+        return HpackStaticTable.getIndexInsensitive(STATUS, STATUS_500);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameOnlyMatchBeginTable() {\n-        HpackStaticTable.getIndexInsensitive(AUTHORITY, AUTHORITY_NETTY);\n+    public int lookupNameOnlyMatchBeginTable() {\n+        return HpackStaticTable.getIndexInsensitive(AUTHORITY, AUTHORITY_NETTY);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameOnlyMatchEndTable() {\n-        HpackStaticTable.getIndexInsensitive(USER_AGENT, USER_AGENT_CURL);\n+    public int lookupNameOnlyMatchEndTable() {\n+        return HpackStaticTable.getIndexInsensitive(USER_AGENT, USER_AGENT_CURL);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5Nzk1MQ==", "url": "https://github.com/netty/netty/pull/10840#discussion_r543097951", "bodyText": "use getBytes(Charset).... This is true for all lines above.", "author": "normanmaurer", "createdAt": "2020-12-15T07:09:53Z", "path": "microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.util.AsciiString;\n+\n+@Fork(1)\n+@Threads(1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class HpackStaticTableBenchmark extends AbstractMicrobenchmark {\n+\n+    private static final CharSequence X_CONTENT_ENCODING = new AsciiString(\"x-content-encoding\".getBytes(), false);\n+    private static final CharSequence X_GZIP = new AsciiString(\"x-gzip\".getBytes(), false);\n+    private static final CharSequence STATUS = new AsciiString(\":status\".getBytes(), false);\n+    private static final CharSequence STATUS_200 = new AsciiString(\"200\".getBytes(), false);\n+    private static final CharSequence STATUS_500 = new AsciiString(\"500\".getBytes(), false);\n+    private static final CharSequence AUTHORITY = new AsciiString(\":authority\".getBytes(), false);\n+    private static final CharSequence AUTHORITY_NETTY = new AsciiString(\"netty.io\".getBytes(), false);\n+    private static final CharSequence USER_AGENT = new AsciiString(\"user-agent\".getBytes(), false);\n+    private static final CharSequence USER_AGENT_CURL = new AsciiString(\"curl/7.64.1\".getBytes(), false);", "originalCommit": "f2295f41d0a628c35480babecd7e84e9ef27d327", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09221ba7a6e94e4876f303f85d83dd7b6ad893bc", "chunk": "diff --git a/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java b/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java\nindex a2d6888b80..58c2ec8039 100644\n--- a/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java\n+++ b/microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java\n\n@@ -51,32 +51,32 @@ public class HpackStaticTableBenchmark extends AbstractMicrobenchmark {\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNoNameMatch() {\n-        HpackStaticTable.getIndexInsensitive(X_CONTENT_ENCODING, X_GZIP);\n+    public int lookupNoNameMatch() {\n+        return HpackStaticTable.getIndexInsensitive(X_CONTENT_ENCODING, X_GZIP);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameAndValueMatchFirst() {\n-        HpackStaticTable.getIndexInsensitive(STATUS, STATUS_200);\n+    public int lookupNameAndValueMatchFirst() {\n+        return HpackStaticTable.getIndexInsensitive(STATUS, STATUS_200);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameAndValueMatchLast() {\n-        HpackStaticTable.getIndexInsensitive(STATUS, STATUS_500);\n+    public int lookupNameAndValueMatchLast() {\n+        return HpackStaticTable.getIndexInsensitive(STATUS, STATUS_500);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameOnlyMatchBeginTable() {\n-        HpackStaticTable.getIndexInsensitive(AUTHORITY, AUTHORITY_NETTY);\n+    public int lookupNameOnlyMatchBeginTable() {\n+        return HpackStaticTable.getIndexInsensitive(AUTHORITY, AUTHORITY_NETTY);\n     }\n \n     @Benchmark\n     @BenchmarkMode(Mode.AverageTime)\n-    public void lookupNameOnlyMatchEndTable() {\n-        HpackStaticTable.getIndexInsensitive(USER_AGENT, USER_AGENT_CURL);\n+    public int lookupNameOnlyMatchEndTable() {\n+        return HpackStaticTable.getIndexInsensitive(USER_AGENT, USER_AGENT_CURL);\n     }\n \n }\n"}}, {"oid": "09221ba7a6e94e4876f303f85d83dd7b6ad893bc", "url": "https://github.com/netty/netty/commit/09221ba7a6e94e4876f303f85d83dd7b6ad893bc", "message": "Fix up benchmark", "committedDate": "2020-12-15T13:57:14Z", "type": "commit"}, {"oid": "0f22d5acbaf62acf813a9e8f8138cb0d759d5547", "url": "https://github.com/netty/netty/commit/0f22d5acbaf62acf813a9e8f8138cb0d759d5547", "message": "Address last comments", "committedDate": "2020-12-16T08:50:21Z", "type": "commit"}]}