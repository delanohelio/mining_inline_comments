{"pr_number": 1010, "pr_title": "Provide AWS Temp credentials for ZTS connection to DynamoDB", "pr_createdAt": "2020-06-16T09:07:15Z", "pr_url": "https://github.com/AthenZ/athenz/pull/1010", "timeline": [{"oid": "4648c9c5ac0d91a3db9bf1211709a885a64dd519", "url": "https://github.com/AthenZ/athenz/commit/4648c9c5ac0d91a3db9bf1211709a885a64dd519", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-16T10:46:55Z", "type": "forcePushed"}, {"oid": "4c88463fcb43026fb3fad161b3680673c89fea92", "url": "https://github.com/AthenZ/athenz/commit/4c88463fcb43026fb3fad161b3680673c89fea92", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-16T11:05:43Z", "type": "forcePushed"}, {"oid": "a26f997f2dc14fc7f5c2d409c5c668772c308845", "url": "https://github.com/AthenZ/athenz/commit/a26f997f2dc14fc7f5c2d409c5c668772c308845", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-16T11:31:56Z", "type": "forcePushed"}, {"oid": "529f0296036d2f07ae9094453c3e2af4b2e0ba87", "url": "https://github.com/AthenZ/athenz/commit/529f0296036d2f07ae9094453c3e2af4b2e0ba87", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-16T19:41:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwMjk0Mw==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r441102943", "bodyText": "The current logic refreshes the token once it gets to half time before the expiration.\nI didn't had to change this logic, I just had to make sure that notification will be sent in case of failure", "author": "OferLevi85", "createdAt": "2020-06-16T19:50:40Z", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -1505,7 +1559,7 @@ public void run() {\n             boolean svcTokenRefresh = false;\n             for (PrefetchTokenScheduledItem item : PREFETCH_SCHEDULED_ITEMS) {\n \n-                // see if item expires within next two minutes\n+                // see if item requires refresh", "originalCommit": "529f0296036d2f07ae9094453c3e2af4b2e0ba87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNDQ5OA==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r441104498", "bodyText": "This is just a small improvement I had to do after I entered this template as a resource for the third time :)", "author": "OferLevi85", "createdAt": "2020-06-16T19:53:34Z", "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/NotificationToEmailConverterCommon.java", "diffHunk": "@@ -111,6 +111,18 @@ public String generateBodyFromTemplate(Map<String, String> metaDetails,\n         return addCssStyleToBody(bodyString);\n     }\n \n+    public String getTableEntryTemplate(int numOfColumns) {", "originalCommit": "529f0296036d2f07ae9094453c3e2af4b2e0ba87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b9a14030d8f34bd37409990f4bff7e063dc047c4", "url": "https://github.com/AthenZ/athenz/commit/b9a14030d8f34bd37409990f4bff7e063dc047c4", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-16T19:55:10Z", "type": "forcePushed"}, {"oid": "ba88c8ffb8484ea09348cebee4c19e314a5c6721", "url": "https://github.com/AthenZ/athenz/commit/ba88c8ffb8484ea09348cebee4c19e314a5c6721", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-16T20:01:08Z", "type": "forcePushed"}, {"oid": "9dc162c947616b66109fd73b00e17ed87f2cc1c8", "url": "https://github.com/AthenZ/athenz/commit/9dc162c947616b66109fd73b00e17ed87f2cc1c8", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-17T01:09:21Z", "type": "forcePushed"}, {"oid": "891748ddbc8e879119a8fa24d107ad6dc11ec3ce", "url": "https://github.com/AthenZ/athenz/commit/891748ddbc8e879119a8fa24d107ad6dc11ec3ce", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-17T01:31:44Z", "type": "forcePushed"}, {"oid": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "url": "https://github.com/AthenZ/athenz/commit/0c52c29703cf4c01aca4e539f106ea00b19f031f", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-17T02:00:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxMw==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442321013", "bodyText": "What was the requirement to have this in the constructor? Since the notificationSender is not used in creating the actual rdl generated client, why not just have a setter for this thus allowing the functionality to be used with any of the other constructors if necessary. e.g.:\nZTSClient ztsClient = new ZTSClient(...);\nztsClient.setNotificationSender(notificationSender);", "author": "havetisyan", "createdAt": "2020-06-18T15:39:41Z", "path": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "diffHunk": "@@ -413,7 +414,21 @@ public ZTSClient(String ztsUrl, Principal identity) {\n     public ZTSClient(String ztsUrl, SSLContext sslContext) {\n         this(ztsUrl, null, sslContext);\n     }\n-    \n+\n+    /**\n+     * Constructs a new ZTSClient object with the given SSLContext object\n+     * and ZTS Server Url. Default read and connect timeout values are\n+     * 30000ms (30sec). The application can change these values by using the\n+     * athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout\n+     * system properties. The values specified for timeouts must be in milliseconds.\n+     * @param ztsUrl ZTS Server's URL (optional)\n+     * @param sslContext SSLContext that includes service's private key and x.509 certificate\n+     * @param notificationSender If provided, will be used for sending notifications on failures\n+     */\n+    public ZTSClient(String ztsUrl, SSLContext sslContext, ZTSClientNotificationSender notificationSender) {", "originalCommit": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NjQ0Nw==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r443486447", "bodyText": "The reasons I put it in the constructor are the following:\n\nI wanted the PrefetchTask thread to have access to the notificationSender.\nI didn't want the notificationSender to be static as I didn't want every instance of ZTSClient to have access to it (as more than one ZTSClient might be used by the same program and some might need to send notifications while others don't).\n\nBecause the PrefetchTask is an internal static class (and isn't aware of the outer class instance variables), I had to either pass them along through the constructor before the PrefetchTask starts or set it as a static member of ZTSClient. If it is acceptable I'll set it as a static member of ZTSClient and make it thread-safe (locking when setting it and when sending notifications).", "author": "OferLevi85", "createdAt": "2020-06-22T11:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMzQ4MQ==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r444003481", "bodyText": "Where do we start the PrefetchTask within the ZTSClient constructor that requires the notification sender to be set as part of the same constructor?\nI'm not following why would we miss the notification sender if we just have:\nZTSClient ztsClient = new ZTSClient(...);\nztsClient.setNotificationSender(notificationSender);\nztsClient.getAWSTemporaryCredentials(...);", "author": "havetisyan", "createdAt": "2020-06-23T07:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMjcwNg==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r444012706", "bodyText": "Got it. I accidentally looked at AWSCredentialsProviderImpl and ZTSClient as a single unit (the AWSCredentialsProviderImpl creates the ZTSClient and then get the credentials at the CTOR).\nFixing it...", "author": "OferLevi85", "createdAt": "2020-06-23T07:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "0ca0d8ae1688e717a3be118ed9da7e6cfef13d99", "chunk": "diff --git a/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java b/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java\nindex b0f42e9e3..84b5d2eb5 100644\n--- a/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java\n+++ b/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java\n\n@@ -415,20 +415,6 @@ public class ZTSClient implements Closeable {\n         this(ztsUrl, null, sslContext);\n     }\n \n-    /**\n-     * Constructs a new ZTSClient object with the given SSLContext object\n-     * and ZTS Server Url. Default read and connect timeout values are\n-     * 30000ms (30sec). The application can change these values by using the\n-     * athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout\n-     * system properties. The values specified for timeouts must be in milliseconds.\n-     * @param ztsUrl ZTS Server's URL (optional)\n-     * @param sslContext SSLContext that includes service's private key and x.509 certificate\n-     * @param notificationSender If provided, will be used for sending notifications on failures\n-     */\n-    public ZTSClient(String ztsUrl, SSLContext sslContext, ZTSClientNotificationSender notificationSender) {\n-        this(ztsUrl, null, sslContext, notificationSender);\n-    }\n-\n     /**\n      * Constructs a new ZTSClient object with the given SSLContext object\n      * and ZTS Server Url through the specified Proxy URL. Default read\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzc4Nw==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442327787", "bodyText": "we should use final for servrerName to be consistent with other methods.", "author": "havetisyan", "createdAt": "2020-06-18T15:49:25Z", "path": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHRecordStore.java", "diffHunk": "@@ -50,4 +52,14 @@\n      *     is for a service as opposed to a role\n      */\n     void log(final Principal principal, final String ip, final String service, final String instanceId);\n+\n+    /**\n+     * Enable notifications to be sent regarding the store health (by supported implementers)\n+     * All arguments must be provided (non-null)\n+     * @param notificationManager\n+     * @param rolesProvider\n+     * @param serverName\n+     * @return true if notifications were enabled successfully\n+     */\n+    boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName);", "originalCommit": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMjE1Mg==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r443632152", "bodyText": "Fixed", "author": "OferLevi85", "createdAt": "2020-06-22T15:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "chunk": "diff --git a/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHRecordStore.java b/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHRecordStore.java\nindex f541c7c69..d81607456 100644\n--- a/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHRecordStore.java\n+++ b/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHRecordStore.java\n\n@@ -61,5 +61,5 @@ public interface SSHRecordStore {\n      * @param serverName\n      * @return true if notifications were enabled successfully\n      */\n-    boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName);\n+    boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTk5NA==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442329994", "bodyText": "let's make this LOGGER.info since it's useful info and only would happen once.", "author": "havetisyan", "createdAt": "2020-06-18T15:52:37Z", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java", "diffHunk": "@@ -1000,6 +1002,32 @@ public boolean updateSSHCertRecord(SSHCertRecord certRecord, boolean refresh) {\n         return result;\n     }\n \n+    public boolean enableCertStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName) {\n+        boolean notificationsEnabled = false;\n+        if (certStore != null) {\n+            notificationsEnabled = certStore.enableNotifications(notificationManager, rolesProvider, serverName);\n+        }\n+\n+        if (LOGGER.isDebugEnabled()) {", "originalCommit": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNTA1Mg==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r443635052", "bodyText": "Fixed", "author": "OferLevi85", "createdAt": "2020-06-22T15:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "chunk": "diff --git a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java\nindex 6058a03ec..e2ef9acd8 100644\n--- a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java\n+++ b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java\n\n@@ -1008,10 +1008,7 @@ public class InstanceCertManager {\n             notificationsEnabled = certStore.enableNotifications(notificationManager, rolesProvider, serverName);\n         }\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"certStore Notifications \" + (notificationsEnabled ? \"enabled\" : \"disabled\"));\n-        }\n-\n+        LOGGER.info(\"certStore Notifications \" + (notificationsEnabled ? \"enabled\" : \"disabled\"));\n         return notificationsEnabled;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMDE0Mg==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442330142", "bodyText": "same as above, let's make this info", "author": "havetisyan", "createdAt": "2020-06-18T15:52:50Z", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java", "diffHunk": "@@ -1000,6 +1002,32 @@ public boolean updateSSHCertRecord(SSHCertRecord certRecord, boolean refresh) {\n         return result;\n     }\n \n+    public boolean enableCertStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName) {\n+        boolean notificationsEnabled = false;\n+        if (certStore != null) {\n+            notificationsEnabled = certStore.enableNotifications(notificationManager, rolesProvider, serverName);\n+        }\n+\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"certStore Notifications \" + (notificationsEnabled ? \"enabled\" : \"disabled\"));\n+        }\n+\n+        return notificationsEnabled;\n+    }\n+\n+    public boolean enableSSHStoreNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, String serverName) {\n+        boolean notificationsEnabled = false;\n+        if (sshStore != null) {\n+            notificationsEnabled = sshStore.enableNotifications(notificationManager, rolesProvider, serverName);\n+        }\n+\n+        if (LOGGER.isDebugEnabled()) {", "originalCommit": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMjI3MA==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r443632270", "bodyText": "Fixed", "author": "OferLevi85", "createdAt": "2020-06-22T15:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMDE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "chunk": "diff --git a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java\nindex 6058a03ec..e2ef9acd8 100644\n--- a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java\n+++ b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/InstanceCertManager.java\n\n@@ -1008,10 +1008,7 @@ public class InstanceCertManager {\n             notificationsEnabled = certStore.enableNotifications(notificationManager, rolesProvider, serverName);\n         }\n \n-        if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"certStore Notifications \" + (notificationsEnabled ? \"enabled\" : \"disabled\"));\n-        }\n-\n+        LOGGER.info(\"certStore Notifications \" + (notificationsEnabled ? \"enabled\" : \"disabled\"));\n         return notificationsEnabled;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjYyMw==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442332623", "bodyText": "this should be also be once so let's make it info.", "author": "havetisyan", "createdAt": "2020-06-18T15:56:27Z", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *  Copyright 2020 Verizon Media\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.yahoo.athenz.zts.cert.impl;\n+\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n+import com.oath.auth.KeyRefresher;\n+import com.oath.auth.Utils;\n+import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n+import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.SSLContext;\n+\n+import static com.yahoo.athenz.zts.ZTSConsts.*;\n+\n+public class DynamoDBClientFetcher {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcher.class);\n+\n+    public AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender) {\n+        // if we're given key/cert path settings then\n+        // we'll deal with aws temporary credentials otherwise\n+        // we'll assume we're running in aws thus our ec2 already\n+        // has credentials to access dynamodb\n+        DynamoDBClientSettings dynamoDBClientSettings = new DynamoDBClientSettings();\n+\n+        if (dynamoDBClientSettings.areCredentialsProvided()) {\n+            if (LOGGER.isDebugEnabled()) {", "originalCommit": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNDkwOQ==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r443634909", "bodyText": "Fixed", "author": "OferLevi85", "createdAt": "2020-06-22T15:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "chunk": "diff --git a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\nindex 560fec241..1e32cab73 100644\n--- a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\n+++ b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\n\n@@ -21,6 +21,7 @@ import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n import com.oath.auth.KeyRefresher;\n import com.oath.auth.Utils;\n+import com.yahoo.athenz.auth.PrivateKeyStore;\n import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjg1OA==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442332858", "bodyText": "same as above - let's make it info.", "author": "havetisyan", "createdAt": "2020-06-18T15:56:49Z", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *  Copyright 2020 Verizon Media\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.yahoo.athenz.zts.cert.impl;\n+\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n+import com.oath.auth.KeyRefresher;\n+import com.oath.auth.Utils;\n+import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n+import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.SSLContext;\n+\n+import static com.yahoo.athenz.zts.ZTSConsts.*;\n+\n+public class DynamoDBClientFetcher {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcher.class);\n+\n+    public AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender) {\n+        // if we're given key/cert path settings then\n+        // we'll deal with aws temporary credentials otherwise\n+        // we'll assume we're running in aws thus our ec2 already\n+        // has credentials to access dynamodb\n+        DynamoDBClientSettings dynamoDBClientSettings = new DynamoDBClientSettings();\n+\n+        if (dynamoDBClientSettings.areCredentialsProvided()) {\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\"DynamoDB Client will use temporary AWS credentials\");\n+            }\n+            return getAuthenticatedDynamoDBClient(dynamoDBClientSettings, ztsClientNotificationSender);\n+        } else {\n+            if (LOGGER.isDebugEnabled()) {", "originalCommit": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMjM2MQ==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r443632361", "bodyText": "Fixed", "author": "OferLevi85", "createdAt": "2020-06-22T15:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "chunk": "diff --git a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\nindex 560fec241..1e32cab73 100644\n--- a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\n+++ b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\n\n@@ -21,6 +21,7 @@ import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n import com.oath.auth.KeyRefresher;\n import com.oath.auth.Utils;\n+import com.yahoo.athenz.auth.PrivateKeyStore;\n import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzOTcxNg==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r442339716", "bodyText": "we should not read the password directly from the property even if it's only for the truststore. The factory is given a PrivateKeyStore object that should be used to fetch any passwords. I think we should have some examples in the ZTSUtils class", "author": "havetisyan", "createdAt": "2020-06-18T16:07:08Z", "path": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *  Copyright 2020 Verizon Media\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.yahoo.athenz.zts.cert.impl;\n+\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n+import com.oath.auth.KeyRefresher;\n+import com.oath.auth.Utils;\n+import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n+import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.net.ssl.SSLContext;\n+\n+import static com.yahoo.athenz.zts.ZTSConsts.*;\n+\n+public class DynamoDBClientFetcher {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcher.class);\n+\n+    public AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender) {\n+        // if we're given key/cert path settings then\n+        // we'll deal with aws temporary credentials otherwise\n+        // we'll assume we're running in aws thus our ec2 already\n+        // has credentials to access dynamodb\n+        DynamoDBClientSettings dynamoDBClientSettings = new DynamoDBClientSettings();\n+\n+        if (dynamoDBClientSettings.areCredentialsProvided()) {\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\"DynamoDB Client will use temporary AWS credentials\");\n+            }\n+            return getAuthenticatedDynamoDBClient(dynamoDBClientSettings, ztsClientNotificationSender);\n+        } else {\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\"DynamoDB client will use existing AWS authentication\");\n+            }\n+            if (dynamoDBClientSettings.getRegion().isEmpty()) {\n+                // Use default region\n+                return AmazonDynamoDBClientBuilder.standard().build();\n+            } else {\n+                return AmazonDynamoDBClientBuilder\n+                        .standard()\n+                        .withRegion(dynamoDBClientSettings.getRegion())\n+                        .build();\n+            }\n+        }\n+    }\n+\n+    private AmazonDynamoDB getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n+                                                          ZTSClientNotificationSender ztsClientNotificationSender) {\n+        AWSCredentialsProvider credentialsProvider = getCredentials(dynamoDBClientSettings, ztsClientNotificationSender);\n+        return AmazonDynamoDBClientBuilder.standard()\n+                .withCredentials(credentialsProvider)\n+                .withRegion(dynamoDBClientSettings.getRegion())\n+                .build();\n+    }\n+\n+    private AWSCredentialsProvider getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n+                                                  ZTSClientNotificationSender ztsClientNotificationSender) {\n+        try {\n+            KeyRefresher keyRefresher = Utils.generateKeyRefresher(\n+                    dynamoDBClientSettings.getTrustStore(),\n+                    dynamoDBClientSettings.getTrustStorePassword(),\n+                    dynamoDBClientSettings.getCertPath(),\n+                    dynamoDBClientSettings.getKeyPath());\n+            keyRefresher.startup();\n+\n+            SSLContext sslContext = Utils.buildSSLContext(keyRefresher.getKeyManagerProxy(),\n+                    keyRefresher.getTrustManagerProxy());\n+\n+            String externalId = System.getProperty(ZTS_PROP_DYNAMODB_EXTERNAL_ID, null);\n+            String minExpiryTimeStr = System.getProperty(ZTS_PROP_DYNAMODB_MIN_EXPIRY_TIME, \"\");\n+            String maxExpiryTimeStr = System.getProperty(ZTS_PROP_DYNAMODB_MAX_EXPIRY_TIME, \"\");\n+            Integer minExpiryTime = minExpiryTimeStr.isEmpty() ? null : Integer.parseInt(minExpiryTimeStr);\n+            Integer maxExpiryTime = maxExpiryTimeStr.isEmpty() ? null : Integer.parseInt(maxExpiryTimeStr);\n+\n+            return new AWSCredentialsProviderImpl(\n+                    dynamoDBClientSettings.getZtsURL(),\n+                    sslContext,\n+                    dynamoDBClientSettings.getDomainName(),\n+                    dynamoDBClientSettings.getRoleName(),\n+                    externalId,\n+                    minExpiryTime,\n+                    maxExpiryTime,\n+                    ztsClientNotificationSender);\n+\n+        } catch (Exception ex) {\n+            LOGGER.error(\"Failed to get AWS Temporary credentials: {}\", ex.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    public static class DynamoDBClientSettings {\n+        private String certPath;\n+        private String domainName;\n+        private String roleName;\n+        private String trustStore;\n+        private String trustStorePassword;\n+        private String ztsURL;\n+        private String region;\n+        private String keyPath;\n+\n+        public DynamoDBClientSettings() {\n+            keyPath = System.getProperty(ZTS_PROP_DYNAMODB_KEY_PATH, \"\");\n+            certPath = System.getProperty(ZTS_PROP_DYNAMODB_CERT_PATH, \"\");\n+            domainName = System.getProperty(ZTS_PROP_DYNAMODB_DOMAIN, \"\");\n+            roleName = System.getProperty(ZTS_PROP_DYNAMODB_ROLE, \"\");\n+            trustStore = System.getProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE, \"\");\n+            region = System.getProperty(ZTS_PROP_DYNAMODB_REGION, \"\");\n+            trustStorePassword = System.getProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE_PASSWORD, \"\");", "originalCommit": "0c52c29703cf4c01aca4e539f106ea00b19f031f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNDY5Mg==", "url": "https://github.com/AthenZ/athenz/pull/1010#discussion_r443634692", "bodyText": "I did the same as when reading the password using the keyStore in JDBCSSHRecordStoreFactory.\nHowever, I wasn't able to test it yet as I'm not sure how to actually place a value in the keyStore before retrieving it. I'm going over the CKMS guide to learn about it.", "author": "OferLevi85", "createdAt": "2020-06-22T15:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzOTcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "chunk": "diff --git a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\nindex 560fec241..1e32cab73 100644\n--- a/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\n+++ b/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcher.java\n\n@@ -21,6 +21,7 @@ import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\n import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\n import com.oath.auth.KeyRefresher;\n import com.oath.auth.Utils;\n+import com.yahoo.athenz.auth.PrivateKeyStore;\n import com.yahoo.athenz.zts.AWSCredentialsProviderImpl;\n import com.yahoo.athenz.zts.ZTSClientNotificationSender;\n import org.slf4j.Logger;\n"}}, {"oid": "22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "url": "https://github.com/AthenZ/athenz/commit/22ca3e28b05044788651b94b3bbcd3a4d15d2aed", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-22T12:34:04Z", "type": "forcePushed"}, {"oid": "0ca0d8ae1688e717a3be118ed9da7e6cfef13d99", "url": "https://github.com/AthenZ/athenz/commit/0ca0d8ae1688e717a3be118ed9da7e6cfef13d99", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-23T07:38:29Z", "type": "forcePushed"}, {"oid": "bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "url": "https://github.com/AthenZ/athenz/commit/bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-24T11:14:23Z", "type": "commit"}, {"oid": "bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "url": "https://github.com/AthenZ/athenz/commit/bef7ddb3caa7ec5224815bd03bac3d39fd833e28", "message": "Provide AWS Temp credentials for ZTS connection to DynamoDB\nAnd enable notifications for failures", "committedDate": "2020-06-24T11:14:23Z", "type": "forcePushed"}]}