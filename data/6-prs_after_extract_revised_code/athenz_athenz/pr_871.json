{"pr_number": 871, "pr_title": "review-enabled option for roles", "pr_createdAt": "2020-01-30T02:02:53Z", "pr_url": "https://github.com/AthenZ/athenz/pull/871", "timeline": [{"oid": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff", "url": "https://github.com/AthenZ/athenz/commit/55f8bccbe0350ea510b4bcaa2412ca44816d5cff", "message": "review-enabled option for roles", "committedDate": "2020-01-30T02:01:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0NzIzMg==", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373147232", "bodyText": "typo. going", "author": "abvaidya", "createdAt": "2020-01-30T19:26:29Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -6505,7 +6522,13 @@ void addDefaultAdminAssertion(ResourceContext ctx, String domainName, Policy adm\n         if (LOG.isInfoEnabled()) {\n             LOG.info(\"Adding default admin assertion to admin policy because no default admin assertion was found for admin policy for domain: \" + domainName);\n         }\n-        \n+\n+        // if we had invalid assertions then we're gonig to", "originalCommit": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43d4dcd1a9442c69349a81233b89af5b589fa3b6", "chunk": "diff --git a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\nindex a912ea722..ead19fcc9 100644\n--- a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n+++ b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n\n@@ -6523,7 +6523,7 @@ public class ZMSImpl implements Authorizer, KeyStore, ZMSHandler {\n             LOG.info(\"Adding default admin assertion to admin policy because no default admin assertion was found for admin policy for domain: \" + domainName);\n         }\n \n-        // if we had invalid assertions then we're gonig to\n+        // if we had invalid assertions then we're going to\n         // reset the assertion list otherwise we can't update\n \n         if (invalidAssertions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0ODEzOQ==", "url": "https://github.com/AthenZ/athenz/pull/871#discussion_r373148139", "bodyText": "need to pass argument principal.getFullName() to LOG.error", "author": "abvaidya", "createdAt": "2020-01-30T19:28:21Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -7087,14 +7111,43 @@ public void putMembershipDecision(ResourceContext ctx, String domainName, String\n     }\n \n     private boolean isAllowedPutMembershipDecision(final Principal principal, final AthenzDomain domain,\n-            final Role role) {\n+            final Role role, final RoleMember roleMember, final String caller) {\n+\n+        // if this is an audit enabled domain then we're going to carry\n+        // out the authorization in the sys.auth.audit domains\n \n         if (role.getAuditEnabled() == Boolean.TRUE) {\n-            // check authorization in sys.auth.audit domains\n             return isAllowedAuditRoleMembershipApproval(principal, domain);\n-        } else {\n-            return isAllowedPutMembershipAccess(principal, domain, role);\n         }\n+\n+        // otherwise we're going to do a standard check if the principal\n+        // is authorized to update the domain role membership\n+\n+        boolean allowed = isAllowedPutMembershipAccess(principal, domain, role);\n+\n+        // if the user is allowed to make changes in the domain but\n+        // the role is review enabled then we need to make sure\n+        // the approver cannot be the same as the requester\n+\n+        if (allowed && role.getReviewEnabled() == Boolean.TRUE) {\n+\n+            Membership pendingMember = dbService.getMembership(domain.getName(),\n+                    ZMSUtils.extractRoleName(domain.getName(), role.getName()),\n+                    roleMember.getMemberName(), 0, true);\n+\n+            // if the member is not found then we're going to throw a not found exception\n+\n+            if (!pendingMember.getIsMember()) {\n+                throw ZMSUtils.notFoundError(\"Pending member \" + roleMember.getMemberName() + \" not found\", caller);\n+            }\n+\n+            if (pendingMember.getRequestPrincipal().equalsIgnoreCase(principal.getFullName())) {\n+                LOG.error(\"Principal {} cannot approve his/her own request\");", "originalCommit": "55f8bccbe0350ea510b4bcaa2412ca44816d5cff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43d4dcd1a9442c69349a81233b89af5b589fa3b6", "chunk": "diff --git a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\nindex a912ea722..ead19fcc9 100644\n--- a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n+++ b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n\n@@ -7142,7 +7142,7 @@ public class ZMSImpl implements Authorizer, KeyStore, ZMSHandler {\n             }\n \n             if (pendingMember.getRequestPrincipal().equalsIgnoreCase(principal.getFullName())) {\n-                LOG.error(\"Principal {} cannot approve his/her own request\");\n+                LOG.error(\"Principal {} cannot approve his/her own request\", principal.getFullName());\n                 allowed = false;\n             }\n         }\n"}}, {"oid": "43d4dcd1a9442c69349a81233b89af5b589fa3b6", "url": "https://github.com/AthenZ/athenz/commit/43d4dcd1a9442c69349a81233b89af5b589fa3b6", "message": "address review comments", "committedDate": "2020-01-30T20:12:44Z", "type": "commit"}]}