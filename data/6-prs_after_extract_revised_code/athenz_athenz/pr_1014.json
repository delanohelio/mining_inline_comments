{"pr_number": 1014, "pr_title": "ZTS provider: validate hostname attribute based on incoming source IP", "pr_createdAt": "2020-06-19T00:20:39Z", "pr_url": "https://github.com/AthenZ/athenz/pull/1014", "timeline": [{"oid": "64ad4c28f4e04b420b86b133b58a23c8d461d8df", "url": "https://github.com/AthenZ/athenz/commit/64ad4c28f4e04b420b86b133b58a23c8d461d8df", "message": "ZTS provider: validate hostname attribute based on incoming source IP", "committedDate": "2020-06-19T00:29:14Z", "type": "forcePushed"}, {"oid": "e87e2014e118e8f23fc4c730d7d47f0ca6d57423", "url": "https://github.com/AthenZ/athenz/commit/e87e2014e118e8f23fc4c730d7d47f0ca6d57423", "message": "ZTS provider: validate hostname attribute based on incoming source IP", "committedDate": "2020-06-19T00:43:11Z", "type": "forcePushed"}, {"oid": "f3765f8391f3c3350be7ab0eba760db3b0eb44ec", "url": "https://github.com/AthenZ/athenz/commit/f3765f8391f3c3350be7ab0eba760db3b0eb44ec", "message": "ZTS provider: validate hostname attribute based on incoming source IP", "committedDate": "2020-06-19T14:03:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMjI1MA==", "url": "https://github.com/AthenZ/athenz/pull/1014#discussion_r442912250", "bodyText": "We should use URI_HOSTNAME_PREFIX.length() instead of hardcoded 18", "author": "abvaidya", "createdAt": "2020-06-19T15:41:08Z", "path": "libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceZTSProvider.java", "diffHunk": "@@ -127,24 +157,113 @@ public InstanceConfirmation confirmInstance(InstanceConfirmation confirmation) {\n \n     @Override\n     public InstanceConfirmation refreshInstance(InstanceConfirmation confirmation) {\n-        \n+\n         // we do not allow refresh of zts provider certificates\n         // the caller should just request a new certificate\n \n         throw forbiddenError(\"ZTS Provider X.509 Certificates cannot be refreshed\");\n     }\n \n-    boolean validateIPAddress(final String clientIP, final String sanIPs) {\n+    /**\n+     * verifies that at least one of the sanIps matches clientIp\n+     * @param sanIps\n+     * @param clientIp\n+     * @return true if sanIps is null or one of the sanIps matches. false otherwise\n+     */\n+    boolean validateSanIp(final String[] sanIps, final String clientIp) {\n \n-        // if we have an IP specified in the CSR, it must match our client IP\n+        LOGGER.debug(\"Validating sanIps: {}, clientIp: {}\", sanIps, clientIp);\n \n-        if (sanIPs == null || sanIPs.isEmpty()) {\n+        // if we have an IP specified in the CSR, one of the sanIp must match our client IP\n+        if (sanIps == null || sanIps.length == 0) {\n             return true;\n         }\n \n-        return (sanIPs.equals(clientIP));\n+        if (clientIp == null || clientIp.isEmpty()) {\n+            return false;\n+        }\n+\n+        // It's possible both ipv4, ipv6 addresses are mentioned in sanIP\n+        for (String sanIp: sanIps) {\n+            if (sanIp.equals(clientIp)) {\n+                return true;\n+            }\n+        }\n+\n+        LOGGER.error(\"Unable to match sanIp: {} with clientIp:{}\", sanIps, clientIp);\n+        return false;\n     }\n \n+    /**\n+     * returns true if an empty hostname attribute is passed\n+     * returns true if a non-empty hostname attribute is passed and all IPs passed in sanIp match the IPs that hostname resolves to.\n+     * returns false in all other cases\n+     * @param hostname\n+     * @param sanIps\n+     * @return true or false\n+     */\n+    boolean validateHostname(final String hostname, final String[] sanIps) {\n+\n+        LOGGER.debug(\"Validating hostname: {}, sanIps: {}\", hostname, sanIps);\n+\n+        if (hostname == null || hostname.isEmpty()) {\n+            LOGGER.info(\"Request contains no hostname entry for validation\");\n+            // if more than one sanIp is passed, all sanIPs must map to hostname, and hostname is a must\n+            if (sanIps != null && sanIps.length > 1) {\n+                LOGGER.error(\"SanIps:{} > 1, and hostname is empty\", sanIps);\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        // IP in clientIp can be NATed. Rely on sanIp, which comes from the client, and is already matched with clientIp\n+        // sanIp should be non-empty\n+        if (sanIps == null || sanIps.length == 0) {\n+            LOGGER.error(\"Request contains no sanIp entry for hostname:{} validation\", hostname);\n+            return false;\n+        }\n+\n+        // All entries in sanIP must be one of the IPs that hostname resolves\n+        Set<String>  hostIps = hostnameResolver.getAllByName(hostname);\n+        for (String sanIp: sanIps) {\n+            if (!hostIps.contains(sanIp)) {\n+                LOGGER.error(\"One of sanIp: {} is not present in HostIps: {}\", hostIps, sanIps);\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * verifies if sanUri contains athenz://hostname/, the value matches the hostname\n+     * @param sanUri\n+     * @param hostname\n+     * @return\n+     */\n+    boolean validateSanUri(final String sanUri, final String hostname) {\n+\n+        LOGGER.debug(\"Validating sanUri: {}, hostname: {}\", sanUri, hostname);\n+\n+        if (sanUri == null || sanUri.isEmpty()) {\n+            LOGGER.info(\"Request contains no sanURI to verify\");\n+            return true;\n+        }\n+\n+        for (String uri: sanUri.split(\",\")) {\n+            int idx = uri.indexOf(URI_HOSTNAME_PREFIX);\n+            if (idx != -1) {\n+                if (!uri.substring(idx + 18).equals(hostname)) {", "originalCommit": "f3765f8391f3c3350be7ab0eba760db3b0eb44ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNjc2Mg==", "url": "https://github.com/AthenZ/athenz/pull/1014#discussion_r442916762", "bodyText": "and that gets called on each api call, and for each uri. we are hardcoding known lengths in other places.", "author": "psasidhar", "createdAt": "2020-06-19T15:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMjI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDgxNA==", "url": "https://github.com/AthenZ/athenz/pull/1014#discussion_r442930814", "bodyText": "ZTSProvider itself expected to be less frequently used. So, changed it to length().", "author": "psasidhar", "createdAt": "2020-06-19T16:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMjI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "b0854c5de3e4b0336db7dc7cf6abf9aee9b55bdf", "chunk": "diff --git a/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceZTSProvider.java b/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceZTSProvider.java\nindex de2deb55f..ec7a4915b 100644\n--- a/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceZTSProvider.java\n+++ b/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceZTSProvider.java\n\n@@ -253,7 +253,7 @@ public class InstanceZTSProvider implements InstanceProvider {\n         for (String uri: sanUri.split(\",\")) {\n             int idx = uri.indexOf(URI_HOSTNAME_PREFIX);\n             if (idx != -1) {\n-                if (!uri.substring(idx + 18).equals(hostname)) {\n+                if (!uri.substring(idx + URI_HOSTNAME_PREFIX.length()).equals(hostname)) {\n                     LOGGER.error(\"SanURI: {} does not contain hostname: {}\", sanUri, hostname);\n                     return false;\n                 }\n"}}, {"oid": "b0854c5de3e4b0336db7dc7cf6abf9aee9b55bdf", "url": "https://github.com/AthenZ/athenz/commit/b0854c5de3e4b0336db7dc7cf6abf9aee9b55bdf", "message": "ZTS provider: validate hostname attribute based on incoming source IP", "committedDate": "2020-06-19T16:17:35Z", "type": "commit"}, {"oid": "b0854c5de3e4b0336db7dc7cf6abf9aee9b55bdf", "url": "https://github.com/AthenZ/athenz/commit/b0854c5de3e4b0336db7dc7cf6abf9aee9b55bdf", "message": "ZTS provider: validate hostname attribute based on incoming source IP", "committedDate": "2020-06-19T16:17:35Z", "type": "forcePushed"}]}