{"pr_number": 1005, "pr_title": "adding additional role meta attributes via templates", "pr_createdAt": "2020-06-12T00:29:10Z", "pr_url": "https://github.com/AthenZ/athenz/pull/1005", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDIzOA==", "url": "https://github.com/AthenZ/athenz/pull/1005#discussion_r439520238", "bodyText": "The change itself is not sufficient since it's possible that the user has made some changes already and thus we don't want to lose any of those changes. So I want to make our logic a little more smarter.\nWhen applying the template and updating the role, we should read the original values and only override those that have been specified in the template. (let's have a unit test for this case as well).", "author": "havetisyan", "createdAt": "2020-06-12T16:24:03Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -2820,7 +2820,20 @@ Role updateTemplateRole(Role role, String domainName, List<TemplateParam> params\n         }\n         Role templateRole = new Role()", "originalCommit": "51f1524526d1e369b94cdf1c923affb4feb24fb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NTI2MA==", "url": "https://github.com/AthenZ/athenz/pull/1005#discussion_r441045260", "bodyText": "Done. Added logic to merge existing rolemeta from DB with new rolemeta values form template.\nadded a unit test to test this scenario too.", "author": "jothi-prasad", "createdAt": "2020-06-16T18:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDIzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDcxMw==", "url": "https://github.com/AthenZ/athenz/pull/1005#discussion_r439520713", "bodyText": "in our test, we should verify that all attributes have been set that are defined in the template to make sure all attributes are correctly processed.", "author": "havetisyan", "createdAt": "2020-06-12T16:24:56Z", "path": "servers/zms/src/test/java/com/yahoo/athenz/zms/DBServiceTest.java", "diffHunk": "@@ -7012,4 +7012,72 @@ public void testAutoApplySolutionTemplate() {\n \n         zms.deleteTopLevelDomain(mockDomRsrcCtx, domainName, auditRef);\n     }\n+\n+    @Test\n+    public void testApplySolutionTemplateWithRoleMetaData() {\n+\n+        String domainName = \"solutiontemplate-rolemeta\";\n+        String caller = \"testApplySolutionTemplateWithRoleMetaData\";\n+        TopLevelDomain dom1 = createTopLevelDomainObject(domainName,\n+                \"Test Domain1\", \"testOrg\", adminUser);\n+        zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, dom1);\n+\n+        // apply the template\n+\n+        List<String> templates = new ArrayList<>();\n+        templates.add(\"templateWithRoleMeta\");\n+        DomainTemplate domainTemplate = new DomainTemplate().setTemplateNames(templates);\n+        zms.dbService.executePutDomainTemplate(mockDomRsrcCtx, domainName, domainTemplate, auditRef, caller);\n+\n+        DomainTemplateList domainTemplateList = zms.dbService.listDomainTemplates(domainName);\n+        assertEquals(1, domainTemplateList.getTemplateNames().size());\n+\n+        // verify that our role collection includes the expected roles\n+\n+        List<String> names = zms.dbService.listRoles(domainName);\n+        assertEquals(2, names.size());\n+        assertTrue(names.contains(\"admin\"));\n+        assertTrue(names.contains(\"vip_admin\"));\n+\n+        Role role = zms.dbService.getRole(domainName, \"vip_admin\", false, false, false);\n+        assertEquals(domainName + \":role.vip_admin\", role.getName());\n+        assertNull(role.getTrust());", "originalCommit": "51f1524526d1e369b94cdf1c923affb4feb24fb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NTUyNQ==", "url": "https://github.com/AthenZ/athenz/pull/1005#discussion_r441045525", "bodyText": "Done", "author": "jothi-prasad", "createdAt": "2020-06-16T18:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "c6b60adc4e7f191d47c8c5b06ea62b7697e290ca", "chunk": "diff --git a/servers/zms/src/test/java/com/yahoo/athenz/zms/DBServiceTest.java b/servers/zms/src/test/java/com/yahoo/athenz/zms/DBServiceTest.java\nindex 192e73dbf..f91e93b6b 100644\n--- a/servers/zms/src/test/java/com/yahoo/athenz/zms/DBServiceTest.java\n+++ b/servers/zms/src/test/java/com/yahoo/athenz/zms/DBServiceTest.java\n\n@@ -7080,4 +7295,102 @@ public class DBServiceTest {\n \n         zms.deleteTopLevelDomain(mockDomRsrcCtx, domainName, auditRef);\n     }\n+\n+    @Test\n+    public void testUpdateUserAuthorityFilter() {\n+\n+        Authority savedAuthority = zms.dbService.zmsConfig.getUserAuthority();\n+\n+        Authority authority = Mockito.mock(Authority.class);\n+\n+        Mockito.when(authority.isAttributeSet(\"user.john\", \"employee\")).thenReturn(true);\n+        Mockito.when(authority.isAttributeSet(\"user.jane\", \"employee\")).thenReturn(false);\n+        Mockito.when(authority.isAttributeSet(\"user.joe\", \"employee\")).thenReturn(true);\n+\n+        zms.dbService.zmsConfig.setUserAuthority(authority);\n+\n+        RoleMember roleMemberJohn = new RoleMember().setMemberName(\"user.john\").setSystemDisabled(null);\n+        assertFalse(zms.dbService.updateUserAuthorityFilter(roleMemberJohn, \"employee\"));\n+\n+        roleMemberJohn.setSystemDisabled(0);\n+        assertFalse(zms.dbService.updateUserAuthorityFilter(roleMemberJohn, \"employee\"));\n+\n+        roleMemberJohn.setSystemDisabled(1);\n+        assertTrue(zms.dbService.updateUserAuthorityFilter(roleMemberJohn, \"employee\"));\n+        assertEquals(roleMemberJohn.getSystemDisabled(), Integer.valueOf(0));\n+\n+        RoleMember roleMemberJane = new RoleMember().setMemberName(\"user.jane\").setSystemDisabled(null);\n+        assertTrue(zms.dbService.updateUserAuthorityFilter(roleMemberJane, \"employee\"));\n+        assertEquals(roleMemberJane.getSystemDisabled(), Integer.valueOf(1));\n+\n+        assertFalse(zms.dbService.updateUserAuthorityFilter(roleMemberJane, \"employee\"));\n+        assertEquals(roleMemberJane.getSystemDisabled(), Integer.valueOf(1));\n+\n+        // reset authority to its original value\n+\n+        zms.dbService.zmsConfig.setUserAuthority(savedAuthority);\n+    }\n+\n+    @Test\n+    public void testIsUserAuthorityFilterChanged() {\n+\n+        Authority savedAuthority = zms.dbService.zmsConfig.getUserAuthority();\n+\n+        // with authority null - always false\n+\n+        zms.dbService.zmsConfig.setUserAuthority(null);\n+        assertFalse(zms.dbService.isUserAuthorityFilterChanged(\"filter1\", \"filter2\"));\n+\n+        Authority authority = Mockito.mock(Authority.class);\n+        zms.dbService.zmsConfig.setUserAuthority(authority);\n+\n+        assertFalse(zms.dbService.isUserAuthorityFilterChanged(null, null));\n+        assertFalse(zms.dbService.isUserAuthorityFilterChanged(\"\", null));\n+        assertFalse(zms.dbService.isUserAuthorityFilterChanged(null, \"\"));\n+        assertFalse(zms.dbService.isUserAuthorityFilterChanged(\"\", \"\"));\n+\n+        assertTrue(zms.dbService.isUserAuthorityFilterChanged(\"old\", null));\n+        assertTrue(zms.dbService.isUserAuthorityFilterChanged(\"old\", \"\"));\n+\n+        assertTrue(zms.dbService.isUserAuthorityFilterChanged(null, \"new\"));\n+        assertTrue(zms.dbService.isUserAuthorityFilterChanged(\"\", \"new\"));\n+\n+        assertTrue(zms.dbService.isUserAuthorityFilterChanged(\"old\", \"new\"));\n+        assertFalse(zms.dbService.isUserAuthorityFilterChanged(\"old\", \"old\"));\n+\n+        zms.dbService.zmsConfig.setUserAuthority(savedAuthority);\n+    }\n+\n+    @Test\n+    public void testUpdateRoleMemberDisabledState() {\n+\n+        final String domainName = \"test-domain\";\n+        final String roleName = \"role-name\";\n+        final String adminUser = \"user.admin\";\n+\n+        ObjectStoreConnection con = Mockito.mock(ObjectStoreConnection.class);\n+        Mockito.when(con.updateRoleMemberDisabledState(domainName, roleName, \"user.john\", \"user.admin\", 1, \"auditref\"))\n+                .thenReturn(true)\n+                .thenReturn(false)\n+                .thenThrow(new ResourceException(500, \"invalid operation\"));\n+\n+        RoleMember roleMember = new RoleMember().setMemberName(\"user.john\").setSystemDisabled(1);\n+        List<RoleMember> roleMembers = new ArrayList<>();\n+        roleMembers.add(roleMember);\n+\n+        // first time we get successful response\n+\n+        assertTrue(zms.dbService.updateRoleMemberDisabledState(null, con, roleMembers, domainName,\n+                roleName, adminUser, \"auditref\", \"unit-test\"));\n+\n+        // second time we're getting false so no changes\n+\n+        assertFalse(zms.dbService.updateRoleMemberDisabledState(null, con, roleMembers, domainName,\n+                roleName, adminUser, \"auditref\", \"unit-test\"));\n+\n+        // last time exception so no changes\n+\n+        assertFalse(zms.dbService.updateRoleMemberDisabledState(null, con, roleMembers, domainName,\n+                roleName, adminUser, \"auditref\", \"unit-test\"));\n+    }\n }\n"}}, {"oid": "c6b60adc4e7f191d47c8c5b06ea62b7697e290ca", "url": "https://github.com/AthenZ/athenz/commit/c6b60adc4e7f191d47c8c5b06ea62b7697e290ca", "message": "adding additional role meta attributes on adding roles via templates", "committedDate": "2020-06-16T18:01:42Z", "type": "commit"}, {"oid": "2cd514c3c076c04828ec2fca7509bc7b3049be36", "url": "https://github.com/AthenZ/athenz/commit/2cd514c3c076c04828ec2fca7509bc7b3049be36", "message": "added merging(Upsert) logic to avoid overwriting existing values", "committedDate": "2020-06-16T18:05:24Z", "type": "commit"}, {"oid": "2cd514c3c076c04828ec2fca7509bc7b3049be36", "url": "https://github.com/AthenZ/athenz/commit/2cd514c3c076c04828ec2fca7509bc7b3049be36", "message": "added merging(Upsert) logic to avoid overwriting existing values", "committedDate": "2020-06-16T18:05:24Z", "type": "forcePushed"}, {"oid": "a326b8e43d2f47a1023c5145537a07309219b6af", "url": "https://github.com/AthenZ/athenz/commit/a326b8e43d2f47a1023c5145537a07309219b6af", "message": "changing autoupdate flag to boolean", "committedDate": "2020-06-17T17:15:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NTQ0NQ==", "url": "https://github.com/AthenZ/athenz/pull/1005#discussion_r442355445", "bodyText": "we cannot change the behavior of the processRole - that method is used in lots of places.\nthis call must be done only in the method where templates are being handled.", "author": "havetisyan", "createdAt": "2020-06-18T16:32:00Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -509,6 +509,7 @@ boolean processRole(ObjectStoreConnection con, Role originalRole, String domainN\n         } else {\n             // carrying over auditEnabled from original role\n             role.setAuditEnabled(originalRole.getAuditEnabled());\n+            mergeOriginalRoleAndMetaRoleAttributes(originalRole, role);", "originalCommit": "a326b8e43d2f47a1023c5145537a07309219b6af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1OTYxNw==", "url": "https://github.com/AthenZ/athenz/pull/1005#discussion_r442559617", "bodyText": "Done.", "author": "jothi-prasad", "createdAt": "2020-06-18T23:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NTQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "842100092e141786d84a82fec114f2905682af13", "chunk": "diff --git a/servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java b/servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java\nindex 4fd2aaa32..3131641d0 100644\n--- a/servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java\n+++ b/servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java\n\n@@ -509,7 +509,6 @@ public class DBService {\n         } else {\n             // carrying over auditEnabled from original role\n             role.setAuditEnabled(originalRole.getAuditEnabled());\n-            mergeOriginalRoleAndMetaRoleAttributes(originalRole, role);\n             requestSuccess = con.updateRole(domainName, role);\n         }\n         \n"}}, {"oid": "d77a8a43665f0c1789dfa822bee5b0208540ba5a", "url": "https://github.com/AthenZ/athenz/commit/d77a8a43665f0c1789dfa822bee5b0208540ba5a", "message": "Merge branch 'master' of https://github.com/yahoo/athenz into rolemeta-changes", "committedDate": "2020-06-18T17:22:05Z", "type": "commit"}, {"oid": "842100092e141786d84a82fec114f2905682af13", "url": "https://github.com/AthenZ/athenz/commit/842100092e141786d84a82fec114f2905682af13", "message": "moving merge code out from process role in to template code", "committedDate": "2020-06-18T23:37:24Z", "type": "commit"}]}