{"pr_number": 1027, "pr_title": "support role certs for access checks in zms", "pr_createdAt": "2020-07-05T21:43:37Z", "pr_url": "https://github.com/AthenZ/athenz/pull/1027", "timeline": [{"oid": "de5e6e15c5b2a9d73b15d43c35e11ff75f0d1c7b", "url": "https://github.com/AthenZ/athenz/commit/de5e6e15c5b2a9d73b15d43c35e11ff75f0d1c7b", "message": "support role certs for access checks in zms", "committedDate": "2020-07-05T21:42:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMDg0NQ==", "url": "https://github.com/AthenZ/athenz/pull/1027#discussion_r449930845", "bodyText": "Typo in method name.", "author": "abvaidya", "createdAt": "2020-07-05T23:32:17Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -2142,24 +2143,46 @@ Principal createPrincipalForName(String principalName) {\n         return SimplePrincipal.create(domain, name, (String) null);\n     }\n \n-    boolean validRoleTokenAccess(String trustDomain, String domainName, String principalName) {\n+    boolean validateRoleBasedAccessCheck(List<String> roles, final String trustDomain, final String domainName,\n+                                         final String principalName, Authority authority) {\n+\n+        // we must have a valid authority to do the check\n+\n+        if (authority == null) {\n+            LOG.error(\"validateRoleBasedAccessCheck: principal has no valid authority\");\n+            return false;\n+        }\n \n         if (trustDomain != null) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: Cannot access cross-domain resources with RoleToken\");\n-            }\n+            LOG.error(\"validateRoleBasedAccessCheck: Cannot access cross-domain resources with role\");\n             return false;\n         }\n \n-        // for Role tokens we don't have a name component in the principal\n-        // so the principal name should be the same as the domain value \n-        // thus it must match the domain name from the resource\n+        if (authority instanceof RoleAuthority) {\n \n-        if (!domainName.equalsIgnoreCase(principalName)) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: resource domain does not match RoleToken domain\");\n+            // for Role tokens we don't have a name component in the principal\n+            // so the principal name should be the same as the domain value\n+            // thus it must match the domain name from the resource\n+\n+            if (!domainName.equalsIgnoreCase(principalName)) {\n+                LOG.error(\"validateRoleBasedAccessCheckq: resource domain {} does not match RoleToken domain {}\",", "originalCommit": "de5e6e15c5b2a9d73b15d43c35e11ff75f0d1c7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9ec7c614f5e700716b744edff88fe449b370ad7", "chunk": "diff --git a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\nindex 5f7a08bad..e52961e3f 100644\n--- a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n+++ b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n\n@@ -2165,7 +2165,7 @@ public class ZMSImpl implements Authorizer, KeyStore, ZMSHandler {\n             // thus it must match the domain name from the resource\n \n             if (!domainName.equalsIgnoreCase(principalName)) {\n-                LOG.error(\"validateRoleBasedAccessCheckq: resource domain {} does not match RoleToken domain {}\",\n+                LOG.error(\"validateRoleBasedAccessCheck: resource domain {} does not match RoleToken domain {}\",\n                         domainName, principalName);\n                 return false;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMDg4MA==", "url": "https://github.com/AthenZ/athenz/pull/1027#discussion_r449930880", "bodyText": "Typo in method name.", "author": "abvaidya", "createdAt": "2020-07-05T23:32:42Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -2142,24 +2143,46 @@ Principal createPrincipalForName(String principalName) {\n         return SimplePrincipal.create(domain, name, (String) null);\n     }\n \n-    boolean validRoleTokenAccess(String trustDomain, String domainName, String principalName) {\n+    boolean validateRoleBasedAccessCheck(List<String> roles, final String trustDomain, final String domainName,\n+                                         final String principalName, Authority authority) {\n+\n+        // we must have a valid authority to do the check\n+\n+        if (authority == null) {\n+            LOG.error(\"validateRoleBasedAccessCheck: principal has no valid authority\");\n+            return false;\n+        }\n \n         if (trustDomain != null) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: Cannot access cross-domain resources with RoleToken\");\n-            }\n+            LOG.error(\"validateRoleBasedAccessCheck: Cannot access cross-domain resources with role\");\n             return false;\n         }\n \n-        // for Role tokens we don't have a name component in the principal\n-        // so the principal name should be the same as the domain value \n-        // thus it must match the domain name from the resource\n+        if (authority instanceof RoleAuthority) {\n \n-        if (!domainName.equalsIgnoreCase(principalName)) {\n-            if (LOG.isWarnEnabled()) {\n-                LOG.warn(\"validRoleTokenAccess: resource domain does not match RoleToken domain\");\n+            // for Role tokens we don't have a name component in the principal\n+            // so the principal name should be the same as the domain value\n+            // thus it must match the domain name from the resource\n+\n+            if (!domainName.equalsIgnoreCase(principalName)) {\n+                LOG.error(\"validateRoleBasedAccessCheckq: resource domain {} does not match RoleToken domain {}\",\n+                        domainName, principalName);\n+                return false;\n+            }\n+        } else {\n+\n+            // for role certificates we're maintaining the full\n+            // role name in the list so we're going to make sure\n+            // they all have the correct prefix\n+\n+            final String prefix = domainName + AuthorityConsts.ROLE_SEP;\n+            for (String role : roles) {\n+                if (!role.startsWith(prefix)) {\n+                    LOG.error(\"validRoleBasedAccessCheck: role {} does not start with resource domain {}\",", "originalCommit": "de5e6e15c5b2a9d73b15d43c35e11ff75f0d1c7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9ec7c614f5e700716b744edff88fe449b370ad7", "chunk": "diff --git a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\nindex 5f7a08bad..e52961e3f 100644\n--- a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n+++ b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n\n@@ -2165,7 +2165,7 @@ public class ZMSImpl implements Authorizer, KeyStore, ZMSHandler {\n             // thus it must match the domain name from the resource\n \n             if (!domainName.equalsIgnoreCase(principalName)) {\n-                LOG.error(\"validateRoleBasedAccessCheckq: resource domain {} does not match RoleToken domain {}\",\n+                LOG.error(\"validateRoleBasedAccessCheck: resource domain {} does not match RoleToken domain {}\",\n                         domainName, principalName);\n                 return false;\n             }\n"}}, {"oid": "e9ec7c614f5e700716b744edff88fe449b370ad7", "url": "https://github.com/AthenZ/athenz/commit/e9ec7c614f5e700716b744edff88fe449b370ad7", "message": "fix fn name in log statements", "committedDate": "2020-07-06T03:59:54Z", "type": "commit"}]}