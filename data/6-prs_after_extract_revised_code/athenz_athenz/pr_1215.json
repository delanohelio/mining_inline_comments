{"pr_number": 1215, "pr_title": "set role group member expiry", "pr_createdAt": "2020-12-18T19:22:59Z", "pr_url": "https://github.com/AthenZ/athenz/pull/1215", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2ODMxMw==", "url": "https://github.com/AthenZ/athenz/pull/1215#discussion_r546168313", "bodyText": "Looking at the setRoleMemberExpiration function, it is called from 2 places and in both cases the roleMember object that is passed already includes the type since we call:         roleMember.setPrincipalType(principalType(roleMember.getMemberName()));\nSo rather than determining the bUser and bGroup values again, we already know the type so we should remove those two lines and convert this into a simple case statement - similar to validateRoleMemberPrincipal method.", "author": "havetisyan", "createdAt": "2020-12-19T01:13:16Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -3674,6 +3674,7 @@ void setRoleMemberExpiration(final AthenzDomain domain, final Role role, final R\n \n         boolean bUser = ZMSUtils.isUserDomainPrincipal(roleMember.getMemberName(), userDomainPrefix,\n                 addlUserCheckDomainPrefixList);\n+        boolean bGroup = roleMember.getMemberName().contains(AuthorityConsts.GROUP_SEP);", "originalCommit": "6b62e869a11ca04ebab0ecc87eaab3ab334239c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d4f654499ed77fa864dcb7c99216614d824b128", "chunk": "diff --git a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\nindex e609fa169..f0a47bfed 100644\n--- a/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n+++ b/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java\n\n@@ -3672,24 +3672,30 @@ public class ZMSImpl implements Authorizer, KeyStore, ZMSHandler {\n     void setRoleMemberExpiration(final AthenzDomain domain, final Role role, final RoleMember roleMember,\n             final Membership membership, final String caller) {\n \n-        boolean bUser = ZMSUtils.isUserDomainPrincipal(roleMember.getMemberName(), userDomainPrefix,\n-                addlUserCheckDomainPrefixList);\n-        boolean bGroup = roleMember.getMemberName().contains(AuthorityConsts.GROUP_SEP);\n+        switch (Principal.Type.getType(roleMember.getPrincipalType())) {\n \n-        if (bUser) {\n-            Timestamp userAuthorityExpiry = getUserAuthorityExpiry(roleMember.memberName, role.getUserAuthorityExpiration(), caller);\n-            if (userAuthorityExpiry != null) {\n-                roleMember.setExpiration(userAuthorityExpiry);\n-            } else {\n-                roleMember.setExpiration(memberDueDateTimestamp(domain.getDomain().getMemberExpiryDays(),\n-                        role.getMemberExpiryDays(), membership.getExpiration()));\n-            }\n-        } else if (bGroup) {\n-            roleMember.setExpiration(memberDueDateTimestamp(domain.getDomain().getGroupExpiryDays(),\n-                    role.getGroupExpiryDays(), membership.getExpiration()));\n-        } else {\n-            roleMember.setExpiration(memberDueDateTimestamp(domain.getDomain().getServiceExpiryDays(),\n-                    role.getServiceExpiryDays(), membership.getExpiration()));\n+            case USER:\n+\n+                Timestamp userAuthorityExpiry = getUserAuthorityExpiry(roleMember.memberName, role.getUserAuthorityExpiration(), caller);\n+                if (userAuthorityExpiry != null) {\n+                    roleMember.setExpiration(userAuthorityExpiry);\n+                } else {\n+                    roleMember.setExpiration(memberDueDateTimestamp(domain.getDomain().getMemberExpiryDays(),\n+                            role.getMemberExpiryDays(), membership.getExpiration()));\n+                }\n+                break;\n+\n+            case SERVICE:\n+\n+                roleMember.setExpiration(memberDueDateTimestamp(domain.getDomain().getServiceExpiryDays(),\n+                        role.getServiceExpiryDays(), membership.getExpiration()));\n+                break;\n+\n+            case GROUP:\n+\n+                roleMember.setExpiration(memberDueDateTimestamp(domain.getDomain().getGroupExpiryDays(),\n+                        role.getGroupExpiryDays(), membership.getExpiration()));\n+                break;\n         }\n     }\n \n"}}, {"oid": "228ae97f590cd089849e10413c58f7e4bd3efcef", "url": "https://github.com/AthenZ/athenz/commit/228ae97f590cd089849e10413c58f7e4bd3efcef", "message": "set role group member expiry", "committedDate": "2020-12-19T02:11:46Z", "type": "commit"}, {"oid": "1d4f654499ed77fa864dcb7c99216614d824b128", "url": "https://github.com/AthenZ/athenz/commit/1d4f654499ed77fa864dcb7c99216614d824b128", "message": "pr comments", "committedDate": "2020-12-19T02:11:46Z", "type": "commit"}, {"oid": "1d4f654499ed77fa864dcb7c99216614d824b128", "url": "https://github.com/AthenZ/athenz/commit/1d4f654499ed77fa864dcb7c99216614d824b128", "message": "pr comments", "committedDate": "2020-12-19T02:11:46Z", "type": "forcePushed"}]}