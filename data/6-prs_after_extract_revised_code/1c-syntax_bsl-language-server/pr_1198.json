{"pr_number": 1198, "pr_title": "\u0414\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0432 MethodSymbol", "pr_createdAt": "2020-05-16T13:44:41Z", "pr_url": "https://github.com/1c-syntax/bsl-language-server/pull/1198", "timeline": [{"oid": "13815eabf75ae0fe4681d274e0a784aeade9b263", "url": "https://github.com/1c-syntax/bsl-language-server/commit/13815eabf75ae0fe4681d274e0a784aeade9b263", "message": "\u0412 MethodSymbol \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043c\u043e\u0434\u0443\u043b\u0435\u0439", "committedDate": "2020-04-25T15:29:43Z", "type": "commit"}, {"oid": "c7b0832291c76c6bf3e674919b945f64c1270be9", "url": "https://github.com/1c-syntax/bsl-language-server/commit/c7b0832291c76c6bf3e674919b945f64c1270be9", "message": "\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0445\u0435\u0434\u0435\u0440\u044b \u043f\u043e\u0441\u043b\u0435 precommit", "committedDate": "2020-04-25T15:37:16Z", "type": "commit"}, {"oid": "e0d7ec0bdde6061c2c8e5a5c96d23dc2206f7742", "url": "https://github.com/1c-syntax/bsl-language-server/commit/e0d7ec0bdde6061c2c8e5a5c96d23dc2206f7742", "message": "\u0437\u0430\u043c\u0435\u043d\u0430 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 + \u043f\u043e\u043f\u0443\u0442\u043d\u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442", "committedDate": "2020-04-25T16:04:32Z", "type": "commit"}, {"oid": "5d48dc7c3a071ed0d78d088e13e268138a82f496", "url": "https://github.com/1c-syntax/bsl-language-server/commit/5d48dc7c3a071ed0d78d088e13e268138a82f496", "message": "\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439", "committedDate": "2020-04-25T18:15:43Z", "type": "commit"}, {"oid": "96ec872756dbf210db4ed4f53048b963bd2b943d", "url": "https://github.com/1c-syntax/bsl-language-server/commit/96ec872756dbf210db4ed4f53048b963bd2b943d", "message": "\u0437\u0430\u043c\u0435\u043d\u0430 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438", "committedDate": "2020-04-25T18:16:28Z", "type": "commit"}, {"oid": "24ab2571ef85304675427a631dcbcc7a8469adfe", "url": "https://github.com/1c-syntax/bsl-language-server/commit/24ab2571ef85304675427a631dcbcc7a8469adfe", "message": "\u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438", "committedDate": "2020-04-25T20:11:47Z", "type": "commit"}, {"oid": "46f3935f3fd690815df14c60c3c4a0ee2d6e4e6e", "url": "https://github.com/1c-syntax/bsl-language-server/commit/46f3935f3fd690815df14c60c3c4a0ee2d6e4e6e", "message": "\u0443\u043b\u0443\u0447\u0448\u0438\u043b \u0438\u043c\u044f \u043c\u0435\u0442\u043e\u0434\u0430", "committedDate": "2020-04-25T21:09:03Z", "type": "commit"}, {"oid": "2fc092c64375de5c48aa11357c8eaf79a2b68d49", "url": "https://github.com/1c-syntax/bsl-language-server/commit/2fc092c64375de5c48aa11357c8eaf79a2b68d49", "message": "Merge branch 'develop' into annotations-method-symbol-1115\n\n# Conflicts:\n#\tsrc/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\n#\tsrc/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UsingSynchronousCallsDiagnostic.java\n#\tsrc/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "committedDate": "2020-05-16T10:43:05Z", "type": "commit"}, {"oid": "fa6573613c0a82a687e09fe28a134a7ca08a7256", "url": "https://github.com/1c-syntax/bsl-language-server/commit/fa6573613c0a82a687e09fe28a134a7ca08a7256", "message": "\u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u0434 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0444\u0430\u0439\u043b \u0442\u0435\u0441\u0442\u043e\u0432", "committedDate": "2020-05-16T10:43:48Z", "type": "commit"}, {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "url": "https://github.com/1c-syntax/bsl-language-server/commit/bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "message": "\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0441\u043e\u0431\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0434\u043b\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438", "committedDate": "2020-05-16T13:36:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MTgyOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426381829", "bodyText": "\u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 //", "author": "theshadowco", "createdAt": "2020-05-18T05:48:15Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -39,13 +41,20 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n public final class MethodSymbolComputer\n   extends BSLParserBaseVisitor<ParseTree>\n   implements Computer<List<MethodSymbol>> {\n \n+  //\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0432 MethodSymbolComputerTest", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg1OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839858", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "author": "artbear", "createdAt": "2020-05-30T13:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MTgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5cbd659d89c16bc4a49cfa9e60baf86e7fd249db", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\nindex 815d0a3c8..1c5253123 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\n\n@@ -41,7 +41,6 @@ import javax.annotation.Nullable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzA3Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383072", "bodyText": "\u043d\u0430\u0434\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0444\u0430\u0439\u043b \u043f\u043e \u043e\u0431\u044b\u0447\u0438\u044f\u043c", "author": "theshadowco", "createdAt": "2020-05-18T05:52:31Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MTk1MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432841950", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043f\u043e \"\u043e\u0431\u044b\u0447\u0430\u044f\u043c\" - \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0444\u0430\u0439\u043b", "author": "artbear", "createdAt": "2020-05-30T13:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "558daaa30c69627e69039fb7ee8742da939ff411", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\nindex e435c4767..c3a377d7d 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n\n@@ -388,12 +388,17 @@ public class MethodSymbolComputerTest {\n     return documentContext.getSymbolTree().getMethods();\n   }\n \n-  private void checkModule(ServerContext serverContext, String path, String mdoRef) throws IOException {\n+  private void checkModule(\n+    ServerContext serverContext,\n+    String path,\n+    String mdoRef,\n+    int methodsCount\n+  ) throws IOException {\n     var file = new File(PATH_TO_METADATA, path);\n     var uri = Absolute.uri(file);\n     var documentContext = serverContext.addDocument(uri, FileUtils.readFileToString(file, StandardCharsets.UTF_8));\n     List<MethodSymbol> methods = documentContext.getSymbolTree().getMethods();\n-    assertThat(methods.size()).isEqualTo(1);\n+    assertThat(methods.size()).isEqualTo(methodsCount);\n     assertThat(methods.get(0).getName()).isEqualTo(\"\u0422\u0435\u0441\u0442\");\n     assertThat(methods.get(0).getMdoRef()).isEqualTo(mdoRef);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383143", "bodyText": "\u0432 \u0444\u0430\u0439\u043b", "author": "theshadowco", "createdAt": "2020-05-18T05:52:44Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzIyNg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383226", "bodyText": "\u0438 \u043d\u0438\u0436\u0435 \u0442\u043e\u0436\u0435", "author": "theshadowco", "createdAt": "2020-05-18T05:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MTk2Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432841962", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043f\u043e \"\u043e\u0431\u044b\u0447\u0430\u044f\u043c\" - \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0444\u0430\u0439\u043b", "author": "artbear", "createdAt": "2020-05-30T13:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MTk3MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432841970", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043f\u043e \"\u043e\u0431\u044b\u0447\u0430\u044f\u043c\" - \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0444\u0430\u0439\u043b - \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b", "author": "artbear", "createdAt": "2020-05-30T13:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "558daaa30c69627e69039fb7ee8742da939ff411", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\nindex e435c4767..c3a377d7d 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n\n@@ -388,12 +388,17 @@ public class MethodSymbolComputerTest {\n     return documentContext.getSymbolTree().getMethods();\n   }\n \n-  private void checkModule(ServerContext serverContext, String path, String mdoRef) throws IOException {\n+  private void checkModule(\n+    ServerContext serverContext,\n+    String path,\n+    String mdoRef,\n+    int methodsCount\n+  ) throws IOException {\n     var file = new File(PATH_TO_METADATA, path);\n     var uri = Absolute.uri(file);\n     var documentContext = serverContext.addDocument(uri, FileUtils.readFileToString(file, StandardCharsets.UTF_8));\n     List<MethodSymbol> methods = documentContext.getSymbolTree().getMethods();\n-    assertThat(methods.size()).isEqualTo(1);\n+    assertThat(methods.size()).isEqualTo(methodsCount);\n     assertThat(methods.get(0).getName()).isEqualTo(\"\u0422\u0435\u0441\u0442\");\n     assertThat(methods.get(0).getMdoRef()).isEqualTo(mdoRef);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzU5MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383591", "bodyText": "\u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 //", "author": "theshadowco", "createdAt": "2020-05-18T05:54:17Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n+  // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043d\u0430 8.3.15\n+\n+  @Test\n+  void testSeveralDirectivesWithoutContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043415()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\\n\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+\n+  }\n+\n+  @Test\n+  void testSeveralDirectivesWithoutContextReverse() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043416()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\\n\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  //  \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043d\u0430 8.3.15\n+  //\u043f\u043e\u0440\u044f\u0434\u043e\u043a", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg3NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839874", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "author": "artbear", "createdAt": "2020-05-30T13:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "558daaa30c69627e69039fb7ee8742da939ff411", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\nindex e435c4767..c3a377d7d 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n\n@@ -388,12 +388,17 @@ public class MethodSymbolComputerTest {\n     return documentContext.getSymbolTree().getMethods();\n   }\n \n-  private void checkModule(ServerContext serverContext, String path, String mdoRef) throws IOException {\n+  private void checkModule(\n+    ServerContext serverContext,\n+    String path,\n+    String mdoRef,\n+    int methodsCount\n+  ) throws IOException {\n     var file = new File(PATH_TO_METADATA, path);\n     var uri = Absolute.uri(file);\n     var documentContext = serverContext.addDocument(uri, FileUtils.readFileToString(file, StandardCharsets.UTF_8));\n     List<MethodSymbol> methods = documentContext.getSymbolTree().getMethods();\n-    assertThat(methods.size()).isEqualTo(1);\n+    assertThat(methods.size()).isEqualTo(methodsCount);\n     assertThat(methods.get(0).getName()).isEqualTo(\"\u0422\u0435\u0441\u0442\");\n     assertThat(methods.get(0).getMdoRef()).isEqualTo(mdoRef);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjAxOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426386019", "bodyText": "\u0438\u043c\u044f \u043a\u0430\u043f\u0441\u043e\u043c, \u043d\u0435?", "author": "theshadowco", "createdAt": "2020-05-18T06:02:50Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -39,13 +41,20 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n public final class MethodSymbolComputer\n   extends BSLParserBaseVisitor<ParseTree>\n   implements Computer<List<MethodSymbol>> {\n \n+  //\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0432 MethodSymbolComputerTest\n+  private static final Set<Integer> specialCompilerDirectivesTokenTypes = Set.of(", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg4MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839881", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "author": "artbear", "createdAt": "2020-05-30T13:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5cbd659d89c16bc4a49cfa9e60baf86e7fd249db", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\nindex 815d0a3c8..1c5253123 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\n\n@@ -41,7 +41,6 @@ import javax.annotation.Nullable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0NjU2Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426446563", "bodyText": "\u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 isPresent/isEmpty. \u0442\u043e\u0433\u0434\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0448\u0430\u0433 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d", "author": "nixel2007", "createdAt": "2020-05-18T08:17:16Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -177,4 +208,19 @@ private static String getParameterName(TerminalNode identifier) {\n       .map(ParseTree::getText)\n       .orElse(\"<UNKNOWN_IDENTIFIER>\");\n   }\n+\n+  private static List<Annotation> getAnnotations(List<? extends BSLParser.AnnotationContext> annotationContext) {\n+    final List<Annotation> annotations;\n+    if (annotationContext.isEmpty()) {\n+      annotations = Collections.emptyList();\n+    } else {\n+      annotations = annotationContext.stream()\n+        .map(annotation -> annotation.getStop().getType())\n+        .map(Annotation::of)\n+        .map(optionalAnnotation -> optionalAnnotation.orElse(null))\n+        .filter(Objects::nonNull)", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg5Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839896", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "author": "artbear", "createdAt": "2020-05-30T13:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0NjU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5cbd659d89c16bc4a49cfa9e60baf86e7fd249db", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\nindex 815d0a3c8..1c5253123 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java\n\n@@ -209,18 +236,18 @@ public final class MethodSymbolComputer\n       .orElse(\"<UNKNOWN_IDENTIFIER>\");\n   }\n \n-  private static List<Annotation> getAnnotations(List<? extends BSLParser.AnnotationContext> annotationContext) {\n-    final List<Annotation> annotations;\n+  private static List<AnnotationKind> getAnnotations(List<? extends BSLParser.AnnotationContext> annotationContext) {\n+    final List<AnnotationKind> annotationKinds;\n     if (annotationContext.isEmpty()) {\n-      annotations = Collections.emptyList();\n+      annotationKinds = Collections.emptyList();\n     } else {\n-      annotations = annotationContext.stream()\n+      annotationKinds = annotationContext.stream()\n         .map(annotation -> annotation.getStop().getType())\n-        .map(Annotation::of)\n-        .map(optionalAnnotation -> optionalAnnotation.orElse(null))\n-        .filter(Objects::nonNull)\n+        .map(AnnotationKind::of)\n+        .filter(optionalAnnotation -> optionalAnnotation.isPresent())\n+        .map(optionalAnnotation -> optionalAnnotation.get())\n         .collect(Collectors.toList());\n     }\n-    return annotations;\n+    return annotationKinds;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MDUxNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426450517", "bodyText": "\u0434\u043b\u044f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u0431\u044b\u043b\u043e \u0431\u044b \u0435\u0449\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0438\u043c\u0435\u043d\u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 (\u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f custom) \u0438 \u0441\u043f\u0438\u0441\u043a\u0435 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0442.\u0435. \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c Annotation \u0432 AnnotationKind (\u043a\u0430\u043a \u0442\u044b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b \u0432 \u0430\u043f\u0438), \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0434\u0430\u0436\u0435 \u0441\u0438\u043c\u0432\u043e\u043b) Annotation.", "author": "nixel2007", "createdAt": "2020-05-18T08:23:45Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/Annotation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.context.symbol.annotations;\n+\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public enum Annotation {", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzNDEyNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432934127", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e.\n\n\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0438\u043c\u0435\u043d\u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b Annotation, AnnotationKind \u0438 AnnotationParameterDefinition", "author": "artbear", "createdAt": "2020-05-31T10:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MDUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "5cbd659d89c16bc4a49cfa9e60baf86e7fd249db", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/Annotation.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/AnnotationKind.java\nsimilarity index 88%\nrename from src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/Annotation.java\nrename to src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/AnnotationKind.java\nindex 25772c749..014ad3894 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/Annotation.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/AnnotationKind.java\n\n@@ -26,7 +26,7 @@ import com.github._1c_syntax.bsl.parser.BSLParser;\n import java.util.Optional;\n import java.util.stream.Stream;\n \n-public enum Annotation {\n+public enum AnnotationKind {\n   BEFORE(BSLParser.ANNOTATION_BEFORE_SYMBOL),\n   AFTER(BSLParser.ANNOTATION_AFTER_SYMBOL),\n   AROUND(BSLParser.ANNOTATION_AROUND_SYMBOL),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Mjc3Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426452773", "bodyText": "CompilerDirectiveKind", "author": "nixel2007", "createdAt": "2020-05-18T08:27:10Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirective.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.context.symbol.annotations;\n+\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public enum CompilerDirective {", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTkxMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839913", "bodyText": "\u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043b", "author": "artbear", "createdAt": "2020-05-30T13:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Mjc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5cbd659d89c16bc4a49cfa9e60baf86e7fd249db", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirective.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirectiveKind.java\nsimilarity index 92%\nrename from src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirective.java\nrename to src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirectiveKind.java\nindex b02888431..abd6f5f4b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirective.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirectiveKind.java\n\n@@ -26,7 +26,7 @@ import com.github._1c_syntax.bsl.parser.BSLParser;\n import java.util.Optional;\n import java.util.stream.Stream;\n \n-public enum CompilerDirective {\n+public enum CompilerDirectiveKind {\n   AT_SERVER_NO_CONTEXT(BSLParser.ANNOTATION_ATSERVERNOCONTEXT_SYMBOL),\n   AT_CLIENT_AT_SERVER_NO_CONTEXT(BSLParser.ANNOTATION_ATCLIENTATSERVERNOCONTEXT_SYMBOL),\n   AT_CLIENT_AT_SERVER(BSLParser.ANNOTATION_ATCLIENTATSERVER_SYMBOL),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDA1MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426454051", "bodyText": "\u042d\u0442\u043e\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043b\u0438\u0431\u043e \u0432 MethodSymbol \u043b\u0438\u0431\u043e \u0432 MethodSymbolComputer (\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435)", "author": "nixel2007", "createdAt": "2020-05-18T08:29:11Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTkyMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839923", "bodyText": "\u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 MethodSymbolComputer", "author": "artbear", "createdAt": "2020-05-30T13:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "558daaa30c69627e69039fb7ee8742da939ff411", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\nindex e435c4767..c3a377d7d 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n\n@@ -388,12 +388,17 @@ public class MethodSymbolComputerTest {\n     return documentContext.getSymbolTree().getMethods();\n   }\n \n-  private void checkModule(ServerContext serverContext, String path, String mdoRef) throws IOException {\n+  private void checkModule(\n+    ServerContext serverContext,\n+    String path,\n+    String mdoRef,\n+    int methodsCount\n+  ) throws IOException {\n     var file = new File(PATH_TO_METADATA, path);\n     var uri = Absolute.uri(file);\n     var documentContext = serverContext.addDocument(uri, FileUtils.readFileToString(file, StandardCharsets.UTF_8));\n     List<MethodSymbol> methods = documentContext.getSymbolTree().getMethods();\n-    assertThat(methods.size()).isEqualTo(1);\n+    assertThat(methods.size()).isEqualTo(methodsCount);\n     assertThat(methods.get(0).getName()).isEqualTo(\"\u0422\u0435\u0441\u0442\");\n     assertThat(methods.get(0).getMdoRef()).isEqualTo(mdoRef);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426454890", "bodyText": "\u0430 \u0442\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0430 \u0442\u0440\u0435\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u0430\u0445?", "author": "nixel2007", "createdAt": "2020-05-18T08:30:27Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.", "originalCommit": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2OTQ5NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r431969494", "bodyText": "@nixel2007 \u043d\u0430 3\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u0430\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b, \u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438, \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435, \u0447\u0442\u043e \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445.\n\u0438\u043b\u0438 \u0442\u044b \u043f\u0440\u043e 3 \u0438 \u0431\u043e\u043b\u0435\u0435, \u043a\u043e\u0433\u0434\u0430 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u0435\u0441\u0442\u044c?", "author": "artbear", "createdAt": "2020-05-28T16:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDA3Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r431970072", "bodyText": "\u043f\u0440\u043e \u0440\u0430\u0437\u043d\u044b\u0435 - \u0434\u0430, \u043f\u043e\u043d\u044f\u043b. \u0430 \u0432\u043e\u0442 \u043f\u0440\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 - \u0445\u043e\u0440\u043e\u0448\u043e \u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c.", "author": "nixel2007", "createdAt": "2020-05-28T16:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MDQ2Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432840463", "bodyText": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b.\n\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u0443\u0431\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0430\u0440\u0443 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435 \u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435 \u043f\u0440\u043e\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c 2 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437, \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0435 \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f.\n\n\n\u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u0434\u0440\u0443\u0433\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u0443 (\u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437), \u0442\u043e \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0442\u0430\u043a\u0441-\u043e\u0448\u0438\u0431\u043a\u0430, \u043a\u0430\u043a \u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445\n\n\n\u0434\u043b\u044f \u043f\u0430\u0440 &\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438 &\u041c\u043e\u044f\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n\n\n\u0442.\u0435. \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u0438 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.", "author": "artbear", "createdAt": "2020-05-30T13:09:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MDgxNg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432840816", "bodyText": "\u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b", "author": "artbear", "createdAt": "2020-05-30T13:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "558daaa30c69627e69039fb7ee8742da939ff411", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\nindex e435c4767..c3a377d7d 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java\n\n@@ -388,12 +388,17 @@ public class MethodSymbolComputerTest {\n     return documentContext.getSymbolTree().getMethods();\n   }\n \n-  private void checkModule(ServerContext serverContext, String path, String mdoRef) throws IOException {\n+  private void checkModule(\n+    ServerContext serverContext,\n+    String path,\n+    String mdoRef,\n+    int methodsCount\n+  ) throws IOException {\n     var file = new File(PATH_TO_METADATA, path);\n     var uri = Absolute.uri(file);\n     var documentContext = serverContext.addDocument(uri, FileUtils.readFileToString(file, StandardCharsets.UTF_8));\n     List<MethodSymbol> methods = documentContext.getSymbolTree().getMethods();\n-    assertThat(methods.size()).isEqualTo(1);\n+    assertThat(methods.size()).isEqualTo(methodsCount);\n     assertThat(methods.get(0).getName()).isEqualTo(\"\u0422\u0435\u0441\u0442\");\n     assertThat(methods.get(0).getMdoRef()).isEqualTo(mdoRef);\n   }\n"}}, {"oid": "558daaa30c69627e69039fb7ee8742da939ff411", "url": "https://github.com/1c-syntax/bsl-language-server/commit/558daaa30c69627e69039fb7ee8742da939ff411", "message": "Merge remote-tracking branch 'origin/develop' into annotations-method-symbol-1115\n\n# Conflicts:\n#\tsrc/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "committedDate": "2020-05-30T12:39:14Z", "type": "commit"}, {"oid": "5cbd659d89c16bc4a49cfa9e60baf86e7fd249db", "url": "https://github.com/1c-syntax/bsl-language-server/commit/5cbd659d89c16bc4a49cfa9e60baf86e7fd249db", "message": "\u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043b \u043a\u043b\u0430\u0441\u0441\u044b \u0432 xxxKind + \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\n\n\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f", "committedDate": "2020-05-30T12:59:59Z", "type": "commit"}, {"oid": "37f2a74f24217e8f0e6fe1b51c1a6728798407e0", "url": "https://github.com/1c-syntax/bsl-language-server/commit/37f2a74f24217e8f0e6fe1b51c1a6728798407e0", "message": "\u0442\u0435\u0441\u0442 \u0434\u0432\u043e\u0439\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0434\u043d\u0438\u0445 \u0438 \u0442\u0435\u0445 \u0436\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432", "committedDate": "2020-05-30T13:18:52Z", "type": "commit"}, {"oid": "0ce5f524b36ca7e85513e5dee24893a9fdb4f3cd", "url": "https://github.com/1c-syntax/bsl-language-server/commit/0ce5f524b36ca7e85513e5dee24893a9fdb4f3cd", "message": "\u0441\u0434\u0435\u043b\u0430\u043b \u043e\u0431\u0449\u0438\u0439 \u0442\u0435\u0441\u0442", "committedDate": "2020-05-30T13:29:47Z", "type": "commit"}, {"oid": "4620b2287e9af74e87d6f0d9fab5cfc7e4579b60", "url": "https://github.com/1c-syntax/bsl-language-server/commit/4620b2287e9af74e87d6f0d9fab5cfc7e4579b60", "message": "\u0430\u043d\u0430\u043b\u0438\u0437 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n\n\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043a\u043b\u0430\u0441\u0441\u043e\u0432", "committedDate": "2020-05-31T10:45:39Z", "type": "commit"}, {"oid": "f6591d2913910d2cf10c97ff0c656b6236285eda", "url": "https://github.com/1c-syntax/bsl-language-server/commit/f6591d2913910d2cf10c97ff0c656b6236285eda", "message": "\u043f\u0430\u0440\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0439", "committedDate": "2020-05-31T10:50:37Z", "type": "commit"}, {"oid": "b426db56084354dea05978ee840a2a65795fee82", "url": "https://github.com/1c-syntax/bsl-language-server/commit/b426db56084354dea05978ee840a2a65795fee82", "message": "\u0443\u0434\u0430\u043b\u0438\u043b \u043c\u0435\u043b\u043a\u0438\u0435 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b", "committedDate": "2020-05-31T11:12:11Z", "type": "commit"}, {"oid": "92ceed5b55b433c114f37df2b180460eda406f41", "url": "https://github.com/1c-syntax/bsl-language-server/commit/92ceed5b55b433c114f37df2b180460eda406f41", "message": "\u0417\u0430\u0431\u044b\u0442\u044b\u0435 \u0445\u0435\u0434\u0435\u0440\u044b", "committedDate": "2020-05-31T13:35:22Z", "type": "commit"}, {"oid": "f97f684569d49fcd9868313a852649424f7346dc", "url": "https://github.com/1c-syntax/bsl-language-server/commit/f97f684569d49fcd9868313a852649424f7346dc", "message": "Fix qf", "committedDate": "2020-06-09T07:14:59Z", "type": "commit"}]}