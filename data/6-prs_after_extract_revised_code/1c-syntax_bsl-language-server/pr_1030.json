{"pr_number": 1030, "pr_title": "\u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438", "pr_createdAt": "2020-04-10T17:59:09Z", "pr_url": "https://github.com/1c-syntax/bsl-language-server/pull/1030", "timeline": [{"oid": "ccb53d480d4a5a5e74efa4e2b4ab5ff6e0f02995", "url": "https://github.com/1c-syntax/bsl-language-server/commit/ccb53d480d4a5a5e74efa4e2b4ab5ff6e0f02995", "message": "\u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438", "committedDate": "2020-04-10T16:23:37Z", "type": "commit"}, {"oid": "8ab3194db45131718c0747a5ae9692a2e9ce088f", "url": "https://github.com/1c-syntax/bsl-language-server/commit/8ab3194db45131718c0747a5ae9692a2e9ce088f", "message": "Merge branch 'develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\tdocs/en/diagnostics/index.md", "committedDate": "2020-04-10T16:54:25Z", "type": "commit"}, {"oid": "ef2436c756f2fccde286a6e43b90cb11b55781e9", "url": "https://github.com/1c-syntax/bsl-language-server/commit/ef2436c756f2fccde286a6e43b90cb11b55781e9", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b \"\u0445\u0438\u0442\u0440\u044b\u0435\" \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438", "committedDate": "2020-04-10T17:51:38Z", "type": "commit"}, {"oid": "11c5d98f46da328ba600e233fc6116a33cc34460", "url": "https://github.com/1c-syntax/bsl-language-server/commit/11c5d98f46da328ba600e233fc6116a33cc34460", "message": "\u0441\u043b\u0435\u0433\u043a\u0430 \u0443\u0442\u043e\u0447\u043d\u0438\u043b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u043e\u043a", "committedDate": "2020-04-10T17:57:29Z", "type": "commit"}, {"oid": "f51dc9db4930568319f483633b797caf85c47edf", "url": "https://github.com/1c-syntax/bsl-language-server/commit/f51dc9db4930568319f483633b797caf85c47edf", "message": "\u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043b\u0441\u044f \u043e\u0442 AbstractDiagnostic \u0438 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u0438\u043b \u043c\u0435\u0442\u043e\u0434 check()", "committedDate": "2020-04-10T20:13:23Z", "type": "commit"}, {"oid": "b429d9fd686ecc606c97d01049739f7096a64cf5", "url": "https://github.com/1c-syntax/bsl-language-server/commit/b429d9fd686ecc606c97d01049739f7096a64cf5", "message": "\u043e\u0431\u043b\u0435\u0433\u0447\u0438\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u0430\u0432\u0438\u043b\u0430", "committedDate": "2020-04-10T20:52:57Z", "type": "commit"}, {"oid": "9d83c6a8b1296f994a46dc61a28a5477ce18a3ee", "url": "https://github.com/1c-syntax/bsl-language-server/commit/9d83c6a8b1296f994a46dc61a28a5477ce18a3ee", "message": "\u0435\u0449\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b \u0438 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e", "committedDate": "2020-04-10T21:05:53Z", "type": "commit"}, {"oid": "4703e94a58f6a825793ddbade04a287465a05261", "url": "https://github.com/1c-syntax/bsl-language-server/commit/4703e94a58f6a825793ddbade04a287465a05261", "message": "\u0443\u0441\u043a\u043e\u0440\u0438\u043b \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0439\u043b\u0430", "committedDate": "2020-04-10T21:23:06Z", "type": "commit"}, {"oid": "d535c2765bd4e6bcfd52f5ec9a77375f7d81bd81", "url": "https://github.com/1c-syntax/bsl-language-server/commit/d535c2765bd4e6bcfd52f5ec9a77375f7d81bd81", "message": "\u0443\u0431\u0440\u0430\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0439 \u043a\u043e\u0434", "committedDate": "2020-04-10T21:40:27Z", "type": "commit"}, {"oid": "508bbc076d705ddccace7231bbd044b593416d48", "url": "https://github.com/1c-syntax/bsl-language-server/commit/508bbc076d705ddccace7231bbd044b593416d48", "message": "\u0435\u0449\u0435 \u0441\u043b\u0435\u0433\u043a\u0430 \u0443\u0441\u043a\u043e\u0440\u0438\u043b\n\n+ \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443", "committedDate": "2020-04-10T22:17:35Z", "type": "commit"}, {"oid": "59331806ffec6342c0bcc5f1814273ab559d04e0", "url": "https://github.com/1c-syntax/bsl-language-server/commit/59331806ffec6342c0bcc5f1814273ab559d04e0", "message": "\u043f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u0432 \u0441\u043e\u0441\u0435\u0434\u043d\u0435\u043c \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438", "committedDate": "2020-04-10T22:49:23Z", "type": "commit"}, {"oid": "74f6e396ac7925b26b00b23c9d42fe263e9ae5a8", "url": "https://github.com/1c-syntax/bsl-language-server/commit/74f6e396ac7925b26b00b23c9d42fe263e9ae5a8", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b .map(token -> token.getLine()).distinct() \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f", "committedDate": "2020-04-11T09:18:05Z", "type": "commit"}, {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5", "url": "https://github.com/1c-syntax/bsl-language-server/commit/affd4cb6a510e1737a0fd97631663c9d66d6b9f5", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\t.github/workflows/bechmark.yml", "committedDate": "2020-04-11T09:25:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407043202", "bodyText": "\u0425\u0430\u0440\u0434\u043a\u043e\u0434.", "author": "asosnoviy", "createdAt": "2020-04-11T09:50:05Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic {\n+  private static final Pattern EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEach(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine > prevLine + 2) {", "originalCommit": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTg1Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407045853", "bodyText": "\u043f\u043e\u0447\u0435\u043c\u0443? \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a.\n\u044f \u043f\u043e\u043a\u0430 \u043b\u0443\u0447\u0448\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435 \u0432\u0438\u0436\u0443 (\n\u0435\u0441\u043b\u0438 \u0432\u0438\u0434\u0438\u0448\u044c, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438 \u0441\u0432\u043e\u0439.", "author": "artbear", "createdAt": "2020-04-11T10:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Njk1NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407046954", "bodyText": "\u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e 2 \u044d\u0442\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438. \u041c\u043d\u0435 \u0432\u043e\u0442 2 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0430 \u043d\u0430 3\u043c \u043d\u0430\u0434\u043e \u043e\u0440\u0430\u0442\u044c.", "author": "asosnoviy", "createdAt": "2020-04-11T10:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NzI0MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407047241", "bodyText": "\u0430\u0433\u0430, \u043f\u0440\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043b\u043e\u0433\u0438\u0447\u043d\u043e. \u0441\u0434\u0435\u043b\u0430\u044e.", "author": "artbear", "createdAt": "2020-04-11T10:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzkyNg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407053926", "bodyText": "\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430", "author": "artbear", "createdAt": "2020-04-11T11:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "008efc328a29c27611fc6b8aa431a86b56aae114", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 803eb7120..31aadf1ba 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -24,6 +24,7 @@ package com.github._1c_syntax.bsl.languageserver.diagnostics;\n import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n"}}, {"oid": "c1df10e2309f6ded95b7bec46c29d3c1785af69a", "url": "https://github.com/1c-syntax/bsl-language-server/commit/c1df10e2309f6ded95b7bec46c29d3c1785af69a", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u0431\u0435\u0437 \u0444\u0430\u0439\u043b\u043e\u0432, \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c", "committedDate": "2020-04-11T10:11:15Z", "type": "commit"}, {"oid": "16de0c9a0afd4158450c33bd3baae59b8c2bc013", "url": "https://github.com/1c-syntax/bsl-language-server/commit/16de0c9a0afd4158450c33bd3baae59b8c2bc013", "message": "\u0440\u0430\u0441\u0448\u0438\u0440\u0438\u043b \u0442\u0435\u0441\u0442\u044b, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 CR \u0438 \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u044e", "committedDate": "2020-04-11T10:11:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407045103", "bodyText": "\u0410 \u0447\u0442\u043e \u043e\u043d\u043e \u0442\u0430\u043c \u043f\u043e\u0439\u043c\u0430\u043b\u043e? \u0422\u0430\u043c \u0436\u0435 \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430. \u0418 \u043f\u043e\u043c\u043e\u0435\u043c\u0443 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0441\u0438\u0442\u0441\u044f \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439.", "author": "asosnoviy", "createdAt": "2020-04-11T10:11:06Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "originalCommit": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTUzNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407045537", "bodyText": "\u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u0434\u043d\u0430?\n\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0438\u0434\u0438\u0442 2 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0435, \u0432\u0435\u0440\u043d\u043e?", "author": "artbear", "createdAt": "2020-04-11T10:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjI1NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407046254", "bodyText": "\u043d\u0443 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a 34 \u0438 35 \u0432\u0438\u0434\u043d\u044b \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0435.", "author": "artbear", "createdAt": "2020-04-11T10:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjY4NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407046684", "bodyText": "\u041c\u043e\u0436\u0435\u0442 \u044d\u0442\u043e \u043d\u0430 \u0413\u0425 \u0432\u0438\u0434\u043d\u043e \u043f\u043e \u0434\u0440\u0443\u0433\u043e\u043c\u0443\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430 \u0412\u0421\u0426", "author": "asosnoviy", "createdAt": "2020-04-11T10:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NzIwNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407047205", "bodyText": "\u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u043a\u0430\u043a \u0432 \u0418\u0414\u0415\u0410 \u0432\u0438\u0434\u043d\u043e.\n\u043d\u0430 35 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0438\u0434\u0435\u043d \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u0443\u0440\u0441\u043e\u0440.\n\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u0441\u044c - \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0438\u0434\u043d\u044b 2 \u0441\u0442\u0440\u043e\u043a\u0438, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430.\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430 \u0412\u0421\u0426 - \u043d\u0435 \u043f\u043e\u043d\u044f\u043b, \u043f\u043e\u044f\u0441\u043d\u0438.", "author": "artbear", "createdAt": "2020-04-11T10:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1Mzk1NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407053955", "bodyText": "\u0440\u0435\u0448\u0438\u043b\u0438 \u044d\u0442\u043e \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435?", "author": "artbear", "createdAt": "2020-04-11T11:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMjY2Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407102663", "bodyText": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e. \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043e \u0432 \u0412\u0421\u0426", "author": "artbear", "createdAt": "2020-04-11T19:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "16de0c9a0afd4158450c33bd3baae59b8c2bc013", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\nindex 4451c779d..f586e2ef8 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\n\n@@ -34,9 +34,25 @@ class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<Consecu\n   }\n \n   @Test\n-  void test() {\n+  void test_CRLF_And_Spaces() {\n+    checkModuleText(false);\n+  }\n+\n+  @Test\n+  void test_CR_And_Spaces_And_Tab() {\n+    checkModuleText(true);\n+  }\n+\n+  void checkModuleText(boolean use_CR_WithTab) {\n+\n+    String module = getText();\n+\n+    if (use_CR_WithTab){\n+      module = module.replace(\"\\n\", \"\\r\");\n+      module = module.replace(\"  \", \"\\t\");\n+    }\n \n-    List<Diagnostic> diagnostics = getDiagnostics();\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n \n     assertThat(diagnostics, true)\n       .hasRange(1, 0, 2, 0)\n"}}, {"oid": "ad659ff05af6c22d2fa59392d45cb119aa6bfada", "url": "https://github.com/1c-syntax/bsl-language-server/commit/ad659ff05af6c22d2fa59392d45cb119aa6bfada", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u0435 \u0438\u043c\u044f \u043c\u0435\u0442\u043e\u0434\u0430 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438", "committedDate": "2020-04-11T11:32:11Z", "type": "commit"}, {"oid": "008efc328a29c27611fc6b8aa431a86b56aae114", "url": "https://github.com/1c-syntax/bsl-language-server/commit/008efc328a29c27611fc6b8aa431a86b56aae114", "message": "\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a", "committedDate": "2020-04-11T11:43:10Z", "type": "commit"}, {"oid": "973dcb5c3f56a09b29df7a756cc3368199c42eef", "url": "https://github.com/1c-syntax/bsl-language-server/commit/973dcb5c3f56a09b29df7a756cc3368199c42eef", "message": "\u0437\u0430\u0438\u043d\u043b\u0430\u0439\u043d\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434", "committedDate": "2020-04-11T11:43:53Z", "type": "commit"}, {"oid": "2fe921de6fe8306ee2a987aa4e79d47aa603a76d", "url": "https://github.com/1c-syntax/bsl-language-server/commit/2fe921de6fe8306ee2a987aa4e79d47aa603a76d", "message": "\u0443\u0431\u0440\u0430\u043b \u043f\u0440\u043e\u0431\u0435\u043b\u044b", "committedDate": "2020-04-11T16:24:52Z", "type": "commit"}, {"oid": "eed65af6fa813a3d7b8a87cf83d336edbaf8bc27", "url": "https://github.com/1c-syntax/bsl-language-server/commit/eed65af6fa813a3d7b8a87cf83d336edbaf8bc27", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432 + \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441", "committedDate": "2020-04-11T19:36:26Z", "type": "commit"}, {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8", "url": "https://github.com/1c-syntax/bsl-language-server/commit/b2a0ce520b41cdf56e65a8d4083fceed02f94fe8", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439", "committedDate": "2020-04-11T19:36:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTAwNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407105007", "bodyText": "allowedEmptyLinesCount\", 3 - \u043c\u043e\u0436\u043d\u043e 3 \u043f\u043e\u0434\u0440\u044f\u0434, \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442\n.hasRange(29, 0, 31, 0) - \u0418\u0445 \u0442\u0430\u043c \u0432\u0441\u0435\u0433\u043e 3.", "author": "asosnoviy", "createdAt": "2020-04-11T20:02:47Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_CRLF_And_Spaces() {\n+    checkModuleText(false);\n+  }\n+\n+  @Test\n+  void test_CR_And_Spaces_And_Tab() {\n+    checkModuleText(true);\n+  }\n+\n+  void checkModuleText(boolean use_CR_WithTab) {\n+\n+    String module = getText();\n+\n+    if (use_CR_WithTab){\n+      module = module.replace(\"\\n\", \"\\r\");\n+      module = module.replace(\"  \", \"\\t\");\n+    }\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasRange(5, 0, 6, 0)\n+      .hasRange(10, 0, 11, 0)\n+      .hasRange(14, 0, 15, 0)\n+      .hasRange(17, 0, 18, 0)\n+      .hasRange(22, 0, 23, 0)\n+      .hasRange(26, 0, 27, 0)\n+      .hasRange(29, 0, 31, 0)\n+      .hasRange(33, 0, 34, 0)\n+      .hasSize(9)\n+    ;\n+\n+  }\n+\n+  @Test\n+  void test_ConfigureEmptyLineParam() {\n+    Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();\n+    configuration.put(\"allowedEmptyLinesCount\", 3);\n+    diagnosticInstance.configure(configuration);\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(29, 0, 31, 0)", "originalCommit": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMDA1NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407120054", "bodyText": "\u0434\u0430, \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u0442\u0435\u0441\u0442\u0435. \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e", "author": "artbear", "createdAt": "2020-04-11T22:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "3134c96cbafd8d10999ec2b67510384a4bea332b", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\nindex cf63d6702..298c12f6a 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\n\n@@ -76,7 +76,7 @@ class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<Consecu\n   @Test\n   void test_ConfigureEmptyLineParam() {\n     Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();\n-    configuration.put(\"allowedEmptyLinesCount\", 3);\n+    configuration.put(\"allowedEmptyLinesCount\", 2);\n     diagnosticInstance.configure(configuration);\n \n     List<Diagnostic> diagnostics = getDiagnostics();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407107426", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432.", "author": "asosnoviy", "createdAt": "2020-04-11T20:28:33Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "originalCommit": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExOTI3MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407119270", "bodyText": "\u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0438.", "author": "artbear", "createdAt": "2020-04-11T22:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDgyMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407400823", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432, \u0442.\u043a. \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0438.", "author": "asosnoviy", "createdAt": "2020-04-13T09:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMjA5Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407702097", "bodyText": "@artbear \u041d\u0443 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0436\u0435.", "author": "asosnoviy", "createdAt": "2020-04-13T20:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNDg2Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407934866", "bodyText": "\u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0435\u0449\u0435 \u0432\u0447\u0435\u0440\u0430 \u0443\u0434\u0430\u043b\u0435\u043d.", "author": "artbear", "createdAt": "2020-04-14T07:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MTYzNA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407941634", "bodyText": "\u041d\u0435 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0439 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043b\u0437, \u0443\u0441\u0442\u0430\u044e \u043b\u0438\u0441\u0442\u0430\u0442\u044c \u0442\u0443\u0434\u0430 \u0441\u044e\u0434\u0430. \u041d\u0430\u0434\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434.", "author": "asosnoviy", "createdAt": "2020-04-14T08:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1ODIwMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407958202", "bodyText": "\u0434\u0430, \u043f\u043e\u0447\u0435\u043c\u0443-\u0442\u043e \u0437\u0430\u0431\u044b\u043b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 (\n\u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f \u043d\u0435 \u0431\u0443\u0434\u0443,\n\u0442\u044b \u0441\u0430\u043c, \u043f\u043b\u0438\u0437, \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439 \u0438\u0445 \u0442\u043e\u0433\u0434\u0430 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e.", "author": "artbear", "createdAt": "2020-04-14T08:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "3134c96cbafd8d10999ec2b67510384a4bea332b", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 409ddd319..294a4b30b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -56,7 +56,7 @@ public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implemen\n   private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n   private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n \n-  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n   @DiagnosticParameter(\n     type = Integer.class,\n     defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n"}}, {"oid": "3134c96cbafd8d10999ec2b67510384a4bea332b", "url": "https://github.com/1c-syntax/bsl-language-server/commit/3134c96cbafd8d10999ec2b67510384a4bea332b", "message": "\u0443\u0442\u043e\u0447\u043d\u0438\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430", "committedDate": "2020-04-11T22:57:02Z", "type": "commit"}, {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd", "url": "https://github.com/1c-syntax/bsl-language-server/commit/b0bdb686770302deafdb1172c7831bbfa38dc8fd", "message": "\u0435\u0449\u0435 \u0443\u0441\u043a\u043e\u0440\u0438\u043b, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e", "committedDate": "2020-04-11T23:02:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407128867", "bodyText": "https://t.me/bsl_language_server/38546", "author": "asosnoviy", "createdAt": "2020-04-12T00:54:51Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "originalCommit": "b0bdb686770302deafdb1172c7831bbfa38dc8fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MTU4Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407171586", "bodyText": "\u044f \u043f\u043e\u044f\u0441\u043d\u044f\u043b \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043f\u043e\u0447\u0435\u043c\u0443 \u043d\u0443\u0436\u0435\u043d \u043e\u0434\u0438\u043d \u043c\u0435\u0442\u043e\u0434 \u0432\u043c\u0435\u0441\u0442\u043e 2\u0445 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430.\n\u0447\u0442\u043e\u0431\u044b \u0432 \u041a\u0410\u0416\u0414\u041e\u041c \u0442\u0435\u0441\u0442\u0435 \u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u0438 \u0414\u0412\u0415 \u0441\u0442\u0440\u043e\u0447\u043a\u0438 \u043a\u043e\u0434\u0430.\n\u0410 \u043c\u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043e\u0434\u0430 \u0437\u0430 \u0441\u0447\u0435\u0442 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u043e\u0432, \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c \u043e\u0434\u043d\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0444\u0430\u0439\u043b\u043e\u043c \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0442\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u0435\u0439\u0441\u044b.\n\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0437\u043b\u043e. \u0414\u0430\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u0447\u043a\u0438.\n\u0434\u043b\u044f \u043c\u0435\u043d\u044f \u044d\u0442\u043e \u0430\u0437\u044b \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430.\n@nixel2007 \u0440\u0435\u0448\u0430\u0439", "author": "artbear", "createdAt": "2020-04-12T09:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3ODY3Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407178677", "bodyText": "\"\u0432 \u041a\u0410\u0416\u0414\u041e\u041c\" - \u042d\u0442\u043e \u0432 \u043e\u0434\u043d\u043e\u043c.", "author": "asosnoviy", "createdAt": "2020-04-12T10:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MjkzNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407182937", "bodyText": "\u043f\u043e\u0434\u0443\u043c\u0430\u0439 \u0434\u0430\u043b\u044c\u0448\u0435, \u043d\u0435 \u0446\u0438\u043a\u043b\u0438\u0441\u044c \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435.\n\u0435\u0441\u043b\u0438 \u044e\u0437\u0430\u0442\u044c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u0441 \u0442\u0435\u0441\u0442-\u043a\u0435\u0439\u0441\u0430\u043c\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a, \u0431\u0435\u0437 \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0438\u043c\n\u043a\u0443\u0447\u0443 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\n\u043f\u0441\u0435\u0432\u0434\u043e\u043a\u043e\u0434:\n\n\u0441\u0442\u0440\u043e\u043a\u0430 = \"\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c\"\n\u0434\u043e\u043f.\u0441\u0442\u0440\u043e\u043a\u0430 - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n\u0434\u043e\u043f.\u0441\u0442\u0440\u043e\u043a\u0430 - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\n\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0430\u0441\u0441\u0435\u0440\u0442\u044b\n\n\u0432 \u041a\u0410\u0416\u0414\u041e\u041c \u0442\u0435\u0441\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a.\n\u0438 \u0437\u0430\u0447\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u0437\u0434\u0443\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0442\u0435\u0441\u0442\u043e\u0432? \u0435\u0441\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u0445\u043e\u0442\u044f \u0431\u044b \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0445 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c?\n\u0443 \u043c\u0435\u043d\u044f \u0435\u0441\u0442\u044c \u043e\u043f\u044b\u0442 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u0435\u043b\u043a\u0438\u0445 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439,\n\u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u043d\u0435 \u0440\u0430\u0437\u0434\u0443\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0442\u0435\u0441\u0442\u043e\u0432,\n\u0430 \u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0445, \u0432\u044b\u0434\u0435\u043b\u044f\u044f \u043e\u0431\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u044b-\u0445\u0435\u043b\u043f\u0435\u0440\u044b, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u044f \u0447\u0438\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432", "author": "artbear", "createdAt": "2020-04-12T11:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MzQ5Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407183496", "bodyText": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u044c \u0412\u042b\u0414\u0415\u041b\u042f\u0422\u042c \u0441\u043b\u043e\u0432\u0430, \u0447\u0438\u0442\u0430\u0442\u044c \u0443\u043c\u0435\u0435\u043c. \u0410 \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0439 \u0440\u0430\u0437\u0434\u0443\u0432\u0430\u043d\u0438\u044f \u0438 \u0445\u0435\u043b\u043f\u0435\u0440\u043e\u0432, \u043d\u0435 \u043d\u0430\u0434\u043e \u043f\u043b\u043e\u0434\u0438\u0442\u044c \u0445\u0435\u043b\u043f\u0435\u0440\u044b \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. \u0425\u043e\u0440\u043e\u0448\u0435\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e 3\u0445 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439. \u041a\u043e\u0433\u0434\u0430 \u0442\u0440\u0438 \u0442\u0435\u0441\u0442\u0430 \u0431\u0443\u0434\u0435\u0442, \u0442\u043e\u0433\u0434\u0430 \u0438 \u043d\u0443\u0436\u043d\u044b \u0442\u0432\u043e\u0438 \u0445\u0435\u043b\u043f\u0435\u0440\u044b. \u0418 \u043a\u0430\u043a  \u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u0432 \u0442\u0435\u043b\u0435\u0433\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u041f\u0420 \u0441 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435\u043c.", "author": "asosnoviy", "createdAt": "2020-04-12T11:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTA1Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407191056", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043c\u0435\u043b\u043a\u0438\u043c\u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442-\u043a\u0435\u0439\u0441\u0430\u043c\u0438.\n13 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u043e \u0440\u0430\u043d\u043d\u0438\u0445 4\n\u0438 \u0432\u043e\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043d\u0438\u0445 \u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u0438 \u0434\u0443\u0431\u043b\u0438?", "author": "artbear", "createdAt": "2020-04-12T12:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTEzOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407191139", "bodyText": "\u0437\u0430\u043e\u0434\u043d\u043e \u043c\u0435\u043b\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u043f\u043e\u043c\u043e\u0433\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0432\u043d\u0435\u0441\u0435\u043d\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u044f \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043b, \u0438\u043c\u0435\u044f \u043b\u0438\u0448\u044c \u043e\u0431\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u043a\u0435\u0439\u0441\u043e\u0432 )", "author": "artbear", "createdAt": "2020-04-12T12:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTQ3Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407191473", "bodyText": "\u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u043d\u0443\u0436\u0435\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u041f\u0420 ?", "author": "artbear", "createdAt": "2020-04-12T12:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjA3Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407246077", "bodyText": "\u041d\u0443 \u0442\u044b \u0438 \u0443\u043f\u0435\u0440\u0442\u044b\u0439. \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0438 \u043c\u0435\u0442\u043e\u0434 \u0438\u0437 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u0432 \u0441\u0432\u043e\u0439 \u0442\u0435\u0441\u0442. \u041f\u043e \u043c\u043d\u0435, \u0442\u0430\u043a \u0440\u0430\u0437\u043d\u0438\u0446\u044b 0, \u0447\u0442\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u0430\u0445, \u0447\u0442\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u043c. \u0422\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b \u044f \u0435\u0449\u0435 \u043c\u043e\u0433\u0443 \u0412\u0421\u0426 \u043e\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044c.", "author": "asosnoviy", "createdAt": "2020-04-12T20:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5NTExMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407395112", "bodyText": "\u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441.\n\u043c\u0435\u043b\u043a\u0438\u0435 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u0443\u0434\u043e\u0431\u043d\u044b \u043f\u0440\u0438 \u0422\u0414\u0414 \u0438 \u043f\u0440\u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430\u0445.\n\u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e, \u043a\u0430\u043a\u043e\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043f\u0430\u0434\u0430\u0435\u0442.\n\u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0438 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430.", "author": "artbear", "createdAt": "2020-04-13T09:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "83b05dd62577e92a9f076c140eaedfd24e06388c", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java\nindex 0429728c2f..1c7e7579ed 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java\n\n@@ -62,11 +62,6 @@ abstract class AbstractDiagnosticTest<T extends BSLDiagnostic> {\n     return getDiagnostics(documentContext);\n   }\n \n-  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {\n-    DocumentContext documentContext = TestUtils.getDocumentContext(textDocumentContent);\n-    return getDiagnostics(documentContext);\n-  }\n-\n   protected List<CodeAction> getQuickFixes(Diagnostic diagnostic) {\n     DocumentContext documentContext = getDocumentContext();\n     return getQuickFixes(documentContext, Collections.singletonList(diagnostic), diagnostic.getRange());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODkyNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407128925", "bodyText": "\u0411\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439", "author": "asosnoviy", "createdAt": "2020-04-12T00:55:40Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java", "diffHunk": "@@ -98,6 +98,8 @@ public String getContent() {\n   }\n \n   public String[] getContentList() {\n+    // \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+    // \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c ConsecutiveEmptyLinesDiagnostic - \u043c\u0435\u0442\u043e\u0434 getQuickFixes", "originalCommit": "b0bdb686770302deafdb1172c7831bbfa38dc8fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MzQ1NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407193455", "bodyText": "\u0443\u0434\u0430\u043b\u0438\u043b, \u0442\u043a.. \u0437\u0430\u0432\u0435\u043b \u0438\u0448\u0443\u0437", "author": "artbear", "createdAt": "2020-04-12T12:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java\nindex 58b347dda..10b5b4a52 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java\n\n@@ -98,8 +98,6 @@ public class DocumentContext {\n   }\n \n   public String[] getContentList() {\n-    // \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n-    // \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c ConsecutiveEmptyLinesDiagnostic - \u043c\u0435\u0442\u043e\u0434 getQuickFixes\n     return contentList.getOrCompute();\n   }\n \n"}}, {"oid": "bdf3d9f94f20100dec1f3e5d0f7b01729fe43e0b", "url": "https://github.com/1c-syntax/bsl-language-server/commit/bdf3d9f94f20100dec1f3e5d0f7b01729fe43e0b", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0432\u043d\u0435\u0441\u0435\u043d\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443 + \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043c\u0435\u043b\u043a\u0438\u0445 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n\n\u0442\u0430\u043a\u0436\u0435 \u0443\u0442\u043e\u0447\u043d\u0438\u043b \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f", "committedDate": "2020-04-12T12:23:50Z", "type": "commit"}, {"oid": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf", "url": "https://github.com/1c-syntax/bsl-language-server/commit/4435d4bd3bafed4f90a3b4f0459958f76522b7bf", "message": "\u0443\u0431\u0440\u0430\u043b \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439, \u0442.\u043a. \u0437\u0430\u0432\u0435\u043b \u0441\u043f\u0435\u0446.\u0438\u0448\u0443\u0437 \u043d\u0430 \u044d\u0442\u0443 \u0442\u0435\u043c\u0443", "committedDate": "2020-04-12T12:46:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjM5OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407246399", "bodyText": "\u0412\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u0437\u0430\u0447\u0435\u043c \u0442\u0443\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0430. \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043d\u0435\u0435.", "author": "asosnoviy", "createdAt": "2020-04-12T20:09:13Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    super.configure(configuration);\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + (allowedEmptyLinesCount + 1)));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0], documentContext);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine, DocumentContext documentContext) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    final var lastIndex = tokens.size() - 1;\n+    if (isOnlyWhiteSpacesLines(tokens.get(lastIndex))) {\n+      var eofToken = documentContext.getTokens().get(documentContext.getTokens().size() - 1).getTokenSource().nextToken();\n+      addIssue(prevLine, eofToken.getLine());\n+    }\n+  }\n+\n+  private boolean isOnlyWhiteSpacesLines(Token token) {\n+    return isWhiteSpace(token)\n+      && emptyLinesRegex.matcher(token.getText()).matches();", "originalCommit": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5NDcxNA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407394714", "bodyText": "\u0434\u0430, \u043d\u0435 \u043d\u0443\u0436\u043d\u0430. \u0443\u0431\u0440\u0430\u043b", "author": "artbear", "createdAt": "2020-04-13T09:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "83b05dd62577e92a9f076c140eaedfd24e06388c", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 75705164d8..0281549a3c 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -41,7 +41,6 @@ import org.eclipse.lsp4j.TextEdit;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.regex.Pattern;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n"}}, {"oid": "621b5839137483fa332369c40c096b306f0c162b", "url": "https://github.com/1c-syntax/bsl-language-server/commit/621b5839137483fa332369c40c096b306f0c162b", "message": "Merge branch 'develop' into ConsecutiveEmptyLines-958", "committedDate": "2020-04-13T08:59:03Z", "type": "commit"}, {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c", "url": "https://github.com/1c-syntax/bsl-language-server/commit/83b05dd62577e92a9f076c140eaedfd24e06388c", "message": "\u0418\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0445 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\n\n\u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0445\u0435\u043b\u043f\u0435\u0440 \u0432 \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430", "committedDate": "2020-04-13T09:18:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407410868", "bodyText": "\u0414\u0430\u0432\u0430\u0439 \u0432\u043e\u0442 \u044d\u0442\u043e \u0432\u0441\u0435 \u0442\u043e\u0436\u0435, \u043f\u043e\u043a\u0430 \u0432 \u0442\u0435\u0441\u0442, \u0447\u0442\u043e\u0431\u044b \u0432 \u041f\u0420 \u0431\u044b\u043b\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430.", "author": "asosnoviy", "createdAt": "2020-04-13T10:06:07Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "originalCommit": "83b05dd62577e92a9f076c140eaedfd24e06388c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMzIyNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407423227", "bodyText": "\u044d\u0442\u043e \u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0438 \u0432\u0441\u0435. \u0437\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c??", "author": "artbear", "createdAt": "2020-04-13T10:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMzQ5Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407423493", "bodyText": "\u044f \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u0434\u0443\u0431\u043b\u0435\u0439 \u043a\u043e\u0434\u0430 \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u043b \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438", "author": "artbear", "createdAt": "2020-04-13T10:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMjU3Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407702572", "bodyText": "\u0447\u0442\u043e\u0431\u044b \u0432 \u041f\u0420 \u0431\u044b\u043b\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430.", "author": "asosnoviy", "createdAt": "2020-04-13T20:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MjY2MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407962660", "bodyText": "\u0432\u043e\u0442 \u0441\u0435\u0439\u0447\u0430\u0441 \u044f \u0432\u044b\u044f\u0441\u043d\u0438\u043b, \u0447\u0442\u043e\n1 \u043c\u0435\u0442\u043e\u0434\u044b AbstractDiagnosticTest::getQuickFixes \u043d\u0435 \u0443\u043c\u0435\u044e\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c documentContext, \u0430 \u0443\u043c\u0435\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0435\u0433\u043e \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u0434\u0430\u043b\u0435\u0435 \u0438\u043c\u0435\u043d\u0438 \u0442\u0435\u0441\u0442-\u0444\u0430\u0439\u043b\u0430 \u0438 \u0442.\u043f.\n\n\u043a\u043e\u0434 \u043d\u0438\u0436\u0435\n\n2 \u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 AbstractDiagnosticTest::getQuickFixes, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c (\n\nprivate List<CodeAction> getQuickFixes(DocumentContext documentContext, List<Diagnostic> diagnostics, Range range)\n\n\u0430 \u043c\u043d\u0435 \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430 \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a\u0438.\n\u0412\u043e\u043f\u0440\u043e\u0441 - \u043c\u043d\u0435 \u0442\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0432\u043e\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u043b\u0438 \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 AbstractDiagnosticTest?\n\n\u0435\u0441\u043b\u0438 \u044f \u0431\u0443\u0434\u0443 \u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0441\u0432\u043e\u0435\u043c, \u0442\u043e\u0433\u0434\u0430 \u0442\u0443\u043f\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c (\n\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 - \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0442\u0435\u043a\u0442\u0435\u0434 \u043c\u0435\u0442\u043e\u0434\n\n  protected List<CodeAction> getQuickFixes(Diagnostic diagnostic, DocumentContext documentContext) {\n    return getQuickFixes(documentContext, Collections.singletonList(diagnostic), diagnostic.getRange());\n  }\n\n\n\u0438 \u043c\u0435\u043b\u043a\u0438\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430\nprotected List getQuickFixes(Diagnostic diagnostic) {\nreturn getQuickFixes(diagnostic, documentContext);\n}\n\n\u043a\u043e\u0434 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u0435\u0439\u0447\u0430\u0441\n  protected List<CodeAction> getQuickFixes(Diagnostic diagnostic) {\n    DocumentContext documentContext = getDocumentContext();\n    return getQuickFixes(documentContext, Collections.singletonList(diagnostic), diagnostic.getRange());\n  }\n\n  protected List<CodeAction> getQuickFixes(Diagnostic diagnostic, Range range) {\n    DocumentContext documentContext = getDocumentContext();\n    return getQuickFixes(documentContext, Collections.singletonList(diagnostic), range);\n  }\n\n  protected List<CodeAction> getQuickFixes(Range range) {\n    DocumentContext documentContext = getDocumentContext();\n    List<Diagnostic> diagnostics = this.diagnosticInstance.getDiagnostics(documentContext);\n\n    return getQuickFixes(documentContext, diagnostics, range);\n  }\n\n  private List<CodeAction> getQuickFixes(DocumentContext documentContext, List<Diagnostic> diagnostics, Range range) {", "author": "artbear", "createdAt": "2020-04-14T08:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NjU0NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407966545", "bodyText": "\u0430 \u043c\u0435\u043b\u043a\u0438\u0439 \u0442\u0435\u0441\u0442 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0442\u043b\u0430\u0434\u043a\u0438\\\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0438 contentList", "author": "artbear", "createdAt": "2020-04-14T08:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTMzMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408001333", "bodyText": "@asosnoviy ? #1030 (comment)", "author": "artbear", "createdAt": "2020-04-14T09:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMjAyNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408012025", "bodyText": "\u0410\u0440\u0442\u0443\u0440, \u043c\u043d\u0435 \u0442\u044f\u0436\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u0431\u0435\u0433\u043b\u043e \u0447\u0438\u0442\u0430\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0441\u043a\u0438\u043b\u0430 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043d\u0435 \u043d\u0430\u0434\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0442\u0432\u043e\u0439 \u043f\u0443\u0442\u044c. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0430\u0432\u0430\u0442\u044c \u041f\u0420 \u0440\u0430\u0441\u043f\u043e\u043b\u0437\u0430\u0442\u044c\u0441\u044f, \u0438 \u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0435 \u043f\u0440\u043e\u0442\u0435\u043a\u0430\u043b\u0430.", "author": "asosnoviy", "createdAt": "2020-04-14T09:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMzM1Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408103356", "bodyText": "\u044f \u0432\u043d\u0435\u0441 \u043f\u0440\u0430\u0432\u043a\u0438, \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0442\u0435\u043a\u0442\u0435\u0434-\u043c\u0435\u0442\u043e\u0434 \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 AbstractDiagnosticTest \u0438 \u043e\u0442\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0442\u044c 2\u0439 \u0434\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f", "author": "artbear", "createdAt": "2020-04-14T12:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407744503", "bodyText": "\u0410 \u043e\u0442\u043a\u0443\u0434\u0430 \u0442\u0443\u0442 \u043b\u0438\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430?", "author": "asosnoviy", "createdAt": "2020-04-13T21:56:06Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "originalCommit": "83b05dd62577e92a9f076c140eaedfd24e06388c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTgxOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407935819", "bodyText": "\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a \u0434\u0432\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430.\n\u0437\u043d\u0430\u0447\u0438\u0442, \u043d\u0443\u0436\u043d\u043e \u0438\u0445 \u0442\u0430\u043a\u0436\u0435 \u0443\u0431\u0440\u0430\u0442\u044c.", "author": "artbear", "createdAt": "2020-04-14T07:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0Nzk1Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407947957", "bodyText": "\u0410 \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a? \u041f\u043e\u0447\u0435\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0438\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u0442?", "author": "asosnoviy", "createdAt": "2020-04-14T08:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0OTcyOA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407949728", "bodyText": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438 \u043f\u0430\u0440\u0441\u0435\u0440 https://github.com/1c-syntax/bsl-language-server/pull/1035/files#diff-392475fdf2bc320d17762ed97109a121R80\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438 \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c. \u0422\u0430\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u0438\u0435\u0437\u0436\u0430\u0442\u044c EOF \u0432 \u0445\u0438\u0434\u0434\u0435\u043d \u0447\u0435\u043d\u0435\u043b\u0435.", "author": "asosnoviy", "createdAt": "2020-04-14T08:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NjI2NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407956264", "bodyText": "\u0418 \u0440\u0435\u0431\u0435\u0439\u0437 \u043e\u0442 \u043c\u0430\u0441\u0442\u0435\u0440\u0430, \u0447\u0442\u043e \u0431\u044b \u0444\u0438\u043a\u0441 \u043f\u043e \u041b\u0430\u0439\u043d\u041a\u043e\u043d\u0442\u0435\u043d\u0442 \u0431\u044b\u043b", "author": "asosnoviy", "createdAt": "2020-04-14T08:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NTk0NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407965944", "bodyText": "\u0412\u043e\u0442 \u0442\u0443\u0442 \u043e\u043d\u043e \u0436\u0435? https://github.com/1c-syntax/bsl-language-server/pull/1030/files#diff-dcd33f17f4f2202a869987da8a2f2ca2R215\n\u041c\u044b \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0435\u0440\u0435\u0437 \u0413\u0425 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435\u0442, \u0430 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0435 \u0435\u0441\u0442\u044c?", "author": "asosnoviy", "createdAt": "2020-04-14T08:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Njk1OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407976959", "bodyText": "\u0418 \u0440\u0435\u0431\u0435\u0439\u0437 \u043e\u0442 \u043c\u0430\u0441\u0442\u0435\u0440\u0430, \u0447\u0442\u043e \u0431\u044b \u0444\u0438\u043a\u0441 \u043f\u043e \u041b\u0430\u0439\u043d\u041a\u043e\u043d\u0442\u0435\u043d\u0442 \u0431\u044b\u043b\n\n\u043d\u0435 \u043f\u043e\u043d\u044f\u043b. \u043f\u043e\u044f\u0441\u043d\u0438.\n\u044f \u0432\u0435\u0442\u043a\u0443 \u0434\u0435\u0432\u0435\u043b\u043e\u043f \u043a \u0441\u0435\u0431\u0435 \u0432 \u0432\u0435\u0442\u043a\u0443 \u0441\u043c\u0435\u0440\u0436\u0438\u043b. \u043d\u0430 \u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 ContentList", "author": "artbear", "createdAt": "2020-04-14T08:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3ODMwMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407978303", "bodyText": "\u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0443\u0441\u0442\u0430\u044f, \u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 EOF\n\u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0432\u0438\u0434\u043d\u043e \u0434\u0432\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0432\u0435\u0440\u043d\u043e?\n\u043e\u0442 \u043d\u0438\u0445 \u0438 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f.", "author": "artbear", "createdAt": "2020-04-14T09:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MDA4Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407980086", "bodyText": "\u0413\u0425 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442,  \u0447\u0442\u043e 34 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f.\n\u0410 \u0432 \u0442\u0435\u0441\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0435", "author": "asosnoviy", "createdAt": "2020-04-14T09:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NDI0MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407984240", "bodyText": "\u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432, \u043d\u0435 \u043e\u0431\u0440\u0430\u0449\u0430\u0439 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043d\u0430 \u043d\u0438\u0445.", "author": "asosnoviy", "createdAt": "2020-04-14T09:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTU2Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408001563", "bodyText": "\u0422\u043e\u043b\u044c\u043a\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043a\u0432\u0438\u043a\u0444\u0438\u043a\u0441\u0430 \u041e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 (\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0439\u0447\u0430\u0441 35), \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0441\u0442\u0430\u0442\u044c\u0441\u044f.", "author": "asosnoviy", "createdAt": "2020-04-14T09:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDY2OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408254669", "bodyText": "\u0432\u0440\u043e\u0434\u0435 \u0432\u0441\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e. \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\n\u0435\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0438\u043d\u0438-\u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b.\n\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438.", "author": "artbear", "createdAt": "2020-04-14T16:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "23c984626a287143b1d201fdd40490dabf72416f", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\nindex b8a4efa283..1b8f876839 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java\n\n@@ -142,6 +142,40 @@ class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<Consecu\n     ;\n   }\n \n+  @Test\n+  void test_EmptyModule() {\n+    String module = \"\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasSize(0)\n+    ;\n+  }\n+\n+  @Test\n+  void test_OneLine() {\n+    String module = \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLinePlusOneFilledLine() {\n+    String module = \"\\n//\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasSize(0)\n+    ;\n+  }\n+\n   @Test\n   void test_ConfigureEmptyLineParam() {\n     setTwoForAllowedEmptyLinesCount();\n"}}, {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689", "url": "https://github.com/1c-syntax/bsl-language-server/commit/ff1e6813534ca756ac73b74639fa63b35f0f7689", "message": "\u0443\u0434\u0430\u043b\u0438\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434.", "committedDate": "2020-04-14T08:14:49Z", "type": "commit"}, {"oid": "981950ecdd092f66cd5ff47585cdfb2e48bef42b", "url": "https://github.com/1c-syntax/bsl-language-server/commit/981950ecdd092f66cd5ff47585cdfb2e48bef42b", "message": "Merge branch 'develop' into ConsecutiveEmptyLines-958", "committedDate": "2020-04-14T08:15:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4Mjc3MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407982771", "bodyText": "\u0412\u043e\u0442 \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043a\u0430\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0443\u043b\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f EOF", "author": "asosnoviy", "createdAt": "2020-04-14T09:08:47Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);", "originalCommit": "ff1e6813534ca756ac73b74639fa63b35f0f7689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMDQyMQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408000421", "bodyText": "\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c )\n\u043e\u0442\u043b\u0438\u0447\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0415\u041e\u0424.\n\u043d\u043e \u044f \u0435\u0433\u043e \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u043a\u0430\u043a \u0441\u0435\u0439\u0447\u0430\u0441 \u0432 \u043a\u043e\u0434\u0435.\n\u043f\u0440\u043e\u0441\u0442\u043e \u043a\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044e \u043d\u0430\nprivate static Token getEofToken(List tokens) {\nfinal var lastIndex = tokens.size() - 1;\n//    return tokens.get(lastIndex).getTokenSource().nextToken();\nreturn tokens.get(lastIndex);\n}\n\n\n1 \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0446\u0438\u043a\u043b\u0430 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d\n\n\n2 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u043f\u0435\u0446.\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430.\n\u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u043e\u0441\u044c, \u043a\u0430\u043a \u0443 \u0442\u0435\u0431\u044f \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435\n\n\n\u043a\u0441\u0442\u0430\u0442\u0438, \u043d\u0430 \u044d\u0442\u043e\u043c \u0436\u0435 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0438\u0434\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0435 \u0442\u0430\u043a, \u043a\u0430\u043a \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435\n\n\n\n3 \u043d\u0443 \u0438 \u043a\u0432\u0438\u043a\u0441-\u0444\u0438\u043a\u0441\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0415\u041e\u0424 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c.", "author": "artbear", "createdAt": "2020-04-14T09:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4Mjc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "23c984626a287143b1d201fdd40490dabf72416f", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 676ce0864b..4e5adf3250 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -38,9 +38,8 @@ import org.eclipse.lsp4j.Diagnostic;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.TextEdit;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MzE0NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407983145", "bodyText": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430?", "author": "asosnoviy", "createdAt": "2020-04-14T09:09:23Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;\n+  }\n+\n+  private void addIssue(int startEmptyLine, int lastEmptyLine) {\n+    Range range = Ranges.create(startEmptyLine, 0, lastEmptyLine - 1, 0);\n+    diagnosticStorage.addDiagnostic(range);\n+  }\n+\n+  @Override\n+  public List<CodeAction> getQuickFixes(\n+      List<Diagnostic> diagnostics, CodeActionParams params, DocumentContext documentContext) {\n+\n+    List<TextEdit> textEdits = new ArrayList<>();\n+\n+    diagnostics.forEach((Diagnostic diagnostic) -> {\n+      Range range = diagnostic.getRange();\n+\n+      Range newRange = Ranges.create(range.getStart().getLine(), 0, range.getEnd().getLine() + 1, 0);\n+      // \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+      // \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443\n+      try {\n+        documentContext.getText(newRange);", "originalCommit": "ff1e6813534ca756ac73b74639fa63b35f0f7689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTAxMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408001012", "bodyText": "\u043d\u0443\u0436\u043d\u0430 ( \u043d\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u0431\u0435\u0437 try, \u043a\u043e\u043d\u0435\u0447\u043d\u043e. \u043e\u0442\u043f\u0438\u0441\u0430\u043b\u0441\u044f \u0447\u0443\u0442\u044c \u0432\u044b\u0448\u0435\n\n\u0438 \u043a\u0432\u0438\u043a\u0441-\u0444\u0438\u043a\u0441\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0415\u041e\u0424 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c.", "author": "artbear", "createdAt": "2020-04-14T09:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MzE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "23c984626a287143b1d201fdd40490dabf72416f", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 676ce0864b..4e5adf3250 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -38,9 +38,8 @@ import org.eclipse.lsp4j.Diagnostic;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.TextEdit;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408099562", "bodyText": "\u0410 \u0440\u0430\u0437\u0432\u0435 WHITE_SPACE \u0431\u044b\u0432\u0430\u044e\u0442 \u043d\u0435 \u0432 HIDDEN_CHANNEL ?", "author": "asosnoviy", "createdAt": "2020-04-14T12:34:24Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "originalCommit": "ff1e6813534ca756ac73b74639fa63b35f0f7689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MTI3OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408191279", "bodyText": "\u041f\u043e\u0441\u043b\u0435 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u043c. \u0418\u043d\u043b\u0430\u0439\u043d \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 \u043f\u0440\u043e\u0449\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f", "author": "asosnoviy", "createdAt": "2020-04-14T14:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDA3Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408254076", "bodyText": "\u0410 \u0440\u0430\u0437\u0432\u0435 WHITE_SPACE \u0431\u044b\u0432\u0430\u044e\u0442 \u043d\u0435 \u0432 HIDDEN_CHANNEL ?\n\n\u0443 \u0442\u0435\u0431\u044f \u0436\u0435 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u044d\u0442\u043e\u0442 \u043a\u0430\u043d\u0430\u043b.\n\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u0431\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 WHITE_SPACE - \u0442\u0435\u0441\u0442\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u044b, \u043f\u0430\u0434\u0430\u044e\u0442.\n\n\u041f\u043e\u0441\u043b\u0435 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u043c. \u0418\u043d\u043b\u0430\u0439\u043d \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 \u043f\u0440\u043e\u0449\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f\n\n\u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 ).\n\u043c\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u0447\u0435\u0442\u043a\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u0447\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n\u0431\u0435\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u043e\u0442 \u0442\u0430\u043a\u043e\u0435\n'.filter(token -> token.getChannel() != Token.HIDDEN_CHANNEL || token.getType() != BSLLexer.WHITE_SPACE)'\n\u043c\u043e\u0435 \u0438\u043c\u0445\u043e - \u0441\u0442\u0430\u043b\u043e \u043c\u043d\u0435\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e.\n\u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430 \u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0448\u044c, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430, \u0443\u0431\u0435\u0440\u0443.", "author": "artbear", "createdAt": "2020-04-14T16:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTk2Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408255963", "bodyText": "\u0410 \u0431\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 HIDDEN_CHANNEL?", "author": "asosnoviy", "createdAt": "2020-04-14T16:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5MTg2MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408391860", "bodyText": ".filter(token -> token.getType() != BSLLexer.WHITE_SPACE)\n\u0430\u0433\u0430, \u0442\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.  \u0437\u0430\u0438\u043d\u043b\u0430\u0439\u043d\u0438\u043b.", "author": "artbear", "createdAt": "2020-04-14T19:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMjQ1MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408402450", "bodyText": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e, \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0448\u044c?", "author": "artbear", "createdAt": "2020-04-14T20:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "23c984626a287143b1d201fdd40490dabf72416f", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 676ce0864b..4e5adf3250 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -38,9 +38,8 @@ import org.eclipse.lsp4j.Diagnostic;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.TextEdit;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n"}}, {"oid": "6d349138721a968454888606a60128eff9185122", "url": "https://github.com/1c-syntax/bsl-language-server/commit/6d349138721a968454888606a60128eff9185122", "message": "\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f EOF \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432", "committedDate": "2020-04-14T12:35:29Z", "type": "commit"}, {"oid": "23c984626a287143b1d201fdd40490dabf72416f", "url": "https://github.com/1c-syntax/bsl-language-server/commit/23c984626a287143b1d201fdd40490dabf72416f", "message": "\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u043e\u0434\u0443\u043b\u044f\n\n\u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u043e\u0432 \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a", "committedDate": "2020-04-14T12:38:28Z", "type": "commit"}, {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae", "url": "https://github.com/1c-syntax/bsl-language-server/commit/890c65954bfc9c50dd76adfa5eba85ea30c971ae", "message": "\u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u043e\u0432 \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a", "committedDate": "2020-04-14T12:38:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408123595", "bodyText": "\u042d\u0442\u043e \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0435 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u043e. \u0418 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e \u043a\u0430\u043a\u0438\u0435 \u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b. \u041d\u043e \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0447\u0442\u043e \u0438 \u0432 85\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u043d\u043e \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c  \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c prevLineStorage[0]. \u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e \u0446\u0438\u043a\u043b\u0430.\n\u041f\u0441. \u041d\u0430\u0433\u043d\u0430\u043b.  \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u0440\u0443\u0433\u043e\u0439", "author": "asosnoviy", "createdAt": "2020-04-14T13:11:10Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {", "originalCommit": "890c65954bfc9c50dd76adfa5eba85ea30c971ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTExNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408255115", "bodyText": "\u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435?", "author": "artbear", "createdAt": "2020-04-14T16:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODI3OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408258278", "bodyText": "\u0418\u043c\u0445\u043e \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0434\u043e\u0441\u0442\u043e\u0439\u043d\u044b \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f", "author": "asosnoviy", "createdAt": "2020-04-14T16:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NTIyNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408265225", "bodyText": "\u0438\u043b\u0438 85\u044e \u0441\u044e\u0434\u0430 \u043a\u0430\u043a \u0442\u043e \u0437\u0430\u043f\u0438\u0445\u0430\u0442\u044c. \u0410 \u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435, \u043d\u043e \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0430.", "author": "asosnoviy", "createdAt": "2020-04-14T16:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMjYyNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408402625", "bodyText": "\u0434\u0430, \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\u0441\u043c\u043e\u0442\u0440\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.", "author": "artbear", "createdAt": "2020-04-14T20:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c42fb1986fdc6c11b08da45e687a9cdd662e3cc", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 4e5adf3250..981d7e7528 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -71,45 +71,29 @@ public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implemen\n       return;\n     }\n \n-    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n     final int[] prevLineStorage = {0};\n-    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n     tokens.subList(0, tokens.size() - 1)\n       .stream()\n-      .filter(token -> !isWhiteSpace(token))\n+      .filter(token -> token.getType() != BSLLexer.WHITE_SPACE)\n       .map(Token::getLine)\n       .distinct()\n       .forEachOrdered(currLine -> {\n-\n-        var prevLine = prevLineStorage[0];\n-        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n-            addIssue(prevLine, currLine - 1);\n-        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n-          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n-          addIssue(0, currLine - 1);\n-        }\n+        checkEmptyLines(currLine - 1, prevLineStorage[0]);\n         prevLineStorage[0] = currLine;\n       });\n \n-    var eofLine = getEofToken(tokens).getLine();\n-    checkLastToken(eofLine, prevLineStorage[0]);\n+    checkEmptyLines(getEofTokenLine(tokens), prevLineStorage[0]);\n   }\n \n-  private void checkLastToken(int eofLine, int prevLine) {\n-    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n-    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+  private void checkEmptyLines(int eofLine, int prevLine) {\n     if (eofLine - prevLine > allowedEmptyLinesCount){\n       addIssue(prevLine, eofLine);\n     }\n   }\n \n-  private static Token getEofToken(List<Token> tokens) {\n-    final var lastIndex = tokens.size() - 1;\n-    return tokens.get(lastIndex);\n-  }\n-\n-  private static boolean isWhiteSpace(Token token) {\n-    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;\n+  private static int getEofTokenLine(List<Token> tokens) {\n+    return tokens.get(tokens.size() - 1).getLine();\n   }\n \n   private void addIssue(int startEmptyLine, int lastEmptyLine) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4ODc1Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408188757", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u0430 \u0432\u0435\u0442\u043a\u0430 \u043b\u0438\u0448\u043d\u044f\u044f", "author": "asosnoviy", "createdAt": "2020-04-14T14:38:39Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {", "originalCommit": "890c65954bfc9c50dd76adfa5eba85ea30c971ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTMxOA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408255318", "bodyText": "\u0430\u0433\u0430, \u043b\u0438\u0448\u043d\u044f\u044f, \u0443\u0431\u0438\u0440\u0430\u044e.", "author": "artbear", "createdAt": "2020-04-14T16:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4ODc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1c42fb1986fdc6c11b08da45e687a9cdd662e3cc", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 4e5adf3250..981d7e7528 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -71,45 +71,29 @@ public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implemen\n       return;\n     }\n \n-    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n     final int[] prevLineStorage = {0};\n-    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n     tokens.subList(0, tokens.size() - 1)\n       .stream()\n-      .filter(token -> !isWhiteSpace(token))\n+      .filter(token -> token.getType() != BSLLexer.WHITE_SPACE)\n       .map(Token::getLine)\n       .distinct()\n       .forEachOrdered(currLine -> {\n-\n-        var prevLine = prevLineStorage[0];\n-        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n-            addIssue(prevLine, currLine - 1);\n-        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n-          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n-          addIssue(0, currLine - 1);\n-        }\n+        checkEmptyLines(currLine - 1, prevLineStorage[0]);\n         prevLineStorage[0] = currLine;\n       });\n \n-    var eofLine = getEofToken(tokens).getLine();\n-    checkLastToken(eofLine, prevLineStorage[0]);\n+    checkEmptyLines(getEofTokenLine(tokens), prevLineStorage[0]);\n   }\n \n-  private void checkLastToken(int eofLine, int prevLine) {\n-    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n-    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+  private void checkEmptyLines(int eofLine, int prevLine) {\n     if (eofLine - prevLine > allowedEmptyLinesCount){\n       addIssue(prevLine, eofLine);\n     }\n   }\n \n-  private static Token getEofToken(List<Token> tokens) {\n-    final var lastIndex = tokens.size() - 1;\n-    return tokens.get(lastIndex);\n-  }\n-\n-  private static boolean isWhiteSpace(Token token) {\n-    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;\n+  private static int getEofTokenLine(List<Token> tokens) {\n+    return tokens.get(tokens.size() - 1).getLine();\n   }\n \n   private void addIssue(int startEmptyLine, int lastEmptyLine) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDc1OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408190759", "bodyText": "\u0422\u043e\u0436\u0435 \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0435 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0417\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u043a\u0438\u0440\u043a\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432", "author": "asosnoviy", "createdAt": "2020-04-14T14:41:08Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {", "originalCommit": "890c65954bfc9c50dd76adfa5eba85ea30c971ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0ODYyNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408248625", "bodyText": "\u043c\u0435\u0442\u043e\u0434 getEofToken \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 2\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 - \u0432 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0435 \u0438 \u0432 \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u0435.\n\u0441\u0447\u0438\u0442\u0430\u044e, \u0447\u0442\u043e \u043e\u043d \u043f\u043e\u043b\u0435\u0437\u0435\u043d.", "author": "artbear", "createdAt": "2020-04-14T15:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMjg4Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408402882", "bodyText": "\u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u043b \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434, \u0442\u0435\u043f\u0435\u0440\u044c \u044d\u0442\u043e\nprivate static int getEofTokenLine(List tokens) {\nreturn tokens.get(tokens.size() - 1).getLine();\n}", "author": "artbear", "createdAt": "2020-04-14T20:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c42fb1986fdc6c11b08da45e687a9cdd662e3cc", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 4e5adf3250..981d7e7528 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -71,45 +71,29 @@ public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implemen\n       return;\n     }\n \n-    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n     final int[] prevLineStorage = {0};\n-    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n     tokens.subList(0, tokens.size() - 1)\n       .stream()\n-      .filter(token -> !isWhiteSpace(token))\n+      .filter(token -> token.getType() != BSLLexer.WHITE_SPACE)\n       .map(Token::getLine)\n       .distinct()\n       .forEachOrdered(currLine -> {\n-\n-        var prevLine = prevLineStorage[0];\n-        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n-            addIssue(prevLine, currLine - 1);\n-        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n-          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n-          addIssue(0, currLine - 1);\n-        }\n+        checkEmptyLines(currLine - 1, prevLineStorage[0]);\n         prevLineStorage[0] = currLine;\n       });\n \n-    var eofLine = getEofToken(tokens).getLine();\n-    checkLastToken(eofLine, prevLineStorage[0]);\n+    checkEmptyLines(getEofTokenLine(tokens), prevLineStorage[0]);\n   }\n \n-  private void checkLastToken(int eofLine, int prevLine) {\n-    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n-    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+  private void checkEmptyLines(int eofLine, int prevLine) {\n     if (eofLine - prevLine > allowedEmptyLinesCount){\n       addIssue(prevLine, eofLine);\n     }\n   }\n \n-  private static Token getEofToken(List<Token> tokens) {\n-    final var lastIndex = tokens.size() - 1;\n-    return tokens.get(lastIndex);\n-  }\n-\n-  private static boolean isWhiteSpace(Token token) {\n-    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;\n+  private static int getEofTokenLine(List<Token> tokens) {\n+    return tokens.get(tokens.size() - 1).getLine();\n   }\n \n   private void addIssue(int startEmptyLine, int lastEmptyLine) {\n"}}, {"oid": "1c42fb1986fdc6c11b08da45e687a9cdd662e3cc", "url": "https://github.com/1c-syntax/bsl-language-server/commit/1c42fb1986fdc6c11b08da45e687a9cdd662e3cc", "message": "\u0443\u043f\u0440\u043e\u0441\u0442\u0438\u043b \u043a\u043e\u0434, \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n- \u0443\u0431\u0440\u0430\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u0443\u044e \u0437\u0430\u0449\u0438\u0442\u0443 \u043e\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442-\u0444\u0430\u0439\u043b\u0435,\n\u0442.\u043a. \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0435\u0441\u0442\u044c \u043c\u0438\u043d\u0438-\u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0438\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b", "committedDate": "2020-04-14T20:05:12Z", "type": "commit"}, {"oid": "c0f6039de4f899c556e04f083ffcbd7d56a286d1", "url": "https://github.com/1c-syntax/bsl-language-server/commit/c0f6039de4f899c556e04f083ffcbd7d56a286d1", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\tbuild.gradle.kts", "committedDate": "2020-04-15T16:45:56Z", "type": "commit"}, {"oid": "dfa6aeb322967856015a5b458c37e58f1e6a8094", "url": "https://github.com/1c-syntax/bsl-language-server/commit/dfa6aeb322967856015a5b458c37e58f1e6a8094", "message": "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f precommit", "committedDate": "2020-04-15T16:56:06Z", "type": "commit"}, {"oid": "c6db1f3e9f74ef711088916607c4b0bddc1ada40", "url": "https://github.com/1c-syntax/bsl-language-server/commit/c6db1f3e9f74ef711088916607c4b0bddc1ada40", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\tdocs/en/diagnostics/index.md", "committedDate": "2020-04-15T17:12:20Z", "type": "commit"}, {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e", "url": "https://github.com/1c-syntax/bsl-language-server/commit/d91edd1f5ce1bc22846f949d93cd5d960e642b2e", "message": "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f precommit", "committedDate": "2020-04-15T17:17:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410675923", "bodyText": "@artbear \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438, \u043f\u043b\u0437, \u0447\u0442\u043e \u043d\u0435 \u0442\u0430\u043a \u0441 EOF?", "author": "nixel2007", "createdAt": "2020-04-18T09:45:30Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "originalCommit": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4NDAyMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410684023", "bodyText": "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d (\u0415\u041e\u0424) \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430.\n\u0442.\u043a. \u043e\u043d \u0442\u043e\u0447\u043d\u043e \u0435\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430, \u043d\u043e \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u0430 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a, \u0447\u0442\u043e \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u0434\u0430 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432.", "author": "artbear", "createdAt": "2020-04-18T11:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4NDE5MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410684190", "bodyText": "\u042f \u0432\u0438\u0436\u0443, \u0447\u0442\u043e \u043e\u043d \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043d\u043e \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u0437\u0430\u0447\u0435\u043c.", "author": "nixel2007", "createdAt": "2020-04-18T11:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTUxNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410869515", "bodyText": "\u044f \u0443\u0436\u0435 \u043f\u0438\u0441\u0430\u043b \u0432\u044b\u0448\u0435 - \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u043e\u0434\u0443\u043b\u044f \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a, \u0447\u0442\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 )\n\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043a\u043e\u043d\u0446\u0435 \u043e\u0434\u043d\u0430 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438 \u0415\u041e\u0424, \u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0438\u0434\u043d\u043e \u0434\u0432\u0435.\n\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043c\u0435\u043d\u044c\u0448\u0435.\n\u0432\u044b\u0448\u0435 \u0431\u044b\u043b \u0441\u043a\u0440\u0438\u043d. \u043f\u043e\u0432\u0442\u043e\u0440\u044e \u0435\u0433\u043e", "author": "artbear", "createdAt": "2020-04-19T10:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTYzMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410869632", "bodyText": "\u0442.\u0435. 35 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 - \u044d\u0442\u043e \u0415\u041e\u0424, \u0442\u0430\u043c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u0442.", "author": "artbear", "createdAt": "2020-04-19T10:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTcwOA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410869708", "bodyText": "\u0435\u0441\u0442\u044c \u043c\u0438\u043d\u0438-\u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u044d\u0442\u043e\u0442 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438, \u0435\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0448\u044c.", "author": "artbear", "createdAt": "2020-04-19T10:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4MTYyNA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r411181624", "bodyText": "@nixel2007 \u0435\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u0438\u043b, \u0437\u0430\u043a\u0440\u043e\u0435\u0448\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435?", "author": "artbear", "createdAt": "2020-04-20T08:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMDQ5OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r411410499", "bodyText": "\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a, \u0447\u0442\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 )\n\n\u0442\u043e\u043b\u044c\u043a\u043e \u0432 VSCode. \u0432 \u0441\u043e\u043d\u0430\u0440\u0435 \u0438 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 EOF \u043d\u0435 \u0440\u0438\u0441\u0443\u0435\u0442\u0441\u044f.", "author": "nixel2007", "createdAt": "2020-04-20T14:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTk4Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r411421983", "bodyText": "\u0442\u043e\u043b\u044c\u043a\u043e \u0432 VSCode. \u0432 \u0441\u043e\u043d\u0430\u0440\u0435 \u0438 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 EOF \u043d\u0435 \u0440\u0438\u0441\u0443\u0435\u0442\u0441\u044f.\n\n\u043d\u0443 \u0434\u0430, \u0442\u0430\u043a \u0438 \u0435\u0441\u0442\u044c. \u0438 \u0447\u0435\u043c \u044d\u0442\u043e \u043f\u043b\u043e\u0445\u043e?\n\u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c.\n\u0434\u0430 \u0438 \u0432 \u0441\u043e\u043d\u0430\u0440\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e.", "author": "artbear", "createdAt": "2020-04-20T14:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "8785509aadd55e3290db1f86f752113f2b53ebcf", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\nindex 981d7e7528..8edb2e76ba 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java\n\n@@ -48,11 +48,11 @@ import java.util.stream.Collectors;\n   tags = {\n     DiagnosticTag.BADPRACTICE\n   }\n-\n )\n public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n \n   private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+\n   @DiagnosticParameter(\n     type = Integer.class,\n     defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n"}}, {"oid": "bfe096a1b47277441edade1dd65e7e12f26c408f", "url": "https://github.com/1c-syntax/bsl-language-server/commit/bfe096a1b47277441edade1dd65e7e12f26c408f", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958", "committedDate": "2020-04-18T11:11:52Z", "type": "commit"}, {"oid": "18e1a978b2f4c8f4ef80d513c7d5ec1638d72605", "url": "https://github.com/1c-syntax/bsl-language-server/commit/18e1a978b2f4c8f4ef80d513c7d5ec1638d72605", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e", "committedDate": "2020-04-19T10:06:26Z", "type": "commit"}, {"oid": "8785509aadd55e3290db1f86f752113f2b53ebcf", "url": "https://github.com/1c-syntax/bsl-language-server/commit/8785509aadd55e3290db1f86f752113f2b53ebcf", "message": "fix qf", "committedDate": "2020-04-21T14:50:49Z", "type": "commit"}]}