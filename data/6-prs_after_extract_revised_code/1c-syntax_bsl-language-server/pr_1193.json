{"pr_number": 1193, "pr_title": "\u041d\u043e\u0432\u044b\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043e\u0434\u0430", "pr_createdAt": "2020-05-14T09:54:32Z", "pr_url": "https://github.com/1c-syntax/bsl-language-server/pull/1193", "timeline": [{"oid": "9837bd2a0856c86c62161db75239fbb15ea1c447", "url": "https://github.com/1c-syntax/bsl-language-server/commit/9837bd2a0856c86c62161db75239fbb15ea1c447", "message": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u043a\u043e\u0434", "committedDate": "2020-05-14T09:49:38Z", "type": "commit"}, {"oid": "ba4b43f3ecbb4438b8d2148ffd4fa64420a12257", "url": "https://github.com/1c-syntax/bsl-language-server/commit/ba4b43f3ecbb4438b8d2148ffd4fa64420a12257", "message": "precommit", "committedDate": "2020-05-14T09:51:53Z", "type": "commit"}, {"oid": "814d78c21efa2eca7afcc02e7243fa442cb7a603", "url": "https://github.com/1c-syntax/bsl-language-server/commit/814d78c21efa2eca7afcc02e7243fa442cb7a603", "message": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0442\u0435\u0441\u0442\u043e\u0432", "committedDate": "2020-05-14T10:20:17Z", "type": "commit"}, {"oid": "b47e84cb803aa7b0fc45306b2f6e8c5f5346e50b", "url": "https://github.com/1c-syntax/bsl-language-server/commit/b47e84cb803aa7b0fc45306b2f6e8c5f5346e50b", "message": "\u041f\u043e\u043f\u0440\u0430\u0432\u0438\u043b \u0442\u0435\u0441\u0442", "committedDate": "2020-05-14T10:23:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4Njg0Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1193#discussion_r425086847", "bodyText": "\u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0445\u043e\u0434!", "author": "nixel2007", "createdAt": "2020-05-14T12:09:59Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ExecuteExternalCodeDiagnostic.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.VULNERABILITY,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  minutesToFix = 1,\n+  scope = DiagnosticScope.BSL,\n+  tags = {\n+    DiagnosticTag.ERROR,\n+    DiagnosticTag.STANDARD\n+  },\n+  modules = {\n+    ModuleType.CommandModule,\n+    ModuleType.ExternalConnectionModule,\n+    ModuleType.FormModule,\n+    ModuleType.HTTPServiceModule,\n+    ModuleType.ObjectModule,\n+    ModuleType.OrdinaryApplicationModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule,\n+    ModuleType.WEBServiceModule,\n+    ModuleType.SessionModule\n+  }\n+)\n+public class ExecuteExternalCodeDiagnostic extends AbstractExecuteExternalCodeDiagnostic {\n+\n+  public ExecuteExternalCodeDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitFunction(BSLParser.FunctionContext ctx) {\n+\n+    // \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f, \u0442\u043e\u0433\u0434\u0430 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u043c\n+    if (ctx.funcDeclaration().compilerDirective().stream()\n+      .anyMatch(compilerDirectiveContext\n+        -> compilerDirectiveContext.getStop().getType() == BSLParser.ANNOTATION_ATCLIENT_SYMBOL)) {\n+      return ctx;", "originalCommit": "b47e84cb803aa7b0fc45306b2f6e8c5f5346e50b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}