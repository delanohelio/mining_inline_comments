{"pr_number": 1086, "pr_title": "\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430", "pr_createdAt": "2020-04-17T15:26:39Z", "pr_url": "https://github.com/1c-syntax/bsl-language-server/pull/1086", "timeline": [{"oid": "29fc0d2e5b926b5e6229350d96ad480cfceec77c", "url": "https://github.com/1c-syntax/bsl-language-server/commit/29fc0d2e5b926b5e6229350d96ad480cfceec77c", "message": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0430\u0446\u0438\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438", "committedDate": "2020-04-17T15:22:27Z", "type": "commit"}, {"oid": "d85c2fff267e1b76da5d3c83d7b1a74757b848bf", "url": "https://github.com/1c-syntax/bsl-language-server/commit/d85c2fff267e1b76da5d3c83d7b1a74757b848bf", "message": "\u0422\u0435\u0441\u0442\u044b", "committedDate": "2020-04-17T15:22:51Z", "type": "commit"}, {"oid": "2974178b66ce481b442f425739ef76edf4432f47", "url": "https://github.com/1c-syntax/bsl-language-server/commit/2974178b66ce481b442f425739ef76edf4432f47", "message": "\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f + \u043f\u0440\u0435\u043a\u043e\u043c\u043c\u0438\u0442", "committedDate": "2020-04-17T15:23:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2MzUzMA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410663530", "bodyText": "\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043e\u043b\u0433\u043e \u0436\u0435? \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0432\u0441\u0442\u0430\u0432\u0438\u0442 \u044d\u0442\u043e \u043f\u0430\u0440\u0430 \u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0438\u043d\u0443\u0442", "author": "asosnoviy", "createdAt": "2020-04-18T07:40:56Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,", "originalCommit": "2974178b66ce481b442f425739ef76edf4432f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MDI3MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410670270", "bodyText": "\u0421\u043e\u0433\u043b\u0430\u0441\u0435\u043d, \u043c\u043e\u0436\u043d\u043e \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f. \u041d\u043e \u0443 \u043c\u0435\u043d\u044f \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u0445 \u043d\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0443\u0445\u043e\u0434\u0438\u0442. \u0427\u0430\u0441\u0442\u043e \u0432 \u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438 \u0435\u0441\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0434\u0430\u0436\u0435 \u043f\u0440\u0438 \u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430.", "author": "otymko", "createdAt": "2020-04-18T08:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2MzUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "bd648c9e958115c709e7590815ff99ea72dfe24a", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex 385f284b07..83edfa2c8b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -27,10 +27,13 @@ import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticS\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n import com.github._1c_syntax.bsl.parser.BSLParser;\n import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n @DiagnosticMetadata(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTgxMA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410669810", "bodyText": "&&", "author": "asosnoviy", "createdAt": "2020-04-18T08:47:43Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {", "originalCommit": "2974178b66ce481b442f425739ef76edf4432f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NjE2Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410676166", "bodyText": "", "author": "otymko", "createdAt": "2020-04-18T09:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "bd648c9e958115c709e7590815ff99ea72dfe24a", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex 385f284b07..83edfa2c8b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -27,10 +27,13 @@ import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticS\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n import com.github._1c_syntax.bsl.parser.BSLParser;\n import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n @DiagnosticMetadata(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDc0MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410674741", "bodyText": "\u0432\u0430\u043d\u0433\u0443\u044e \u0441\u0442\u0440\u0435\u043b\u044f\u043d\u0438\u0435 \u043f\u0440\u0438 \u043d\u0430\u0431\u043e\u0440\u0435 \u043a\u043e\u0434\u0430 \u0432 vsc.\n\u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 Optional.ofNullable().map().map().map() ?", "author": "nixel2007", "createdAt": "2020-04-18T09:32:27Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();", "originalCommit": "2974178b66ce481b442f425739ef76edf4432f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NzExMQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410797111", "bodyText": "", "author": "otymko", "createdAt": "2020-04-19T02:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd648c9e958115c709e7590815ff99ea72dfe24a", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex 385f284b07..83edfa2c8b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -27,10 +27,13 @@ import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticS\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n import com.github._1c_syntax.bsl.parser.BSLParser;\n import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n @DiagnosticMetadata(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDg3OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410674878", "bodyText": "\u0437\u0434\u0435\u0441\u044c \u0442\u043e\u0447\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043b\u043e\u0432\u0438\u0442\u044c NPE", "author": "nixel2007", "createdAt": "2020-04-18T09:33:40Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {\n+      if (!statements.isEmpty()) {\n+        return !foundLoadConditionWithReturn(statements.get(0));\n+      }\n+    }\n+    return true;\n+  }\n+\n+  private boolean foundLoadConditionWithReturn(BSLParser.StatementContext ctx) {\n+    var ifStatement = ctx.compoundStatement().ifStatement();", "originalCommit": "2974178b66ce481b442f425739ef76edf4432f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NzQ0MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410677441", "bodyText": "", "author": "otymko", "createdAt": "2020-04-18T10:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "bd648c9e958115c709e7590815ff99ea72dfe24a", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex 385f284b07..83edfa2c8b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -27,10 +27,13 @@ import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticS\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n import com.github._1c_syntax.bsl.parser.BSLParser;\n import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n @DiagnosticMetadata(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDk4OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410674988", "bodyText": "\u0437\u0434\u0435\u0441\u044c IOOBE", "author": "nixel2007", "createdAt": "2020-04-18T09:34:32Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {\n+      if (!statements.isEmpty()) {\n+        return !foundLoadConditionWithReturn(statements.get(0));\n+      }\n+    }\n+    return true;\n+  }\n+\n+  private boolean foundLoadConditionWithReturn(BSLParser.StatementContext ctx) {\n+    var ifStatement = ctx.compoundStatement().ifStatement();\n+    if (ifStatement != null) {\n+      var ifBranch = ifStatement.ifBranch();\n+      var text = ifBranch.expression().getText();\n+      return searchCondition.matcher(text).find() && foundReturnStatement(ifBranch);\n+    }\n+    return false;\n+  }\n+\n+  private boolean foundReturnStatement(BSLParser.IfBranchContext ctx) {\n+    var ifStatements = ctx.codeBlock().statement();\n+    if (ifStatements != null) {\n+      var itemStatement = ifStatements.get(0);", "originalCommit": "2974178b66ce481b442f425739ef76edf4432f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3Njc3OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410676778", "bodyText": "", "author": "otymko", "createdAt": "2020-04-18T09:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "bd648c9e958115c709e7590815ff99ea72dfe24a", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex 385f284b07..83edfa2c8b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -27,10 +27,13 @@ import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticS\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n import com.github._1c_syntax.bsl.parser.BSLParser;\n import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n @DiagnosticMetadata(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTAwOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410675009", "bodyText": "\u0438 \u0437\u0434\u0435\u0441\u044c \u0432\u0440\u043e\u0434\u0435 \u0442\u043e\u0436\u0435 NPE \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c", "author": "nixel2007", "createdAt": "2020-04-18T09:34:45Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {\n+      if (!statements.isEmpty()) {\n+        return !foundLoadConditionWithReturn(statements.get(0));\n+      }\n+    }\n+    return true;\n+  }\n+\n+  private boolean foundLoadConditionWithReturn(BSLParser.StatementContext ctx) {\n+    var ifStatement = ctx.compoundStatement().ifStatement();\n+    if (ifStatement != null) {\n+      var ifBranch = ifStatement.ifBranch();\n+      var text = ifBranch.expression().getText();\n+      return searchCondition.matcher(text).find() && foundReturnStatement(ifBranch);\n+    }\n+    return false;\n+  }\n+\n+  private boolean foundReturnStatement(BSLParser.IfBranchContext ctx) {\n+    var ifStatements = ctx.codeBlock().statement();\n+    if (ifStatements != null) {\n+      var itemStatement = ifStatements.get(0);\n+      return itemStatement.compoundStatement().returnStatement() != null;", "originalCommit": "2974178b66ce481b442f425739ef76edf4432f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NzQ2MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410677461", "bodyText": "", "author": "otymko", "createdAt": "2020-04-18T10:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd648c9e958115c709e7590815ff99ea72dfe24a", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex 385f284b07..83edfa2c8b 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -27,10 +27,13 @@ import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticS\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n import com.github._1c_syntax.bsl.parser.BSLParser;\n import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n @DiagnosticMetadata(\n"}}, {"oid": "bd648c9e958115c709e7590815ff99ea72dfe24a", "url": "https://github.com/1c-syntax/bsl-language-server/commit/bd648c9e958115c709e7590815ff99ea72dfe24a", "message": "\u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c\u044b, \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430, \u0432\u0440\u0435\u043c\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u043e \u0434\u043e 5 \u043c\u0438\u043d, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0435\u0449\u0435 \u0442\u0438\u043f\u044b \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443", "committedDate": "2020-04-18T16:06:39Z", "type": "commit"}, {"oid": "c5e66d4df31d18afc734d16091d4da63f6e74d6b", "url": "https://github.com/1c-syntax/bsl-language-server/commit/c5e66d4df31d18afc734d16091d4da63f6e74d6b", "message": "\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u0445 (\u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f)", "committedDate": "2020-04-18T16:07:00Z", "type": "commit"}, {"oid": "e7668555c5e4fa7db13334250a86028e65c2baa6", "url": "https://github.com/1c-syntax/bsl-language-server/commit/e7668555c5e4fa7db13334250a86028e65c2baa6", "message": "\u043f\u043e\u0438\u0441\u043a \u043f\u0435\u0440\u0432\u043e\u0433\u043e statement \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e false", "committedDate": "2020-04-20T05:06:27Z", "type": "commit"}, {"oid": "570ff3dd9af5ee0301dd53b4b6a9ed6eb46cd1b8", "url": "https://github.com/1c-syntax/bsl-language-server/commit/570ff3dd9af5ee0301dd53b4b6a9ed6eb46cd1b8", "message": "Precommit", "committedDate": "2020-04-20T05:10:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NzI2MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411097261", "bodyText": "\u041c\u043d\u0435 \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u043d\u043e \u043f\u043e\u043a\u0430 \u043d\u0438\u0447\u0435\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b.", "author": "otymko", "createdAt": "2020-04-20T05:12:00Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;\n+\n+  @DiagnosticParameter(\n+    type = Boolean.class,\n+    defaultValue = \"\" + FIND_FIRST\n+  )\n+  private boolean findFirst = FIND_FIRST;\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) return;\n+    DiagnosticHelper.configureDiagnostic(this, configuration, \"findFirst\");\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    Optional.of(ctx)\n+      .map(BSLParser.ProcDeclarationContext::subName)\n+      .filter(subName ->\n+        searchSubNames.matcher(subName.getText()).find()\n+          && !checkPassed(ctx)\n+      )\n+      .flatMap(context ->\n+        Optional.of(documentContext.getSymbolTree())\n+          .map(symbolTree -> symbolTree.getMethodSymbol((BSLParser.SubContext) getSubContext(ctx)))\n+          .get())\n+      .ifPresent(methodSymbol -> diagnosticStorage.addDiagnostic(methodSymbol.getSubNameRange()));\n+    return ctx;\n+  }\n+\n+  private boolean checkPassed(BSLParser.ProcDeclarationContext ctx) {\n+    AtomicInteger orderStatement = new AtomicInteger();\n+    return Optional.of(ctx)\n+      .map(BSLParser.ProcDeclarationContext::getParent)\n+      .map(BSLParser.ProcedureContext.class::cast)\n+      .map(BSLParser.ProcedureContext::subCodeBlock)\n+      .map(BSLParser.SubCodeBlockContext::codeBlock)\n+      .map(BSLParser.CodeBlockContext::statement)\n+      .flatMap(context -> context.stream()\n+        .filter(statement -> {\n+          orderStatement.getAndIncrement();\n+          if (findFirst && orderStatement.get() > 1) {", "originalCommit": "570ff3dd9af5ee0301dd53b4b6a9ed6eb46cd1b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f678c57a9f4c6893e5132e1a322e2b38f65c557", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex b0591f9547..df9278bf19 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -80,7 +80,9 @@ public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n \n   @Override\n   public void configure(Map<String, Object> configuration) {\n-    if (configuration == null) return;\n+    if (configuration == null) {\n+      return;\n+    }\n     DiagnosticHelper.configureDiagnostic(this, configuration, \"findFirst\");\n   }\n \n"}}, {"oid": "2f678c57a9f4c6893e5132e1a322e2b38f65c557", "url": "https://github.com/1c-syntax/bsl-language-server/commit/2f678c57a9f4c6893e5132e1a322e2b38f65c557", "message": "qf", "committedDate": "2020-04-20T05:23:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5ODA3OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411398079", "bodyText": "\u044d\u0442\u043e \u0443\u0436\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438", "author": "nixel2007", "createdAt": "2020-04-20T13:55:59Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;\n+\n+  @DiagnosticParameter(\n+    type = Boolean.class,\n+    defaultValue = \"\" + FIND_FIRST\n+  )\n+  private boolean findFirst = FIND_FIRST;\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {", "originalCommit": "2f678c57a9f4c6893e5132e1a322e2b38f65c557", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\nindex df9278bf19..3af01357cf 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java\n\n@@ -78,14 +78,6 @@ public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n     super(info);\n   }\n \n-  @Override\n-  public void configure(Map<String, Object> configuration) {\n-    if (configuration == null) {\n-      return;\n-    }\n-    DiagnosticHelper.configureDiagnostic(this, configuration, \"findFirst\");\n-  }\n-\n   @Override\n   public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n     Optional.of(ctx)\n"}}, {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "url": "https://github.com/1c-syntax/bsl-language-server/commit/f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "message": "\u0443\u0431\u0440\u0430\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0439 configure", "committedDate": "2020-04-20T14:32:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MzUzOA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411463538", "bodyText": "\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 FIND_FIRST \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0432\u043e\u0435\u043c\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e ( @otymko\nFALSE \u0436\u0435", "author": "artbear", "createdAt": "2020-04-20T15:17:51Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;", "originalCommit": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MDU0MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411480541", "bodyText": "\u042f \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u043f\u0440\u043e \u0447\u0442\u043e \u0442\u044b. \u0421\u0441\u044b\u043b\u043a\u0443 \u043c\u043e\u0436\u043d\u043e?", "author": "otymko", "createdAt": "2020-04-20T15:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MzUzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NDU2OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411494568", "bodyText": "\u0434\u0430 \u0442\u0443\u0442 \u043f\u0440\u043e\u0441\u0442\u043e -\n1 \u0442\u044b \u0441\u0434\u0435\u043b\u0430\u043b \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0442\u0443\u043f\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u043b\u043e\u0436\u043d\u043e. \u0437\u0430\u0447\u0435\u043c \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0435 \u043a\u0430\u043a-\u0442\u043e \u0435\u0449\u0435, \u0435\u0441\u043b\u0438 \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u041b\u043e\u0436\u044c?\n2 \u043a\u0430\u043a \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f FIND_FIRST  \u0443\u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u041b\u043e\u0436\u044c?\n\u0442\u043e\u0433\u0434\u0430 \u0443\u0436 NONE_FIRST \u043b\u0443\u0447\u0448\u0435 )", "author": "artbear", "createdAt": "2020-04-20T15:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MzUzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5Nzc5Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411497797", "bodyText": "\u041d\u0435 \u0432\u0438\u0436\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u043b\u043e\u0445\u043e\u0433\u043e.", "author": "otymko", "createdAt": "2020-04-20T16:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MzUzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MDY0Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411470646", "bodyText": "\u0421\u043e\u043d\u0430\u0440\u041b\u0438\u043d\u0442 \u0432\u044b\u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f, \u0434\u0430 \u0438 \u0418\u0434\u0435\u044f \u0440\u0443\u0433\u0430\u0435\u0442\u0441\u044f (", "author": "artbear", "createdAt": "2020-04-20T15:26:42Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;", "originalCommit": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODM4Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411478386", "bodyText": "\u0412\u044b\u0448\u0435 \u0443\u0436\u0435 \u043f\u0438\u0441\u0430\u043b\u0438.", "author": "otymko", "createdAt": "2020-04-20T15:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MDY0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTU5Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411471592", "bodyText": "\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0436\u0435 \u0448\u0442\u0443\u043a\u0430?\n\nmap() \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 Optional \u0438 get \u0442\u0443\u043f\u043e \u0440\u0443\u0445\u043d\u0435\u0442.\n\u0430 \u0437\u0434\u0435\u0441\u044c \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043d\u0435\u0442 (\n@otymko @nixel2007", "author": "artbear", "createdAt": "2020-04-20T15:27:55Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;\n+\n+  @DiagnosticParameter(\n+    type = Boolean.class,\n+    defaultValue = \"\" + FIND_FIRST\n+  )\n+  private boolean findFirst = FIND_FIRST;\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    Optional.of(ctx)\n+      .map(BSLParser.ProcDeclarationContext::subName)\n+      .filter(subName ->\n+        searchSubNames.matcher(subName.getText()).find()\n+          && !checkPassed(ctx)\n+      )\n+      .flatMap(context ->\n+        Optional.of(documentContext.getSymbolTree())\n+          .map(symbolTree -> symbolTree.getMethodSymbol((BSLParser.SubContext) getSubContext(ctx)))\n+          .get())", "originalCommit": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3NTY2Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411475666", "bodyText": "\u043c\u043e\u0436\u043d\u043e \u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 flatMap \u0432\u043c\u0435\u0441\u0442\u043e map", "author": "artbear", "createdAt": "2020-04-20T15:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODIwMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411478203", "bodyText": "\u042f \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e \u043a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.", "author": "otymko", "createdAt": "2020-04-20T15:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5ODA1NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411498055", "bodyText": "", "author": "otymko", "createdAt": "2020-04-20T16:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTU5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411482540", "bodyText": "\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0430 \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430\" \u0438 \u0442.\u043f. \u043d\u0435\u0432\u0435\u0440\u043d\u0430\u044f.\n. \u0432 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043f\u0435\u0446.\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u0435\u0431\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \"\\.\" \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0442\u043e\u0447\u043a\u0430 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435.", "author": "artbear", "createdAt": "2020-04-20T15:41:41Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",", "originalCommit": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MzM3NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411483374", "bodyText": "\"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430\" \u0432\u043e\u0442 \u044d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0430.\n1 \u0442\u0435\u0441\u0442\u044b \u0438 \u0431\u0435\u0437 \u043d\u0435\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442, \u0442.\u0435. \u043e\u043d\u0430 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0433\u043e\n2 \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0434\u043e \u0438 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 (", "author": "artbear", "createdAt": "2020-04-20T15:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4NDUwNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411484505", "bodyText": "\u042d\u0442\u043e \u0442\u0430\u043a \u0432\u0430\u0436\u043d\u043e?", "author": "otymko", "createdAt": "2020-04-20T15:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4Nzc0MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411487740", "bodyText": "\u0410 \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u043f\u0430\u0434\u0430\u044e\u0442 \u0432\u043e\u0442 \u044d\u0442\u0438 \u0442\u0435\u0441\u0442\u044b\n\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c(\u041e\u0442\u043a\u0430\u0437)\n    \u0415\u0441\u043b\u0438 \u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 = \u0418\u0441\u0442\u0438\u043d\u0430 \u0422\u043e\u0433\u0434\u0430\n        \u0412\u043e\u0437\u0432\u0440\u0430\u0442;\n    \u041a\u043e\u043d\u0435\u0446\u0415\u0441\u043b\u0438;\n\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\n\u0438\u043b\u0438\n\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c(\u041e\u0442\u043a\u0430\u0437)\n    \u0415\u0441\u043b\u0438 \u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u04381\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0422\u043e\u0433\u0434\u0430\n        \u0412\u043e\u0437\u0432\u0440\u0430\u0442;\n    \u041a\u043e\u043d\u0435\u0446\u0415\u0441\u043b\u0438;\n\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b", "author": "artbear", "createdAt": "2020-04-20T15:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4ODMwMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411488302", "bodyText": "\u0425\u043e\u0442\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u0435\u043d, \u043d\u0430\u0434\u043e \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c.", "author": "otymko", "createdAt": "2020-04-20T15:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MTQwMA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411491400", "bodyText": "@otymko \u0438\u0437\u0432\u0438\u043d\u0438, \u0447\u0442\u043e \u044f \u043f\u043e\u0437\u0434\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b )", "author": "artbear", "createdAt": "2020-04-20T15:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NTcxMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411495712", "bodyText": "\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 \u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430 \u0438 \u0430\u043d\u0433\u043b.\u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0437 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0438 \u043b\u0443\u0447\u0448\u0435 \u0443\u0431\u0440\u0430\u0442\u044c.\n\u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u0438 \u0431\u0435\u0437 \u043d\u0435\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 )", "author": "artbear", "createdAt": "2020-04-20T15:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTEzMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411499133", "bodyText": "\u041f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u0435\u043d - \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u042f \u0443\u0431\u0435\u0440\u0443.", "author": "otymko", "createdAt": "2020-04-20T16:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA=="}], "type": "inlineReview", "revised_code": null}]}