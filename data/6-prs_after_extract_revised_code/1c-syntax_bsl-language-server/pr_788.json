{"pr_number": 788, "pr_title": "Merge pull request #788 from theshadowco/feature/regions", "pr_createdAt": "2020-01-09T11:07:57Z", "pr_url": "https://github.com/1c-syntax/bsl-language-server/pull/788", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5MTA3MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364691071", "bodyText": "\u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e region.getStartLine() \u0438 region.getEndLine()?", "author": "nixel2007", "createdAt": "2020-01-09T11:32:26Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class CodeOutOfRegionDiagnostic extends AbstractVisitorDiagnostic {\n+  private List<Range> regionsRanges = new ArrayList<>();\n+\n+  public CodeOutOfRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitFile(BSLParser.FileContext ctx) {\n+    List<RegionSymbol> regions = documentContext.getRegions();\n+    regionsRanges.clear();\n+\n+    // \u0435\u0441\u043b\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435\u0442, \u0442\u043e \u0438 \u0441\u043c\u044b\u0441\u043b\u0430 \u0434\u0430\u043b\u044c\u0448\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0442\u044c \u0442\u043e\u0436\u0435 \u043d\u0435\u0442\n+    if (regions.isEmpty() && ctx.getChildCount() > 0) {\n+      diagnosticStorage.addDiagnostic(ctx);\n+      return ctx;\n+    } else {\n+      regions.forEach(region ->\n+        regionsRanges.add(Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwMTc0MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364701740", "bodyText": "\u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0436\u0430 \u043d\u0430\u0434\u043e \u043a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0448\u043e", "author": "theshadowco", "createdAt": "2020-01-09T11:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwMjk3OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364702979", "bodyText": "\u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0436. \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0443 - \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0442\u0430\u043a \u0447\u0442\u043e \u043e\u043d\u043e \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0431\u0443\u0434\u0435\u0442 containsRange, \u0442.\u043a. \u043e\u043d\u043e \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.", "author": "nixel2007", "createdAt": "2020-01-09T12:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5MTA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java\nindex 297f3517c..70af93def 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java\n\n@@ -23,7 +23,6 @@ package com.github._1c_syntax.bsl.languageserver.diagnostics;\n \n import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Mjc0NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364692744", "bodyText": "\u0431\u043e\u044e\u0441\u044c, \u0447\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u0440\u043e\u0433\u043e.\n\u0414\u0435\u0448\u0435\u0432\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 fileCodeBlock \u0438 fileCodeBlockBeforeSub \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u043e\u0432-statement. \u0418 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0443\u0436\u0435 \u0438\u0445.\n\u0418 \u043a\u0438\u0434\u0430\u0442\u044c \u044d\u0442\u0443 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 \u0441\u0442\u043e\u0438\u0442 1 \u0440\u0430\u0437 \u043d\u0430 fileCodeBlock/fileCodeBlockBeforeSub, \u0430 \u043d\u0435 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 statement", "author": "nixel2007", "createdAt": "2020-01-09T11:36:29Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class CodeOutOfRegionDiagnostic extends AbstractVisitorDiagnostic {\n+  private List<Range> regionsRanges = new ArrayList<>();\n+\n+  public CodeOutOfRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitFile(BSLParser.FileContext ctx) {\n+    List<RegionSymbol> regions = documentContext.getRegions();\n+    regionsRanges.clear();\n+\n+    // \u0435\u0441\u043b\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435\u0442, \u0442\u043e \u0438 \u0441\u043c\u044b\u0441\u043b\u0430 \u0434\u0430\u043b\u044c\u0448\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0442\u044c \u0442\u043e\u0436\u0435 \u043d\u0435\u0442\n+    if (regions.isEmpty() && ctx.getChildCount() > 0) {\n+      diagnosticStorage.addDiagnostic(ctx);\n+      return ctx;\n+    } else {\n+      regions.forEach(region ->\n+        regionsRanges.add(Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n+      );\n+    }\n+\n+    return super.visitFile(ctx);\n+\n+  }\n+\n+  @Override\n+  public ParseTree visitModuleVar(BSLParser.ModuleVarContext ctx) {\n+    Trees.getChildren(ctx).stream()\n+      .filter(node -> !(node instanceof BSLParser.PreprocessorContext)\n+        && !(node instanceof TerminalNode))\n+      .findFirst()\n+      .ifPresent(node -> {\n+          Range ctxRange = Ranges.create((BSLParserRuleContext) node);\n+          if (regionsRanges.stream().noneMatch(regionRange ->\n+            Ranges.containsRange(regionRange, ctxRange))) {\n+            diagnosticStorage.addDiagnostic(ctx);\n+          }\n+        }\n+      );\n+    return ctx;\n+  }\n+\n+  @Override\n+  public ParseTree visitSub(BSLParser.SubContext ctx) {\n+    documentContext.getMethodSymbol(ctx).ifPresent((MethodSymbol methodSymbol) -> {\n+      if (methodSymbol.getRegion().isEmpty()) {\n+        diagnosticStorage.addDiagnostic(methodSymbol.getSubNameRange());\n+      }\n+    });\n+    return ctx;\n+  }\n+\n+  @Override\n+  public ParseTree visitStatement(BSLParser.StatementContext ctx) {", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwODA1Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364708052", "bodyText": "\u041f\u0440\u0438\u043d\u044f\u0442\u043e", "author": "theshadowco", "createdAt": "2020-01-09T12:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Mjc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java\nindex 297f3517c..70af93def 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/CodeOutOfRegionDiagnostic.java\n\n@@ -23,7 +23,6 @@ package com.github._1c_syntax.bsl.languageserver.diagnostics;\n \n import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364694305", "bodyText": "\u0437\u0430\u0447\u0435\u043c \u0442\u0435\u0431\u0435 \u044d\u0442\u043e\u0442 \u0444\u0438\u043b\u044c\u0442\u0440, \u0435\u0441\u043b\u0438 \u0442\u044b \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0441\u043c\u043e\u0442\u0440\u0438\u0448\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f? \u043d\u0443 \u043f\u0443\u0441\u0442\u0430\u044f \u043e\u043d\u0430 \u0438 \u043f\u0443\u0441\u0442\u0430\u044f. \u0437\u0430\u0447\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043c\u0435\u0442\u043e\u0434\u044b?", "author": "nixel2007", "createdAt": "2020-01-09T11:40:12Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class DuplicateRegionDiagnostic extends AbstractVisitorDiagnostic {\n+  private final Map<String, String> regionNames = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+  public DuplicateRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+    regionNames.put(\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Public\");\n+    regionNames.put(\"Public\", \"Public\");\n+    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Internal\");\n+    regionNames.put(\"Internal\", \"Internal\");\n+    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438\", \"Private\");\n+    regionNames.put(\"Private\", \"Private\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\", \"EventHandlers\");\n+    regionNames.put(\"EventHandlers\", \"EventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b\", \"FormEventHandlers\");\n+    regionNames.put(\"FormEventHandlers\", \"FormEventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b\", \"FormHeaderItemsEventHandlers\");\n+    regionNames.put(\"FormHeaderItemsEventHandlers\", \"FormHeaderItemsEventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b\", \"FormCommandsEventHandlers\");\n+    regionNames.put(\"FormCommandsEventHandlers\", \"FormCommandsEventHandlers\");\n+    regionNames.put(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\", \"Variables\");\n+    regionNames.put(\"Variables\", \"Variables\");\n+    regionNames.put(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\", \"Initialize\");\n+    regionNames.put(\"Initialize\", \"Initialize\");\n+  }\n+\n+  @Override\n+  public ParseTree visitFile(BSLParser.FileContext ctx) {\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n+    List<Range> methodRanges = documentContext.getMethods().stream()\n+      .map(MethodSymbol::getRange).collect(Collectors.toList());\n+    List<RegionSymbol> regions = documentContext.getRegions()\n+      .stream()\n+      .filter(region -> methodRanges.stream().noneMatch(methodRange ->", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Njc2OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364696768", "bodyText": "\u0442\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u0431\u0440\u0430\u0442\u044c methodRanges.", "author": "nixel2007", "createdAt": "2020-01-09T11:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5OTkwNg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364699906", "bodyText": "\u0412\u0441\u0435 \u043d\u0435 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e - \u043f\u0435\u0440\u0432\u044b\u043c \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u0438 \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\n\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0440\u043e\u0446\u0435\u0440\u0430\u0412\u041c\u043e\u0434\u0443\u043b\u0435\u0411\u0435\u0437\u041e\u0431\u043b\u0430\u0441\u0442\u0435\u0439()\n#\u041e\u0431\u043b\u0430\u0441\u0442\u044c \u041e\u0431\u043b\n#\u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438\n\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b", "author": "theshadowco", "createdAt": "2020-01-09T11:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwMDk1Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364700953", "bodyText": "\u0445\u043c, \u0442\u044b \u043f\u0440\u0430\u0432. \u043c\u043e\u0436\u0435\u0442 \u0442\u043e\u0433\u0434\u0430 \u0432 DocumentContext \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0443\u0440\u043e\u0432\u043d\u044f \u0444\u0430\u0439\u043b\u0430? \u043a\u0430\u043a regionsFlat, \u0442\u043e\u043b\u044c\u043a\u043e fileLevelRegions", "author": "nixel2007", "createdAt": "2020-01-09T11:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxNjY5Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364716697", "bodyText": "\u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e", "author": "theshadowco", "createdAt": "2020-01-09T12:38:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxNzQxOA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364717418", "bodyText": "\u0442\u043e\u0433\u0434\u0430 \u043f\u043e \u0441\u0443\u0442\u0438 \u043c\u043e\u044e \u043c\u0430\u0433\u0438\u044e \u043d\u0430\u0434\u043e \u0442\u0443\u0434\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442\u044c?", "author": "theshadowco", "createdAt": "2020-01-09T12:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMDg1MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364720851", "bodyText": "\u0434\u0430, \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0442\u043e.", "author": "nixel2007", "createdAt": "2020-01-09T12:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMzAxNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364723015", "bodyText": "\u0413\u043e\u0442\u043e\u0432\u043e", "author": "theshadowco", "createdAt": "2020-01-09T12:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NDMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\ndeleted file mode 100644\nindex 564dea642..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,131 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.TreeMap;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class DuplicateRegionDiagnostic extends AbstractVisitorDiagnostic {\n-  private final Map<String, String> regionNames = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-\n-  public DuplicateRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-    regionNames.put(\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Public\");\n-    regionNames.put(\"Public\", \"Public\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Internal\");\n-    regionNames.put(\"Internal\", \"Internal\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438\", \"Private\");\n-    regionNames.put(\"Private\", \"Private\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\", \"EventHandlers\");\n-    regionNames.put(\"EventHandlers\", \"EventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b\", \"FormEventHandlers\");\n-    regionNames.put(\"FormEventHandlers\", \"FormEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"FormHeaderItemsEventHandlers\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"FormCommandsEventHandlers\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\", \"Variables\");\n-    regionNames.put(\"Variables\", \"Variables\");\n-    regionNames.put(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\", \"Initialize\");\n-    regionNames.put(\"Initialize\", \"Initialize\");\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n-    List<Range> methodRanges = documentContext.getMethods().stream()\n-      .map(MethodSymbol::getRange).collect(Collectors.toList());\n-    List<RegionSymbol> regions = documentContext.getRegions()\n-      .stream()\n-      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n-        Ranges.containsRange(methodRange,\n-          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n-      ))\n-      .collect(Collectors.toList());\n-\n-    // \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    // \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n-    regions.stream()\n-      .collect(Collectors.groupingBy(regionSymbol ->\n-        regionNames.getOrDefault(regionSymbol.getName(), regionSymbol.getName())))\n-      .forEach((String name, List<RegionSymbol> regionsList) -> {\n-          if (regionsList.size() > 1) {\n-\n-            List<DiagnosticRelatedInformation> relatedInformation = new ArrayList<>();\n-            RegionSymbol currentRegion = regionsList.get(0);\n-            Range currentRange = Ranges.create(\n-              currentRegion.getStartNode().getStart(),\n-              currentRegion.getStartNode().getStop());\n-\n-            regionsList.stream()\n-              .map(region ->\n-                RelatedInformation.create(\n-                  documentContext.getUri(),\n-                  Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-                  \"+1\"\n-                )\n-              )\n-              .collect(Collectors.toCollection(() -> relatedInformation));\n-\n-            diagnosticStorage.addDiagnostic(\n-              currentRange,\n-              info.getMessage(currentRegion.getName()),\n-              relatedInformation);\n-          }\n-        }\n-      );\n-\n-    return ctx;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NTY1Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364695656", "bodyText": "\u0442\u043e\u0442 \u0436\u0435 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u0440\u043e startLine \u0438 endLine. \u043d\u0443 \u0438\u043b\u0438 \u0445\u0435\u043b\u043f\u0435\u0440 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c, \u0441\u0440\u0430\u0437\u0443 \u0438\u0437 RegionSymbol.", "author": "nixel2007", "createdAt": "2020-01-09T11:43:26Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class DuplicateRegionDiagnostic extends AbstractVisitorDiagnostic {\n+  private final Map<String, String> regionNames = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+  public DuplicateRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+    regionNames.put(\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Public\");\n+    regionNames.put(\"Public\", \"Public\");\n+    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Internal\");\n+    regionNames.put(\"Internal\", \"Internal\");\n+    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438\", \"Private\");\n+    regionNames.put(\"Private\", \"Private\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\", \"EventHandlers\");\n+    regionNames.put(\"EventHandlers\", \"EventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b\", \"FormEventHandlers\");\n+    regionNames.put(\"FormEventHandlers\", \"FormEventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b\", \"FormHeaderItemsEventHandlers\");\n+    regionNames.put(\"FormHeaderItemsEventHandlers\", \"FormHeaderItemsEventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b\", \"FormCommandsEventHandlers\");\n+    regionNames.put(\"FormCommandsEventHandlers\", \"FormCommandsEventHandlers\");\n+    regionNames.put(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\", \"Variables\");\n+    regionNames.put(\"Variables\", \"Variables\");\n+    regionNames.put(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\", \"Initialize\");\n+    regionNames.put(\"Initialize\", \"Initialize\");\n+  }\n+\n+  @Override\n+  public ParseTree visitFile(BSLParser.FileContext ctx) {\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n+    List<Range> methodRanges = documentContext.getMethods().stream()\n+      .map(MethodSymbol::getRange).collect(Collectors.toList());\n+    List<RegionSymbol> regions = documentContext.getRegions()\n+      .stream()\n+      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n+        Ranges.containsRange(methodRange,\n+          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n+      ))\n+      .collect(Collectors.toList());\n+\n+    // \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n+    if (regions.isEmpty()) {\n+      return ctx;\n+    }\n+\n+    // \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+    regions.stream()\n+      .collect(Collectors.groupingBy(regionSymbol ->\n+        regionNames.getOrDefault(regionSymbol.getName(), regionSymbol.getName())))\n+      .forEach((String name, List<RegionSymbol> regionsList) -> {\n+          if (regionsList.size() > 1) {\n+\n+            List<DiagnosticRelatedInformation> relatedInformation = new ArrayList<>();\n+            RegionSymbol currentRegion = regionsList.get(0);\n+            Range currentRange = Ranges.create(\n+              currentRegion.getStartNode().getStart(),", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwOTgyNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364709825", "bodyText": "\u0414\u043e\u0431\u0430\u0432\u043b\u044e \u0432 \u0445\u0435\u043b\u043f\u0435\u0440", "author": "theshadowco", "createdAt": "2020-01-09T12:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NTY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\ndeleted file mode 100644\nindex 564dea642..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,131 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.TreeMap;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class DuplicateRegionDiagnostic extends AbstractVisitorDiagnostic {\n-  private final Map<String, String> regionNames = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-\n-  public DuplicateRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-    regionNames.put(\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Public\");\n-    regionNames.put(\"Public\", \"Public\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Internal\");\n-    regionNames.put(\"Internal\", \"Internal\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438\", \"Private\");\n-    regionNames.put(\"Private\", \"Private\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\", \"EventHandlers\");\n-    regionNames.put(\"EventHandlers\", \"EventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b\", \"FormEventHandlers\");\n-    regionNames.put(\"FormEventHandlers\", \"FormEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"FormHeaderItemsEventHandlers\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"FormCommandsEventHandlers\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\", \"Variables\");\n-    regionNames.put(\"Variables\", \"Variables\");\n-    regionNames.put(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\", \"Initialize\");\n-    regionNames.put(\"Initialize\", \"Initialize\");\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n-    List<Range> methodRanges = documentContext.getMethods().stream()\n-      .map(MethodSymbol::getRange).collect(Collectors.toList());\n-    List<RegionSymbol> regions = documentContext.getRegions()\n-      .stream()\n-      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n-        Ranges.containsRange(methodRange,\n-          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n-      ))\n-      .collect(Collectors.toList());\n-\n-    // \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    // \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n-    regions.stream()\n-      .collect(Collectors.groupingBy(regionSymbol ->\n-        regionNames.getOrDefault(regionSymbol.getName(), regionSymbol.getName())))\n-      .forEach((String name, List<RegionSymbol> regionsList) -> {\n-          if (regionsList.size() > 1) {\n-\n-            List<DiagnosticRelatedInformation> relatedInformation = new ArrayList<>();\n-            RegionSymbol currentRegion = regionsList.get(0);\n-            Range currentRange = Ranges.create(\n-              currentRegion.getStartNode().getStart(),\n-              currentRegion.getStartNode().getStop());\n-\n-            regionsList.stream()\n-              .map(region ->\n-                RelatedInformation.create(\n-                  documentContext.getUri(),\n-                  Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-                  \"+1\"\n-                )\n-              )\n-              .collect(Collectors.toCollection(() -> relatedInformation));\n-\n-            diagnosticStorage.addDiagnostic(\n-              currentRange,\n-              info.getMessage(currentRegion.getName()),\n-              relatedInformation);\n-          }\n-        }\n-      );\n-\n-    return ctx;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NjEyOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364696129", "bodyText": "\u041f\u043e\u043d\u0438\u043c\u0430\u044e, \u0447\u0442\u043e \u0442\u044b \u0442\u0443\u0442 \u0434\u0435\u043b\u0430\u0435\u0448\u044c, \u043d\u043e \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a-\u0442\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0445\u0438\u0442\u0440\u043e... :)", "author": "nixel2007", "createdAt": "2020-01-09T11:44:29Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class DuplicateRegionDiagnostic extends AbstractVisitorDiagnostic {\n+  private final Map<String, String> regionNames = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+  public DuplicateRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+    regionNames.put(\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Public\");\n+    regionNames.put(\"Public\", \"Public\");\n+    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Internal\");\n+    regionNames.put(\"Internal\", \"Internal\");\n+    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438\", \"Private\");\n+    regionNames.put(\"Private\", \"Private\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\", \"EventHandlers\");\n+    regionNames.put(\"EventHandlers\", \"EventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b\", \"FormEventHandlers\");\n+    regionNames.put(\"FormEventHandlers\", \"FormEventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b\", \"FormHeaderItemsEventHandlers\");\n+    regionNames.put(\"FormHeaderItemsEventHandlers\", \"FormHeaderItemsEventHandlers\");\n+    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b\", \"FormCommandsEventHandlers\");\n+    regionNames.put(\"FormCommandsEventHandlers\", \"FormCommandsEventHandlers\");\n+    regionNames.put(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\", \"Variables\");\n+    regionNames.put(\"Variables\", \"Variables\");\n+    regionNames.put(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\", \"Initialize\");\n+    regionNames.put(\"Initialize\", \"Initialize\");\n+  }\n+\n+  @Override\n+  public ParseTree visitFile(BSLParser.FileContext ctx) {\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n+    List<Range> methodRanges = documentContext.getMethods().stream()\n+      .map(MethodSymbol::getRange).collect(Collectors.toList());\n+    List<RegionSymbol> regions = documentContext.getRegions()\n+      .stream()\n+      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n+        Ranges.containsRange(methodRange,\n+          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n+      ))\n+      .collect(Collectors.toList());\n+\n+    // \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n+    if (regions.isEmpty()) {\n+      return ctx;\n+    }\n+\n+    // \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+    regions.stream()\n+      .collect(Collectors.groupingBy(regionSymbol ->\n+        regionNames.getOrDefault(regionSymbol.getName(), regionSymbol.getName())))", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MjI4Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364762286", "bodyText": "\u043d\u0435\u043d\u0443\u0430\u0447\u043e?", "author": "theshadowco", "createdAt": "2020-01-09T14:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NjEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\ndeleted file mode 100644\nindex 564dea642..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,131 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.TreeMap;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class DuplicateRegionDiagnostic extends AbstractVisitorDiagnostic {\n-  private final Map<String, String> regionNames = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-\n-  public DuplicateRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-    regionNames.put(\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Public\");\n-    regionNames.put(\"Public\", \"Public\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Internal\");\n-    regionNames.put(\"Internal\", \"Internal\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438\", \"Private\");\n-    regionNames.put(\"Private\", \"Private\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\", \"EventHandlers\");\n-    regionNames.put(\"EventHandlers\", \"EventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b\", \"FormEventHandlers\");\n-    regionNames.put(\"FormEventHandlers\", \"FormEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"FormHeaderItemsEventHandlers\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"FormCommandsEventHandlers\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\", \"Variables\");\n-    regionNames.put(\"Variables\", \"Variables\");\n-    regionNames.put(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\", \"Initialize\");\n-    regionNames.put(\"Initialize\", \"Initialize\");\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n-    List<Range> methodRanges = documentContext.getMethods().stream()\n-      .map(MethodSymbol::getRange).collect(Collectors.toList());\n-    List<RegionSymbol> regions = documentContext.getRegions()\n-      .stream()\n-      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n-        Ranges.containsRange(methodRange,\n-          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n-      ))\n-      .collect(Collectors.toList());\n-\n-    // \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    // \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n-    regions.stream()\n-      .collect(Collectors.groupingBy(regionSymbol ->\n-        regionNames.getOrDefault(regionSymbol.getName(), regionSymbol.getName())))\n-      .forEach((String name, List<RegionSymbol> regionsList) -> {\n-          if (regionsList.size() > 1) {\n-\n-            List<DiagnosticRelatedInformation> relatedInformation = new ArrayList<>();\n-            RegionSymbol currentRegion = regionsList.get(0);\n-            Range currentRange = Ranges.create(\n-              currentRegion.getStartNode().getStart(),\n-              currentRegion.getStartNode().getStop());\n-\n-            regionsList.stream()\n-              .map(region ->\n-                RelatedInformation.create(\n-                  documentContext.getUri(),\n-                  Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-                  \"+1\"\n-                )\n-              )\n-              .collect(Collectors.toCollection(() -> relatedInformation));\n-\n-            diagnosticStorage.addDiagnostic(\n-              currentRange,\n-              info.getMessage(currentRegion.getName()),\n-              relatedInformation);\n-          }\n-        }\n-      );\n-\n-    return ctx;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NzE1NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364697154", "bodyText": "\u0432\u0440\u043e\u0434\u0435 \u043d\u0435 \u043d\u0430\u0434\u043e normalize. \u0412\u0441\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043a\u043b\u0430\u0441\u0441 Absolute.", "author": "nixel2007", "createdAt": "2020-01-09T11:47:15Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class NonStandardRegionDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  private static List<Pattern> getStandardRegions(ModuleType moduleType) {\n+\n+    List<Pattern> standardRegions = new ArrayList<>();\n+\n+    Pattern publicRegionName = Pattern.compile(\n+      \"^(?:\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Public)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern internalRegionName = Pattern.compile(\n+      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Internal)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern privateRegionName = Pattern.compile(\n+      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438|Private)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern eventHandlersRegionName = Pattern.compile(\n+      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439|EventHandlers)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern formEventHandlersRegionName = Pattern.compile(\n+      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b|FormEventHandlers)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern formHeaderItemsEventHandlersRegionName = Pattern.compile(\n+      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b|FormHeaderItemsEventHandlers)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern formTableItemsEventHandlersRegionName = Pattern.compile(\n+      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0422\u0430\u0431\u043b\u0438\u0446\u044b\u0424\u043e\u0440\u043c\u044b|FormTableItemsEventHandlers)[\\\\w]*$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern formCommandsEventHandlersRegionName = Pattern.compile(\n+      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b|FormCommandsEventHandlers)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern variablesRegionName = Pattern.compile(\n+      \"^(?:\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445|Variables)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    Pattern initializeRegionName = Pattern.compile(\n+      \"^(?:\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f|Initialize)$\",\n+      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+    );\n+\n+    if (moduleType == ModuleType.FormModule) {\n+      standardRegions.add(variablesRegionName);\n+      standardRegions.add(formEventHandlersRegionName);\n+      standardRegions.add(formHeaderItemsEventHandlersRegionName);\n+      standardRegions.add(formTableItemsEventHandlersRegionName);\n+      standardRegions.add(formCommandsEventHandlersRegionName);\n+    }\n+\n+    if (moduleType == ModuleType.ObjectModule\n+      || moduleType == ModuleType.RecordSetModule\n+      || moduleType == ModuleType.ValueManagerModule) {\n+      standardRegions.add(variablesRegionName);\n+      standardRegions.add(publicRegionName);\n+      standardRegions.add(eventHandlersRegionName);\n+      standardRegions.add(internalRegionName);\n+    }\n+\n+    if (moduleType == ModuleType.CommonModule) {\n+      standardRegions.add(publicRegionName);\n+      standardRegions.add(internalRegionName);\n+    }\n+\n+    if (moduleType == ModuleType.ApplicationModule\n+      || moduleType == ModuleType.ManagedApplicationModule\n+      || moduleType == ModuleType.OrdinaryApplicationModule) {\n+      standardRegions.add(variablesRegionName);\n+      standardRegions.add(publicRegionName);\n+      standardRegions.add(eventHandlersRegionName);\n+    }\n+\n+    if (moduleType == ModuleType.CommandModule\n+      || moduleType == ModuleType.SessionModule) {\n+      standardRegions.add(eventHandlersRegionName);\n+    }\n+\n+    if (moduleType == ModuleType.ExternalConnectionModule) {\n+      standardRegions.add(publicRegionName);\n+      standardRegions.add(eventHandlersRegionName);\n+    }\n+\n+    if (moduleType == ModuleType.ManagerModule) {\n+      standardRegions.add(publicRegionName);\n+      standardRegions.add(eventHandlersRegionName);\n+      standardRegions.add(internalRegionName);\n+    }\n+\n+    // \u0443 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\n+    standardRegions.add(privateRegionName);\n+\n+    if (moduleType == ModuleType.FormModule\n+      || moduleType == ModuleType.ObjectModule) {\n+      standardRegions.add(initializeRegionName);\n+    }\n+    return standardRegions;\n+  }\n+\n+  @Override\n+  public ParseTree visitFile(BSLParser.FileContext ctx) {\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n+    List<Range> methodRanges = documentContext.getMethods().stream()\n+      .map(MethodSymbol::getRange).collect(Collectors.toList());\n+    List<RegionSymbol> regions = documentContext.getRegions()\n+      .stream()\n+      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n+        Ranges.containsRange(methodRange,\n+          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n+      ))\n+      .collect(Collectors.toList());\n+\n+    // \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043b\u0438\u0448\u043d\u0438\u0445 FP, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n+    // \u0432\u0435\u0448\u0430\u0442\u044c \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u0436 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u043f\u0443\u0441\u0442\u044c \u0432\u0435\u0448\u0430\u0435\u0442\u0441\u044f \"CodeOutOfRegionDiagnostic\"\n+    if (regions.isEmpty()) {\n+      return ctx;\n+    }\n+\n+    ModuleType moduleType = documentContext\n+      .getServerContext()\n+      .getConfiguration()\n+      .getModuleType(documentContext.getUri().normalize());", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwODUzNA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364708534", "bodyText": "\u041e\u043f\u0435\u0447\u0430\u0442\u043a\u0430", "author": "theshadowco", "createdAt": "2020-01-09T12:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NzE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\ndeleted file mode 100644\nindex 23c7ae4f0..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,207 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class NonStandardRegionDiagnostic extends AbstractVisitorDiagnostic {\n-\n-  public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-  }\n-\n-  private static List<Pattern> getStandardRegions(ModuleType moduleType) {\n-\n-    List<Pattern> standardRegions = new ArrayList<>();\n-\n-    Pattern publicRegionName = Pattern.compile(\n-      \"^(?:\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Public)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern internalRegionName = Pattern.compile(\n-      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Internal)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern privateRegionName = Pattern.compile(\n-      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438|Private)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern eventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439|EventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b|FormEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formHeaderItemsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b|FormHeaderItemsEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formTableItemsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0422\u0430\u0431\u043b\u0438\u0446\u044b\u0424\u043e\u0440\u043c\u044b|FormTableItemsEventHandlers)[\\\\w]*$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formCommandsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b|FormCommandsEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern variablesRegionName = Pattern.compile(\n-      \"^(?:\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445|Variables)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern initializeRegionName = Pattern.compile(\n-      \"^(?:\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f|Initialize)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    if (moduleType == ModuleType.FormModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(formEventHandlersRegionName);\n-      standardRegions.add(formHeaderItemsEventHandlersRegionName);\n-      standardRegions.add(formTableItemsEventHandlersRegionName);\n-      standardRegions.add(formCommandsEventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ObjectModule\n-      || moduleType == ModuleType.RecordSetModule\n-      || moduleType == ModuleType.ValueManagerModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.CommonModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ApplicationModule\n-      || moduleType == ModuleType.ManagedApplicationModule\n-      || moduleType == ModuleType.OrdinaryApplicationModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.CommandModule\n-      || moduleType == ModuleType.SessionModule) {\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ExternalConnectionModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ManagerModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    // \u0443 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\n-    standardRegions.add(privateRegionName);\n-\n-    if (moduleType == ModuleType.FormModule\n-      || moduleType == ModuleType.ObjectModule) {\n-      standardRegions.add(initializeRegionName);\n-    }\n-    return standardRegions;\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n-    List<Range> methodRanges = documentContext.getMethods().stream()\n-      .map(MethodSymbol::getRange).collect(Collectors.toList());\n-    List<RegionSymbol> regions = documentContext.getRegions()\n-      .stream()\n-      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n-        Ranges.containsRange(methodRange,\n-          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n-      ))\n-      .collect(Collectors.toList());\n-\n-    // \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043b\u0438\u0448\u043d\u0438\u0445 FP, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    // \u0432\u0435\u0448\u0430\u0442\u044c \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u0436 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u043f\u0443\u0441\u0442\u044c \u0432\u0435\u0448\u0430\u0435\u0442\u0441\u044f \"CodeOutOfRegionDiagnostic\"\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    ModuleType moduleType = documentContext\n-      .getServerContext()\n-      .getConfiguration()\n-      .getModuleType(documentContext.getUri().normalize());\n-\n-    List<Pattern> standardRegions = getStandardRegions(moduleType);\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445\n-    regions.forEach((RegionSymbol region) -> {\n-      if (standardRegions.stream().noneMatch(regionName -> regionName.matcher(region.getName()).find())) {\n-        diagnosticStorage.addDiagnostic(\n-          Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-          info.getMessage(region.getName())\n-        );\n-      }\n-    });\n-\n-    return ctx;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NzQxNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364697417", "bodyText": "\u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u044e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u043d\u0430\u0434\u043e \u0432\u044b\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 \u0432 \u0441\u0442\u0430\u0442\u0438\u043a-\u043f\u043e\u043b\u044f. \u044d\u0442\u043e \u0434\u043e\u0440\u043e\u0433\u043e.", "author": "nixel2007", "createdAt": "2020-01-09T11:48:03Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class NonStandardRegionDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  private static List<Pattern> getStandardRegions(ModuleType moduleType) {\n+\n+    List<Pattern> standardRegions = new ArrayList<>();\n+\n+    Pattern publicRegionName = Pattern.compile(", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxMDU4Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364710583", "bodyText": "\u041f\u0440\u0438\u043d\u044f\u0442\u043e", "author": "theshadowco", "createdAt": "2020-01-09T12:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NzQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\ndeleted file mode 100644\nindex 23c7ae4f0..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,207 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class NonStandardRegionDiagnostic extends AbstractVisitorDiagnostic {\n-\n-  public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-  }\n-\n-  private static List<Pattern> getStandardRegions(ModuleType moduleType) {\n-\n-    List<Pattern> standardRegions = new ArrayList<>();\n-\n-    Pattern publicRegionName = Pattern.compile(\n-      \"^(?:\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Public)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern internalRegionName = Pattern.compile(\n-      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Internal)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern privateRegionName = Pattern.compile(\n-      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438|Private)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern eventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439|EventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b|FormEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formHeaderItemsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b|FormHeaderItemsEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formTableItemsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0422\u0430\u0431\u043b\u0438\u0446\u044b\u0424\u043e\u0440\u043c\u044b|FormTableItemsEventHandlers)[\\\\w]*$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formCommandsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b|FormCommandsEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern variablesRegionName = Pattern.compile(\n-      \"^(?:\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445|Variables)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern initializeRegionName = Pattern.compile(\n-      \"^(?:\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f|Initialize)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    if (moduleType == ModuleType.FormModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(formEventHandlersRegionName);\n-      standardRegions.add(formHeaderItemsEventHandlersRegionName);\n-      standardRegions.add(formTableItemsEventHandlersRegionName);\n-      standardRegions.add(formCommandsEventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ObjectModule\n-      || moduleType == ModuleType.RecordSetModule\n-      || moduleType == ModuleType.ValueManagerModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.CommonModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ApplicationModule\n-      || moduleType == ModuleType.ManagedApplicationModule\n-      || moduleType == ModuleType.OrdinaryApplicationModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.CommandModule\n-      || moduleType == ModuleType.SessionModule) {\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ExternalConnectionModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ManagerModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    // \u0443 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\n-    standardRegions.add(privateRegionName);\n-\n-    if (moduleType == ModuleType.FormModule\n-      || moduleType == ModuleType.ObjectModule) {\n-      standardRegions.add(initializeRegionName);\n-    }\n-    return standardRegions;\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n-    List<Range> methodRanges = documentContext.getMethods().stream()\n-      .map(MethodSymbol::getRange).collect(Collectors.toList());\n-    List<RegionSymbol> regions = documentContext.getRegions()\n-      .stream()\n-      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n-        Ranges.containsRange(methodRange,\n-          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n-      ))\n-      .collect(Collectors.toList());\n-\n-    // \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043b\u0438\u0448\u043d\u0438\u0445 FP, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    // \u0432\u0435\u0448\u0430\u0442\u044c \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u0436 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u043f\u0443\u0441\u0442\u044c \u0432\u0435\u0448\u0430\u0435\u0442\u0441\u044f \"CodeOutOfRegionDiagnostic\"\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    ModuleType moduleType = documentContext\n-      .getServerContext()\n-      .getConfiguration()\n-      .getModuleType(documentContext.getUri().normalize());\n-\n-    List<Pattern> standardRegions = getStandardRegions(moduleType);\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445\n-    regions.forEach((RegionSymbol region) -> {\n-      if (standardRegions.stream().noneMatch(regionName -> regionName.matcher(region.getName()).find())) {\n-        diagnosticStorage.addDiagnostic(\n-          Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-          info.getMessage(region.getName())\n-        );\n-      }\n-    });\n-\n-    return ctx;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Nzc0NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364697744", "bodyText": "\u043f\u0440\u0438\u0434\u0438\u0440\u0430\u044e\u0441\u044c, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0438 Set :)\n\u0442\u043e\u0433\u0434\u0430 \u043f\u043e\u0438\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0449\u0435. Set#contains", "author": "nixel2007", "createdAt": "2020-01-09T11:48:58Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  },\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n+)\n+public class NonStandardRegionDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  private static List<Pattern> getStandardRegions(ModuleType moduleType) {", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5ODg5MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364698890", "bodyText": "\u0430, \u0442\u0430\u043c \u043c\u0430\u0442\u0447\u0435\u0440\u2026 \u043d\u043e Set \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043c\u043e\u0436\u043d\u043e. :)", "author": "nixel2007", "createdAt": "2020-01-09T11:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Nzc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxMTMxMA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364711310", "bodyText": "\u0442\u044b \u0438\u043c\u0435\u0435\u0448\u044c \u0432\u0432\u0438\u0434\u0443 \u0441\u0442\u0430\u0442\u0438\u043a \u0441\u0435\u0442 \u043f\u043e\u043b\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c?", "author": "theshadowco", "createdAt": "2020-01-09T12:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Nzc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyMTY0NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364721644", "bodyText": "\u043d\u0435\u0442, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435", "author": "nixel2007", "createdAt": "2020-01-09T12:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Nzc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MDQ4Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364760483", "bodyText": "\u0412 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u044f \u0441\u0434\u0435\u043b\u0430\u043b, \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u044f \u0445\u043e\u0442\u0435\u043b \u0432 \u044d\u0442\u043e\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0442\u0438\u0441\u043a\u0435 \u0435\u0449\u0435 \u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u043b\u0438\u0441\u0442\u043e\u043c \u043c\u043e\u0436\u043d\u043e, \u043d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b (\u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e), \u0442\u043e \u0432\u043e\u0442 )", "author": "theshadowco", "createdAt": "2020-01-09T14:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Nzc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\ndeleted file mode 100644\nindex 23c7ae4f0..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,207 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class NonStandardRegionDiagnostic extends AbstractVisitorDiagnostic {\n-\n-  public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-  }\n-\n-  private static List<Pattern> getStandardRegions(ModuleType moduleType) {\n-\n-    List<Pattern> standardRegions = new ArrayList<>();\n-\n-    Pattern publicRegionName = Pattern.compile(\n-      \"^(?:\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Public)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern internalRegionName = Pattern.compile(\n-      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Internal)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern privateRegionName = Pattern.compile(\n-      \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438|Private)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern eventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439|EventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b|FormEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formHeaderItemsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b|FormHeaderItemsEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formTableItemsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0422\u0430\u0431\u043b\u0438\u0446\u044b\u0424\u043e\u0440\u043c\u044b|FormTableItemsEventHandlers)[\\\\w]*$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern formCommandsEventHandlersRegionName = Pattern.compile(\n-      \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b|FormCommandsEventHandlers)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern variablesRegionName = Pattern.compile(\n-      \"^(?:\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445|Variables)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    Pattern initializeRegionName = Pattern.compile(\n-      \"^(?:\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f|Initialize)$\",\n-      Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-    );\n-\n-    if (moduleType == ModuleType.FormModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(formEventHandlersRegionName);\n-      standardRegions.add(formHeaderItemsEventHandlersRegionName);\n-      standardRegions.add(formTableItemsEventHandlersRegionName);\n-      standardRegions.add(formCommandsEventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ObjectModule\n-      || moduleType == ModuleType.RecordSetModule\n-      || moduleType == ModuleType.ValueManagerModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.CommonModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ApplicationModule\n-      || moduleType == ModuleType.ManagedApplicationModule\n-      || moduleType == ModuleType.OrdinaryApplicationModule) {\n-      standardRegions.add(variablesRegionName);\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.CommandModule\n-      || moduleType == ModuleType.SessionModule) {\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ExternalConnectionModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-    }\n-\n-    if (moduleType == ModuleType.ManagerModule) {\n-      standardRegions.add(publicRegionName);\n-      standardRegions.add(eventHandlersRegionName);\n-      standardRegions.add(internalRegionName);\n-    }\n-\n-    // \u0443 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\n-    standardRegions.add(privateRegionName);\n-\n-    if (moduleType == ModuleType.FormModule\n-      || moduleType == ModuleType.ObjectModule) {\n-      standardRegions.add(initializeRegionName);\n-    }\n-    return standardRegions;\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n-    List<Range> methodRanges = documentContext.getMethods().stream()\n-      .map(MethodSymbol::getRange).collect(Collectors.toList());\n-    List<RegionSymbol> regions = documentContext.getRegions()\n-      .stream()\n-      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n-        Ranges.containsRange(methodRange,\n-          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n-      ))\n-      .collect(Collectors.toList());\n-\n-    // \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043b\u0438\u0448\u043d\u0438\u0445 FP, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    // \u0432\u0435\u0448\u0430\u0442\u044c \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u0436 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u043f\u0443\u0441\u0442\u044c \u0432\u0435\u0448\u0430\u0435\u0442\u0441\u044f \"CodeOutOfRegionDiagnostic\"\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    ModuleType moduleType = documentContext\n-      .getServerContext()\n-      .getConfiguration()\n-      .getModuleType(documentContext.getUri().normalize());\n-\n-    List<Pattern> standardRegions = getStandardRegions(moduleType);\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445\n-    regions.forEach((RegionSymbol region) -> {\n-      if (standardRegions.stream().noneMatch(regionName -> regionName.matcher(region.getName()).find())) {\n-        diagnosticStorage.addDiagnostic(\n-          Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-          info.getMessage(region.getName())\n-        );\n-      }\n-    });\n-\n-    return ctx;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5ODAyMA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364698020", "bodyText": "\ud83d\udc4d \u0437\u0430 intern", "author": "nixel2007", "createdAt": "2020-01-09T11:49:48Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/metadata/DiagnosticInfo.java", "diffHunk": "@@ -113,6 +113,10 @@ public String getResourceString(String key) {\n     return ResourceBundle.getBundle(diagnosticClass.getName(), locale, new UTF8Control()).getString(key).intern();\n   }\n \n+  public String getResourceString(String key, Object... args) {\n+    return String.format(getResourceString(key), args).intern();", "originalCommit": "53df2a5ccb9b0191679a76323f4b1490280c3021", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/metadata/DiagnosticInfo.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/metadata/DiagnosticInfo.java\nindex 0624adc66..9a8ac0333 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/metadata/DiagnosticInfo.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/metadata/DiagnosticInfo.java\n\n@@ -113,10 +113,6 @@ public class DiagnosticInfo {\n     return ResourceBundle.getBundle(diagnosticClass.getName(), locale, new UTF8Control()).getString(key).intern();\n   }\n \n-  public String getResourceString(String key, Object... args) {\n-    return String.format(getResourceString(key), args).intern();\n-  }\n-\n   public DiagnosticType getType() {\n     return diagnosticMetadata.type();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNDA0Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364724042", "bodyText": "\u043e\u043d\u0438 \u043f\u043e\u0445\u043e\u0434\u0443 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0431\u0443\u0434\u0443\u0442 \u0442\u0443\u0434\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0435\u0437\u0434\u0438\u0442\u044c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0430\u0432\u0442\u043e\u0440\u0430 :D", "author": "nixel2007", "createdAt": "2020-01-09T12:57:53Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java", "diffHunk": "@@ -61,29 +62,29 @@\n \n public class DocumentContext {\n \n-  private String content;\n-  private ServerContext context;\n   private final URI uri;\n   private final FileType fileType;\n+  private String content;\n+  private ServerContext context;\n   private Tokenizer tokenizer;\n \n   private ReentrantLock computeLock = new ReentrantLock();\n \n   private Lazy<String[]> contentList = new Lazy<>(this::computeContentList, computeLock);\n   private Lazy<ModuleType> moduleType = new Lazy<>(this::computeModuleType, computeLock);\n-  private Lazy<MetricStorage> metrics = new Lazy<>(this::computeMetrics, computeLock);\n   private Lazy<List<RegionSymbol>> regions = new Lazy<>(this::computeRegions, computeLock);\n   private Lazy<List<MethodSymbol>> methods = new Lazy<>(this::computeMethods, computeLock);\n-  private Lazy<List<RegionSymbol>> regionsFlat = new Lazy<>(this::computeRegionsFlat, computeLock);\n   private Lazy<CognitiveComplexityComputer.Data> cognitiveComplexityData\n     = new Lazy<>(this::computeCognitiveComplexity, computeLock);\n   private Lazy<DiagnosticIgnoranceComputer.Data> diagnosticIgnoranceData\n     = new Lazy<>(this::computeDiagnosticIgnorance, computeLock);\n-  private Lazy<Map<BSLParserRuleContext, MethodSymbol>> nodeToMethodsMap\n-    = new Lazy<>(this::computeNodeToMethodsMap, computeLock);\n-\n   private boolean adjustingRegions;\n   private boolean regionsAdjusted;\n+  private Lazy<MetricStorage> metrics = new Lazy<>(this::computeMetrics, computeLock);", "originalCommit": "b80d6fa54cb0967b7068c05dc080863c42bd27fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NjQyNg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364756426", "bodyText": "\u044f \u043d\u0430\u0436\u0430\u043b \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e Ctrl + L :)\n\u041d\u0430\u0434\u043e \u043a\u0430\u043a-\u0442\u043e \u0435\u0434\u0438\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438\u0434\u0435\u0438 \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u0442\u044c", "author": "theshadowco", "createdAt": "2020-01-09T14:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNDA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1ODQ0Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364758446", "bodyText": "\u0425\u043c. \u042f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u044e \u043f\u043e ctrl-alt-l :) \u0432\u0438\u0434\u0438\u043c\u043e, \u0432 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430.", "author": "nixel2007", "createdAt": "2020-01-09T14:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNDA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MTg0Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364761843", "bodyText": "\u044f \u043d\u0435\u0434\u043e\u043f\u0438\u0441\u0430\u043b, \u0442\u0430\u043a\u0436\u0435 ctrl+alt+l", "author": "theshadowco", "createdAt": "2020-01-09T14:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNDA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java\nindex 22ebf7bbe..8f73067e9 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java\n\n@@ -62,30 +61,30 @@ import static org.antlr.v4.runtime.Token.DEFAULT_CHANNEL;\n \n public class DocumentContext {\n \n-  private final URI uri;\n-  private final FileType fileType;\n   private String content;\n   private ServerContext context;\n+  private final URI uri;\n+  private final FileType fileType;\n   private Tokenizer tokenizer;\n \n   private ReentrantLock computeLock = new ReentrantLock();\n \n   private Lazy<String[]> contentList = new Lazy<>(this::computeContentList, computeLock);\n   private Lazy<ModuleType> moduleType = new Lazy<>(this::computeModuleType, computeLock);\n+  private Lazy<MetricStorage> metrics = new Lazy<>(this::computeMetrics, computeLock);\n   private Lazy<List<RegionSymbol>> regions = new Lazy<>(this::computeRegions, computeLock);\n   private Lazy<List<MethodSymbol>> methods = new Lazy<>(this::computeMethods, computeLock);\n+  private Lazy<List<RegionSymbol>> regionsFlat = new Lazy<>(this::computeRegionsFlat, computeLock);\n   private Lazy<CognitiveComplexityComputer.Data> cognitiveComplexityData\n     = new Lazy<>(this::computeCognitiveComplexity, computeLock);\n   private Lazy<DiagnosticIgnoranceComputer.Data> diagnosticIgnoranceData\n     = new Lazy<>(this::computeDiagnosticIgnorance, computeLock);\n-  private boolean adjustingRegions;\n-  private boolean regionsAdjusted;\n-  private Lazy<MetricStorage> metrics = new Lazy<>(this::computeMetrics, computeLock);\n-  private Lazy<List<RegionSymbol>> regionsFlat = new Lazy<>(this::computeRegionsFlat, computeLock);\n-  private Lazy<List<RegionSymbol>> fileLevelRegions = new Lazy<>(this::computeFileLevelRegions, computeLock);\n   private Lazy<Map<BSLParserRuleContext, MethodSymbol>> nodeToMethodsMap\n     = new Lazy<>(this::computeNodeToMethodsMap, computeLock);\n \n+  private boolean adjustingRegions;\n+  private boolean regionsAdjusted;\n+\n   public DocumentContext(URI uri, String content, ServerContext context) {\n     final Path absolutePath = Absolute.path(uri);\n     this.uri = absolutePath.toUri();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNTEwNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r364725105", "bodyText": "\u043a\u043b\u0435\u0432\u043e \u0436\u0435! :)", "author": "nixel2007", "createdAt": "2020-01-09T13:00:39Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java", "diffHunk": "@@ -168,16 +168,7 @@ public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n   @Override\n   public ParseTree visitFile(BSLParser.FileContext ctx) {\n \n-    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \"\u0447\u0435\u0441\u0442\u043d\u044b\u0435\" \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n-    List<Range> methodRanges = documentContext.getMethods().stream()\n-      .map(MethodSymbol::getRange).collect(Collectors.toList());\n-    List<RegionSymbol> regions = documentContext.getRegions()\n-      .stream()\n-      .filter(region -> methodRanges.stream().noneMatch(methodRange ->\n-        Ranges.containsRange(methodRange,\n-          Ranges.create(region.getStartNode().getStart(), region.getEndNode().getStop()))\n-      ))\n-      .collect(Collectors.toList());\n+    List<RegionSymbol> regions = documentContext.getFileLevelRegions();", "originalCommit": "b80d6fa54cb0967b7068c05dc080863c42bd27fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\ndeleted file mode 100644\nindex 5b6601b34..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/NonStandardRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,198 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.MethodSymbol;\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class NonStandardRegionDiagnostic extends AbstractVisitorDiagnostic {\n-\n-  private static final Pattern PUBLIC_REGION_NAME = Pattern.compile(\n-    \"^(?:\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Public)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern INTERNAL_REGION_NAME = Pattern.compile(\n-    \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441|Internal)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern PRIVATE_REGION_NAME = Pattern.compile(\n-    \"^(?:\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438|Private)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern EVENT_HANDLERS_REGION_NAME = Pattern.compile(\n-    \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439|EventHandlers)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern FORM_EVENT_HANDLERS_REGION_NAME = Pattern.compile(\n-    \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b|FormEventHandlers)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern FORM_HEADER_ITEMS_EVENT_HANDLERS_REGION_NAME = Pattern.compile(\n-    \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b|FormHeaderItemsEventHandlers)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern FORM_TABLE_ITEMS_EVENT_HANDLERS_REGION_NAME = Pattern.compile(\n-    \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0422\u0430\u0431\u043b\u0438\u0446\u044b\u0424\u043e\u0440\u043c\u044b|FormTableItemsEventHandlers)[\\\\w]*$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern FORM_COMMANDS_EVENT_HANDLERS_REGION_NAME = Pattern.compile(\n-    \"^(?:\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b|FormCommandsEventHandlers)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern VARIABLES_REGION_NAME = Pattern.compile(\n-    \"^(?:\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445|Variables)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  private static final Pattern INITIALIZE_REGION_NAME = Pattern.compile(\n-    \"^(?:\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f|Initialize)$\",\n-    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n-  );\n-\n-  public NonStandardRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-  }\n-\n-  private static List<Pattern> getStandardRegions(ModuleType moduleType) {\n-\n-    List<Pattern> standardRegions = new ArrayList<>();\n-\n-    if (moduleType == ModuleType.FormModule) {\n-      standardRegions.add(VARIABLES_REGION_NAME);\n-      standardRegions.add(FORM_EVENT_HANDLERS_REGION_NAME);\n-      standardRegions.add(FORM_HEADER_ITEMS_EVENT_HANDLERS_REGION_NAME);\n-      standardRegions.add(FORM_TABLE_ITEMS_EVENT_HANDLERS_REGION_NAME);\n-      standardRegions.add(FORM_COMMANDS_EVENT_HANDLERS_REGION_NAME);\n-    }\n-\n-    if (moduleType == ModuleType.ObjectModule\n-      || moduleType == ModuleType.RecordSetModule\n-      || moduleType == ModuleType.ValueManagerModule) {\n-      standardRegions.add(VARIABLES_REGION_NAME);\n-      standardRegions.add(PUBLIC_REGION_NAME);\n-      standardRegions.add(EVENT_HANDLERS_REGION_NAME);\n-      standardRegions.add(INTERNAL_REGION_NAME);\n-    }\n-\n-    if (moduleType == ModuleType.CommonModule) {\n-      standardRegions.add(PUBLIC_REGION_NAME);\n-      standardRegions.add(INTERNAL_REGION_NAME);\n-    }\n-\n-    if (moduleType == ModuleType.ApplicationModule\n-      || moduleType == ModuleType.ManagedApplicationModule\n-      || moduleType == ModuleType.OrdinaryApplicationModule) {\n-      standardRegions.add(VARIABLES_REGION_NAME);\n-      standardRegions.add(PUBLIC_REGION_NAME);\n-      standardRegions.add(EVENT_HANDLERS_REGION_NAME);\n-    }\n-\n-    if (moduleType == ModuleType.CommandModule\n-      || moduleType == ModuleType.SessionModule) {\n-      standardRegions.add(EVENT_HANDLERS_REGION_NAME);\n-    }\n-\n-    if (moduleType == ModuleType.ExternalConnectionModule) {\n-      standardRegions.add(PUBLIC_REGION_NAME);\n-      standardRegions.add(EVENT_HANDLERS_REGION_NAME);\n-    }\n-\n-    if (moduleType == ModuleType.ManagerModule) {\n-      standardRegions.add(PUBLIC_REGION_NAME);\n-      standardRegions.add(EVENT_HANDLERS_REGION_NAME);\n-      standardRegions.add(INTERNAL_REGION_NAME);\n-    }\n-\n-    // \u0443 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\n-    standardRegions.add(PRIVATE_REGION_NAME);\n-\n-    if (moduleType == ModuleType.FormModule\n-      || moduleType == ModuleType.ObjectModule) {\n-      standardRegions.add(INITIALIZE_REGION_NAME);\n-    }\n-    return standardRegions;\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    List<RegionSymbol> regions = documentContext.getFileLevelRegions();\n-\n-    // \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043b\u0438\u0448\u043d\u0438\u0445 FP, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    // \u0432\u0435\u0448\u0430\u0442\u044c \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u0436 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c, \u043f\u0443\u0441\u0442\u044c \u0432\u0435\u0448\u0430\u0435\u0442\u0441\u044f \"CodeOutOfRegionDiagnostic\"\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    ModuleType moduleType = documentContext\n-      .getServerContext()\n-      .getConfiguration()\n-      .getModuleType(documentContext.getUri());\n-\n-    List<Pattern> standardRegions = getStandardRegions(moduleType);\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445\n-    regions.forEach((RegionSymbol region) -> {\n-      if (standardRegions.stream().noneMatch(regionName -> regionName.matcher(region.getName()).find())) {\n-        diagnosticStorage.addDiagnostic(\n-          Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-          info.getMessage(region.getName())\n-        );\n-      }\n-    });\n-\n-    return ctx;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjQ1NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r365676455", "bodyText": "scope BSL only. \u0410 \u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432 \u043e\u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u0432\u0435\u0440\u0435\u0449\u0430\u0442\u044c...", "author": "asosnoviy", "createdAt": "2020-01-13T08:02:12Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(", "originalCommit": "88ccecf32de78aaf4adbd71c6736d1fc945cd4a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjY1NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r365676654", "bodyText": "\u0418\u043b\u0438 COMPATIBILITY_MODE_8_3_1 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e BSL only?", "author": "asosnoviy", "createdAt": "2020-01-13T08:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4ODgwMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r365688802", "bodyText": "\u043d\u0435\u0442, \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u0442. \u043d\u043e \u043f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0430\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0432 \u043e\u0441\u043a\u0440\u0438\u043f\u0442\u0435?", "author": "nixel2007", "createdAt": "2020-01-13T08:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2NTY2MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r366165660", "bodyText": "\u0441\u0447\u0430\u0441 \u043f\u0440\u043e\u0439\u0434\u0443\u0441\u044c \u0438 \u0441\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u044e \u0441\u043a\u043e\u0443\u043f, \u0442\u0430\u043c \u0433\u0434\u0435 \u044f\u0432\u043d\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432 OS", "author": "theshadowco", "createdAt": "2020-01-14T06:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE3ODYyMQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r366178621", "bodyText": "\u043d\u0435\u0442, \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u0442. \u043d\u043e \u043f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0430\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0432 \u043e\u0441\u043a\u0440\u0438\u043f\u0442\u0435?\n\n\u042d\u0442\u043e \u044f \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0432\u044b\u0431\u0440\u0430\u043b. \u041d\u043e \u0438\u043c\u0445\u043e \u043d\u0430 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432 \u043e\u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u0432\u043e\u043e\u0431\u0449\u0435 \u043f\u043e\u0444\u0438\u0433.", "author": "asosnoviy", "createdAt": "2020-01-14T07:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5MjE2Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r366192166", "bodyText": "\u0414\u043b\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a \"\u041a\u043e\u0434 \u0432\u043d\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438\" \u0438 \"\u041d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438\" \u044f \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043e\u043d\u043b\u0438 BSL, \u0430 \u0434\u0443\u0431\u043b\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043e\u0441\u0442\u0430\u0432\u0438\u043b \u0434\u043b\u044f \u0432\u0441\u0435\u0445", "author": "theshadowco", "createdAt": "2020-01-14T07:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxNjYxNQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/788#discussion_r366216615", "bodyText": "\u041c\u043d\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u0433\u0440\u0443\u0441\u0442\u043d\u043e, \u043d\u0443 \u0434\u0430 \u043b\u0430\u0434\u043d\u043e.", "author": "nixel2007", "createdAt": "2020-01-14T08:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY3NjQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c147f34239f6628acb0f4ae4ec710bddf7165120", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\ndeleted file mode 100644\nindex 34935b927..000000000\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DuplicateRegionDiagnostic.java\n+++ /dev/null\n\n@@ -1,120 +0,0 @@\n-/*\n- * This file is a part of BSL Language Server.\n- *\n- * Copyright \u00a9 2018-2020\n- * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n- *\n- * SPDX-License-Identifier: LGPL-3.0-or-later\n- *\n- * BSL Language Server is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3.0 of the License, or (at your option) any later version.\n- *\n- * BSL Language Server is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public\n- * License along with BSL Language Server.\n- */\n-package com.github._1c_syntax.bsl.languageserver.diagnostics;\n-\n-import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n-import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n-import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n-import com.github._1c_syntax.bsl.languageserver.utils.RelatedInformation;\n-import com.github._1c_syntax.bsl.parser.BSLParser;\n-import org.antlr.v4.runtime.tree.ParseTree;\n-import org.eclipse.lsp4j.DiagnosticRelatedInformation;\n-import org.eclipse.lsp4j.Range;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.TreeMap;\n-import java.util.stream.Collectors;\n-\n-@DiagnosticMetadata(\n-  type = DiagnosticType.CODE_SMELL,\n-  severity = DiagnosticSeverity.INFO,\n-  minutesToFix = 1,\n-  tags = {\n-    DiagnosticTag.STANDARD\n-  },\n-  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1\n-)\n-public class DuplicateRegionDiagnostic extends AbstractVisitorDiagnostic {\n-  private final Map<String, String> regionNames = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-\n-  public DuplicateRegionDiagnostic(DiagnosticInfo info) {\n-    super(info);\n-    regionNames.put(\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Public\");\n-    regionNames.put(\"Public\", \"Public\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\", \"Internal\");\n-    regionNames.put(\"Internal\", \"Internal\");\n-    regionNames.put(\"\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\u0418\u0424\u0443\u043d\u043a\u0446\u0438\u0438\", \"Private\");\n-    regionNames.put(\"Private\", \"Private\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\", \"EventHandlers\");\n-    regionNames.put(\"EventHandlers\", \"EventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u0424\u043e\u0440\u043c\u044b\", \"FormEventHandlers\");\n-    regionNames.put(\"FormEventHandlers\", \"FormEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u0421\u043e\u0431\u044b\u0442\u0438\u0439\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\u0428\u0430\u043f\u043a\u0438\u0424\u043e\u0440\u043c\u044b\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"FormHeaderItemsEventHandlers\", \"FormHeaderItemsEventHandlers\");\n-    regionNames.put(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\u041a\u043e\u043c\u0430\u043d\u0434\u0424\u043e\u0440\u043c\u044b\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"FormCommandsEventHandlers\", \"FormCommandsEventHandlers\");\n-    regionNames.put(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\", \"Variables\");\n-    regionNames.put(\"Variables\", \"Variables\");\n-    regionNames.put(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\", \"Initialize\");\n-    regionNames.put(\"Initialize\", \"Initialize\");\n-  }\n-\n-  @Override\n-  public ParseTree visitFile(BSLParser.FileContext ctx) {\n-\n-    List<RegionSymbol> regions = documentContext.getFileLevelRegions();\n-\n-    // \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\n-    if (regions.isEmpty()) {\n-      return ctx;\n-    }\n-\n-    // \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n-    regions.stream()\n-      .collect(Collectors.groupingBy(regionSymbol ->\n-        regionNames.getOrDefault(regionSymbol.getName(), regionSymbol.getName())))\n-      .forEach((String name, List<RegionSymbol> regionsList) -> {\n-          if (regionsList.size() > 1) {\n-\n-            List<DiagnosticRelatedInformation> relatedInformation = new ArrayList<>();\n-            RegionSymbol currentRegion = regionsList.get(0);\n-            Range currentRange = Ranges.create(currentRegion.getStartNode().getStart(),\n-              currentRegion.getStartNode().getStop());\n-\n-            regionsList.stream()\n-              .map(region ->\n-                RelatedInformation.create(\n-                  documentContext.getUri(),\n-                  Ranges.create(region.getStartNode().getStart(), region.getStartNode().getStop()),\n-                  \"+1\"\n-                )\n-              )\n-              .collect(Collectors.toCollection(() -> relatedInformation));\n-\n-            diagnosticStorage.addDiagnostic(\n-              currentRange,\n-              info.getMessage(currentRegion.getName()),\n-              relatedInformation);\n-          }\n-        }\n-      );\n-\n-    return ctx;\n-  }\n-}\n"}}, {"oid": "c147f34239f6628acb0f4ae4ec710bddf7165120", "url": "https://github.com/1c-syntax/bsl-language-server/commit/c147f34239f6628acb0f4ae4ec710bddf7165120", "message": "#498\n\n\u0421\u043e\u0437\u0434\u0430\u043d\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u041a\u043e\u0434 \u0432\u043d\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438", "committedDate": "2020-01-14T06:08:11Z", "type": "commit"}, {"oid": "ed9e85a169b1e61659ee1bd1f0f21c69dc48e55e", "url": "https://github.com/1c-syntax/bsl-language-server/commit/ed9e85a169b1e61659ee1bd1f0f21c69dc48e55e", "message": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n\n - \u0414\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432\n - \u041d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b", "committedDate": "2020-01-14T06:08:12Z", "type": "commit"}, {"oid": "029dbe8d88adf301db7530ba28ec40b137aa558c", "url": "https://github.com/1c-syntax/bsl-language-server/commit/029dbe8d88adf301db7530ba28ec40b137aa558c", "message": "fix CR", "committedDate": "2020-01-14T06:08:12Z", "type": "commit"}, {"oid": "698e40d93ec9063c5832fdaa5c23f44b12201f67", "url": "https://github.com/1c-syntax/bsl-language-server/commit/698e40d93ec9063c5832fdaa5c23f44b12201f67", "message": "\u0412 DocumentContext \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f", "committedDate": "2020-01-14T06:08:12Z", "type": "commit"}, {"oid": "f1635f56e7abb4fce3b9c258349ea1cdf0a7175c", "url": "https://github.com/1c-syntax/bsl-language-server/commit/f1635f56e7abb4fce3b9c258349ea1cdf0a7175c", "message": "ArrayList 2 Set", "committedDate": "2020-01-14T06:08:12Z", "type": "commit"}, {"oid": "a0366a3bc67c20663b33331f588be092016dd7ef", "url": "https://github.com/1c-syntax/bsl-language-server/commit/a0366a3bc67c20663b33331f588be092016dd7ef", "message": "\u0423\u0434\u0430\u043b\u0438\u043b \u043b\u0438\u0448\u043d\u0438\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u044b", "committedDate": "2020-01-14T06:08:12Z", "type": "commit"}, {"oid": "9edb5d884fb6c824293c0af819d2e4728cc0e254", "url": "https://github.com/1c-syntax/bsl-language-server/commit/9edb5d884fb6c824293c0af819d2e4728cc0e254", "message": "\u0421\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430 scope \u0434\u043b\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a", "committedDate": "2020-01-14T07:54:59Z", "type": "commit"}, {"oid": "9edb5d884fb6c824293c0af819d2e4728cc0e254", "url": "https://github.com/1c-syntax/bsl-language-server/commit/9edb5d884fb6c824293c0af819d2e4728cc0e254", "message": "\u0421\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430 scope \u0434\u043b\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a", "committedDate": "2020-01-14T07:54:59Z", "type": "forcePushed"}]}