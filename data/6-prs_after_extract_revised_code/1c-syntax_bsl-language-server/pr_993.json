{"pr_number": 993, "pr_title": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \"\u0418\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\"", "pr_createdAt": "2020-03-11T23:01:17Z", "pr_url": "https://github.com/1c-syntax/bsl-language-server/pull/993", "timeline": [{"oid": "f891c64f46e99269e3ad38b066fac4b757bb16b2", "url": "https://github.com/1c-syntax/bsl-language-server/commit/f891c64f46e99269e3ad38b066fac4b757bb16b2", "message": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \"\u0418\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\"", "committedDate": "2020-03-11T22:56:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNTA2MQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391435061", "bodyText": "\u043d\u0435 \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c jar-\u0444\u0430\u0439\u043b \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0432 VSC? \u041d\u0435 \u043f\u0430\u0434\u0430\u0435\u0442 \u043f\u0440\u0438 \u043d\u0430\u0431\u043e\u0440\u0435?\n\u0415\u0441\u043b\u0438 \u043f\u0430\u0434\u0430\u0435\u0442, \u0442\u043e \u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 ctx.subName() \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0435 \u043d\u0430 null.", "author": "nixel2007", "createdAt": "2020-03-12T07:11:49Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 3,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  }\n+\n+)\n+public class FunctionNameStartWithGetDiagnostic extends AbstractVisitorDiagnostic {\n+  private static final Pattern get = Pattern.compile(\n+    \"^(\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c|get).*$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+  );\n+\n+  public FunctionNameStartWithGetDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitFuncDeclaration(BSLParser.FuncDeclarationContext ctx) {\n+\n+\n+\n+    if (get.matcher(ctx.subName().getText()).matches()) {", "originalCommit": "f891c64f46e99269e3ad38b066fac4b757bb16b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "866fd8212160ac42ea618b398af41b82086a2714", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\nsimilarity index 82%\nrename from src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java\nrename to src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\nindex 1a5c46c38..aae26706a 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\n\n@@ -40,26 +40,30 @@ import java.util.regex.Pattern;\n   }\n \n )\n-public class FunctionNameStartWithGetDiagnostic extends AbstractVisitorDiagnostic {\n+public class FunctionNameStartsWithGetDiagnostic extends AbstractVisitorDiagnostic {\n   private static final Pattern get = Pattern.compile(\n-    \"^(\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c|get).*$\",\n+    \"^\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c.*$\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n   );\n \n-  public FunctionNameStartWithGetDiagnostic(DiagnosticInfo info) {\n+  public FunctionNameStartsWithGetDiagnostic(DiagnosticInfo info) {\n     super(info);\n   }\n \n   @Override\n   public ParseTree visitFuncDeclaration(BSLParser.FuncDeclarationContext ctx) {\n \n+    BSLParser.SubNameContext subName = ctx.subName();\n \n+    if (subName == null) {\n+      return ctx;\n+    }\n \n-    if (get.matcher(ctx.subName().getText()).matches()) {\n-      diagnosticStorage.addDiagnostic(ctx.subName());\n+    if (get.matcher(subName.getText()).matches()) {\n+      diagnosticStorage.addDiagnostic(subName);\n     }\n \n-    return super.visitFuncDeclaration(ctx);\n+    return ctx;\n \n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNTQxNA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391435414", "bodyText": "\u0417\u0434\u0435\u0441\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c ctx, \u0431\u0435\u0437 \u0432\u044b\u0437\u043e\u0432\u0430 super, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0431\u0445\u043e\u0434 \u0434\u0435\u0442\u0435\u0439.", "author": "nixel2007", "createdAt": "2020-03-12T07:12:59Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 3,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  }\n+\n+)\n+public class FunctionNameStartWithGetDiagnostic extends AbstractVisitorDiagnostic {\n+  private static final Pattern get = Pattern.compile(\n+    \"^(\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c|get).*$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+  );\n+\n+  public FunctionNameStartWithGetDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitFuncDeclaration(BSLParser.FuncDeclarationContext ctx) {\n+\n+\n+\n+    if (get.matcher(ctx.subName().getText()).matches()) {\n+      diagnosticStorage.addDiagnostic(ctx.subName());\n+    }\n+\n+    return super.visitFuncDeclaration(ctx);", "originalCommit": "f891c64f46e99269e3ad38b066fac4b757bb16b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "866fd8212160ac42ea618b398af41b82086a2714", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\nsimilarity index 82%\nrename from src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java\nrename to src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\nindex 1a5c46c38..aae26706a 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\n\n@@ -40,26 +40,30 @@ import java.util.regex.Pattern;\n   }\n \n )\n-public class FunctionNameStartWithGetDiagnostic extends AbstractVisitorDiagnostic {\n+public class FunctionNameStartsWithGetDiagnostic extends AbstractVisitorDiagnostic {\n   private static final Pattern get = Pattern.compile(\n-    \"^(\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c|get).*$\",\n+    \"^\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c.*$\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n   );\n \n-  public FunctionNameStartWithGetDiagnostic(DiagnosticInfo info) {\n+  public FunctionNameStartsWithGetDiagnostic(DiagnosticInfo info) {\n     super(info);\n   }\n \n   @Override\n   public ParseTree visitFuncDeclaration(BSLParser.FuncDeclarationContext ctx) {\n \n+    BSLParser.SubNameContext subName = ctx.subName();\n \n+    if (subName == null) {\n+      return ctx;\n+    }\n \n-    if (get.matcher(ctx.subName().getText()).matches()) {\n-      diagnosticStorage.addDiagnostic(ctx.subName());\n+    if (get.matcher(subName.getText()).matches()) {\n+      diagnosticStorage.addDiagnostic(subName);\n     }\n \n-    return super.visitFuncDeclaration(ctx);\n+    return ctx;\n \n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNTk3Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391435972", "bodyText": "\u044d\u0442\u0438 \u0430\u0441\u0441\u0435\u0440\u0442\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 fluent-\u0441\u0442\u0438\u043b\u044c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f.\n\u041c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0442\u0440\u0435\u0442\u0438\u0439 assertThat \u0438 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0432\u0442\u043e\u0440\u043e\u0439 hasRange \u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e.", "author": "nixel2007", "createdAt": "2020-03-12T07:14:53Z", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class FunctionNameStartWithGetDiagnosticTest extends AbstractDiagnosticTest<FunctionNameStartWithGetDiagnostic> {\n+  FunctionNameStartWithGetDiagnosticTest() {\n+    super(FunctionNameStartWithGetDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics).hasSize(2);\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 8, 0, 25);\n+    assertThat(diagnostics, true)", "originalCommit": "f891c64f46e99269e3ad38b066fac4b757bb16b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "866fd8212160ac42ea618b398af41b82086a2714", "chunk": "diff --git a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnosticTest.java b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnosticTest.java\nsimilarity index 80%\nrename from src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnosticTest.java\nrename to src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnosticTest.java\nindex e51897bf4..1c66da2ae 100644\n--- a/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnosticTest.java\n+++ b/src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnosticTest.java\n\n@@ -28,9 +28,9 @@ import java.util.List;\n \n import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n \n-class FunctionNameStartWithGetDiagnosticTest extends AbstractDiagnosticTest<FunctionNameStartWithGetDiagnostic> {\n-  FunctionNameStartWithGetDiagnosticTest() {\n-    super(FunctionNameStartWithGetDiagnostic.class);\n+class FunctionNameStartsWithGetDiagnosticTest extends AbstractDiagnosticTest<FunctionNameStartsWithGetDiagnostic> {\n+  FunctionNameStartsWithGetDiagnosticTest() {\n+    super(FunctionNameStartsWithGetDiagnostic.class);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNzY4OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391437689", "bodyText": "\u0417\u0430\u0447\u0435\u043c \u043f\u0443\u0441\u0442\u044b \u0441\u0442\u0440\u043e\u043a\u0438?", "author": "theshadowco", "createdAt": "2020-03-12T07:20:09Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 3,\n+  tags = {\n+    DiagnosticTag.STANDARD\n+  }\n+\n+)\n+public class FunctionNameStartWithGetDiagnostic extends AbstractVisitorDiagnostic {\n+  private static final Pattern get = Pattern.compile(\n+    \"^(\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c|get).*$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+  );\n+\n+  public FunctionNameStartWithGetDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitFuncDeclaration(BSLParser.FuncDeclarationContext ctx) {\n+", "originalCommit": "f891c64f46e99269e3ad38b066fac4b757bb16b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0NjM4Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391446383", "bodyText": "\u043d\u0443 \u0432\u043e\u0442 \u0447\u0442\u043e \u0442\u044b, \u043f\u0440\u043e\u0441\u0438\u043b\u0438 \u0436\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435 \u043f\u0438\u043d\u0430\u0442\u044c)))", "author": "nixel2007", "createdAt": "2020-03-12T07:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1Mjg2Mg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391452862", "bodyText": "\u041c\u043c\u043c, \u044f \u0432 \u0434\u0436\u0430\u0432\u0430 \u043a\u043e\u0434 \u043a\u043e\u043d\u0432\u0435\u043d\u0448\u043e\u043d \u043d\u0435 \u0441\u0438\u043b\u0435\u043d, \u0442\u0443\u0442 \u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u043e\u0442\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430?)", "author": "sfaqer", "createdAt": "2020-03-12T08:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1MzQ2OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391453469", "bodyText": "\u0442\u0443\u0442 \u0440\u0435\u0447\u044c \u043f\u0440\u043e \u0442\u0440\u0438 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0434\u0440\u044f\u0434 \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 :)", "author": "nixel2007", "createdAt": "2020-03-12T08:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MDU2OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/993#discussion_r391470568", "bodyText": "\u0410\u0430\u0430\u0430, \u0443\u0432\u0438\u0434\u0435\u043b, \u0430\u0433\u0430, \u043f\u0440\u043e\u043c\u043e\u0440\u0433\u0430\u043b.", "author": "sfaqer", "createdAt": "2020-03-12T08:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQzNzY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "866fd8212160ac42ea618b398af41b82086a2714", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\nsimilarity index 82%\nrename from src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java\nrename to src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\nindex 1a5c46c38..aae26706a 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartWithGetDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/FunctionNameStartsWithGetDiagnostic.java\n\n@@ -40,26 +40,30 @@ import java.util.regex.Pattern;\n   }\n \n )\n-public class FunctionNameStartWithGetDiagnostic extends AbstractVisitorDiagnostic {\n+public class FunctionNameStartsWithGetDiagnostic extends AbstractVisitorDiagnostic {\n   private static final Pattern get = Pattern.compile(\n-    \"^(\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c|get).*$\",\n+    \"^\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c.*$\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n   );\n \n-  public FunctionNameStartWithGetDiagnostic(DiagnosticInfo info) {\n+  public FunctionNameStartsWithGetDiagnostic(DiagnosticInfo info) {\n     super(info);\n   }\n \n   @Override\n   public ParseTree visitFuncDeclaration(BSLParser.FuncDeclarationContext ctx) {\n \n+    BSLParser.SubNameContext subName = ctx.subName();\n \n+    if (subName == null) {\n+      return ctx;\n+    }\n \n-    if (get.matcher(ctx.subName().getText()).matches()) {\n-      diagnosticStorage.addDiagnostic(ctx.subName());\n+    if (get.matcher(subName.getText()).matches()) {\n+      diagnosticStorage.addDiagnostic(subName);\n     }\n \n-    return super.visitFuncDeclaration(ctx);\n+    return ctx;\n \n   }\n }\n"}}, {"oid": "866fd8212160ac42ea618b398af41b82086a2714", "url": "https://github.com/1c-syntax/bsl-language-server/commit/866fd8212160ac42ea618b398af41b82086a2714", "message": "\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043f\u043e \u0440\u0435\u0432\u044c\u044e", "committedDate": "2020-03-12T23:07:42Z", "type": "commit"}, {"oid": "f94b1558f3e7c1a1f32fcb81a877d0f6d5ca9684", "url": "https://github.com/1c-syntax/bsl-language-server/commit/f94b1558f3e7c1a1f32fcb81a877d0f6d5ca9684", "message": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u043f\u043e\u043c\u0435\u0442\u043a\u0443 \u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0444\u0430\u0439\u043b\u0435", "committedDate": "2020-03-16T09:35:21Z", "type": "commit"}, {"oid": "0bfa820e25021a04d5a81b5cd525c80400cb6bc0", "url": "https://github.com/1c-syntax/bsl-language-server/commit/0bfa820e25021a04d5a81b5cd525c80400cb6bc0", "message": "\u0414\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e", "committedDate": "2020-03-24T10:01:53Z", "type": "commit"}]}