{"pr_number": 1413, "pr_title": "\u0414\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u0442", "pr_createdAt": "2020-10-30T18:08:00Z", "pr_url": "https://github.com/1c-syntax/bsl-language-server/pull/1413", "timeline": [{"oid": "bb647f996a8148e403e729808325fc835f4353ea", "url": "https://github.com/1c-syntax/bsl-language-server/commit/bb647f996a8148e403e729808325fc835f4353ea", "message": "\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u0442\u044b \u043e\u0441\u043d. \u0444\u0430\u0439\u043b\u044b", "committedDate": "2020-10-30T17:48:41Z", "type": "commit"}, {"oid": "578c29e47411dabdf83925113112da29390c244f", "url": "https://github.com/1c-syntax/bsl-language-server/commit/578c29e47411dabdf83925113112da29390c244f", "message": "\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 gradlew precommit", "committedDate": "2020-10-30T17:53:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyODI4Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515828283", "bodyText": "\u0434\u0443\u043c\u0430\u044e, \u043c\u043e\u0436\u043d\u043e \u0435\u0449\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c BRAINOVERLOAD", "author": "nixel2007", "createdAt": "2020-11-02T09:08:57Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTAxMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517845012", "bodyText": "\u043a\u0441\u0442\u0430\u0442\u0438, \u0432 \u0438\u0448\u0443\u0437\u0435 \u0442\u0430\u043a \u0438 \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043e", "author": "theshadowco", "createdAt": "2020-11-05T07:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyODI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MTM3Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517971377", "bodyText": "\u0414\u043e\u0431\u0430\u0432\u043b\u044e. \u0423 \u0441\u043e\u0441\u0435\u0434\u043d\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0442\u044d\u0433\u0430 \u043d\u0435\u0442) \u041a\u0430\u0436\u0435\u0442\u0441\u044f, brainoverload \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \"\u0421\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u043a\u043e\u0434\u0430\" \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430, \u043d\u043e \u0432 \u0447\u0430\u0441\u0442\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043b\u0438\u0442\u0435\u0440\u0430\u043b \u0434\u0430\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043c\u0435\u0441\u0442\u0430\u0445, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 - \u0441\u0435\u0439\u0447\u0430\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u043d\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u043e \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e, \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0441\u043a\u043e\u0440\u0435\u0435 \u043d\u0435\u0442)", "author": "para11ax", "createdAt": "2020-11-05T11:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyODI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMDIxMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r518010212", "bodyText": "\u0430 \u0442\u044b \u0445\u043e\u0440\u043e\u0448! :)", "author": "theshadowco", "createdAt": "2020-11-05T12:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyODI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMDAxNg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515830016", "bodyText": "\u0437\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0442\u0438 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u043f\u0438\u0441\u043a\u0430.\n\u043b\u0443\u0447\u0448\u0435 \u0443 authorizedDates \u0443\u0431\u0440\u0430\u0442\u044c final (\u0434\u0430, \u0438\u0434\u0435\u044f \u0431\u0443\u0434\u0435\u0442 \u0440\u0443\u0433\u0430\u0442\u044c\u0441\u044f, \u043d\u043e \u044d\u0442\u043e\u0442 \u0432\u043e\u0440\u043d\u0438\u043d\u0433 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c), \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 Set (\u0442.\u043a. \u043d\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0438 Set \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0435\u0435), \u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u0435 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 HashSet \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u0433\u043e.\n\u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u043b\u044f\u043c\u0431\u0434\u0430\u043c\u0438 \u0438 \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b split \u0432 Arrays.stream, trim \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e map \u043d\u0430 \u0441\u0442\u0440\u0438\u043c\u0435, \u0430 \u043f\u043e\u0442\u043e\u043c \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u044d\u0442\u043e \u0432\u0441\u0435 \u0432 Set \u0447\u0435\u0440\u0435\u0437 Collectors.toSet.", "author": "nixel2007", "createdAt": "2020-11-02T09:12:04Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxNzc2NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r518017765", "bodyText": "\u043f\u0440\u0438\u043d\u044f\u0442\u043e", "author": "para11ax", "createdAt": "2020-11-05T12:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMDAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMTExOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515831119", "bodyText": "\u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434 \u043d\u0430\u043c\u0438 \u0434\u0430\u0442\u0430, \u0434\u0430?\n\u041f\u043e\u0447\u0435\u043c\u0443 \u043d\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043b\u0438\u0442\u0435\u0440\u0430\u043b \u0442\u0438\u043f\u0430 DATETIME \u0438\u0437 \u043f\u0430\u0440\u0441\u0435\u0440\u0430?", "author": "nixel2007", "createdAt": "2020-11-02T09:14:17Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMjMwNw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515832307", "bodyText": "\u0430\u0433\u0430, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442\u0430 \u044f \u043d\u0438\u0430\u0441\u0438\u043b\u0438\u043b :) \u043e\u0442\u0432\u0435\u0442 \u0432 \u043d\u0435\u043c, \u043f\u043e\u043d\u044f\u0442\u043d\u043e.", "author": "nixel2007", "createdAt": "2020-11-02T09:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMTExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMjk2Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515832967", "bodyText": "\"\\\\D\" \u0442\u043e\u0436\u0435 \u0432 \u0441\u0442\u0430\u0442\u0438\u043a \u0444\u0438\u043b\u0434 \u0441 \u0442\u0438\u043f\u043e\u043c Pattern. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043e\u043a - \u044d\u0442\u043e \u0434\u043e\u0440\u043e\u0433\u043e.", "author": "nixel2007", "createdAt": "2020-11-02T09:17:14Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())\n+      .ifPresent(this::checkExclAddDiagnostic);\n+\n+    return super.visitGlobalMethodCall(ctx);\n+  }\n+\n+  @Override\n+  public ParseTree visitConstValue(BSLParser.ConstValueContext ctx) {\n+    TerminalNode tNode = ctx.DATETIME();\n+    if (tNode != null) {\n+      checkExclAddDiagnostic(ctx);\n+    }\n+\n+    return ctx;\n+  }\n+\n+  private void checkExclAddDiagnostic(BSLParserRuleContext ctx){\n+    String checked = ctx.getText();\n+    if (checked != null && !isExcluded(checked)) {\n+      ParserRuleContext expression;\n+      if (ctx instanceof BSLParser.CallParamListContext){\n+        expression = ctx.getParent().getParent().getParent().getParent().getParent();\n+      }\n+      else {\n+        expression = ctx.getParent().getParent();\n+      }\n+      if (expression instanceof BSLParser.ExpressionContext\n+        && (!isAssignExpression((BSLParser.ExpressionContext) expression))) {\n+        diagnosticStorage.addDiagnostic(ctx.stop, info.getMessage(checked));\n+      }\n+    }\n+  }\n+\n+  private boolean isExcluded(String sIn) {\n+    String s = sIn.replaceAll(\"\\\\D\",\"\");", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MjM5OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517992399", "bodyText": "\u043f\u0440\u0438\u043d\u044f\u0442\u043e", "author": "para11ax", "createdAt": "2020-11-05T11:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMjk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMzI2Ng==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515833266", "bodyText": "\u0435\u0441\u043b\u0438 authorizedDates \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 Set, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0447\u0435\u0440\u0435\u0437 authorizedDates.contains. \u0441\u0435\u0439\u0447\u0430\u0441 \u0442\u043e\u0436\u0435 \u043c\u043e\u0436\u043d\u043e (\u0441 List), \u043d\u043e \u0441 Set \u0431\u0443\u0434\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435.", "author": "nixel2007", "createdAt": "2020-11-02T09:17:46Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())\n+      .ifPresent(this::checkExclAddDiagnostic);\n+\n+    return super.visitGlobalMethodCall(ctx);\n+  }\n+\n+  @Override\n+  public ParseTree visitConstValue(BSLParser.ConstValueContext ctx) {\n+    TerminalNode tNode = ctx.DATETIME();\n+    if (tNode != null) {\n+      checkExclAddDiagnostic(ctx);\n+    }\n+\n+    return ctx;\n+  }\n+\n+  private void checkExclAddDiagnostic(BSLParserRuleContext ctx){\n+    String checked = ctx.getText();\n+    if (checked != null && !isExcluded(checked)) {\n+      ParserRuleContext expression;\n+      if (ctx instanceof BSLParser.CallParamListContext){\n+        expression = ctx.getParent().getParent().getParent().getParent().getParent();\n+      }\n+      else {\n+        expression = ctx.getParent().getParent();\n+      }\n+      if (expression instanceof BSLParser.ExpressionContext\n+        && (!isAssignExpression((BSLParser.ExpressionContext) expression))) {\n+        diagnosticStorage.addDiagnostic(ctx.stop, info.getMessage(checked));\n+      }\n+    }\n+  }\n+\n+  private boolean isExcluded(String sIn) {\n+    String s = sIn.replaceAll(\"\\\\D\",\"\");\n+    for (String elem : this.authorizedDates) {", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAyMTE3Nw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r518021177", "bodyText": "\u043f\u0440\u0438\u043d\u044f\u0442\u043e", "author": "para11ax", "createdAt": "2020-11-05T12:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMzI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMzk4MA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515833980", "bodyText": "\u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u044e, \u0447\u0442\u043e \u0442\u0443\u0442 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f. \u0434\u043b\u044f assignment \u0435\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f \u0443\u0437\u043b\u0430. \u041c\u043e\u0436\u0435\u0448\u044c \u043f\u043e\u044f\u0441\u043d\u0438\u0442\u044c?", "author": "nixel2007", "createdAt": "2020-11-02T09:19:04Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())\n+      .ifPresent(this::checkExclAddDiagnostic);\n+\n+    return super.visitGlobalMethodCall(ctx);\n+  }\n+\n+  @Override\n+  public ParseTree visitConstValue(BSLParser.ConstValueContext ctx) {\n+    TerminalNode tNode = ctx.DATETIME();\n+    if (tNode != null) {\n+      checkExclAddDiagnostic(ctx);\n+    }\n+\n+    return ctx;\n+  }\n+\n+  private void checkExclAddDiagnostic(BSLParserRuleContext ctx){\n+    String checked = ctx.getText();\n+    if (checked != null && !isExcluded(checked)) {\n+      ParserRuleContext expression;\n+      if (ctx instanceof BSLParser.CallParamListContext){\n+        expression = ctx.getParent().getParent().getParent().getParent().getParent();\n+      }\n+      else {\n+        expression = ctx.getParent().getParent();\n+      }\n+      if (expression instanceof BSLParser.ExpressionContext\n+        && (!isAssignExpression((BSLParser.ExpressionContext) expression))) {\n+        diagnosticStorage.addDiagnostic(ctx.stop, info.getMessage(checked));\n+      }\n+    }\n+  }\n+\n+  private boolean isExcluded(String sIn) {\n+    String s = sIn.replaceAll(\"\\\\D\",\"\");\n+    for (String elem : this.authorizedDates) {\n+      if (s.compareTo(elem) == 0) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  private static boolean isAssignExpression(BSLParser.ExpressionContext expression) {", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE2MTc5OQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r519161799", "bodyText": "\u043f\u0438\u043d\u0433?", "author": "nixel2007", "createdAt": "2020-11-07T10:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMzk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTMzMw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517845333", "bodyText": "\u043e\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430 - \u044d\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043a\u043e\u0434\u044d\u043a\u0448\u0435\u043d \u0441\u0434\u0435\u043b\u0430\u0442\u044c )", "author": "theshadowco", "createdAt": "2020-11-05T07:41:51Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2NzEzMQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517967131", "bodyText": "\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u043d\u0430 \u043f\u043e\u0445\u043e\u0436\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 \u043f\u043e \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0447\u0438\u0441\u043b\u0430\u043c)  \u0421\u0434\u0435\u043b\u0430\u044e \u043a\u0430\u043a \u0432 issue 5 \u043c\u0438\u043d\u0443\u0442, \u043d\u043e \u0432 \u0436\u0438\u0437\u043d\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u043b\u0438 \u0442\u043e\u0442 \u043a\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0431\u0443\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u0441\u0440\u0430\u0437\u0443 \u043a\u0430\u043a \u0438\u0437 CI \u043f\u0440\u0438\u043b\u0435\u0442\u0435\u043b\u043e \u0430\u0432\u0442\u043e\u0440\u0443 \u0438 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c, \u0442\u043e 5 \u0432\u0440\u043e\u0434\u0435 \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0431\u043e\u0440", "author": "para11ax", "createdAt": "2020-11-05T11:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwOTY2Mw==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r518009663", "bodyText": "\u043d\u0443\u0436\u043d\u043e \u0435\u0449\u0435 \u0436 \u0442\u0435\u0441\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c\\\u043f\u0440\u043e\u0433\u043d\u0430\u0442\u044c, \u0442\u0430\u043a \u0447\u0442\u043e 5 \u043c\u0438\u043d\u0443\u0442.\n1 \u043c\u0438\u043d\u0443\u0442\u0430 - \u043d\u0443 \u044d\u0442\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u0442\u0440\u0438\u0432\u0438\u0430\u043b , \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438\u043b\u0438 \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0443 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c", "author": "theshadowco", "createdAt": "2020-11-05T12:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0Njg2NA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517846864", "bodyText": "\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0434 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0441\u0442\u043e\u0438\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0430 \u0442\u0430\u043a\u0436\u0435, \u043f\u043e \u043a\u043e\u043d\u0432\u0435\u043d\u0446\u0438\u0438, static final - \u044d\u0442\u043e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0438\u0445 \u0438\u043c\u044f \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u043f\u0438\u0448\u0435\u0442\u0441\u044f", "author": "theshadowco", "createdAt": "2020-11-05T07:45:06Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MjE4OA==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517992188", "bodyText": "\u043f\u0440\u0438\u043d\u044f\u0442\u043e", "author": "para11ax", "createdAt": "2020-11-05T11:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0Njg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0OTcwOQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517849709", "bodyText": "\u0437\u0434\u0435\u0441\u044c \u043e\u0431\u044b\u0433\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0434\u0430\u0442\u044b \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0430 \u043a\u0430\u043a \u0436\u0435\nMagicDate = Date(1985, 09, 26, 08, 15, 00);\nDeathDay = Date(3999, 12, 31);\nEmpty = Date(1, 1, 1);", "author": "theshadowco", "createdAt": "2020-11-05T07:51:28Z", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())", "originalCommit": "578c29e47411dabdf83925113112da29390c244f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MTU1NQ==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517991555", "bodyText": "\u043f\u043e \u0438\u0434\u0435\u0435 \u0442\u043e\u0436\u0435 \u043c\u043e\u0436\u043d\u043e, \u043d\u043e \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u043d\u0430 \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430", "author": "para11ax", "createdAt": "2020-11-05T11:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0OTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwODkxMg==", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r518008912", "bodyText": "\u0425\u043e\u0440\u043e\u0448\u0430\u044f \u043c\u044b\u0441\u043b\u044c \u043a\u0441\u0442\u0430\u0442\u0438... \u0434\u0430, \u0434\u0430\u0432\u0430\u0439 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c", "author": "theshadowco", "createdAt": "2020-11-05T12:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0OTcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "09118d1a1065e7d44bc30c714ad2bb062673f698", "chunk": "diff --git a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\nindex d5e3b28fd..7ed3a5f01 100644\n--- a/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n+++ b/src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java\n\n@@ -33,19 +33,21 @@ import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n \n @DiagnosticMetadata(\n   type = DiagnosticType.CODE_SMELL,\n   severity = DiagnosticSeverity.MINOR,\n-  minutesToFix = 1,\n+  minutesToFix = 5,\n   tags = {\n-    DiagnosticTag.BADPRACTICE\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.BRAINOVERLOAD\n   }\n \n )\n"}}, {"oid": "09118d1a1065e7d44bc30c714ad2bb062673f698", "url": "https://github.com/1c-syntax/bsl-language-server/commit/09118d1a1065e7d44bc30c714ad2bb062673f698", "message": "\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u0442\u044b - \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0432\u044c\u044e", "committedDate": "2020-11-05T13:14:38Z", "type": "commit"}, {"oid": "c88ca08df899b96adffbde7c79fc88451dd722c6", "url": "https://github.com/1c-syntax/bsl-language-server/commit/c88ca08df899b96adffbde7c79fc88451dd722c6", "message": "Merge branch 'develop' into feature/issue575", "committedDate": "2020-11-07T13:43:41Z", "type": "commit"}]}