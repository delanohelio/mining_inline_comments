{"pr_number": 10566, "pr_title": "Port over ES OpenCloseIndexIT tests.", "pr_createdAt": "2020-09-22T08:24:34Z", "pr_url": "https://github.com/crate/crate/pull/10566", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MTEzMQ==", "url": "https://github.com/crate/crate/pull/10566#discussion_r492571131", "bodyText": "Is the UseJdbc(1) required here?", "author": "mfussenegger", "createdAt": "2020-09-22T08:47:23Z", "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)", "originalCommit": "0a97f20cfb8ec2d831d29c0c9b24905771483b86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4NTQwMg==", "url": "https://github.com/crate/crate/pull/10566#discussion_r492585402", "bodyText": "it is not needed, I used the wrong crate error code + HTTP code, so the assertion worked only for the pg but not for HTTP case.", "author": "kovrus", "createdAt": "2020-09-22T09:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MTEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "37e2d13102b437ace1d4292f442644c74354f50d", "chunk": "diff --git a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\nindex 1d0aa39c16..d044d0755a 100644\n--- a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n+++ b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n\n@@ -45,7 +45,6 @@ public class OpenCloseTableIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"alter table t close\");\n     }\n \n-    @UseJdbc(1)\n     @Test\n     public void test_open_missing_table() {\n         assertThrows(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjQ3MA==", "url": "https://github.com/crate/crate/pull/10566#discussion_r492572470", "bodyText": "Might be worth changing this to a single bulk insert with between(10, 20) to speed up the test case a bit.", "author": "mfussenegger", "createdAt": "2020-09-22T08:49:30Z", "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)\n+    @Test\n+    public void test_open_missing_table() {\n+        assertThrows(\n+            () -> execute(\"alter table test open\"),\n+            isSQLError(\n+                is(\"Relation 'test' unknown\"),\n+                UNDEFINED_TABLE,\n+                BAD_REQUEST,\n+                4007\n+            )\n+        );\n+    }\n+\n+    @Test\n+    public void test_open_already_opened_index() {\n+        execute(\"alter table t open\");\n+        execute(\"alter table t open\");\n+    }\n+\n+    @Test\n+    public void test_simple_close_open_with_records() {\n+        execute(\"alter table t open\");\n+        execute(\"insert into t values (1), (2)\");\n+        refresh();\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+\n+        execute(\"alter table t close\");\n+        execute(\"alter table t open\");\n+        ensureGreen();\n+\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+    }\n+\n+    @Test\n+    public void test_get_translog_stats_after_close_and_open_table() throws Exception {\n+        execute(\"create table test (x int ) with (number_of_replicas = 0) \");\n+        long numberOfDocs = randomIntBetween(0, 50);\n+        long uncommittedOps = 0;\n+        for (long i = 0; i < numberOfDocs; i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+            if (rarely()) {\n+                execute(\"optimize table test with (flush = true)\");\n+                uncommittedOps = 0;\n+            } else {\n+                uncommittedOps += 1;\n+            }\n+        }\n+        final long uncommittedTranslogOps = uncommittedOps;\n+        assertBusy(() -> {\n+            execute(\n+                \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+                \"from sys.shards \" +\n+                \"where table_name = 'test' and primary = true \" +\n+                \"group by table_name, primary\");\n+            assertThat(response.rowCount(), greaterThan(0L));\n+            assertThat(response.rows()[0][0], is(numberOfDocs));\n+            assertThat(response.rows()[0][1], is(uncommittedTranslogOps));\n+        });\n+\n+        execute(\"alter table test close\");\n+        execute(\"alter table test open\");\n+        ensureYellow();\n+\n+        execute(\n+            \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+            \"from sys.shards \" +\n+            \"where table_name = 'test' and primary = true \" +\n+            \"group by table_name, primary\");\n+        assertThat(response.rowCount(), greaterThan(0L));\n+        assertThat(response.rows()[0][0], is(numberOfDocs));\n+        assertThat(response.rows()[0][1], is(0L));\n+    }\n+\n+    @Test\n+    public void test_open_close_is_not_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }", "originalCommit": "0a97f20cfb8ec2d831d29c0c9b24905771483b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37e2d13102b437ace1d4292f442644c74354f50d", "chunk": "diff --git a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\nindex 1d0aa39c16..d044d0755a 100644\n--- a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n+++ b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n\n@@ -45,7 +45,6 @@ public class OpenCloseTableIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"alter table t close\");\n     }\n \n-    @UseJdbc(1)\n     @Test\n     public void test_open_missing_table() {\n         assertThrows(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjY4Mw==", "url": "https://github.com/crate/crate/pull/10566#discussion_r492572683", "bodyText": "same here", "author": "mfussenegger", "createdAt": "2020-09-22T08:49:52Z", "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)\n+    @Test\n+    public void test_open_missing_table() {\n+        assertThrows(\n+            () -> execute(\"alter table test open\"),\n+            isSQLError(\n+                is(\"Relation 'test' unknown\"),\n+                UNDEFINED_TABLE,\n+                BAD_REQUEST,\n+                4007\n+            )\n+        );\n+    }\n+\n+    @Test\n+    public void test_open_already_opened_index() {\n+        execute(\"alter table t open\");\n+        execute(\"alter table t open\");\n+    }\n+\n+    @Test\n+    public void test_simple_close_open_with_records() {\n+        execute(\"alter table t open\");\n+        execute(\"insert into t values (1), (2)\");\n+        refresh();\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+\n+        execute(\"alter table t close\");\n+        execute(\"alter table t open\");\n+        ensureGreen();\n+\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+    }\n+\n+    @Test\n+    public void test_get_translog_stats_after_close_and_open_table() throws Exception {\n+        execute(\"create table test (x int ) with (number_of_replicas = 0) \");\n+        long numberOfDocs = randomIntBetween(0, 50);\n+        long uncommittedOps = 0;\n+        for (long i = 0; i < numberOfDocs; i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+            if (rarely()) {\n+                execute(\"optimize table test with (flush = true)\");\n+                uncommittedOps = 0;\n+            } else {\n+                uncommittedOps += 1;\n+            }\n+        }\n+        final long uncommittedTranslogOps = uncommittedOps;\n+        assertBusy(() -> {\n+            execute(\n+                \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+                \"from sys.shards \" +\n+                \"where table_name = 'test' and primary = true \" +\n+                \"group by table_name, primary\");\n+            assertThat(response.rowCount(), greaterThan(0L));\n+            assertThat(response.rows()[0][0], is(numberOfDocs));\n+            assertThat(response.rows()[0][1], is(uncommittedTranslogOps));\n+        });\n+\n+        execute(\"alter table test close\");\n+        execute(\"alter table test open\");\n+        ensureYellow();\n+\n+        execute(\n+            \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+            \"from sys.shards \" +\n+            \"where table_name = 'test' and primary = true \" +\n+            \"group by table_name, primary\");\n+        assertThat(response.rowCount(), greaterThan(0L));\n+        assertThat(response.rows()[0][0], is(numberOfDocs));\n+        assertThat(response.rows()[0][1], is(0L));\n+    }\n+\n+    @Test\n+    public void test_open_close_is_not_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }\n+        refresh();\n+\n+        for (String blockSetting : List.of(\"blocks.read\", \"blocks.write\")) {\n+            try {\n+                execute(\"alter table test set (\\\"\" + blockSetting + \"\\\" = true)\");\n+\n+                // Closing an index is not blocked\n+                execute(\"alter table test close\");\n+                assertThat(isClosed(\"test\"), is(true));\n+\n+                // Opening an index is not blocked\n+                execute(\"alter table test open\");\n+                ensureYellow();\n+                assertThat(isClosed(\"test\"), is(false));\n+            } finally {\n+                execute(\"alter table test reset (\\\"\" + blockSetting + \"\\\")\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test_close_is_blocked_with_read_only_and_metadata_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }", "originalCommit": "0a97f20cfb8ec2d831d29c0c9b24905771483b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37e2d13102b437ace1d4292f442644c74354f50d", "chunk": "diff --git a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\nindex 1d0aa39c16..d044d0755a 100644\n--- a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n+++ b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n\n@@ -45,7 +45,6 @@ public class OpenCloseTableIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"alter table t close\");\n     }\n \n-    @UseJdbc(1)\n     @Test\n     public void test_open_missing_table() {\n         assertThrows(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjgwOQ==", "url": "https://github.com/crate/crate/pull/10566#discussion_r492572809", "bodyText": "and here", "author": "mfussenegger", "createdAt": "2020-09-22T08:50:02Z", "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)\n+    @Test\n+    public void test_open_missing_table() {\n+        assertThrows(\n+            () -> execute(\"alter table test open\"),\n+            isSQLError(\n+                is(\"Relation 'test' unknown\"),\n+                UNDEFINED_TABLE,\n+                BAD_REQUEST,\n+                4007\n+            )\n+        );\n+    }\n+\n+    @Test\n+    public void test_open_already_opened_index() {\n+        execute(\"alter table t open\");\n+        execute(\"alter table t open\");\n+    }\n+\n+    @Test\n+    public void test_simple_close_open_with_records() {\n+        execute(\"alter table t open\");\n+        execute(\"insert into t values (1), (2)\");\n+        refresh();\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+\n+        execute(\"alter table t close\");\n+        execute(\"alter table t open\");\n+        ensureGreen();\n+\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+    }\n+\n+    @Test\n+    public void test_get_translog_stats_after_close_and_open_table() throws Exception {\n+        execute(\"create table test (x int ) with (number_of_replicas = 0) \");\n+        long numberOfDocs = randomIntBetween(0, 50);\n+        long uncommittedOps = 0;\n+        for (long i = 0; i < numberOfDocs; i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+            if (rarely()) {\n+                execute(\"optimize table test with (flush = true)\");\n+                uncommittedOps = 0;\n+            } else {\n+                uncommittedOps += 1;\n+            }\n+        }\n+        final long uncommittedTranslogOps = uncommittedOps;\n+        assertBusy(() -> {\n+            execute(\n+                \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+                \"from sys.shards \" +\n+                \"where table_name = 'test' and primary = true \" +\n+                \"group by table_name, primary\");\n+            assertThat(response.rowCount(), greaterThan(0L));\n+            assertThat(response.rows()[0][0], is(numberOfDocs));\n+            assertThat(response.rows()[0][1], is(uncommittedTranslogOps));\n+        });\n+\n+        execute(\"alter table test close\");\n+        execute(\"alter table test open\");\n+        ensureYellow();\n+\n+        execute(\n+            \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+            \"from sys.shards \" +\n+            \"where table_name = 'test' and primary = true \" +\n+            \"group by table_name, primary\");\n+        assertThat(response.rowCount(), greaterThan(0L));\n+        assertThat(response.rows()[0][0], is(numberOfDocs));\n+        assertThat(response.rows()[0][1], is(0L));\n+    }\n+\n+    @Test\n+    public void test_open_close_is_not_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }\n+        refresh();\n+\n+        for (String blockSetting : List.of(\"blocks.read\", \"blocks.write\")) {\n+            try {\n+                execute(\"alter table test set (\\\"\" + blockSetting + \"\\\" = true)\");\n+\n+                // Closing an index is not blocked\n+                execute(\"alter table test close\");\n+                assertThat(isClosed(\"test\"), is(true));\n+\n+                // Opening an index is not blocked\n+                execute(\"alter table test open\");\n+                ensureYellow();\n+                assertThat(isClosed(\"test\"), is(false));\n+            } finally {\n+                execute(\"alter table test reset (\\\"\" + blockSetting + \"\\\")\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test_close_is_blocked_with_read_only_and_metadata_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }\n+        refresh();\n+\n+        for (String blockSetting : List.of(\"blocks.read_only\", \"blocks.metadata\")) {\n+            try {\n+                execute(\"alter table test set (\\\"\" + blockSetting + \"\\\" = true)\");\n+                execute(\"alter table test close\");\n+            } catch (Exception e) {\n+                assertThat(isClosed(\"test\"), is(false));\n+            } finally {\n+                execute(\"alter table test reset (\\\"\" + blockSetting + \"\\\")\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test_open_is_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }", "originalCommit": "0a97f20cfb8ec2d831d29c0c9b24905771483b86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37e2d13102b437ace1d4292f442644c74354f50d", "chunk": "diff --git a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\nindex 1d0aa39c16..d044d0755a 100644\n--- a/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n+++ b/server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java\n\n@@ -45,7 +45,6 @@ public class OpenCloseTableIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"alter table t close\");\n     }\n \n-    @UseJdbc(1)\n     @Test\n     public void test_open_missing_table() {\n         assertThrows(\n"}}, {"oid": "37e2d13102b437ace1d4292f442644c74354f50d", "url": "https://github.com/crate/crate/commit/37e2d13102b437ace1d4292f442644c74354f50d", "message": "Port over ES OpenCloseIndexIT tests.\n\nes state: 704317da71c", "committedDate": "2020-09-22T09:09:59Z", "type": "commit"}, {"oid": "37e2d13102b437ace1d4292f442644c74354f50d", "url": "https://github.com/crate/crate/commit/37e2d13102b437ace1d4292f442644c74354f50d", "message": "Port over ES OpenCloseIndexIT tests.\n\nes state: 704317da71c", "committedDate": "2020-09-22T09:09:59Z", "type": "forcePushed"}, {"oid": "47017804415de4454acb77b3bc6ec4a943d68cb8", "url": "https://github.com/crate/crate/commit/47017804415de4454acb77b3bc6ec4a943d68cb8", "message": "Merge branch 'master' into r/es-tests", "committedDate": "2020-09-22T09:45:18Z", "type": "commit"}]}