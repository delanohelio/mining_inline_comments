{"pr_number": 9791, "pr_title": "Use small block size if table stats are not available", "pr_createdAt": "2020-03-23T17:36:34Z", "pr_url": "https://github.com/crate/crate/pull/9791", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MzMyMw==", "url": "https://github.com/crate/crate/pull/9791#discussion_r396753323", "bodyText": "Maybe use FALLBACK_SIZE?\n(this suggestion, seems I forgot to send ;-)", "author": "seut", "createdAt": "2020-03-23T21:00:17Z", "path": "sql/src/test/java/io/crate/execution/engine/join/RamBlockSizeCalculatorTest.java", "diffHunk": "@@ -39,48 +39,88 @@\n     public void testCalculationOfBlockSize() {\n         when(circuitBreaker.getLimit()).thenReturn(110L);\n         when(circuitBreaker.getUsed()).thenReturn(10L);\n-        RamBlockSizeCalculator blockCalculator100leftRows = new RamBlockSizeCalculator(defaultBlockSize, circuitBreaker, 5, 100);\n+        RamBlockSizeCalculator blockCalculator100leftRows = new RamBlockSizeCalculator(\n+            defaultBlockSize,\n+            circuitBreaker,\n+            5,\n+            100\n+        );\n         assertThat(blockCalculator100leftRows.getAsInt(), is(20));\n-        RamBlockSizeCalculator blockCalculator10LeftRows = new RamBlockSizeCalculator(defaultBlockSize, circuitBreaker, 5, 10);\n+        RamBlockSizeCalculator blockCalculator10LeftRows = new RamBlockSizeCalculator(\n+            defaultBlockSize,\n+            circuitBreaker,\n+            5,\n+            10\n+        );\n         assertThat(blockCalculator10LeftRows.getAsInt(), is(10));\n     }\n \n     @Test\n     public void testCalculationOfBlockSizeWithMissingStats() {\n         when(circuitBreaker.getLimit()).thenReturn(-1L);\n-        RamBlockSizeCalculator blockSizeCalculator = new RamBlockSizeCalculator(defaultBlockSize, circuitBreaker, 10, 10);\n-        assertThat(blockSizeCalculator.getAsInt(), is(defaultBlockSize));\n+        RamBlockSizeCalculator blockSizeCalculator = new RamBlockSizeCalculator(\n+            defaultBlockSize,\n+            circuitBreaker,\n+            10,\n+            10\n+        );\n+        assertThat(blockSizeCalculator.getAsInt(), is(500));", "originalCommit": "81c78392f22c02e134a9bcf43cc6330b5f41cb98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "643e7aa0ef60977319be9cebec2df51a86f7a340", "chunk": "diff --git a/sql/src/test/java/io/crate/execution/engine/join/RamBlockSizeCalculatorTest.java b/sql/src/test/java/io/crate/execution/engine/join/RamBlockSizeCalculatorTest.java\nindex b8d543425d..1ac88e2be1 100644\n--- a/sql/src/test/java/io/crate/execution/engine/join/RamBlockSizeCalculatorTest.java\n+++ b/sql/src/test/java/io/crate/execution/engine/join/RamBlockSizeCalculatorTest.java\n\n@@ -64,7 +64,7 @@ public class RamBlockSizeCalculatorTest {\n             10,\n             10\n         );\n-        assertThat(blockSizeCalculator.getAsInt(), is(500));\n+        assertThat(blockSizeCalculator.getAsInt(), is(RamBlockSizeCalculator.FALLBACK_SIZE));\n \n         when(circuitBreaker.getLimit()).thenReturn(110L);\n         when(circuitBreaker.getUsed()).thenReturn(10L);\n"}}, {"oid": "643e7aa0ef60977319be9cebec2df51a86f7a340", "url": "https://github.com/crate/crate/commit/643e7aa0ef60977319be9cebec2df51a86f7a340", "message": "Use small block size if table stats are not available\n\nFor system tables there are no table stats. This caused the hash join\noperation to default to 500_000 as block size, which is way too much for\nsmall tables. A lot of time is then spent creating hash tables which\ncaused a couple of joins on system tables to take several seconds.\n\nThis adds a much smaller fallback block size.\n\n`test_select_from_virtual_table_with_window_function_and_column_pruning`\nran into timeouts because of this.", "committedDate": "2020-03-23T22:07:08Z", "type": "commit"}, {"oid": "643e7aa0ef60977319be9cebec2df51a86f7a340", "url": "https://github.com/crate/crate/commit/643e7aa0ef60977319be9cebec2df51a86f7a340", "message": "Use small block size if table stats are not available\n\nFor system tables there are no table stats. This caused the hash join\noperation to default to 500_000 as block size, which is way too much for\nsmall tables. A lot of time is then spent creating hash tables which\ncaused a couple of joins on system tables to take several seconds.\n\nThis adds a much smaller fallback block size.\n\n`test_select_from_virtual_table_with_window_function_and_column_pruning`\nran into timeouts because of this.", "committedDate": "2020-03-23T22:07:08Z", "type": "forcePushed"}]}