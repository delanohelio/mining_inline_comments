{"pr_number": 10138, "pr_title": "Use Signature instead of FunctionIdent/Info ", "pr_createdAt": "2020-06-25T14:04:41Z", "pr_url": "https://github.com/crate/crate/pull/10138", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjExNQ==", "url": "https://github.com/crate/crate/pull/10138#discussion_r445592115", "bodyText": "Plugin providing scalars would not work anymore, as they rely on the old function registry including old methods.\nIs it worth to keep compatibility given that our plugin infrastructure seems to be unused?", "author": "seut", "createdAt": "2020-06-25T14:16:06Z", "path": "app/src/test/java/io/crate/plugin/PluginLoaderTest.java", "diffHunk": "@@ -54,29 +54,6 @@\n         return Arrays.asList(PluginLoaderPlugin.class, Netty4Plugin.class);\n     }\n \n-    @Test\n-    public void testLoadPlugin() throws Exception {", "originalCommit": "f146be5d2b5fd56707e6b6a9d89f359042a0d39d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMDA5Mg==", "url": "https://github.com/crate/crate/pull/10138#discussion_r446010092", "bodyText": "s it worth to keep compatibility given that our plugin infrastructure\n\nNo I don't think so.\nIf people request this we can either create a narrow (Scalar)FunctionPlugin or extend the user-defined-functions to support Java as well - which would also avoid the deployment hassle", "author": "mfussenegger", "createdAt": "2020-06-26T07:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjExNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "194d49b976bf12ca8e2609daf70c670d31db7095", "url": "https://github.com/crate/crate/commit/194d49b976bf12ca8e2609daf70c670d31db7095", "message": "Replace read usages of deprecated function info\n\nAdd wrapper methods to fallback to the function info when no signature\nis given (for function symbols retrieved from CrateDB < 4.2 nodes).", "committedDate": "2020-06-25T14:31:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzIxNw==", "url": "https://github.com/crate/crate/pull/10138#discussion_r446023217", "bodyText": "I think we should add some assertions here that the signature has the right arguments for UnaryScalar, or keep a more restrictive constructor so that it cannot be parametrized in an illegal way.  Same for the TrippleScalar", "author": "mfussenegger", "createdAt": "2020-06-26T07:47:13Z", "path": "server/src/main/java/io/crate/expression/scalar/UnaryScalar.java", "diffHunk": "@@ -42,43 +37,27 @@\n  */\n public class UnaryScalar<R, T> extends Scalar<R, T> {\n \n-    private final FunctionInfo info;\n     private final Function<T, R> func;\n-    @Nullable\n     private final Signature signature;\n+    private final Signature boundSignature;\n \n-    public UnaryScalar(FunctionIdent functionIdent, DataType<?> returnType, Function<T, R> func) {\n-        this(functionIdent, null, returnType, func);\n-    }\n-\n-    public UnaryScalar(String name, DataType<?> argType, DataType<?> returnType, Function<T, R> func) {\n-        this(new FunctionIdent(name, List.of(argType)), returnType, func);\n-    }\n-\n-    public UnaryScalar(String name,\n-                       Signature signature,\n-                       DataType<?> argType, DataType<?> returnType,\n-                       Function<T, R> func) {\n-        this(new FunctionIdent(name, List.of(argType)), signature, returnType, func);\n-    }\n \n-    public UnaryScalar(FunctionIdent functionIdent,\n-                       @Nullable Signature signature,\n-                       DataType<?> returnType,\n+    public UnaryScalar(Signature signature,\n+                       Signature boundSignature,\n                        Function<T, R> func) {\n-        this.info = new FunctionInfo(functionIdent, returnType);\n         this.signature = signature;", "originalCommit": "194d49b976bf12ca8e2609daf70c670d31db7095", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ed4a6b4467805dddf8b55b63d8b7d8dc91d6780", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/UnaryScalar.java b/server/src/main/java/io/crate/expression/scalar/UnaryScalar.java\nindex 2c3260b75a..afc34b71c0 100644\n--- a/server/src/main/java/io/crate/expression/scalar/UnaryScalar.java\n+++ b/server/src/main/java/io/crate/expression/scalar/UnaryScalar.java\n\n@@ -40,13 +41,18 @@ public class UnaryScalar<R, T> extends Scalar<R, T> {\n     private final Function<T, R> func;\n     private final Signature signature;\n     private final Signature boundSignature;\n+    private final DataType<T> type;\n \n \n     public UnaryScalar(Signature signature,\n                        Signature boundSignature,\n+                       DataType<T> type,\n                        Function<T, R> func) {\n+        assert boundSignature.getArgumentDataTypes().get(0).id() == type.id() :\n+            \"The bound argument type of the signature must match the type argument\";\n         this.signature = signature;\n         this.boundSignature = boundSignature;\n+        this.type = type;\n         this.func = func;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzQ5MQ==", "url": "https://github.com/crate/crate/pull/10138#discussion_r446023491", "bodyText": "Same here. See comment on the UnaryScalar", "author": "mfussenegger", "createdAt": "2020-06-26T07:47:47Z", "path": "server/src/main/java/io/crate/expression/scalar/arithmetic/BinaryScalar.java", "diffHunk": "@@ -23,49 +23,38 @@\n package io.crate.expression.scalar.arithmetic;\n \n import io.crate.data.Input;\n-import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n \n-import javax.annotation.Nullable;\n-import java.util.Arrays;\n-import java.util.Set;\n import java.util.function.BinaryOperator;\n \n public final class BinaryScalar<T> extends Scalar<T, T> {\n \n     private final BinaryOperator<T> func;\n-    private final FunctionInfo info;\n-    @Nullable\n     private final Signature signature;\n+    private final Signature boundSignature;\n     private final DataType<T> type;\n \n-    public BinaryScalar(BinaryOperator<T> func, String name, DataType<T> type, Set<FunctionInfo.Feature> feature) {\n-        this(func, name, null, type, feature);\n-    }\n-\n     public BinaryScalar(BinaryOperator<T> func,\n-                        String name,\n-                        @Nullable Signature signature,\n-                        DataType<T> type,\n-                        Set<FunctionInfo.Feature> feature) {\n+                        Signature signature,\n+                        Signature boundSignature,\n+                        DataType<T> type) {\n         this.func = func;\n-        this.info = new FunctionInfo(new FunctionIdent(name, Arrays.asList(type, type)), type, FunctionInfo.Type.SCALAR, feature);\n         this.signature = signature;", "originalCommit": "194d49b976bf12ca8e2609daf70c670d31db7095", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ed4a6b4467805dddf8b55b63d8b7d8dc91d6780", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/arithmetic/BinaryScalar.java b/server/src/main/java/io/crate/expression/scalar/arithmetic/BinaryScalar.java\nindex 4e9e3fa23d..35135cc18d 100644\n--- a/server/src/main/java/io/crate/expression/scalar/arithmetic/BinaryScalar.java\n+++ b/server/src/main/java/io/crate/expression/scalar/arithmetic/BinaryScalar.java\n\n@@ -41,6 +41,8 @@ public final class BinaryScalar<T> extends Scalar<T, T> {\n                         Signature signature,\n                         Signature boundSignature,\n                         DataType<T> type) {\n+        assert boundSignature.getArgumentDataTypes().stream().allMatch(t -> t.id() == type.id()) :\n+            \"All bound argument types of the signature must match the type argument\";\n         this.func = func;\n         this.signature = signature;\n         this.boundSignature = boundSignature;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyODY5Nw==", "url": "https://github.com/crate/crate/pull/10138#discussion_r446028697", "bodyText": "Would probably also be worth to elaborate a bit on the difference between signature and boundSignature", "author": "mfussenegger", "createdAt": "2020-06-26T07:58:25Z", "path": "server/src/main/java/io/crate/metadata/FunctionImplementation.java", "diffHunk": "@@ -33,16 +33,26 @@\n public interface FunctionImplementation {\n \n     /**\n+     * @deprecated Use {@link #signature()} instead. Will be removed with next major version.\n+     *\n      * Provides meta information about this function implementation.\n      */\n-    FunctionInfo info();\n+    default FunctionInfo info() {\n+        return FunctionInfo.of(boundSignature());\n+    }\n \n     /**\n      * Return the declared signature for this implementation.\n      * This should be favoured over {@link #info()}.\n      */\n     Signature signature();\n \n+    /**\n+     * Return the bound signature for this implementation.\n+     * Main use-case is for the default {@link #info()} implementation.", "originalCommit": "194d49b976bf12ca8e2609daf70c670d31db7095", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ed4a6b4467805dddf8b55b63d8b7d8dc91d6780", "chunk": "diff --git a/server/src/main/java/io/crate/metadata/FunctionImplementation.java b/server/src/main/java/io/crate/metadata/FunctionImplementation.java\nindex cfe0effa6b..29af32f7f6 100644\n--- a/server/src/main/java/io/crate/metadata/FunctionImplementation.java\n+++ b/server/src/main/java/io/crate/metadata/FunctionImplementation.java\n\n@@ -43,13 +43,17 @@ public interface FunctionImplementation {\n \n     /**\n      * Return the declared signature for this implementation.\n-     * This should be favoured over {@link #info()}.\n+     * All function implementations are registered under their declared signature, thus function symbols must\n+     * carry the declared signature in order to look up each implementation for execution.\n      */\n     Signature signature();\n \n     /**\n      * Return the bound signature for this implementation.\n-     * Main use-case is for the default {@link #info()} implementation.\n+     * This signature has all actual argument types bound, possible type variables of the declared signature are\n+     * replaced.\n+     *\n+     * Bound argument and return types are required by function symbols.\n      */\n     Signature boundSignature();\n \n"}}, {"oid": "6ed4a6b4467805dddf8b55b63d8b7d8dc91d6780", "url": "https://github.com/crate/crate/commit/6ed4a6b4467805dddf8b55b63d8b7d8dc91d6780", "message": "Use Signature instead of FunctionIdent/Info\n\nReplaced all usages of `FunctionIdent` and `FunctionInfo` with `Signature` and\nmarked them as deprecated.\nRemaining usages are only for BWC inside mixed version clusters.\nImplementation and usages should be removed with the next major version (5.0).", "committedDate": "2020-06-26T14:40:23Z", "type": "commit"}, {"oid": "950044a8bf164ab9315cf5b207a19aa09d2fe3f0", "url": "https://github.com/crate/crate/commit/950044a8bf164ab9315cf5b207a19aa09d2fe3f0", "message": "Replace read usages of deprecated function info\n\nAdd wrapper methods to fallback to the function info when no signature\nis given (for function symbols retrieved from CrateDB < 4.2 nodes).", "committedDate": "2020-06-26T14:40:23Z", "type": "commit"}, {"oid": "950044a8bf164ab9315cf5b207a19aa09d2fe3f0", "url": "https://github.com/crate/crate/commit/950044a8bf164ab9315cf5b207a19aa09d2fe3f0", "message": "Replace read usages of deprecated function info\n\nAdd wrapper methods to fallback to the function info when no signature\nis given (for function symbols retrieved from CrateDB < 4.2 nodes).", "committedDate": "2020-06-26T14:40:23Z", "type": "forcePushed"}, {"oid": "92bdf1abc6cdfa2058ccc930324ca137282e0501", "url": "https://github.com/crate/crate/commit/92bdf1abc6cdfa2058ccc930324ca137282e0501", "message": "Merge branch 'master' into s/func-info", "committedDate": "2020-06-26T15:18:57Z", "type": "commit"}]}