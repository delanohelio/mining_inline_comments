{"pr_number": 10226, "pr_title": "Split `DataType#value` into `DataType#implicitCast`, `DataType#sanitizeValue` and `DataType#valuesForInsert`.", "pr_createdAt": "2020-07-15T15:34:23Z", "pr_url": "https://github.com/crate/crate/pull/10226", "timeline": [{"oid": "c371465682e87c18ba36f01b2dc8e7d7cd779eab", "url": "https://github.com/crate/crate/commit/c371465682e87c18ba36f01b2dc8e7d7cd779eab", "message": "Replace `DataType#value` with new DataType API in analyzer.", "committedDate": "2020-07-15T15:20:43Z", "type": "forcePushed"}, {"oid": "4085a2bab71ac85ee4046006405a01a633c51bce", "url": "https://github.com/crate/crate/commit/4085a2bab71ac85ee4046006405a01a633c51bce", "message": "Replace `DataType#value` with new DataType API in metadata.", "committedDate": "2020-07-15T16:16:58Z", "type": "forcePushed"}, {"oid": "924b75c93983a6c8cc54fe05eb61fb0673dd2a7a", "url": "https://github.com/crate/crate/commit/924b75c93983a6c8cc54fe05eb61fb0673dd2a7a", "message": "Remove `DataType#value`.", "committedDate": "2020-07-16T13:35:27Z", "type": "forcePushed"}, {"oid": "937a0460eb5a2d4a93b95f9729621add386f0540", "url": "https://github.com/crate/crate/commit/937a0460eb5a2d4a93b95f9729621add386f0540", "message": "Remove `DataType#value`.", "committedDate": "2020-07-16T13:59:28Z", "type": "forcePushed"}, {"oid": "0d704916a99e80f7cc15b591c0d188916651b464", "url": "https://github.com/crate/crate/commit/0d704916a99e80f7cc15b591c0d188916651b464", "message": "Remove `DataType#value`.", "committedDate": "2020-07-16T14:20:48Z", "type": "forcePushed"}, {"oid": "e961760cd7250e9f553b86380eeb7738cffa9496", "url": "https://github.com/crate/crate/commit/e961760cd7250e9f553b86380eeb7738cffa9496", "message": "Remove `DataType#value`.", "committedDate": "2020-07-21T14:02:48Z", "type": "forcePushed"}, {"oid": "e2788108b7987727176eb5fbec53e54b68cfd556", "url": "https://github.com/crate/crate/commit/e2788108b7987727176eb5fbec53e54b68cfd556", "message": "Remove `DataType#value`.", "committedDate": "2020-07-21T14:19:24Z", "type": "forcePushed"}, {"oid": "0b832ae0347869f1115c2c7841a86809743b356a", "url": "https://github.com/crate/crate/commit/0b832ae0347869f1115c2c7841a86809743b356a", "message": "Remove `DataType#value`.", "committedDate": "2020-07-22T08:21:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDg4Mg==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458634882", "bodyText": "Why not call type.implicitCast directly? Maybe I'm missing something here \ud83e\udd14", "author": "mfussenegger", "createdAt": "2020-07-22T08:45:35Z", "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "diffHunk": "@@ -40,27 +41,28 @@ static Object toCrateObject(Value value, DataType<?> type) {\n         if (value == null) {\n             return null;\n         }\n+        Function<Object, ?> convert = type::implicitCast;", "originalCommit": "0b832ae0347869f1115c2c7841a86809743b356a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMzQwNQ==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458803405", "bodyText": "removed. it is just unnecessary indirection.", "author": "kovrus", "createdAt": "2020-07-22T13:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ec6335ad9a2c3f007461849b8d9401d010213f96", "chunk": "diff --git a/enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java b/enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java\nindex 6ae43842b7..8adbac3bc3 100644\n--- a/enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java\n+++ b/enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java\n\n@@ -41,7 +40,6 @@ class PolyglotValuesConverter {\n         if (value == null) {\n             return null;\n         }\n-        Function<Object, ?> convert = type::implicitCast;\n         switch (type.id()) {\n             case ArrayType.ID:\n                 ArrayList<Object> items = new ArrayList<>((int) value.getArraySize());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MjM5Ng==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458682396", "bodyText": "Not sure if this is safe or whether we need the implicit cast here. Does this work for cases where a primary key column is a bigint or something like that?", "author": "mfussenegger", "createdAt": "2020-07-22T10:05:53Z", "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -63,31 +63,31 @@ public String getId(TransactionContext txnCtx, Functions functions, Row params,\n             return idFunction.apply(\n                 LazyMapList.of(\n                     key.subList(0, width),\n-                    s -> DataTypes.STRING.value(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))\n+                    s -> DataTypes.STRING.sanitizeValue(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))", "originalCommit": "0b832ae0347869f1115c2c7841a86809743b356a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMjkxMQ==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458802911", "bodyText": "it was working before coz of b27d1dc#diff-d9273c5d03d846ae406a74ae5af32ad5L196 i dropped the .toString now.", "author": "kovrus", "createdAt": "2020-07-22T13:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MjM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ec6335ad9a2c3f007461849b8d9401d010213f96", "chunk": "diff --git a/server/src/main/java/io/crate/analyze/where/DocKeys.java b/server/src/main/java/io/crate/analyze/where/DocKeys.java\nindex f2d927f455..f175e42e18 100644\n--- a/server/src/main/java/io/crate/analyze/where/DocKeys.java\n+++ b/server/src/main/java/io/crate/analyze/where/DocKeys.java\n\n@@ -63,7 +63,7 @@ public class DocKeys implements Iterable<DocKeys.DocKey> {\n             return idFunction.apply(\n                 LazyMapList.of(\n                     key.subList(0, width),\n-                    s -> DataTypes.STRING.sanitizeValue(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))\n+                    s -> DataTypes.STRING.implicitCast(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))\n                 )\n             );\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MjcyOQ==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458682729", "bodyText": "Similar here. Partition by columns could have a different type, I'm not sure if sanitizeValue is enough here", "author": "mfussenegger", "createdAt": "2020-07-22T10:06:28Z", "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -102,7 +102,7 @@ public String getId(TransactionContext txnCtx, Functions functions, Row params,\n             }\n             return Lists2.map(\n                 partitionIdx,\n-                pIdx -> DataTypes.STRING.value(SymbolEvaluator.evaluate(txnCtx, functions, key.get(pIdx), params, subQueryResults)));\n+                pIdx -> DataTypes.STRING.sanitizeValue(SymbolEvaluator.evaluate(txnCtx, functions, key.get(pIdx), params, subQueryResults)));", "originalCommit": "0b832ae0347869f1115c2c7841a86809743b356a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec6335ad9a2c3f007461849b8d9401d010213f96", "chunk": "diff --git a/server/src/main/java/io/crate/analyze/where/DocKeys.java b/server/src/main/java/io/crate/analyze/where/DocKeys.java\nindex f2d927f455..f175e42e18 100644\n--- a/server/src/main/java/io/crate/analyze/where/DocKeys.java\n+++ b/server/src/main/java/io/crate/analyze/where/DocKeys.java\n\n@@ -102,7 +102,7 @@ public class DocKeys implements Iterable<DocKeys.DocKey> {\n             }\n             return Lists2.map(\n                 partitionIdx,\n-                pIdx -> DataTypes.STRING.sanitizeValue(SymbolEvaluator.evaluate(txnCtx, functions, key.get(pIdx), params, subQueryResults)));\n+                pIdx -> DataTypes.STRING.implicitCast(SymbolEvaluator.evaluate(txnCtx, functions, key.get(pIdx), params, subQueryResults)));\n \n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NzQ5Mw==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458687493", "bodyText": "I think we should add some docs to clarify the difference between implicitCast and sanitizeValue", "author": "mfussenegger", "createdAt": "2020-07-22T10:15:31Z", "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -117,7 +124,7 @@ public T valueForInsert(Object value) {\n         return (T) value;\n     }\n \n-    public abstract T value(Object value) throws IllegalArgumentException, ClassCastException;\n+    public abstract T sanitizeValue(Object value);", "originalCommit": "0b832ae0347869f1115c2c7841a86809743b356a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec6335ad9a2c3f007461849b8d9401d010213f96", "chunk": "diff --git a/server/src/main/java/io/crate/types/DataType.java b/server/src/main/java/io/crate/types/DataType.java\nindex 676e95402a..283e18f805 100644\n--- a/server/src/main/java/io/crate/types/DataType.java\n+++ b/server/src/main/java/io/crate/types/DataType.java\n\n@@ -124,6 +124,18 @@ public abstract class DataType<T> implements Comparable<DataType<?>>, Writeable,\n         return (T) value;\n     }\n \n+    /**\n+     * Fixes the {@link DataType} of the input {@code value} when its type is\n+     * slightly different the target {@link DataType}.\n+     * <p>\n+     * For example, to fix a type read from source  where `integer` might have\n+     * been stored as `bigint`. This is mostly in case for the reference\n+     * resolvers and column expression implementations.\n+     *\n+     * @param value The value to sanitize to the target {@link DataType}.\n+     * @return The value of {@link DataType}.\n+     * @see DataType#implicitCast(Object)\n+     */\n     public abstract T sanitizeValue(Object value);\n \n     public TypeSignature getTypeSignature() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4ODIxMQ==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458688211", "bodyText": "Might still be worth to keep this early as a \"common case\" - assuming the input is likey to already be a Float (not sure if that is still really the case often)", "author": "mfussenegger", "createdAt": "2020-07-22T10:16:54Z", "path": "server/src/main/java/io/crate/types/FloatType.java", "diffHunk": "@@ -58,21 +58,32 @@ public String getName() {\n     }\n \n     @Override\n-    public Float value(Object value) {\n+    public Float implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n         if (value == null) {\n             return null;\n-        }\n-        if (value instanceof Float) {", "originalCommit": "0b832ae0347869f1115c2c7841a86809743b356a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec6335ad9a2c3f007461849b8d9401d010213f96", "chunk": "diff --git a/server/src/main/java/io/crate/types/FloatType.java b/server/src/main/java/io/crate/types/FloatType.java\nindex 8267e6f9b2..673be44809 100644\n--- a/server/src/main/java/io/crate/types/FloatType.java\n+++ b/server/src/main/java/io/crate/types/FloatType.java\n\n@@ -61,6 +61,8 @@ public class FloatType extends DataType<Float> implements Streamer<Float>, Fixed\n     public Float implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n         if (value == null) {\n             return null;\n+        } else if (value instanceof Float) {\n+            return (Float) value;\n         } else if (value instanceof String) {\n             return Float.parseFloat((String) value);\n         } else if (value instanceof Number) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4OTIxNw==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458689217", "bodyText": "Could we keep the indentation? The additional structure reflects the start / end markers", "author": "mfussenegger", "createdAt": "2020-07-22T10:18:56Z", "path": "server/src/main/java/io/crate/types/TimestampType.java", "diffHunk": "@@ -187,12 +195,12 @@ static long parseTimestampIgnoreTimeZone(String timestamp) {\n         .parseCaseInsensitive()\n         .append(ISO_LOCAL_DATE)\n         .optionalStart()\n-            .padNext(1)\n-                .optionalStart()\n-                    .appendLiteral('T')\n-                .optionalEnd()\n-            .append(ISO_LOCAL_TIME)\n-            .optionalStart()", "originalCommit": "0b832ae0347869f1115c2c7841a86809743b356a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec6335ad9a2c3f007461849b8d9401d010213f96", "chunk": "diff --git a/server/src/main/java/io/crate/types/TimestampType.java b/server/src/main/java/io/crate/types/TimestampType.java\nindex ce54eaf129..720f6bf4a4 100644\n--- a/server/src/main/java/io/crate/types/TimestampType.java\n+++ b/server/src/main/java/io/crate/types/TimestampType.java\n\n@@ -195,11 +197,11 @@ public final class TimestampType extends DataType<Long>\n         .parseCaseInsensitive()\n         .append(ISO_LOCAL_DATE)\n         .optionalStart()\n-        .padNext(1)\n-        .optionalStart()\n-        .appendLiteral('T')\n-        .optionalEnd()\n-        .append(ISO_LOCAL_TIME)\n+            .padNext(1)\n+                .optionalStart()\n+                    .appendLiteral('T')\n+                .optionalEnd()\n+            .append(ISO_LOCAL_TIME)\n         .optionalStart()\n         .appendPattern(\"[Z][VV][x][xx][xxx]\")\n         .toFormatter(Locale.ENGLISH).withResolverStyle(ResolverStyle.STRICT);\n"}}, {"oid": "ec6335ad9a2c3f007461849b8d9401d010213f96", "url": "https://github.com/crate/crate/commit/ec6335ad9a2c3f007461849b8d9401d010213f96", "message": "Remove `DataType#value`.", "committedDate": "2020-07-22T12:58:01Z", "type": "forcePushed"}, {"oid": "2d10e3298f2957a0543f68b4abfc3a871e0a8773", "url": "https://github.com/crate/crate/commit/2d10e3298f2957a0543f68b4abfc3a871e0a8773", "message": "Remove `DataType#value`.", "committedDate": "2020-07-22T13:16:43Z", "type": "forcePushed"}, {"oid": "ce5d5110b5f6d407f58dd68edc6378c91c232632", "url": "https://github.com/crate/crate/commit/ce5d5110b5f6d407f58dd68edc6378c91c232632", "message": "Remove `DataType#value`.", "committedDate": "2020-07-22T13:42:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMDUyMA==", "url": "https://github.com/crate/crate/pull/10226#discussion_r458810520", "bodyText": "implicitCast here because the undefined type is also represented as varchar", "author": "kovrus", "createdAt": "2020-07-22T13:55:06Z", "path": "server/src/main/java/io/crate/protocols/postgres/types/VarCharType.java", "diffHunk": "@@ -66,7 +66,7 @@ public String typeCategory() {\n \n     @Override\n     public int writeAsBinary(ByteBuf buffer, @Nonnull Object value) {\n-        byte[] bytes = DataTypes.STRING.sanitizeValue(value).getBytes(StandardCharsets.UTF_8);", "originalCommit": "55942945ac9df0087bc38b45f2936966ba8b650c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43bae45e0ebea6196ab6e506feb04a8584ebf050", "chunk": "diff --git a/server/src/main/java/io/crate/protocols/postgres/types/VarCharType.java b/server/src/main/java/io/crate/protocols/postgres/types/VarCharType.java\nindex 3677d60f95..02c591446d 100644\n--- a/server/src/main/java/io/crate/protocols/postgres/types/VarCharType.java\n+++ b/server/src/main/java/io/crate/protocols/postgres/types/VarCharType.java\n\n@@ -66,7 +66,7 @@ class VarCharType extends PGType<Object> {\n \n     @Override\n     public int writeAsBinary(ByteBuf buffer, @Nonnull Object value) {\n-        byte[] bytes = DataTypes.STRING.implicitCast(value).getBytes(StandardCharsets.UTF_8);\n+        byte[] bytes = DataTypes.STRING.value(value).getBytes(StandardCharsets.UTF_8);\n         buffer.writeInt(bytes.length);\n         buffer.writeBytes(bytes);\n         return INT32_BYTE_SIZE + bytes.length;\n"}}, {"oid": "43bae45e0ebea6196ab6e506feb04a8584ebf050", "url": "https://github.com/crate/crate/commit/43bae45e0ebea6196ab6e506feb04a8584ebf050", "message": "Implement `DataType#implicitCast` for all data types.", "committedDate": "2020-07-22T14:19:06Z", "type": "commit"}, {"oid": "09bbfa62b16870b6e3dd1cac4c74650205ebf8d4", "url": "https://github.com/crate/crate/commit/09bbfa62b16870b6e3dd1cac4c74650205ebf8d4", "message": "Implement `DataType#sanitizeValue` for all data types.", "committedDate": "2020-07-22T14:19:07Z", "type": "commit"}, {"oid": "9c1b5e4e554d55f84fe941238516ff0319f4a93a", "url": "https://github.com/crate/crate/commit/9c1b5e4e554d55f84fe941238516ff0319f4a93a", "message": "Remove `DataType#value`.", "committedDate": "2020-07-22T14:19:08Z", "type": "forcePushed"}, {"oid": "034c72260ca5b107741f2ff9e49856cb41311452", "url": "https://github.com/crate/crate/commit/034c72260ca5b107741f2ff9e49856cb41311452", "message": "Register the geohash function only for explicitly supported types.\n\nThe input argumetns of other types should be casted first.", "committedDate": "2020-07-22T14:49:53Z", "type": "commit"}, {"oid": "794ac4507c9ac03e37d2d3300b56f850ca306a6d", "url": "https://github.com/crate/crate/commit/794ac4507c9ac03e37d2d3300b56f850ca306a6d", "message": "Register latitude and longitude functions only for explicitly supported types.\n\nThe input argumetns of other types should be casted first.", "committedDate": "2020-07-22T14:49:53Z", "type": "commit"}, {"oid": "9bd085ed0daf83912c5747bd7f57c2435ac9222d", "url": "https://github.com/crate/crate/commit/9bd085ed0daf83912c5747bd7f57c2435ac9222d", "message": "Register date_format and date_trunc only for explicitly supported types.\n\nThe input arguments of other types should be casted first.", "committedDate": "2020-07-22T14:49:53Z", "type": "commit"}, {"oid": "6f80f6f7bebfd78f999e1f5c46a49d85c3ae28a2", "url": "https://github.com/crate/crate/commit/6f80f6f7bebfd78f999e1f5c46a49d85c3ae28a2", "message": "Replace `DataType#value` with new DataType API in tests.", "committedDate": "2020-07-22T14:49:53Z", "type": "commit"}, {"oid": "a90a721441fa51b15a57d90339bd93a7dd60fa3a", "url": "https://github.com/crate/crate/commit/a90a721441fa51b15a57d90339bd93a7dd60fa3a", "message": "Replace `DataType#value` with new DataType API in production code.", "committedDate": "2020-07-22T14:51:50Z", "type": "commit"}, {"oid": "0baa735d56218a0fb9d7e6352d30654bb66bad71", "url": "https://github.com/crate/crate/commit/0baa735d56218a0fb9d7e6352d30654bb66bad71", "message": "Remove `DataType#value`.", "committedDate": "2020-07-22T14:52:03Z", "type": "commit"}, {"oid": "0baa735d56218a0fb9d7e6352d30654bb66bad71", "url": "https://github.com/crate/crate/commit/0baa735d56218a0fb9d7e6352d30654bb66bad71", "message": "Remove `DataType#value`.", "committedDate": "2020-07-22T14:52:03Z", "type": "forcePushed"}]}