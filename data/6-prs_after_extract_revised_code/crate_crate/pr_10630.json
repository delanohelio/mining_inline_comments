{"pr_number": 10630, "pr_title": "Add scalar function translate", "pr_createdAt": "2020-10-07T17:52:23Z", "pr_url": "https://github.com/crate/crate/pull/10630", "timeline": [{"oid": "b43c927c8a345536c5ae726e95f8410b1dac9780", "url": "https://github.com/crate/crate/commit/b43c927c8a345536c5ae726e95f8410b1dac9780", "message": "Add benchmark tests for small from/to/source values.\n\nTranslate uses char array instead of StringBuilder", "committedDate": "2020-10-11T12:21:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MTY3NA==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503251674", "bodyText": "Afaik this is only used as a Character\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final char NULL = '\\0';\n          \n          \n            \n                private static final Character NULL = '\\0';", "author": "seut", "createdAt": "2020-10-12T12:10:21Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\nindex 75cddd2c4b..baa7644102 100644\n--- a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n+++ b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n\n@@ -31,7 +31,6 @@ import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n import io.crate.types.DataTypes;\n-import io.crate.types.TypeSignature;\n \n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MjA4MQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503252081", "bodyText": "Don't think that this improve anything, I'd suggest to use DataTypes.STRING.getTypeSignature() directly below.", "author": "seut", "createdAt": "2020-10-12T12:11:14Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\nindex 75cddd2c4b..baa7644102 100644\n--- a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n+++ b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n\n@@ -31,7 +31,6 @@ import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n import io.crate.types.DataTypes;\n-import io.crate.types.TypeSignature;\n \n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MjQ1NQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503252455", "bodyText": "Looks like this should be private accessible only?", "author": "seut", "createdAt": "2020-10-12T12:11:57Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\nindex 75cddd2c4b..baa7644102 100644\n--- a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n+++ b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n\n@@ -31,7 +31,6 @@ import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n import io.crate.types.DataTypes;\n-import io.crate.types.TypeSignature;\n \n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NDQ3Mg==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503254472", "bodyText": "Any reason to store this into a local var?", "author": "seut", "createdAt": "2020-10-12T12:15:53Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.tmap = tmap;\n+    }\n+\n+    @Override\n+    public Scalar<String, String> compile(List<Symbol> args) {\n+        assert args.size() == 3 : \"translate takes exactly three arguments\";\n+\n+        Symbol from = args.get(1);\n+        if (!Literal.isLiteral(from, DataTypes.STRING)) {\n+            return this;\n+        }\n+        Symbol to = args.get(2);\n+        if (!Literal.isLiteral(to, DataTypes.STRING)) {\n+            return this;\n+        }\n+        String fromStr = ((Input<String>) from).value();\n+        String toStr = ((Input<String>) to).value();\n+        return new TranslateFunction(signature, boundSignature, computeMap(fromStr, toStr));\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<String>[] args) {\n+        assert args.length == 3 : \"translate takes exactly three arguments\";\n+        String source = args[0].value();\n+        String from = args[1].value();\n+        String to = args[2].value();\n+        if (source == null || from == null || to == null) {\n+            return null;\n+        }\n+        if (source.length() == 0 || from.length() == 0) {\n+            return source;\n+        }\n+        Map<Character, Character> tmap = this.tmap;", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\nindex 75cddd2c4b..baa7644102 100644\n--- a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n+++ b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n\n@@ -31,7 +31,6 @@ import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n import io.crate.types.DataTypes;\n-import io.crate.types.TypeSignature;\n \n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NTc3OQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503255779", "bodyText": "this would avoid an additional by-key lookup which slightly improves on larger source text input according to my local benchmarks:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (tmap.containsKey(c)) {\n          \n          \n            \n                            char mc = tmap.get(c);\n          \n          \n            \n                            if (mc != NULL) {\n          \n          \n            \n                                result[resultCount++] = mc;\n          \n          \n            \n                            }\n          \n          \n            \n                        } else {\n          \n          \n            \n                            result[resultCount++] = c;\n          \n          \n            \n                        }\n          \n          \n            \n                        var mc = tmap.get(c);\n          \n          \n            \n                        if (mc == null) {\n          \n          \n            \n                            result[resultCount++] = c;\n          \n          \n            \n                        } else if (mc != NULL) {\n          \n          \n            \n                            result[resultCount++] = mc;\n          \n          \n            \n                        }", "author": "seut", "createdAt": "2020-10-12T12:18:30Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.tmap = tmap;\n+    }\n+\n+    @Override\n+    public Scalar<String, String> compile(List<Symbol> args) {\n+        assert args.size() == 3 : \"translate takes exactly three arguments\";\n+\n+        Symbol from = args.get(1);\n+        if (!Literal.isLiteral(from, DataTypes.STRING)) {\n+            return this;\n+        }\n+        Symbol to = args.get(2);\n+        if (!Literal.isLiteral(to, DataTypes.STRING)) {\n+            return this;\n+        }\n+        String fromStr = ((Input<String>) from).value();\n+        String toStr = ((Input<String>) to).value();\n+        return new TranslateFunction(signature, boundSignature, computeMap(fromStr, toStr));\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<String>[] args) {\n+        assert args.length == 3 : \"translate takes exactly three arguments\";\n+        String source = args[0].value();\n+        String from = args[1].value();\n+        String to = args[2].value();\n+        if (source == null || from == null || to == null) {\n+            return null;\n+        }\n+        if (source.length() == 0 || from.length() == 0) {\n+            return source;\n+        }\n+        Map<Character, Character> tmap = this.tmap;\n+        if (tmap == null) {\n+            tmap = computeMap(from, to);\n+        }\n+        return translate(tmap, source);\n+    }\n+\n+    private static String translate(Map<Character, Character> tmap, String source) {\n+        int sourceLen = source.length();\n+        char[] result = new char[sourceLen];\n+        int resultCount = 0;\n+        for (int i = 0; i < sourceLen; i++) {\n+            char c = source.charAt(i);\n+            if (tmap.containsKey(c)) {\n+                char mc = tmap.get(c);\n+                if (mc != NULL) {\n+                    result[resultCount++] = mc;\n+                }\n+            } else {\n+                result[resultCount++] = c;\n+            }", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\nindex 75cddd2c4b..baa7644102 100644\n--- a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n+++ b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n\n@@ -31,7 +31,6 @@ import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n import io.crate.types.DataTypes;\n-import io.crate.types.TypeSignature;\n \n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NjYzMQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503256631", "bodyText": "avoids boxing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            char mc = NULL;\n          \n          \n            \n                            var mc = NULL;", "author": "seut", "createdAt": "2020-10-12T12:20:02Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.tmap = tmap;\n+    }\n+\n+    @Override\n+    public Scalar<String, String> compile(List<Symbol> args) {\n+        assert args.size() == 3 : \"translate takes exactly three arguments\";\n+\n+        Symbol from = args.get(1);\n+        if (!Literal.isLiteral(from, DataTypes.STRING)) {\n+            return this;\n+        }\n+        Symbol to = args.get(2);\n+        if (!Literal.isLiteral(to, DataTypes.STRING)) {\n+            return this;\n+        }\n+        String fromStr = ((Input<String>) from).value();\n+        String toStr = ((Input<String>) to).value();\n+        return new TranslateFunction(signature, boundSignature, computeMap(fromStr, toStr));\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<String>[] args) {\n+        assert args.length == 3 : \"translate takes exactly three arguments\";\n+        String source = args[0].value();\n+        String from = args[1].value();\n+        String to = args[2].value();\n+        if (source == null || from == null || to == null) {\n+            return null;\n+        }\n+        if (source.length() == 0 || from.length() == 0) {\n+            return source;\n+        }\n+        Map<Character, Character> tmap = this.tmap;\n+        if (tmap == null) {\n+            tmap = computeMap(from, to);\n+        }\n+        return translate(tmap, source);\n+    }\n+\n+    private static String translate(Map<Character, Character> tmap, String source) {\n+        int sourceLen = source.length();\n+        char[] result = new char[sourceLen];\n+        int resultCount = 0;\n+        for (int i = 0; i < sourceLen; i++) {\n+            char c = source.charAt(i);\n+            if (tmap.containsKey(c)) {\n+                char mc = tmap.get(c);\n+                if (mc != NULL) {\n+                    result[resultCount++] = mc;\n+                }\n+            } else {\n+                result[resultCount++] = c;\n+            }\n+        }\n+        return String.valueOf(result, 0, resultCount);\n+    }\n+\n+    private static Map<Character, Character> computeMap(String from, String to) {\n+        Map<Character, Character> tmap = new HashMap<>();\n+        for (int i = 0; i < from.length(); i++) {\n+            char c = from.charAt(i);\n+            if (!tmap.containsKey(c)) {\n+                char mc = NULL;", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "chunk": "diff --git a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\nindex 75cddd2c4b..baa7644102 100644\n--- a/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n+++ b/server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java\n\n@@ -31,7 +31,6 @@ import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n import io.crate.types.DataTypes;\n-import io.crate.types.TypeSignature;\n \n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1Nzc2Mg==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503257762", "bodyText": "Thanks for that. I think this is only interesting for now but has no real benefit of keeping it, so I think we shouldn't commit it.", "author": "seut", "createdAt": "2020-10-12T12:22:11Z", "path": "benchmarks/src/test/java/io/crate/execution/StringTranslateTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Timeout;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiFunction;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Measurement(iterations = 4)\n+@Timeout(time = 30_000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 2, time = 10_000, timeUnit = TimeUnit.MILLISECONDS)\n+public class StringTranslateTest {", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "chunk": "diff --git a/benchmarks/src/test/java/io/crate/execution/StringTranslateTest.java b/benchmarks/src/test/java/io/crate/execution/StringTranslateTest.java\ndeleted file mode 100644\nindex d81a8f4682..0000000000\n--- a/benchmarks/src/test/java/io/crate/execution/StringTranslateTest.java\n+++ /dev/null\n\n@@ -1,318 +0,0 @@\n-/*\n- * Licensed to Crate under one or more contributor license agreements.\n- * See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.  Crate licenses this file\n- * to you under the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.  You may\n- * obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n- * implied.  See the License for the specific language governing\n- * permissions and limitations under the License.\n- *\n- * However, if you have executed another commercial license agreement\n- * with Crate these terms will supersede the license and you may use the\n- * software solely pursuant to the terms of the relevant commercial\n- * agreement.\n- */\n-\n-package io.crate.execution;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Timeout;\n-import org.openjdk.jmh.annotations.Warmup;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.BiFunction;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@State(Scope.Benchmark)\n-@Fork(value = 1)\n-@Measurement(iterations = 4)\n-@Timeout(time = 30_000, timeUnit = TimeUnit.MILLISECONDS)\n-@Warmup(iterations = 2, time = 10_000, timeUnit = TimeUnit.MILLISECONDS)\n-public class StringTranslateTest {\n-\n-    private static final char NULL = '\\0';\n-    private static final int LOOP_SIZE = 400;\n-\n-    private static final String FROM_20 = generateRandomString(20);\n-    private static final String TO_20 = generateRandomString(20);\n-    private static final String TEXT_200 = generateRandomString(200);\n-    private static final String FROM_10 = FROM_20.substring(0, 10);\n-    private static final String TO_10 = TO_20.substring(0, 10);\n-    private static final String TEXT_20 = TEXT_200.substring(0, 20);\n-    private static final String FROM_5 = FROM_20.substring(0, 5);\n-    private static final String TO_5 = TO_20.substring(0, 5);\n-    private static final String TEXT_40 = TEXT_200.substring(0, 40);\n-\n-    @Benchmark\n-    public void test_translate_array_5_20(Blackhole blackhole) {\n-        testTranslate(TArray::new, FROM_5, TO_5, TEXT_20, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_array_10_40(Blackhole blackhole) {\n-        testTranslate(TArray::new, FROM_10, TO_10, TEXT_40, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_array_20_200(Blackhole blackhole) {\n-        testTranslate(TArray::new, FROM_20, TO_20, TEXT_200, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_map_5_20(Blackhole blackhole) {\n-        testTranslate(TMap::new, FROM_5, TO_5, TEXT_20, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_map_10_40(Blackhole blackhole) {\n-        testTranslate(TMap::new, FROM_10, TO_10, TEXT_40, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_map_20_200(Blackhole blackhole) {\n-        testTranslate(TMap::new, FROM_20, TO_20, TEXT_200, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_customMap_5_20(Blackhole blackhole) {\n-        testTranslate(TMapCustom::new, FROM_5, TO_5, TEXT_20, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_customMap_10_40(Blackhole blackhole) {\n-        testTranslate(TMapCustom::new, FROM_10, TO_10, TEXT_40, blackhole);\n-    }\n-\n-    @Benchmark\n-    public void test_translate_customMap_20_200(Blackhole blackhole) {\n-        testTranslate(TMapCustom::new, FROM_20, TO_20, TEXT_200, blackhole);\n-    }\n-\n-    private static String generateRandomString(int size) {\n-        StringBuilder sb = new StringBuilder(size);\n-        ThreadLocalRandom rand = ThreadLocalRandom.current();\n-        for (int i = 0; i < size; i++) {\n-            char c = (char) rand.nextInt('a', 'z' + 1);\n-            sb.append(c);\n-        }\n-        return sb.toString();\n-    }\n-\n-    private static void testTranslate(BiFunction<String, String, Translator> tFactory,\n-                                      String from,\n-                                      String to,\n-                                      String text,\n-                                      Blackhole blackhole) {\n-        Translator tmap = tFactory.apply(from, to);\n-        for (int i = 0; i < LOOP_SIZE; i++) {\n-            blackhole.consume(tmap.translate(text));\n-        }\n-    }\n-\n-    private interface Translator {\n-        String translate(String source);\n-    }\n-\n-    private static class TArray implements Translator {\n-        private final char[] keys;\n-        private final char[] values;\n-\n-        TArray(String from, String to) {\n-            keys = from.toCharArray();\n-            values = to.toCharArray();\n-        }\n-\n-        @Override\n-        public String translate(String source) {\n-            int sourceLen = source.length();\n-            char[] result = new char[sourceLen];\n-            int resultCount = 0;\n-            for (int i = 0; i < sourceLen; i++) {\n-                char key = source.charAt(i);\n-                int j = 0;\n-                for (; j < keys.length; j++) {\n-                    if (key == keys[j]) {\n-                        if (j < values.length) {\n-                            result[resultCount++] = values[j];\n-                        }\n-                        break;\n-                    }\n-                }\n-                if (j >= keys.length) {\n-                    result[resultCount++] = key;\n-                }\n-            }\n-            return String.valueOf(result, 0, resultCount);\n-        }\n-    }\n-\n-    private static class TMap implements Translator {\n-        private final Map<Character, Character> map;\n-\n-        TMap(String from, String to) {\n-            map = new HashMap<>();\n-            for (int i = 0; i < from.length(); i++) {\n-                char c = from.charAt(i);\n-                if (map.containsKey(c)) {\n-                    continue;\n-                }\n-                char mc = NULL;\n-                if (i < to.length()) {\n-                    mc = to.charAt(i);\n-                }\n-                map.put(c, mc);\n-            }\n-        }\n-\n-        @Override\n-        public String translate(String source) {\n-            int sourceLen = source.length();\n-            char[] result = new char[sourceLen];\n-            int resultCount = 0;\n-            for (int i = 0; i < sourceLen; i++) {\n-                char key = source.charAt(i);\n-                if (map.containsKey(key)) {\n-                    char mc = map.get(key);\n-                    if (mc != NULL) {\n-                        result[resultCount++] = mc;\n-                    }\n-                } else {\n-                    result[resultCount++] = key;\n-                }\n-            }\n-            return String.valueOf(result, 0, resultCount);\n-        }\n-    }\n-\n-    private static class TMapCustom implements Translator {\n-        private final char[] keys;\n-        private final char[] values;\n-\n-        TMapCustom(String from, String to) {\n-            keys = from.toCharArray();\n-            values = to.toCharArray();\n-            if (keys.length > 1) {\n-                qsort();\n-            }\n-        }\n-\n-        @Override\n-        public String translate(String source) {\n-            int sourceLen = source.length();\n-            char[] result = new char[sourceLen];\n-            int resultCount = 0;\n-            for (int i = 0; i < sourceLen; i++) {\n-                char key = source.charAt(i);\n-                int keyIdx = findIdxOfFirst(key);\n-                if (keyIdx >= 0) {\n-                    char mc = values[keyIdx];\n-                    if (mc != NULL) {\n-                        result[resultCount++] = mc;\n-                    }\n-                } else {\n-                    result[resultCount++] = key;\n-                }\n-            }\n-            return String.valueOf(result, 0, resultCount);\n-        }\n-\n-        private final int findIdxOfFirst(char key) {\n-            int start = 0;\n-            int end = keys.length - 1;\n-            while (start <= end) {\n-                int mid = (start + end) >>> 1;\n-                char midVal = keys[mid];\n-                if (midVal < key) {\n-                    start = mid + 1;\n-                } else if (midVal > key) {\n-                    end = mid - 1;\n-                } else if (start != mid) {\n-                    // key found but tree not exhausted,\n-                    // limit search range to return 1st\n-                    // occurrence\n-                    end = mid;\n-                } else {\n-                    return mid;\n-                }\n-            }\n-            return -(start + 1);\n-        }\n-\n-        private void qsort() {\n-            int start = 0;\n-            int end = keys.length - 1;\n-            int stack[] = new int[end - start + 1];\n-            int top = -1;\n-            stack[++top] = start;\n-            stack[++top] = end;\n-            while (top >= 0) {\n-                end = stack[top--];\n-                start = stack[top--];\n-                char pivot = keys[end];\n-                int i = start - 1;\n-                for (int j = start; j < end; j++) {\n-                    if (keys[j] <= pivot) {\n-                        i++;\n-                        swap(i, j);\n-                    }\n-                }\n-                int p = i + 1;\n-                swap(p, end);\n-                if (p - 1 > start) {\n-                    // there are elements left of pivot, push left\n-                    stack[++top] = start;\n-                    stack[++top] = p - 1;\n-                }\n-                if (p + 1 < end) {\n-                    // there are elements right of pivot, push right\n-                    stack[++top] = p + 1;\n-                    stack[++top] = end;\n-                }\n-            }\n-        }\n-\n-        private void swap(int i, int j) {\n-            char tmp = keys[i];\n-            keys[i] = keys[j];\n-            keys[j] = tmp;\n-            tmp = values[i];\n-            values[i] = values[j];\n-            values[j] = tmp;\n-        }\n-    }\n-\n-    // Benchmark                        Mode  Cnt    Score     Error  Units\n-    // test_translate_array_5_20        avgt    4   38.168 \u00b1   3.099  us/op\n-    // test_translate_array_10_40       avgt    4  102.894 \u00b1   4.036  us/op\n-    // test_translate_array_20_200      avgt    4  497.691 \u00b1  20.351  us/op\n-\n-    // test_translate_map_5_20          avgt    4   40.106 \u00b1   4.610  us/op\n-    // test_translate_map_10_40         avgt    4   89.471 \u00b1  10.457  us/op\n-    // test_translate_map_20_200        avgt    4  444.182 \u00b1  42.966  us/op\n-\n-    // test_translate_customMap_5_20    avgt    4   57.248 \u00b1  58.731  us/op\n-    // test_translate_customMap_10_40   avgt    4  145.292 \u00b1 136.533  us/op\n-    // test_translate_customMap_20_200  avgt    4  583.786 \u00b1  83.055  us/op\n-\n-    // Array behaves well, but the hash map backed approach behaves homogeneously\n-    // well.\n-}\n"}}, {"oid": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "url": "https://github.com/crate/crate/commit/d2e6f73b0b7455093bc4279bb7bed466923cef5a", "message": "Basti's improvement suggestions", "committedDate": "2020-10-12T13:11:28Z", "type": "forcePushed"}, {"oid": "0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "url": "https://github.com/crate/crate/commit/0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "message": "Add scalar function translate\n\nTranslate performs several single-character, one-to-one translation in one operation.\nE.g. translate('Crate', 'Ct', 'Dk') == 'Drake'", "committedDate": "2020-10-12T14:21:05Z", "type": "commit"}, {"oid": "0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "url": "https://github.com/crate/crate/commit/0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "message": "Add scalar function translate\n\nTranslate performs several single-character, one-to-one translation in one operation.\nE.g. translate('Crate', 'Ct', 'Dk') == 'Drake'", "committedDate": "2020-10-12T14:21:05Z", "type": "forcePushed"}]}