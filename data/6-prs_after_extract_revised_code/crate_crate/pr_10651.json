{"pr_number": 10651, "pr_title": "Prevent dropping of a UDF used inside a generated col expression", "pr_createdAt": "2020-10-12T15:43:22Z", "pr_url": "https://github.com/crate/crate/pull/10651", "timeline": [{"oid": "2722f9c2c036ce30c0796b380c2a04ff9aa60eec", "url": "https://github.com/crate/crate/commit/2722f9c2c036ce30c0796b380c2a04ff9aa60eec", "message": "Prevent dropping of a UDF used inside a generated col expression\n\nUDFs which are used inside any generated column expression must\nnot be able to be dropped, otherwise the table info fails on\nresolving, making the table unusable.", "committedDate": "2020-10-12T15:44:31Z", "type": "forcePushed"}, {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515", "url": "https://github.com/crate/crate/commit/147d5d8a52896d4657f796eaf623cc4865cb3515", "message": "Prevent dropping of a UDF used inside a generated col expression\n\nUDFs which are used inside any generated column expression must\nnot be able to be dropped, otherwise the table info fails on\nresolving, making the table unusable.", "committedDate": "2020-10-12T15:45:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDMxNQ==", "url": "https://github.com/crate/crate/pull/10651#discussion_r503384315", "bodyText": "This is flaky and sometimes result in 5000 instead, any idea why?", "author": "seut", "createdAt": "2020-10-12T15:48:42Z", "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -344,4 +349,20 @@ public void test_pg_function_is_visible_when_oid_is_retrieved_from_column() thro\n         assertThat(response.rows()[0][0], is(true));\n         execute(\"drop table oid_test\");\n     }\n+\n+    @Test\n+    public void test_udf_used_inside_generated_column_definition_cannot_be_dropped() {\n+        execute(\"create function doc.foo(long) returns string language dummy_lang as\" +\n+            \" 'function foo(a) { return a; }'\");\n+        execute(\"create table doc.t1 (id long, l as doc.foo(id))\");\n+\n+        assertThrows(\n+            () -> execute(\"drop function doc.foo(long)\"),\n+            isSQLError(containsString(\n+                    \"Function 'doc.foo(bigint)' cannot be dropped because it is still in use as a generated column expression at: doc.t1.l AS doc.foo(id)\"),\n+                INTERNAL_ERROR,\n+                BAD_REQUEST,\n+                4003)", "originalCommit": "147d5d8a52896d4657f796eaf623cc4865cb3515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bccbf56dcea43e653b0640e5c69b401902d3839a", "chunk": "diff --git a/server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java b/server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java\nindex 06c561aca0..19ce183def 100644\n--- a/server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java\n+++ b/server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java\n\n@@ -359,7 +359,7 @@ public class UserDefinedFunctionsIntegrationTest extends SQLTransportIntegration\n         assertThrows(\n             () -> execute(\"drop function doc.foo(long)\"),\n             isSQLError(containsString(\n-                    \"Function 'doc.foo(bigint)' cannot be dropped because it is still in use as a generated column expression at: doc.t1.l AS doc.foo(id)\"),\n+                    \"Cannot drop function 'doc.foo(bigint)', it is still in use by 'doc.t1.l AS doc.foo(id)'\"),\n                 INTERNAL_ERROR,\n                 BAD_REQUEST,\n                 4003)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDc5Ng==", "url": "https://github.com/crate/crate/pull/10651#discussion_r503384796", "bodyText": "We must pass in the schemas here instead of getting it as a guice singleton on the ctor to avoid circular dependencies.", "author": "seut", "createdAt": "2020-10-12T15:49:32Z", "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -123,7 +133,8 @@ void dropFunction(final String schema,\n                       final List<DataType<?>> argumentTypes,\n                       final boolean ifExists,\n                       final ActionListener<AcknowledgedResponse> listener,\n-                      final TimeValue timeout) {\n+                      final TimeValue timeout,\n+                      Schemas schemas) {", "originalCommit": "147d5d8a52896d4657f796eaf623cc4865cb3515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6224e90ca1c1a1445135f204ac45525183bb3629", "chunk": "diff --git a/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java b/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\nindex 976461f2e7..7bb4545cea 100644\n--- a/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\n+++ b/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\n\n@@ -133,8 +137,7 @@ public class UserDefinedFunctionService {\n                       final List<DataType<?>> argumentTypes,\n                       final boolean ifExists,\n                       final ActionListener<AcknowledgedResponse> listener,\n-                      final TimeValue timeout,\n-                      Schemas schemas) {\n+                      final TimeValue timeout) {\n         clusterService.submitStateUpdateTask(\"drop_udf [\" + schema + \".\" + name + \" - \" + argumentTypes + \"]\",\n             new ClusterStateUpdateTask() {\n                 @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ==", "url": "https://github.com/crate/crate/pull/10651#discussion_r503392455", "bodyText": "Shouldn't this operate on the currentState of the ClusterStateUpdateTask ?\nSchemas is updated via clusterChanged events and I think there could be some race conditions - e.g. UDF being dropped while concurrently a new table is created that uses it.", "author": "mfussenegger", "createdAt": "2020-10-12T16:02:10Z", "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +263,37 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functions,\n+                                                             Schemas schemas) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functions.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtx = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functions.functionsMetadata().stream(), nodeCtx);\n+\n+        for (var schemaInfo : schemas) {", "originalCommit": "147d5d8a52896d4657f796eaf623cc4865cb3515", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMjM5NA==", "url": "https://github.com/crate/crate/pull/10651#discussion_r503402394", "bodyText": "right, also recognized just now. will come up with a new approach.", "author": "seut", "createdAt": "2020-10-12T16:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1NjYzOA==", "url": "https://github.com/crate/crate/pull/10651#discussion_r503856638", "bodyText": "I've pushed a fixup solving this.", "author": "seut", "createdAt": "2020-10-13T10:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MTUzMw==", "url": "https://github.com/crate/crate/pull/10651#discussion_r503951533", "bodyText": "Did you consider going through the metadata directly and use the DocTableInfoFactory or DocTableInfoBuilder builder to create the instances?\nIterating over schemas will include the built-in schemas which we know that they don't have generated columns. I think there's also more overhead involved as it adds the instances to internal maps and so on.\nAlso fine to keep it as is for me - given that dropping UDFs shouldn't be a common operation.", "author": "mfussenegger", "createdAt": "2020-10-13T13:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2MTkzMA==", "url": "https://github.com/crate/crate/pull/10651#discussion_r504061930", "bodyText": "good point, was even simple to do. pushed another fixup (this also reverts the commit before).", "author": "seut", "createdAt": "2020-10-13T15:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bccbf56dcea43e653b0640e5c69b401902d3839a", "chunk": "diff --git a/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java b/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\nindex 976461f2e7..41154529bc 100644\n--- a/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\n+++ b/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\n\n@@ -267,13 +269,26 @@ public class UserDefinedFunctionService {\n     private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n                                                              String functionName,\n                                                              UserDefinedFunctionsMetadata functions,\n-                                                             Schemas schemas) {\n+                                                             Schemas oldSchemas,\n+                                                             ClusterState currentState) {\n         // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n         // Otherwise the lazy table factories will already fail while evaluating generated functions.\n         // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n         var nodeCtx = new NodeContext(this.nodeCtx.functions().copyOf());\n         updateImplementations(schema, functions.functionsMetadata().stream(), nodeCtx);\n \n+        // Create a new schemas instance based on the current cluster state,\n+        // this ensures everything is operating on the same state atomically\n+        var schemas = new Schemas(\n+            oldSchemas.getBuiltInSchemas(),\n+            oldSchemas.getDocSchemaInfoFactory(),\n+            () -> currentState\n+        );\n+        // Schemas are built lazy on new events so we must trigger it\n+        schemas.clusterChanged(\n+            new ClusterChangedEvent(\"initialize schemas\", ClusterState.EMPTY_STATE, currentState)\n+        );\n+\n         for (var schemaInfo : schemas) {\n             for (var tableInfo : schemaInfo.getTables()) {\n                 TableReferenceResolver tableReferenceResolver = new TableReferenceResolver(tableInfo.columns(), tableInfo.ident());\n"}}, {"oid": "bccbf56dcea43e653b0640e5c69b401902d3839a", "url": "https://github.com/crate/crate/commit/bccbf56dcea43e653b0640e5c69b401902d3839a", "message": "fixup! Prevent dropping of a UDF used inside a generated col expression", "committedDate": "2020-10-13T10:35:43Z", "type": "forcePushed"}, {"oid": "6224e90ca1c1a1445135f204ac45525183bb3629", "url": "https://github.com/crate/crate/commit/6224e90ca1c1a1445135f204ac45525183bb3629", "message": "fixup! Prevent dropping of a UDF used inside a generated col expression", "committedDate": "2020-10-13T17:22:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODEwMA==", "url": "https://github.com/crate/crate/pull/10651#discussion_r504478100", "bodyText": "If we filter out all partitions, wouldn't we also need to go through the templates to make sure we also check that the UDF is not used within a partitioned table?", "author": "mfussenegger", "createdAt": "2020-10-14T08:00:37Z", "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +266,49 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functionsMetadata,\n+                                                             ClusterState currentState) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functionsMetadata.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtxWithRemovedFunction = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functionsMetadata.functionsMetadata().stream(), nodeCtxWithRemovedFunction);\n+\n+        var metadata = currentState.metadata();\n+        var indices = Stream.of(metadata.getConcreteAllIndices()).filter(NO_BLOB_NOR_DANGLING)\n+            .map(IndexParts::new)\n+            .filter(indexParts -> !indexParts.isPartitioned())", "originalCommit": "6224e90ca1c1a1445135f204ac45525183bb3629", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5MzIzNQ==", "url": "https://github.com/crate/crate/pull/10651#discussion_r504493235", "bodyText": "damn I forgot \ud83e\udd26", "author": "seut", "createdAt": "2020-10-14T08:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODEwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjUwNA==", "url": "https://github.com/crate/crate/pull/10651#discussion_r504572504", "bodyText": "fixup pushed", "author": "seut", "createdAt": "2020-10-14T10:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "baf16b6ea7e51eb10606f757ae0914aa3850d310", "chunk": "diff --git a/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java b/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\nindex 7bb4545cea..eb3c56d139 100644\n--- a/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\n+++ b/server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java\n\n@@ -267,14 +267,14 @@ public class UserDefinedFunctionService {\n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n \n-    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+    void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n                                                              String functionName,\n                                                              UserDefinedFunctionsMetadata functionsMetadata,\n                                                              ClusterState currentState) {\n         // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n         // Otherwise the lazy table factories will already fail while evaluating generated functionsMetadata.\n         // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n-        var nodeCtxWithRemovedFunction = new NodeContext(this.nodeCtx.functions().copyOf());\n+        var nodeCtxWithRemovedFunction = new NodeContext(nodeCtx.functions().copyOf());\n         updateImplementations(schema, functionsMetadata.functionsMetadata().stream(), nodeCtxWithRemovedFunction);\n \n         var metadata = currentState.metadata();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MzA4Ng==", "url": "https://github.com/crate/crate/pull/10651#discussion_r504573086", "bodyText": "I've added unit tests by the latest fixup commit, shall we still keep this for the  full-stack test (testing that the validation code is triggered)?", "author": "seut", "createdAt": "2020-10-14T10:33:29Z", "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -344,4 +349,20 @@ public void test_pg_function_is_visible_when_oid_is_retrieved_from_column() thro\n         assertThat(response.rows()[0][0], is(true));\n         execute(\"drop table oid_test\");\n     }\n+\n+    @Test\n+    public void test_udf_used_inside_generated_column_definition_cannot_be_dropped() {", "originalCommit": "be7d5c42026192aeadc44e537ade8a8b6304d9e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxNDAyNg==", "url": "https://github.com/crate/crate/pull/10651#discussion_r504614026", "bodyText": "Yep would keep one integration test \ud83d\udc4d", "author": "mfussenegger", "createdAt": "2020-10-14T11:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MzA4Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "baf16b6ea7e51eb10606f757ae0914aa3850d310", "url": "https://github.com/crate/crate/commit/baf16b6ea7e51eb10606f757ae0914aa3850d310", "message": "Prevent dropping of a UDF used inside a generated col expression\n\nUDFs which are used inside any generated column expression must\nnot be able to be dropped, otherwise the table info fails on\nresolving, making the table unusable.", "committedDate": "2020-10-14T11:57:59Z", "type": "forcePushed"}, {"oid": "c1a372e96ba7505a464a720a377edc60bad7a5e9", "url": "https://github.com/crate/crate/commit/c1a372e96ba7505a464a720a377edc60bad7a5e9", "message": "Prevent dropping of a UDF used inside a generated col expression\n\nUDFs which are used inside any generated column expression must\nnot be able to be dropped, otherwise the table info fails on\nresolving, making the table unusable.", "committedDate": "2020-10-14T12:21:02Z", "type": "forcePushed"}, {"oid": "58e5a3d45bc8802fc082c46260f64f4b0f8254f7", "url": "https://github.com/crate/crate/commit/58e5a3d45bc8802fc082c46260f64f4b0f8254f7", "message": "Prevent dropping of a UDF used inside a generated col expression\n\nUDFs which are used inside any generated column expression must\nnot be able to be dropped, otherwise the table info fails on\nresolving, making the table unusable.", "committedDate": "2020-10-15T08:01:24Z", "type": "commit"}, {"oid": "58e5a3d45bc8802fc082c46260f64f4b0f8254f7", "url": "https://github.com/crate/crate/commit/58e5a3d45bc8802fc082c46260f64f4b0f8254f7", "message": "Prevent dropping of a UDF used inside a generated col expression\n\nUDFs which are used inside any generated column expression must\nnot be able to be dropped, otherwise the table info fails on\nresolving, making the table unusable.", "committedDate": "2020-10-15T08:01:24Z", "type": "forcePushed"}]}