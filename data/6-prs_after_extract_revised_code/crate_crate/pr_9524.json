{"pr_number": 9524, "pr_title": "Implement equals, hashCode and isConvertableTo in ObjectType.", "pr_createdAt": "2020-01-16T15:17:49Z", "pr_url": "https://github.com/crate/crate/pull/9524", "timeline": [{"oid": "d455ca66c259f5cee03e7f9886bce1dbb6f8ef6f", "url": "https://github.com/crate/crate/commit/d455ca66c259f5cee03e7f9886bce1dbb6f8ef6f", "message": "Implement equals and isConvertableTo in ObjectType.", "committedDate": "2020-01-17T11:03:46Z", "type": "forcePushed"}, {"oid": "2718498c23b293443e165929fd483a97065ce562", "url": "https://github.com/crate/crate/commit/2718498c23b293443e165929fd483a97065ce562", "message": "Implement equals and isConvertableTo in ObjectType.", "committedDate": "2020-01-17T14:19:29Z", "type": "forcePushed"}, {"oid": "e7d43c82465d8205d3d50231be8f9e35e0c0fbe8", "url": "https://github.com/crate/crate/commit/e7d43c82465d8205d3d50231be8f9e35e0c0fbe8", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-17T14:39:42Z", "type": "forcePushed"}, {"oid": "9e1c76f3ced71f027547cd17f13526379761c762", "url": "https://github.com/crate/crate/commit/9e1c76f3ced71f027547cd17f13526379761c762", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T09:06:17Z", "type": "forcePushed"}, {"oid": "af533c9ae03c173541bb3f6b5671dad3feee0a29", "url": "https://github.com/crate/crate/commit/af533c9ae03c173541bb3f6b5671dad3feee0a29", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T10:08:09Z", "type": "forcePushed"}, {"oid": "500292e3efb0abc722f20ca75521ad174bec244d", "url": "https://github.com/crate/crate/commit/500292e3efb0abc722f20ca75521ad174bec244d", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T11:05:08Z", "type": "forcePushed"}, {"oid": "e34c20ac6e67ad2f2c88e6cc738a99926e5c39a4", "url": "https://github.com/crate/crate/commit/e34c20ac6e67ad2f2c88e6cc738a99926e5c39a4", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T12:46:35Z", "type": "forcePushed"}, {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732", "url": "https://github.com/crate/crate/commit/9dcb773e32cc5004064c93d4b471896fe071a732", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T13:07:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368538657", "bodyText": "or shall we go with catching Exception as it is done in  normalizePrimitiveValue?", "author": "kovrus", "createdAt": "2020-01-20T13:09:10Z", "path": "sql/src/main/java/io/crate/analyze/expressions/ValueNormalizer.java", "diffHunk": "@@ -68,7 +69,7 @@ public static Symbol normalizeInputForReference(Symbol valueSymbol, Reference re\n         Literal<?> literal;\n         try {\n             literal = (Literal<?>) valueSymbol.cast(reference.valueType());\n-        } catch (ConversionException e) {", "originalCommit": "9dcb773e32cc5004064c93d4b471896fe071a732", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MDYxOQ==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368560619", "bodyText": "maybe I'm missing something: how can a PgArrayParsingException happen here?", "author": "seut", "createdAt": "2020-01-20T13:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MzE3OQ==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368563179", "bodyText": "I think it is better to be more specific when catching the exceptions.", "author": "mfussenegger", "createdAt": "2020-01-20T14:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MzIzNA==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368583234", "bodyText": "@seut because we use PgArrayParser in ArrayType now, see 470eaa5#diff-299c839efaea31569151e5ad86ebab25R115", "author": "kovrus", "createdAt": "2020-01-20T14:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NDc0MQ==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368584741", "bodyText": "ah right, on literal casts, value() is called.", "author": "seut", "createdAt": "2020-01-20T14:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f5eacab9d7e16b0145b69187dd24426212453a76", "url": "https://github.com/crate/crate/commit/f5eacab9d7e16b0145b69187dd24426212453a76", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T13:25:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MTAxNA==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368541014", "bodyText": "why isn't this type added to the list above (no extra assertion)?", "author": "seut", "createdAt": "2020-01-20T13:15:16Z", "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -183,14 +185,17 @@ public void testIpNegativeValue() throws Exception {\n \n     @Test\n     public void selfConversionTest() throws Exception {\n-        for (DataType type : com.google.common.collect.Iterables.concat(\n+        for (DataType<?> type : Lists2.concat(\n             DataTypes.PRIMITIVE_TYPES,\n-            Arrays.asList(DataTypes.UNDEFINED, DataTypes.GEO_POINT, DataTypes.GEO_SHAPE, ObjectType.untyped()))) {\n-\n-            assertTrue(type.isConvertableTo(type));\n-\n-            ArrayType arrayType = new ArrayType(type);\n-            assertTrue(arrayType.isConvertableTo(arrayType));\n+            List.of(DataTypes.UNDEFINED, DataTypes.GEO_POINT, DataTypes.GEO_SHAPE, ObjectType.untyped()))) {\n+            assertThat(\n+                \"type '\" + type + \"' is not self convertible\",\n+                type.isConvertableTo(type), is(true));\n+\n+            ArrayType<?> arrayType = new ArrayType<>(type);", "originalCommit": "9dcb773e32cc5004064c93d4b471896fe071a732", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MDM1NQ==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368580355", "bodyText": "it creates an array type for each type from the list above, thus, we cannot add it to the list above.", "author": "kovrus", "createdAt": "2020-01-20T14:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MTAxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MjIyOQ==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368542229", "bodyText": "shouldn't this be ObjectType.undefined() as well? otherwise it tests the same as here https://github.com/crate/crate/pull/9524/files#diff-726498b21d19949db0e0009971e5b32eR253", "author": "seut", "createdAt": "2020-01-20T13:18:00Z", "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -234,4 +239,38 @@ public void testTimestampToDoubleConversion() {\n             is(true));\n \n     }\n+\n+    @Test\n+    public void test_object_to_object_conversion_no_inner() {\n+        var objectTypeWithInner = ObjectType.builder().setInnerType(\"field\", DataTypes.STRING).build();", "originalCommit": "9dcb773e32cc5004064c93d4b471896fe071a732", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MDg2MA==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368580860", "bodyText": "yes, copy paste error. i drop this test, coz there is already self conversion test that asserts this scenario.", "author": "kovrus", "createdAt": "2020-01-20T14:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MjIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "24db150b8c3b154ac7d99bea4454dc2ce33807c1", "chunk": "diff --git a/common/src/test/java/io/crate/types/TypeConversionTest.java b/common/src/test/java/io/crate/types/TypeConversionTest.java\nindex 1d7bba61cb..18eef86aa7 100644\n--- a/common/src/test/java/io/crate/types/TypeConversionTest.java\n+++ b/common/src/test/java/io/crate/types/TypeConversionTest.java\n\n@@ -240,15 +240,6 @@ public class TypeConversionTest extends CrateUnitTest {\n \n     }\n \n-    @Test\n-    public void test_object_to_object_conversion_no_inner() {\n-        var objectTypeWithInner = ObjectType.builder().setInnerType(\"field\", DataTypes.STRING).build();\n-        var objectTypeWithoutInner = ObjectType.untyped();\n-\n-        assertThat(objectTypeWithInner.isConvertableTo(objectTypeWithoutInner), is(true));\n-        assertThat(objectTypeWithoutInner.isConvertableTo(objectTypeWithInner), is(true));\n-    }\n-    \n     @Test\n     public void test_object_to_object_conversion_when_either_has_no_inner_types() {\n         var objectTypeWithInner = ObjectType.builder().setInnerType(\"field\", DataTypes.STRING).build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MDE1OA==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368560158", "bodyText": "unused imports?", "author": "seut", "createdAt": "2020-01-20T13:57:00Z", "path": "sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java", "diffHunk": "@@ -22,6 +22,8 @@\n package io.crate.integrationtests;\n \n import io.crate.action.sql.SQLActionException;\n+import io.crate.exceptions.ColumnValidationException;\n+import io.crate.exceptions.SQLParseException;", "originalCommit": "f5eacab9d7e16b0145b69187dd24426212453a76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24db150b8c3b154ac7d99bea4454dc2ce33807c1", "chunk": "diff --git a/sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java b/sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java\nindex 422aa9c219..8feeee1c7a 100644\n--- a/sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java\n\n@@ -22,8 +22,6 @@\n package io.crate.integrationtests;\n \n import io.crate.action.sql.SQLActionException;\n-import io.crate.exceptions.ColumnValidationException;\n-import io.crate.exceptions.SQLParseException;\n import io.crate.testing.SQLResponse;\n import io.crate.testing.TestingHelpers;\n import io.crate.testing.UseJdbc;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MTk4Mg==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368561982", "bodyText": "Is it okay to use unnest like this here? What if one array has more dimensions than the other?", "author": "mfussenegger", "createdAt": "2020-01-20T14:00:48Z", "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -413,6 +414,28 @@ public static void register(int id, Writeable.Reader<DataType<?>> dataType) {\n         return streamer;\n     }\n \n+    public static boolean compareTypesById(DataType<?> left, DataType<?> right) {\n+        if (left.id() != right.id()) {\n+            return false;\n+        } else if (isArray(left)) {\n+            return compareTypesById(unnest(left), unnest(right));", "originalCommit": "f5eacab9d7e16b0145b69187dd24426212453a76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24db150b8c3b154ac7d99bea4454dc2ce33807c1", "chunk": "diff --git a/common/src/main/java/io/crate/types/DataTypes.java b/common/src/main/java/io/crate/types/DataTypes.java\nindex 6af072cc3a..65c54fd11e 100644\n--- a/common/src/main/java/io/crate/types/DataTypes.java\n+++ b/common/src/main/java/io/crate/types/DataTypes.java\n\n@@ -418,18 +418,22 @@ public final class DataTypes {\n         if (left.id() != right.id()) {\n             return false;\n         } else if (isArray(left)) {\n-            return compareTypesById(unnest(left), unnest(right));\n+            return compareTypesById(\n+                ((ArrayType) left).innerType(),\n+                ((ArrayType) right).innerType());\n         } else {\n             return true;\n         }\n     }\n \n-    public static boolean compareTypesById(List<DataType> first, List<DataType> second) {\n-        if (first.size() != second.size()) {\n+    public static boolean compareTypesById(List<DataType> left, List<DataType> right) {\n+        if (left.size() != right.size()) {\n             return false;\n         }\n-        for (int i = 0; i < first.size(); i++) {\n-            if (!compareTypesById(first.get(i), second.get(i))) {\n+        assert left instanceof RandomAccess && right instanceof RandomAccess\n+            : \"data type lists should support RandomAccess for fast lookups\";\n+        for (int i = 0; i < left.size(); i++) {\n+            if (!compareTypesById(left.get(i), right.get(i))) {\n                 return false;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MjUxMA==", "url": "https://github.com/crate/crate/pull/9524#discussion_r368562510", "bodyText": "should we add an assertion that first and second implement RandomAccess ?", "author": "mfussenegger", "createdAt": "2020-01-20T14:01:52Z", "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -413,6 +414,28 @@ public static void register(int id, Writeable.Reader<DataType<?>> dataType) {\n         return streamer;\n     }\n \n+    public static boolean compareTypesById(DataType<?> left, DataType<?> right) {\n+        if (left.id() != right.id()) {\n+            return false;\n+        } else if (isArray(left)) {\n+            return compareTypesById(unnest(left), unnest(right));\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    public static boolean compareTypesById(List<DataType> first, List<DataType> second) {\n+        if (first.size() != second.size()) {\n+            return false;\n+        }\n+        for (int i = 0; i < first.size(); i++) {\n+            if (!compareTypesById(first.get(i), second.get(i))) {", "originalCommit": "f5eacab9d7e16b0145b69187dd24426212453a76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24db150b8c3b154ac7d99bea4454dc2ce33807c1", "chunk": "diff --git a/common/src/main/java/io/crate/types/DataTypes.java b/common/src/main/java/io/crate/types/DataTypes.java\nindex 6af072cc3a..65c54fd11e 100644\n--- a/common/src/main/java/io/crate/types/DataTypes.java\n+++ b/common/src/main/java/io/crate/types/DataTypes.java\n\n@@ -418,18 +418,22 @@ public final class DataTypes {\n         if (left.id() != right.id()) {\n             return false;\n         } else if (isArray(left)) {\n-            return compareTypesById(unnest(left), unnest(right));\n+            return compareTypesById(\n+                ((ArrayType) left).innerType(),\n+                ((ArrayType) right).innerType());\n         } else {\n             return true;\n         }\n     }\n \n-    public static boolean compareTypesById(List<DataType> first, List<DataType> second) {\n-        if (first.size() != second.size()) {\n+    public static boolean compareTypesById(List<DataType> left, List<DataType> right) {\n+        if (left.size() != right.size()) {\n             return false;\n         }\n-        for (int i = 0; i < first.size(); i++) {\n-            if (!compareTypesById(first.get(i), second.get(i))) {\n+        assert left instanceof RandomAccess && right instanceof RandomAccess\n+            : \"data type lists should support RandomAccess for fast lookups\";\n+        for (int i = 0; i < left.size(); i++) {\n+            if (!compareTypesById(left.get(i), right.get(i))) {\n                 return false;\n             }\n         }\n"}}, {"oid": "24db150b8c3b154ac7d99bea4454dc2ce33807c1", "url": "https://github.com/crate/crate/commit/24db150b8c3b154ac7d99bea4454dc2ce33807c1", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T15:01:44Z", "type": "commit"}, {"oid": "24db150b8c3b154ac7d99bea4454dc2ce33807c1", "url": "https://github.com/crate/crate/commit/24db150b8c3b154ac7d99bea4454dc2ce33807c1", "message": "Implement equals, hashCode and isConvertableTo in ObjectType.", "committedDate": "2020-01-20T15:01:44Z", "type": "forcePushed"}]}