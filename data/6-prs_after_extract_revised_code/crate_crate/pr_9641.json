{"pr_number": 9641, "pr_title": "Add _pg_expandarray table function", "pr_createdAt": "2020-02-10T15:09:12Z", "pr_url": "https://github.com/crate/crate/pull/9641", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2MTIxNA==", "url": "https://github.com/crate/crate/pull/9641#discussion_r377161214", "bodyText": "Aren't these assertions already ensured by the FuncParams definition?", "author": "seut", "createdAt": "2020-02-10T16:11:42Z", "path": "sql/src/main/java/io/crate/expression/tablefunctions/PgExpandArray.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.metadata.BaseFunctionResolver;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n+import io.crate.metadata.RelationName;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.information.InformationSchemaInfo;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.ArrayType;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+public final class PgExpandArray extends TableFunctionImplementation<List<Object>> {\n+\n+    private static final String NAME = \"_pg_expandarray\";\n+    private static final FunctionName FUNCTION_NAME = new FunctionName(InformationSchemaInfo.NAME, NAME);\n+    private static final RelationName REL_NAME = new RelationName(InformationSchemaInfo.NAME, NAME);\n+    private final RowType resultType;\n+    private final FunctionInfo info;\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            FUNCTION_NAME,\n+            new BaseFunctionResolver(FuncParams.builder(Param.ANY_ARRAY).build()) {\n+                @Override\n+                public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                    assert types.size() == 1 : \"_pg_expandarray must have a single argument due to funcParams\";\n+                    DataType<?> dataType = types.get(0);\n+                    assert dataType instanceof ArrayType : \"Argument to _pg_expandarray must be an array\";", "originalCommit": "56f1761e1ca6880c02f0a4627544c8be3060df01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2ODcxNA==", "url": "https://github.com/crate/crate/pull/9641#discussion_r377168714", "bodyText": "Yes they are, the assertion message earlier also says so: \"_pg_expandarray must have a single argument due to funcParams\";\nI like to add those to clarify that there is some kind of contract in place.", "author": "mfussenegger", "createdAt": "2020-02-10T16:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2MTIxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2NDM5NQ==", "url": "https://github.com/crate/crate/pull/9641#discussion_r377164395", "bodyText": "Is this covered by any test already?", "author": "seut", "createdAt": "2020-02-10T16:16:31Z", "path": "sql/src/main/java/io/crate/expression/scalar/SubscriptFunctions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import io.crate.common.collections.Lists2;\n+import io.crate.expression.symbol.Function;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.Symbols;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import io.crate.types.ObjectType;\n+import io.crate.types.RowType;\n+\n+public final class SubscriptFunctions {\n+\n+    @Nullable\n+    public static Function tryCreateSubscript(Symbol baseSymbol, List<String> path) {\n+        assert !path.isEmpty() : \"Path must not be empty to create subscript function\";\n+\n+        var baseType = baseSymbol.valueType();\n+        switch (baseType.id()) {\n+            case ObjectType.ID: {\n+                List<Symbol> arguments = Lists2.mapTail(baseSymbol, path, Literal::of);\n+                DataType<?> returnType = ((ObjectType) baseType).resolveInnerType(path);\n+                return new Function(\n+                    new FunctionInfo(new FunctionIdent(SubscriptObjectFunction.NAME, Symbols.typeView(arguments)), returnType),\n+                    arguments\n+                );\n+            }\n+\n+            case RowType.ID: {\n+                String child = path.get(0);\n+                RowType rowType = (RowType) baseType;\n+                int idx = rowType.fieldNames().indexOf(child);\n+                if (idx < 0) {\n+                    return null;\n+                }\n+                Function recordSubscript = new Function(\n+                    new FunctionInfo(\n+                        new FunctionIdent(SubscriptRecordFunction.NAME, List.of(baseType, DataTypes.STRING)),\n+                        rowType.getFieldType(idx)\n+                    ),\n+                    List.of(baseSymbol, Literal.of(child))\n+                );\n+                if (path.size() > 1) {\n+                    return tryCreateSubscript(recordSubscript, path.subList(1, path.size() - 1));", "originalCommit": "b1c4e7b770d8b76df1e0b720d7f966989e24ad61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2ODk2MQ==", "url": "https://github.com/crate/crate/pull/9641#discussion_r377168961", "bodyText": "No. Good point, I'll add some.", "author": "mfussenegger", "createdAt": "2020-02-10T16:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2NDM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cdb23f8c4b8367a74662489717b81e217489a5c", "chunk": "diff --git a/sql/src/main/java/io/crate/expression/scalar/SubscriptFunctions.java b/sql/src/main/java/io/crate/expression/scalar/SubscriptFunctions.java\nindex 84ec8fbd36..520927e01d 100644\n--- a/sql/src/main/java/io/crate/expression/scalar/SubscriptFunctions.java\n+++ b/sql/src/main/java/io/crate/expression/scalar/SubscriptFunctions.java\n\n@@ -69,7 +69,7 @@ public final class SubscriptFunctions {\n                     List.of(baseSymbol, Literal.of(child))\n                 );\n                 if (path.size() > 1) {\n-                    return tryCreateSubscript(recordSubscript, path.subList(1, path.size() - 1));\n+                    return tryCreateSubscript(recordSubscript, path.subList(1, path.size()));\n                 }\n                 return recordSubscript;\n             }\n"}}, {"oid": "0cdb23f8c4b8367a74662489717b81e217489a5c", "url": "https://github.com/crate/crate/commit/0cdb23f8c4b8367a74662489717b81e217489a5c", "message": "fixup! Support record subscript syntax on row type", "committedDate": "2020-02-10T16:42:54Z", "type": "forcePushed"}, {"oid": "2219cd46616fb53e6bc44c263f3a274af9d1d75c", "url": "https://github.com/crate/crate/commit/2219cd46616fb53e6bc44c263f3a274af9d1d75c", "message": "Add _pg_expandarray table function\n\nThis function is used by JDBC (and apparently also by some ORMs).", "committedDate": "2020-02-10T16:49:57Z", "type": "commit"}, {"oid": "97e55451f1e4fb09fac534683b6c6e529ed8c010", "url": "https://github.com/crate/crate/commit/97e55451f1e4fb09fac534683b6c6e529ed8c010", "message": "Support record subscript syntax on row type", "committedDate": "2020-02-10T16:49:57Z", "type": "commit"}, {"oid": "97e55451f1e4fb09fac534683b6c6e529ed8c010", "url": "https://github.com/crate/crate/commit/97e55451f1e4fb09fac534683b6c6e529ed8c010", "message": "Support record subscript syntax on row type", "committedDate": "2020-02-10T16:49:57Z", "type": "forcePushed"}]}