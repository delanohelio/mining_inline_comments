{"pr_number": 10560, "pr_title": "Ensure searchers are always closed", "pr_createdAt": "2020-09-21T11:39:12Z", "pr_url": "https://github.com/crate/crate/pull/10560", "timeline": [{"oid": "0129151634e5276e0e45672fcb7ce18e8b8de240", "url": "https://github.com/crate/crate/commit/0129151634e5276e0e45672fcb7ce18e8b8de240", "message": "Ensure searchers are always closed", "committedDate": "2020-09-28T08:40:31Z", "type": "forcePushed"}, {"oid": "c03518256ef7c61ba0c4194501b3a741d7b0e615", "url": "https://github.com/crate/crate/commit/c03518256ef7c61ba0c4194501b3a741d7b0e615", "message": "Ensure searchers are always closed", "committedDate": "2020-09-28T08:54:56Z", "type": "forcePushed"}, {"oid": "89c5715bac0ae624acc8b85378d1a50654609055", "url": "https://github.com/crate/crate/commit/89c5715bac0ae624acc8b85378d1a50654609055", "message": "Ensure searchers are always closed", "committedDate": "2020-09-28T09:03:32Z", "type": "forcePushed"}, {"oid": "02fdd142c367fc3345b6b642bac79266abd4f022", "url": "https://github.com/crate/crate/commit/02fdd142c367fc3345b6b642bac79266abd4f022", "message": "Ensure searchers are always closed", "committedDate": "2020-09-28T09:22:21Z", "type": "forcePushed"}, {"oid": "98990383bc1133ef7011acb126ae1d7a2a2e3a1e", "url": "https://github.com/crate/crate/commit/98990383bc1133ef7011acb126ae1d7a2a2e3a1e", "message": "WIP", "committedDate": "2020-09-28T14:10:19Z", "type": "forcePushed"}, {"oid": "989c608f84b60be7aada9111e3c5874bc459e8db", "url": "https://github.com/crate/crate/commit/989c608f84b60be7aada9111e3c5874bc459e8db", "message": "Ensure searchers are always closed", "committedDate": "2020-09-28T14:28:08Z", "type": "forcePushed"}, {"oid": "dd95d6925152f214fba9d086ddb65332e8f4f4ae", "url": "https://github.com/crate/crate/commit/dd95d6925152f214fba9d086ddb65332e8f4f4ae", "message": "Ensure searchers are always closed", "committedDate": "2020-09-28T14:29:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NzcxNg==", "url": "https://github.com/crate/crate/pull/10560#discussion_r495987716", "bodyText": "Replaced this with multiple test_kill_after_start variants - see further below", "author": "mfussenegger", "createdAt": "2020-09-28T14:35:43Z", "path": "server/src/test/java/io/crate/execution/engine/collect/CollectTaskTest.java", "diffHunk": "@@ -94,58 +115,10 @@ public void testAddingSameContextTwice() throws Exception {\n             assertFalse(true); // second addContext call should have raised an exception\n         } catch (IllegalArgumentException e) {\n             verify(mock1, times(1)).close();\n-            verify(mock2, times(1)).close();\n+            verify(mock2, times(0)).close(); // would be closed via `kill` on the context\n         }\n     }\n \n-    @Test\n-    public void testInnerCloseClosesSearchContexts() throws Exception {\n-        RefCountedItem mock1 = mock(RefCountedItem.class);\n-        RefCountedItem mock2 = mock(RefCountedItem.class);\n-\n-        collectTask.addSearcher(1, mock1);\n-        collectTask.addSearcher(2, mock2);\n-\n-        collectTask.innerClose();\n-\n-        verify(mock1, times(1)).close();\n-        verify(mock2, times(1)).close();\n-    }\n-\n-    @Test\n-    public void testKillOnJobCollectContextPropagatesToCrateCollectors() throws Exception {", "originalCommit": "dd95d6925152f214fba9d086ddb65332e8f4f4ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2d53eb8fb7bb37ece300f10a5467d744fa3dd28e", "url": "https://github.com/crate/crate/commit/2d53eb8fb7bb37ece300f10a5467d744fa3dd28e", "message": "fixup! Ensure searchers are always closed", "committedDate": "2020-09-28T15:43:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzk3Ng==", "url": "https://github.com/crate/crate/pull/10560#discussion_r496583976", "bodyText": "shouldn't this be volatile as it may be read and written from different threads?", "author": "seut", "createdAt": "2020-09-29T09:44:20Z", "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "diffHunk": "@@ -60,16 +64,20 @@\n     private final SharedShardContexts sharedShardContexts;\n \n     private final IntObjectHashMap<RefCountedItem<? extends IndexSearcher>> searchers = new IntObjectHashMap<>();\n-    private final Object subContextLock = new Object();\n     private final RowConsumer consumer;\n     private final int ramAccountingBlockSizeInBytes;\n+\n+    @GuardedBy(\"searchers\")\n     private final ArrayList<MemoryManager> memoryManagers = new ArrayList<>();\n     private final Version minNodeVersion;\n+    private final CompletableFuture<Void> consumerCompleted;\n+    private final CompletableFuture<BatchIterator<Row>> batchIterator = new CompletableFuture<>();\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n \n-    private BatchIterator<Row> batchIterator = null;\n+    private boolean releasedResources = false;", "originalCommit": "2d53eb8fb7bb37ece300f10a5467d744fa3dd28e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5NTQ4Mg==", "url": "https://github.com/crate/crate/pull/10560#discussion_r496595482", "bodyText": "It's always within a synchronized block and synchronized causes memory visibility, so the volatile is not necessary. Should I add a @GuardedBy annotation?", "author": "mfussenegger", "createdAt": "2020-09-29T10:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMzc3Mg==", "url": "https://github.com/crate/crate/pull/10560#discussion_r496603772", "bodyText": "Added the annotation", "author": "mfussenegger", "createdAt": "2020-09-29T10:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "174590f0ccd968684fef26f996e1618b8eb12d80", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java b/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java\nindex d69f694309..41a87e7516 100644\n--- a/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java\n+++ b/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java\n\n@@ -74,7 +74,9 @@ public class CollectTask implements Task {\n     private final CompletableFuture<BatchIterator<Row>> batchIterator = new CompletableFuture<>();\n     private final AtomicBoolean started = new AtomicBoolean(false);\n \n+    @GuardedBy(\"searchers\")\n     private boolean releasedResources = false;\n+\n     private long totalBytes = -1;\n \n     public CollectTask(CollectPhase collectPhase,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4ODE5Nw==", "url": "https://github.com/crate/crate/pull/10560#discussion_r496588197", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // the atomicBoolean call is not enough, because without syncronization\n          \n          \n            \n                    // an atomicBoolean call would not be enough, because without syncronization", "author": "seut", "createdAt": "2020-09-29T09:50:55Z", "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "diffHunk": "@@ -212,10 +261,24 @@ static String threadPoolName(CollectPhase phase, boolean involvedIO) {\n \n     public MemoryManager memoryManager() {\n         MemoryManager memoryManager = memoryManagerFactory.apply(ramAccounting);\n-        synchronized (memoryManagers) {\n-            memoryManagers.add(memoryManager);\n+        // the atomicBoolean call is not enough, because without syncronization", "originalCommit": "2d53eb8fb7bb37ece300f10a5467d744fa3dd28e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "174590f0ccd968684fef26f996e1618b8eb12d80", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java b/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java\nindex d69f694309..41a87e7516 100644\n--- a/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java\n+++ b/server/src/main/java/io/crate/execution/engine/collect/CollectTask.java\n\n@@ -261,7 +263,7 @@ public class CollectTask implements Task {\n \n     public MemoryManager memoryManager() {\n         MemoryManager memoryManager = memoryManagerFactory.apply(ramAccounting);\n-        // the atomicBoolean call is not enough, because without syncronization\n+        // an atomicBoolean call would not be enough, because without syncronization\n         // the `memoryManagers.add` could be called just right *after* another thread triggered `releaseResources`\n         synchronized (searchers) {\n             if (releasedResources == false) {\n"}}, {"oid": "174590f0ccd968684fef26f996e1618b8eb12d80", "url": "https://github.com/crate/crate/commit/174590f0ccd968684fef26f996e1618b8eb12d80", "message": "Ensure searchers are always closed", "committedDate": "2020-09-29T10:03:45Z", "type": "commit"}, {"oid": "174590f0ccd968684fef26f996e1618b8eb12d80", "url": "https://github.com/crate/crate/commit/174590f0ccd968684fef26f996e1618b8eb12d80", "message": "Ensure searchers are always closed", "committedDate": "2020-09-29T10:03:45Z", "type": "forcePushed"}]}