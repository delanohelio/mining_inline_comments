{"pr_number": 9916, "pr_title": "Extend pg_proc table based on the new function signatures.", "pr_createdAt": "2020-05-04T09:40:06Z", "pr_url": "https://github.com/crate/crate/pull/9916", "timeline": [{"oid": "c2eeceae6504b979d47edd196da836e27526a050", "url": "https://github.com/crate/crate/commit/c2eeceae6504b979d47edd196da836e27526a050", "message": "Extend pg_proc table based on the new function signatures.", "committedDate": "2020-05-04T13:00:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0ODM5Mg==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419448392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static DataType<?> safeOfName(String typeName) {\n          \n          \n            \n                public static DataType<?> ofNameOrNull(String typeName) {\n          \n      \n    \n    \n  \n\nIn other places safe is used to indicate that an error is thrown if the name doesn't exist. E.g indexServiceSafe. I'd use a different name to not overload the same expression for two different purposes - that would confuse readers.", "author": "mfussenegger", "createdAt": "2020-05-04T13:46:46Z", "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -343,14 +343,19 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"timestamp\", TIMESTAMPZ),\n         entry(\"interval\", INTERVAL));\n \n-    public static DataType ofName(String name) {\n-        DataType dataType = TYPES_BY_NAME_OR_ALIAS.get(name);\n+    public static DataType<?> ofName(String typeName) {\n+        DataType<?> dataType = safeOfName(typeName);\n         if (dataType == null) {\n-            throw new IllegalArgumentException(\"Cannot find data type: \" + name);\n+            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n         }\n         return dataType;\n     }\n \n+    @Nullable\n+    public static DataType<?> safeOfName(String typeName) {", "originalCommit": "c2eeceae6504b979d47edd196da836e27526a050", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17539ffa7f4cd1e5519ff53cbf635588856b3bb0", "chunk": "diff --git a/common/src/main/java/io/crate/types/DataTypes.java b/common/src/main/java/io/crate/types/DataTypes.java\nindex 26b0c8e50a..540fec509d 100644\n--- a/common/src/main/java/io/crate/types/DataTypes.java\n+++ b/common/src/main/java/io/crate/types/DataTypes.java\n\n@@ -344,7 +344,7 @@ public final class DataTypes {\n         entry(\"interval\", INTERVAL));\n \n     public static DataType<?> ofName(String typeName) {\n-        DataType<?> dataType = safeOfName(typeName);\n+        DataType<?> dataType = ofNameOrNull(typeName);\n         if (dataType == null) {\n             throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419449572", "bodyText": "Could this be moved to the SignatureBindingInfo, or do we need this always available?", "author": "mfussenegger", "createdAt": "2020-05-04T13:48:23Z", "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -308,6 +312,10 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n+    public boolean variableArity() {\n+        return variableArity;", "originalCommit": "c2eeceae6504b979d47edd196da836e27526a050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1OTA1Nw==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419459057", "bodyText": "SignatureBindingInfo is not serializable, see \n  \n    \n      crate/sql/src/main/java/io/crate/metadata/functions/SignatureBindingInfo.java\n    \n    \n        Lines 29 to 33\n      in\n      280cb15\n    \n    \n    \n    \n\n        \n          \n           /** \n        \n\n        \n          \n            * Containing {@link Signature} properties which are only required for signature binding/matching. \n        \n\n        \n          \n            * It won't be streamed and all properties won't be taken into account when resolving a function by signature. \n        \n\n        \n          \n            */ \n        \n\n        \n          \n           public class SignatureBindingInfo { \n        \n    \n  \n\n. Therefore, signature#getSignatureBindingInfo can retrun null.\nI thought of serializing SignatureBindingInfo, but then it appeared that we just need variableArity to fill some fields of the pg_proc, therefore, I've serialized it with a signature object.", "author": "kovrus", "createdAt": "2020-05-04T14:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3OTg4NQ==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419479885", "bodyText": "I thought of serializing SignatureBindingInfo, but then it appeared that we just need variableArity to fill some fields of the pg_proc, therefore, I've serialized it with a signature object.\n\nSignatureBindingInfo was created to avoid streaming of information which is only needed for binding/matching of signatured but not needed for resolving a signature to an impl directly against the registry.\nInside the registry, signature#getSignatureBindingInfo is never null.", "author": "seut", "createdAt": "2020-05-04T14:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4MjI3Mw==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419482273", "bodyText": "To clarify more, variableArity should never be streamed. Can you please elaborate why you've added streaming support for it?", "author": "seut", "createdAt": "2020-05-04T14:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4NzIwMw==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419487203", "bodyText": "I'll remove that. I thought, that it won't be always possible to use Sigmature#getBindingInfo to get variableArity in order to populate the pg_proc table.", "author": "kovrus", "createdAt": "2020-05-04T14:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "17539ffa7f4cd1e5519ff53cbf635588856b3bb0", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/functions/Signature.java b/sql/src/main/java/io/crate/metadata/functions/Signature.java\nindex 4d7c7a8e29..c15938b8f2 100644\n--- a/sql/src/main/java/io/crate/metadata/functions/Signature.java\n+++ b/sql/src/main/java/io/crate/metadata/functions/Signature.java\n\n@@ -312,10 +308,6 @@ public final class Signature implements Writeable {\n         return returnType;\n     }\n \n-    public boolean variableArity() {\n-        return variableArity;\n-    }\n-\n     @Nullable\n     public SignatureBindingInfo getBindingInfo() {\n         return bindingInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419450822", "bodyText": "Can you add a reference to where this is coming from?\nWould also rename such as to Because typalign of any is integer", "author": "mfussenegger", "createdAt": "2020-05-04T13:50:04Z", "path": "sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AnyType extends PGType<Integer> {\n+    // we represent the any type as integer,\n+    // such as the typalign of any is integer", "originalCommit": "c2eeceae6504b979d47edd196da836e27526a050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MjQ1Nw==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419452457", "bodyText": "Could it be that the int that is streamed as part of any is the oid of the actual type, and that any is some kind of \"lazy\" / deferred type?", "author": "mfussenegger", "createdAt": "2020-05-04T13:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MDU4OQ==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419460589", "bodyText": "I'll check that.\nI couldn't find anything so far in the documentation, I just inferred it from the typalign of the PostgreSQL any type.", "author": "kovrus", "createdAt": "2020-05-04T14:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NTE1OA==", "url": "https://github.com/crate/crate/pull/9916#discussion_r419995158", "bodyText": "Yes, it seems that the type of these pseudotypes is defined by a data type that is passed to it later on. See, https://www.postgresql.org/docs/10/extend-type-system.html", "author": "kovrus", "createdAt": "2020-05-05T10:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "17539ffa7f4cd1e5519ff53cbf635588856b3bb0", "chunk": "diff --git a/sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java b/sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java\nindex 44e2a0e731..856a49f3fb 100644\n--- a/sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java\n+++ b/sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java\n\n@@ -28,8 +28,8 @@ import javax.annotation.Nonnull;\n import java.nio.charset.StandardCharsets;\n \n public class AnyType extends PGType<Integer> {\n-    // we represent the any type as integer,\n-    // such as the typalign of any is integer\n+    // we represent the any data type as integer,\n+    // because the postgresql typalign of any is integer.\n \n     public static final AnyType INSTANCE = new AnyType();\n     private static final int TYPE_LEN = 4;\n"}}, {"oid": "17539ffa7f4cd1e5519ff53cbf635588856b3bb0", "url": "https://github.com/crate/crate/commit/17539ffa7f4cd1e5519ff53cbf635588856b3bb0", "message": "fixup! Extend pg_proc table based on the new function signatures.", "committedDate": "2020-05-05T09:11:07Z", "type": "forcePushed"}, {"oid": "b471a12148686363bdcaf93a1e34225e19d0f55d", "url": "https://github.com/crate/crate/commit/b471a12148686363bdcaf93a1e34225e19d0f55d", "message": "fixup! Extend pg_proc table based on the new function signatures.", "committedDate": "2020-05-05T09:23:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzNDAyMQ==", "url": "https://github.com/crate/crate/pull/9916#discussion_r420034021", "bodyText": "this can be removed", "author": "seut", "createdAt": "2020-05-05T11:18:07Z", "path": "sql/src/test/java/io/crate/metadata/functions/SignatureTest.java", "diffHunk": "@@ -47,6 +47,7 @@ public void test_streaming_of_signature_and_type_signatures() throws Exception {\n         var signature = Signature.builder()\n             .name(\"foo\")\n             .kind(FunctionInfo.Type.SCALAR)\n+            .setVariableArity(true)", "originalCommit": "b471a12148686363bdcaf93a1e34225e19d0f55d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1cf40689ab1bf6b99bee6805957affbc0c1e909b", "chunk": "diff --git a/sql/src/test/java/io/crate/metadata/functions/SignatureTest.java b/sql/src/test/java/io/crate/metadata/functions/SignatureTest.java\nindex 1040d50873..8d211c3214 100644\n--- a/sql/src/test/java/io/crate/metadata/functions/SignatureTest.java\n+++ b/sql/src/test/java/io/crate/metadata/functions/SignatureTest.java\n\n@@ -47,7 +47,6 @@ public class SignatureTest {\n         var signature = Signature.builder()\n             .name(\"foo\")\n             .kind(FunctionInfo.Type.SCALAR)\n-            .setVariableArity(true)\n             .argumentTypes(\n                 parseTypeSignature(\"E\"),\n                 DataTypes.INTEGER.getTypeSignature(),\n"}}, {"oid": "1cf40689ab1bf6b99bee6805957affbc0c1e909b", "url": "https://github.com/crate/crate/commit/1cf40689ab1bf6b99bee6805957affbc0c1e909b", "message": "Extend pg_proc table based on the new function signatures.", "committedDate": "2020-05-05T12:05:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIwMjUyOQ==", "url": "https://github.com/crate/crate/pull/9916#discussion_r420202529", "bodyText": "Could use .get instead of .getOrDefault", "author": "mfussenegger", "createdAt": "2020-05-05T15:33:08Z", "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -343,14 +343,19 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"timestamp\", TIMESTAMPZ),\n         entry(\"interval\", INTERVAL));\n \n-    public static DataType ofName(String name) {\n-        DataType dataType = TYPES_BY_NAME_OR_ALIAS.get(name);\n+    public static DataType<?> ofName(String typeName) {\n+        DataType<?> dataType = ofNameOrNull(typeName);\n         if (dataType == null) {\n-            throw new IllegalArgumentException(\"Cannot find data type: \" + name);\n+            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n         }\n         return dataType;\n     }\n \n+    @Nullable\n+    public static DataType<?> ofNameOrNull(String typeName) {\n+        return TYPES_BY_NAME_OR_ALIAS.getOrDefault(typeName, null);", "originalCommit": "1cf40689ab1bf6b99bee6805957affbc0c1e909b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01feeef5dd1f79b5f9b525412ca22ed49003cf20", "chunk": "diff --git a/common/src/main/java/io/crate/types/DataTypes.java b/common/src/main/java/io/crate/types/DataTypes.java\nindex 540fec509d..2985a04af4 100644\n--- a/common/src/main/java/io/crate/types/DataTypes.java\n+++ b/common/src/main/java/io/crate/types/DataTypes.java\n\n@@ -343,19 +343,14 @@ public final class DataTypes {\n         entry(\"timestamp\", TIMESTAMPZ),\n         entry(\"interval\", INTERVAL));\n \n-    public static DataType<?> ofName(String typeName) {\n-        DataType<?> dataType = ofNameOrNull(typeName);\n+    public static DataType ofName(String name) {\n+        DataType dataType = TYPES_BY_NAME_OR_ALIAS.get(name);\n         if (dataType == null) {\n-            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n+            throw new IllegalArgumentException(\"Cannot find data type: \" + name);\n         }\n         return dataType;\n     }\n \n-    @Nullable\n-    public static DataType<?> ofNameOrNull(String typeName) {\n-        return TYPES_BY_NAME_OR_ALIAS.getOrDefault(typeName, null);\n-    }\n-\n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n         entry(\"date\", DataTypes.TIMESTAMPZ),\n         entry(\"string\", DataTypes.STRING),\n"}}, {"oid": "01feeef5dd1f79b5f9b525412ca22ed49003cf20", "url": "https://github.com/crate/crate/commit/01feeef5dd1f79b5f9b525412ca22ed49003cf20", "message": "Add PostgreSQL any and anyarray data types.\n\nTypes are used internally to represent function signature\ntype parameters of any type.", "committedDate": "2020-05-06T08:20:55Z", "type": "commit"}, {"oid": "bdd49c9b0932b108fe383907fb77b2729ca1d4ee", "url": "https://github.com/crate/crate/commit/bdd49c9b0932b108fe383907fb77b2729ca1d4ee", "message": "Extend pg_proc table based on the new function signatures.", "committedDate": "2020-05-06T08:20:55Z", "type": "commit"}, {"oid": "bdd49c9b0932b108fe383907fb77b2729ca1d4ee", "url": "https://github.com/crate/crate/commit/bdd49c9b0932b108fe383907fb77b2729ca1d4ee", "message": "Extend pg_proc table based on the new function signatures.", "committedDate": "2020-05-06T08:20:55Z", "type": "forcePushed"}]}