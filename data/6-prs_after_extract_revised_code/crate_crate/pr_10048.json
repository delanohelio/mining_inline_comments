{"pr_number": 10048, "pr_title": "Add optimized global aggregates using doc-values", "pr_createdAt": "2020-06-04T13:15:29Z", "pr_url": "https://github.com/crate/crate/pull/10048", "timeline": [{"oid": "91ca4fa823d4d2c10d708b1fdf642ae1defc109c", "url": "https://github.com/crate/crate/commit/91ca4fa823d4d2c10d708b1fdf642ae1defc109c", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-17T13:02:57Z", "type": "forcePushed"}, {"oid": "b08bc8562f1f437b959fb87ec207d5f962cca3e6", "url": "https://github.com/crate/crate/commit/b08bc8562f1f437b959fb87ec207d5f962cca3e6", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-18T06:29:51Z", "type": "forcePushed"}, {"oid": "6ba2c33ab1042c53f512fd70e9a38e128376122a", "url": "https://github.com/crate/crate/commit/6ba2c33ab1042c53f512fd70e9a38e128376122a", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-19T08:24:46Z", "type": "forcePushed"}, {"oid": "40b724bc2f693d384c97c6f016854799cd738d64", "url": "https://github.com/crate/crate/commit/40b724bc2f693d384c97c6f016854799cd738d64", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-19T08:45:33Z", "type": "forcePushed"}, {"oid": "7bc33800866adad0b7a5bf186f89e81a68556007", "url": "https://github.com/crate/crate/commit/7bc33800866adad0b7a5bf186f89e81a68556007", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-19T09:01:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNDQ5MA==", "url": "https://github.com/crate/crate/pull/10048#discussion_r442724490", "bodyText": "Once we use DocValueAggregator for grouping we should probably extend this for memory accounting. Not sure if already necessary for the global aggregate case, since there is only a single row.", "author": "mfussenegger", "createdAt": "2020-06-19T09:11:33Z", "path": "server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.aggregation;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.lucene.index.LeafReader;\n+\n+public abstract class DocValueAggregator<T> {\n+\n+    public abstract T initialState();", "originalCommit": "7bc33800866adad0b7a5bf186f89e81a68556007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0NTI5OQ==", "url": "https://github.com/crate/crate/pull/10048#discussion_r442745299", "bodyText": "Ram accounting would also be required for the collect_set aggregation afaik.", "author": "seut", "createdAt": "2020-06-19T09:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNDQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxNzE1MA==", "url": "https://github.com/crate/crate/pull/10048#discussion_r442817150", "bodyText": "Right, I'll adapt it once I optimize that function (or any other where we allocate more than a couple of bytes)", "author": "mfussenegger", "createdAt": "2020-06-19T12:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNDQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "f61735525b175c216a9c50deeef77959bc874d58", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java b/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java\nindex 00cf205b6d..9fa4ea681b 100644\n--- a/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java\n+++ b/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java\n\n@@ -28,17 +28,17 @@ import javax.annotation.Nullable;\n \n import org.apache.lucene.index.LeafReader;\n \n-public abstract class DocValueAggregator<T> {\n+public interface DocValueAggregator<T> {\n \n-    public abstract T initialState();\n+    public T initialState();\n \n-    public abstract void loadDocValues(LeafReader reader) throws IOException;\n+    public void loadDocValues(LeafReader reader) throws IOException;\n \n-    public abstract void apply(T state, int doc) throws IOException;\n+    public void apply(T state, int doc) throws IOException;\n \n     // Aggregations are executed on shard level,\n     // that means there is always a final reduce step necessary\n     // \u2192 never return final value, but always partial result\n     @Nullable\n-    public abstract Object partialResult(T state);\n+    public Object partialResult(T state);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0NDY4NA==", "url": "https://github.com/crate/crate/pull/10048#discussion_r442744684", "bodyText": "any reason for an abstract class instead of an interface here?", "author": "seut", "createdAt": "2020-06-19T09:52:31Z", "path": "server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.aggregation;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.lucene.index.LeafReader;\n+\n+public abstract class DocValueAggregator<T> {", "originalCommit": "7bc33800866adad0b7a5bf186f89e81a68556007", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyMzY0NA==", "url": "https://github.com/crate/crate/pull/10048#discussion_r442823644", "bodyText": "No not really. I remember reading that other projects saw performance improvements using abstract classes over interfaces, but comparing two variants it looks to be within the noise.\nGiven the current use I don't see a good rationale to prefer one over the other, do you?\nQ: select avg(\"adRevenue\") from uservisits\nC: 1\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |       29.886 \u00b1   31.273 |     23.795 |     25.733 |     29.571 |    716.034 |\n|   V2    |       30.842 \u00b1   28.182 |     24.007 |     27.005 |     32.376 |    644.652 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               +   3.15%                           +   4.83%\nThere is a 38.82% probability that the observed difference is not random, and the best estimate of that difference is 3.15%\nThe test has no statistical significance\n\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.29        201\n V2 |    1    31.33    31.33 |    0     0.00     0.00 |     8590     2288 |    15.94        249\n\nV1: 4.2.0-5dc2bf16ea7b60b70a4decdb1699fab7d239062e\nV2: 4.2.0-96ccb18013a00b077ed72764750d99bd6b9c14d4\n\nQ: select avg(\"adRevenue\") from uservisits\nC: 1\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |       30.697 \u00b1   30.922 |     25.107 |     27.639 |     29.414 |    711.979 |\n|   V2    |       30.527 \u00b1   26.952 |     24.135 |     27.340 |     29.316 |    620.206 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -   0.55%                           -   1.09%\nThere is a 7.37% probability that the observed difference is not random, and the best estimate of that difference is 0.55%\nThe test has no statistical significance\n\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    12.99        201\n V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    12.89        199", "author": "mfussenegger", "createdAt": "2020-06-19T12:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0NDY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyODcxNA==", "url": "https://github.com/crate/crate/pull/10048#discussion_r442828714", "bodyText": "Given the current use I don't see a good rationale to prefer one over the other, do you?\n\nOnly for the multi-inheritance support of interfaces. If there is no need for an abstract class (e.g. ctor definition) I prefer interfaces, but no strong opinion here.", "author": "seut", "createdAt": "2020-06-19T13:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0NDY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMTQwMA==", "url": "https://github.com/crate/crate/pull/10048#discussion_r442831400", "bodyText": "Changed it", "author": "mfussenegger", "createdAt": "2020-06-19T13:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0NDY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1OTk1OA==", "url": "https://github.com/crate/crate/pull/10048#discussion_r443059958", "bodyText": "By coincidence found one of the references mentioning the improved performance: https://netty.io/wiki/new-and-noteworthy-in-4.0.html#bytebuf-is-not-an-interface-but-an-abstract-class", "author": "mfussenegger", "createdAt": "2020-06-19T22:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0NDY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "f61735525b175c216a9c50deeef77959bc874d58", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java b/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java\nindex 00cf205b6d..9fa4ea681b 100644\n--- a/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java\n+++ b/server/src/main/java/io/crate/execution/engine/aggregation/DocValueAggregator.java\n\n@@ -28,17 +28,17 @@ import javax.annotation.Nullable;\n \n import org.apache.lucene.index.LeafReader;\n \n-public abstract class DocValueAggregator<T> {\n+public interface DocValueAggregator<T> {\n \n-    public abstract T initialState();\n+    public T initialState();\n \n-    public abstract void loadDocValues(LeafReader reader) throws IOException;\n+    public void loadDocValues(LeafReader reader) throws IOException;\n \n-    public abstract void apply(T state, int doc) throws IOException;\n+    public void apply(T state, int doc) throws IOException;\n \n     // Aggregations are executed on shard level,\n     // that means there is always a final reduce step necessary\n     // \u2192 never return final value, but always partial result\n     @Nullable\n-    public abstract Object partialResult(T state);\n+    public Object partialResult(T state);\n }\n"}}, {"oid": "5dc2bf16ea7b60b70a4decdb1699fab7d239062e", "url": "https://github.com/crate/crate/commit/5dc2bf16ea7b60b70a4decdb1699fab7d239062e", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-19T12:41:46Z", "type": "forcePushed"}, {"oid": "f61735525b175c216a9c50deeef77959bc874d58", "url": "https://github.com/crate/crate/commit/f61735525b175c216a9c50deeef77959bc874d58", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-19T13:09:53Z", "type": "commit"}, {"oid": "f61735525b175c216a9c50deeef77959bc874d58", "url": "https://github.com/crate/crate/commit/f61735525b175c216a9c50deeef77959bc874d58", "message": "Add optimized global aggregates using doc-values\n\n    Q: select avg(\"adRevenue\") from uservisits\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |       80.198 \u00b1   32.376 |     46.869 |     78.789 |     80.146 |    789.931 |\n    |   V2    |       27.888 \u00b1   20.782 |     23.429 |     25.451 |     26.543 |    480.902 |\n    \u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n    |               -  96.79%                           - 102.34%\n    There is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 96.79%\n    The test has statistical significance\n\n    System/JVM Metrics (durations in ms, byte-values in MB)\n        |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n        |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n     V1 |    8    23.13    26.17 |    0     0.00     0.00 |     8590     2319 |   777.04      31413\n     V2 |    0     0.00     0.00 |    0     0.00     0.00 |     8590        0 |    14.71        198\n\n    V1 top allocation frames\n      Float.valueOf(float):30818982785\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):287010080\n      169079530.get$Lambda(...):78850440\n      291374498.get$Lambda(...):57452096\n      MatchAllDocsQuery.createWeight(...):26222072\n    V2 top allocation frames\n      CompositeBatchIterator$AsyncCompositeBI.lambda$loadNextBatch$0(int, int):46133248\n      ParserATNSimulator.getEpsilonTarget(...):12582912\n      IndexInput.getFullSliceDescription(String):10487808\n      Weight.scorerSupplier(...):1047961", "committedDate": "2020-06-19T13:09:53Z", "type": "forcePushed"}]}