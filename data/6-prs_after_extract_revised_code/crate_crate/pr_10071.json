{"pr_number": 10071, "pr_title": "Re-enable IAM Roles for s3 repositories", "pr_createdAt": "2020-06-10T15:01:13Z", "pr_url": "https://github.com/crate/crate/pull/10071", "timeline": [{"oid": "bcd6ab892a408ca278b3002261b63908f1097f1c", "url": "https://github.com/crate/crate/commit/bcd6ab892a408ca278b3002261b63908f1097f1c", "message": "Remove mandatorySettings in s3 S3Repository to get IAM roles working again", "committedDate": "2020-06-11T09:30:36Z", "type": "forcePushed"}, {"oid": "a681bda9a093e6106baf0d6c1852a0b860b23787", "url": "https://github.com/crate/crate/commit/a681bda9a093e6106baf0d6c1852a0b860b23787", "message": "Remove mandatorySettings in s3 S3Repository to get IAM roles working again", "committedDate": "2020-06-11T10:06:38Z", "type": "forcePushed"}, {"oid": "854b3d136ad9dc5d00625093f2e888aacc3c46ad", "url": "https://github.com/crate/crate/commit/854b3d136ad9dc5d00625093f2e888aacc3c46ad", "message": "Remove mandatorySettings in s3 S3Repository to get IAM roles working again", "committedDate": "2020-06-11T10:07:47Z", "type": "forcePushed"}, {"oid": "a442ade1806108b178c06bccdfe3fd965363b4d0", "url": "https://github.com/crate/crate/commit/a442ade1806108b178c06bccdfe3fd965363b4d0", "message": "Remove mandatorySettings in s3 S3Repository to get IAM roles working again", "committedDate": "2020-06-11T10:24:53Z", "type": "forcePushed"}, {"oid": "f431b9299138269d11c5cf60dacd9f91390e874d", "url": "https://github.com/crate/crate/commit/f431b9299138269d11c5cf60dacd9f91390e874d", "message": "Re-enable IAM Roles for s3 repositories", "committedDate": "2020-06-11T10:39:48Z", "type": "forcePushed"}, {"oid": "4f5ab86c4672bc81cef83d5123b8bb007eabfbf0", "url": "https://github.com/crate/crate/commit/4f5ab86c4672bc81cef83d5123b8bb007eabfbf0", "message": "Remove settings from S3RepositoryPlugin", "committedDate": "2020-06-11T13:05:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNTEzOA==", "url": "https://github.com/crate/crate/pull/10071#discussion_r438815138", "bodyText": "Is the executeSingleUpload the right place for it? There are also delete blob, read blob, and other methods of BlobContainer.\nIs it possible to do it somewhere in S3ClientSettings?", "author": "kovrus", "createdAt": "2020-06-11T14:09:29Z", "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java", "diffHunk": "@@ -259,7 +259,14 @@ void executeSingleUpload(final S3BlobStore blobStore,\n         try (AmazonS3Reference clientReference = blobStore.clientReference()) {\n             clientReference.client().putObject(putRequest);\n         } catch (final AmazonClientException e) {\n-            throw new IOException(\"Unable to upload object [\" + blobName + \"] using a single upload\", e);\n+            if (!this.blobStore.getRepositoryMetaData().settings().hasValue(S3RepositorySettings.ACCESS_KEY_SETTING.getKey()) &&", "originalCommit": "323f7333841b825b9a5f32adf2da3162350b22fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a7f7c8300528f13ab29c923ffece740d1940ac7", "chunk": "diff --git a/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java b/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java\nindex 8cb6aa0fd4..1c540451c1 100644\n--- a/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java\n+++ b/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java\n\n@@ -258,15 +271,6 @@ class S3BlobContainer extends AbstractBlobContainer {\n \n         try (AmazonS3Reference clientReference = blobStore.clientReference()) {\n             clientReference.client().putObject(putRequest);\n-        } catch (final AmazonClientException e) {\n-            if (!this.blobStore.getRepositoryMetaData().settings().hasValue(S3RepositorySettings.ACCESS_KEY_SETTING.getKey()) &&\n-                !this.blobStore.getRepositoryMetaData().settings().hasValue(S3RepositorySettings.SECRET_KEY_SETTING.getKey())\n-            ) {\n-                throw new BlobStoreException(\"Cannot find required credentials to create a repository of type s3. \" +\n-                                                          \"Credentials must be provided either as repository options access_key and secret_key or AWS IAM roles.\");\n-            } else {\n-                throw new IOException(\"Unable to upload object [\" + blobName + \"] using a single upload\", e);\n-            }\n         }\n     }\n \n"}}, {"oid": "4a7f7c8300528f13ab29c923ffece740d1940ac7", "url": "https://github.com/crate/crate/commit/4a7f7c8300528f13ab29c923ffece740d1940ac7", "message": "Move aws credential exception to S3BlobContainer", "committedDate": "2020-06-11T22:35:07Z", "type": "forcePushed"}, {"oid": "084a8ed9b512c7ecc39b7404714635c1f55d4acc", "url": "https://github.com/crate/crate/commit/084a8ed9b512c7ecc39b7404714635c1f55d4acc", "message": "Cleanup exception handling", "committedDate": "2020-06-15T09:50:52Z", "type": "forcePushed"}, {"oid": "d4b5386f2c6a2c60025327096c712658ad0bc93f", "url": "https://github.com/crate/crate/commit/d4b5386f2c6a2c60025327096c712658ad0bc93f", "message": "Cleanup exception handling", "committedDate": "2020-06-15T09:52:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440071342", "bodyText": "I am just wondering why it should RepositoryVerificationException, we are just trying to configure a client at this point and not yet doing anything with repositories. Also to buildCredentials we don't need to know the repository name  buildCredentials(Logger logger, S3ClientSettings clientSettings, String repository)", "author": "kovrus", "createdAt": "2020-06-15T10:11:07Z", "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java", "diffHunk": "@@ -119,11 +121,19 @@ static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings) {\n     }\n \n     // pkg private for tests\n-    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings) {\n+    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings, String repository) {\n         final AWSCredentials credentials = clientSettings.credentials;\n         if (credentials == null) {\n             logger.debug(\"Using instance profile credentials\");\n-            return new EC2ContainerCredentialsProviderWrapper();\n+            var ec2ContainerCredentialsProviderWrapper = new EC2ContainerCredentialsProviderWrapper();\n+            try {\n+                // Try to connect to test credentials\n+                ec2ContainerCredentialsProviderWrapper.getCredentials();\n+                return ec2ContainerCredentialsProviderWrapper;\n+            } catch(SdkClientException e) {\n+                throw new RepositoryVerificationException(repository, \"Cannot find required credentials to create a repository of type s3. \" +", "originalCommit": "d4b5386f2c6a2c60025327096c712658ad0bc93f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NzI2NA==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440077264", "bodyText": "I think it fits better than an IOException and change all method signatures. Any better idea here ? \n  \n    \n      crate/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n    \n    \n         Line 670\n      in\n      46b8331\n    \n    \n    \n    \n\n        \n          \n           throw new RepositoryVerificationException(metadata.name(), \"path \" + basePath() + \" is not accessible on master node\", exp);", "author": "mkleen", "createdAt": "2020-06-15T10:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MjIzOQ==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440092239", "bodyText": "but why RepositoryVerificationException if it has nothing to do with repositories?", "author": "kovrus", "createdAt": "2020-06-15T10:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MzcwNA==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440093704", "bodyText": "This class is part of the repository package.", "author": "mkleen", "createdAt": "2020-06-15T10:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "46b8331bcc4658cda42e612bdeb9a905aaf7051a", "chunk": "diff --git a/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java b/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java\nindex a3e3489c86..fb085f7c1a 100644\n--- a/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java\n+++ b/plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java\n\n@@ -127,7 +127,7 @@ class S3Service implements Closeable {\n             logger.debug(\"Using instance profile credentials\");\n             var ec2ContainerCredentialsProviderWrapper = new EC2ContainerCredentialsProviderWrapper();\n             try {\n-                // Try to connect to test credentials\n+                // Check if credentials are available\n                 ec2ContainerCredentialsProviderWrapper.getCredentials();\n                 return ec2ContainerCredentialsProviderWrapper;\n             } catch(SdkClientException e) {\n"}}, {"oid": "46b8331bcc4658cda42e612bdeb9a905aaf7051a", "url": "https://github.com/crate/crate/commit/46b8331bcc4658cda42e612bdeb9a905aaf7051a", "message": "Cleanup exception handling", "committedDate": "2020-06-15T10:13:11Z", "type": "forcePushed"}, {"oid": "752216d48432c734c8e47877e4389a76a273c757", "url": "https://github.com/crate/crate/commit/752216d48432c734c8e47877e4389a76a273c757", "message": "Change to IOException", "committedDate": "2020-06-15T10:37:24Z", "type": "forcePushed"}, {"oid": "068e13f708a2f37cf9f27a749d9ad88665f92c09", "url": "https://github.com/crate/crate/commit/068e13f708a2f37cf9f27a749d9ad88665f92c09", "message": "Change to IOException", "committedDate": "2020-06-15T10:39:08Z", "type": "forcePushed"}, {"oid": "c50c3489c61c643caede66048eb3523dc1f14461", "url": "https://github.com/crate/crate/commit/c50c3489c61c643caede66048eb3523dc1f14461", "message": "Add an IlegalArgumentException", "committedDate": "2020-06-15T11:09:06Z", "type": "forcePushed"}, {"oid": "ad02ff5f40bc853937b15eef6e9dcae5543838f9", "url": "https://github.com/crate/crate/commit/ad02ff5f40bc853937b15eef6e9dcae5543838f9", "message": "Add BlobStoreCredentialException and MissingParametersException", "committedDate": "2020-06-15T12:59:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440706813", "bodyText": "if we introduce a new CrateException do we need to have a unique error code? Do we also have to reflect changes here \n  \n    \n      crate/server/src/main/java/io/crate/exceptions/SQLExceptions.java\n    \n    \n        Lines 144 to 163\n      in\n      ad02ff5\n    \n    \n    \n    \n\n        \n          \n           if (e instanceof CrateException) { \n        \n\n        \n          \n               CrateException crateException = (CrateException) e; \n        \n\n        \n          \n               if (e instanceof ValidationException) { \n        \n\n        \n          \n                   errorCode = 4000 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.BAD_REQUEST; \n        \n\n        \n          \n               } else if (e instanceof UnauthorizedException) { \n        \n\n        \n          \n                   errorCode = 4010 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.UNAUTHORIZED; \n        \n\n        \n          \n               } else if (e instanceof ReadOnlyException) { \n        \n\n        \n          \n                   errorCode = 4030 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.FORBIDDEN; \n        \n\n        \n          \n               } else if (e instanceof ResourceUnknownException) { \n        \n\n        \n          \n                   errorCode = 4040 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.NOT_FOUND; \n        \n\n        \n          \n               } else if (e instanceof ConflictException) { \n        \n\n        \n          \n                   errorCode = 4090 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.CONFLICT; \n        \n\n        \n          \n               } else if (e instanceof UnhandledServerException) { \n        \n\n        \n          \n                   errorCode = 5000 + crateException.errorCode(); \n        \n\n        \n          \n               } \n        \n    \n  \n\n ?\nDo we need to update http doc https://github.com/crate/crate/blob/ad02ff5f40bc853937b15eef6e9dcae5543838f9/docs/interfaces/http.rst#id10\nIt seems like a user-facing change. Were you planning to backport it as well?", "author": "kovrus", "createdAt": "2020-06-16T09:15:48Z", "path": "server/src/main/java/io/crate/exceptions/MissingParametersException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.exceptions;\n+\n+public class MissingParametersException extends RuntimeException implements CrateException {", "originalCommit": "ad02ff5f40bc853937b15eef6e9dcae5543838f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMzY5Mg==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440713692", "bodyText": "Could we just go with \"InvalidArgumentException\" for now or some other existing exception class? I had in mind to restructure the exception handling a bit to make it easier to return the proper error codes in the PostgreSQL wire protocol, so it would be helpful if we didn't add more CrateException instances for now.", "author": "mfussenegger", "createdAt": "2020-06-16T09:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxODE4Ng==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440718186", "bodyText": "As commented I suggest to delete this and let BlobStoreCredentialsException extend from ValidationExecption.\nBut still this would introduce a new error code and thus user facing change.\nI think this could be acceptable for a backport as it should not break anything.", "author": "seut", "createdAt": "2020-06-16T09:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMzk4OA==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440733988", "bodyText": "If we use a ValidationExecption then we cannot add a designated error code. We reserved all 10 error code on the 400X already https://crate.io/docs/crate/reference/en/latest/interfaces/http.html. We could either fallback to 4000 or move it to 401X (Unauthorized).", "author": "mkleen", "createdAt": "2020-06-16T10:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNzcyNA==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440737724", "bodyText": "If we use an ValidationExecption then we cannot add a designated error code. We reserved all 10 error code on the 400 already https://crate.io/docs/crate/reference/en/latest/interfaces/http.html. We could either fallback to 4000 or move it to 401X (Unauthorized).\n\nI'd go with 4000.\nFor 401X we need to be careful. We need to distinguish between unauthorized to execute certain SQL statements (permissions related to executing CrateDB stuff), and unauthorized to use a other third-party resource.\nWe also need to be careful how clients would map these errors to exceptions.", "author": "mfussenegger", "createdAt": "2020-06-16T10:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "8ef2c8d2c9e95201171c07c6e6149b3da5bf4027", "chunk": "diff --git a/server/src/main/java/io/crate/exceptions/MissingParametersException.java b/server/src/main/java/io/crate/exceptions/InvalidArgumentException.java\nsimilarity index 88%\nrename from server/src/main/java/io/crate/exceptions/MissingParametersException.java\nrename to server/src/main/java/io/crate/exceptions/InvalidArgumentException.java\nindex 6bd58393ea..6ec44282c2 100644\n--- a/server/src/main/java/io/crate/exceptions/MissingParametersException.java\n+++ b/server/src/main/java/io/crate/exceptions/InvalidArgumentException.java\n\n@@ -22,13 +22,12 @@\n \n package io.crate.exceptions;\n \n-public class MissingParametersException extends RuntimeException implements CrateException {\n+public class InvalidArgumentException extends ValidationException {\n \n-    public MissingParametersException(String message) {\n+    public InvalidArgumentException(String message) {\n         super(message);\n     }\n \n-    @Override\n     public <C, R> R accept(CrateExceptionVisitor<C, R> exceptionVisitor, C context) {\n         return exceptionVisitor.visitCrateException(this, context);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNjc0MQ==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440716741", "bodyText": "Why cant we just extend from a io.crate.exceptions.ValidationException** here instead? I don't see any reason to create an ES exception here which will always be converted later on.", "author": "seut", "createdAt": "2020-06-16T09:32:24Z", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreCredentialsException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package org.elasticsearch.repositories.blobstore;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.rest.RestStatus;\n+\n+import java.io.IOException;\n+\n+public class BlobStoreCredentialsException extends ElasticsearchException {", "originalCommit": "ad02ff5f40bc853937b15eef6e9dcae5543838f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ef2c8d2c9e95201171c07c6e6149b3da5bf4027", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreCredentialsException.java b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreCredentialsException.java\ndeleted file mode 100644\nindex cb049cb57e..0000000000\n--- a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreCredentialsException.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-/*\n- * Licensed to Crate under one or more contributor license agreements.\n- * See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.  Crate licenses this file\n- * to you under the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.  You may\n- * obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n- * implied.  See the License for the specific language governing\n- * permissions and limitations under the License.\n- *\n- * However, if you have executed another commercial license agreement\n- * with Crate these terms will supersede the license and you may use the\n- * software solely pursuant to the terms of the relevant commercial\n- * agreement.\n- */\n-\n-package org.elasticsearch.repositories.blobstore;\n-\n-import org.elasticsearch.ElasticsearchException;\n-import org.elasticsearch.common.io.stream.StreamInput;\n-import org.elasticsearch.rest.RestStatus;\n-\n-import java.io.IOException;\n-\n-public class BlobStoreCredentialsException extends ElasticsearchException {\n-\n-    public BlobStoreCredentialsException(String msg, Throwable cause, Object... args) {\n-        super(msg, cause, args);\n-    }\n-\n-    @Override\n-    public RestStatus status() {\n-        return RestStatus.BAD_REQUEST;\n-    }\n-\n-    public BlobStoreCredentialsException(StreamInput in) throws IOException {\n-        super(in);\n-    }\n-}\n"}}, {"oid": "8ef2c8d2c9e95201171c07c6e6149b3da5bf4027", "url": "https://github.com/crate/crate/commit/8ef2c8d2c9e95201171c07c6e6149b3da5bf4027", "message": "Add InvalidArgumentException", "committedDate": "2020-06-16T10:22:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTY3NQ==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440909675", "bodyText": "Is there documentation we need to update to reflect this change?", "author": "mfussenegger", "createdAt": "2020-06-16T14:47:31Z", "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -69,12 +69,10 @@\n \n     static final String TYPE = \"s3\";\n \n-    public static List<Setting<?>> mandatorySettings() {\n-        return List.of(ACCESS_KEY_SETTING, SECRET_KEY_SETTING);", "originalCommit": "8ef2c8d2c9e95201171c07c6e6149b3da5bf4027", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNDkyMQ==", "url": "https://github.com/crate/crate/pull/10071#discussion_r440914921", "bodyText": "Good point, I think we should mention the IAM roles here https://crate.io/docs/crate/reference/en/latest/sql/statements/create-repository.html#s3", "author": "mkleen", "createdAt": "2020-06-16T14:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTY3NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4dbdd7c7b0dd1d1a94675f07a92e7491535d12ea", "url": "https://github.com/crate/crate/commit/4dbdd7c7b0dd1d1a94675f07a92e7491535d12ea", "message": "Re-enable IAM Roles for s3 repositories", "committedDate": "2020-06-16T14:48:40Z", "type": "commit"}, {"oid": "4dbdd7c7b0dd1d1a94675f07a92e7491535d12ea", "url": "https://github.com/crate/crate/commit/4dbdd7c7b0dd1d1a94675f07a92e7491535d12ea", "message": "Re-enable IAM Roles for s3 repositories", "committedDate": "2020-06-16T14:48:40Z", "type": "forcePushed"}, {"oid": "4bb157cfe71ef04cafeef9c44d2d2baf866140a2", "url": "https://github.com/crate/crate/commit/4bb157cfe71ef04cafeef9c44d2d2baf866140a2", "message": "Add documentation for iam roles", "committedDate": "2020-06-16T15:16:38Z", "type": "commit"}]}