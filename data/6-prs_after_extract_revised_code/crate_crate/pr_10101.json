{"pr_number": 10101, "pr_title": "Remove old deprecated function registry", "pr_createdAt": "2020-06-18T13:26:05Z", "pr_url": "https://github.com/crate/crate/pull/10101", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyNTEwNA==", "url": "https://github.com/crate/crate/pull/10101#discussion_r442225104", "bodyText": "We do not promote our plugin infrastructure anymore, our plugin example repository is archived.", "author": "seut", "createdAt": "2020-06-18T13:28:07Z", "path": "app/src/test/java/io/crate/plugin/PluginLoaderTest.java", "diffHunk": "@@ -83,32 +77,6 @@ public void testPluginWithCrateSettings() throws Exception {\n         assertThat(settings.get(\"setting.for.crate\"), is(\"foo\"));\n     }\n \n-    @Test\n-    public void testLoadPluginRegisteringScalarFunction() throws Exception {", "originalCommit": "684f44dbe4c54c9648ce6ab8f6468240cb55234d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a8fffeae4dd4597e51ad966ee8090dfa9b94fdb", "chunk": "diff --git a/app/src/test/java/io/crate/plugin/PluginLoaderTest.java b/app/src/test/java/io/crate/plugin/PluginLoaderTest.java\nindex 6db618c6cf..9769763533 100644\n--- a/app/src/test/java/io/crate/plugin/PluginLoaderTest.java\n+++ b/app/src/test/java/io/crate/plugin/PluginLoaderTest.java\n\n@@ -77,6 +83,32 @@ public class PluginLoaderTest extends ESIntegTestCase {\n         assertThat(settings.get(\"setting.for.crate\"), is(\"foo\"));\n     }\n \n+    @Test\n+    public void testLoadPluginRegisteringScalarFunction() throws Exception {\n+        String node = startNodeWithPlugins(\"/io/crate/plugin/simple_plugin_registering_scalar_function\");\n+\n+        PluginsService pluginsService = internalCluster().getInstance(PluginsService.class, node);\n+        PluginLoaderPlugin corePlugin = getCratePlugin(pluginsService);\n+\n+        PluginLoader pluginLoader = corePlugin.pluginLoader;\n+        assertThat(pluginLoader.plugins.size(), is(1));\n+        assertThat(pluginLoader.plugins.get(0).getClass().getCanonicalName(), is(\"io.crate.plugin.ExamplePlugin\"));\n+\n+        Functions functions = internalCluster().getInstance(Functions.class);\n+        FunctionIdent isEven = new FunctionIdent(\"is_even\", Collections.singletonList(DataTypes.LONG));\n+        assertThat(functions.getQualified(isEven).info(),\n+                   is(new FunctionInfo( isEven, DataTypes.BOOLEAN)));\n+\n+        // Also check that the built-in functions are not lost\n+        var abs = Signature.scalar(\n+            \"abs\",\n+            DataTypes.LONG.getTypeSignature(),\n+            DataTypes.LONG.getTypeSignature()\n+        );\n+        assertThat(functions.getQualified(abs, List.of(DataTypes.LONG)).signature(),\n+                   is(abs));\n+    }\n+\n     @Test\n     public void testLoadPluginWithAlreadyLoadedClass() throws Exception {\n         // test that JarHell is used and plugin is not loaded because it contains an already loaded class\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3NzAyNw==", "url": "https://github.com/crate/crate/pull/10101#discussion_r442377027", "bodyText": "I think argumentTypes is only used in the error case further below. Maybe the typeView call could be moved into the else block.", "author": "mfussenegger", "createdAt": "2020-06-18T17:08:12Z", "path": "server/src/main/java/io/crate/expression/BaseImplementationSymbolVisitor.java", "diffHunk": "@@ -53,14 +54,12 @@ public BaseImplementationSymbolVisitor(TransactionContext txnCtx, Functions func\n \n     @Override\n     public Input<?> visitFunction(Function function, C context) {\n-        FunctionIdent ident = function.info().ident();\n         Signature signature = function.signature();\n-        FunctionImplementation functionImplementation;\n-        if (signature == null) {\n-            functionImplementation = functions.getQualified(ident);\n-        } else {\n-            functionImplementation = functions.getQualified(signature, ident.argumentTypes());\n-        }\n+        List<DataType> argumentTypes = Symbols.typeView(function.arguments());", "originalCommit": "684f44dbe4c54c9648ce6ab8f6468240cb55234d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a8fffeae4dd4597e51ad966ee8090dfa9b94fdb", "chunk": "diff --git a/server/src/main/java/io/crate/expression/BaseImplementationSymbolVisitor.java b/server/src/main/java/io/crate/expression/BaseImplementationSymbolVisitor.java\nindex 3995898af9..2dc447f947 100644\n--- a/server/src/main/java/io/crate/expression/BaseImplementationSymbolVisitor.java\n+++ b/server/src/main/java/io/crate/expression/BaseImplementationSymbolVisitor.java\n\n@@ -54,12 +53,14 @@ public class BaseImplementationSymbolVisitor<C> extends SymbolVisitor<C, Input<?\n \n     @Override\n     public Input<?> visitFunction(Function function, C context) {\n+        FunctionIdent ident = function.info().ident();\n         Signature signature = function.signature();\n-        List<DataType> argumentTypes = Symbols.typeView(function.arguments());\n-        FunctionImplementation functionImplementation = functions.getQualified(\n-            function,\n-            txnCtx.sessionSettings().searchPath()\n-        );\n+        FunctionImplementation functionImplementation;\n+        if (signature == null) {\n+            functionImplementation = functions.getQualified(ident);\n+        } else {\n+            functionImplementation = functions.getQualified(signature, ident.argumentTypes());\n+        }\n         assert functionImplementation != null : \"Function implementation not found using full qualified lookup\";\n \n         if (functionImplementation instanceof Scalar<?, ?>) {\n"}}, {"oid": "9a8fffeae4dd4597e51ad966ee8090dfa9b94fdb", "url": "https://github.com/crate/crate/commit/9a8fffeae4dd4597e51ad966ee8090dfa9b94fdb", "message": "Remove signature nullable annotation at function impl iface\n\nAll functions are now converted to the signature based registry and\nthus must provide a signature.", "committedDate": "2020-06-19T09:45:05Z", "type": "commit"}, {"oid": "d4e1f9f9c39637b9cd4349625ac4f7552bbf7910", "url": "https://github.com/crate/crate/commit/d4e1f9f9c39637b9cd4349625ac4f7552bbf7910", "message": "Remove old deprecated function registry\n\nAdditionally introduce BWC function resolving helper when function`\nsymbols are retrieved from older nodes without any signature.\nIn that case a full function matching will be performed instead of\na fast by-signature lookup.\nAs this only happens in mixed clusters (rolling upgrade) for a short\nperiod, this should be neglectable.", "committedDate": "2020-06-19T09:45:05Z", "type": "commit"}, {"oid": "4390f90bf77144951aab094dfd4dd75e83dd6bb3", "url": "https://github.com/crate/crate/commit/4390f90bf77144951aab094dfd4dd75e83dd6bb3", "message": "Remove unused deprecated function related interfaces", "committedDate": "2020-06-19T09:45:05Z", "type": "commit"}, {"oid": "8b43cbe4016e955eedfeae0a7ca2666b113a2282", "url": "https://github.com/crate/crate/commit/8b43cbe4016e955eedfeae0a7ca2666b113a2282", "message": "Rename function providing interface\n\nRename `FuncResolver` to `FunctionProvider` as it is providing a \nfunction factory for a given signature and not resolving.", "committedDate": "2020-06-19T09:45:05Z", "type": "commit"}, {"oid": "8b43cbe4016e955eedfeae0a7ca2666b113a2282", "url": "https://github.com/crate/crate/commit/8b43cbe4016e955eedfeae0a7ca2666b113a2282", "message": "Rename function providing interface\n\nRename `FuncResolver` to `FunctionProvider` as it is providing a \nfunction factory for a given signature and not resolving.", "committedDate": "2020-06-19T09:45:05Z", "type": "forcePushed"}]}