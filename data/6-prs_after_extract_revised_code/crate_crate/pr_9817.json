{"pr_number": 9817, "pr_title": "Allow the definition of check constraints in ALTER ADD COLUMN statements", "pr_createdAt": "2020-03-27T16:16:07Z", "pr_url": "https://github.com/crate/crate/pull/9817", "timeline": [{"oid": "a61c7d5206282eb40119bd7324d7be131ba302f9", "url": "https://github.com/crate/crate/commit/a61c7d5206282eb40119bd7324d7be131ba302f9", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data.", "committedDate": "2020-03-29T08:07:47Z", "type": "forcePushed"}, {"oid": "4ff5d8bbf373dfad4d156b0cc55fe92cb9eb7ed7", "url": "https://github.com/crate/crate/commit/4ff5d8bbf373dfad4d156b0cc55fe92cb9eb7ed7", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data.", "committedDate": "2020-03-30T13:29:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjA2NQ==", "url": "https://github.com/crate/crate/pull/9817#discussion_r400222065", "bodyText": "Please don't mutate AST structures,  they can be cached via prepared statements and should be immutable", "author": "mfussenegger", "createdAt": "2020-03-30T14:10:27Z", "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "diffHunk": "@@ -72,6 +86,12 @@ public AnalyzedAlterTableAddColumn analyze(AlterTableAddColumn<Expression> alter\n         // convert and validate the column name\n         ExpressionToColumnIdentVisitor.convert(tableElement.name());\n \n+        // 1st phase, exclude check constraints (their expressions contain column references)\n+        List<ColumnConstraint<Expression>> checkColumnConstraints = tableElement.constraints()\n+            .stream()\n+            .filter(CheckColumnConstraint.class::isInstance)\n+            .collect(Collectors.toList());\n+        tableElement.constraints().removeAll(checkColumnConstraints);", "originalCommit": "8d2fa42a352e1088026d392ce622adbe0b8ad306", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java b/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java\nindex 90766526c8..47c180195f 100644\n--- a/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java\n\n@@ -86,13 +85,19 @@ class AlterTableAddColumnAnalyzer {\n         // convert and validate the column name\n         ExpressionToColumnIdentVisitor.convert(tableElement.name());\n \n-        // 1st phase, exclude check constraints (their expressions contain column references)\n-        List<ColumnConstraint<Expression>> checkColumnConstraints = tableElement.constraints()\n-            .stream()\n-            .filter(CheckColumnConstraint.class::isInstance)\n-            .collect(Collectors.toList());\n-        tableElement.constraints().removeAll(checkColumnConstraints);\n-        AddColumnDefinition<Symbol> addColumnDefinition = tableElement.map(x -> exprAnalyzerWithFieldsAsString.convert(x, exprCtx));\n+        // 1st phase, exclude check constraints (their expressions contain column references) and generated expressions\n+        AddColumnDefinition<Symbol> addColumnDefinition = new AddColumnDefinition<>(\n+            exprAnalyzerWithFieldsAsString.convert(tableElement.name(), exprCtx),\n+            null,   // expression must be mapped later on using mapExpressions()\n+            tableElement.type() == null ? null : tableElement.type().map(y -> exprAnalyzerWithFieldsAsString.convert(y, exprCtx)),\n+            tableElement.constraints()\n+                .stream()\n+                .filter(c -> false == c instanceof CheckColumnConstraint)\n+                .map(x -> x.map(y -> exprAnalyzerWithFieldsAsString.convert(y, exprCtx)))\n+                .collect(Collectors.toList()),\n+            false,\n+            tableElement.generatedExpression() != null\n+        );\n         AnalyzedTableElements<Symbol> analyzedTableElements = TableElementsAnalyzer.analyze(\n             singletonList(addColumnDefinition), tableInfo.ident(), tableInfo);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNDAzOA==", "url": "https://github.com/crate/crate/pull/9817#discussion_r400224038", "bodyText": "Could use Lists2.map", "author": "mfussenegger", "createdAt": "2020-03-30T14:13:01Z", "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "diffHunk": "@@ -82,8 +102,66 @@ public AnalyzedAlterTableAddColumn analyze(AlterTableAddColumn<Expression> alter\n             x -> exprAnalyzerWithReferenceResolver.convert(x, exprCtx));\n         AnalyzedTableElements<Symbol> analyzedTableElementsWithExpressions = TableElementsAnalyzer.analyze(\n             singletonList(addColumnDefinitionWithExpression), tableInfo.ident(), tableInfo);\n+        // now analyze possible check expressions\n+        var checkColumnConstraintsAnalyzer = new ExpressionAnalyzer(\n+            functions,\n+            txnCtx,\n+            paramTypeHints,\n+            new SelfReferenceFieldProvider(\n+                tableInfo.ident(), referenceResolver, analyzedTableElementsWithExpressions.columns()),\n+            null);\n+        List<ColumnConstraint<Symbol>> analyzedCheckColumnConstraints = checkColumnConstraints", "originalCommit": "8d2fa42a352e1088026d392ce622adbe0b8ad306", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java b/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java\nindex 90766526c8..47c180195f 100644\n--- a/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java\n\n@@ -108,17 +113,17 @@ class AlterTableAddColumnAnalyzer {\n             txnCtx,\n             paramTypeHints,\n             new SelfReferenceFieldProvider(\n-                tableInfo.ident(), referenceResolver, analyzedTableElementsWithExpressions.columns()),\n+                tableInfo.ident(), referenceResolver, analyzedTableElements.columns()),\n             null);\n-        List<ColumnConstraint<Symbol>> analyzedCheckColumnConstraints = checkColumnConstraints\n+        tableElement.constraints()\n             .stream()\n+            .filter(CheckColumnConstraint.class::isInstance)\n             .map(x -> x.map(y -> checkColumnConstraintsAnalyzer.convert(y, exprCtx)))\n-            .collect(Collectors.toList());\n-        analyzedCheckColumnConstraints.forEach(c -> {\n-            CheckColumnConstraint<Symbol> check = (CheckColumnConstraint<Symbol>) c;\n-            analyzedTableElements.addCheckColumnConstraint(tableInfo.ident(), check);\n-            analyzedTableElementsWithExpressions.addCheckColumnConstraint(tableInfo.ident(), check);\n-        });\n+            .forEach(c -> {\n+                CheckColumnConstraint<Symbol> check = (CheckColumnConstraint<Symbol>) c;\n+                analyzedTableElements.addCheckColumnConstraint(tableInfo.ident(), check);\n+                analyzedTableElementsWithExpressions.addCheckColumnConstraint(tableInfo.ident(), check);\n+            });\n         return new AnalyzedAlterTableAddColumn(tableInfo, analyzedTableElements, analyzedTableElementsWithExpressions);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNjkyNQ==", "url": "https://github.com/crate/crate/pull/9817#discussion_r400226925", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // exposed for testing\n          \n          \n            \n                @VisibleForTesting", "author": "mfussenegger", "createdAt": "2020-03-30T14:16:41Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -591,14 +592,19 @@ private static String uniqueCheckConstraintName(String fqTableName, @Nullable St\n         return sb.toString();\n     }\n \n-    public void addCheckConstraint(RelationName relationName, CheckConstraint check) {\n+    public void addCheckConstraint(RelationName relationName, CheckConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint check) {\n+    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n+    // exposed for testing", "originalCommit": "8d2fa42a352e1088026d392ce622adbe0b8ad306", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\nindex b723e95590..3f598ae03f 100644\n--- a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n+++ b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n\n@@ -600,9 +600,9 @@ public class AnalyzedTableElements<T> {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    // exposed for testing\n+    @VisibleForTesting\n     Map<String, String> getCheckConstraints() {\n-        return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();\n+        return Map.copyOf(checkConstraints);\n     }\n \n     public boolean hasGeneratedColumns() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNzUzMA==", "url": "https://github.com/crate/crate/pull/9817#discussion_r400227530", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();\n          \n          \n            \n                    return Map.<String, String>copyOf(checkConstraints);", "author": "mfussenegger", "createdAt": "2020-03-30T14:17:27Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -591,14 +592,19 @@ private static String uniqueCheckConstraintName(String fqTableName, @Nullable St\n         return sb.toString();\n     }\n \n-    public void addCheckConstraint(RelationName relationName, CheckConstraint check) {\n+    public void addCheckConstraint(RelationName relationName, CheckConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint check) {\n+    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n+    // exposed for testing\n+    Map<String, String> getCheckConstraints() {\n+        return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();", "originalCommit": "8d2fa42a352e1088026d392ce622adbe0b8ad306", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\nindex b723e95590..3f598ae03f 100644\n--- a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n+++ b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n\n@@ -600,9 +600,9 @@ public class AnalyzedTableElements<T> {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    // exposed for testing\n+    @VisibleForTesting\n     Map<String, String> getCheckConstraints() {\n-        return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();\n+        return Map.copyOf(checkConstraints);\n     }\n \n     public boolean hasGeneratedColumns() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTI2OA==", "url": "https://github.com/crate/crate/pull/9817#discussion_r400229268", "bodyText": "Maybe use Maps.getByPath", "author": "mfussenegger", "createdAt": "2020-03-30T14:19:44Z", "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1204,6 +1214,52 @@ private void assertDuplicatePrimaryKey(String stmt) {\n         }\n     }\n \n+    @Test\n+    public void testCreateTableWithCheckConstraints() {\n+        String stmt = \"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\";\n+        BoundCreateTable analysis = analyze(stmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_id_ge_zero\"));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_qty_gt_zero\"));\n+    }\n+\n+    @Test\n+    public void testAlterTableAddColumnWithCheckConstraint() throws Exception {\n+        SQLExecutor executor = SQLExecutor.builder(clusterService)\n+            .addTable(\"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\")\n+            .build();\n+        String alterStmt = \"alter table t add column bazinga int constraint bazinga_check check(bazinga != 42);\";\n+        BoundAddColumn analysis = analyze(alterStmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_id_ge_zero\"));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_qty_gt_zero\"));\n+        assertEquals(checkConstraints.get(\"bazinga_check\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"bazinga_check\"));\n+    }\n+\n+    private static String fetchMapping(Map<String, Object> root, String... path) {", "originalCommit": "8d2fa42a352e1088026d392ce622adbe0b8ad306", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "chunk": "diff --git a/sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java b/sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java\nindex 298cb2cae0..ecf7bc37d7 100644\n--- a/sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java\n+++ b/sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java\n\n@@ -1225,9 +1227,9 @@ public class CreateAlterTableStatementAnalyzerTest extends CrateDummyClusterServ\n         Map<String, Object> mapping = analysis.mapping();\n         Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n         assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n-                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_id_ge_zero\"));\n+                     Maps.getByPath(mapping, Arrays.asList(\"_meta\", \"check_constraints\", \"check_id_ge_zero\")));\n         assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n-                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_qty_gt_zero\"));\n+                     Maps.getByPath(mapping, Arrays.asList(\"_meta\", \"check_constraints\", \"check_qty_gt_zero\")));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTYyNw==", "url": "https://github.com/crate/crate/pull/9817#discussion_r400229627", "bodyText": "This could be an analyzer test. No execution layer necessary.", "author": "mfussenegger", "createdAt": "2020-03-30T14:20:13Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -356,6 +356,24 @@ public void test_create_table_with_check_fail_on_update() {\n         execute(\"update t set qty = -1 where id = 0\");\n     }\n \n+    @Test\n+    public void test_alter_table_add_column_fails_because_check_constaint_refers_to_other_columns() {", "originalCommit": "8d2fa42a352e1088026d392ce622adbe0b8ad306", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "chunk": "diff --git a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\nindex c712c5f89c..4cb2018fdf 100644\n--- a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n\n@@ -356,14 +356,6 @@ public class DDLIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"update t set qty = -1 where id = 0\");\n     }\n \n-    @Test\n-    public void test_alter_table_add_column_fails_because_check_constaint_refers_to_other_columns() {\n-        execute(\"create table t (id integer primary key, qty integer constraint check_1 check (qty > 0))\");\n-        expectedException.expectMessage(containsString(\n-            \"SQLParseException: CHECK expressions defined in this context cannot refer to other columns: qty\"));\n-        execute(\"alter table t add column bazinga integer constraint bazinga_check check(qty > bazinga)\");\n-    }\n-\n     @Test\n     public void test_alter_table_add_column_succedds_because_check_constaint_refers_to_self_columns() {\n         execute(\"create table t (id integer primary key, qty integer constraint check_1 check (qty > 0))\");\n"}}, {"oid": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "url": "https://github.com/crate/crate/commit/01d01e4ba5c194e1d504bc97bb22a689adf69396", "message": "Add various improvements suggested by Jordi", "committedDate": "2020-03-30T19:02:29Z", "type": "forcePushed"}, {"oid": "ba79d7684a5466e009082ff7fe26490695ce3bc7", "url": "https://github.com/crate/crate/commit/ba79d7684a5466e009082ff7fe26490695ce3bc7", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data.", "committedDate": "2020-03-31T09:25:27Z", "type": "commit"}, {"oid": "ba79d7684a5466e009082ff7fe26490695ce3bc7", "url": "https://github.com/crate/crate/commit/ba79d7684a5466e009082ff7fe26490695ce3bc7", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data.", "committedDate": "2020-03-31T09:25:27Z", "type": "forcePushed"}]}