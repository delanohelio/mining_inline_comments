{"pr_number": 9627, "pr_title": "Support using table functions with multiple columns in select list", "pr_createdAt": "2020-02-06T09:50:14Z", "pr_url": "https://github.com/crate/crate/pull/9627", "timeline": [{"oid": "d0fa54010037b45c3c120dbd2161f6a552d74f27", "url": "https://github.com/crate/crate/commit/d0fa54010037b45c3c120dbd2161f6a552d74f27", "message": "fixup! WIP: RowType", "committedDate": "2020-02-06T10:45:05Z", "type": "forcePushed"}, {"oid": "5e70d320e0ad6da98017d2e2da588e9aa52f3eab", "url": "https://github.com/crate/crate/commit/5e70d320e0ad6da98017d2e2da588e9aa52f3eab", "message": "WIP: Support using table functions with multiple columns in select list", "committedDate": "2020-02-07T14:21:18Z", "type": "forcePushed"}, {"oid": "bb87916f9cf89bbf5ba5d8ec689e5bb59e469181", "url": "https://github.com/crate/crate/commit/bb87916f9cf89bbf5ba5d8ec689e5bb59e469181", "message": "WIP: Support using table functions with multiple columns in select list", "committedDate": "2020-02-07T15:00:50Z", "type": "forcePushed"}, {"oid": "8297dc06463d08b181ece40956ae24ea999cde50", "url": "https://github.com/crate/crate/commit/8297dc06463d08b181ece40956ae24ea999cde50", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement.", "committedDate": "2020-02-10T11:31:41Z", "type": "forcePushed"}, {"oid": "b13951783beb9900de6bc58f41ec49983b10a575", "url": "https://github.com/crate/crate/commit/b13951783beb9900de6bc58f41ec49983b10a575", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement.", "committedDate": "2020-02-10T11:41:47Z", "type": "forcePushed"}, {"oid": "d13b82e5d655f522b98fc185617d153c38750349", "url": "https://github.com/crate/crate/commit/d13b82e5d655f522b98fc185617d153c38750349", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement.", "committedDate": "2020-02-10T12:03:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNzA4MA==", "url": "https://github.com/crate/crate/pull/9627#discussion_r377037080", "bodyText": "Do we need to handle the array of row type separately, such as we have a special handling for RowType.", "author": "kovrus", "createdAt": "2020-02-10T12:37:33Z", "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "diffHunk": "@@ -97,31 +102,46 @@\n         return TYPES;\n     }\n \n-    public static DataType fromOID(int oid) {\n+    public static DataType<?> fromOID(int oid) {\n         return PG_TYPES_TO_CRATE_TYPE.get(oid);\n     }\n \n-    public static PGType get(DataType type) {\n-        if (type.id() == ArrayType.ID) {\n-            DataType<?> innerType = ((ArrayType) type).innerType();\n-            if (innerType.id() == ArrayType.ID) {\n-                // if this is a nested collection stream it as JSON because\n-                // postgres binary format doesn't support multidimensional arrays\n-                // with sub-arrays of different length\n-                // (something like [ [1, 2], [3] ] is not supported)\n+    public static PGType get(DataType<?> type) {\n+        switch (type.id()) {", "originalCommit": "d13b82e5d655f522b98fc185617d153c38750349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1Njc1NQ==", "url": "https://github.com/crate/crate/pull/9627#discussion_r377056755", "bodyText": "Good point. Adding a fixup", "author": "mfussenegger", "createdAt": "2020-02-10T13:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNzA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c771db214bcc7517a4f24b698dcc8e6d58a7029c", "chunk": "diff --git a/sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java b/sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java\nindex 8ad6e61417..9618e6ddb0 100644\n--- a/sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java\n+++ b/sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java\n\n@@ -118,7 +118,10 @@ public class PGTypes {\n                     return JsonType.INSTANCE;\n                 } else if (innerType.id() == ObjectType.ID) {\n                     return PGArray.JSON_ARRAY;\n+                } else if (innerType.id() == RowType.ID) {\n+                    return new PGArray(2287, get(innerType));\n                 }\n+\n                 PGType pgType = CRATE_TO_PG_TYPES.get(type);\n                 if (pgType == null) {\n                     throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTAyMA==", "url": "https://github.com/crate/crate/pull/9627#discussion_r377039020", "bodyText": "should we have some pre condition here to be more safe and get a better exception message if we get out of bound exception.", "author": "kovrus", "createdAt": "2020-02-10T12:41:49Z", "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {", "originalCommit": "d13b82e5d655f522b98fc185617d153c38750349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NDk3Mw==", "url": "https://github.com/crate/crate/pull/9627#discussion_r377054973", "bodyText": "Not sure, I think the out-of-bounds exception that will be raised is fairly fitting.", "author": "mfussenegger", "createdAt": "2020-02-10T13:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c771db214bcc7517a4f24b698dcc8e6d58a7029c", "chunk": "diff --git a/common/src/main/java/io/crate/types/RowType.java b/common/src/main/java/io/crate/types/RowType.java\nindex 79f794147a..2ba1615124 100644\n--- a/common/src/main/java/io/crate/types/RowType.java\n+++ b/common/src/main/java/io/crate/types/RowType.java\n\n@@ -150,6 +150,8 @@ public final class RowType extends DataType<Row> implements Streamer<Row> {\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n     @Override\n     public int compareValueTo(Row val1, Row val2) {\n+        assert val1.numColumns() == val2.numColumns()\n+            : \"Rows to compare must have the same number of columns and types. val1=\" + val1 + \", val2=\" + val2;\n         for (int i = 0; i < fieldTypes.size(); i++) {\n             DataType dataType = fieldTypes.get(i);\n             int cmp = dataType.compareValueTo(val1.get(i), val2.get(i));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTk5Mg==", "url": "https://github.com/crate/crate/pull/9627#discussion_r377039992", "bodyText": "not sure, maybe we can first check Row#numColumns of val1 and val2?", "author": "kovrus", "createdAt": "2020-02-10T12:44:03Z", "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {\n+        return fieldNames.get(position);\n+    }\n+\n+    public List<String> fieldNames() {\n+        return fieldNames;\n+    }\n+\n+    public List<DataType<?>> fieldTypes() {\n+        return fieldTypes;\n+    }\n+\n+    @Override\n+    public Row readValueFrom(StreamInput in) throws IOException {\n+        Object[] values = new Object[fieldTypes.size()];\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            values[i] = fieldTypes.get(i).streamer().readValueFrom(in);\n+        }\n+        return new RowN(values);\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public void writeValueTo(StreamOutput out, Row row) throws IOException {\n+        assert row.numColumns() == fieldTypes.size()\n+            : \"Row that should be streamed must have the same number of columns as the rowType contains fieldTypes\";\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            Streamer streamer = fieldTypes.get(i).streamer();\n+            streamer.writeValueTo(out, row.get(i));\n+        }\n+    }\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TableType;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Streamer<Row> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Row value(Object value) throws IllegalArgumentException, ClassCastException {\n+        return (Row) value;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public int compareValueTo(Row val1, Row val2) {\n+        for (int i = 0; i < fieldTypes.size(); i++) {", "originalCommit": "d13b82e5d655f522b98fc185617d153c38750349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NjE5OQ==", "url": "https://github.com/crate/crate/pull/9627#discussion_r377056199", "bodyText": "I added an assertion to make sure they have the same size. I think comparing different rows to each other shouldn't be allowed. (This here is for sorting, and we can't sort different row values).", "author": "mfussenegger", "createdAt": "2020-02-10T13:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c771db214bcc7517a4f24b698dcc8e6d58a7029c", "chunk": "diff --git a/common/src/main/java/io/crate/types/RowType.java b/common/src/main/java/io/crate/types/RowType.java\nindex 79f794147a..2ba1615124 100644\n--- a/common/src/main/java/io/crate/types/RowType.java\n+++ b/common/src/main/java/io/crate/types/RowType.java\n\n@@ -150,6 +150,8 @@ public final class RowType extends DataType<Row> implements Streamer<Row> {\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n     @Override\n     public int compareValueTo(Row val1, Row val2) {\n+        assert val1.numColumns() == val2.numColumns()\n+            : \"Rows to compare must have the same number of columns and types. val1=\" + val1 + \", val2=\" + val2;\n         for (int i = 0; i < fieldTypes.size(); i++) {\n             DataType dataType = fieldTypes.get(i);\n             int cmp = dataType.compareValueTo(val1.get(i), val2.get(i));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0MDE1Mw==", "url": "https://github.com/crate/crate/pull/9627#discussion_r377040153", "bodyText": "shall we add regproc to aliases in data-types.rst?", "author": "kovrus", "createdAt": "2020-02-10T12:44:27Z", "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -314,6 +315,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"int4\", INTEGER),\n         entry(\"int8\", LONG),\n         entry(\"name\", STRING),\n+        entry(\"regproc\", STRING),", "originalCommit": "d13b82e5d655f522b98fc185617d153c38750349", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c771db214bcc7517a4f24b698dcc8e6d58a7029c", "url": "https://github.com/crate/crate/commit/c771db214bcc7517a4f24b698dcc8e6d58a7029c", "message": "fixup! Support using table functions with multiple columns in select list", "committedDate": "2020-02-10T13:31:53Z", "type": "forcePushed"}, {"oid": "6d04c2dfb767d1e500bec4207c3dee185bc7615f", "url": "https://github.com/crate/crate/commit/6d04c2dfb767d1e500bec4207c3dee185bc7615f", "message": "fixup! Support using table functions with multiple columns in select list", "committedDate": "2020-02-10T13:34:00Z", "type": "forcePushed"}, {"oid": "9a1bedd52b7c2cc1317385b29576ecce655261be", "url": "https://github.com/crate/crate/commit/9a1bedd52b7c2cc1317385b29576ecce655261be", "message": "fixup! Support using table functions with multiple columns in select list", "committedDate": "2020-02-10T13:34:20Z", "type": "forcePushed"}, {"oid": "b24e93c4e9a9bb4e3ae14ce129503d1948ca0466", "url": "https://github.com/crate/crate/commit/b24e93c4e9a9bb4e3ae14ce129503d1948ca0466", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement.", "committedDate": "2020-02-10T13:36:50Z", "type": "forcePushed"}, {"oid": "d525e44fd7c7d148f55b81071521f047dd97a098", "url": "https://github.com/crate/crate/commit/d525e44fd7c7d148f55b81071521f047dd97a098", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement.", "committedDate": "2020-02-10T13:53:07Z", "type": "commit"}, {"oid": "d525e44fd7c7d148f55b81071521f047dd97a098", "url": "https://github.com/crate/crate/commit/d525e44fd7c7d148f55b81071521f047dd97a098", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement.", "committedDate": "2020-02-10T13:53:07Z", "type": "forcePushed"}]}