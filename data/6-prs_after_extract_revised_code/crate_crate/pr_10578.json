{"pr_number": 10578, "pr_title": "Make memory reservation based on free bytes in insert-from-query", "pr_createdAt": "2020-09-23T08:57:52Z", "pr_url": "https://github.com/crate/crate/pull/10578", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzYxMg==", "url": "https://github.com/crate/crate/pull/10578#discussion_r493337612", "bodyText": "I'm not sure if this is the behavior we want? Maybe if wantedBytes is less than minAcceptableBytes we should fail?", "author": "mfussenegger", "createdAt": "2020-09-23T08:58:53Z", "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -136,7 +136,7 @@ public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws Cir\n \n     @Override\n     public long addBytesRangeAndMaybeBreak(long minAcceptableBytes, long wantedBytes, String label) throws CircuitBreakingException {\n-        if (minAcceptableBytes == wantedBytes) {\n+        if (minAcceptableBytes >= wantedBytes) {", "originalCommit": "8569de2be095910a60ee4557ce2874ca11cecf3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM2MzYwNw==", "url": "https://github.com/crate/crate/pull/10578#discussion_r493363607", "bodyText": "Maybe if wantedBytes is less than minAcceptableBytes we should fail?\n\nSounds valid, otherwise it seems that the minAcceptableBytes intention is somehow by-passed.", "author": "seut", "createdAt": "2020-09-23T09:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4Mzk0Mg==", "url": "https://github.com/crate/crate/pull/10578#discussion_r493383942", "bodyText": "@seut pushed a fixup.\nAdded a IllegalArgument case to the CircuitBreaker and raise the CircuitBreakingException outside. Felt like the more accurate separation of concerns. If the callee of addBytesRangeAndMaybeBreak needs less bytes than what it declares as acceptable, it is doing something wrong and needs to handle that case itself.", "author": "mfussenegger", "createdAt": "2020-09-23T09:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "76efc862b5d01e0d381493d6643b5d4e9e951cbe", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java b/server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java\nindex 950c576e59..3699e80387 100644\n--- a/server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java\n+++ b/server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java\n\n@@ -136,7 +137,14 @@ public class ChildMemoryCircuitBreaker implements CircuitBreaker {\n \n     @Override\n     public long addBytesRangeAndMaybeBreak(long minAcceptableBytes, long wantedBytes, String label) throws CircuitBreakingException {\n-        if (minAcceptableBytes >= wantedBytes) {\n+        if (wantedBytes < minAcceptableBytes) {\n+            throw new IllegalArgumentException(String.format(\n+                Locale.ENGLISH,\n+                \"wantedBytes (%d) must be larger or equal to minAcceptableBytes (%d)\",\n+                wantedBytes,\n+                minAcceptableBytes));\n+        }\n+        if (minAcceptableBytes == wantedBytes) {\n             addEstimateBytesAndMaybeBreak(wantedBytes, label);\n             return wantedBytes;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NTc3OA==", "url": "https://github.com/crate/crate/pull/10578#discussion_r493385778", "bodyText": "If free is > 5 MB, but  free * 0.15 isn't, we should probably still allow it?", "author": "mfussenegger", "createdAt": "2020-09-23T09:48:24Z", "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "diffHunk": "@@ -254,15 +256,33 @@ private boolean shouldPauseOnPartitionCreation(ShardedRequests<ShardUpsertReques\n         return false;\n     }\n \n+    static long reserveBytes(CircuitBreaker circuitBreaker) {\n+        long minAcceptableBytes = ByteSizeUnit.MB.toBytes(5);\n+        long free = circuitBreaker.getFree();\n+        long wantedBytes = (long) (free * BREAKER_LIMIT_PERCENTAGE);", "originalCommit": "5d3bdbaccfaa5da1b163fdfb7de83e7fe47c7820", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM5MDUxMg==", "url": "https://github.com/crate/crate/pull/10578#discussion_r493390512", "bodyText": "\ud83d\udc4d  good point", "author": "seut", "createdAt": "2020-09-23T09:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NTc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "76efc862b5d01e0d381493d6643b5d4e9e951cbe", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java b/server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java\nindex 87465a6595..3dac563ff2 100644\n--- a/server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java\n+++ b/server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java\n\n@@ -258,18 +256,7 @@ public class ShardingUpsertExecutor\n \n     static long reserveBytes(CircuitBreaker circuitBreaker) {\n         long minAcceptableBytes = ByteSizeUnit.MB.toBytes(5);\n-        long free = circuitBreaker.getFree();\n-        long wantedBytes = (long) (free * BREAKER_LIMIT_PERCENTAGE);\n-        if (wantedBytes < minAcceptableBytes) {\n-            throw new CircuitBreakingException(\n-                String.format(\n-                    \"Cannot start new insert-operation. At least 5MB free memory required, but only %s are available\",\n-                    new ByteSizeValue(free, ByteSizeUnit.BYTES).getStringRep()\n-                ),\n-                wantedBytes,\n-                circuitBreaker.getLimit()\n-            );\n-        }\n+        long wantedBytes = Math.max((long) (circuitBreaker.getFree() * BREAKER_LIMIT_PERCENTAGE), minAcceptableBytes);\n         return circuitBreaker.addBytesRangeAndMaybeBreak(\n             minAcceptableBytes,\n             wantedBytes,\n"}}, {"oid": "76efc862b5d01e0d381493d6643b5d4e9e951cbe", "url": "https://github.com/crate/crate/commit/76efc862b5d01e0d381493d6643b5d4e9e951cbe", "message": "fixup! fixup! Make memory reservation based on free bytes in insert-from-query", "committedDate": "2020-09-23T11:34:03Z", "type": "forcePushed"}, {"oid": "c102121bedbe5ffc72c31c743f9afc08e3e73468", "url": "https://github.com/crate/crate/commit/c102121bedbe5ffc72c31c743f9afc08e3e73468", "message": "Make memory reservation based on free bytes in insert-from-query\n\nOne of our nightly benchmarks failed because it's doing 15 concurrent\ninsert-from-unnest.\n\nWith the logic we had, each insert-from-query operation was allowed to\nreserve memory anywhere from 5MB to 15% of the query circuit breaker's\nlimit.\n\nThe problem with that is that the first couple of insert-from-query\noperations eagerly use up memory, and then there is nothing left for the\nremainder.", "committedDate": "2020-09-23T11:38:34Z", "type": "commit"}, {"oid": "c102121bedbe5ffc72c31c743f9afc08e3e73468", "url": "https://github.com/crate/crate/commit/c102121bedbe5ffc72c31c743f9afc08e3e73468", "message": "Make memory reservation based on free bytes in insert-from-query\n\nOne of our nightly benchmarks failed because it's doing 15 concurrent\ninsert-from-unnest.\n\nWith the logic we had, each insert-from-query operation was allowed to\nreserve memory anywhere from 5MB to 15% of the query circuit breaker's\nlimit.\n\nThe problem with that is that the first couple of insert-from-query\noperations eagerly use up memory, and then there is nothing left for the\nremainder.", "committedDate": "2020-09-23T11:38:34Z", "type": "forcePushed"}]}