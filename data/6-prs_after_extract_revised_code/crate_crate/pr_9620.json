{"pr_number": 9620, "pr_title": "Add returning for insert to analyzer", "pr_createdAt": "2020-02-04T13:15:19Z", "pr_url": "https://github.com/crate/crate/pull/9620", "timeline": [{"oid": "df007c6833230b021803185258b9e44d3eb3ae59", "url": "https://github.com/crate/crate/commit/df007c6833230b021803185258b9e44d3eb3ae59", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-04T13:17:07Z", "type": "forcePushed"}, {"oid": "e938c6df28c38a8506408723368a88874ab94369", "url": "https://github.com/crate/crate/commit/e938c6df28c38a8506408723368a88874ab94369", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-04T13:21:48Z", "type": "forcePushed"}, {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "url": "https://github.com/crate/crate/commit/657ba0646a44aef6fff7c5bc06c81642e24f078c", "message": "Simplify return value part in InsertAnalyzer", "committedDate": "2020-02-05T07:10:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375118981", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));\n          \n          \n            \n                            fields.add(new Field(this, path, outputsIterator.next()));\n          \n      \n    \n    \n  \n\nThe relation of a Field must point to the relation who owns the field, which in this case here is the AnalyzedInsertStatement.", "author": "mfussenegger", "createdAt": "2020-02-05T08:37:18Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "diffHunk": "@@ -103,6 +119,16 @@\n             generatedColumns,\n             defaultExpressionColumns,\n             false);\n+        this.returnValues = returnValues;\n+        if (!outputNames.isEmpty() && !returnValues.isEmpty()) {\n+            this.fields = new ArrayList<>(outputNames.size());\n+            Iterator<Symbol> outputsIterator = returnValues.iterator();\n+            for (ColumnIdent path : outputNames) {\n+                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));", "originalCommit": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1MTI3OA==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375151278", "bodyText": "AnalyzedInsertStatement is not an AnalyzedRelation so it can't be this. The subQueryRelation would of course work, but i assumed that the subquery relation is not the relation who owns the output field, so this is why I ended with this solution. What I am missing here ?", "author": "mkleen", "createdAt": "2020-02-05T09:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2MjM2Nw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375162367", "bodyText": "Oh I see, I missed that.\nCould you add a inline comment about that? We'll need to address that eventually, but given that we did the same for Update I guess it is okay to move along as is for now.", "author": "mfussenegger", "createdAt": "2020-02-05T10:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MzYwOQ==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375173609", "bodyText": "Ok, will do. Thanks for the feedback. So, AnalyzedInsertStatement should be a Relation in an ideal world ?", "author": "mkleen", "createdAt": "2020-02-05T10:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE4Nzk4Mw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375187983", "bodyText": "Currently my thinking is that in an ideal world the Field wouldn't have this relation reference in its current form.\nI'm not sure about AnalyzedInsertStatement being a Relation - or changing the hierarchy there in some other form. The focus would be more on changing fields() and outputs (or in this case, the returnValues`, so that only 1 is needed and not both.\nBut that's something for the future.", "author": "mfussenegger", "createdAt": "2020-02-05T10:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e808fa991314809b903059ee2a5b9f8448624cf3", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java b/sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java\nindex 2126bba6bd..0eef570363 100644\n--- a/sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java\n+++ b/sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java\n\n@@ -124,7 +123,8 @@ public class AnalyzedInsertStatement implements AnalyzedStatement {\n             this.fields = new ArrayList<>(outputNames.size());\n             Iterator<Symbol> outputsIterator = returnValues.iterator();\n             for (ColumnIdent path : outputNames) {\n-                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));\n+                //TODO The relation in the field should be point semantically correctly to this\n+                fields.add(new Field(this.subQueryRelation, path, outputsIterator.next()));\n             }\n         } else {\n             fields = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDA2Mg==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375120062", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n          \n            \n                        DocTableRelation targetTableRelation = (DocTableRelation) relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n      \n    \n    \n  \n\nFurther below is currently a cast to FieldResolver that looks unsafe.\nMy preference would be to put it here instead. Here the relation between insert.table() -> DocTableRelation is more visible. Could even add a comment to clarify that relationship.", "author": "mfussenegger", "createdAt": "2020-02-05T08:39:54Z", "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);", "originalCommit": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMjY2NA==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375122664", "bodyText": "Or even better:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n          \n            \n                        var relation = new DocTableRelation(tableInfo);", "author": "mfussenegger", "createdAt": "2020-02-05T08:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e808fa991314809b903059ee2a5b9f8448624cf3", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java b/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java\nindex 1de52b383d..69d3b8ea50 100644\n--- a/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java\n\n@@ -149,7 +148,7 @@ class InsertAnalyzer {\n         if (!insert.returningClause().isEmpty()) {\n             var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n             var relCtx = stmtCtx.startRelation();\n-            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            DocTableRelation targetTableRelation = (DocTableRelation) relationAnalyzer.analyze(insert.table(), stmtCtx);\n             stmtCtx.endRelation();\n \n             var exprCtx = new ExpressionAnalysisContext();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375123234", "bodyText": "I'm not sure if we should do the normalization here already.\nThis is to turn Field into Reference I assume?\nIn other cases we do this as part of the logical planning via the RelationNormalizer. Maybe you could have a look if it would be possible to also defer this to the RelationNormalizer.\nI wouldn't spend too much time on it. I want to change some things about Field and Reference soon anyhow.", "author": "mfussenegger", "createdAt": "2020-02-05T08:47:12Z", "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            stmtCtx.endRelation();\n+\n+            var exprCtx = new ExpressionAnalysisContext();\n+            var sourceExprAnalyzer = new ExpressionAnalyzer(\n+                functions,\n+                txnCtx,\n+                typeHints,\n+                new FullQualifiedNameFieldProvider(\n+                    relCtx.sources(),\n+                    relCtx.parentSources(),\n+                    txnCtx.sessionContext().searchPath().currentSchema()\n+                ),\n+                null\n+            );\n+\n+            var selectAnalysis = SelectAnalyzer.analyzeSelectItems(\n+                insert.returningClause(),\n+                relCtx.sources(),\n+                sourceExprAnalyzer,\n+                exprCtx\n+            );\n+\n+            var normalizer = new EvaluatingNormalizer(functions,\n+                                                      RowGranularity.CLUSTER,\n+                                                      null,\n+                                                      (FieldResolver) relation);\n+\n+            returnValues = Lists2.map(selectAnalysis.outputSymbols(), x -> normalizer.normalize(x, txnCtx));", "originalCommit": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3ODcwMw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375178703", "bodyText": "CurrentIy we normalize also in the UpdateAnalyzer at the same point. I could extend the RelationNormalizer to also support the AnalyzedInsertStatement. Does this make sense to you ?", "author": "mkleen", "createdAt": "2020-02-05T10:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE4NzM0Nw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375187347", "bodyText": "could extend the RelationNormalizer to also support the AnalyzedInsertStatement. Does this make sense to you ?\n\nYes, but only if it isn't too much effort and doesn't cause other issues.", "author": "mfussenegger", "createdAt": "2020-02-05T10:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjk1Mw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375212953", "bodyText": "I had a look at RelationNormalizer and I think conceptionally it would be a bit awkward to add  AnalyzedInsertStatement as a non-relational type to the RelationNormalizer. I would leave as it is right now, what do you think ?", "author": "mkleen", "createdAt": "2020-02-05T11:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "e808fa991314809b903059ee2a5b9f8448624cf3", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java b/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java\nindex 1de52b383d..69d3b8ea50 100644\n--- a/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/InsertAnalyzer.java\n\n@@ -149,7 +148,7 @@ class InsertAnalyzer {\n         if (!insert.returningClause().isEmpty()) {\n             var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n             var relCtx = stmtCtx.startRelation();\n-            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            DocTableRelation targetTableRelation = (DocTableRelation) relationAnalyzer.analyze(insert.table(), stmtCtx);\n             stmtCtx.endRelation();\n \n             var exprCtx = new ExpressionAnalysisContext();\n"}}, {"oid": "e808fa991314809b903059ee2a5b9f8448624cf3", "url": "https://github.com/crate/crate/commit/e808fa991314809b903059ee2a5b9f8448624cf3", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-05T12:57:57Z", "type": "commit"}, {"oid": "e808fa991314809b903059ee2a5b9f8448624cf3", "url": "https://github.com/crate/crate/commit/e808fa991314809b903059ee2a5b9f8448624cf3", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-05T12:57:57Z", "type": "forcePushed"}]}