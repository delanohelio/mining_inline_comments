{"pr_number": 10862, "pr_title": "Optimize fetch performance for sequential value retrieval", "pr_createdAt": "2020-12-13T15:18:58Z", "pr_url": "https://github.com/crate/crate/pull/10862", "timeline": [{"oid": "4e47f87dcbab40cbdb337459128e934b68915b95", "url": "https://github.com/crate/crate/commit/4e47f87dcbab40cbdb337459128e934b68915b95", "message": "Clean up and optimize document access pattern", "committedDate": "2020-12-13T15:24:48Z", "type": "forcePushed"}, {"oid": "9a1158ee57b9aa805f8d5172be1caf496d216a38", "url": "https://github.com/crate/crate/commit/9a1158ee57b9aa805f8d5172be1caf496d216a38", "message": "Cleanup", "committedDate": "2020-12-14T09:43:56Z", "type": "forcePushed"}, {"oid": "023a9706e9397467eb80fa066bc47e19088bac67", "url": "https://github.com/crate/crate/commit/023a9706e9397467eb80fa066bc47e19088bac67", "message": "Simplify", "committedDate": "2020-12-14T10:48:50Z", "type": "forcePushed"}, {"oid": "b4ccc7543f9be02e05f053d91bce5e536eecf319", "url": "https://github.com/crate/crate/commit/b4ccc7543f9be02e05f053d91bce5e536eecf319", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0\nupgrade. The fetch performance can be optimized for the case\nwhere documents to retrieve are in sequential order.", "committedDate": "2020-12-15T15:41:41Z", "type": "forcePushed"}, {"oid": "66baa660dcdc9cdb6937cd5566ab55277f5084ab", "url": "https://github.com/crate/crate/commit/66baa660dcdc9cdb6937cd5566ab55277f5084ab", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0\nupgrade. The fetch performance can be optimized for the case\nwhere the documents to retrieve are in sequential order.", "committedDate": "2020-12-15T15:48:50Z", "type": "forcePushed"}, {"oid": "d62095eb4c8ca295e5c215361e8cae851bb8f2d5", "url": "https://github.com/crate/crate/commit/d62095eb4c8ca295e5c215361e8cae851bb8f2d5", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-15T16:01:06Z", "type": "forcePushed"}, {"oid": "14a92736b077e50a7bc777f5cce9285513af8c30", "url": "https://github.com/crate/crate/commit/14a92736b077e50a7bc777f5cce9285513af8c30", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-15T16:02:21Z", "type": "forcePushed"}, {"oid": "422a85ed31103c863fe4114411c9d7d8afa552be", "url": "https://github.com/crate/crate/commit/422a85ed31103c863fe4114411c9d7d8afa552be", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-15T16:50:18Z", "type": "forcePushed"}, {"oid": "138a1c56236b92814b941024270dcb85cccfc65e", "url": "https://github.com/crate/crate/commit/138a1c56236b92814b941024270dcb85cccfc65e", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-15T18:16:09Z", "type": "forcePushed"}, {"oid": "db7fbe18cafe3b4b90032bf1d02020f37475a821", "url": "https://github.com/crate/crate/commit/db7fbe18cafe3b4b90032bf1d02020f37475a821", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-16T09:32:08Z", "type": "forcePushed"}, {"oid": "a2a62cea7994e28b259475157199215c68770121", "url": "https://github.com/crate/crate/commit/a2a62cea7994e28b259475157199215c68770121", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-16T10:11:22Z", "type": "forcePushed"}, {"oid": "f3a098ee7c4b86e33dd5e952bf3711b9819a6e37", "url": "https://github.com/crate/crate/commit/f3a098ee7c4b86e33dd5e952bf3711b9819a6e37", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-16T10:13:40Z", "type": "forcePushed"}, {"oid": "cb5f583b2e761719de564b2b344883c9684c9d40", "url": "https://github.com/crate/crate/commit/cb5f583b2e761719de564b2b344883c9684c9d40", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-16T10:16:45Z", "type": "forcePushed"}, {"oid": "79c2f09bc6c283db7aaee5ffad619e0bfb8509b4", "url": "https://github.com/crate/crate/commit/79c2f09bc6c283db7aaee5ffad619e0bfb8509b4", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-16T10:19:30Z", "type": "forcePushed"}, {"oid": "10e6a886bb074ccd3d09a7a5e5a003b397744720", "url": "https://github.com/crate/crate/commit/10e6a886bb074ccd3d09a7a5e5a003b397744720", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-16T10:23:01Z", "type": "forcePushed"}, {"oid": "7de913fb3cf47b165ac86d761d2dbfb5de988b23", "url": "https://github.com/crate/crate/commit/7de913fb3cf47b165ac86d761d2dbfb5de988b23", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-16T10:25:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxODgyOQ==", "url": "https://github.com/crate/crate/pull/10862#discussion_r544218829", "bodyText": "I experimented with smaller values as size theshold since the amount of doc ids can be less due to parallel fetch execution in comparison to elasticsearch. However,  the performance goes worse with smaller batches.", "author": "mkleen", "createdAt": "2020-12-16T11:22:02Z", "path": "server/src/main/java/io/crate/execution/engine/fetch/FetchCollector.java", "diffHunk": "@@ -67,27 +71,59 @@\n \n     }\n \n-    private void setNextDocId(LeafReaderContext readerContext, int doc) throws IOException {\n+    private void setNextDocId(ReaderContext readerContext, int doc) throws IOException {\n         for (LuceneCollectorExpression<?> e : collectorExpressions) {\n             e.setNextReader(readerContext);\n             e.setNextDocId(doc);\n         }\n     }\n \n     public StreamBucket collect(IntContainer docIds) {\n+        if (docIds.size() >= 10) {", "originalCommit": "7de913fb3cf47b165ac86d761d2dbfb5de988b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19bdf6c6025bca7d09623d40e37ef17918ccdb75", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/fetch/FetchCollector.java b/server/src/main/java/io/crate/execution/engine/fetch/FetchCollector.java\nindex bf2b8813eb..35933fad68 100644\n--- a/server/src/main/java/io/crate/execution/engine/fetch/FetchCollector.java\n+++ b/server/src/main/java/io/crate/execution/engine/fetch/FetchCollector.java\n\n@@ -123,7 +123,7 @@ class FetchCollector {\n                         storedFieldReader = sequentialStoredFieldReader(subReaderContext);\n                         storedFieldsReaders.put(readerIndex, storedFieldReader);\n                     }\n-                    setNextDocId(new ReaderContext(subReaderContext, storedFieldReader), docId - subReaderContext.docBase);\n+                    setNextDocId(new ReaderContext(subReaderContext, storedFieldReader::visitDocument), docId - subReaderContext.docBase);\n                 } catch (IOException e) {\n                     Exceptions.rethrowRuntimeException(e);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE5NzMzMA==", "url": "https://github.com/crate/crate/pull/10862#discussion_r545197330", "bodyText": "The null check on every document could be avoided by defining a BiConsumer on the ctor.", "author": "seut", "createdAt": "2020-12-17T15:52:13Z", "path": "server/src/main/java/io/crate/execution/engine/fetch/ReaderContext.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.fetch;\n+\n+import org.apache.lucene.codecs.StoredFieldsReader;\n+import org.apache.lucene.index.LeafReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.StoredFieldVisitor;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+public class ReaderContext {\n+\n+    private final LeafReaderContext leafReaderContext;\n+    @Nullable\n+    private final StoredFieldsReader storedFieldsReader;\n+\n+    public ReaderContext(LeafReaderContext leafReaderContext, @Nullable StoredFieldsReader storedFieldsReader) {\n+        this.leafReaderContext = leafReaderContext;\n+        this.storedFieldsReader = storedFieldsReader;\n+    }\n+\n+    public ReaderContext(LeafReaderContext leafReaderContext) {\n+        this(leafReaderContext, null);\n+    }\n+\n+    public void visitDocument(int docId, StoredFieldVisitor visitor) throws IOException {\n+        if (storedFieldsReader == null) {", "originalCommit": "7de913fb3cf47b165ac86d761d2dbfb5de988b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19bdf6c6025bca7d09623d40e37ef17918ccdb75", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/fetch/ReaderContext.java b/server/src/main/java/io/crate/execution/engine/fetch/ReaderContext.java\nindex ada84c72c2..18e49cff6c 100644\n--- a/server/src/main/java/io/crate/execution/engine/fetch/ReaderContext.java\n+++ b/server/src/main/java/io/crate/execution/engine/fetch/ReaderContext.java\n\n@@ -22,35 +22,30 @@\n \n package io.crate.execution.engine.fetch;\n \n-import org.apache.lucene.codecs.StoredFieldsReader;\n import org.apache.lucene.index.LeafReader;\n import org.apache.lucene.index.LeafReaderContext;\n import org.apache.lucene.index.StoredFieldVisitor;\n+import org.elasticsearch.common.CheckedBiConsumer;\n \n-import javax.annotation.Nullable;\n import java.io.IOException;\n \n public class ReaderContext {\n \n     private final LeafReaderContext leafReaderContext;\n-    @Nullable\n-    private final StoredFieldsReader storedFieldsReader;\n+    private final CheckedBiConsumer<Integer,StoredFieldVisitor, IOException> storedFieldsReader;\n \n-    public ReaderContext(LeafReaderContext leafReaderContext, @Nullable StoredFieldsReader storedFieldsReader) {\n+    public ReaderContext(LeafReaderContext leafReaderContext,\n+                         CheckedBiConsumer<Integer, StoredFieldVisitor, IOException> storedFieldsReader) {\n         this.leafReaderContext = leafReaderContext;\n         this.storedFieldsReader = storedFieldsReader;\n     }\n \n     public ReaderContext(LeafReaderContext leafReaderContext) {\n-        this(leafReaderContext, null);\n+        this(leafReaderContext, leafReaderContext.reader()::document);\n     }\n \n     public void visitDocument(int docId, StoredFieldVisitor visitor) throws IOException {\n-        if (storedFieldsReader == null) {\n-            leafReaderContext.reader().document(docId, visitor);\n-        } else {\n-            storedFieldsReader.visitDocument(docId, visitor);\n-        }\n+        storedFieldsReader.accept(docId, visitor);\n     }\n \n     public LeafReader reader() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwNTIyOQ==", "url": "https://github.com/crate/crate/pull/10862#discussion_r545205229", "bodyText": "I wonder why this change is needed as the related ES commit does not change anything here?", "author": "seut", "createdAt": "2020-12-17T16:02:04Z", "path": "server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java", "diffHunk": "@@ -50,7 +52,7 @@ public ShardId shardId() {\n     }\n \n     @Override\n-    public CacheHelper getCoreCacheHelper() {\n+    public IndexReader.CacheHelper getCoreCacheHelper() {", "originalCommit": "7de913fb3cf47b165ac86d761d2dbfb5de988b23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19bdf6c6025bca7d09623d40e37ef17918ccdb75", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java b/server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java\nindex 5908b4b685..d957677db3 100644\n--- a/server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java\n+++ b/server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java\n\n@@ -52,7 +52,7 @@ public final class ElasticsearchLeafReader extends SequentialStoredFieldsLeafRea\n     }\n \n     @Override\n-    public IndexReader.CacheHelper getCoreCacheHelper() {\n+    public CacheHelper getCoreCacheHelper() {\n         return in.getCoreCacheHelper();\n     }\n \n"}}, {"oid": "19bdf6c6025bca7d09623d40e37ef17918ccdb75", "url": "https://github.com/crate/crate/commit/19bdf6c6025bca7d09623d40e37ef17918ccdb75", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-17T16:56:51Z", "type": "forcePushed"}, {"oid": "bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "url": "https://github.com/crate/crate/commit/bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-17T17:22:13Z", "type": "commit"}, {"oid": "bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "url": "https://github.com/crate/crate/commit/bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access.", "committedDate": "2020-12-17T17:22:13Z", "type": "forcePushed"}, {"oid": "6b478572f7cc7219d96000a330883d4b2e7c2960", "url": "https://github.com/crate/crate/commit/6b478572f7cc7219d96000a330883d4b2e7c2960", "message": "Merge branch 'master' into mkleen/improve_ordered_fetch", "committedDate": "2020-12-17T17:55:14Z", "type": "commit"}]}