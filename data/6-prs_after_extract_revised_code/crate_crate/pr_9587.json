{"pr_number": 9587, "pr_title": "Fix error handling while consuming a next batch", "pr_createdAt": "2020-01-29T09:01:06Z", "pr_url": "https://github.com/crate/crate/pull/9587", "timeline": [{"oid": "32741829bb4a51b20c3a1d280182459a40100b14", "url": "https://github.com/crate/crate/commit/32741829bb4a51b20c3a1d280182459a40100b14", "message": "Fix error handling inside the distributed consumer\n\nAll exceptions on consuming must be caught and forwarded, otherwise\nthe exception may be swallowed, resulting in stuck operations.", "committedDate": "2020-01-29T09:01:23Z", "type": "forcePushed"}, {"oid": "d3627f90b072cfe0dcccad161ae70213da415b0f", "url": "https://github.com/crate/crate/commit/d3627f90b072cfe0dcccad161ae70213da415b0f", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around.", "committedDate": "2020-01-29T14:24:13Z", "type": "forcePushed"}, {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874", "url": "https://github.com/crate/crate/commit/0d43aea914e8928dcbd315d3508f9473b1e0c874", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around.", "committedDate": "2020-01-29T14:25:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxOTQ0NA==", "url": "https://github.com/crate/crate/pull/9587#discussion_r372419444", "bodyText": "Couldn't we change uncheckedLoadNextBatch to throw an Exception as well? It's called within loadNextBatch.", "author": "mfussenegger", "createdAt": "2020-01-29T14:38:53Z", "path": "dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java", "diffHunk": "@@ -128,10 +128,14 @@ private void concatRows(Iterator<? extends T> rows) {\n     private CompletionStage<?> uncheckedLoadNextBatch() {\n         CompletionStage<?> batchProcessResult = tryProcessBatchFromLoadedSource();\n         if (batchProcessResult == null) {\n-            if (source.allLoaded()) {\n-                return processRemaining();\n+            try {\n+                if (source.allLoaded()) {\n+                    return processRemaining();\n+                }\n+                return source.loadNextBatch().thenCompose(ignored -> this.uncheckedLoadNextBatch());\n+            } catch (Throwable t) {\n+                return CompletableFuture.failedFuture(t);", "originalCommit": "0d43aea914e8928dcbd315d3508f9473b1e0c874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNTkxMg==", "url": "https://github.com/crate/crate/pull/9587#discussion_r372425912", "bodyText": "Yes right, although the nested uncheckedLoadNextBatch call must be caught then..", "author": "seut", "createdAt": "2020-01-29T14:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxOTQ0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNzc1Ng==", "url": "https://github.com/crate/crate/pull/9587#discussion_r372427756", "bodyText": "Hm k, let's keep it as is then.", "author": "mfussenegger", "createdAt": "2020-01-29T14:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxOTQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "chunk": "diff --git a/dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java b/dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java\nindex b48dac5d47..4ae3ddca3f 100644\n--- a/dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java\n+++ b/dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java\n\n@@ -118,9 +118,9 @@ public class AsyncOperationBatchIterator<T> implements BatchIterator<T> {\n     }\n \n     @Override\n-    public CompletionStage<?> loadNextBatch() {\n+    public CompletionStage<?> loadNextBatch() throws Exception {\n         if (sourceExhausted) {\n-            return CompletableFuture.failedFuture(new IllegalStateException(\"BatchIterator already fully loaded\"));\n+            throw new IllegalStateException(\"BatchIterator already fully loaded\");\n         }\n         return uncheckedLoadNextBatch();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyMTMzNg==", "url": "https://github.com/crate/crate/pull/9587#discussion_r372421336", "bodyText": "I guess this case is one of the downsides of the checked exception. supplyAsync would already handle the exception correctly :(", "author": "mfussenegger", "createdAt": "2020-01-29T14:42:00Z", "path": "dex/src/main/java/io/crate/data/CompositeBatchIterator.java", "diffHunk": "@@ -202,15 +202,25 @@ public boolean moveNext() {\n                     CompletableFuture<CompletableFuture> future = supplyAsync(() -> {\n                         ArrayList<CompletableFuture<?>> futures = new ArrayList<>(batchIterators.size());\n                         for (BatchIterator<T> batchIterator: batchIterators) {\n-                            futures.add(batchIterator.loadNextBatch().toCompletableFuture());\n+                            try {\n+                                futures.add(batchIterator.loadNextBatch().toCompletableFuture());\n+                            } catch (Throwable t) {\n+                                return CompletableFuture.failedFuture(t);\n+                            }\n                         }\n                         return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n                     }, executor);\n                     nestedFutures.add(future);\n                 }\n             } else {\n                 for (BatchIterator<T> iterator: itToLoad) {\n-                    nestedFutures.add(supplyAsync(() -> iterator.loadNextBatch().toCompletableFuture(), executor));\n+                    nestedFutures.add(supplyAsync(() -> {\n+                        try {\n+                            return iterator.loadNextBatch().toCompletableFuture();\n+                        } catch (Throwable t) {\n+                            return CompletableFuture.failedFuture(t);", "originalCommit": "0d43aea914e8928dcbd315d3508f9473b1e0c874", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "url": "https://github.com/crate/crate/commit/7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around.", "committedDate": "2020-01-29T15:53:58Z", "type": "commit"}, {"oid": "7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "url": "https://github.com/crate/crate/commit/7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around.", "committedDate": "2020-01-29T15:53:58Z", "type": "forcePushed"}]}