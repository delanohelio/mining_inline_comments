{"pr_number": 10033, "pr_title": "Insert into support for `varchar(length)`", "pr_createdAt": "2020-06-02T14:21:10Z", "pr_url": "https://github.com/crate/crate/pull/10033", "timeline": [{"oid": "6dc7305cfe6b95610bdd50254183cb641ea6450b", "url": "https://github.com/crate/crate/commit/6dc7305cfe6b95610bdd50254183cb641ea6450b", "message": "Support text type with length for insert from values and query.", "committedDate": "2020-06-02T14:49:22Z", "type": "forcePushed"}, {"oid": "897364fe0ec5304a2ff04fcc9e6fb85e1b1c4138", "url": "https://github.com/crate/crate/commit/897364fe0ec5304a2ff04fcc9e6fb85e1b1c4138", "message": "Support text type with length for insert from values and query.", "committedDate": "2020-06-03T09:58:50Z", "type": "forcePushed"}, {"oid": "d841e5b9c29f9b439c56559eb20cce849374430d", "url": "https://github.com/crate/crate/commit/d841e5b9c29f9b439c56559eb20cce849374430d", "message": "Support text type with length for insert from values and query.", "committedDate": "2020-06-03T13:22:21Z", "type": "forcePushed"}, {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785", "url": "https://github.com/crate/crate/commit/57fdeab1c6b095e2915122b6d80676d3701d4785", "message": "Support text type with length for insert from values and query.", "committedDate": "2020-06-03T13:41:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MzMyOA==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434583328", "bodyText": "I think the default implementation should return the value as-is unchanged. Has a lower overhead and is closer to the prior behavior before the introduction of the method.\nWill also be easier to reason about what is happening.", "author": "mfussenegger", "createdAt": "2020-06-03T13:52:17Z", "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -105,6 +105,18 @@ public T explicitCast(Object value) throws IllegalArgumentException, ClassCastEx\n         return implicitCast(value);\n     }\n \n+    /**\n+     * To prepare a value of the same {@link DataType<T>} for insertion.\n+     * The method fall backs to the implicit cast if it is overwritten\n+     * by a data type subclass.\n+     *\n+     * @param value The value of the {@link DataType<T>}.\n+     * @return The prepared for insertion value of the {@link DataType<T>}.\n+     */\n+    public T valueForInsert(Object value) {\n+        return implicitCast(value);", "originalCommit": "57fdeab1c6b095e2915122b6d80676d3701d4785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "chunk": "diff --git a/server/src/main/java/io/crate/types/DataType.java b/server/src/main/java/io/crate/types/DataType.java\nindex c4238c2097..ff04ba0260 100644\n--- a/server/src/main/java/io/crate/types/DataType.java\n+++ b/server/src/main/java/io/crate/types/DataType.java\n\n@@ -107,14 +107,12 @@ public abstract class DataType<T> implements Comparable<DataType<?>>, Writeable,\n \n     /**\n      * To prepare a value of the same {@link DataType<T>} for insertion.\n-     * The method fall backs to the implicit cast if it is overwritten\n-     * by a data type subclass.\n      *\n      * @param value The value of the {@link DataType<T>}.\n      * @return The prepared for insertion value of the {@link DataType<T>}.\n      */\n     public T valueForInsert(Object value) {\n-        return implicitCast(value);\n+        return (T) value;\n     }\n \n     public abstract T value(Object value) throws IllegalArgumentException, ClassCastException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDI3Mw==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434584273", "bodyText": "Would it make sense to add a String.class entry to POJO_TYPE_MAPPING instead?", "author": "mfussenegger", "createdAt": "2020-06-03T13:53:27Z", "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -253,6 +253,8 @@ public static void toStream(DataType type, StreamOutput out) throws IOException\n             return valueFromList((List) value);\n         } else if (value.getClass().isArray()) {\n             return valueFromList(Arrays.asList((Object[]) value));\n+        } else if (value instanceof StringType) {\n+            return STRING;", "originalCommit": "57fdeab1c6b095e2915122b6d80676d3701d4785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "chunk": "diff --git a/server/src/main/java/io/crate/types/DataTypes.java b/server/src/main/java/io/crate/types/DataTypes.java\nindex 7a09e07fd7..12d9055384 100644\n--- a/server/src/main/java/io/crate/types/DataTypes.java\n+++ b/server/src/main/java/io/crate/types/DataTypes.java\n\n@@ -253,8 +253,6 @@ public final class DataTypes {\n             return valueFromList((List) value);\n         } else if (value.getClass().isArray()) {\n             return valueFromList(Arrays.asList((Object[]) value));\n-        } else if (value instanceof StringType) {\n-            return STRING;\n         }\n         return POJO_TYPE_MAPPING.get(value.getClass());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NTA5NQ==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434585095", "bodyText": "Given that we already use readInt /writeInt instead of the vInt variants, couldn't we just write the MAX_VALUE directly and avoid the boolean?", "author": "mfussenegger", "createdAt": "2020-06-03T13:54:35Z", "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -69,6 +70,18 @@ private StringType(int lengthLimit) {\n         this.lengthLimit = lengthLimit;\n     }\n \n+    public StringType(StreamInput in) throws IOException {\n+        if (in.getVersion().onOrAfter(Version.V_4_2_0)) {\n+            if (in.readBoolean()) { // see writeTo\n+                lengthLimit = Integer.MAX_VALUE;\n+            } else {\n+                lengthLimit = in.readInt();", "originalCommit": "57fdeab1c6b095e2915122b6d80676d3701d4785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "chunk": "diff --git a/server/src/main/java/io/crate/types/StringType.java b/server/src/main/java/io/crate/types/StringType.java\nindex 7f9bd20af7..f48c034d13 100644\n--- a/server/src/main/java/io/crate/types/StringType.java\n+++ b/server/src/main/java/io/crate/types/StringType.java\n\n@@ -72,11 +74,7 @@ public class StringType extends DataType<String> implements Streamer<String> {\n \n     public StringType(StreamInput in) throws IOException {\n         if (in.getVersion().onOrAfter(Version.V_4_2_0)) {\n-            if (in.readBoolean()) { // see writeTo\n-                lengthLimit = Integer.MAX_VALUE;\n-            } else {\n-                lengthLimit = in.readInt();\n-            }\n+            lengthLimit = in.readInt();\n         } else {\n             lengthLimit = Integer.MAX_VALUE;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NjQ3OA==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434586478", "bodyText": "I think we should be able to assert that the value is a String. Or even change the signature (valueForInsert(T value)) and not run the implicit cast logic.\nIf the value didn't match the target type, we would already have added an implicit cast, so the value at this point must already match the type.", "author": "mfussenegger", "createdAt": "2020-06-03T13:56:22Z", "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);", "originalCommit": "57fdeab1c6b095e2915122b6d80676d3701d4785", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzODI1Ng==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434838256", "bodyText": "I've added the assertion. Regarding the valueForInsert(T), I am not sure how to do that, it won't be probably possible to resolve the generic type, e.g. see https://github.com/crate/crate/pull/10033/files#diff-3bb55e4656a2a8f9d19f282021eff5f6R106 here the input argument has Object type.", "author": "kovrus", "createdAt": "2020-06-03T20:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NjQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NDMxMQ==", "url": "https://github.com/crate/crate/pull/10033#discussion_r435064311", "bodyText": "I am not sure how to do that, it won't be probably possible to resolve the generic type\n\nAh right, let's leave it as it is now then", "author": "mfussenegger", "createdAt": "2020-06-04T07:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NjQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "chunk": "diff --git a/server/src/main/java/io/crate/types/StringType.java b/server/src/main/java/io/crate/types/StringType.java\nindex 7f9bd20af7..f48c034d13 100644\n--- a/server/src/main/java/io/crate/types/StringType.java\n+++ b/server/src/main/java/io/crate/types/StringType.java\n\n@@ -160,11 +158,13 @@ public class StringType extends DataType<String> implements Streamer<String> {\n         if (value == null) {\n             return null;\n         }\n-        var string = convert(value);\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n         if (unbound() || string.length() <= lengthLimit) {\n             return string;\n         } else {\n-            if (string.substring(lengthLimit).isBlank()) {\n+            if (isBlank(string, lengthLimit, string.length())) {\n                 return string.substring(0, lengthLimit);\n             } else {\n                 throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434587506", "bodyText": "This may be fairly expensive for it does (copies the string) - to check if a region is blank.", "author": "mfussenegger", "createdAt": "2020-06-03T13:57:43Z", "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "originalCommit": "57fdeab1c6b095e2915122b6d80676d3701d4785", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5MDM3Mw==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434590373", "bodyText": "substring does not copy the string, it is just a view of the underlying char array, therefore, it is constant time complexity.", "author": "kovrus", "createdAt": "2020-06-03T14:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5MjkyOQ==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434592929", "bodyText": "Unfortunately not:\n    public String substring(int beginIndex) {\n        return substring(beginIndex, length());\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * <p>\n     * Examples:\n     * <blockquote><pre>\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * </pre></blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length = length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen = endIndex - beginIndex;\n        if (beginIndex == 0 && endIndex == length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n\n    public static String newString(byte[] val, int index, int len) {\n        return new String(Arrays.copyOfRange(val, index, index + len),\n                          LATIN1);\n    }\n\n    public static String newString(byte[] val, int index, int len) {\n        if (String.COMPACT_STRINGS) {\n            byte[] buf = compress(val, index, len);\n            if (buf != null) {\n                return new String(buf, LATIN1);\n            }\n        }\n        int last = index + len;\n        return new String(Arrays.copyOfRange(val, index << 1, last << 1), UTF16);\n    }", "author": "mfussenegger", "createdAt": "2020-06-03T14:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5ODIyNg==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434598226", "bodyText": "indeed.. sorry, was super confident that it is not the case :/ it seems to be different in quite old java versions.", "author": "kovrus", "createdAt": "2020-06-03T14:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMTczMg==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434601732", "bodyText": "Or maybe confused it with List#subList ? I think that is just a view.", "author": "mfussenegger", "createdAt": "2020-06-03T14:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwODgwOA==", "url": "https://github.com/crate/crate/pull/10033#discussion_r434608808", "bodyText": "anyways, it will be more efficient just to go through chars in the range of our interest.", "author": "kovrus", "createdAt": "2020-06-03T14:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "chunk": "diff --git a/server/src/main/java/io/crate/types/StringType.java b/server/src/main/java/io/crate/types/StringType.java\nindex 7f9bd20af7..f48c034d13 100644\n--- a/server/src/main/java/io/crate/types/StringType.java\n+++ b/server/src/main/java/io/crate/types/StringType.java\n\n@@ -160,11 +158,13 @@ public class StringType extends DataType<String> implements Streamer<String> {\n         if (value == null) {\n             return null;\n         }\n-        var string = convert(value);\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n         if (unbound() || string.length() <= lengthLimit) {\n             return string;\n         } else {\n-            if (string.substring(lengthLimit).isBlank()) {\n+            if (isBlank(string, lengthLimit, string.length())) {\n                 return string.substring(0, lengthLimit);\n             } else {\n                 throw new IllegalArgumentException(\n"}}, {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "url": "https://github.com/crate/crate/commit/381a913da58eafe4cd8ef3f250ba0673b5f95aea", "message": "fixup! Support text type with length for insert from values and query.", "committedDate": "2020-06-03T20:41:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ==", "url": "https://github.com/crate/crate/pull/10033#discussion_r435060751", "bodyText": "Maybe we could even include the value in the error message", "author": "mfussenegger", "createdAt": "2020-06-04T07:53:08Z", "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +153,26 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (isBlank(string, lengthLimit, string.length())) {\n+                return string.substring(0, lengthLimit);\n+            } else {\n+                throw new IllegalArgumentException(\n+                    \"The value is too long for text type of the length: \" + lengthLimit);", "originalCommit": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MjUyOQ==", "url": "https://github.com/crate/crate/pull/10033#discussion_r435062529", "bodyText": "The whole value or maybe trim it after few characters, e.g. fasfdsf... is to long for ...", "author": "kovrus", "createdAt": "2020-06-04T07:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NDkzMQ==", "url": "https://github.com/crate/crate/pull/10033#discussion_r435064931", "bodyText": "Yes, trimming after a certain length may make sense. After 20 chars or so?", "author": "mfussenegger", "createdAt": "2020-06-04T08:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTExNQ==", "url": "https://github.com/crate/crate/pull/10033#discussion_r435081115", "bodyText": "20 sounds good \ud83d\udc4d", "author": "kovrus", "createdAt": "2020-06-04T08:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6cc0915780b5f5500bc70aafb5fdde29b75819c3", "chunk": "diff --git a/server/src/main/java/io/crate/types/StringType.java b/server/src/main/java/io/crate/types/StringType.java\nindex f48c034d13..e014b9a944 100644\n--- a/server/src/main/java/io/crate/types/StringType.java\n+++ b/server/src/main/java/io/crate/types/StringType.java\n\n@@ -153,26 +151,6 @@ public class StringType extends DataType<String> implements Streamer<String> {\n         }\n     }\n \n-    @Override\n-    public String valueForInsert(Object value) {\n-        if (value == null) {\n-            return null;\n-        }\n-        assert value instanceof String\n-            : \"valueForInsert must be called only on objects of String type\";\n-        var string = (String) value;\n-        if (unbound() || string.length() <= lengthLimit) {\n-            return string;\n-        } else {\n-            if (isBlank(string, lengthLimit, string.length())) {\n-                return string.substring(0, lengthLimit);\n-            } else {\n-                throw new IllegalArgumentException(\n-                    \"The value is too long for text type of the length: \" + lengthLimit);\n-            }\n-        }\n-    }\n-\n     @Override\n     public String value(Object value) {\n         if (value == null) {\n"}}, {"oid": "6cc0915780b5f5500bc70aafb5fdde29b75819c3", "url": "https://github.com/crate/crate/commit/6cc0915780b5f5500bc70aafb5fdde29b75819c3", "message": "Reflect limit length in serialization of the text type.", "committedDate": "2020-06-04T08:49:38Z", "type": "commit"}, {"oid": "42d5070c66204778505d67cc6c21eb594b10b5b2", "url": "https://github.com/crate/crate/commit/42d5070c66204778505d67cc6c21eb594b10b5b2", "message": "Support text type with length for insert from values and query.", "committedDate": "2020-06-04T08:49:38Z", "type": "commit"}, {"oid": "42d5070c66204778505d67cc6c21eb594b10b5b2", "url": "https://github.com/crate/crate/commit/42d5070c66204778505d67cc6c21eb594b10b5b2", "message": "Support text type with length for insert from values and query.", "committedDate": "2020-06-04T08:49:38Z", "type": "forcePushed"}]}