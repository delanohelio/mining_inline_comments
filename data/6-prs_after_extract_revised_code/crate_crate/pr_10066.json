{"pr_number": 10066, "pr_title": "Detect Integer literal values at the sql parser", "pr_createdAt": "2020-06-09T15:17:08Z", "pr_url": "https://github.com/crate/crate/pull/10066", "timeline": [{"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd", "url": "https://github.com/crate/crate/commit/d5bad6f60cd0243ee9f62b85640433af117e67fd", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-09T15:26:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzUwNQ==", "url": "https://github.com/crate/crate/pull/10066#discussion_r437533505", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));\n          \n          \n            \n                        builder.append(Integer.toString(node.getValue()));\n          \n      \n    \n    \n  \n\nCheaper than going through String.format", "author": "mfussenegger", "createdAt": "2020-06-09T15:45:12Z", "path": "libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "diffHunk": "@@ -679,6 +680,12 @@ protected Void visitLongLiteral(LongLiteral node, Integer indent) {\n             return null;\n         }\n \n+        @Override\n+        protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) {\n+            builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));", "originalCommit": "d5bad6f60cd0243ee9f62b85640433af117e67fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3ODU1Ng==", "url": "https://github.com/crate/crate/pull/10066#discussion_r437978556", "bodyText": "Afaik it could be just builder.append(node.getValue()) as the StringBuilder is already doing similar.", "author": "seut", "createdAt": "2020-06-10T09:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d4464b377757997ebc9a84a375894fe3c10199c", "chunk": "diff --git a/libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java b/libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java\nindex 839bd91be9..0326350fee 100644\n--- a/libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java\n+++ b/libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java\n\n@@ -676,13 +676,13 @@ public final class SqlFormatter {\n \n         @Override\n         protected Void visitLongLiteral(LongLiteral node, Integer indent) {\n-            builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));\n+            builder.append(node.getValue());\n             return null;\n         }\n \n         @Override\n         protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) {\n-            builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));\n+            builder.append(node.getValue());\n             return null;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMzYxOA==", "url": "https://github.com/crate/crate/pull/10066#discussion_r437933618", "bodyText": "\ud83d\udc4d\nreally minor, probably it can just return value to avoid integer boxing with Objects.hash or use Integer#hashCode.", "author": "kovrus", "createdAt": "2020-06-10T07:59:27Z", "path": "libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import java.util.Objects;\n+\n+public class IntegerLiteral extends Literal {\n+\n+    private final int value;\n+\n+    public IntegerLiteral(int value) {\n+        this.value = value;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitIntegerLiteral(this, context);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        IntegerLiteral that = (IntegerLiteral) o;\n+        return value == that.value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);", "originalCommit": "d5bad6f60cd0243ee9f62b85640433af117e67fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d4464b377757997ebc9a84a375894fe3c10199c", "chunk": "diff --git a/libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java b/libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java\nindex 876a1476fb..b40bd8f1ce 100644\n--- a/libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java\n+++ b/libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java\n\n@@ -22,8 +22,6 @@\n \n package io.crate.sql.tree;\n \n-import java.util.Objects;\n-\n public class IntegerLiteral extends Literal {\n \n     private final int value;\n"}}, {"oid": "8d4464b377757997ebc9a84a375894fe3c10199c", "url": "https://github.com/crate/crate/commit/8d4464b377757997ebc9a84a375894fe3c10199c", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-10T09:36:51Z", "type": "forcePushed"}, {"oid": "db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "url": "https://github.com/crate/crate/commit/db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-10T10:15:58Z", "type": "commit"}, {"oid": "db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "url": "https://github.com/crate/crate/commit/db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-10T10:15:58Z", "type": "forcePushed"}]}