{"pr_number": 9769, "pr_title": "Migrate SysOperationsLogTableInfo, SysSummitsTableInfo and SysSnapshotsTableInfo to SystemTable", "pr_createdAt": "2020-03-17T10:40:56Z", "pr_url": "https://github.com/crate/crate/pull/9769", "timeline": [{"oid": "97d07e8b5abf56e0a53ffddffbd7132238935c6a", "url": "https://github.com/crate/crate/commit/97d07e8b5abf56e0a53ffddffbd7132238935c6a", "message": " Migrate SysOperationsLogTableInfo to SystemTable", "committedDate": "2020-03-17T10:51:01Z", "type": "forcePushed"}, {"oid": "2f63afb0ca19fb52e7604bcf2c4d685479b709b5", "url": "https://github.com/crate/crate/commit/2f63afb0ca19fb52e7604bcf2c4d685479b709b5", "message": " Migrate SysOperationsLogTableInfo to SystemTable", "committedDate": "2020-03-17T11:35:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1ODE5NQ==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393658195", "bodyText": "The SystemTable defaults to routing on a single node, so you need to add an override.", "author": "mfussenegger", "createdAt": "2020-03-17T12:56:58Z", "path": "sql/src/main/java/io/crate/metadata/sys/SysOperationsLogTableInfo.java", "diffHunk": "@@ -21,65 +21,26 @@\n \n package io.crate.metadata.sys;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n import io.crate.expression.reference.sys.operation.OperationContextLog;\n-import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationName;\n-import io.crate.metadata.Routing;\n-import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n-import org.elasticsearch.cluster.ClusterState;\n-\n-import java.util.Map;\n-\n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n+import io.crate.metadata.SystemTable;\n import static io.crate.types.DataTypes.LONG;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n \n-public class SysOperationsLogTableInfo extends StaticTableInfo<OperationContextLog> {\n+public class SysOperationsLogTableInfo {\n \n     public static final RelationName IDENT = new RelationName(SysSchemaInfo.NAME, \"operations_log\");\n \n-    public static Map<ColumnIdent, RowCollectExpressionFactory<OperationContextLog>> expressions() {\n-        return columnRegistrar().expressions();\n-    }\n-\n-    private static ColumnRegistrar<OperationContextLog> columnRegistrar() {\n-        return new ColumnRegistrar<OperationContextLog>(IDENT, RowGranularity.DOC)\n-            .register(\"id\", STRING, () -> forFunction(l -> String.valueOf(l.id())))\n-            .register(\"job_id\", STRING, () -> forFunction(l -> l.jobId().toString()))\n-            .register(\"name\", STRING, () -> forFunction(OperationContextLog::name))\n-            .register(\"started\", TIMESTAMPZ, () -> forFunction(OperationContextLog::started))\n-            .register(\"ended\", TIMESTAMPZ, () -> forFunction(OperationContextLog::ended))\n-            .register(\"used_bytes\", LONG, () -> forFunction(OperationContextLog::usedBytes))\n-            .register(\"error\", STRING, () -> forFunction(OperationContextLog::errorMessage));\n-    }\n-\n-    SysOperationsLogTableInfo() {\n-        super(IDENT, columnRegistrar());\n-    }\n-\n-    @Override\n-    public RowGranularity rowGranularity() {\n-        return RowGranularity.DOC;\n-    }\n-\n-    @Override\n-    public RelationName ident() {\n-        return IDENT;\n-    }\n-\n-    @Override\n-    public Routing getRouting(ClusterState clusterState,\n-                              RoutingProvider routingProvider,\n-                              WhereClause whereClause,\n-                              RoutingProvider.ShardSelection shardSelection,\n-                              SessionContext sessionContext) {\n-        return Routing.forTableOnAllNodes(IDENT, clusterState.getNodes());", "originalCommit": "2f63afb0ca19fb52e7604bcf2c4d685479b709b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MzQ2Mg==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393693462", "bodyText": "\ud83d\udc4d", "author": "mkleen", "createdAt": "2020-03-17T13:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1ODE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c503158f2b52f3ee4e89275157fd324ee3e73261", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/sys/SysOperationsLogTableInfo.java b/sql/src/main/java/io/crate/metadata/sys/SysOperationsLogTableInfo.java\nindex 4f81997c28..92ce209804 100644\n--- a/sql/src/main/java/io/crate/metadata/sys/SysOperationsLogTableInfo.java\n+++ b/sql/src/main/java/io/crate/metadata/sys/SysOperationsLogTableInfo.java\n\n@@ -23,7 +23,9 @@ package io.crate.metadata.sys;\n \n import io.crate.expression.reference.sys.operation.OperationContextLog;\n import io.crate.metadata.RelationName;\n+import io.crate.metadata.Routing;\n import io.crate.metadata.SystemTable;\n+\n import static io.crate.types.DataTypes.LONG;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1ODMxNw==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393658317", "bodyText": "This custom routing behavior needs to be preserved.", "author": "mfussenegger", "createdAt": "2020-03-17T12:57:13Z", "path": "sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java", "diffHunk": "@@ -21,73 +21,29 @@\n \n package io.crate.metadata.sys;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n import io.crate.expression.reference.sys.snapshot.SysSnapshot;\n import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationName;\n-import io.crate.metadata.Routing;\n-import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n-import org.elasticsearch.cluster.ClusterState;\n-\n-import java.util.Map;\n-\n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n+import io.crate.metadata.SystemTable;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n \n-public class SysSnapshotsTableInfo extends StaticTableInfo<SysSnapshot> {\n+public class SysSnapshotsTableInfo {\n \n     public static final RelationName IDENT = new RelationName(SysSchemaInfo.NAME, \"snapshots\");\n-    private static final RowGranularity GRANULARITY = RowGranularity.DOC;\n-\n-    public static class Columns {\n-        public static final ColumnIdent NAME = new ColumnIdent(\"name\");\n-    }\n-\n-    static Map<ColumnIdent, RowCollectExpressionFactory<SysSnapshot>> expressions() {\n-        return columnRegistrar().expressions();\n-    }\n-\n-    private static ColumnRegistrar<SysSnapshot> columnRegistrar() {\n-        return new ColumnRegistrar<SysSnapshot>(IDENT, GRANULARITY)\n-          .register(\"name\", STRING, () -> forFunction(SysSnapshot::name))\n-          .register(\"repository\", STRING, () -> forFunction(SysSnapshot::repository))\n-          .register(\"concrete_indices\", STRING_ARRAY, () -> forFunction(SysSnapshot::concreteIndices))\n-          .register(\"started\", TIMESTAMPZ, () -> forFunction(SysSnapshot::started))\n-          .register(\"finished\", TIMESTAMPZ, () -> forFunction(SysSnapshot::finished))\n-          .register(\"version\", STRING, () -> forFunction(SysSnapshot::version))\n-          .register(\"state\", STRING, () -> forFunction(SysSnapshot::state))\n-          .register(\"failures\", STRING_ARRAY, () -> forFunction(SysSnapshot::failures));\n-    }\n-\n-    SysSnapshotsTableInfo() {\n-        super(IDENT, columnRegistrar(), \"name\",\"repository\");\n-    }\n-\n-    @Override\n-    public RowGranularity rowGranularity() {\n-        return GRANULARITY;\n-    }\n-\n-    @Override\n-    public RelationName ident() {\n-        return IDENT;\n-    }\n \n-    @Override\n-    public Routing getRouting(ClusterState clusterState,\n-                              RoutingProvider routingProvider,\n-                              WhereClause whereClause,\n-                              RoutingProvider.ShardSelection shardSelection,\n-                              SessionContext sessionContext) {\n-        // route to random master or data node,\n-        // because RepositoriesService (and so snapshots info) is only available there\n-        return routingProvider.forRandomMasterOrDataNode(IDENT, clusterState.getNodes());", "originalCommit": "2f63afb0ca19fb52e7604bcf2c4d685479b709b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5MzUzMg==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393693532", "bodyText": "\ud83d\udc4d", "author": "mkleen", "createdAt": "2020-03-17T13:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1ODMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "c503158f2b52f3ee4e89275157fd324ee3e73261", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java b/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java\nindex 79ce3da9c5..398e79d0e1 100644\n--- a/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java\n+++ b/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java\n\n@@ -24,7 +24,12 @@ package io.crate.metadata.sys;\n import io.crate.expression.reference.sys.snapshot.SysSnapshot;\n import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationName;\n+import io.crate.metadata.Routing;\n+import io.crate.metadata.RoutingProvider;\n import io.crate.metadata.SystemTable;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+\n+\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MjYyOQ==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393742629", "bodyText": "I think we should extend the SystemTable getRouting method and add the routingProvider argument.\nThe routingProvider is initialized once per plan/query with the same seed, so that we have a stable routing result within one query.\nMay not matter much for system tables, but I think otherwise the difference in behavior could be confusing.", "author": "mfussenegger", "createdAt": "2020-03-17T14:58:50Z", "path": "sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java", "diffHunk": "@@ -21,73 +21,43 @@\n \n package io.crate.metadata.sys;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n import io.crate.expression.reference.sys.snapshot.SysSnapshot;\n import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationName;\n import io.crate.metadata.Routing;\n import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n-import org.elasticsearch.cluster.ClusterState;\n+import io.crate.metadata.SystemTable;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n \n-import java.util.Map;\n+import java.util.List;\n+import java.util.Random;\n \n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n \n-public class SysSnapshotsTableInfo extends StaticTableInfo<SysSnapshot> {\n+public class SysSnapshotsTableInfo {\n \n     public static final RelationName IDENT = new RelationName(SysSchemaInfo.NAME, \"snapshots\");\n-    private static final RowGranularity GRANULARITY = RowGranularity.DOC;\n \n-    public static class Columns {\n-        public static final ColumnIdent NAME = new ColumnIdent(\"name\");\n+    static SystemTable<SysSnapshot> create() {\n+        return SystemTable.<SysSnapshot>builder()\n+            .add(\"name\", STRING, SysSnapshot::name)\n+            .add(\"repository\", STRING, SysSnapshot::repository)\n+            .add(\"concrete_indices\", STRING_ARRAY, SysSnapshot::concreteIndices)\n+            .add(\"started\", TIMESTAMPZ, SysSnapshot::started)\n+            .add(\"finished\", TIMESTAMPZ, SysSnapshot::finished)\n+            .add(\"version\", STRING, SysSnapshot::version)\n+            .add(\"state\", STRING, SysSnapshot::state)\n+            .add(\"failures\", STRING_ARRAY, SysSnapshot::failures)\n+            .setPrimaryKeys(new ColumnIdent(\"name\"), new ColumnIdent(\"repository\"))\n+            .withRouting(SysSnapshotsTableInfo::getRouting)\n+            .build(IDENT);\n     }\n \n-    static Map<ColumnIdent, RowCollectExpressionFactory<SysSnapshot>> expressions() {\n-        return columnRegistrar().expressions();\n-    }\n-\n-    private static ColumnRegistrar<SysSnapshot> columnRegistrar() {\n-        return new ColumnRegistrar<SysSnapshot>(IDENT, GRANULARITY)\n-          .register(\"name\", STRING, () -> forFunction(SysSnapshot::name))\n-          .register(\"repository\", STRING, () -> forFunction(SysSnapshot::repository))\n-          .register(\"concrete_indices\", STRING_ARRAY, () -> forFunction(SysSnapshot::concreteIndices))\n-          .register(\"started\", TIMESTAMPZ, () -> forFunction(SysSnapshot::started))\n-          .register(\"finished\", TIMESTAMPZ, () -> forFunction(SysSnapshot::finished))\n-          .register(\"version\", STRING, () -> forFunction(SysSnapshot::version))\n-          .register(\"state\", STRING, () -> forFunction(SysSnapshot::state))\n-          .register(\"failures\", STRING_ARRAY, () -> forFunction(SysSnapshot::failures));\n-    }\n-\n-    SysSnapshotsTableInfo() {\n-        super(IDENT, columnRegistrar(), \"name\",\"repository\");\n-    }\n-\n-    @Override\n-    public RowGranularity rowGranularity() {\n-        return GRANULARITY;\n-    }\n-\n-    @Override\n-    public RelationName ident() {\n-        return IDENT;\n-    }\n-\n-    @Override\n-    public Routing getRouting(ClusterState clusterState,\n-                              RoutingProvider routingProvider,\n-                              WhereClause whereClause,\n-                              RoutingProvider.ShardSelection shardSelection,\n-                              SessionContext sessionContext) {\n+    private static Routing getRouting(DiscoveryNodes nodes) {\n         // route to random master or data node,\n         // because RepositoriesService (and so snapshots info) is only available there\n-        return routingProvider.forRandomMasterOrDataNode(IDENT, clusterState.getNodes());\n+        return new RoutingProvider(new Random().nextInt(), List.of()).forRandomMasterOrDataNode(IDENT, nodes);", "originalCommit": "76e1a4fd5afbf4971790ae3ed1f7c8b4e241bcc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2NzY1MQ==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393767651", "bodyText": "Sounds good, i will do a separate pr for this.", "author": "mkleen", "createdAt": "2020-03-17T15:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MjYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NTQ1MA==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393775450", "bodyText": "I think it should be part of this PR, as otherwise this PR introduces a behavior change and is no longer just a internal refactoring.", "author": "mfussenegger", "createdAt": "2020-03-17T15:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MjYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5NDU5MA==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393794590", "bodyText": "\ud83d\udc4d", "author": "mkleen", "createdAt": "2020-03-17T16:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MjYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c503158f2b52f3ee4e89275157fd324ee3e73261", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java b/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java\nindex 2ca3910aaf..398e79d0e1 100644\n--- a/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java\n+++ b/sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java\n\n@@ -29,8 +29,6 @@ import io.crate.metadata.RoutingProvider;\n import io.crate.metadata.SystemTable;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n \n-import java.util.List;\n-import java.util.Random;\n \n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNzQ0Nw==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393807447", "bodyText": "I'm wondering if we should remove this overload and force all users of SystemTable to use the other variant.\nBy keeping this, we have another indirection, due to the (node, routingProvider) -> getRouting.apply(node).", "author": "mfussenegger", "createdAt": "2020-03-17T16:26:20Z", "path": "sql/src/main/java/io/crate/metadata/SystemTable.java", "diffHunk": "@@ -171,9 +172,14 @@ public String toString() {\n \n         private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n         private List<ColumnIdent> primaryKeys = List.of();\n-        private Function<DiscoveryNodes, Routing> getRouting;\n+        private BiFunction<DiscoveryNodes, RoutingProvider, Routing> getRouting;\n \n         public RelationBuilder<T> withRouting(Function<DiscoveryNodes, Routing> getRouting) {", "originalCommit": "222f38099684704531e989cdf4d480d5aa1bfedc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNjk0Mw==", "url": "https://github.com/crate/crate/pull/9769#discussion_r393816943", "bodyText": "I am also not a big fan of overloading in general, i would say let's remove the Function<DiscoveryNodes, Routing> variant.", "author": "mkleen", "createdAt": "2020-03-17T16:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNzQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c503158f2b52f3ee4e89275157fd324ee3e73261", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/SystemTable.java b/sql/src/main/java/io/crate/metadata/SystemTable.java\nindex 0cb1e66d34..faf789cc20 100644\n--- a/sql/src/main/java/io/crate/metadata/SystemTable.java\n+++ b/sql/src/main/java/io/crate/metadata/SystemTable.java\n\n@@ -174,11 +174,6 @@ public final class SystemTable<T> implements TableInfo {\n         private List<ColumnIdent> primaryKeys = List.of();\n         private BiFunction<DiscoveryNodes, RoutingProvider, Routing> getRouting;\n \n-        public RelationBuilder<T> withRouting(Function<DiscoveryNodes, Routing> getRouting) {\n-            this.getRouting = (node, routingProvider) -> getRouting.apply(node);\n-            return this;\n-        }\n-\n         public RelationBuilder<T> withRouting(BiFunction<DiscoveryNodes, RoutingProvider, Routing> getRouting) {\n             this.getRouting = getRouting;\n             return this;\n"}}, {"oid": "c503158f2b52f3ee4e89275157fd324ee3e73261", "url": "https://github.com/crate/crate/commit/c503158f2b52f3ee4e89275157fd324ee3e73261", "message": "Migrate tables snapshots, summits and operations_log to new SystemTable approach", "committedDate": "2020-03-18T14:33:05Z", "type": "forcePushed"}, {"oid": "22ca651eca60ce983cfc889757dfed96ef6d6266", "url": "https://github.com/crate/crate/commit/22ca651eca60ce983cfc889757dfed96ef6d6266", "message": "Migrate tables snapshots, summits and operations_log to new SystemTable", "committedDate": "2020-03-18T14:36:19Z", "type": "commit"}, {"oid": "22ca651eca60ce983cfc889757dfed96ef6d6266", "url": "https://github.com/crate/crate/commit/22ca651eca60ce983cfc889757dfed96ef6d6266", "message": "Migrate tables snapshots, summits and operations_log to new SystemTable", "committedDate": "2020-03-18T14:36:19Z", "type": "forcePushed"}]}