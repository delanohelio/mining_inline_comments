{"pr_number": 9903, "pr_title": "Fix signature parameter binding for nested variables of any type.", "pr_createdAt": "2020-04-28T13:18:53Z", "pr_url": "https://github.com/crate/crate/pull/9903", "timeline": [{"oid": "c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a", "url": "https://github.com/crate/crate/commit/c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a", "message": "Fix signature parameter binding for nested variables of any type.\n\nThis change fixes the corner case in the signature parameters binding\nwhen the type variable constraint is a type variable of any type, has\nthe variable arity > 1 and used as a nested param of the function param\ntype signature. For example, the following declared signature\n\n```\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n```\n\nwould be previously bound incorrectly with parameters types. e.g.\n\n```\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n```", "committedDate": "2020-04-28T13:31:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE3NDY2OA==", "url": "https://github.com/crate/crate/pull/9903#discussion_r417174668", "bodyText": "wouldn't this case result in the same as here? https://github.com/crate/crate/pull/9903/files#diff-f5c59a6293ee86d741b614ade3f78ed4R434\nSo we maybe could just always use replaceTypeVariable()?", "author": "seut", "createdAt": "2020-04-29T09:13:48Z", "path": "sql/src/main/java/io/crate/metadata/functions/SignatureBinder.java", "diffHunk": "@@ -386,18 +386,59 @@ private static void addVarArgTypeSignature(TypeSignature typeSignature,\n                                                Map<String, TypeVariableConstraint> typeVariableConstraints,\n                                                List<TypeSignature> builder,\n                                                int actualArity) {\n-        TypeVariableConstraint typeVariableConstraint = typeVariableConstraints.get(typeSignature.getBaseTypeName());\n+        TypeVariableConstraint typeVariableConstraint = resolveTypeVariableConstraint(\n+            typeSignature,\n+            typeVariableConstraints\n+        );\n         if (typeVariableConstraint != null && typeVariableConstraint.isAnyAllowed()) {\n             // Type variables defaults to be bound to the same type.\n             // To support independent variable type arguments, each vararg must be bound to a dedicated type variable.\n-            String constraintName = \"_generated_\" + typeSignature.getBaseTypeName() + actualArity;\n-            TypeSignature newTypeSignature = new TypeSignature(constraintName);\n-            typeVariableConstraints.put(constraintName, typeVariableOfAnyType(constraintName));\n+            var newConstraintName = \"_generated_\" + typeVariableConstraint + actualArity;\n+            TypeSignature newTypeSignature;\n+            if (typeSignature.getParameters().isEmpty()) {\n+                newTypeSignature = new TypeSignature(newConstraintName);", "originalCommit": "c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8603f71ece8c1e9160617f487629f28780dab0e8", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/functions/SignatureBinder.java b/sql/src/main/java/io/crate/metadata/functions/SignatureBinder.java\nindex 0c34fa1bb8..1d073cb924 100644\n--- a/sql/src/main/java/io/crate/metadata/functions/SignatureBinder.java\n+++ b/sql/src/main/java/io/crate/metadata/functions/SignatureBinder.java\n\n@@ -394,16 +394,11 @@ public class SignatureBinder {\n             // Type variables defaults to be bound to the same type.\n             // To support independent variable type arguments, each vararg must be bound to a dedicated type variable.\n             var newConstraintName = \"_generated_\" + typeVariableConstraint + actualArity;\n-            TypeSignature newTypeSignature;\n-            if (typeSignature.getParameters().isEmpty()) {\n-                newTypeSignature = new TypeSignature(newConstraintName);\n-            } else {\n-                newTypeSignature = replaceTypeVariable(\n-                    typeSignature,\n-                    typeVariableConstraint.getName(),\n-                    newConstraintName\n-                );\n-            }\n+            var newTypeSignature = replaceTypeVariable(\n+                typeSignature,\n+                typeVariableConstraint.getName(),\n+                newConstraintName\n+            );\n             typeVariableConstraints.put(newConstraintName, typeVariableOfAnyType(newConstraintName));\n             builder.add(newTypeSignature);\n         } else {\n"}}, {"oid": "8603f71ece8c1e9160617f487629f28780dab0e8", "url": "https://github.com/crate/crate/commit/8603f71ece8c1e9160617f487629f28780dab0e8", "message": "fixup! Fix signature parameter binding for nested variables of any type.", "committedDate": "2020-04-29T09:20:42Z", "type": "forcePushed"}, {"oid": "d6a74bbff6df2cc810c789367407f56bf7237bac", "url": "https://github.com/crate/crate/commit/d6a74bbff6df2cc810c789367407f56bf7237bac", "message": "Fix signature parameter binding for nested variables of any type.\n\nThis change fixes the corner case in the signature parameters binding\nwhen the type variable constraint is a type variable of any type, has\nthe variable arity > 1 and used as a nested param of the function param\ntype signature. For example, the following declared signature\n\n```\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n```\n\nwould be previously bound incorrectly with parameters types. e.g.\n\n```\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n```", "committedDate": "2020-04-29T10:53:20Z", "type": "commit"}, {"oid": "d6a74bbff6df2cc810c789367407f56bf7237bac", "url": "https://github.com/crate/crate/commit/d6a74bbff6df2cc810c789367407f56bf7237bac", "message": "Fix signature parameter binding for nested variables of any type.\n\nThis change fixes the corner case in the signature parameters binding\nwhen the type variable constraint is a type variable of any type, has\nthe variable arity > 1 and used as a nested param of the function param\ntype signature. For example, the following declared signature\n\n```\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n```\n\nwould be previously bound incorrectly with parameters types. e.g.\n\n```\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n```", "committedDate": "2020-04-29T10:53:20Z", "type": "forcePushed"}]}