{"pr_number": 9975, "pr_title": "Reduce usage of guava in the server module.", "pr_createdAt": "2020-05-20T14:10:18Z", "pr_url": "https://github.com/crate/crate/pull/9975", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0OTc1Nw==", "url": "https://github.com/crate/crate/pull/9975#discussion_r428049757", "bodyText": "This is Objects.requireNonNullElse, no?", "author": "mfussenegger", "createdAt": "2020-05-20T14:17:49Z", "path": "libs/shared/src/main/java/io/crate/common/Objects.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common;\n+\n+import javax.annotation.Nullable;\n+\n+public class Objects {\n+\n+    /**\n+     * Returns the first of two given parameters that is not {@code null}, if either is,\n+     * or otherwise throws a {@link NullPointerException}.\n+     *\n+     * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null\n+     * @throws NullPointerException if both {@code first} and {@code second} are null\n+     */\n+    public static <T> T firstNonNull(@Nullable T first, @Nullable T second) {", "originalCommit": "4135f87f472158357d71d68e3f60083dfe8c860c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDU3Ng==", "url": "https://github.com/crate/crate/pull/9975#discussion_r428054576", "bodyText": "ah yes, indeed! will update it", "author": "kovrus", "createdAt": "2020-05-20T14:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0OTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e00384e15268852804bf77291ed7c8c29fd67a05", "chunk": "diff --git a/libs/shared/src/main/java/io/crate/common/Objects.java b/libs/shared/src/main/java/io/crate/common/Objects.java\ndeleted file mode 100644\nindex f1786d622d..0000000000\n--- a/libs/shared/src/main/java/io/crate/common/Objects.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-/*\n- * Licensed to Crate under one or more contributor license agreements.\n- * See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.  Crate licenses this file\n- * to you under the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.  You may\n- * obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n- * implied.  See the License for the specific language governing\n- * permissions and limitations under the License.\n- *\n- * However, if you have executed another commercial license agreement\n- * with Crate these terms will supersede the license and you may use the\n- * software solely pursuant to the terms of the relevant commercial\n- * agreement.\n- */\n-\n-package io.crate.common;\n-\n-import javax.annotation.Nullable;\n-\n-public class Objects {\n-\n-    /**\n-     * Returns the first of two given parameters that is not {@code null}, if either is,\n-     * or otherwise throws a {@link NullPointerException}.\n-     *\n-     * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null\n-     * @throws NullPointerException if both {@code first} and {@code second} are null\n-     */\n-    public static <T> T firstNonNull(@Nullable T first, @Nullable T second) {\n-        if (first != null) {\n-            return first;\n-        }\n-        if (second != null) {\n-            return second;\n-        }\n-        throw new NullPointerException(\"Both parameters are null\");\n-    }\n-}\n"}}, {"oid": "e00384e15268852804bf77291ed7c8c29fd67a05", "url": "https://github.com/crate/crate/commit/e00384e15268852804bf77291ed7c8c29fd67a05", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators", "committedDate": "2020-05-21T12:40:52Z", "type": "forcePushed"}, {"oid": "e38fccfcd5a501658b21ef067243bbddf7f04231", "url": "https://github.com/crate/crate/commit/e38fccfcd5a501658b21ef067243bbddf7f04231", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators", "committedDate": "2020-05-21T12:54:19Z", "type": "forcePushed"}, {"oid": "8f96597472c93c339643ccbf715f2beba9647fb5", "url": "https://github.com/crate/crate/commit/8f96597472c93c339643ccbf715f2beba9647fb5", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators", "committedDate": "2020-05-22T09:02:37Z", "type": "forcePushed"}, {"oid": "8bfe8c73e1323f38407ff48dd13ca72e328295f0", "url": "https://github.com/crate/crate/commit/8bfe8c73e1323f38407ff48dd13ca72e328295f0", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators", "committedDate": "2020-05-22T09:34:26Z", "type": "forcePushed"}, {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b", "url": "https://github.com/crate/crate/commit/abcf2dbf9a458830ad8a89cc80e80068aa40232b", "message": "Reduce usage of guava in the server module.", "committedDate": "2020-05-22T09:53:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDI2MA==", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200260", "bodyText": "Maybe for cases like this where the list is only consumed once it would make sense to add a mapLazy that is based on something like this:\nstatic class LazyMapList<I, O> extends AbstractList<O> {\n\n    private final List<I> list;\n    private final Function<? super I, ? extends O> mapper;\n\n    public LazyMapList(List<I> list, Function<? super I, ? extends O> mapper) {\n        this.list = list;\n        this.mapper = mapper;\n    }\n\n    @Override\n    public O get(int index) {\n        return mapper.apply(list.get(index));\n    }\n\n    @Override\n    public int size() {\n        return list.size();\n    }\n}", "author": "mfussenegger", "createdAt": "2020-05-22T11:47:04Z", "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -62,7 +60,7 @@ private DocKey(int pos) {\n \n         public String getId(TransactionContext txnCtx, Functions functions, Row params, SubQueryResults subQueryResults) {\n             return idFunction.apply(\n-                Lists.transform(\n+                Lists2.map(", "originalCommit": "abcf2dbf9a458830ad8a89cc80e80068aa40232b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MjAxNg==", "url": "https://github.com/crate/crate/pull/9975#discussion_r429252016", "bodyText": "pushed the fixup. i took over this code and added the precondition to use random access lists.", "author": "kovrus", "createdAt": "2020-05-22T13:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5ae3af8da5e813226fefb4fab412f63c62e1198d", "chunk": "diff --git a/server/src/main/java/io/crate/analyze/where/DocKeys.java b/server/src/main/java/io/crate/analyze/where/DocKeys.java\nindex 84f08bd0e1..8bf4bbdfa6 100644\n--- a/server/src/main/java/io/crate/analyze/where/DocKeys.java\n+++ b/server/src/main/java/io/crate/analyze/where/DocKeys.java\n\n@@ -60,10 +61,11 @@ public class DocKeys implements Iterable<DocKeys.DocKey> {\n \n         public String getId(TransactionContext txnCtx, Functions functions, Row params, SubQueryResults subQueryResults) {\n             return idFunction.apply(\n-                Lists2.map(\n+                LazyMapList.of(\n                     key.subList(0, width),\n                     s -> DataTypes.STRING.value(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))\n-                ));\n+                )\n+            );\n         }\n \n         public Optional<Long> version(TransactionContext txnCtx, Functions functions, Row params, SubQueryResults subQueryResults) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDQzMQ==", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200431", "bodyText": "Similar here mapLazy might be better here.", "author": "mfussenegger", "createdAt": "2020-05-22T11:47:35Z", "path": "server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java", "diffHunk": "@@ -149,7 +149,8 @@ public RemoteCollectorFactory(ClusterService clusterService,\n             );\n             remoteCollector.doCollect();\n         }\n-        return consumer.completionFuture().thenApply(rows -> Lists.transform(rows, Buckets.arrayToSharedRow()::apply));\n+        return consumer.completionFuture()\n+            .thenApply(rows -> Lists2.map(rows, Buckets.arrayToSharedRow()::apply));", "originalCommit": "abcf2dbf9a458830ad8a89cc80e80068aa40232b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ae3af8da5e813226fefb4fab412f63c62e1198d", "chunk": "diff --git a/server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java b/server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java\nindex 054e86f5a4..ae92df4dac 100644\n--- a/server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java\n+++ b/server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java\n\n@@ -149,8 +149,9 @@ public class RemoteCollectorFactory {\n             );\n             remoteCollector.doCollect();\n         }\n-        return consumer.completionFuture()\n-            .thenApply(rows -> Lists2.map(rows, Buckets.arrayToSharedRow()::apply));\n+        return consumer\n+            .completionFuture()\n+            .thenApply(rows -> LazyMapList.of(rows, Buckets.arrayToSharedRow()));\n     }\n \n     private static RoutedCollectPhase createRemoteCollectPhase(UUID childJobId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDgwNA==", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200804", "bodyText": "Maybe also a case for mapLazy, or otherwise we should also change the function name, because the View implied that the structure is lazy.", "author": "mfussenegger", "createdAt": "2020-05-22T11:48:30Z", "path": "server/src/main/java/io/crate/expression/symbol/Symbols.java", "diffHunk": "@@ -49,7 +49,7 @@\n     public static final Predicate<Symbol> IS_GENERATED_COLUMN = input -> input instanceof GeneratedReference;\n \n     public static List<DataType> typeView(List<? extends Symbol> symbols) {\n-        return Lists.transform(symbols, Symbol::valueType);\n+        return Lists2.map(symbols, Symbol::valueType);", "originalCommit": "abcf2dbf9a458830ad8a89cc80e80068aa40232b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ae3af8da5e813226fefb4fab412f63c62e1198d", "chunk": "diff --git a/server/src/main/java/io/crate/expression/symbol/Symbols.java b/server/src/main/java/io/crate/expression/symbol/Symbols.java\nindex b32c1b823d..7ec536fb6a 100644\n--- a/server/src/main/java/io/crate/expression/symbol/Symbols.java\n+++ b/server/src/main/java/io/crate/expression/symbol/Symbols.java\n\n@@ -49,7 +49,7 @@ public class Symbols {\n     public static final Predicate<Symbol> IS_GENERATED_COLUMN = input -> input instanceof GeneratedReference;\n \n     public static List<DataType> typeView(List<? extends Symbol> symbols) {\n-        return Lists2.map(symbols, Symbol::valueType);\n+        return LazyMapList.of(symbols, Symbol::valueType);\n     }\n \n     public static Streamer<?>[] streamerArray(Collection<? extends Symbol> symbols) {\n"}}, {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d", "url": "https://github.com/crate/crate/commit/5ae3af8da5e813226fefb4fab412f63c62e1198d", "message": "fixup! Reduce usage of guava in the server module.", "committedDate": "2020-05-22T13:22:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODczNw==", "url": "https://github.com/crate/crate/pull/9975#discussion_r429258737", "bodyText": "Btw I'm not sure if this restriction is necessary. E.g. if you look at the implementation of get of LinkedList there is no \"extra\" slow-down caused by using LazyMapList", "author": "mfussenegger", "createdAt": "2020-05-22T13:52:08Z", "path": "libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common.collections;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+import java.util.RandomAccess;\n+import java.util.function.Function;\n+\n+/**\n+ * {@code LazyMapList} is a wrapper around a random access list that lazily\n+ * applies the {@code mapper} {@code Function} on each item when it is accessed.\n+ */\n+public class LazyMapList<I, O> extends AbstractList<O> implements RandomAccess {\n+\n+    private final List<I> list;\n+    private final Function<? super I, ? extends O> mapper;\n+\n+    public static <I, O> LazyMapList<I, O> of(List<I> list, Function<? super I, ? extends O> mapper) {\n+        if (!(list instanceof RandomAccess)) {", "originalCommit": "5ae3af8da5e813226fefb4fab412f63c62e1198d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MDM0MA==", "url": "https://github.com/crate/crate/pull/9975#discussion_r429260340", "bodyText": "yeah, doesn't seem that bad. I can drop it then.", "author": "kovrus", "createdAt": "2020-05-22T13:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODczNw=="}], "type": "inlineReview", "revised_code": {"commit": "37da8429aad2723f2a26653e0049ea593fd05034", "chunk": "diff --git a/libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java b/libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java\nindex f2065223c0..e6413a4e28 100644\n--- a/libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java\n+++ b/libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java\n\n@@ -28,8 +28,8 @@ import java.util.RandomAccess;\n import java.util.function.Function;\n \n /**\n- * {@code LazyMapList} is a wrapper around a random access list that lazily\n- * applies the {@code mapper} {@code Function} on each item when it is accessed.\n+ * {@code LazyMapList} is a wrapper around a list that lazily applies\n+ * the {@code mapper} {@code Function} on each item when it is accessed.\n  */\n public class LazyMapList<I, O> extends AbstractList<O> implements RandomAccess {\n \n"}}, {"oid": "37da8429aad2723f2a26653e0049ea593fd05034", "url": "https://github.com/crate/crate/commit/37da8429aad2723f2a26653e0049ea593fd05034", "message": "Reduce usage of guava in the server module.", "committedDate": "2020-05-22T13:59:51Z", "type": "commit"}, {"oid": "37da8429aad2723f2a26653e0049ea593fd05034", "url": "https://github.com/crate/crate/commit/37da8429aad2723f2a26653e0049ea593fd05034", "message": "Reduce usage of guava in the server module.", "committedDate": "2020-05-22T13:59:51Z", "type": "forcePushed"}]}