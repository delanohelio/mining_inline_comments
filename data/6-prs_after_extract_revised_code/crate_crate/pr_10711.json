{"pr_number": 10711, "pr_title": "Fix functions resolution for text types with different limit lengths.", "pr_createdAt": "2020-10-27T13:17:32Z", "pr_url": "https://github.com/crate/crate/pull/10711", "timeline": [{"oid": "35d83ed83aaacfe26b89e06ce922854c0bb229bd", "url": "https://github.com/crate/crate/commit/35d83ed83aaacfe26b89e06ce922854c0bb229bd", "message": "Fix functions resolution for text types with different limit lengths.\n\nThe function with signatures like `func(E, E)` would fail to\nbind arguments of type text if they have different limit lengths.\nThis change fixes the inference of the common text type for provided\ntext arguments by following two rules:\n\n1. If both text types use length limit, then the common type\nwill be the text type with the lowest lenght limit.\n2. If either of text types is unbound, then the common type\nwill be the unbound text type.", "committedDate": "2020-10-27T13:43:22Z", "type": "forcePushed"}, {"oid": "ec2b5820a4ff4730f8cc7d501a05673eaf334922", "url": "https://github.com/crate/crate/commit/ec2b5820a4ff4730f8cc7d501a05673eaf334922", "message": "fixup! Fix functions resolution for text types with different limit lengths.", "committedDate": "2020-10-28T09:08:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NDU5MA==", "url": "https://github.com/crate/crate/pull/10711#discussion_r513284590", "bodyText": "Not sure if these additional tests here adds something here compared to the new signature binder and type tests. Also no strong opinion here..", "author": "seut", "createdAt": "2020-10-28T09:12:37Z", "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -360,4 +364,26 @@ public void test_partial_quoted_subscript() {\n         symbol = executor.asSymbol(\"nested_obj.\\\"myObj['x']\\\"['AbC']\");\n         assertThat(symbol, isReference(\"myObj['x']['AbC']\"));\n     }\n+\n+    @Test\n+    public void test_resolve_eq_function_for_text_types_with_length_limit_and_unbound() throws IOException {\n+        var e = SQLExecutor.builder(clusterService)\n+            .addTable(\"create table tbl (str varchar(3))\")\n+            .build();\n+        var eq = (Function) e.asSymbol(\"tbl.str = 'abc'\");\n+        assertThat(\n+            Lists2.map(eq.arguments(), Symbol::valueType),\n+            contains(DataTypes.STRING, DataTypes.STRING));\n+    }\n+\n+    @Test\n+    public void test_resolve_eq_function_for_text_types_with_different_limit_length() throws IOException {", "originalCommit": "ec2b5820a4ff4730f8cc7d501a05673eaf334922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NjAzOA==", "url": "https://github.com/crate/crate/pull/10711#discussion_r513286038", "bodyText": "can drop it", "author": "kovrus", "createdAt": "2020-10-28T09:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NDU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "245b7efc2cfede17555c7ab71568b77bd2952690", "chunk": "diff --git a/server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java b/server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java\nindex 63573f8b74..6633889956 100644\n--- a/server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java\n+++ b/server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java\n\n@@ -375,15 +375,4 @@ public class ExpressionAnalyzerTest extends CrateDummyClusterServiceUnitTest {\n             Lists2.map(eq.arguments(), Symbol::valueType),\n             contains(DataTypes.STRING, DataTypes.STRING));\n     }\n-\n-    @Test\n-    public void test_resolve_eq_function_for_text_types_with_different_limit_length() throws IOException {\n-        var e = SQLExecutor.builder(clusterService)\n-            .addTable(\"create table tbl (str varchar(3))\")\n-            .build();\n-        var eq = (Function) e.asSymbol(\"tbl.str = 'abc'::varchar(2)\");\n-        assertThat(\n-            Lists2.map(eq.arguments(), Symbol::valueType),\n-            contains(StringType.of(3), StringType.of(3)));\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwOTMyMw==", "url": "https://github.com/crate/crate/pull/10711#discussion_r513309323", "bodyText": "It would also be possible to return the instance with the higher length to avoid creating a new one.\nI doubt it has any significant impact, but the logic wouldn't really be more complicated either.", "author": "mfussenegger", "createdAt": "2020-10-28T09:50:15Z", "path": "server/src/main/java/io/crate/types/TypeCompatibility.java", "diffHunk": "@@ -94,8 +94,20 @@\n         if (fromTypeParameters.size() != toTypeParameters.size()) {\n             if (fromType.id() == ObjectType.ID && toType.id() == ObjectType.ID) {\n                 return fromTypeParameters.size() > toTypeParameters.size() ? fromType : toType;\n+            } else if (fromType.id() == StringType.ID && toType.id() == StringType.ID) {\n+                if (((StringType) fromType).unbound() || ((StringType) toType).unbound()) {\n+                    return StringType.INSTANCE;\n+                }\n             }\n             return null;\n+        } else {\n+            if (fromType.id() == StringType.ID && toType.id() == StringType.ID) {\n+                var highestLengthLimit = Math.max(\n+                    ((StringType) fromType).lengthLimit(),\n+                    ((StringType) toType).lengthLimit()\n+                );\n+                return StringType.of(highestLengthLimit);", "originalCommit": "163939d47fe562748f54131b6ed63eabb853aeff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "245b7efc2cfede17555c7ab71568b77bd2952690", "chunk": "diff --git a/server/src/main/java/io/crate/types/TypeCompatibility.java b/server/src/main/java/io/crate/types/TypeCompatibility.java\nindex a7a7c5e155..0c488da622 100644\n--- a/server/src/main/java/io/crate/types/TypeCompatibility.java\n+++ b/server/src/main/java/io/crate/types/TypeCompatibility.java\n\n@@ -102,11 +102,11 @@ public final class TypeCompatibility {\n             return null;\n         } else {\n             if (fromType.id() == StringType.ID && toType.id() == StringType.ID) {\n-                var highestLengthLimit = Math.max(\n-                    ((StringType) fromType).lengthLimit(),\n-                    ((StringType) toType).lengthLimit()\n-                );\n-                return StringType.of(highestLengthLimit);\n+                if (((StringType) fromType).lengthLimit() > ((StringType) toType).lengthLimit()) {\n+                    return fromType;\n+                } else {\n+                    return toType;\n+                }\n             }\n         }\n \n"}}, {"oid": "245b7efc2cfede17555c7ab71568b77bd2952690", "url": "https://github.com/crate/crate/commit/245b7efc2cfede17555c7ab71568b77bd2952690", "message": "Fix functions resolution for text types with different limit lengths.\n\nThe function with signatures like `func(E, E)` would fail to\nbind arguments of type text if they have different limit lengths.\nThis change fixes the inference of the common text type for provided\ntext arguments by following two rules:\n\n1. If both text types use length limit, then the common type\nwill be the text type with the highest lenght limit.\n2. If either of text types is unbound, then the common type\nwill be the unbound text type.", "committedDate": "2020-10-28T09:57:59Z", "type": "forcePushed"}, {"oid": "85b64582b8a4aa2daf9188199c5aece76de46ab1", "url": "https://github.com/crate/crate/commit/85b64582b8a4aa2daf9188199c5aece76de46ab1", "message": "Fix functions resolution for text types with different limit lengths.\n\nThe function with signatures like `func(E, E)` would fail to\nbind arguments of type text if they have different limit lengths.\nThis change fixes the inference of the common text type for provided\ntext arguments by following two rules:\n\n1. If both text types use length limit, then the common type\nwill be the text type with the highest lenght limit.\n2. If either of text types is unbound, then the common type\nwill be the unbound text type.", "committedDate": "2020-10-28T11:12:35Z", "type": "commit"}, {"oid": "85b64582b8a4aa2daf9188199c5aece76de46ab1", "url": "https://github.com/crate/crate/commit/85b64582b8a4aa2daf9188199c5aece76de46ab1", "message": "Fix functions resolution for text types with different limit lengths.\n\nThe function with signatures like `func(E, E)` would fail to\nbind arguments of type text if they have different limit lengths.\nThis change fixes the inference of the common text type for provided\ntext arguments by following two rules:\n\n1. If both text types use length limit, then the common type\nwill be the text type with the highest lenght limit.\n2. If either of text types is unbound, then the common type\nwill be the unbound text type.", "committedDate": "2020-10-28T11:12:35Z", "type": "forcePushed"}, {"oid": "be5c1deb667f75d1182b5984b4f2026438032e2c", "url": "https://github.com/crate/crate/commit/be5c1deb667f75d1182b5984b4f2026438032e2c", "message": "Merge branch 'master' into r/fix-text-limit-functions-resolution", "committedDate": "2020-10-28T11:47:22Z", "type": "commit"}]}