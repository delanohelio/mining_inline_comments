{"pr_number": 10089, "pr_title": "Convert all operators to new signature based function registry", "pr_createdAt": "2020-06-17T08:05:05Z", "pr_url": "https://github.com/crate/crate/pull/10089", "timeline": [{"oid": "a41a1566c000bb8994ba5f8b4e1e0d03b9338350", "url": "https://github.com/crate/crate/commit/a41a1566c000bb8994ba5f8b4e1e0d03b9338350", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`.", "committedDate": "2020-06-17T08:25:40Z", "type": "forcePushed"}, {"oid": "1572720151a0c8304f3675e254ae19c3799750b2", "url": "https://github.com/crate/crate/commit/1572720151a0c8304f3675e254ae19c3799750b2", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`.", "committedDate": "2020-06-17T08:28:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwMjA3Mw==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441402073", "bodyText": "In some tests, you don't use signatures to create function instances. e.g. JoinPhaseTest, FilterProjectionTest, etc. is it done by intention or it is just slipped from the sight?", "author": "kovrus", "createdAt": "2020-06-17T09:14:45Z", "path": "server/src/test/java/io/crate/planner/operators/FetchRewriteTest.java", "diffHunk": "@@ -52,6 +56,16 @@\n \n public class FetchRewriteTest extends CrateDummyClusterServiceUnitTest {\n \n+    public static Function of(String name, List<Symbol> arguments, DataType<?> returnType) {\n+        return new Function(", "originalCommit": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4ODI0Mg==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441488242", "bodyText": "Somehow by intention, in these tests the function registry is not used so it doesn't really matter. This will change anyway when the signature() method is required to return non-null values, I'm already working on this a part of removing the old function registry.", "author": "seut", "createdAt": "2020-06-17T11:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwMjA3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDQyNg==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441414426", "bodyText": "just a question: why it is matched with object(k, v) shouldn't we match it with just object such as the map can contain the v type variable of different types?", "author": "kovrus", "createdAt": "2020-06-17T09:34:14Z", "path": "server/src/main/java/io/crate/expression/operator/EqOperator.java", "diffHunk": "@@ -23,46 +23,71 @@\n \n import io.crate.common.collections.MapComparator;\n import io.crate.data.Input;\n-import io.crate.expression.symbol.Function;\n-import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n-import io.crate.types.DataType;\n-import io.crate.types.DataTypes;\n-import io.crate.types.ObjectType;\n-\n-import java.util.Arrays;\n-import java.util.List;\n+import io.crate.metadata.functions.Signature;\n+\n+import javax.annotation.Nullable;\n import java.util.Map;\n \n-import static io.crate.expression.operator.CmpOperator.CmpResolver.createInfo;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public final class EqOperator extends Operator<Object> {\n \n     public static final String NAME = \"op_=\";\n \n-    private final FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"E\"),\n+        parseTypeSignature(\"E\"),\n+        Operator.RETURN_TYPE.getTypeSignature()\n+    ).withTypeVariableConstraints(typeVariable(\"E\"));\n+\n+    public static final Signature SIGNATURE_OBJECTS = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"object(K, V)\"),\n+        parseTypeSignature(\"object(K, V)\"),", "originalCommit": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4NzAxNA==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441487014", "bodyText": "good point, will check.", "author": "seut", "createdAt": "2020-06-17T11:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNDkwNw==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441524907", "bodyText": "Figured out that we don't need the special ObjectEqOperator at all as our ObjectType.equals is checking also inner types and our signature binder allows coercion between un-typed objects and typed once. Pushed a fixup.", "author": "seut", "createdAt": "2020-06-17T12:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "15f5c54ae267e14913049436dbf99e02d410c793", "chunk": "diff --git a/server/src/main/java/io/crate/expression/operator/EqOperator.java b/server/src/main/java/io/crate/expression/operator/EqOperator.java\nindex e084753fc2..ae5a9ba159 100644\n--- a/server/src/main/java/io/crate/expression/operator/EqOperator.java\n+++ b/server/src/main/java/io/crate/expression/operator/EqOperator.java\n\n@@ -21,7 +21,6 @@\n \n package io.crate.expression.operator;\n \n-import io.crate.common.collections.MapComparator;\n import io.crate.data.Input;\n import io.crate.metadata.FunctionIdent;\n import io.crate.metadata.FunctionInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDUxMQ==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441414511", "bodyText": "Do you think it would be worth following up on this to format the function name in a way that is closer to what the user entered? So that we'd get something like Unknown function: integer_array = ANY(integer_array)", "author": "mfussenegger", "createdAt": "2020-06-17T09:34:22Z", "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -369,7 +369,7 @@ public void testParameterExpressionInLikeAny() throws Exception {\n \n     @Test\n     public void testAnyWithArrayOnBothSidesResultsInNiceErrorMessage() {\n-        expectedException.expectMessage(\"Cannot cast `xs` of type `integer_array` to type `integer`\");\n+        expectedException.expectMessage(\"unknown function: any_=(integer_array, integer_array)\");", "originalCommit": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4ODcwNQ==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441488705", "bodyText": "Yes good point. Will follow up here dedicated or do you prefer to add it to this PR?", "author": "seut", "createdAt": "2020-06-17T11:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNTE5Ng==", "url": "https://github.com/crate/crate/pull/10089#discussion_r441505196", "bodyText": "Follow up sounds good", "author": "mfussenegger", "createdAt": "2020-06-17T12:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDUxMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "15f5c54ae267e14913049436dbf99e02d410c793", "url": "https://github.com/crate/crate/commit/15f5c54ae267e14913049436dbf99e02d410c793", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`.", "committedDate": "2020-06-17T13:05:32Z", "type": "commit"}, {"oid": "15f5c54ae267e14913049436dbf99e02d410c793", "url": "https://github.com/crate/crate/commit/15f5c54ae267e14913049436dbf99e02d410c793", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`.", "committedDate": "2020-06-17T13:05:32Z", "type": "forcePushed"}, {"oid": "e8998bc5b57db2b06205c320b82fb727ca2ef0c5", "url": "https://github.com/crate/crate/commit/e8998bc5b57db2b06205c320b82fb727ca2ef0c5", "message": "Merge branch 'master' into s/operators-signature", "committedDate": "2020-06-17T14:22:32Z", "type": "commit"}]}