{"pr_number": 9900, "pr_title": "Fix sys.columns for aliased relations", "pr_createdAt": "2020-04-27T19:01:04Z", "pr_url": "https://github.com/crate/crate/pull/9900", "timeline": [{"oid": "12d6e0fcef70918c4f7146dbd6c5acfafbbb94c3", "url": "https://github.com/crate/crate/commit/12d6e0fcef70918c4f7146dbd6c5acfafbbb94c3", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-27T19:19:58Z", "type": "forcePushed"}, {"oid": "4e7f0538cee7be8f9c60b717da83bfe15ddfebd2", "url": "https://github.com/crate/crate/commit/4e7f0538cee7be8f9c60b717da83bfe15ddfebd2", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-27T19:20:46Z", "type": "forcePushed"}, {"oid": "a78748a0a21ddbd2983e7a7ad6738337bd99155e", "url": "https://github.com/crate/crate/commit/a78748a0a21ddbd2983e7a7ad6738337bd99155e", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-28T15:07:20Z", "type": "forcePushed"}, {"oid": "9bf10ad25d424db27245e903640075f22f5a38b3", "url": "https://github.com/crate/crate/commit/9bf10ad25d424db27245e903640075f22f5a38b3", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-28T15:12:57Z", "type": "forcePushed"}, {"oid": "6a0e37563bf24b75190415bd5bc4c9b7c82806b9", "url": "https://github.com/crate/crate/commit/6a0e37563bf24b75190415bd5bc4c9b7c82806b9", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-28T15:46:37Z", "type": "forcePushed"}, {"oid": "6e40a9fe59fd0f8bc2eb2fdc16c8be5c6cb96d5b", "url": "https://github.com/crate/crate/commit/6e40a9fe59fd0f8bc2eb2fdc16c8be5c6cb96d5b", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-28T15:47:14Z", "type": "forcePushed"}, {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046", "url": "https://github.com/crate/crate/commit/f49143a3db1c062f3a0338cf2f28de5e16e3c046", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-28T16:18:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0ODc1OQ==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417148759", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!isSysColumn(field)) {\n          \n          \n            \n                                context.add(Symbols.pathFromSymbol(field), field);\n          \n          \n            \n                            }\n          \n          \n            \n                            var columnIdent = Symbols.pathFromSymbol(field)\n          \n          \n            \n                            if (!columnIdent.isSystemColumn()) {\n          \n          \n            \n                                context.add(columnIdent, field);\n          \n          \n            \n                            }", "author": "mfussenegger", "createdAt": "2020-04-29T08:28:32Z", "path": "sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java", "diffHunk": "@@ -115,8 +118,21 @@ protected Void visitAllColumns(AllColumns node, SelectAnalysis context) {\n \n         private static void addAllFieldsFromRelation(SelectAnalysis context, AnalyzedRelation relation) {\n             for (Symbol field : relation.outputs()) {\n-                context.add(Symbols.pathFromSymbol(field), field);\n+                if (!isSysColumn(field)) {\n+                    context.add(Symbols.pathFromSymbol(field), field);\n+                }", "originalCommit": "f49143a3db1c062f3a0338cf2f28de5e16e3c046", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c05311804c83437468c939ef0fc3e173dc7420", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java b/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java\nindex 607b395edd..203552b8f5 100644\n--- a/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java\n\n@@ -118,21 +115,11 @@ public class SelectAnalyzer {\n \n         private static void addAllFieldsFromRelation(SelectAnalysis context, AnalyzedRelation relation) {\n             for (Symbol field : relation.outputs()) {\n-                if (!isSysColumn(field)) {\n+                var columnIdent = Symbols.pathFromSymbol(field);\n+                if (!columnIdent.isSystemColumn()) {\n                     context.add(Symbols.pathFromSymbol(field), field);\n                 }\n             }\n         }\n     }\n-    private static boolean isSysColumn(Symbol symbol) {\n-        ColumnIdent columnIdent = null;\n-        if (symbol instanceof ScopedSymbol) {\n-            columnIdent = ((ScopedSymbol) symbol).column();\n-        } else if (symbol instanceof Reference) {\n-            columnIdent = ((Reference) symbol).column();\n-        } else {\n-            throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Unknown column type %s\", symbol));\n-        }\n-        return DocSysColumns.COLUMN_IDENTS.containsKey(columnIdent);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0ODkwOA==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417148908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean isSysColumn(Symbol symbol) {\n          \n          \n            \n                    ColumnIdent columnIdent = null;\n          \n          \n            \n                    if (symbol instanceof ScopedSymbol) {\n          \n          \n            \n                        columnIdent = ((ScopedSymbol) symbol).column();\n          \n          \n            \n                    } else if (symbol instanceof Reference) {\n          \n          \n            \n                        columnIdent = ((Reference) symbol).column();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Unknown column type %s\", symbol));\n          \n          \n            \n                    }\n          \n          \n            \n                    return DocSysColumns.COLUMN_IDENTS.containsKey(columnIdent);\n          \n          \n            \n                }", "author": "mfussenegger", "createdAt": "2020-04-29T08:28:46Z", "path": "sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java", "diffHunk": "@@ -115,8 +118,21 @@ protected Void visitAllColumns(AllColumns node, SelectAnalysis context) {\n \n         private static void addAllFieldsFromRelation(SelectAnalysis context, AnalyzedRelation relation) {\n             for (Symbol field : relation.outputs()) {\n-                context.add(Symbols.pathFromSymbol(field), field);\n+                if (!isSysColumn(field)) {\n+                    context.add(Symbols.pathFromSymbol(field), field);\n+                }\n             }\n         }\n     }\n+    private static boolean isSysColumn(Symbol symbol) {\n+        ColumnIdent columnIdent = null;\n+        if (symbol instanceof ScopedSymbol) {\n+            columnIdent = ((ScopedSymbol) symbol).column();\n+        } else if (symbol instanceof Reference) {\n+            columnIdent = ((Reference) symbol).column();\n+        } else {\n+            throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Unknown column type %s\", symbol));\n+        }\n+        return DocSysColumns.COLUMN_IDENTS.containsKey(columnIdent);\n+    }", "originalCommit": "f49143a3db1c062f3a0338cf2f28de5e16e3c046", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c05311804c83437468c939ef0fc3e173dc7420", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java b/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java\nindex 607b395edd..203552b8f5 100644\n--- a/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java\n\n@@ -118,21 +115,11 @@ public class SelectAnalyzer {\n \n         private static void addAllFieldsFromRelation(SelectAnalysis context, AnalyzedRelation relation) {\n             for (Symbol field : relation.outputs()) {\n-                if (!isSysColumn(field)) {\n+                var columnIdent = Symbols.pathFromSymbol(field);\n+                if (!columnIdent.isSystemColumn()) {\n                     context.add(Symbols.pathFromSymbol(field), field);\n                 }\n             }\n         }\n     }\n-    private static boolean isSysColumn(Symbol symbol) {\n-        ColumnIdent columnIdent = null;\n-        if (symbol instanceof ScopedSymbol) {\n-            columnIdent = ((ScopedSymbol) symbol).column();\n-        } else if (symbol instanceof Reference) {\n-            columnIdent = ((Reference) symbol).column();\n-        } else {\n-            throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Unknown column type %s\", symbol));\n-        }\n-        return DocSysColumns.COLUMN_IDENTS.containsKey(columnIdent);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0OTgzMw==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417149833", "bodyText": "I think this could be moved to DocSysColumn.forTable(Relationname) -> List<Reference>", "author": "mfussenegger", "createdAt": "2020-04-29T08:30:21Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "diffHunk": "@@ -161,13 +163,21 @@ private DocIndexMetaData buildDocIndexMetaDataFromTemplate(String index, String\n         return partitions;\n     }\n \n+    private Collection<Reference> buildSysColumns() {\n+        ArrayList<Reference> result = new ArrayList<>();\n+        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n+        return result;\n+    }", "originalCommit": "f49143a3db1c062f3a0338cf2f28de5e16e3c046", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c05311804c83437468c939ef0fc3e173dc7420", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java b/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\nindex bb6885ef51..92aeef0cfd 100644\n--- a/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\n+++ b/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\n\n@@ -163,21 +161,13 @@ class DocTableInfoBuilder {\n         return partitions;\n     }\n \n-    private Collection<Reference> buildSysColumns() {\n-        ArrayList<Reference> result = new ArrayList<>();\n-        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n-        return result;\n-    }\n-\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n-        Collection<Reference> sysColumns = buildSysColumns();\n \n         return new DocTableInfo(\n             ident,\n             md.columns(),\n-            sysColumns,\n             md.partitionedByColumns(),\n             md.generatedColumnReferences(),\n             md.notNullColumns(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0OTk0Nw==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417149947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<Reference> sysColumns = buildSysColumns();", "author": "mfussenegger", "createdAt": "2020-04-29T08:30:34Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "diffHunk": "@@ -161,13 +163,21 @@ private DocIndexMetaData buildDocIndexMetaDataFromTemplate(String index, String\n         return partitions;\n     }\n \n+    private Collection<Reference> buildSysColumns() {\n+        ArrayList<Reference> result = new ArrayList<>();\n+        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n+        return result;\n+    }\n+\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n+        Collection<Reference> sysColumns = buildSysColumns();", "originalCommit": "f49143a3db1c062f3a0338cf2f28de5e16e3c046", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c05311804c83437468c939ef0fc3e173dc7420", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java b/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\nindex bb6885ef51..92aeef0cfd 100644\n--- a/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\n+++ b/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\n\n@@ -163,21 +161,13 @@ class DocTableInfoBuilder {\n         return partitions;\n     }\n \n-    private Collection<Reference> buildSysColumns() {\n-        ArrayList<Reference> result = new ArrayList<>();\n-        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n-        return result;\n-    }\n-\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n-        Collection<Reference> sysColumns = buildSysColumns();\n \n         return new DocTableInfo(\n             ident,\n             md.columns(),\n-            sysColumns,\n             md.partitionedByColumns(),\n             md.generatedColumnReferences(),\n             md.notNullColumns(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDA2Mw==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417150063", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sysColumns,\n          \n          \n            \n                        DocSysColumns.forTable(ident),", "author": "mfussenegger", "createdAt": "2020-04-29T08:30:49Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "diffHunk": "@@ -161,13 +163,21 @@ private DocIndexMetaData buildDocIndexMetaDataFromTemplate(String index, String\n         return partitions;\n     }\n \n+    private Collection<Reference> buildSysColumns() {\n+        ArrayList<Reference> result = new ArrayList<>();\n+        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n+        return result;\n+    }\n+\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n+        Collection<Reference> sysColumns = buildSysColumns();\n \n         return new DocTableInfo(\n             ident,\n             md.columns(),\n+            sysColumns,", "originalCommit": "f49143a3db1c062f3a0338cf2f28de5e16e3c046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MTA1NA==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417151054", "bodyText": "Or maybe we can remove this from the DocTableInfo altogether, and instead create it ad-hoc in the DocTableRelation ? Not sure which way is better. Higher memory footprint vs. more ad-hoc allocations", "author": "mfussenegger", "createdAt": "2020-04-29T08:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b1c05311804c83437468c939ef0fc3e173dc7420", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java b/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\nindex bb6885ef51..92aeef0cfd 100644\n--- a/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\n+++ b/sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java\n\n@@ -163,21 +161,13 @@ class DocTableInfoBuilder {\n         return partitions;\n     }\n \n-    private Collection<Reference> buildSysColumns() {\n-        ArrayList<Reference> result = new ArrayList<>();\n-        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n-        return result;\n-    }\n-\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n-        Collection<Reference> sysColumns = buildSysColumns();\n \n         return new DocTableInfo(\n             ident,\n             md.columns(),\n-            sysColumns,\n             md.partitionedByColumns(),\n             md.generatedColumnReferences(),\n             md.notNullColumns(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDQ3Nw==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417150477", "bodyText": "I think we could write a planner or analyzer test instead to see that the columns can be resolved despite aliased relation?", "author": "mfussenegger", "createdAt": "2020-04-29T08:31:36Z", "path": "sql/src/test/java/io/crate/integrationtests/SystemColumnIntegrationTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.integrationtests;\n+\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+\n+@ESIntegTestCase.ClusterScope(numClientNodes = 0, numDataNodes = 2, supportsDedicatedMasters = false)\n+public class SystemColumnIntegrationTest extends SQLTransportIntegrationTest {\n+\n+    @Test\n+    public void test_system_columns_on_aliased_table() throws Exception {", "originalCommit": "f49143a3db1c062f3a0338cf2f28de5e16e3c046", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1c05311804c83437468c939ef0fc3e173dc7420", "chunk": "diff --git a/sql/src/test/java/io/crate/integrationtests/SystemColumnIntegrationTest.java b/sql/src/test/java/io/crate/integrationtests/SystemColumnIntegrationTest.java\ndeleted file mode 100644\nindex 5c615b3fe6..0000000000\n--- a/sql/src/test/java/io/crate/integrationtests/SystemColumnIntegrationTest.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-/*\n- * Licensed to Crate under one or more contributor license agreements.\n- * See the NOTICE file distributed with this work for additional\n- * information regarding copyright ownership.  Crate licenses this file\n- * to you under the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.  You may\n- * obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n- * implied.  See the License for the specific language governing\n- * permissions and limitations under the License.\n- *\n- * However, if you have executed another commercial license agreement\n- * with Crate these terms will supersede the license and you may use the\n- * software solely pursuant to the terms of the relevant commercial\n- * agreement.\n- */\n-\n-package io.crate.integrationtests;\n-\n-import org.elasticsearch.test.ESIntegTestCase;\n-import org.junit.Test;\n-\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.core.IsNull.notNullValue;\n-\n-@ESIntegTestCase.ClusterScope(numClientNodes = 0, numDataNodes = 2, supportsDedicatedMasters = false)\n-public class SystemColumnIntegrationTest extends SQLTransportIntegrationTest {\n-\n-    @Test\n-    public void test_system_columns_on_aliased_table() throws Exception {\n-        execute(\"CREATE TABLE test (\\n\" +\n-                \"  text STRING INDEX USING FULLTEXT WITH (analyzer = 'english')  \\n\" +\n-                \");\");\n-        ensureGreen();\n-        execute(\"INSERT INTO test(text) VALUES('test');\");\n-        execute(\"REFRESH table test\");\n-        execute(\"SELECT t._id, t._version, t._score, t._uid, t._doc, t._raw, t._primary_term FROM test as t WHERE match(text, 'test');\");\n-\n-        assertThat(response.rowCount(), is(1L));\n-        assertThat(response.cols().length, is(7));\n-        assertThat(response.cols()[0], is(\"_id\"));\n-        assertThat(response.cols()[1], is(\"_version\"));\n-        assertThat(response.cols()[2], is(\"_score\"));\n-        assertThat(response.cols()[3], is(\"_uid\"));\n-        assertThat(response.cols()[4], is(\"_doc\"));\n-        assertThat(response.cols()[5], is(\"_raw\"));\n-        assertThat(response.cols()[6], is(\"_primary_term\"));\n-        assertThat(response.rows()[0][0], notNullValue());\n-        assertThat(response.rows()[0][1], notNullValue());\n-        assertThat(response.rows()[0][2], notNullValue());\n-        assertThat(response.rows()[0][3], notNullValue());\n-        assertThat(response.rows()[0][4], notNullValue());\n-        assertThat(response.rows()[0][5], notNullValue());\n-        assertThat(response.rows()[0][6], notNullValue());\n-    }\n-\n-}\n"}}, {"oid": "b1c05311804c83437468c939ef0fc3e173dc7420", "url": "https://github.com/crate/crate/commit/b1c05311804c83437468c939ef0fc3e173dc7420", "message": "Move sys.columns test to SelectStatementAnalyzerTest", "committedDate": "2020-04-29T09:30:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4NTM0Mg==", "url": "https://github.com/crate/crate/pull/9900#discussion_r417185342", "bodyText": "Document why vs what:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Add additionally system columns to the output of the relation\n          \n          \n            \n                    // System columns are excluded  from `tableInfo.columns()` by default, but parent relations need to be able to see them so that they're selectable. E.g. in `select a._id from tbl as a`", "author": "mfussenegger", "createdAt": "2020-04-29T09:32:44Z", "path": "sql/src/main/java/io/crate/analyze/relations/DocTableRelation.java", "diffHunk": "@@ -27,16 +27,19 @@\n import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.GeneratedReference;\n import io.crate.metadata.Reference;\n+import io.crate.metadata.doc.DocSysColumns;\n import io.crate.metadata.doc.DocTableInfo;\n import io.crate.metadata.table.Operation;\n \n import javax.annotation.Nullable;\n import java.util.List;\n+import static io.crate.common.collections.Lists2.concat;\n \n public class DocTableRelation extends AbstractTableRelation<DocTableInfo> {\n \n     public DocTableRelation(DocTableInfo tableInfo) {\n-        super(tableInfo);\n+        // Add additionally system columns to the output of the relation", "originalCommit": "b1c05311804c83437468c939ef0fc3e173dc7420", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f1d986e935dbb9833acd979d81e6846079203c0", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/relations/DocTableRelation.java b/sql/src/main/java/io/crate/analyze/relations/DocTableRelation.java\nindex 972cf56e31..03eeac3dc2 100644\n--- a/sql/src/main/java/io/crate/analyze/relations/DocTableRelation.java\n+++ b/sql/src/main/java/io/crate/analyze/relations/DocTableRelation.java\n\n@@ -38,7 +38,9 @@ import static io.crate.common.collections.Lists2.concat;\n public class DocTableRelation extends AbstractTableRelation<DocTableInfo> {\n \n     public DocTableRelation(DocTableInfo tableInfo) {\n-        // Add additionally system columns to the output of the relation\n+        // System columns are excluded from `tableInfo.columns()` by default,\n+        // but parent relations need to be able to see them so that they're selectable.\n+        // E.g. in `select a._id from tbl as a`\n         super(tableInfo, concat(tableInfo.columns(), DocSysColumns.forTable(tableInfo.ident())));\n     }\n \n"}}, {"oid": "6f1d986e935dbb9833acd979d81e6846079203c0", "url": "https://github.com/crate/crate/commit/6f1d986e935dbb9833acd979d81e6846079203c0", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-29T09:39:22Z", "type": "forcePushed"}, {"oid": "48cb8e6d28dad3bbb9dda3a50e3e1f984284a6b4", "url": "https://github.com/crate/crate/commit/48cb8e6d28dad3bbb9dda3a50e3e1f984284a6b4", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-29T12:11:01Z", "type": "commit"}, {"oid": "48cb8e6d28dad3bbb9dda3a50e3e1f984284a6b4", "url": "https://github.com/crate/crate/commit/48cb8e6d28dad3bbb9dda3a50e3e1f984284a6b4", "message": "Add sys.columns to aliased relations", "committedDate": "2020-04-29T12:11:01Z", "type": "forcePushed"}, {"oid": "dc8da7d4f7c0017396d78550459710aab6725dac", "url": "https://github.com/crate/crate/commit/dc8da7d4f7c0017396d78550459710aab6725dac", "message": "Merge branch 'master' into mkleen/alias_system_columns", "committedDate": "2020-04-29T12:46:20Z", "type": "commit"}, {"oid": "c10fac989b0028daabafb3cdc82830393e6792db", "url": "https://github.com/crate/crate/commit/c10fac989b0028daabafb3cdc82830393e6792db", "message": "Merge branch 'master' into mkleen/alias_system_columns", "committedDate": "2020-04-29T13:22:51Z", "type": "commit"}]}