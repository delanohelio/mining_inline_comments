{"pr_number": 9823, "pr_title": "Refactor all geo scalars to new function registry", "pr_createdAt": "2020-03-30T13:36:08Z", "pr_url": "https://github.com/crate/crate/pull/9823", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMDUwNw==", "url": "https://github.com/crate/crate/pull/9823#discussion_r400210507", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DataTypes.STRING, DataTypes.GEO_POINT, new ArrayType<>(DataTypes.DOUBLE));\n          \n          \n            \n                    DataTypes.STRING, DataTypes.GEO_POINT, DataTypes.DOUBLE_ARRAY);", "author": "kovrus", "createdAt": "2020-03-30T13:55:02Z", "path": "sql/src/main/java/io/crate/expression/scalar/geo/DistanceFunction.java", "diffHunk": "@@ -44,22 +40,30 @@\n import java.util.Arrays;\n import java.util.List;\n \n+import static io.crate.metadata.functions.Signature.scalar;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n+\n public class DistanceFunction extends Scalar<Double, Point> {\n \n     public static final String NAME = \"distance\";\n-    private static final Param ALLOWED_PARAM = Param.of(\n-        DataTypes.STRING, DataTypes.GEO_POINT, new ArrayType(DataTypes.DOUBLE));\n+    private static final List<DataType<?>> SUPPORTED_TYPES = List.of(\n+        DataTypes.STRING, DataTypes.GEO_POINT, new ArrayType<>(DataTypes.DOUBLE));", "originalCommit": "f3f8abb54460f320f0ae06cfd6dcba6c4f8866af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f32609238cd803447975ce35cfc590d0b5cf634", "chunk": "diff --git a/sql/src/main/java/io/crate/expression/scalar/geo/DistanceFunction.java b/sql/src/main/java/io/crate/expression/scalar/geo/DistanceFunction.java\nindex 69a3f5bfef..876279b119 100644\n--- a/sql/src/main/java/io/crate/expression/scalar/geo/DistanceFunction.java\n+++ b/sql/src/main/java/io/crate/expression/scalar/geo/DistanceFunction.java\n\n@@ -47,7 +46,7 @@ public class DistanceFunction extends Scalar<Double, Point> {\n \n     public static final String NAME = \"distance\";\n     private static final List<DataType<?>> SUPPORTED_TYPES = List.of(\n-        DataTypes.STRING, DataTypes.GEO_POINT, new ArrayType<>(DataTypes.DOUBLE));\n+        DataTypes.STRING, DataTypes.GEO_POINT, DataTypes.DOUBLE_ARRAY);\n \n     private final FunctionInfo info;\n     private static final FunctionInfo GEO_POINT_INFO = genInfo(Arrays.asList(DataTypes.GEO_POINT, DataTypes.GEO_POINT));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzkwMQ==", "url": "https://github.com/crate/crate/pull/9823#discussion_r400213901", "bodyText": "what is the preferable way of defining the signature\nparseTypeSignature(\"double precision\")\n\nor\nDataTypes.DOUBLE.getTypeSignature()\n\n?", "author": "kovrus", "createdAt": "2020-03-30T13:59:20Z", "path": "sql/src/main/java/io/crate/expression/scalar/geo/CoordinateFunction.java", "diffHunk": "@@ -31,13 +30,20 @@\n import java.util.List;\n import java.util.function.Function;\n \n+import static io.crate.metadata.functions.Signature.scalar;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n+\n public final class CoordinateFunction {\n \n-    private static final List<DataType> SUPPORTED_INPUT_TYPES = ImmutableList.of(DataTypes.GEO_POINT, DataTypes.STRING, DataTypes.DOUBLE_ARRAY, DataTypes.UNDEFINED);\n+    private static final List<DataType<?>> SUPPORTED_INPUT_TYPES =\n+        List.of(DataTypes.GEO_POINT, DataTypes.STRING, DataTypes.DOUBLE_ARRAY, DataTypes.UNDEFINED);\n \n     private static void register(ScalarFunctionModule module, String name, Function<Object, Double> func) {\n-        for (DataType inputType : SUPPORTED_INPUT_TYPES) {\n-            module.register(new UnaryScalar<>(name, inputType, DataTypes.DOUBLE, func));\n+        for (DataType<?> inputType : SUPPORTED_INPUT_TYPES) {\n+            module.register(\n+                scalar(name, inputType.getTypeSignature(), parseTypeSignature(\"double precision\")),", "originalCommit": "f3f8abb54460f320f0ae06cfd6dcba6c4f8866af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxOTU2Ng==", "url": "https://github.com/crate/crate/pull/9823#discussion_r400219566", "bodyText": "No strict preference, both is valid. I prefer parseTypeSignature(\"double precision\") as I think is more readable, but may be just a personal preference.", "author": "seut", "createdAt": "2020-03-30T14:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTMzNg==", "url": "https://github.com/crate/crate/pull/9823#discussion_r400231336", "bodyText": "Wouldn't the second variant be safer, since the type name must be valid to create the DataType instance later on?", "author": "mfussenegger", "createdAt": "2020-03-30T14:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNTgzOQ==", "url": "https://github.com/crate/crate/pull/9823#discussion_r400235839", "bodyText": "parseTypeSignature() will also fail on invalid types as it will call DataTypes.ofName() eventually.", "author": "seut", "createdAt": "2020-03-30T14:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MTQ1NA==", "url": "https://github.com/crate/crate/pull/9823#discussion_r400241454", "bodyText": "parseTypeSignature() will also fail on invalid types as it will call DataTypes.ofName() eventually.\n\nGood point, although I think DataTypes.DOUBLE.getTypeSignature()  or parseTypeSignature(DataTypes.DOUBLE.getName())  would make the relationship clearer and make refactorings easier.\nProbably not worth going through all open PRs again, but maybe going forward?", "author": "mfussenegger", "createdAt": "2020-03-30T14:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1MzAwNg==", "url": "https://github.com/crate/crate/pull/9823#discussion_r400253006", "bodyText": "Refactoring is a good point although I really like the literal variant. But yes lets use then DataTypes.DOUBLE.getTypeSignature() in future.", "author": "seut", "createdAt": "2020-03-30T14:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzkwMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7f32609238cd803447975ce35cfc590d0b5cf634", "url": "https://github.com/crate/crate/commit/7f32609238cd803447975ce35cfc590d0b5cf634", "message": "Refactor all geo scalars to new function registry", "committedDate": "2020-03-30T14:10:49Z", "type": "commit"}, {"oid": "7f32609238cd803447975ce35cfc590d0b5cf634", "url": "https://github.com/crate/crate/commit/7f32609238cd803447975ce35cfc590d0b5cf634", "message": "Refactor all geo scalars to new function registry", "committedDate": "2020-03-30T14:10:49Z", "type": "forcePushed"}, {"oid": "8f559a11ba91d6353be4c793a77ff9d451892fcb", "url": "https://github.com/crate/crate/commit/8f559a11ba91d6353be4c793a77ff9d451892fcb", "message": "Merge branch 'master' into s/geo-scalars", "committedDate": "2020-03-30T14:47:51Z", "type": "commit"}]}