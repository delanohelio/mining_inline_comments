{"pr_number": 10070, "pr_title": "Convert arithmetic scalars to new signature registry", "pr_createdAt": "2020-06-10T14:21:47Z", "pr_url": "https://github.com/crate/crate/pull/10070", "timeline": [{"oid": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd", "url": "https://github.com/crate/crate/commit/6e59012035e3533d2860b4a3bfcec5bdce7b0ebd", "message": "Convert arithmetic scalars to new signature registry\n\nBy using signature matching of arithmetic scalars, arithmetic data type\nselection is based on precedence and thus fixes existing issues for\nfloating point arithmetics.\nOperations on non-floating point column types with a floating point\nliteral will result in a floating point result now.\n\nFixes #9652", "committedDate": "2020-06-10T14:20:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MTk4OA==", "url": "https://github.com/crate/crate/pull/10070#discussion_r438161988", "bodyText": "checkstyle forced me to add this weird indention, don't know why :(", "author": "seut", "createdAt": "2020-06-10T14:23:00Z", "path": "server/src/main/java/io/crate/expression/scalar/arithmetic/ArithmeticFunctions.java", "diffHunk": "@@ -64,158 +44,130 @@\n         public static final String MOD = \"mod\";\n     }\n \n-    public static void register(ScalarFunctionModule module) {\n-        module.register(Names.ADD, new ArithmeticFunctionResolver(\n-            Names.ADD,\n-            \"+\",\n+    private enum Operations {\n+        ADD(\n             FunctionInfo.DETERMINISTIC_AND_COMPARISON_REPLACEMENT,\n             Math::addExact,\n             Double::sum,\n             Math::addExact,\n             Float::sum\n-        ));\n-        module.register(Names.SUBTRACT, new ArithmeticFunctionResolver(\n-            Names.SUBTRACT,\n-            \"-\",\n+        ),\n+        SUBTRACT(\n             FunctionInfo.DETERMINISTIC_ONLY,\n             Math::subtractExact,\n-            (arg0, arg1) -> arg0 - arg1,\n+                (arg0, arg1) -> arg0 - arg1,", "originalCommit": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4ODg3Nw==", "url": "https://github.com/crate/crate/pull/10070#discussion_r438188877", "bodyText": "do we still need to check whether the intersecting from and to type parameters are compatible or the size check would be enough?", "author": "kovrus", "createdAt": "2020-06-10T14:56:30Z", "path": "server/src/main/java/io/crate/types/TypeCompatibility.java", "diffHunk": "@@ -92,6 +92,9 @@\n         List<DataType<?>> toTypeParameters = toType.getTypeParameters();\n \n         if (fromTypeParameters.size() != toTypeParameters.size()) {\n+            if (fromType.id() == ObjectType.ID && toType.id() == ObjectType.ID) {\n+                return fromTypeParameters.size() > toTypeParameters.size() ? fromType : toType;", "originalCommit": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwNDIwNA==", "url": "https://github.com/crate/crate/pull/10070#discussion_r438204204", "bodyText": "Currently no test required to check for object inner type compatibility. Thats why I went just with size comparison as it popped up when working with untyped and typed objects.\nI'd keep that in mind and only add later on if really required.", "author": "seut", "createdAt": "2020-06-10T15:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4ODg3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NjEzOQ==", "url": "https://github.com/crate/crate/pull/10070#discussion_r438196139", "bodyText": "\ud83d\udc4d", "author": "kovrus", "createdAt": "2020-06-10T15:06:29Z", "path": "server/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1027,7 +1027,7 @@ public void testCreateTableGeneratedColumnWithCast() {\n         Map<String, String> generatedColumnsMapping = (Map<String, String>) metaMapping.get(\"generated_columns\");\n         assertThat(\n             generatedColumnsMapping.get(\"day\"),\n-            is(\"_cast((_cast(ts, 'bigint') + 1::bigint), 'timestamp with time zone')\"));\n+            is(\"(ts + 1::bigint)\"));", "originalCommit": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "be67de2d065da8c9639a2b59e4a92960857f6b1a", "url": "https://github.com/crate/crate/commit/be67de2d065da8c9639a2b59e4a92960857f6b1a", "message": "Merge branch 'master' into s/arithmetic-functions", "committedDate": "2020-06-10T15:23:57Z", "type": "commit"}]}