{"pr_number": 9967, "pr_title": "Add support for the varchar with the length limit in CrateDB parser and analyzer.", "pr_createdAt": "2020-05-19T08:58:30Z", "pr_url": "https://github.com/crate/crate/pull/9967", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1NDMyMQ==", "url": "https://github.com/crate/crate/pull/9967#discussion_r427154321", "bodyText": "I think we can get rid of ColumnType and its derived classes and just for a string that represents the data type, then   in the analyzer we can use the type parameter signature parsing logic to get a CrateDB internal data type. I'll check that and follow up on it if it is possible after adding the varchar(length) support.", "author": "kovrus", "createdAt": "2020-05-19T09:17:24Z", "path": "libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -1767,7 +1767,17 @@ public Node visitDefinedDataType(SqlBaseParser.DefinedDataTypeContext context) {\n         return new ColumnType(type);\n     }\n \n-    private String getObjectType(Token type) {\n+    @Override\n+    public Node visitParametrizedDataType(SqlBaseParser.ParametrizedDataTypeContext context) {\n+        var name = ((ColumnType<?>) visit(context.dataType())).name();", "originalCommit": "674fb7549f31341620778451d14ebca0464c89d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36cbc72eb611ad97be1f315f51175d206904ca9f", "chunk": "diff --git a/libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java b/libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\nindex 0c8ee7e704..a009cf6778 100644\n--- a/libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n+++ b/libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n\n@@ -1760,21 +1755,27 @@ class AstBuilder extends SqlBaseBaseVisitor<Node> {\n     }\n \n     @Override\n-    public Node visitDefinedDataType(SqlBaseParser.DefinedDataTypeContext context) {\n-        String type = context.children.stream()\n-            .map(c -> c.getText().toLowerCase(Locale.ENGLISH))\n-            .collect(Collectors.joining(\" \"));\n-        return new ColumnType(type);\n-    }\n-\n-    @Override\n-    public Node visitParametrizedDataType(SqlBaseParser.ParametrizedDataTypeContext context) {\n-        var name = ((ColumnType<?>) visit(context.dataType())).name();\n-        var parameters = new ArrayList<Integer>();\n+    public Node visitMaybeParametrizedDataType(SqlBaseParser.MaybeParametrizedDataTypeContext context) {\n+        StringLiteral name = (StringLiteral) visit(context.baseDataType());\n+        var parameters = new ArrayList<Integer>(context.integerLiteral().size());\n         for (var param : context.integerLiteral()) {\n             parameters.add(Math.toIntExact(((LongLiteral) visit(param)).getValue()));\n         }\n-        return new ColumnType(name, parameters);\n+        return new ColumnType<>(name.getValue(), parameters);\n+    }\n+\n+    @Override\n+    public Node visitIdentDataType(SqlBaseParser.IdentDataTypeContext context) {\n+        return StringLiteral.fromObject(getIdentText(context.ident()));\n+    }\n+\n+    @Override\n+    public Node visitDefinedDataType(SqlBaseParser.DefinedDataTypeContext context) {\n+        return StringLiteral.fromObject(\n+            context.children.stream()\n+                .map(c -> c.getText().toLowerCase(Locale.ENGLISH))\n+                .collect(Collectors.joining(\" \"))\n+        );\n     }\n \n     private static String getObjectType(Token type) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzExOA==", "url": "https://github.com/crate/crate/pull/9967#discussion_r427163118", "bodyText": "If we keep the grammar as is (dataType '('...) I think we should also add tests for the array and object cases", "author": "mfussenegger", "createdAt": "2020-05-19T09:31:29Z", "path": "libs/sql-parser/src/test/java/io/crate/sql/parser/TestStatementBuilder.java", "diffHunk": "@@ -1642,6 +1642,12 @@ public void test_multiple_aggregates_with_filter_clauses() {\n             \"FROM t\");\n     }\n \n+    @Test\n+    public void test_create_table_with_parametrized_varchar_data_type   () {\n+        printStatement(\"create table test(col varchar(1))\");\n+        printStatement(\"create table test(col character varying(2))\");", "originalCommit": "674fb7549f31341620778451d14ebca0464c89d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2ODEwMg==", "url": "https://github.com/crate/crate/pull/9967#discussion_r427168102", "bodyText": "yes, it must be only for definedDataType and ident", "author": "kovrus", "createdAt": "2020-05-19T09:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzExOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NDU2OA==", "url": "https://github.com/crate/crate/pull/9967#discussion_r427164568", "bodyText": "Maybe instead of switching to a LinkedHashSet we could sort the types inside the throws block. That we we'd only pay the price in the error case instead of all the time.", "author": "mfussenegger", "createdAt": "2020-05-19T09:33:54Z", "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -1162,7 +1163,7 @@ private static void verifyTypesForMatch(Iterable<? extends Symbol> columns, Data\n     }\n \n     private static void ensureResultTypesMatch(Collection<? extends Symbol> results) {\n-        HashSet<DataType> resultTypes = new HashSet<>();\n+        HashSet<DataType<?>> resultTypes = new LinkedHashSet<>(results.size());", "originalCommit": "674fb7549f31341620778451d14ebca0464c89d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36cbc72eb611ad97be1f315f51175d206904ca9f", "chunk": "diff --git a/server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java b/server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java\nindex a4e1bf91c6..417ca63757 100644\n--- a/server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java\n+++ b/server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java\n\n@@ -1163,7 +1162,7 @@ public class ExpressionAnalyzer {\n     }\n \n     private static void ensureResultTypesMatch(Collection<? extends Symbol> results) {\n-        HashSet<DataType<?>> resultTypes = new LinkedHashSet<>(results.size());\n+        HashSet<DataType> resultTypes = new HashSet<>();\n         for (Symbol result : results) {\n             resultTypes.add(result.valueType());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTk2OQ==", "url": "https://github.com/crate/crate/pull/9967#discussion_r427165969", "bodyText": "Maybe have a of overload for StringType that takes a list and move the validation there? Seems to me that the StringType should be responsible for knowing valid parameters, not DataTypes.", "author": "mfussenegger", "createdAt": "2020-05-19T09:36:06Z", "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -353,6 +353,26 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         return dataType;\n     }\n \n+    public static DataType<?> of(String typeName, List<Integer> parameters) {\n+        DataType<?> dataType = ofNameOrNull(typeName);\n+        if (dataType == null) {\n+            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n+        }\n+        if (!parameters.isEmpty()) {\n+            if (dataType.id() == StringType.ID) {\n+                if (parameters.size() != 1) {\n+                    throw new IllegalArgumentException(\n+                        \"The number of parameters for the text data is wrong: \" + parameters.size());\n+                }\n+                return StringType.of(parameters.get(0));", "originalCommit": "674fb7549f31341620778451d14ebca0464c89d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36cbc72eb611ad97be1f315f51175d206904ca9f", "chunk": "diff --git a/server/src/main/java/io/crate/types/DataTypes.java b/server/src/main/java/io/crate/types/DataTypes.java\nindex d23b9b0796..e79bab8693 100644\n--- a/server/src/main/java/io/crate/types/DataTypes.java\n+++ b/server/src/main/java/io/crate/types/DataTypes.java\n\n@@ -353,26 +353,6 @@ public final class DataTypes {\n         return dataType;\n     }\n \n-    public static DataType<?> of(String typeName, List<Integer> parameters) {\n-        DataType<?> dataType = ofNameOrNull(typeName);\n-        if (dataType == null) {\n-            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n-        }\n-        if (!parameters.isEmpty()) {\n-            if (dataType.id() == StringType.ID) {\n-                if (parameters.size() != 1) {\n-                    throw new IllegalArgumentException(\n-                        \"The number of parameters for the text data is wrong: \" + parameters.size());\n-                }\n-                return StringType.of(parameters.get(0));\n-            }\n-            throw new IllegalArgumentException(\n-                \"The '\" + typeName + \"' type doesn't support type parameters.\");\n-        } else {\n-            return dataType;\n-        }\n-    }\n-\n     @Nullable\n     public static DataType<?> ofNameOrNull(String typeName) {\n         return TYPES_BY_NAME_OR_ALIAS.get(typeName);\n"}}, {"oid": "36cbc72eb611ad97be1f315f51175d206904ca9f", "url": "https://github.com/crate/crate/commit/36cbc72eb611ad97be1f315f51175d206904ca9f", "message": "Add parser support for varchar parametrization with length limit.", "committedDate": "2020-05-19T14:25:37Z", "type": "commit"}, {"oid": "b114d3ad3004e822ff6121db022253f82b739fe8", "url": "https://github.com/crate/crate/commit/b114d3ad3004e822ff6121db022253f82b739fe8", "message": "Add the length limit field to the crate string type.", "committedDate": "2020-05-19T14:34:01Z", "type": "commit"}, {"oid": "7f24b8b58ee47519429325139a438ca5dea0dc61", "url": "https://github.com/crate/crate/commit/7f24b8b58ee47519429325139a438ca5dea0dc61", "message": "Add varchar with length limit support in create table analyzer.", "committedDate": "2020-05-19T14:36:27Z", "type": "commit"}, {"oid": "7f24b8b58ee47519429325139a438ca5dea0dc61", "url": "https://github.com/crate/crate/commit/7f24b8b58ee47519429325139a438ca5dea0dc61", "message": "Add varchar with length limit support in create table analyzer.", "committedDate": "2020-05-19T14:36:27Z", "type": "forcePushed"}]}