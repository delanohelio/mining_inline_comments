{"pr_number": 9544, "pr_title": "Support arguments of type long as index access to arrays", "pr_createdAt": "2020-01-21T13:07:01Z", "pr_url": "https://github.com/crate/crate/pull/9544", "timeline": [{"oid": "4d68c6a72ec99f5fc862a9635978b4c1de09adab", "url": "https://github.com/crate/crate/commit/4d68c6a72ec99f5fc862a9635978b4c1de09adab", "message": "Support arguments of type long as index access to arrays\n\nThis adds support for `array_expr[long_column]`.\n\nPreviously the subscript function required the argument to be of type\n`integer`. That worked well for literals, because there `long` can be\ncasted to `int`. But our implicit cast logic is more restrictive if\ncolumns are involved.\n\nThis therefore extends the function signature to allow both `integer`\nand `long` arguments.\n\nPostgreSQL JDBC uses a query that uses this, a subset of the full query\nis:\n\n    select\n        con.confkey[pos.n]\n    from\n        generate_series(1, 32) as pos (n),\n        pg_catalog.pg_constraint con", "committedDate": "2020-01-21T13:07:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5OTAwMw==", "url": "https://github.com/crate/crate/pull/9544#discussion_r368999003", "bodyText": "we probably can inline the evaluate method.", "author": "kovrus", "createdAt": "2020-01-21T13:28:44Z", "path": "sql/src/main/java/io/crate/expression/scalar/SubscriptFunction.java", "diffHunk": "@@ -61,16 +60,16 @@ public Object evaluate(TransactionContext txnCtx, Input[] args) {\n         return evaluate(args[0].value(), args[1].value());\n     }\n \n-    private Object evaluate(Object element, Object index) {\n+    private static Object evaluate(Object element, Object index) {", "originalCommit": "4d68c6a72ec99f5fc862a9635978b4c1de09adab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8cafa768a00b2db9ad23d2c0142ff335322bcfd", "chunk": "diff --git a/sql/src/main/java/io/crate/expression/scalar/SubscriptFunction.java b/sql/src/main/java/io/crate/expression/scalar/SubscriptFunction.java\nindex 1cbb61f270..aa55d779e5 100644\n--- a/sql/src/main/java/io/crate/expression/scalar/SubscriptFunction.java\n+++ b/sql/src/main/java/io/crate/expression/scalar/SubscriptFunction.java\n\n@@ -57,24 +57,18 @@ public class SubscriptFunction extends Scalar<Object, Object[]> {\n     @Override\n     public Object evaluate(TransactionContext txnCtx, Input[] args) {\n         assert args.length == 2 : \"invalid number of arguments\";\n-        return evaluate(args[0].value(), args[1].value());\n-    }\n-\n-    private static Object evaluate(Object element, Object index) {\n+        Object element = args[0].value();\n+        Object index = args[1].value();\n         if (element == null || index == null) {\n             return null;\n         }\n-        assert (element instanceof Object[] || element instanceof List)\n-            : \"first argument must be of type array or list\";\n+        assert element instanceof List : \"first argument is typed as array and must be a List\";\n         assert index instanceof Number : \"second argument must be of type integer\";\n \n         // 1 based arrays as SQL standard says\n         int idx = DataTypes.INTEGER.value(index) - 1;\n         try {\n-            if (element instanceof List) {\n-                return ((List) element).get(idx);\n-            }\n-            return ((Object[]) element)[idx];\n+            return ((List<?>) element).get(idx);\n         } catch (IndexOutOfBoundsException e) {\n             return null;\n         }\n"}}, {"oid": "fdce356e0576c69e05aa2a6babee32c15f29d3b0", "url": "https://github.com/crate/crate/commit/fdce356e0576c69e05aa2a6babee32c15f29d3b0", "message": "Support arguments of type long as index access to arrays\n\nThis adds support for `array_expr[long_column]`.\n\nPreviously the subscript function required the argument to be of type\n`integer`. That worked well for literals, because there `long` can be\ncasted to `int`. But our implicit cast logic is more restrictive if\ncolumns are involved.\n\nThis therefore extends the function signature to allow both `integer`\nand `long` arguments.\n\nPostgreSQL JDBC uses a query that uses this, a subset of the full query\nis:\n\n    select\n        con.confkey[pos.n]\n    from\n        generate_series(1, 32) as pos (n),\n        pg_catalog.pg_constraint con", "committedDate": "2020-01-21T14:55:47Z", "type": "commit"}, {"oid": "f8cafa768a00b2db9ad23d2c0142ff335322bcfd", "url": "https://github.com/crate/crate/commit/f8cafa768a00b2db9ad23d2c0142ff335322bcfd", "message": "Inline evaluate in SubscriptFunction", "committedDate": "2020-01-21T14:55:47Z", "type": "commit"}, {"oid": "f8cafa768a00b2db9ad23d2c0142ff335322bcfd", "url": "https://github.com/crate/crate/commit/f8cafa768a00b2db9ad23d2c0142ff335322bcfd", "message": "Inline evaluate in SubscriptFunction", "committedDate": "2020-01-21T14:55:47Z", "type": "forcePushed"}]}