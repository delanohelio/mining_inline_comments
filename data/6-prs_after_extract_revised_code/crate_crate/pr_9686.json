{"pr_number": 9686, "pr_title": "Add CHECK constraint syntax to create table statement", "pr_createdAt": "2020-02-18T10:57:04Z", "pr_url": "https://github.com/crate/crate/pull/9686", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY1Mjg1Nw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r380652857", "bodyText": "I think we should avoid having a global counter here.\n\nIt would be global across all tables,\nIt would cause race conditions because each node would have its own independent counter. So CREATE TABLE\u00b4 on node1 would create the same number as CREATE TABLE` on node2.\n\nI think we should keep the AST close to the statement and omit the name if it wasn't specified by the user.\nThis can be generated later on in the execution layer when we store the meta data.", "author": "mfussenegger", "createdAt": "2020-02-18T12:53:52Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> implements ToXContent {\n+\n+    private static final ConcurrentMap<String, AtomicInteger> CHECK_SUFFIXES = new ConcurrentHashMap<>();", "originalCommit": "3276a93267c98b07946bd935b08120adf8b82c21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94b875bfd3491c24b87140d0811b9bd7166d6f4b", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 5143ae808e..cf2c560910 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -24,72 +24,63 @@ package io.crate.sql.tree;\n import com.google.common.base.MoreObjects;\n import com.google.common.base.Objects;\n import io.crate.sql.ExpressionFormatter;\n-import org.elasticsearch.common.xcontent.ToXContent;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import javax.annotation.Nullable;\n-import java.io.IOException;\n-import java.util.Locale;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.UUID;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n \n-public class CheckConstraint<T> extends TableElement<T> implements ToXContent {\n+public class CheckConstraint<T> extends TableElement<T> {\n \n-    private static final ConcurrentMap<String, AtomicInteger> CHECK_SUFFIXES = new ConcurrentHashMap<>();\n-\n-    private static String uniqueName(String tableName, String columnName) {\n-        if (null == tableName || tableName.isEmpty()) {\n-            throw new IllegalArgumentException(\"tableName cannot be null or empty\");\n-        }\n-        StringBuilder sb = new StringBuilder(tableName);\n-        if (null != columnName && false == columnName.isEmpty()) {\n-            sb.append(\"_\").append(columnName);\n-        }\n-        sb.append(\"_check\");\n-        String prefix = sb.toString();\n-        AtomicInteger count = CHECK_SUFFIXES.computeIfAbsent(prefix, k -> new AtomicInteger(1));\n-        if (1 == count.get()) {\n-            return prefix;\n-        }\n-        return sb.append(\"_\").append(count.getAndIncrement()).toString();\n-    }\n-\n-\n-    private String name;\n+    private final String userDefinedName;\n+    private final String columnName;\n     private final Expression expression;\n+    private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name, Expression expression) {\n-        if (null != name && CHECK_SUFFIXES.containsKey(name)) {\n-            throw new IllegalArgumentException(String.format(\n-                Locale.ENGLISH, \"a check constraint [%s] already exists\", name));\n-        }\n-        this.name = name;\n+    public CheckConstraint(@Nullable String userDefinedName,\n+                           @Nullable String columnName,\n+                           Expression expression) {\n+        this.userDefinedName = userDefinedName;\n+        this.columnName = columnName;\n         this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n     }\n \n-    public void setName(String tableName) {\n-        setName(tableName, null);\n+    public String uniqueName(String fqTableName) {\n+        if (null != userDefinedName) {\n+            return userDefinedName;\n+        }\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n     }\n \n-    public void setName(String tableName, String columnName) {\n-        this.name = uniqueName(tableName, columnName);\n+    public String columnName() {\n+        return columnName;\n     }\n \n-    public String name() {\n-        return name;\n+    public String userDefinedName() {\n+        return userDefinedName;\n     }\n \n     public Expression expression() {\n         return expression;\n     }\n \n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(name, expression);\n+        return Objects.hashCode(userDefinedName, columnName, expression);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY1MjkzNQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r380652935", "bodyText": "Is implements ToXContent necessary?", "author": "mfussenegger", "createdAt": "2020-02-18T12:54:02Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> implements ToXContent {", "originalCommit": "3276a93267c98b07946bd935b08120adf8b82c21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94b875bfd3491c24b87140d0811b9bd7166d6f4b", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 5143ae808e..cf2c560910 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -24,72 +24,63 @@ package io.crate.sql.tree;\n import com.google.common.base.MoreObjects;\n import com.google.common.base.Objects;\n import io.crate.sql.ExpressionFormatter;\n-import org.elasticsearch.common.xcontent.ToXContent;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import javax.annotation.Nullable;\n-import java.io.IOException;\n-import java.util.Locale;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.UUID;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n \n-public class CheckConstraint<T> extends TableElement<T> implements ToXContent {\n+public class CheckConstraint<T> extends TableElement<T> {\n \n-    private static final ConcurrentMap<String, AtomicInteger> CHECK_SUFFIXES = new ConcurrentHashMap<>();\n-\n-    private static String uniqueName(String tableName, String columnName) {\n-        if (null == tableName || tableName.isEmpty()) {\n-            throw new IllegalArgumentException(\"tableName cannot be null or empty\");\n-        }\n-        StringBuilder sb = new StringBuilder(tableName);\n-        if (null != columnName && false == columnName.isEmpty()) {\n-            sb.append(\"_\").append(columnName);\n-        }\n-        sb.append(\"_check\");\n-        String prefix = sb.toString();\n-        AtomicInteger count = CHECK_SUFFIXES.computeIfAbsent(prefix, k -> new AtomicInteger(1));\n-        if (1 == count.get()) {\n-            return prefix;\n-        }\n-        return sb.append(\"_\").append(count.getAndIncrement()).toString();\n-    }\n-\n-\n-    private String name;\n+    private final String userDefinedName;\n+    private final String columnName;\n     private final Expression expression;\n+    private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name, Expression expression) {\n-        if (null != name && CHECK_SUFFIXES.containsKey(name)) {\n-            throw new IllegalArgumentException(String.format(\n-                Locale.ENGLISH, \"a check constraint [%s] already exists\", name));\n-        }\n-        this.name = name;\n+    public CheckConstraint(@Nullable String userDefinedName,\n+                           @Nullable String columnName,\n+                           Expression expression) {\n+        this.userDefinedName = userDefinedName;\n+        this.columnName = columnName;\n         this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n     }\n \n-    public void setName(String tableName) {\n-        setName(tableName, null);\n+    public String uniqueName(String fqTableName) {\n+        if (null != userDefinedName) {\n+            return userDefinedName;\n+        }\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n     }\n \n-    public void setName(String tableName, String columnName) {\n-        this.name = uniqueName(tableName, columnName);\n+    public String columnName() {\n+        return columnName;\n     }\n \n-    public String name() {\n-        return name;\n+    public String userDefinedName() {\n+        return userDefinedName;\n     }\n \n     public Expression expression() {\n         return expression;\n     }\n \n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(name, expression);\n+        return Objects.hashCode(userDefinedName, columnName, expression);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY1MzExNw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r380653117", "bodyText": "Please no setters on AST structures.\nWe cache those for prepared statements, so we should make sure that they're immutable.", "author": "mfussenegger", "createdAt": "2020-02-18T12:54:26Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> implements ToXContent {\n+\n+    private static final ConcurrentMap<String, AtomicInteger> CHECK_SUFFIXES = new ConcurrentHashMap<>();\n+\n+    private static String uniqueName(String tableName, String columnName) {\n+        if (null == tableName || tableName.isEmpty()) {\n+            throw new IllegalArgumentException(\"tableName cannot be null or empty\");\n+        }\n+        StringBuilder sb = new StringBuilder(tableName);\n+        if (null != columnName && false == columnName.isEmpty()) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check\");\n+        String prefix = sb.toString();\n+        AtomicInteger count = CHECK_SUFFIXES.computeIfAbsent(prefix, k -> new AtomicInteger(1));\n+        if (1 == count.get()) {\n+            return prefix;\n+        }\n+        return sb.append(\"_\").append(count.getAndIncrement()).toString();\n+    }\n+\n+\n+    private String name;\n+    private final Expression expression;\n+\n+    public CheckConstraint(@Nullable String name, Expression expression) {\n+        if (null != name && CHECK_SUFFIXES.containsKey(name)) {\n+            throw new IllegalArgumentException(String.format(\n+                Locale.ENGLISH, \"a check constraint [%s] already exists\", name));\n+        }\n+        this.name = name;\n+        this.expression = expression;\n+    }\n+\n+    public void setName(String tableName) {", "originalCommit": "3276a93267c98b07946bd935b08120adf8b82c21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94b875bfd3491c24b87140d0811b9bd7166d6f4b", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 5143ae808e..cf2c560910 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -24,72 +24,63 @@ package io.crate.sql.tree;\n import com.google.common.base.MoreObjects;\n import com.google.common.base.Objects;\n import io.crate.sql.ExpressionFormatter;\n-import org.elasticsearch.common.xcontent.ToXContent;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import javax.annotation.Nullable;\n-import java.io.IOException;\n-import java.util.Locale;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.UUID;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n \n-public class CheckConstraint<T> extends TableElement<T> implements ToXContent {\n+public class CheckConstraint<T> extends TableElement<T> {\n \n-    private static final ConcurrentMap<String, AtomicInteger> CHECK_SUFFIXES = new ConcurrentHashMap<>();\n-\n-    private static String uniqueName(String tableName, String columnName) {\n-        if (null == tableName || tableName.isEmpty()) {\n-            throw new IllegalArgumentException(\"tableName cannot be null or empty\");\n-        }\n-        StringBuilder sb = new StringBuilder(tableName);\n-        if (null != columnName && false == columnName.isEmpty()) {\n-            sb.append(\"_\").append(columnName);\n-        }\n-        sb.append(\"_check\");\n-        String prefix = sb.toString();\n-        AtomicInteger count = CHECK_SUFFIXES.computeIfAbsent(prefix, k -> new AtomicInteger(1));\n-        if (1 == count.get()) {\n-            return prefix;\n-        }\n-        return sb.append(\"_\").append(count.getAndIncrement()).toString();\n-    }\n-\n-\n-    private String name;\n+    private final String userDefinedName;\n+    private final String columnName;\n     private final Expression expression;\n+    private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name, Expression expression) {\n-        if (null != name && CHECK_SUFFIXES.containsKey(name)) {\n-            throw new IllegalArgumentException(String.format(\n-                Locale.ENGLISH, \"a check constraint [%s] already exists\", name));\n-        }\n-        this.name = name;\n+    public CheckConstraint(@Nullable String userDefinedName,\n+                           @Nullable String columnName,\n+                           Expression expression) {\n+        this.userDefinedName = userDefinedName;\n+        this.columnName = columnName;\n         this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n     }\n \n-    public void setName(String tableName) {\n-        setName(tableName, null);\n+    public String uniqueName(String fqTableName) {\n+        if (null != userDefinedName) {\n+            return userDefinedName;\n+        }\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n     }\n \n-    public void setName(String tableName, String columnName) {\n-        this.name = uniqueName(tableName, columnName);\n+    public String columnName() {\n+        return columnName;\n     }\n \n-    public String name() {\n-        return name;\n+    public String userDefinedName() {\n+        return userDefinedName;\n     }\n \n     public Expression expression() {\n         return expression;\n     }\n \n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(name, expression);\n+        return Objects.hashCode(userDefinedName, columnName, expression);\n     }\n \n     @Override\n"}}, {"oid": "94b875bfd3491c24b87140d0811b9bd7166d6f4b", "url": "https://github.com/crate/crate/commit/94b875bfd3491c24b87140d0811b9bd7166d6f4b", "message": "Add cluster state serialization/deserialization\n\nCheck constraints are uniquely named when the user fails to do this.", "committedDate": "2020-02-19T14:30:06Z", "type": "forcePushed"}, {"oid": "ae144e3d7940ac285d80e102d44ac3b512cafab0", "url": "https://github.com/crate/crate/commit/ae144e3d7940ac285d80e102d44ac3b512cafab0", "message": "Fix docu", "committedDate": "2020-02-19T15:15:26Z", "type": "forcePushed"}, {"oid": "dc939fbb29f138c44fcdad323dcdd6a37df48f0f", "url": "https://github.com/crate/crate/commit/dc939fbb29f138c44fcdad323dcdd6a37df48f0f", "message": "Start differentiating between column/table check\n\nThese are really the same, a table level check constraint, however\nthe grammar allows for their definition also at the column level\n(semantically they should be checked differently, in practice postgres\ndoes not enforce rules such as 'a column check must use only the\ncolumn itself, and no other columns').", "committedDate": "2020-02-20T10:17:44Z", "type": "forcePushed"}, {"oid": "5c62a4a7cfbea96aeffe59dbb99cba25f8ed1074", "url": "https://github.com/crate/crate/commit/5c62a4a7cfbea96aeffe59dbb99cba25f8ed1074", "message": "Fix docu", "committedDate": "2020-02-20T11:13:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r382002264", "bodyText": "was wondering whether it is absolutely necessary to access the parent node context from the child node? imho, it would be nice to keep the scope of node visitor method limited to the node context.", "author": "kovrus", "createdAt": "2020-02-20T13:38:11Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -786,6 +788,28 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n+        String name = null;\n+        if (null != ctx.CONSTRAINT()) {\n+            name = getIdentText(ctx.name);\n+        }\n+        Expression expression = (Expression) visit(ctx.expression);\n+        return null == columnName ?\n+            new CheckConstraint<>(name, expression) : new CheckColumnConstraint<>(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {\n+        return visitCheckConstraint(context.checkConstraint(), null);\n+    }\n+\n+    @Override\n+    public Node visitColumnCheckConstraint(SqlBaseParser.ColumnCheckConstraintContext context) {\n+        SqlBaseParser.ColumnDefinitionContext columnCtx = (SqlBaseParser.ColumnDefinitionContext) context.parent;", "originalCommit": "8c4f80951a1390d5823a21002a0c3184fd168a79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3ODk0MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r382578941", "bodyText": "It can be done, in fact we do not really need to have a column name, as it is only used to generate a name when the user does not provide one explicitly. But I will do that when I am closer to the end.\nAlso, if Node was an interface (while somehow still enforcing the hashcode, equals and tostring override in \u201csubclasses\u201d) I could only use one class for both cases (column/table level definitions) by having this class implement TableElement and ColumnConstraint, which would also be interfaces.", "author": "marregui", "createdAt": "2020-02-21T13:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTU0NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388781545", "bodyText": "@kovrus I need to have two classes because users can define CHECK constraints at both the column and the table level:\nCREATE TABLE t (\n   id int PRIMARY KEY,\n   name string CHECK(name != 'peter'),\n   size int,\n   CHECK(size >= 0)\n)\n\nEach class is under different hierarchies (ColumnConstraint, TableElement). This could be avoided by having these hierarchies be interfaces. As I am already in this situation, I gather the column name (this is the only way I can think of), and then I use the column name to produce the check-constraint's name. Later on, when you do SHOW CREATE TABLE t you will see that the constraints are defined at the table level. Were it not for the column name in the check-constaint's name, we would loose information, i.e. the fact that the original statement defined the constraint at the column level.\nIf it is ok to drop this knowledge, then I will proceed to downsize. But, my preference would be not to drop knowledge.", "author": "marregui", "createdAt": "2020-03-06T08:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5ODk2MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388798960", "bodyText": "not sure whether it is better, but maybe we can enrich (map) the constraint with a column name in the analyzer? I am just sceptical about traversing the AST within the AstBuilder traversing logic :) Imho, it makes parser grammar and node visitors logic harder to change and reason about.", "author": "kovrus", "createdAt": "2020-03-06T09:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398559152", "bodyText": "Followed your suggestion, thank you!", "author": "marregui", "createdAt": "2020-03-26T13:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java b/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\nindex c0c6a83461..250372e187 100644\n--- a/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n+++ b/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n\n@@ -788,26 +788,22 @@ class AstBuilder extends SqlBaseBaseVisitor<Node> {\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n-    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n-        String name = null;\n-        if (null != ctx.CONSTRAINT()) {\n-            name = getIdentText(ctx.name);\n-        }\n-        Expression expression = (Expression) visit(ctx.expression);\n-        return null == columnName ?\n-            new CheckConstraint<>(name, expression) : new CheckColumnConstraint<>(name, columnName, expression);\n-    }\n-\n     @Override\n     public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {\n-        return visitCheckConstraint(context.checkConstraint(), null);\n+        SqlBaseParser.CheckConstraintContext ctx = context.checkConstraint();\n+        String name = ctx.CONSTRAINT() != null ? getIdentText(ctx.name) : null;\n+        Expression expression = (Expression) visit(ctx.expression);\n+        return new CheckConstraint<>(name, expression);\n     }\n \n     @Override\n     public Node visitColumnCheckConstraint(SqlBaseParser.ColumnCheckConstraintContext context) {\n+        SqlBaseParser.CheckConstraintContext ctx = context.checkConstraint();\n+        String name = ctx.CONSTRAINT() != null ? getIdentText(ctx.name) : null;\n+        Expression expression = (Expression) visit(ctx.expression);\n         SqlBaseParser.ColumnDefinitionContext columnCtx = (SqlBaseParser.ColumnDefinitionContext) context.parent;\n         String columnName = getIdentText(columnCtx.ident());\n-        return visitCheckConstraint(context.checkConstraint(), columnName);\n+        return new CheckColumnConstraint<>(name, columnName, expression);\n     }\n \n     @Override\n"}}, {"oid": "1d66575dfd11df14083f46e146f83a620b77061c", "url": "https://github.com/crate/crate/commit/1d66575dfd11df14083f46e146f83a620b77061c", "message": "Implement the actual validation on the check constraints, insert", "committedDate": "2020-02-24T14:30:19Z", "type": "forcePushed"}, {"oid": "7390f68ffbbc105c2f048b104a161c15ece5b406", "url": "https://github.com/crate/crate/commit/7390f68ffbbc105c2f048b104a161c15ece5b406", "message": "Fix tests", "committedDate": "2020-02-24T19:30:16Z", "type": "forcePushed"}, {"oid": "70062f89add8005ae31a6c78358cb3ded5b45877", "url": "https://github.com/crate/crate/commit/70062f89add8005ae31a6c78358cb3ded5b45877", "message": "Add DDL create table tests and exercise upsert", "committedDate": "2020-02-24T20:09:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkwMg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r383757902", "bodyText": "// Either add the new term to nonReserved in SqlBase.4g or add a breaking changes entry and adapt this test\n\n:)", "author": "mfussenegger", "createdAt": "2020-02-25T09:35:21Z", "path": "sql-parser/src/test/java/io/crate/sql/IdentifiersTest.java", "diffHunk": "@@ -38,7 +38,7 @@ public void test_number_of_keywords() {\n         // Either add the new term to `nonReserved` in `SqlBase.4g` or add a breaking changes entry and adapt this test.\n         assertThat(\n             (int) Identifiers.KEYWORDS.stream().filter(Identifiers.Keyword::isReserved).count(),\n-            is(95)\n+            is(96)", "originalCommit": "70062f89add8005ae31a6c78358cb3ded5b45877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4ODAyMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r383788023", "bodyText": "Added to non-reserved.", "author": "marregui", "createdAt": "2020-02-25T10:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "f41d763717a1986a5307dd7af79e5947a210045d", "chunk": "diff --git a/sql-parser/src/test/java/io/crate/sql/IdentifiersTest.java b/sql-parser/src/test/java/io/crate/sql/IdentifiersTest.java\nindex cceb2b74df..d6927fadba 100644\n--- a/sql-parser/src/test/java/io/crate/sql/IdentifiersTest.java\n+++ b/sql-parser/src/test/java/io/crate/sql/IdentifiersTest.java\n\n@@ -38,7 +38,7 @@ public class IdentifiersTest {\n         // Either add the new term to `nonReserved` in `SqlBase.4g` or add a breaking changes entry and adapt this test.\n         assertThat(\n             (int) Identifiers.KEYWORDS.stream().filter(Identifiers.Keyword::isReserved).count(),\n-            is(96)\n+            is(95)\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1ODUxOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r383758519", "bodyText": "I think the DocTableInfo should expose the checkConstraints in analyzed form (Symbol) - we don't want to have the overhead of analyzing the expressions on each insert.", "author": "mfussenegger", "createdAt": "2020-02-25T09:36:31Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -56,6 +67,29 @@\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n+        checkConstraints = initializeCheckConstraints(table, inputFactory, ctx);\n+    }\n+\n+    private Map<String, Tuple<Input<?>, String>> initializeCheckConstraints(DocTableInfo table,\n+                                                                            InputFactory inputFactory,\n+                                                                            InputFactory.Context<E> ctx) {\n+        ExpressionAnalyzer analyzer = new ExpressionAnalyzer(", "originalCommit": "70062f89add8005ae31a6c78358cb3ded5b45877", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ee42bc7d472c6c40a25dcff99af98fc4e2173f8", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\nindex 45cd2228b3..21496a4006 100644\n--- a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n+++ b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n\n@@ -67,28 +62,12 @@ public final class CheckConstraints<T, E extends CollectExpression<T, ?>> {\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n-        checkConstraints = initializeCheckConstraints(table, inputFactory, ctx);\n-    }\n-\n-    private Map<String, Tuple<Input<?>, String>> initializeCheckConstraints(DocTableInfo table,\n-                                                                            InputFactory inputFactory,\n-                                                                            InputFactory.Context<E> ctx) {\n-        ExpressionAnalyzer analyzer = new ExpressionAnalyzer(\n-            inputFactory.getFunctions(),\n-            CoordinatorTxnCtx.systemTransactionContext(),\n-            ParamTypeHints.EMPTY,\n-            new TableReferenceResolver(table.getReferences().values(), table.ident()),\n-            null);\n-        ExpressionAnalysisContext analysisCtx = new ExpressionAnalysisContext();\n-        return table\n+        checkConstraints = table\n             .checkConstraints()\n-            .entrySet()\n             .stream()\n             .collect(Collectors.toMap(\n-                Map.Entry::getKey,\n-                chk -> new Tuple<>(\n-                    ctx.add(analyzer.convert(chk.getValue(), analysisCtx)),\n-                    ExpressionFormatter.formatStandaloneExpression(chk.getValue()))\n+                AnalyzedCheckConstraint::name,\n+                chk -> new Tuple<>(ctx.add(chk.function()), chk.expressionStr())\n             ));\n     }\n \n"}}, {"oid": "5ee42bc7d472c6c40a25dcff99af98fc4e2173f8", "url": "https://github.com/crate/crate/commit/5ee42bc7d472c6c40a25dcff99af98fc4e2173f8", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-26T11:33:32Z", "type": "forcePushed"}, {"oid": "94f6daef0ad47bbd41346f0fd732c4912d8caa2e", "url": "https://github.com/crate/crate/commit/94f6daef0ad47bbd41346f0fd732c4912d8caa2e", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:26:29Z", "type": "forcePushed"}, {"oid": "fcd41b3ab91a39994b7bf3f27cd472667f16eef4", "url": "https://github.com/crate/crate/commit/fcd41b3ab91a39994b7bf3f27cd472667f16eef4", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:29:05Z", "type": "forcePushed"}, {"oid": "b54baf00b87cf5997fedab124bf5a9ee97b4cead", "url": "https://github.com/crate/crate/commit/b54baf00b87cf5997fedab124bf5a9ee97b4cead", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:30:37Z", "type": "forcePushed"}, {"oid": "84db85d74f5d8fc51662f9cee8b8fe4f720475aa", "url": "https://github.com/crate/crate/commit/84db85d74f5d8fc51662f9cee8b8fe4f720475aa", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:44:24Z", "type": "forcePushed"}, {"oid": "f41d763717a1986a5307dd7af79e5947a210045d", "url": "https://github.com/crate/crate/commit/f41d763717a1986a5307dd7af79e5947a210045d", "message": "Make CHECK a non-reserved work, because I fancy using it as a constraint name\n\nand because we can.", "committedDate": "2020-02-27T11:48:49Z", "type": "forcePushed"}, {"oid": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "url": "https://github.com/crate/crate/commit/474f529d7fa484fb08e256e64ede002ed4cfbde4", "message": "Make CHECK a non-reserved work, because I fancy using it as a constraint name\n\nand because we can.", "committedDate": "2020-02-27T11:52:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjMyMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385102320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != ctx.CONSTRAINT()) {\n          \n          \n            \n                    if (ctx.CONSTRAINT() != null) {\n          \n      \n    \n    \n  \n\nWe usually don't use joda conditions.", "author": "mfussenegger", "createdAt": "2020-02-27T12:43:23Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -786,6 +788,28 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n+        String name = null;\n+        if (null != ctx.CONSTRAINT()) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java b/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\nindex c0c6a83461..250372e187 100644\n--- a/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n+++ b/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n\n@@ -788,26 +788,22 @@ class AstBuilder extends SqlBaseBaseVisitor<Node> {\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n-    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n-        String name = null;\n-        if (null != ctx.CONSTRAINT()) {\n-            name = getIdentText(ctx.name);\n-        }\n-        Expression expression = (Expression) visit(ctx.expression);\n-        return null == columnName ?\n-            new CheckConstraint<>(name, expression) : new CheckColumnConstraint<>(name, columnName, expression);\n-    }\n-\n     @Override\n     public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {\n-        return visitCheckConstraint(context.checkConstraint(), null);\n+        SqlBaseParser.CheckConstraintContext ctx = context.checkConstraint();\n+        String name = ctx.CONSTRAINT() != null ? getIdentText(ctx.name) : null;\n+        Expression expression = (Expression) visit(ctx.expression);\n+        return new CheckConstraint<>(name, expression);\n     }\n \n     @Override\n     public Node visitColumnCheckConstraint(SqlBaseParser.ColumnCheckConstraintContext context) {\n+        SqlBaseParser.CheckConstraintContext ctx = context.checkConstraint();\n+        String name = ctx.CONSTRAINT() != null ? getIdentText(ctx.name) : null;\n+        Expression expression = (Expression) visit(ctx.expression);\n         SqlBaseParser.ColumnDefinitionContext columnCtx = (SqlBaseParser.ColumnDefinitionContext) context.parent;\n         String columnName = getIdentText(columnCtx.ident());\n-        return visitCheckConstraint(context.checkConstraint(), columnName);\n+        return new CheckColumnConstraint<>(name, columnName, expression);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMzk3OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385103979", "bodyText": "How about inlining the concrete logic into visitColumnCheckConstraint and visitTableCheckConstraint instead of having a nullable columnName and make a distinction again in visitCheckConstraint. Seems like a unnecessary generalization.", "author": "mfussenegger", "createdAt": "2020-02-27T12:46:49Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -786,6 +788,28 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n+        String name = null;\n+        if (null != ctx.CONSTRAINT()) {\n+            name = getIdentText(ctx.name);\n+        }\n+        Expression expression = (Expression) visit(ctx.expression);\n+        return null == columnName ?\n+            new CheckConstraint<>(name, expression) : new CheckColumnConstraint<>(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {\n+        return visitCheckConstraint(context.checkConstraint(), null);\n+    }\n+\n+    @Override\n+    public Node visitColumnCheckConstraint(SqlBaseParser.ColumnCheckConstraintContext context) {\n+        SqlBaseParser.ColumnDefinitionContext columnCtx = (SqlBaseParser.ColumnDefinitionContext) context.parent;\n+        String columnName = getIdentText(columnCtx.ident());\n+        return visitCheckConstraint(context.checkConstraint(), columnName);", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java b/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\nindex c0c6a83461..250372e187 100644\n--- a/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n+++ b/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java\n\n@@ -788,26 +788,22 @@ class AstBuilder extends SqlBaseBaseVisitor<Node> {\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n-    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n-        String name = null;\n-        if (null != ctx.CONSTRAINT()) {\n-            name = getIdentText(ctx.name);\n-        }\n-        Expression expression = (Expression) visit(ctx.expression);\n-        return null == columnName ?\n-            new CheckConstraint<>(name, expression) : new CheckColumnConstraint<>(name, columnName, expression);\n-    }\n-\n     @Override\n     public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {\n-        return visitCheckConstraint(context.checkConstraint(), null);\n+        SqlBaseParser.CheckConstraintContext ctx = context.checkConstraint();\n+        String name = ctx.CONSTRAINT() != null ? getIdentText(ctx.name) : null;\n+        Expression expression = (Expression) visit(ctx.expression);\n+        return new CheckConstraint<>(name, expression);\n     }\n \n     @Override\n     public Node visitColumnCheckConstraint(SqlBaseParser.ColumnCheckConstraintContext context) {\n+        SqlBaseParser.CheckConstraintContext ctx = context.checkConstraint();\n+        String name = ctx.CONSTRAINT() != null ? getIdentText(ctx.name) : null;\n+        Expression expression = (Expression) visit(ctx.expression);\n         SqlBaseParser.ColumnDefinitionContext columnCtx = (SqlBaseParser.ColumnDefinitionContext) context.parent;\n         String columnName = getIdentText(columnCtx.ident());\n-        return visitCheckConstraint(context.checkConstraint(), columnName);\n+        return new CheckColumnConstraint<>(name, columnName, expression);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDUxMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385104510", "bodyText": "Please also annotat the fields and the property methods with @Nullable if the attributes are really nullable", "author": "mfussenegger", "createdAt": "2020-02-27T12:48:03Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    private final String name;\n+    private final String columnName;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\nindex cf9a1ef07f..32cd1bdc92 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n\n@@ -33,29 +33,29 @@ import java.util.function.Function;\n \n public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n \n+    @Nullable\n     private final String name;\n     private final String columnName;\n-    private final Expression expression;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckColumnConstraint(@Nullable String name,\n-                                 @Nullable String columnName,\n-                                 Expression expression) {\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression) {\n         this.name = name;\n         this.columnName = columnName;\n         this.expression = expression;\n-        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);\n     }\n \n     public String columnName() {\n         return columnName;\n     }\n \n+    @Nullable\n     public String name() {\n         return name;\n     }\n \n-    public Expression expression() {\n+    public T expression() {\n         return expression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDcyNg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385104726", "bodyText": "Same here, please add @Nullable annotations.", "author": "mfussenegger", "createdAt": "2020-02-27T12:48:25Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 17ecee5c12..a8e5aeb36b 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -32,22 +32,23 @@ import java.util.function.Function;\n \n public class CheckConstraint<T> extends TableElement<T> {\n \n+    @Nullable\n     private final String name;\n-    private final Expression expression;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name,\n-                           Expression expression) {\n+    public CheckConstraint(@Nullable String name, T expression) {\n         this.name = name;\n         this.expression = expression;\n-        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);\n     }\n \n+    @Nullable\n     public String name() {\n         return name;\n     }\n \n-    public Expression expression() {\n+    public T expression() {\n         return expression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNjU1Nw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385106557", "bodyText": "Shouldn't this method do something?", "author": "mfussenegger", "createdAt": "2020-02-27T12:52:13Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    private final String name;\n+    private final String columnName;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name,\n+                                 @Nullable String columnName,\n+                                 Expression expression) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public Expression expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint<>(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+    }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\nindex cf9a1ef07f..32cd1bdc92 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n\n@@ -33,29 +33,29 @@ import java.util.function.Function;\n \n public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n \n+    @Nullable\n     private final String name;\n     private final String columnName;\n-    private final Expression expression;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckColumnConstraint(@Nullable String name,\n-                                 @Nullable String columnName,\n-                                 Expression expression) {\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression) {\n         this.name = name;\n         this.columnName = columnName;\n         this.expression = expression;\n-        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);\n     }\n \n     public String columnName() {\n         return columnName;\n     }\n \n+    @Nullable\n     public String name() {\n         return name;\n     }\n \n-    public Expression expression() {\n+    public T expression() {\n         return expression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTIxMg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111212", "bodyText": "Same here. I think this ought to do something.", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:11Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name,\n+                           Expression expression) {\n+        this.name = name;\n+        this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public Expression expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint(name, expression);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+    }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 17ecee5c12..a8e5aeb36b 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -32,22 +32,23 @@ import java.util.function.Function;\n \n public class CheckConstraint<T> extends TableElement<T> {\n \n+    @Nullable\n     private final String name;\n-    private final Expression expression;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name,\n-                           Expression expression) {\n+    public CheckConstraint(@Nullable String name, T expression) {\n         this.name = name;\n         this.expression = expression;\n-        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);\n     }\n \n+    @Nullable\n     public String name() {\n         return name;\n     }\n \n-    public Expression expression() {\n+    public T expression() {\n         return expression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTMwOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111308", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       Expression expression) {\n          \n          \n            \n                                       T expression) {", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:22Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name,\n+                           Expression expression) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 17ecee5c12..a8e5aeb36b 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -32,22 +32,23 @@ import java.util.function.Function;\n \n public class CheckConstraint<T> extends TableElement<T> {\n \n+    @Nullable\n     private final String name;\n-    private final Expression expression;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name,\n-                           Expression expression) {\n+    public CheckConstraint(@Nullable String name, T expression) {\n         this.name = name;\n         this.expression = expression;\n-        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);\n     }\n \n+    @Nullable\n     public String name() {\n         return name;\n     }\n \n-    public Expression expression() {\n+    public T expression() {\n         return expression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTM4NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Expression expression;\n          \n          \n            \n                private final T expression;", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:30Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;\n+    private final Expression expression;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 17ecee5c12..a8e5aeb36b 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -32,22 +32,23 @@ import java.util.function.Function;\n \n public class CheckConstraint<T> extends TableElement<T> {\n \n+    @Nullable\n     private final String name;\n-    private final Expression expression;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name,\n-                           Expression expression) {\n+    public CheckConstraint(@Nullable String name, T expression) {\n         this.name = name;\n         this.expression = expression;\n-        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);\n     }\n \n+    @Nullable\n     public String name() {\n         return name;\n     }\n \n-    public Expression expression() {\n+    public T expression() {\n         return expression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTQ2OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             Expression expression) {\n          \n          \n            \n                                             T expression) {", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:40Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    private final String name;\n+    private final String columnName;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name,\n+                                 @Nullable String columnName,\n+                                 Expression expression) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\nindex cf9a1ef07f..32cd1bdc92 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n\n@@ -33,29 +33,29 @@ import java.util.function.Function;\n \n public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n \n+    @Nullable\n     private final String name;\n     private final String columnName;\n-    private final Expression expression;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckColumnConstraint(@Nullable String name,\n-                                 @Nullable String columnName,\n-                                 Expression expression) {\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression) {\n         this.name = name;\n         this.columnName = columnName;\n         this.expression = expression;\n-        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);\n     }\n \n     public String columnName() {\n         return columnName;\n     }\n \n+    @Nullable\n     public String name() {\n         return name;\n     }\n \n-    public Expression expression() {\n+    public T expression() {\n         return expression;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTgyNg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111826", "bodyText": "Please add @Nullable annotations for nullable parameters", "author": "mfussenegger", "createdAt": "2020-02-27T13:03:18Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -562,6 +574,37 @@ public static void changeToPartitionedByColumn(AnalyzedTableElements<Object> ele\n         return columns;\n     }\n \n+    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n+    }\n+\n+    private void addCheckConstraint(String fqRelationName, String columnName, String name, String expressionStr) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\nindex e204dc8d0b..bc9b7c4b00 100644\n--- a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n+++ b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n\n@@ -574,9 +574,9 @@ public class AnalyzedTableElements<T> {\n         return columns;\n     }\n \n-    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+    private static String uniqueCheckConstraintName(String fqTableName, @Nullable String columnName) {\n         StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n-        if (null != columnName) {\n+        if (columnName != null) {\n             sb.append(\"_\").append(columnName);\n         }\n         sb.append(\"_check_\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTkwOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111909", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == name) {\n          \n          \n            \n                    if (name == null) {", "author": "mfussenegger", "createdAt": "2020-02-27T13:03:29Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -562,6 +574,37 @@ public static void changeToPartitionedByColumn(AnalyzedTableElements<Object> ele\n         return columns;\n     }\n \n+    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n+    }\n+\n+    private void addCheckConstraint(String fqRelationName, String columnName, String name, String expressionStr) {\n+        if (null == name) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\nindex e204dc8d0b..bc9b7c4b00 100644\n--- a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n+++ b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n\n@@ -574,9 +574,9 @@ public class AnalyzedTableElements<T> {\n         return columns;\n     }\n \n-    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+    private static String uniqueCheckConstraintName(String fqTableName, @Nullable String columnName) {\n         StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n-        if (null != columnName) {\n+        if (columnName != null) {\n             sb.append(\"_\").append(columnName);\n         }\n         sb.append(\"_check_\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMjE1OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385112159", "bodyText": "You can check the return value of put instead, to avoid an extra get call", "author": "mfussenegger", "createdAt": "2020-02-27T13:03:59Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -562,6 +574,37 @@ public static void changeToPartitionedByColumn(AnalyzedTableElements<Object> ele\n         return columns;\n     }\n \n+    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n+    }\n+\n+    private void addCheckConstraint(String fqRelationName, String columnName, String name, String expressionStr) {\n+        if (null == name) {\n+            name = uniqueCheckConstraintName(fqRelationName, columnName);\n+        }\n+        if (null != checkConstraints.get(name)) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\nindex e204dc8d0b..bc9b7c4b00 100644\n--- a/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n+++ b/sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java\n\n@@ -574,9 +574,9 @@ public class AnalyzedTableElements<T> {\n         return columns;\n     }\n \n-    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+    private static String uniqueCheckConstraintName(String fqTableName, @Nullable String columnName) {\n         StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n-        if (null != columnName) {\n+        if (columnName != null) {\n             sb.append(\"_\").append(columnName);\n         }\n         sb.append(\"_check_\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMjY3Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385112672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // check constraints\n          \n          \n            \n                        if (!tableInfo.checkConstraints().isEmpty()) {\n          \n          \n            \n                            elements.addAll(tableInfo.checkConstraints());\n          \n          \n            \n                        }\n          \n          \n            \n                        elements.addAll(tableInfo.checkConstraints());\n          \n      \n    \n    \n  \n\nThe // check constraints comment doesn't add any information. addAll also behaves the right way if the collection is empty.", "author": "mfussenegger", "createdAt": "2020-02-27T13:05:06Z", "path": "sql/src/main/java/io/crate/analyze/MetaDataToASTNodeResolver.java", "diffHunk": "@@ -98,6 +98,10 @@ public Extractor(DocTableInfo tableInfo) {\n             if (pk != null) elements.add(pk);\n             // index definitions\n             elements.addAll(extractIndexDefinitions());\n+            // check constraints\n+            if (!tableInfo.checkConstraints().isEmpty()) {\n+                elements.addAll(tableInfo.checkConstraints());\n+            }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/MetaDataToASTNodeResolver.java b/sql/src/main/java/io/crate/analyze/MetaDataToASTNodeResolver.java\nindex b7629cdaca..05b519f563 100644\n--- a/sql/src/main/java/io/crate/analyze/MetaDataToASTNodeResolver.java\n+++ b/sql/src/main/java/io/crate/analyze/MetaDataToASTNodeResolver.java\n\n@@ -98,10 +98,7 @@ public class MetaDataToASTNodeResolver {\n             if (pk != null) elements.add(pk);\n             // index definitions\n             elements.addAll(extractIndexDefinitions());\n-            // check constraints\n-            if (!tableInfo.checkConstraints().isEmpty()) {\n-                elements.addAll(tableInfo.checkConstraints());\n-            }\n+            elements.addAll(tableInfo.checkConstraints());\n             return elements;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzE2OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385113169", "bodyText": "Is that a valid behavior?", "author": "mfussenegger", "createdAt": "2020-02-27T13:06:04Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -73,6 +86,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n+            Input<?> checkInput = checkEntry.getValue().v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (null == value) {\n+                continue;\n+            }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMTUyOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385211528", "bodyText": "I interpreted it so:\nIt should be noted that a check constraint is satisfied if the check expression evaluates to\ntrue or the null value. Since most expressions will evaluate to the null value if any operand \nis null, they will not prevent null values in the constrained columns. To ensure that a column\ndoes not contain null values, the not-null constraint described in the next section can be \nused.\n\nhttps://www.postgresql.org/docs/9.4/ddl-constraints.html", "author": "marregui", "createdAt": "2020-02-27T16:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODAxNQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278015", "bodyText": "Could you add short inline comment about this?\nIn other cases null evaluates to false, so this behavior here might look like a bug on the first glance.", "author": "mfussenegger", "createdAt": "2020-03-05T13:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\nindex 21496a4006..eed1b56fa8 100644\n--- a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n+++ b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n\n@@ -86,35 +83,21 @@ public final class CheckConstraints<T, E extends CollectExpression<T, ?>> {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n-        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n-            Input<?> checkInput = checkEntry.getValue().v1();\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n             Boolean value = (Boolean) checkInput.value();\n-            if (null == value) {\n+            if (value == null) {\n+                // most expressions evaluate to null if any operand is null.\n+                // a check expression will evaluate to true in these cases.\n                 continue;\n             }\n             if (!value.booleanValue()) {\n-                String checkName = checkEntry.getKey();\n-                String checkExpr = checkEntry.getValue().v2();\n-                Object offendingValues = values instanceof Doc ? ((Doc) values).getSource() : values;\n+                CheckConstraint<Symbol> chk = checkEntry.v2();\n                 throw new IllegalArgumentException(String.format(\n                     Locale.ENGLISH,\n                     \"Failed CONSTRAINT %s CHECK (%s) and values %s\",\n-                    checkName, checkExpr, offendingValues));\n-            }\n-        }\n-    }\n-\n-    public void validate(ColumnIdent column, Object columnValue) {\n-        if (notNullColumns.contains(column)) {\n-            Object value;\n-            if (columnValue instanceof Map) {\n-                //noinspection unchecked\n-                value = ValueExtractors.fromMap((Map<String, Object>) columnValue, column);\n-            } else {\n-                value = columnValue;\n-            }\n-            if (value == null) {\n-                throw new IllegalArgumentException(\"\\\"\" + column + \"\\\" must not be null\");\n+                    chk.name(), chk.expressionStr(), values));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzY3Mw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385113673", "bodyText": "Can we get rid of the instanceof here? In this case I think the CheckConstraints shouldn't have any knowledge about what T instances are possible.", "author": "mfussenegger", "createdAt": "2020-02-27T13:07:03Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -73,6 +86,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n+            Input<?> checkInput = checkEntry.getValue().v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (null == value) {\n+                continue;\n+            }\n+            if (!value.booleanValue()) {\n+                String checkName = checkEntry.getKey();\n+                String checkExpr = checkEntry.getValue().v2();\n+                Object offendingValues = values instanceof Doc ? ((Doc) values).getSource() : values;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzQ0Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385213442", "bodyText": "Doc does not have a toString(), so in principle I could add it and print out only the value of sources... which to me is incorrect. Maybe T could extend WithRepresentableValues ?", "author": "marregui", "createdAt": "2020-02-27T16:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\nindex 21496a4006..eed1b56fa8 100644\n--- a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n+++ b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n\n@@ -86,35 +83,21 @@ public final class CheckConstraints<T, E extends CollectExpression<T, ?>> {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n-        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n-            Input<?> checkInput = checkEntry.getValue().v1();\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n             Boolean value = (Boolean) checkInput.value();\n-            if (null == value) {\n+            if (value == null) {\n+                // most expressions evaluate to null if any operand is null.\n+                // a check expression will evaluate to true in these cases.\n                 continue;\n             }\n             if (!value.booleanValue()) {\n-                String checkName = checkEntry.getKey();\n-                String checkExpr = checkEntry.getValue().v2();\n-                Object offendingValues = values instanceof Doc ? ((Doc) values).getSource() : values;\n+                CheckConstraint<Symbol> chk = checkEntry.v2();\n                 throw new IllegalArgumentException(String.format(\n                     Locale.ENGLISH,\n                     \"Failed CONSTRAINT %s CHECK (%s) and values %s\",\n-                    checkName, checkExpr, offendingValues));\n-            }\n-        }\n-    }\n-\n-    public void validate(ColumnIdent column, Object columnValue) {\n-        if (notNullColumns.contains(column)) {\n-            Object value;\n-            if (columnValue instanceof Map) {\n-                //noinspection unchecked\n-                value = ValueExtractors.fromMap((Map<String, Object>) columnValue, column);\n-            } else {\n-                value = columnValue;\n-            }\n-            if (value == null) {\n-                throw new IllegalArgumentException(\"\\\"\" + column + \"\\\" must not be null\");\n+                    chk.name(), chk.expressionStr(), values));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNDc3MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385114771", "bodyText": "Can i really be null?", "author": "mfussenegger", "createdAt": "2020-02-27T13:09:20Z", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -115,7 +117,16 @@ public InformationSchemaIterables(final Schemas schemas,\n             .flatMap(r -> sequentialStream(new NotNullConstraintIterable(r)))\n             .iterator();\n \n-        constraints = () -> concat(sequentialStream(primaryKeyConstraints), sequentialStream(notnullConstraints))\n+        Iterable<ConstraintInfo> checkConstraints = () ->\n+            sequentialStream(relations)\n+            .filter(i -> i != null && !i.checkConstraints().isEmpty())", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java b/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\nindex 7bb2427d4e..6cdd6e1c49 100644\n--- a/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\n+++ b/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\n\n@@ -119,7 +119,7 @@ public class InformationSchemaIterables implements ClusterStateListener {\n \n         Iterable<ConstraintInfo> checkConstraints = () ->\n             sequentialStream(relations)\n-            .filter(i -> i != null && !i.checkConstraints().isEmpty())\n+            .filter(i -> !i.checkConstraints().isEmpty())\n             .flatMap(r -> sequentialStream(new CheckConstraintIterable(r)))\n             .iterator();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNTUxMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385115510", "bodyText": "If we're already working with the Stream API further above, do we even need this? E.g. Could use a map(x -> new ConstraintInfo(...), no?", "author": "mfussenegger", "createdAt": "2020-02-27T13:10:50Z", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -280,6 +291,43 @@ public ConstraintInfo next() {\n         }\n     }\n \n+    static class CheckConstraintIterable implements Iterable<ConstraintInfo> {\n+\n+        private final RelationInfo info;\n+\n+        CheckConstraintIterable(RelationInfo info) {\n+            this.info = info;\n+        }\n+\n+        @Override\n+        public Iterator<ConstraintInfo> iterator() {\n+            return new CheckConstraintIterator(info);\n+        }\n+    }\n+\n+    static class CheckConstraintIterator implements Iterator<ConstraintInfo> {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java b/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\nindex 7bb2427d4e..2668084dcd 100644\n--- a/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\n+++ b/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\n\n@@ -291,43 +361,6 @@ public class InformationSchemaIterables implements ClusterStateListener {\n         }\n     }\n \n-    static class CheckConstraintIterable implements Iterable<ConstraintInfo> {\n-\n-        private final RelationInfo info;\n-\n-        CheckConstraintIterable(RelationInfo info) {\n-            this.info = info;\n-        }\n-\n-        @Override\n-        public Iterator<ConstraintInfo> iterator() {\n-            return new CheckConstraintIterator(info);\n-        }\n-    }\n-\n-    static class CheckConstraintIterator implements Iterator<ConstraintInfo> {\n-        private final RelationInfo info;\n-        private final Iterator<AnalyzedCheckConstraint> checkConstraints;\n-\n-        CheckConstraintIterator(RelationInfo info) {\n-            this.info = info;\n-            checkConstraints = info.checkConstraints().iterator();\n-        }\n-\n-        @Override\n-        public boolean hasNext() {\n-            return checkConstraints.hasNext();\n-        }\n-\n-        @Override\n-        public ConstraintInfo next() {\n-            if (!hasNext()) {\n-                throw new NoSuchElementException(\"Check constraint iterator exhausted\");\n-            }\n-            return new ConstraintInfo(info, checkConstraints.next().name(), ConstraintInfo.Type.CHECK);\n-        }\n-    }\n-\n     static class ColumnsIterable implements Iterable<ColumnContext> {\n \n         private final RelationInfo relationInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNTc3Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385115772", "bodyText": "Is this still needed?", "author": "mfussenegger", "createdAt": "2020-02-27T13:11:20Z", "path": "sql/src/main/java/io/crate/expression/InputFactory.java", "diffHunk": "@@ -78,6 +78,10 @@ public InputFactory(Functions functions) {\n         this.functions = functions;\n     }\n \n+    public Functions getFunctions() {\n+        return functions;\n+    }\n+", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/expression/InputFactory.java b/sql/src/main/java/io/crate/expression/InputFactory.java\nindex f902eabbb8..4bf7d020a7 100644\n--- a/sql/src/main/java/io/crate/expression/InputFactory.java\n+++ b/sql/src/main/java/io/crate/expression/InputFactory.java\n\n@@ -78,10 +78,6 @@ public class InputFactory {\n         this.functions = functions;\n     }\n \n-    public Functions getFunctions() {\n-        return functions;\n-    }\n-\n     public <T extends Input<?>> Context<T> ctxForRefs(TransactionContext txnCtx, ReferenceResolver<? extends T> referenceResolver) {\n         List<T> expressions = new ArrayList<>();\n         return new Context<>(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjI2MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385116260", "bodyText": "I think we either shouldn't have this class, but instead use CheckConstriant<Symbol> directly, or we shouldn't extend CheckConstraint", "author": "mfussenegger", "createdAt": "2020-02-27T13:12:17Z", "path": "sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.symbol;\n+\n+import io.crate.sql.tree.CheckConstraint;\n+import io.crate.sql.tree.Expression;\n+\n+public class AnalyzedCheckConstraint extends CheckConstraint<Expression> {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java b/sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java\ndeleted file mode 100644\nindex 7a66f744d2..0000000000\n--- a/sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-/*\n- * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n- * license agreements.  See the NOTICE file distributed with this work for\n- * additional information regarding copyright ownership.  Crate licenses\n- * this file to you under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.  You may\n- * obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- *\n- * However, if you have executed another commercial license agreement\n- * with Crate these terms will supersede the license and you may use the\n- * software solely pursuant to the terms of the relevant commercial agreement.\n- */\n-\n-package io.crate.expression.symbol;\n-\n-import io.crate.sql.tree.CheckConstraint;\n-import io.crate.sql.tree.Expression;\n-\n-public class AnalyzedCheckConstraint extends CheckConstraint<Expression> {\n-\n-    private final Function function;\n-\n-    public AnalyzedCheckConstraint(String name, Expression expression, Function function) {\n-        super(name, expression);\n-        this.function = function;\n-    }\n-\n-    public Function function() {\n-        return function;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjU4MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385116580", "bodyText": "Also not sure if a Function here is required or even the right thing. What about CHECK (booleanColumn) without any scalar function invocation?", "author": "mfussenegger", "createdAt": "2020-02-27T13:12:53Z", "path": "sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.symbol;\n+\n+import io.crate.sql.tree.CheckConstraint;\n+import io.crate.sql.tree.Expression;\n+\n+public class AnalyzedCheckConstraint extends CheckConstraint<Expression> {\n+\n+    private final Function function;\n+\n+    public AnalyzedCheckConstraint(String name, Expression expression, Function function) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java b/sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java\ndeleted file mode 100644\nindex 7a66f744d2..0000000000\n--- a/sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-/*\n- * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n- * license agreements.  See the NOTICE file distributed with this work for\n- * additional information regarding copyright ownership.  Crate licenses\n- * this file to you under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.  You may\n- * obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- *\n- * However, if you have executed another commercial license agreement\n- * with Crate these terms will supersede the license and you may use the\n- * software solely pursuant to the terms of the relevant commercial agreement.\n- */\n-\n-package io.crate.expression.symbol;\n-\n-import io.crate.sql.tree.CheckConstraint;\n-import io.crate.sql.tree.Expression;\n-\n-public class AnalyzedCheckConstraint extends CheckConstraint<Expression> {\n-\n-    private final Function function;\n-\n-    public AnalyzedCheckConstraint(String name, Expression expression, Function function) {\n-        super(name, expression);\n-        this.function = function;\n-    }\n-\n-    public Function function() {\n-        return function;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjc1MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385116751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ImmutableList.of();\n          \n          \n            \n                    return List.of();\n          \n      \n    \n    \n  \n\nWould avoid using guava if not necessary", "author": "mfussenegger", "createdAt": "2020-02-27T13:13:11Z", "path": "sql/src/main/java/io/crate/metadata/RelationInfo.java", "diffHunk": "@@ -60,6 +62,10 @@ public String pretty() {\n \n     List<ColumnIdent> primaryKey();\n \n+    default List<AnalyzedCheckConstraint> checkConstraints() {\n+        return ImmutableList.of();", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/RelationInfo.java b/sql/src/main/java/io/crate/metadata/RelationInfo.java\nindex 13e6ae0e3b..210a6c8340 100644\n--- a/sql/src/main/java/io/crate/metadata/RelationInfo.java\n+++ b/sql/src/main/java/io/crate/metadata/RelationInfo.java\n\n@@ -62,8 +62,8 @@ public interface RelationInfo extends Iterable<Reference> {\n \n     List<ColumnIdent> primaryKey();\n \n-    default List<AnalyzedCheckConstraint> checkConstraints() {\n-        return ImmutableList.of();\n+    default List<CheckConstraint<Symbol>> checkConstraints() {\n+        return List.of();\n     }\n \n     Map<String, Object> parameters();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzA4NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385117084", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != metaMap) {\n          \n          \n            \n                    if (metaMap != null) {", "author": "mfussenegger", "createdAt": "2020-02-27T13:13:49Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java", "diffHunk": "@@ -597,7 +582,35 @@ public DocIndexMetaData build() {\n         primaryKey = getPrimaryKey();\n         routingCol = getRoutingCol();\n \n-        initializeGeneratedExpressions();\n+        Collection<Reference> references = this.references.values();\n+        TableReferenceResolver tableReferenceResolver = new TableReferenceResolver(references, ident);\n+        ExpressionAnalyzer exprAnalyzer = new ExpressionAnalyzer(\n+            functions, CoordinatorTxnCtx.systemTransactionContext(), ParamTypeHints.EMPTY, tableReferenceResolver, null);\n+        ExpressionAnalysisContext analysisCtx = new ExpressionAnalysisContext();\n+\n+        ImmutableList.Builder<AnalyzedCheckConstraint> checkConstraintsBuilder = null;\n+        Map<String, Object> metaMap = Maps.get(mappingMap, \"_meta\");\n+        if (null != metaMap) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java b/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\nindex 216a4a8e49..87dd2b1273 100644\n--- a/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\n+++ b/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\n\n@@ -590,9 +590,9 @@ public class DocIndexMetaData {\n \n         ImmutableList.Builder<AnalyzedCheckConstraint> checkConstraintsBuilder = null;\n         Map<String, Object> metaMap = Maps.get(mappingMap, \"_meta\");\n-        if (null != metaMap) {\n+        if (metaMap != null) {\n             Map<String, String> checkConstraintsMap = Maps.get(metaMap, \"check_constraints\");\n-            if (null != checkConstraintsMap) {\n+            if (checkConstraintsMap != null) {\n                 checkConstraintsBuilder = ImmutableList.builder();\n                 for (Map.Entry<String, String> entry : checkConstraintsMap.entrySet()) {\n                     String name = entry.getKey();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzIyMQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385117221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (null != checkConstraintsMap) {\n          \n          \n            \n                        if (checkConstraintsMap != null) {", "author": "mfussenegger", "createdAt": "2020-02-27T13:14:04Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java", "diffHunk": "@@ -597,7 +582,35 @@ public DocIndexMetaData build() {\n         primaryKey = getPrimaryKey();\n         routingCol = getRoutingCol();\n \n-        initializeGeneratedExpressions();\n+        Collection<Reference> references = this.references.values();\n+        TableReferenceResolver tableReferenceResolver = new TableReferenceResolver(references, ident);\n+        ExpressionAnalyzer exprAnalyzer = new ExpressionAnalyzer(\n+            functions, CoordinatorTxnCtx.systemTransactionContext(), ParamTypeHints.EMPTY, tableReferenceResolver, null);\n+        ExpressionAnalysisContext analysisCtx = new ExpressionAnalysisContext();\n+\n+        ImmutableList.Builder<AnalyzedCheckConstraint> checkConstraintsBuilder = null;\n+        Map<String, Object> metaMap = Maps.get(mappingMap, \"_meta\");\n+        if (null != metaMap) {\n+            Map<String, String> checkConstraintsMap = Maps.get(metaMap, \"check_constraints\");\n+            if (null != checkConstraintsMap) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java b/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\nindex 216a4a8e49..87dd2b1273 100644\n--- a/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\n+++ b/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\n\n@@ -590,9 +590,9 @@ public class DocIndexMetaData {\n \n         ImmutableList.Builder<AnalyzedCheckConstraint> checkConstraintsBuilder = null;\n         Map<String, Object> metaMap = Maps.get(mappingMap, \"_meta\");\n-        if (null != metaMap) {\n+        if (metaMap != null) {\n             Map<String, String> checkConstraintsMap = Maps.get(metaMap, \"check_constraints\");\n-            if (null != checkConstraintsMap) {\n+            if (checkConstraintsMap != null) {\n                 checkConstraintsBuilder = ImmutableList.builder();\n                 for (Map.Entry<String, String> entry : checkConstraintsMap.entrySet()) {\n                     String name = entry.getKey();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzgwMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385117803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ImmutableList<AnalyzedCheckConstraint> checkConstraints() {\n          \n          \n            \n                List<AnalyzedCheckConstraint> checkConstraints() {\n          \n      \n    \n    \n  \n\nI know other properties expose the ImmutableList, but leaking implementation details outside class boundaries is usually not a good idea. If you want to change implementation details you also break the API.", "author": "mfussenegger", "createdAt": "2020-02-27T13:15:13Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java", "diffHunk": "@@ -625,6 +638,10 @@ public DocIndexMetaData build() {\n         return notNullColumns;\n     }\n \n+    ImmutableList<AnalyzedCheckConstraint> checkConstraints() {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MzMxOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385243318", "bodyText": "ok, I usually do, but I had a look around in the code, same class, and followed the pattern", "author": "marregui", "createdAt": "2020-02-27T17:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MzM5Nw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385243397", "bodyText": "ImmutableList<GeneratedReference> generatedColumnReferences() {\n        return generatedColumnReferences;\n    }\n\n    ImmutableCollection<ColumnIdent> notNullColumns() {\n        return notNullColumns;\n    }", "author": "marregui", "createdAt": "2020-02-27T17:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java b/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\nindex 216a4a8e49..87dd2b1273 100644\n--- a/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\n+++ b/sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java\n\n@@ -638,7 +638,7 @@ public class DocIndexMetaData {\n         return notNullColumns;\n     }\n \n-    ImmutableList<AnalyzedCheckConstraint> checkConstraints() {\n+    List<AnalyzedCheckConstraint> checkConstraints() {\n         return checkConstraints;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODQ0Mw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385118443", "bodyText": "Using printedTable might make these assertions a bit more readable.", "author": "mfussenegger", "createdAt": "2020-02-27T13:16:34Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +329,41 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        Object [][] rows = response.rows();\n+        assertEquals(0, rows[0][0]);\n+        assertNull(rows[0][1]);\n+        assertEquals(1, rows[1][0]);\n+        assertEquals(1, rows[1][1]);", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\nindex 490e485f4a..33a3f500f7 100644\n--- a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n\n@@ -336,11 +337,7 @@ public class DDLIntegrationTest extends SQLTransportIntegrationTest {\n         refresh();\n         execute(\"select id, qty from t order by id\");\n         assertEquals(2, response.rowCount());\n-        Object [][] rows = response.rows();\n-        assertEquals(0, rows[0][0]);\n-        assertNull(rows[0][1]);\n-        assertEquals(1, rows[1][0]);\n-        assertEquals(1, rows[1][1]);\n+        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n         expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n         execute(\"insert into t(id, qty) values(2, -1)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODgwMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385118803", "bodyText": "Maybe work with assertThat(md.checkConstraints(), Matchers.contains(...)) gives better error messages.", "author": "mfussenegger", "createdAt": "2020-02-27T13:17:18Z", "path": "sql/src/test/java/io/crate/metadata/doc/DocIndexMetaDataTest.java", "diffHunk": "@@ -679,6 +680,39 @@ public void testExtractMultiplePrimaryKeys() throws Exception {\n         assertThat(md.primaryKey(), hasItems(ColumnIdent.fromPath(\"id\"), ColumnIdent.fromPath(\"title\")));\n     }\n \n+    @Test\n+    public void testExtractCheckConstraints() throws Exception {\n+        XContentBuilder builder = XContentFactory.jsonBuilder()\n+            .startObject()\n+            .startObject(Constants.DEFAULT_MAPPING_TYPE)\n+            .startObject(\"_meta\")\n+            .startObject(\"check_constraints\")\n+            .field(\"test3_check_1\", \"id >= 0\")\n+            .field(\"test3_check_2\", \"title != 'Pink Power Ranger'\")\n+            .endObject()\n+            .endObject()\n+            .startObject(\"properties\")\n+            .startObject(\"id\").field(\"type\", \"integer\").endObject()\n+            .startObject(\"title\").field(\"type\", \"string\").endObject()\n+            .endObject()\n+            .endObject()\n+            .endObject();\n+        IndexMetaData metaData = getIndexMetaData(\"test3\", builder);\n+        DocIndexMetaData md = newMeta(metaData, \"test3\");\n+        assertThat(md.checkConstraints().size(), is(2));\n+        for (AnalyzedCheckConstraint chk : md.checkConstraints()) {\n+            switch (chk.name()) {\n+                case \"test3_check_1\":\n+                    assertThat(chk.expression(), is(SqlParser.createExpression(\"id >= 0\")));\n+                    break;\n+\n+                case \"test3_check_2\":\n+                    assertThat(chk.expression(), is(SqlParser.createExpression(\"title <> 'Pink Power Ranger'\")));\n+                    break;\n+            }\n+        }\n+    }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MTc0OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385241749", "bodyText": "I did it this way to avoid having to know the order of the checks, but I will play with this.", "author": "marregui", "createdAt": "2020-02-27T16:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0ODEwMQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385248101", "bodyText": "There is also a Matchers.containsInAnyOrder", "author": "mfussenegger", "createdAt": "2020-02-27T17:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "6f20d3450d124abd409b7edc6cf17f042ae764af", "chunk": "diff --git a/sql/src/test/java/io/crate/metadata/doc/DocIndexMetaDataTest.java b/sql/src/test/java/io/crate/metadata/doc/DocIndexMetaDataTest.java\nindex b2bf9058c0..5bd5dc856b 100644\n--- a/sql/src/test/java/io/crate/metadata/doc/DocIndexMetaDataTest.java\n+++ b/sql/src/test/java/io/crate/metadata/doc/DocIndexMetaDataTest.java\n\n@@ -688,7 +688,7 @@ public class DocIndexMetaDataTest extends CrateDummyClusterServiceUnitTest {\n             .startObject(\"_meta\")\n             .startObject(\"check_constraints\")\n             .field(\"test3_check_1\", \"id >= 0\")\n-            .field(\"test3_check_2\", \"title != 'Pink Power Ranger'\")\n+            .field(\"test3_check_2\", \"title != 'Programming Clojure'\")\n             .endObject()\n             .endObject()\n             .startObject(\"properties\")\n"}}, {"oid": "6f20d3450d124abd409b7edc6cf17f042ae764af", "url": "https://github.com/crate/crate/commit/6f20d3450d124abd409b7edc6cf17f042ae764af", "message": "An interable over RelationInfo, can the item be null?, nope", "committedDate": "2020-03-02T13:56:41Z", "type": "forcePushed"}, {"oid": "1f14cea2dbbd029b7a2129abad4df1a48f53d67d", "url": "https://github.com/crate/crate/commit/1f14cea2dbbd029b7a2129abad4df1a48f53d67d", "message": "An interable over RelationInfo, can the item be null?, nope", "committedDate": "2020-03-02T18:09:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NDg1OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388274858", "bodyText": "This will throw an error  if T is not an Expression. I think the callee of this constructor should pass in the string - or maybe we can defer the formatting to a later point?", "author": "mfussenegger", "createdAt": "2020-03-05T12:54:53Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\nindex 0a62363e7e..8b12b4dfe7 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n\n@@ -24,13 +24,11 @@ package io.crate.sql.tree;\n \n import com.google.common.base.MoreObjects;\n import com.google.common.base.Objects;\n-import io.crate.sql.ExpressionFormatter;\n \n import javax.annotation.Nullable;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n-\n public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n \n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTA4Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388275082", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final T exprOrSymbol;\n          \n          \n            \n                private final T expression;\n          \n      \n    \n    \n  \n\nConceptually a Symbol is also an expression and T doesn't enforce either, a concrete Expression or Symbol, so I'd just stick to expression.", "author": "mfussenegger", "createdAt": "2020-03-05T12:55:21Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T exprOrSymbol;", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 1c0eb6db44..3616839f65 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -28,17 +28,16 @@ import javax.annotation.Nullable;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n-\n public class CheckConstraint<T> extends TableElement<T> {\n \n     @Nullable\n     private final String name;\n-    private final T exprOrSymbol;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {\n+    public CheckConstraint(@Nullable String name, T expression, String expressionStr) {\n         this.name = name;\n-        this.exprOrSymbol = exprOrSymbol;\n+        this.expression = expression;\n         this.expressionStr = expressionStr;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTIwNQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388275205", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {\n          \n          \n            \n                public CheckConstraint(@Nullable String name, T expression, String expressionStr) {", "author": "mfussenegger", "createdAt": "2020-03-05T12:55:36Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T exprOrSymbol;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 1c0eb6db44..3616839f65 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -28,17 +28,16 @@ import javax.annotation.Nullable;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n-\n public class CheckConstraint<T> extends TableElement<T> {\n \n     @Nullable\n     private final String name;\n-    private final T exprOrSymbol;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {\n+    public CheckConstraint(@Nullable String name, T expression, String expressionStr) {\n         this.name = name;\n-        this.exprOrSymbol = exprOrSymbol;\n+        this.expression = expression;\n         this.expressionStr = expressionStr;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTkwMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388275903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public T cargo() {\n          \n          \n            \n                    return exprOrSymbol;\n          \n          \n            \n                public T expression() {\n          \n          \n            \n                    return expression;", "author": "mfussenegger", "createdAt": "2020-03-05T12:56:51Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T exprOrSymbol;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {\n+        this.name = name;\n+        this.exprOrSymbol = exprOrSymbol;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T cargo() {\n+        return exprOrSymbol;", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 1c0eb6db44..3616839f65 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -28,17 +28,16 @@ import javax.annotation.Nullable;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n-\n public class CheckConstraint<T> extends TableElement<T> {\n \n     @Nullable\n     private final String name;\n-    private final T exprOrSymbol;\n+    private final T expression;\n     private final String expressionStr;\n \n-    public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {\n+    public CheckConstraint(@Nullable String name, T expression, String expressionStr) {\n         this.name = name;\n-        this.exprOrSymbol = exprOrSymbol;\n+        this.expression = expression;\n         this.expressionStr = expressionStr;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NzQyNA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388277424", "bodyText": "I think we could use a simple ArrayList here instead of a map? The name should be unique after all.\nThe area here is performance sensitive, so we should avoid expensive and heavy structures if possible.", "author": "mfussenegger", "createdAt": "2020-03-05T13:00:06Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -56,6 +61,13 @@\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n+        checkConstraints = table\n+            .checkConstraints()\n+            .stream()\n+            .collect(Collectors.toMap(\n+                CheckConstraint::name,\n+                chk -> new Tuple<>(ctx.add(chk.cargo()), chk.expressionStr())\n+            ));", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\nindex 8497811675..eed1b56fa8 100644\n--- a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n+++ b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n\n@@ -64,10 +64,8 @@ public final class CheckConstraints<T, E extends CollectExpression<T, ?>> {\n         checkConstraints = table\n             .checkConstraints()\n             .stream()\n-            .collect(Collectors.toMap(\n-                CheckConstraint::name,\n-                chk -> new Tuple<>(ctx.add(chk.cargo()), chk.expressionStr())\n-            ));\n+            .map(chk -> new Tuple<>(ctx.add(chk.expression()), chk))\n+            .collect(Collectors.toList());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODA5Mw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278093", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (null == value) {\n          \n          \n            \n                        if (value == null) {", "author": "mfussenegger", "createdAt": "2020-03-05T13:01:32Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -73,6 +85,21 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n+            Input<?> checkInput = checkEntry.getValue().v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (null == value) {", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMDY4Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388330682", "bodyText": "missed that one", "author": "marregui", "createdAt": "2020-03-05T14:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\nindex 8497811675..eed1b56fa8 100644\n--- a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n+++ b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n\n@@ -85,34 +83,21 @@ public final class CheckConstraints<T, E extends CollectExpression<T, ?>> {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n-        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n-            Input<?> checkInput = checkEntry.getValue().v1();\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n             Boolean value = (Boolean) checkInput.value();\n-            if (null == value) {\n+            if (value == null) {\n+                // most expressions evaluate to null if any operand is null.\n+                // a check expression will evaluate to true in these cases.\n                 continue;\n             }\n             if (!value.booleanValue()) {\n-                String checkName = checkEntry.getKey();\n-                String checkExpr = checkEntry.getValue().v2();\n+                CheckConstraint<Symbol> chk = checkEntry.v2();\n                 throw new IllegalArgumentException(String.format(\n                     Locale.ENGLISH,\n                     \"Failed CONSTRAINT %s CHECK (%s) and values %s\",\n-                    checkName, checkExpr, values));\n-            }\n-        }\n-    }\n-\n-    public void validate(ColumnIdent column, Object columnValue) {\n-        if (notNullColumns.contains(column)) {\n-            Object value;\n-            if (columnValue instanceof Map) {\n-                //noinspection unchecked\n-                value = ValueExtractors.fromMap((Map<String, Object>) columnValue, column);\n-            } else {\n-                value = columnValue;\n-            }\n-            if (value == null) {\n-                throw new IllegalArgumentException(\"\\\"\" + column + \"\\\" must not be null\");\n+                    chk.name(), chk.expressionStr(), values));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODQ0NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278444", "bodyText": "I think the filter is not necessary, flatMap won't generate new entries if checkConstraints is empty.", "author": "mfussenegger", "createdAt": "2020-03-05T13:02:14Z", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -115,7 +116,18 @@ public InformationSchemaIterables(final Schemas schemas,\n             .flatMap(r -> sequentialStream(new NotNullConstraintIterable(r)))\n             .iterator();\n \n-        constraints = () -> concat(sequentialStream(primaryKeyConstraints), sequentialStream(notnullConstraints))\n+        Iterable<ConstraintInfo> checkConstraints = () ->\n+            sequentialStream(relations)\n+                .filter(r -> !r.checkConstraints().isEmpty())", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java b/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\nindex 331e429fef..2668084dcd 100644\n--- a/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\n+++ b/sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java\n\n@@ -118,7 +123,6 @@ public class InformationSchemaIterables implements ClusterStateListener {\n \n         Iterable<ConstraintInfo> checkConstraints = () ->\n             sequentialStream(relations)\n-                .filter(r -> !r.checkConstraints().isEmpty())\n                 .flatMap(r -> r.checkConstraints()\n                     .stream()\n                     .map(chk -> new ConstraintInfo(r, chk.name(), ConstraintInfo.Type.CHECK)))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODg3NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278875", "bodyText": "This looks like Map.of or, if you need stable ordering, ImmutableMap.of ?", "author": "mfussenegger", "createdAt": "2020-03-05T13:03:06Z", "path": "sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml.upsert;\n+\n+import io.crate.expression.InputFactory;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n+import io.crate.testing.SQLExecutor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Testing {@linkplain io.crate.execution.dml.upsert.CheckConstraints},\n+ * as well as various cases related to:\n+ *\n+ * <pre>\n+ *     CONSTRAINT &lt;name&gt; CHECK &lt;boolean expression&gt;\n+ * </pre>\n+ */\n+public class CheckConstraintsTest extends CrateDummyClusterServiceUnitTest {\n+\n+    private SQLExecutor sqlExecutor;\n+    private DocTableInfo docTableInfo;\n+    private CheckConstraints checkConstraints;\n+    private TransactionContext txnCtx;\n+\n+    @Before\n+    public void setUpExecutor() throws Exception {\n+        sqlExecutor = SQLExecutor.builder(clusterService)\n+            .addTable(\"CREATE TABLE t (\" +\n+                      \"    id int,\" +\n+                      \"    qty int,\" +\n+                      \"    sentinel boolean CONSTRAINT sentinel CHECK(sentinel),\" +\n+                      \"    CONSTRAINT id_is_even CHECK(id % 2 = 0))\")\n+            .build();\n+        docTableInfo = sqlExecutor.resolveTableInfo(\"t\");\n+        txnCtx = CoordinatorTxnCtx.systemTransactionContext();\n+        checkConstraints = new CheckConstraints(\n+            txnCtx,\n+            new InputFactory(sqlExecutor.functions()),\n+            FromSourceRefResolver.WITHOUT_PARTITIONED_BY_REFS,\n+            docTableInfo);\n+    }\n+\n+    @Test\n+    public void test_validate_fails_when_check_expr_is_false() throws Exception {\n+        expectedException.expectMessage(\n+            \"Failed CONSTRAINT sentinel CHECK (\\\"sentinel\\\") and values {id=280278, qty=42, sentinel=false}\");\n+        checkConstraints.validate(mapOf(\n+            \"id\", 280278,\n+            \"qty\", 42,\n+            \"sentinel\", false));\n+    }\n+\n+    @Test\n+    public void test_validate_succeeds_when_check_expr_is_true() throws Exception {\n+        checkConstraints.validate(mapOf(\n+            \"id\", 280278,\n+            \"qty\", 42,\n+            \"sentinel\", true));\n+    }\n+\n+    @Test\n+    public void test_validate_succeeds_when_check_expr_is_null() throws Exception {\n+        checkConstraints.validate(mapOf(\n+            \"id\", 280278,\n+            \"qty\", 42,\n+            \"sentinel\", null));\n+    }\n+\n+    @Test\n+    public void test_cannot_have_two_check_constraints_of_same_name() throws Exception {\n+        expectedException.expectMessage(\n+            \"a check constraint of the same name is already declared [id_is_even]\");\n+        SQLExecutor.builder(clusterService)\n+            .addTable(\"CREATE TABLE t (\" +\n+                      \"    id int CONSTRAINT id_is_even CHECK(id % 2 = 0),\" +\n+                      \"    qty int,\" +\n+                      \"    CONSTRAINT id_is_even CHECK(id % 2 = 0))\")\n+            .build();\n+    }\n+\n+    private static Map<String, Object> mapOf(Object... items) {", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyOTEyMQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388329121", "bodyText": "Map.of did not let me have a null value", "author": "marregui", "createdAt": "2020-03-05T14:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d48f6031616f43ce8a5c55581254d537e6c3e6ca", "chunk": "diff --git a/sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java b/sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java\nindex 36396621b7..662d81ca12 100644\n--- a/sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java\n+++ b/sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java\n\n@@ -22,10 +22,22 @@\n \n package io.crate.execution.dml.upsert;\n \n+import io.crate.analyze.ParamTypeHints;\n+import io.crate.analyze.expressions.ExpressionAnalysisContext;\n+import io.crate.analyze.expressions.ExpressionAnalyzer;\n+import io.crate.analyze.relations.FieldProvider;\n import io.crate.expression.InputFactory;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.CoordinatorTxnCtx;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.sql.ExpressionFormatter;\n+import io.crate.sql.parser.SqlParser;\n+import io.crate.sql.tree.CheckConstraint;\n+import io.crate.sql.tree.Expression;\n+import io.crate.sql.tree.TableElement;\n import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n import io.crate.testing.SQLExecutor;\n import org.junit.Before;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTY4NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388279685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    execute(\"select id, qty from t order by id\");\n          \n          \n            \n                    assertEquals(2, response.rowCount());\n          \n          \n            \n                    assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n          \n          \n            \n                    execute(\"select id, qty from t order by id\");\n          \n          \n            \n                    assertEquals(printedTable(response.rows()),\n          \n          \n            \n                        \"0| NULL\\n\" +\n          \n          \n            \n                        \"1| 1\\n\"\n          \n          \n            \n                    );\n          \n      \n    \n    \n  \n\nThe rowCount == 2 is implied by the printedTable assertion.", "author": "mfussenegger", "createdAt": "2020-03-05T13:04:51Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +330,33 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\nindex 33a3f500f7..b03fe1791b 100644\n--- a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n\n@@ -336,8 +336,9 @@ public class DDLIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n         refresh();\n         execute(\"select id, qty from t order by id\");\n-        assertEquals(2, response.rowCount());\n-        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n+        assertEquals(printedTable(response.rows()),\n+                     \"0| NULL\\n\" +\n+                     \"1| 1\\n\");\n         expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n         execute(\"insert into t(id, qty) values(2, -1)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTg4OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388279888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(1, response.rowCount());", "author": "mfussenegger", "createdAt": "2020-03-05T13:05:16Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +330,33 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n+        expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n+        execute(\"insert into t(id, qty) values(2, -1)\");\n+    }\n+\n+    @Test\n+    public void test_create_table_with_check_fail_on_update() {\n+        execute(\"create table t (id integer primary key, qty integer constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(1, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| 1\\n\");\n+        execute(\"update t set qty = 1 where id = 0 returning id, qty\");\n+        assertEquals(1, response.rowCount());", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\nindex 33a3f500f7..b03fe1791b 100644\n--- a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n\n@@ -336,8 +336,9 @@ public class DDLIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n         refresh();\n         execute(\"select id, qty from t order by id\");\n-        assertEquals(2, response.rowCount());\n-        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n+        assertEquals(printedTable(response.rows()),\n+                     \"0| NULL\\n\" +\n+                     \"1| 1\\n\");\n         expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n         execute(\"insert into t(id, qty) values(2, -1)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTk1NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388279955", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(1, response.rowCount());", "author": "mfussenegger", "createdAt": "2020-03-05T13:05:25Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +330,33 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n+        expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n+        execute(\"insert into t(id, qty) values(2, -1)\");\n+    }\n+\n+    @Test\n+    public void test_create_table_with_check_fail_on_update() {\n+        execute(\"create table t (id integer primary key, qty integer constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(1, response.rowCount());", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "chunk": "diff --git a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\nindex 33a3f500f7..b03fe1791b 100644\n--- a/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java\n\n@@ -336,8 +336,9 @@ public class DDLIntegrationTest extends SQLTransportIntegrationTest {\n         execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n         refresh();\n         execute(\"select id, qty from t order by id\");\n-        assertEquals(2, response.rowCount());\n-        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n+        assertEquals(printedTable(response.rows()),\n+                     \"0| NULL\\n\" +\n+                     \"1| 1\\n\");\n         expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n         execute(\"insert into t(id, qty) values(2, -1)\");\n     }\n"}}, {"oid": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "url": "https://github.com/crate/crate/commit/d76163a49cc44f47d374a2335db54c474f2a1c4b", "message": "Fix up", "committedDate": "2020-03-06T08:46:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODAxNw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778017", "bodyText": "If we add comments like that, they should include a reason why it is left empty intentionally.\nI still think this might be wrong.", "author": "mfussenegger", "createdAt": "2020-03-06T08:50:17Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint(name, columnName, expression, expressionStr);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+        // intentionally left empty", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e366467ebe1003444eaa7affac2602064002f163", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\nindex 8b12b4dfe7..cd065cc6cd 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n\n@@ -87,7 +87,7 @@ public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n \n     @Override\n     public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n-        return new CheckColumnConstraint(name, columnName, expression, expressionStr);\n+        return new CheckColumnConstraint(name, columnName, mapper.apply(expression), expressionStr);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODIzOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778238", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckColumnConstraint(name, columnName, expression, expressionStr);\n          \n          \n            \n                    return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n          \n      \n    \n    \n  \n\nPlease take care of generic warnings. Don't ignore them", "author": "mfussenegger", "createdAt": "2020-03-06T08:50:46Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint(name, columnName, expression, expressionStr);", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDY0MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388784640", "bodyText": "mmm, thank you for that, this might be what is causing the visit to break.", "author": "marregui", "createdAt": "2020-03-06T09:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "e366467ebe1003444eaa7affac2602064002f163", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\nindex 8b12b4dfe7..cd065cc6cd 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n\n@@ -87,7 +87,7 @@ public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n \n     @Override\n     public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n-        return new CheckColumnConstraint(name, columnName, expression, expressionStr);\n+        return new CheckColumnConstraint(name, columnName, mapper.apply(expression), expressionStr);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODQ1OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778458", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckConstraint(name, expression, expressionStr);\n          \n          \n            \n                    return new CheckConstraint<>(name, mapper.apply(expression), expressionStr);", "author": "mfussenegger", "createdAt": "2020-03-06T08:51:10Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, T expression, String expressionStr) {\n+        this.name = name;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint(name, expression, expressionStr);", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e366467ebe1003444eaa7affac2602064002f163", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex 3616839f65..1d8218992d 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -79,7 +79,7 @@ public class CheckConstraint<T> extends TableElement<T> {\n \n     @Override\n     public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n-        return new CheckConstraint(name, expression, expressionStr);\n+        return new CheckConstraint(name, mapper.apply(expression), expressionStr);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODY1NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778655", "bodyText": "Could now also use Lists2.map", "author": "mfussenegger", "createdAt": "2020-03-06T08:51:39Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -54,6 +61,11 @@\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n+        checkConstraints = table\n+            .checkConstraints()\n+            .stream()\n+            .map(chk -> new Tuple<>(ctx.add(chk.expression()), chk))\n+            .collect(Collectors.toList());", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e366467ebe1003444eaa7affac2602064002f163", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\nindex eed1b56fa8..cbb9714d6c 100644\n--- a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n+++ b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n\n@@ -61,11 +60,7 @@ public final class CheckConstraints<T, E extends CollectExpression<T, ?>> {\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n-        checkConstraints = table\n-            .checkConstraints()\n-            .stream()\n-            .map(chk -> new Tuple<>(ctx.add(chk.expression()), chk))\n-            .collect(Collectors.toList());\n+        checkConstraints = Lists2.map(table.checkConstraints(), chk -> new Tuple<>(ctx.add(chk.expression()), chk));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3OTQ1Ng==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388779456", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // most expressions evaluate to null if any operand is null.\n          \n          \n            \n                            // a check expression will evaluate to true in these cases.\n          \n          \n            \n                            // SQL semantics: If a column is omitted from an INSERT/UPDATE statement, CHECK constraints should not fail. Same for writing explicit `null` values.", "author": "mfussenegger", "createdAt": "2020-03-06T08:53:31Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +83,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (value == null) {\n+                // most expressions evaluate to null if any operand is null.\n+                // a check expression will evaluate to true in these cases.", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e366467ebe1003444eaa7affac2602064002f163", "chunk": "diff --git a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\nindex eed1b56fa8..cbb9714d6c 100644\n--- a/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n+++ b/sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java\n\n@@ -88,8 +83,8 @@ public final class CheckConstraints<T, E extends CollectExpression<T, ?>> {\n             Input<?> checkInput = checkEntry.v1();\n             Boolean value = (Boolean) checkInput.value();\n             if (value == null) {\n-                // most expressions evaluate to null if any operand is null.\n-                // a check expression will evaluate to true in these cases.\n+                // SQL semantics: If a column is omitted from an INSERT/UPDATE statement,\n+                // CHECK constraints should not fail. Same for writing explicit `null` values.\n                 continue;\n             }\n             if (!value.booleanValue()) {\n"}}, {"oid": "e366467ebe1003444eaa7affac2602064002f163", "url": "https://github.com/crate/crate/commit/e366467ebe1003444eaa7affac2602064002f163", "message": "Analyze check expressions in the first pass while analyzing the create table statement", "committedDate": "2020-03-09T16:04:48Z", "type": "forcePushed"}, {"oid": "d48f6031616f43ce8a5c55581254d537e6c3e6ca", "url": "https://github.com/crate/crate/commit/d48f6031616f43ce8a5c55581254d537e6c3e6ca", "message": "Check constaints are analysed in the second pass however now I want\n\ncolumn level defined check constraints to be extracted into regular\ntable level check condtraints.", "committedDate": "2020-03-25T14:12:07Z", "type": "forcePushed"}, {"oid": "8cf3ce47813aed733f886dabf84bdf11055a5a8a", "url": "https://github.com/crate/crate/commit/8cf3ce47813aed733f886dabf84bdf11055a5a8a", "message": "Skip analysis of check constraints during 1st phase of CreateTableStatementAnalyzer", "committedDate": "2020-03-26T12:08:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMjYwMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398612600", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private void visitCheckConstraint(String uniqueName, String expressionStr) {\n          \n          \n            \n                    private void visitCheckConstraint(@Nullable String uniqueName, String expressionStr) {", "author": "mfussenegger", "createdAt": "2020-03-26T14:24:02Z", "path": "sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "diffHunk": "@@ -791,6 +793,25 @@ public Void visitPrimaryKeyConstraint(PrimaryKeyConstraint node, Integer indent)\n             return null;\n         }\n \n+        private void visitCheckConstraint(String uniqueName, String expressionStr) {", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84e12345b294f201f78f3a7e50582f3745060808", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java b/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java\nindex 8e965fa2d2..c25fd3b4de 100644\n--- a/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java\n+++ b/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java\n\n@@ -793,7 +793,7 @@ public final class SqlFormatter {\n             return null;\n         }\n \n-        private void visitCheckConstraint(String uniqueName, String expressionStr) {\n+        private void visitCheckConstraint(@Nullable String uniqueName, String expressionStr) {\n             if (uniqueName != null) {\n                 builder.append(\"CONSTRAINT \").append(uniqueName).append(\" \");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMzc4MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398613781", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckColumnConstraint(name, columnName, mapper.apply(expression), expressionStr);\n          \n          \n            \n                    return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n          \n      \n    \n    \n  \n\nPlease don't ignore unchecked warnings.", "author": "mfussenegger", "createdAt": "2020-03-26T14:25:31Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint(name, columnName, mapper.apply(expression), expressionStr);", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84e12345b294f201f78f3a7e50582f3745060808", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\nindex fee0a0eaea..db3f210a4b 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java\n\n@@ -87,7 +87,7 @@ public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n \n     @Override\n     public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n-        return new CheckColumnConstraint(name, columnName, mapper.apply(expression), expressionStr);\n+        return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNDAxOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398614019", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckConstraint(name, columnName, mapper.apply(expression), expressionStr);\n          \n          \n            \n                    return new CheckConstraint<>(name, columnName, mapper.apply(expression), expressionStr);", "author": "mfussenegger", "createdAt": "2020-03-26T14:25:49Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    @Nullable\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, @Nullable String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name) &&\n+               Objects.equal(columnName, that.columnName);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint(name, columnName, mapper.apply(expression), expressionStr);", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84e12345b294f201f78f3a7e50582f3745060808", "chunk": "diff --git a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\nindex a875bd9fe2..6533772050 100644\n--- a/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n+++ b/sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java\n\n@@ -88,7 +88,7 @@ public class CheckConstraint<T> extends TableElement<T> {\n \n     @Override\n     public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n-        return new CheckConstraint(name, columnName, mapper.apply(expression), expressionStr);\n+        return new CheckConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398615627", "bodyText": "Why 1.5 as magic multiplier?", "author": "mfussenegger", "createdAt": "2020-03-26T14:27:47Z", "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -71,11 +77,11 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n         AnalyzedTableElements<Symbol> analyzedTableElements = TableElementsAnalyzer.analyze(\n             analyzedCreateTable.tableElements(), relationName, null);\n \n-        // 2nd phase, analyze possible generatedExpressions and defaultExpressions with a reference resolver\n+        // 2nd phase, analyze generated/default Expressions and check constraints with a reference resolver\n         TableReferenceResolver referenceResolver = analyzedTableElements.referenceResolver(relationName);\n         var exprAnalyzerWithReferences = new ExpressionAnalyzer(\n             functions, txnCtx, paramTypeHints, referenceResolver, null);\n-        List<TableElement<Symbol>> tableElementsWithExpressions = new ArrayList<>(analyzedCreateTable.tableElements().size());\n+        List<TableElement<Symbol>> tableElementsWithExpressions = new ArrayList<>((int)(analyzedCreateTable.tableElements().size() * 1.5));", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMDc5Ng==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398630796", "bodyText": "it is an estimate, a more accurate estimate would be plus (instead of times 1.5) the number of column definitions, because each of those can have a check constraint, so in effect times 2, but I assume most create table statements won't use check constraints.", "author": "marregui", "createdAt": "2020-03-26T14:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0ODM1OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398648358", "bodyText": "I'd remove the sizing altogether in that case. There are already so many allocations happening here that this kind of micro-optimization won't save the day.", "author": "mfussenegger", "createdAt": "2020-03-26T15:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MzEzOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398743139", "bodyText": "removed", "author": "marregui", "createdAt": "2020-03-26T17:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "84e12345b294f201f78f3a7e50582f3745060808", "chunk": "diff --git a/sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java b/sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java\nindex 04782cf457..770e2e21ff 100644\n--- a/sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java\n\n@@ -81,7 +81,7 @@ public final class CreateTableStatementAnalyzer {\n         TableReferenceResolver referenceResolver = analyzedTableElements.referenceResolver(relationName);\n         var exprAnalyzerWithReferences = new ExpressionAnalyzer(\n             functions, txnCtx, paramTypeHints, referenceResolver, null);\n-        List<TableElement<Symbol>> tableElementsWithExpressions = new ArrayList<>((int)(analyzedCreateTable.tableElements().size() * 1.5));\n+        List<TableElement<Symbol>> tableElementsWithExpressions = new ArrayList<>();\n         for (int i = 0; i < analyzedCreateTable.tableElements().size(); i++) {\n             TableElement<Expression> elementExpression = createTable.tableElements().get(i);\n             TableElement<Symbol> elementSymbol = analyzedCreateTable.tableElements().get(i);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTk1OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398669959", "bodyText": "you can probably even use the same rule name '#columnCheckConstraint' in grammar for both cases and implement only one visitor", "author": "kovrus", "createdAt": "2020-03-26T15:35:58Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -784,6 +787,25 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    @Override\n+    public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {", "originalCommit": "620ba399d472b86174b7c05224ce52e69f7c1bb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MzU0OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398743549", "bodyText": "In which case I would get:\nTask :sql-parser:generateGrammarSource FAILED\nerror(123): /Users/marregui/workspace/crate/sql-parser/src/main/antlr/SqlBase.g4:520:86: rule alt label columnCheckConstraint redefined in rule tableElement, originally in rule columnConstraint", "author": "marregui", "createdAt": "2020-03-26T17:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5Nzg2MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398897861", "bodyText": "ah, never mind, also they have different types", "author": "kovrus", "createdAt": "2020-03-26T21:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTk1OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "84e12345b294f201f78f3a7e50582f3745060808", "url": "https://github.com/crate/crate/commit/84e12345b294f201f78f3a7e50582f3745060808", "message": "Remove micro-optimisation that pisses my peers off", "committedDate": "2020-03-26T17:06:57Z", "type": "forcePushed"}, {"oid": "ce3e11e7956aaac7b176d73a3cb57e0bbc170b5c", "url": "https://github.com/crate/crate/commit/ce3e11e7956aaac7b176d73a3cb57e0bbc170b5c", "message": "Add CHECK constraints to tables/columns\n\nAmend this message so that it reads like extended prose defining what\ncheck constraints are and limitations/differences with postgres, if\nthere are any. Well PG won't let you use 'check' as a constraint name,\nwhile we do, thus being a superior product.\n\nAmend this.", "committedDate": "2020-03-26T18:33:28Z", "type": "forcePushed"}, {"oid": "53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "url": "https://github.com/crate/crate/commit/53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "message": "Add CHECK constraint syntax to create table statement\n\nThe CHECK constraint specifies that the value/s of certain column/s\nmust satisfy a boolean expression on insert and update.\n\nSyntax:\n\n  check(boolean_expression)\n  constraint <name> check(boolean_expression)\n\nWith two options:\n\n - As many check constraints as required, as additional elements of\n   a create table statement.\n   When name is omitted, one is generated with pattern fqtn_check_uuid,\n   where:\n\n     fqtb: full qualified table name.\n     check: check.\n     uuid: 6 random hexadecimal digits (2 octets)\n           e.g. doc_my_table_check_bd3f57640937.\n\n - A single check constraint is allowed as part of a column definition.\n   When name is omitted, the pattern is fqtn_column_check_uuid,\n   where:\n\n     column: column name.", "committedDate": "2020-03-26T22:14:28Z", "type": "commit"}, {"oid": "953a0b78dd64e3995e00b4f1c12d79c1ca6b610e", "url": "https://github.com/crate/crate/commit/953a0b78dd64e3995e00b4f1c12d79c1ca6b610e", "message": "Draft documentation and changes", "committedDate": "2020-03-26T22:18:07Z", "type": "forcePushed"}, {"oid": "53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "url": "https://github.com/crate/crate/commit/53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "message": "Add CHECK constraint syntax to create table statement\n\nThe CHECK constraint specifies that the value/s of certain column/s\nmust satisfy a boolean expression on insert and update.\n\nSyntax:\n\n  check(boolean_expression)\n  constraint <name> check(boolean_expression)\n\nWith two options:\n\n - As many check constraints as required, as additional elements of\n   a create table statement.\n   When name is omitted, one is generated with pattern fqtn_check_uuid,\n   where:\n\n     fqtb: full qualified table name.\n     check: check.\n     uuid: 6 random hexadecimal digits (2 octets)\n           e.g. doc_my_table_check_bd3f57640937.\n\n - A single check constraint is allowed as part of a column definition.\n   When name is omitted, the pattern is fqtn_column_check_uuid,\n   where:\n\n     column: column name.", "committedDate": "2020-03-26T22:14:28Z", "type": "forcePushed"}]}