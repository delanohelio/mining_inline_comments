{"pr_number": 840, "pr_title": "Support ES 7.10.0", "pr_createdAt": "2020-11-16T18:15:46Z", "pr_url": "https://github.com/opensearch-project/security/pull/840", "timeline": [{"oid": "79c228b030588ec6d2789c7662771586ddbc65e4", "url": "https://github.com/opensearch-project/security/commit/79c228b030588ec6d2789c7662771586ddbc65e4", "message": "Support ES 7.10.0", "committedDate": "2020-11-16T18:13:57Z", "type": "commit"}, {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1", "url": "https://github.com/opensearch-project/security/commit/da7c7b981538d776433cf8651d4d2ed930822fc1", "message": "Fix masked aggregations", "committedDate": "2020-11-24T07:43:56Z", "type": "commit"}, {"oid": "da7c7b981538d776433cf8651d4d2ed930822fc1", "url": "https://github.com/opensearch-project/security/commit/da7c7b981538d776433cf8651d4d2ed930822fc1", "message": "Fix masked aggregations", "committedDate": "2020-11-24T07:43:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MjM1OA==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530042358", "bodyText": "nit: Would \"bInterClusterRequest\" be a better name given that it's being used in the conditions of IF statements and that \"isInterClusterRequest\" has been occupied by the method name?", "author": "cliu123", "createdAt": "2020-11-25T01:05:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());", "originalCommit": "da7c7b981538d776433cf8651d4d2ed930822fc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0OTMzNg==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530049336", "bodyText": "while I agree that isInterClusterRequest would be a better name, it is better to keep the original name as the PR does not change how inter cluster request are processed.", "author": "vrozov", "createdAt": "2020-11-25T01:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MjM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "a28c6fd46701474c1dc51992c59517e5960bebf0", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\nindex ba9d1430..ddb3ae80 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n\n@@ -577,20 +578,22 @@ public final class OpenDistroSecurityPlugin extends OpenDistroSecuritySSLPlugin\n \n                 @Override\n                 public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n-                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                    if (_user != null && (_user instanceof User)) {\n-                        final User scrollUser = (User) _user;\n-                        final User currentUser = threadPool.getThreadContext()\n-                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                        if (!scrollUser.equals(currentUser)) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n+                            final User scrollUser = (User) _user;\n+                            final User currentUser = threadPool.getThreadContext()\n+                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);\n+                            }\n+                        } else if (_isLocal != Boolean.TRUE) {\n                             auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n-                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n+                            throw new ElasticsearchSecurityException(\"No user in reader context\", RestStatus.FORBIDDEN);\n                         }\n-                    } else if (_isLocal != Boolean.TRUE) {\n-                        auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n-                        throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n                     }\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAzOTQ1Mg==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530039452", "bodyText": "minor: Wrong user in reader context.", "author": "debjanibnrj", "createdAt": "2020-11-25T00:55:39Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n-                            final User scrollUser = (User) _user;\n-                            final User currentUser = threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n-                            }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                    if (_user != null && (_user instanceof User)) {\n+                        final User scrollUser = (User) _user;\n+                        final User currentUser = threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                        if (!scrollUser.equals(currentUser)) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n+                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);", "originalCommit": "da7c7b981538d776433cf8651d4d2ed930822fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a28c6fd46701474c1dc51992c59517e5960bebf0", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\nindex ba9d1430..ddb3ae80 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n\n@@ -577,20 +578,22 @@ public final class OpenDistroSecurityPlugin extends OpenDistroSecuritySSLPlugin\n \n                 @Override\n                 public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n-                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                    if (_user != null && (_user instanceof User)) {\n-                        final User scrollUser = (User) _user;\n-                        final User currentUser = threadPool.getThreadContext()\n-                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                        if (!scrollUser.equals(currentUser)) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n+                            final User scrollUser = (User) _user;\n+                            final User currentUser = threadPool.getThreadContext()\n+                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);\n+                            }\n+                        } else if (_isLocal != Boolean.TRUE) {\n                             auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n-                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n+                            throw new ElasticsearchSecurityException(\"No user in reader context\", RestStatus.FORBIDDEN);\n                         }\n-                    } else if (_isLocal != Boolean.TRUE) {\n-                        auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n-                        throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n                     }\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MzM0MA==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530043340", "bodyText": "Curious what is going on here, can you possibly elaborate why we are aggregated query results here?", "author": "debjanibnrj", "createdAt": "2020-11-25T01:08:54Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java", "diffHunk": "@@ -140,4 +157,136 @@ public void handleSearchContext(SearchContext context, ThreadPool threadPool, Na\n \n     }\n \n+    @Override\n+    public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+        QuerySearchResult queryResult = searchContext.queryResult();\n+        if (queryResult == null) {\n+            return;\n+        }\n+\n+        DelayableWriteable<InternalAggregations> aggregationsDelayedWritable = queryResult.aggregations();\n+        if (aggregationsDelayedWritable == null) {\n+            return;\n+        }\n+\n+        InternalAggregations aggregations = aggregationsDelayedWritable.expand();\n+        if (aggregations == null) {\n+            return;\n+        }\n+\n+        if (areBucketKeysDistinct(aggregations)) {\n+            return;\n+        }\n+\n+        log.debug(\"Found buckets with equal keys. Merging these buckets: {}\", aggregations);\n+\n+        // TODO check order\n+\n+        queryResult.aggregations(InternalAggregations.from(StreamSupport.stream(aggregations.spliterator(), false)", "originalCommit": "da7c7b981538d776433cf8651d4d2ed930822fc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA1MDg5OQ==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530050899", "bodyText": "Starting with 7.10 ES assumes that buckets are strongly ordered by keys. Applying mask breaks strong ordering as some keys become the same. It is necessary to aggregate buckets with the same keys.", "author": "vrozov", "createdAt": "2020-11-25T01:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MzM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java\nindex 8c6f96ba..c0c84650 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/DlsFlsValveImpl.java\n\n@@ -158,79 +158,43 @@ public class DlsFlsValveImpl implements DlsFlsRequestValve {\n     }\n \n     @Override\n-    public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+    public void onQueryPhase(SearchContext searchContext) {\n         QuerySearchResult queryResult = searchContext.queryResult();\n-        if (queryResult == null) {\n+        assert queryResult != null;\n+        if (!queryResult.hasAggs()) {\n             return;\n         }\n \n-        DelayableWriteable<InternalAggregations> aggregationsDelayedWritable = queryResult.aggregations();\n-        if (aggregationsDelayedWritable == null) {\n-            return;\n-        }\n-\n-        InternalAggregations aggregations = aggregationsDelayedWritable.expand();\n-        if (aggregations == null) {\n-            return;\n-        }\n-\n-        if (areBucketKeysDistinct(aggregations)) {\n-            return;\n-        }\n-\n-        log.debug(\"Found buckets with equal keys. Merging these buckets: {}\", aggregations);\n-\n-        // TODO check order\n-\n-        queryResult.aggregations(InternalAggregations.from(StreamSupport.stream(aggregations.spliterator(), false)\n-            .map(aggregation -> aggregateBuckets((InternalAggregation)aggregation))\n-            .collect(ImmutableList.toImmutableList())));\n-\n-    }\n-\n-    private static boolean areBucketKeysDistinct(InternalAggregations aggregations) {\n-        return !StreamSupport.stream(aggregations.spliterator(), false)\n-                .filter(aggregation -> (aggregation instanceof StringTerms))\n-                .map(aggregation -> ((StringTerms) aggregation).getBuckets())\n-                .anyMatch(buckets -> !areBucketKeysDistinct(buckets));\n-    }\n+        InternalAggregations aggregations = queryResult.aggregations().expand();\n+        assert aggregations != null;\n \n-    private static boolean areBucketKeysDistinct(List<StringTerms.Bucket> buckets) {\n-        int size = buckets.size();\n-        if (size > 1) {\n-            return !buckets.stream()\n-                    .anyMatch(new Predicate<StringTerms.Bucket>() {\n-                        private StringTerms.Bucket bucket = null;\n-                        @Override\n-                        public boolean test(StringTerms.Bucket bucket) {\n-                            boolean equals = (this.bucket != null) && (this.bucket.compareKey(bucket) == 0);\n-                            this.bucket = bucket;\n-                            return equals;\n-                        }\n-                    });\n-        }\n-        return true;\n+        queryResult.aggregations(\n+                InternalAggregations.from(\n+                        StreamSupport.stream(aggregations.spliterator(), false)\n+                            .map(aggregation -> aggregateBuckets((InternalAggregation)aggregation))\n+                            .collect(ImmutableList.toImmutableList())\n+                )\n+        );\n     }\n \n     private static InternalAggregation aggregateBuckets(InternalAggregation aggregation) {\n-        if (!StringTerms.class.isInstance(aggregation)) {\n-            return aggregation;\n-        }\n-        StringTerms stringTerms = (StringTerms) aggregation;\n-        final List<StringTerms.Bucket> buckets = stringTerms.getBuckets();\n-        if (areBucketKeysDistinct(buckets)) {\n-            return stringTerms;\n+        if (aggregation instanceof StringTerms) {\n+            StringTerms stringTerms = (StringTerms) aggregation;\n+            List<StringTerms.Bucket> buckets = stringTerms.getBuckets();\n+            if (buckets.size() > 1) {\n+                buckets = mergeBuckets(buckets, StringTermsGetter.getReduceOrder(stringTerms).comparator());\n+                aggregation = stringTerms.create(buckets);\n+            }\n         }\n-        List<StringTerms.Bucket> mergeBuckets = mergeBuckets(buckets);\n-        return stringTerms.create(mergeBuckets);\n+        return aggregation;\n     }\n \n-    private static List<StringTerms.Bucket> mergeBuckets(List<StringTerms.Bucket> buckets) {\n+    private static List<StringTerms.Bucket> mergeBuckets(List<StringTerms.Bucket> buckets, Comparator<Bucket> comparator) {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Merging buckets: {}\", buckets.stream().map(b -> b.getKeyAsString()).collect(ImmutableList.toImmutableList()));\n         }\n-\n-        BucketMerger merger = new BucketMerger(buckets.size());\n+        buckets.sort(comparator);\n+        BucketMerger merger = new BucketMerger(comparator, buckets.size());\n         buckets.stream().forEach(merger);\n         buckets = merger.getBuckets();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0NjYxMg==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530046612", "bodyText": "No user in reader context.", "author": "cliu123", "createdAt": "2020-11-25T01:19:17Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,56 +541,63 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n-                            final User scrollUser = (User) _user;\n-                            final User currentUser = threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n-                            }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                    if (_user != null && (_user instanceof User)) {\n+                        final User scrollUser = (User) _user;\n+                        final User currentUser = threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                        if (!scrollUser.equals(currentUser)) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n+                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n                         }\n+                    } else if (_isLocal != Boolean.TRUE) {\n+                        auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                        throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);", "originalCommit": "da7c7b981538d776433cf8651d4d2ed930822fc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a28c6fd46701474c1dc51992c59517e5960bebf0", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\nindex ba9d1430..ddb3ae80 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n\n@@ -577,20 +578,22 @@ public final class OpenDistroSecurityPlugin extends OpenDistroSecuritySSLPlugin\n \n                 @Override\n                 public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n-                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                    if (_user != null && (_user instanceof User)) {\n-                        final User scrollUser = (User) _user;\n-                        final User currentUser = threadPool.getThreadContext()\n-                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                        if (!scrollUser.equals(currentUser)) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n+                            final User scrollUser = (User) _user;\n+                            final User currentUser = threadPool.getThreadContext()\n+                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);\n+                            }\n+                        } else if (_isLocal != Boolean.TRUE) {\n                             auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n-                            log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                            throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n+                            throw new ElasticsearchSecurityException(\"No user in reader context\", RestStatus.FORBIDDEN);\n                         }\n-                    } else if (_isLocal != Boolean.TRUE) {\n-                        auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n-                        throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n                     }\n                 }\n \n"}}, {"oid": "a28c6fd46701474c1dc51992c59517e5960bebf0", "url": "https://github.com/opensearch-project/security/commit/a28c6fd46701474c1dc51992c59517e5960bebf0", "message": "Code review", "committedDate": "2020-11-25T05:45:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NjUzNg==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530656536", "bodyText": "should it be scroll context or reader context?", "author": "hardik-k-shah", "createdAt": "2020-11-25T21:42:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -577,20 +578,22 @@ public void onNewScrollContext(ReaderContext readerContext) {\n \n                 @Override\n                 public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n-                    final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                    final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                    if (_user != null && (_user instanceof User)) {\n-                        final User scrollUser = (User) _user;\n-                        final User currentUser = threadPool.getThreadContext()\n-                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                        if (!scrollUser.equals(currentUser)) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n+                            final User scrollUser = (User) _user;\n+                            final User currentUser = threadPool.getThreadContext()\n+                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);", "originalCommit": "a28c6fd46701474c1dc51992c59517e5960bebf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NjM1MQ==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r530666351", "bodyText": "We expect ReaderContext (former SearchContext) to be populated. The check is done only for scroll (InternalScrollSearchRequest).", "author": "vrozov", "createdAt": "2020-11-25T22:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NjUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\nindex ddb3ae80..bc2f8632 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n\n@@ -599,7 +599,15 @@ public final class OpenDistroSecurityPlugin extends OpenDistroSecuritySSLPlugin\n \n                 @Override\n                 public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n-                    dlsFlsValve.onQueryPhase(searchContext, tookInNanos);\n+                    final Map<String, Set<String>> maskedFieldsMap = (Map<String, Set<String>>) HeaderHelper.deserializeSafeFromHeader(threadPool.getThreadContext(),\n+                            ConfigConstants.OPENDISTRO_SECURITY_MASKED_FIELD_HEADER);\n+                    final String maskedEval = OpenDistroSecurityUtils.evalMap(maskedFieldsMap, indexModule.getIndex().getName());\n+                    if (maskedEval != null) {\n+                        final Set<String> mf = maskedFieldsMap.get(maskedEval);\n+                        if (mf != null && !mf.isEmpty()) {\n+                            dlsFlsValve.onQueryPhase(searchContext);\n+                        }\n+                    }\n                 }\n             });\n         }\n"}}, {"oid": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3", "url": "https://github.com/opensearch-project/security/commit/b7c9fc31ae17e30f4a33a4f934dbd365af6945d3", "message": "Fix aggregation ordered by a masked key", "committedDate": "2020-11-28T05:31:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2OTA2NQ==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r532569065", "bodyText": "Note: This is relatively hot code, it will be called for each query on each shard. The complexity of evalMap grows with the complexity of configurations. For complex configurations, evalMap might thus add some overhead to each query. Thus, it might be a good idea to have some load tests for these changes.", "author": "nibix", "createdAt": "2020-11-30T12:43:33Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java", "diffHunk": "@@ -541,53 +542,70 @@ public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n             indexModule.addSearchOperationListener(new SearchOperationListener() {\n \n                 @Override\n-                public void onNewContext(SearchContext context) {\n-\n+                public void onPreQueryPhase(SearchContext context) {\n                     if(advancedModulesEnabled) {\n                         dlsFlsValve.handleSearchContext(context, threadPool, namedXContentRegistry);\n                     }\n                 }\n \n                 @Override\n-                public void onNewScrollContext(SearchContext context) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n+                public void onNewReaderContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                    if(scrollContext != null) {\n-\n-                        final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n-                        if(Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n-                                && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n+                    }\n+                }\n \n-                        ){\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                @Override\n+                public void onNewScrollContext(ReaderContext readerContext) {\n+                    final boolean interClusterRequest = HeaderHelper.isInterClusterRequest(threadPool.getThreadContext());\n+                    if (Origin.LOCAL.toString().equals(threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN))\n+                            && (interClusterRequest || HeaderHelper.isDirectRequest(threadPool.getThreadContext()))\n \n-                        } else {\n-                            scrollContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n-                                    .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n-                        }\n+                    ) {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth_local\", Boolean.TRUE);\n+                    } else {\n+                        readerContext.putInContext(\"_opendistro_security_scroll_auth\", threadPool.getThreadContext()\n+                                .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER));\n                     }\n                 }\n \n                 @Override\n-                public void validateSearchContext(SearchContext context, TransportRequest transportRequest) {\n-\n-                    final ScrollContext scrollContext = context.scrollContext();\n-                    if(scrollContext != null) {\n-                        final Object _isLocal = scrollContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n-                        final Object _user = scrollContext.getFromContext(\"_opendistro_security_scroll_auth\");\n-                        if(_user != null && (_user instanceof User)) {\n+                public void validateReaderContext(ReaderContext readerContext, TransportRequest transportRequest) {\n+                    if (transportRequest instanceof InternalScrollSearchRequest) {\n+                        final Object _isLocal = readerContext.getFromContext(\"_opendistro_security_scroll_auth_local\");\n+                        final Object _user = readerContext.getFromContext(\"_opendistro_security_scroll_auth\");\n+                        if (_user != null && (_user instanceof User)) {\n                             final User scrollUser = (User) _user;\n                             final User currentUser = threadPool.getThreadContext()\n                                     .getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n-                            if(!scrollUser.equals(currentUser)) {\n-                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                                log.error(\"Wrong user {} in scroll context, expected {}\", scrollUser, currentUser);\n-                                throw new ElasticsearchSecurityException(\"Wrong user in scroll context\", RestStatus.FORBIDDEN);\n+                            if (!scrollUser.equals(currentUser)) {\n+                                auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                                log.error(\"Wrong user {} in reader context, expected {}\", scrollUser, currentUser);\n+                                throw new ElasticsearchSecurityException(\"Wrong user in reader context\", RestStatus.FORBIDDEN);\n                             }\n-                        } else if(_isLocal != Boolean.TRUE) {\n-                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, context.getTask());\n-                            throw new ElasticsearchSecurityException(\"No user in scroll context\", RestStatus.FORBIDDEN);\n+                        } else if (_isLocal != Boolean.TRUE) {\n+                            auditLog.logMissingPrivileges(SearchScrollAction.NAME, transportRequest, null);\n+                            throw new ElasticsearchSecurityException(\"No user in reader context\", RestStatus.FORBIDDEN);\n+                        }\n+                    }\n+                }\n+\n+                @Override\n+                public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+                    final Map<String, Set<String>> maskedFieldsMap = (Map<String, Set<String>>) HeaderHelper.deserializeSafeFromHeader(threadPool.getThreadContext(),\n+                            ConfigConstants.OPENDISTRO_SECURITY_MASKED_FIELD_HEADER);\n+                    final String maskedEval = OpenDistroSecurityUtils.evalMap(maskedFieldsMap, indexModule.getIndex().getName());", "originalCommit": "b7c9fc31ae17e30f4a33a4f934dbd365af6945d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTEwNQ==", "url": "https://github.com/opensearch-project/security/pull/840#discussion_r532775105", "bodyText": "It is now evaluated only for term (aggregation) queries.", "author": "vrozov", "createdAt": "2020-11-30T17:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2OTA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "10d47c09844a40e550e4746f18c85100876d3215", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\nindex bc2f8632..775108ba 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/OpenDistroSecurityPlugin.java\n\n@@ -599,13 +600,19 @@ public final class OpenDistroSecurityPlugin extends OpenDistroSecuritySSLPlugin\n \n                 @Override\n                 public void onQueryPhase(SearchContext searchContext, long tookInNanos) {\n+                    QuerySearchResult queryResult = searchContext.queryResult();\n+                    assert queryResult != null;\n+                    if (!queryResult.hasAggs()) {\n+                        return;\n+                    }\n+\n                     final Map<String, Set<String>> maskedFieldsMap = (Map<String, Set<String>>) HeaderHelper.deserializeSafeFromHeader(threadPool.getThreadContext(),\n                             ConfigConstants.OPENDISTRO_SECURITY_MASKED_FIELD_HEADER);\n                     final String maskedEval = OpenDistroSecurityUtils.evalMap(maskedFieldsMap, indexModule.getIndex().getName());\n                     if (maskedEval != null) {\n                         final Set<String> mf = maskedFieldsMap.get(maskedEval);\n                         if (mf != null && !mf.isEmpty()) {\n-                            dlsFlsValve.onQueryPhase(searchContext);\n+                            dlsFlsValve.onQueryPhase(queryResult);\n                         }\n                     }\n                 }\n"}}, {"oid": "10d47c09844a40e550e4746f18c85100876d3215", "url": "https://github.com/opensearch-project/security/commit/10d47c09844a40e550e4746f18c85100876d3215", "message": "Evaluate maskedFieldsMap only for term queries", "committedDate": "2020-11-30T17:16:53Z", "type": "commit"}]}