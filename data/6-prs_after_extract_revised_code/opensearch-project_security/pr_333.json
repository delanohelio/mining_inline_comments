{"pr_number": 333, "pr_title": "Fix updating password hash without replacing the entry", "pr_createdAt": "2020-03-30T04:03:39Z", "pr_url": "https://github.com/opensearch-project/security/pull/333", "timeline": [{"oid": "50d6e4b2c4c4ff090f91e8948c06ca1b3c4fff29", "url": "https://github.com/opensearch-project/security/commit/50d6e4b2c4c4ff090f91e8948c06ca1b3c4fff29", "message": "Fix updating password hash without replacing the entry", "committedDate": "2020-03-30T04:00:55Z", "type": "commit"}, {"oid": "fd44054ee71acd3356b0c934c46e5fe1608e9113", "url": "https://github.com/opensearch-project/security/commit/fd44054ee71acd3356b0c934c46e5fe1608e9113", "message": "Change test password", "committedDate": "2020-03-30T05:02:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk5Ng==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400367996", "bodyText": "Should this be part of CredentialsValidator?", "author": "vrozov", "createdAt": "2020-03-30T17:30:04Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java", "diffHunk": "@@ -27,5 +27,7 @@ public AccountValidator(RestRequest request, BytesReference ref, Settings esSett\n         super(request, ref, esSettings, param);\n         allowedKeys.put(\"current_password\", DataType.STRING);\n         mandatoryKeys.add(\"current_password\");\n+        mandatoryOrKeys.add(\"hash\");", "originalCommit": "fd44054ee71acd3356b0c934c46e5fe1608e9113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODQwNg==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400408406", "bodyText": "I did consider this. Looks like InternalUsersValidator also inherits from the same and for that it is optional as some of the internal user apis are designed that way. Putting it there would make it mandatory for internal user apis.\nHence I put it in AccountValidator", "author": "sujithvm", "createdAt": "2020-03-30T18:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ0MjY0NA==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400442644", "bodyText": "I would prefer to remove the check especially that it is present in AccountApiAction with probably a better error message if the validation does not pass.", "author": "vrozov", "createdAt": "2020-03-30T19:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3ODYzNA==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400478634", "bodyText": "This seems to consistent with the other APIs. If the mandatory keys are absent, then it throws a bad request with invalid configuration error.", "author": "sujithvm", "createdAt": "2020-03-30T20:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5Mjg2OA==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400492868", "bodyText": "Why is it necessary to validate it twice? If you want to rely on AccountValidator, remove the check from AccountApiAction (line 217). I'd prefer the check to be done in AccountApiAction.", "author": "vrozov", "createdAt": "2020-03-30T21:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5NDYxMw==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400494613", "bodyText": "If you pass\n{\n\"password\": \"\",\n\"hash\": \"\"\n}\nthen the validator check wont fail as the params exist.\nBut it fails in the account api action because they are empty/null\nIf you pass {} then validator check fails  as one of them is mandatory", "author": "sujithvm", "createdAt": "2020-03-30T21:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxOTA2MA==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400519060", "bodyText": "OK, so AccountValidator can't even invalidate all cases.", "author": "vrozov", "createdAt": "2020-03-30T21:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c4d71d0e8daa29914ea993876670cd4d569b8089", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java\nindex 38e875fe..9c891c6c 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java\n\n@@ -27,7 +27,5 @@ public class AccountValidator extends CredentialsValidator {\n         super(request, ref, esSettings, param);\n         allowedKeys.put(\"current_password\", DataType.STRING);\n         mandatoryKeys.add(\"current_password\");\n-        mandatoryOrKeys.add(\"hash\");\n-        mandatoryOrKeys.add(\"password\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4Nzk5Mg==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400387992", "bodyText": "rename hash to currentHash to be consistent with currentPassword", "author": "vrozov", "createdAt": "2020-03-30T18:01:38Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java", "diffHunk": "@@ -197,32 +198,27 @@ protected void handlePut(RestChannel channel, final RestRequest request, final C\n \n         final SecurityJsonNode securityJsonNode = new SecurityJsonNode(content);\n         final String currentPassword = content.get(\"current_password\").asText();\n-        final String hash = ((Hashed) internalUser.getCEntry(username)).getHash();\n+        final Hashed internalUserEntry = (Hashed) internalUser.getCEntry(username);\n+        final String hash = internalUserEntry.getHash();", "originalCommit": "fd44054ee71acd3356b0c934c46e5fe1608e9113", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f35e1c3854004e030c133d8cc30ed898893483", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java\nindex a5eb6472..3ece38cd 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java\n\n@@ -199,26 +199,27 @@ public class AccountApiAction extends AbstractApiAction {\n         final SecurityJsonNode securityJsonNode = new SecurityJsonNode(content);\n         final String currentPassword = content.get(\"current_password\").asText();\n         final Hashed internalUserEntry = (Hashed) internalUser.getCEntry(username);\n-        final String hash = internalUserEntry.getHash();\n+        final String currentHash = internalUserEntry.getHash();\n \n-        if (hash == null || !OpenBSDBCrypt.checkPassword(hash, currentPassword.toCharArray())) {\n+        if (currentHash == null || !OpenBSDBCrypt.checkPassword(currentHash, currentPassword.toCharArray())) {\n             badRequestResponse(channel, \"Could not validate your current password.\");\n             return;\n         }\n \n         // if password is set, it takes precedence over hash\n-        final String providedPassword = securityJsonNode.get(\"password\").asString();\n-        final String providedHash = securityJsonNode.get(\"hash\").asString();\n-        if (Strings.isNullOrEmpty(providedPassword) && Strings.isNullOrEmpty(providedHash)) {\n+        final String password = securityJsonNode.get(\"password\").asString();\n+        final String hash;\n+        if (Strings.isNullOrEmpty(password)) {\n+            hash = securityJsonNode.get(\"hash\").asString();\n+        } else {\n+            hash = hash(password.toCharArray());\n+        }\n+        if (Strings.isNullOrEmpty(hash)) {\n             badRequestResponse(channel, \"Both provided password and hash cannot be null/empty.\");\n             return;\n         }\n \n-        final String newHash = Strings.isNullOrEmpty(providedPassword)\n-                ? providedHash\n-                : hash(providedPassword.toCharArray());\n-\n-        internalUserEntry.setHash(newHash);\n+        internalUserEntry.setHash(hash);\n \n         saveAnUpdateConfigs(client, request, CType.INTERNALUSERS, internalUser, new OnSucessActionListener<IndexResponse>(channel) {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4OTAxMg==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400389012", "bodyText": "// if password is set, it takes precedence over hash\n        final String password = securityJsonNode.get(\"password\").asString();\n        final String hash;\n        if (Strings.isNullOrEmpty(password)) {\n            hash = securityJsonNode.get(\"hash\").asString();\n        } else {\n            hash = hash(password.toCharArray());\n        }\n        if (Strings.isNullOrEmpty(hash)) {\n            badRequestResponse(channel, \"Both provided password and hash cannot be null/empty.\");\n            return;\n        }\n\n        internalUserEntry.setHash(hash);", "author": "vrozov", "createdAt": "2020-03-30T18:03:20Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java", "diffHunk": "@@ -197,32 +198,27 @@ protected void handlePut(RestChannel channel, final RestRequest request, final C\n \n         final SecurityJsonNode securityJsonNode = new SecurityJsonNode(content);\n         final String currentPassword = content.get(\"current_password\").asText();\n-        final String hash = ((Hashed) internalUser.getCEntry(username)).getHash();\n+        final Hashed internalUserEntry = (Hashed) internalUser.getCEntry(username);\n+        final String hash = internalUserEntry.getHash();\n \n         if (hash == null || !OpenBSDBCrypt.checkPassword(hash, currentPassword.toCharArray())) {\n             badRequestResponse(channel, \"Could not validate your current password.\");\n             return;\n         }\n \n-        ObjectNode contentAsNode = (ObjectNode) content;\n-        contentAsNode.remove(\"current_password\");\n-\n         // if password is set, it takes precedence over hash\n-        final String plainTextPassword = securityJsonNode.get(\"password\").asString();\n-        final String origHash = securityJsonNode.get(\"hash\").asString();\n-        if (plainTextPassword != null && plainTextPassword.length() > 0) {\n-            contentAsNode.remove(\"password\");\n-            contentAsNode.put(\"hash\", hash(plainTextPassword.toCharArray()));\n-        } else if (origHash != null && origHash.length() > 0) {\n-            contentAsNode.remove(\"password\");\n-        } else if (plainTextPassword != null && plainTextPassword.isEmpty() && origHash == null) {\n-            contentAsNode.remove(\"password\");\n+        final String providedPassword = securityJsonNode.get(\"password\").asString();", "originalCommit": "fd44054ee71acd3356b0c934c46e5fe1608e9113", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f35e1c3854004e030c133d8cc30ed898893483", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java\nindex a5eb6472..3ece38cd 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiAction.java\n\n@@ -199,26 +199,27 @@ public class AccountApiAction extends AbstractApiAction {\n         final SecurityJsonNode securityJsonNode = new SecurityJsonNode(content);\n         final String currentPassword = content.get(\"current_password\").asText();\n         final Hashed internalUserEntry = (Hashed) internalUser.getCEntry(username);\n-        final String hash = internalUserEntry.getHash();\n+        final String currentHash = internalUserEntry.getHash();\n \n-        if (hash == null || !OpenBSDBCrypt.checkPassword(hash, currentPassword.toCharArray())) {\n+        if (currentHash == null || !OpenBSDBCrypt.checkPassword(currentHash, currentPassword.toCharArray())) {\n             badRequestResponse(channel, \"Could not validate your current password.\");\n             return;\n         }\n \n         // if password is set, it takes precedence over hash\n-        final String providedPassword = securityJsonNode.get(\"password\").asString();\n-        final String providedHash = securityJsonNode.get(\"hash\").asString();\n-        if (Strings.isNullOrEmpty(providedPassword) && Strings.isNullOrEmpty(providedHash)) {\n+        final String password = securityJsonNode.get(\"password\").asString();\n+        final String hash;\n+        if (Strings.isNullOrEmpty(password)) {\n+            hash = securityJsonNode.get(\"hash\").asString();\n+        } else {\n+            hash = hash(password.toCharArray());\n+        }\n+        if (Strings.isNullOrEmpty(hash)) {\n             badRequestResponse(channel, \"Both provided password and hash cannot be null/empty.\");\n             return;\n         }\n \n-        final String newHash = Strings.isNullOrEmpty(providedPassword)\n-                ? providedHash\n-                : hash(providedPassword.toCharArray());\n-\n-        internalUserEntry.setHash(newHash);\n+        internalUserEntry.setHash(hash);\n \n         saveAnUpdateConfigs(client, request, CType.INTERNALUSERS, internalUser, new OnSucessActionListener<IndexResponse>(channel) {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5MDYzMQ==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400390631", "bodyText": "test with empty hash?", "author": "vrozov", "createdAt": "2020-03-30T18:06:03Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiTest.java", "diffHunk": "@@ -94,6 +96,16 @@ public void testPutAccount() throws Exception {\n         response = rh.executePutRequest(ENDPOINT, payload, encodeBasicHeader(testUser, testPass));\n         assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n \n+        // test - bad request as hash/password is missing\n+        payload = \"{\\\"current_password\\\":\\\"\" + testPass + \"\\\"}\";\n+        response = rh.executePutRequest(ENDPOINT, payload, encodeBasicHeader(testUser, testPass));\n+        assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+\n+        // test - bad request as hash/password is empty", "originalCommit": "fd44054ee71acd3356b0c934c46e5fe1608e9113", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f35e1c3854004e030c133d8cc30ed898893483", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiTest.java\nindex 29a1667b..6c5c60be 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AccountApiTest.java\n\n@@ -101,11 +101,21 @@ public class AccountApiTest extends AbstractRestApiUnitTest {\n         response = rh.executePutRequest(ENDPOINT, payload, encodeBasicHeader(testUser, testPass));\n         assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n \n-        // test - bad request as hash/password is empty\n+        // test - bad request as password is empty\n         payload = \"{\\\"password\\\":\\\"\" + \"\" + \"\\\", \\\"current_password\\\":\\\"\" + testPass + \"\\\"}\";\n         response = rh.executePutRequest(ENDPOINT, payload, encodeBasicHeader(testUser, testPass));\n         assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n \n+        // test - bad request as hash is empty\n+        payload = \"{\\\"hash\\\":\\\"\" + \"\" + \"\\\", \\\"current_password\\\":\\\"\" + testPass + \"\\\"}\";\n+        response = rh.executePutRequest(ENDPOINT, payload, encodeBasicHeader(testUser, testPass));\n+        assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+\n+        // test - bad request as hash and password are empty\n+        payload = \"{\\\"hash\\\": \\\"\\\", \\\"password\\\": \\\"\\\", \\\"current_password\\\":\\\"\" + testPass + \"\\\"}\";\n+        response = rh.executePutRequest(ENDPOINT, payload, encodeBasicHeader(testUser, testPass));\n+        assertEquals(HttpStatus.SC_BAD_REQUEST, response.getStatusCode());\n+\n         // test - bad request as invalid parameters are present\n         payload = \"{\\\"password\\\":\\\"new-pass\\\", \\\"current_password\\\":\\\"\" + testPass + \"\\\", \\\"backend_roles\\\": []}\";\n         response = rh.executePutRequest(ENDPOINT, payload, encodeBasicHeader(testUser, testPass));\n"}}, {"oid": "e5f35e1c3854004e030c133d8cc30ed898893483", "url": "https://github.com/opensearch-project/security/commit/e5f35e1c3854004e030c133d8cc30ed898893483", "message": "Address code reviews", "committedDate": "2020-03-30T18:26:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400592126", "bodyText": "Does this mean user always need to pass key \"hash\": \"\" even if user just want to pass string password or vice-versa ?", "author": "hardik-k-shah", "createdAt": "2020-03-31T01:36:21Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java", "diffHunk": "@@ -27,5 +27,7 @@ public AccountValidator(RestRequest request, BytesReference ref, Settings esSett\n         super(request, ref, esSettings, param);\n         allowedKeys.put(\"current_password\", DataType.STRING);\n         mandatoryKeys.add(\"current_password\");\n+        mandatoryOrKeys.add(\"hash\");", "originalCommit": "e5f35e1c3854004e030c133d8cc30ed898893483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NTYzNA==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400595634", "bodyText": "No, only hash or password (or any other key present in mandatoryOrKeys). I think that the value of mandatoryOrKey is minimal as a parent or a child class can add another value to mandatoryOrKeys and the validation won't work anymore. I'd suggest to remove it.", "author": "vrozov", "createdAt": "2020-03-31T01:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxOTQ5Mg==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400619492", "bodyText": "That is correct. One of the mandatory keys must be provided (hash or password) and other can be absent. Other APIs like role_mapping do the same.\nI agree that it is not very flexible but works for this use-case.\nI can remove it but code might fail at a much later stage only while comparing for hash and password.", "author": "sujithvm", "createdAt": "2020-03-31T03:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMDk0Ng==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400630946", "bodyText": "I suggest to remove the code and deprecate mandatoryOrKeys. It is easy to misuse and break validation accidentally. As there is already code that checks that either \"password\" or \"hash\" is present, this code is not necessary.", "author": "vrozov", "createdAt": "2020-03-31T04:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4NTc0NA==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400685744", "bodyText": "This should probably be a separate issue and propose a better validation structure to use in place of this.\nI do understand that this is not flexible when it comes to mandatory or keys in multiple groups eg: (f1 or f2) and (f3 or f4) but at the same time, this is not enforced.\nBut before we deprecate and remove this, we should have something that will\n\ndefine the schema of api params instead of digging through the action code.\nfail at early stage (at the beginning of processing request)\nhave more rigid bad request validation done here instead of in action code which is more likely to be missed (error-prone).\n\nI strongly feel we deprecate and remove this only when we have better structure in place as this does it basic job (not saying it does the above perfectly).\nIf you insist I will remove this to unblock the PR but would like to hear your thoughts.", "author": "sujithvm", "createdAt": "2020-03-31T07:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4NDM0Mg==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r400984342", "bodyText": "I don't suggest to deprecate mandatoryOrKeys in this PR. My proposal is to avoid introducing a new dependency on it. As there is only one more RolesMappingValidator validator that depends on mandatoryOrKeys, there is not much need to make it consistent with other validators.\nLater we can decide whether it is worth extending mandatoryOrKeys or not. IMO, two cases where it may be useful do not provide enough justification to make it more generic especially that there is still logic in AccountApiAction to deal with password and hash.\nI do not insist, but strongly recommend to remove the dependency on mandatoryOrKeys from the AccountValidator.", "author": "vrozov", "createdAt": "2020-03-31T15:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NzkwMg==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r401067902", "bodyText": "I absolutely don't mind removing it from the PR but I would like to know the following which is not clear to me:\n\nwhy are we deprecating something that works?\nwhat if the new improved solution is based out of this ?\nwhat is the pain point of this in the use cases we have?", "author": "sujithvm", "createdAt": "2020-03-31T16:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5MDIzMQ==", "url": "https://github.com/opensearch-project/security/pull/333#discussion_r401090231", "bodyText": "why are we deprecating something that works?\n\nWhile it works, it is fragile and is not flexible.\n\nwhat if the new improved solution is based out of this?\n\nIt depends on the effort and the value the new improved solution provides. If the current functionality can be easily extended (I doubt), we may decide to extend it instead of deprecating\n\nwhat is the pain point of this in the use cases we have\n\nA duplicate check that has to be introduced anyway", "author": "vrozov", "createdAt": "2020-03-31T17:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5MjEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "c4d71d0e8daa29914ea993876670cd4d569b8089", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java\nindex 38e875fe..9c891c6c 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/validation/AccountValidator.java\n\n@@ -27,7 +27,5 @@ public class AccountValidator extends CredentialsValidator {\n         super(request, ref, esSettings, param);\n         allowedKeys.put(\"current_password\", DataType.STRING);\n         mandatoryKeys.add(\"current_password\");\n-        mandatoryOrKeys.add(\"hash\");\n-        mandatoryOrKeys.add(\"password\");\n     }\n }\n"}}, {"oid": "c4d71d0e8daa29914ea993876670cd4d569b8089", "url": "https://github.com/opensearch-project/security/commit/c4d71d0e8daa29914ea993876670cd4d569b8089", "message": "Remove mandatory or keys", "committedDate": "2020-03-31T16:56:54Z", "type": "commit"}]}