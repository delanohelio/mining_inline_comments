{"pr_number": 304, "pr_title": "AuditLog: Refactor to use AuditCategory enum", "pr_createdAt": "2020-03-20T16:54:26Z", "pr_url": "https://github.com/opensearch-project/security/pull/304", "timeline": [{"oid": "0cb732fcebd4df0c45bd8c3013df6d1efcd3faf5", "url": "https://github.com/opensearch-project/security/commit/0cb732fcebd4df0c45bd8c3013df6d1efcd3faf5", "message": "Refactor to use AuditCategory enum", "committedDate": "2020-03-24T06:03:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTc4Mg==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r397535782", "bodyText": "My understanding is that not all AuditCategory applies to Rest or Transport categories. It may be good to log a warning if an admin tries to disable auditing for a category that does not apply. Note that this case is different from an invalid category.", "author": "vrozov", "createdAt": "2020-03-25T00:08:06Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -129,27 +130,15 @@ protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final\n         restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n         transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n \n-        disabledRestCategories = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, defaultDisabledCategories).stream()\n-                .map(c->c.toUpperCase()).collect(Collectors.toList()));\n-\n-        if(disabledRestCategories.size() == 1 && \"NONE\".equals(disabledRestCategories.get(0))) {\n-            disabledRestCategories.clear();\n-        }\n-\n-        if (disabledRestCategories.size() > 0) {\n-            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n-        }\n+        disabledRestCategories = AuditCategory.parse(getConfigList(", "originalCommit": "0cb732fcebd4df0c45bd8c3013df6d1efcd3faf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDk5Mg==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r397544992", "bodyText": "Maybe raise another issue for this?", "author": "sujithvm", "createdAt": "2020-03-25T00:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8aa4bb4882203834f18a997ebd555f743910cfb4", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\nindex db9de555..c7a83a24 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\n\n@@ -130,15 +130,29 @@ public abstract class AbstractAuditLog implements AuditLog {\n         restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n         transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n \n-        disabledRestCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n \n-        disabledTransportCategories = AuditCategory.parse(getConfigList(\n-                settings,\n-                ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES,\n-                DEFAULT_DISABLED_CATEGORIES));\n+        if (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0))) {\n+            disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n+        }\n+\n+        if (!disabledRestCategories.isEmpty()) {\n+            log.info(\"Configured categories on rest layer to ignore: {}\", disabledRestCategories);\n+        }\n+\n+        final List<String> disabledTransportCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_TRANSPORT_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n+\n+        if (disabledTransportCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledTransportCategoriesList.get(0))) {\n+            disabledTransportCategories = EnumSet.noneOf(AuditCategory.class);\n+        } else {\n+            disabledTransportCategories = AuditCategory.parse(disabledTransportCategoriesList);\n+        }\n+\n+        if (!disabledTransportCategories.isEmpty()) {\n+            log.info(\"Configured categories on transport layer to ignore: {}\", disabledTransportCategories);\n+        }\n \n         logRequestBody = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_LOG_REQUEST_BODY, true);\n         resolveIndices = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_RESOLVE_INDICES, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzODA3OQ==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r397538079", "bodyText": "I'd recommend start deprecating \"NONE\" as a setting and log a warning. It is easy to use \"none\" instead of \"NONE\" especially that category names are case-insensitive.", "author": "vrozov", "createdAt": "2020-03-25T00:15:15Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -184,44 +173,34 @@ protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final\n             log.info(\"Configured Users to ignore for write compliance events: {}\", ignoredComplianceUsersForWrite);\n         }\n \n-\n-\n         ignoreAuditRequests = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_IGNORE_REQUESTS, Collections.emptyList());\n         if (ignoreAuditRequests.size() > 0) {\n             log.info(\"Configured Requests to ignore: {}\", ignoreAuditRequests);\n         }\n \n-        // check if some categories are invalid\n-        for (String event : disabledRestCategories) {\n-        \ttry {\n-        \t\tAuditMessage.Category.valueOf(event.toUpperCase());\n-        \t} catch(Exception iae) {\n-        \t\tlog.error(\"Unkown category {}, please check opendistro_security.audit.config.disabled_categories settings\", event);\n-        \t}\n-\t\t}\n+        this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n+    }\n \n-        // check if some categories are invalid\n-        for (String event : disabledTransportCategories) {\n-            try {\n-                AuditMessage.Category.valueOf(event.toUpperCase());\n-            } catch(Exception iae) {\n-                log.error(\"Unkown category {}, please check opendistro_security.audit.config.disabled_categories settings\", event);\n-            }\n+    private static List<String> getConfigList(final Settings settings,\n+                                              final String key,\n+                                              final List<String> defaultList) {\n+        List<String> list = settings.getAsList(key, defaultList);\n+        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {", "originalCommit": "0cb732fcebd4df0c45bd8c3013df6d1efcd3faf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NTE3Mw==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r397545173", "bodyText": "Then it should complain and throw exception. It is documented to use NONE https://opendistro.github.io/for-elasticsearch-docs/docs/security-audit-logs/#exclude-categories", "author": "sujithvm", "createdAt": "2020-03-25T00:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzODA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTA5MA==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r397549090", "bodyText": "OK, I'll file an issue and see what others think.", "author": "vrozov", "createdAt": "2020-03-25T00:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzODA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8aa4bb4882203834f18a997ebd555f743910cfb4", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\nindex db9de555..c7a83a24 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\n\n@@ -181,16 +195,6 @@ public abstract class AbstractAuditLog implements AuditLog {\n         this.excludeSensitiveHeaders = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_EXCLUDE_SENSITIVE_HEADERS, true);\n     }\n \n-    private static List<String> getConfigList(final Settings settings,\n-                                              final String key,\n-                                              final List<String> defaultList) {\n-        List<String> list = settings.getAsList(key, defaultList);\n-        if (list.size() == 1 && \"NONE\".equals(list.get(0))) {\n-            return Collections.emptyList();\n-        }\n-        return list;\n-    }\n-\n     @Override\n     public void logFailedLogin(String effectiveUser, boolean securityadmin, String initiatingUser, TransportRequest request, Task task) {\n         final String action = null;\n"}}, {"oid": "8aa4bb4882203834f18a997ebd555f743910cfb4", "url": "https://github.com/opensearch-project/security/commit/8aa4bb4882203834f18a997ebd555f743910cfb4", "message": "Address code reviews", "committedDate": "2020-03-25T20:25:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MDA3OA==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398160078", "bodyText": "nit: as you are constructing an empty EnumSet directly here, add disabledRestCategoriesList.isEmpty() condition.", "author": "vrozov", "createdAt": "2020-03-25T20:49:55Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java", "diffHunk": "@@ -129,25 +130,27 @@ protected AbstractAuditLog(Settings settings, final ThreadPool threadPool, final\n         restAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_REST, true);\n         transportAuditingEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_ENABLE_TRANSPORT, true);\n \n-        disabledRestCategories = new ArrayList<>(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, defaultDisabledCategories).stream()\n-                .map(c->c.toUpperCase()).collect(Collectors.toList()));\n+        final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n \n-        if(disabledRestCategories.size() == 1 && \"NONE\".equals(disabledRestCategories.get(0))) {\n-            disabledRestCategories.clear();\n+        if (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0))) {", "originalCommit": "8aa4bb4882203834f18a997ebd555f743910cfb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjI3OA==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398186278", "bodyText": "Do you mean disabledRestCategoriesList.isEmpty() || disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)) ?\nIs it not redundant? as it will go to else and build an empty set.", "author": "sujithvm", "createdAt": "2020-03-25T21:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjY0OQ==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398202649", "bodyText": "It is not redundant, but, yes, the end result is the same. Question is if you short-circuit call to parse() when disabledRestCategoriesList is implicitly empty, why is it not short-circuited when it is explicitly empty?", "author": "vrozov", "createdAt": "2020-03-25T22:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MDA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "b2b86cf202e9e5fa5267c99c195bc9c7794530ab", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\nindex c7a83a24..93dac838 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AbstractAuditLog.java\n\n@@ -132,7 +132,7 @@ public abstract class AbstractAuditLog implements AuditLog {\n \n         final List<String> disabledRestCategoriesList = settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_AUDIT_CONFIG_DISABLED_REST_CATEGORIES, DEFAULT_DISABLED_CATEGORIES);\n \n-        if (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0))) {\n+        if (disabledRestCategoriesList.isEmpty() || (disabledRestCategoriesList.size() == 1 && \"NONE\".equalsIgnoreCase(disabledRestCategoriesList.get(0)))) {\n             disabledRestCategories = EnumSet.noneOf(AuditCategory.class);\n         } else {\n             disabledRestCategories = AuditCategory.parse(disabledRestCategoriesList);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398162950", "bodyText": "Is it necessary to allow null? Should it check for an empty collection and throw NullPointerException?", "author": "vrozov", "createdAt": "2020-03-25T20:54:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.impl;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public enum AuditCategory {\n+    BAD_HEADERS,\n+    FAILED_LOGIN,\n+    MISSING_PRIVILEGES,\n+    GRANTED_PRIVILEGES,\n+    OPENDISTRO_SECURITY_INDEX_ATTEMPT,\n+    SSL_EXCEPTION,\n+    AUTHENTICATED,\n+    COMPLIANCE_DOC_READ,\n+    COMPLIANCE_DOC_WRITE,\n+    COMPLIANCE_EXTERNAL_CONFIG,\n+    COMPLIANCE_INTERNAL_CONFIG_READ,\n+    COMPLIANCE_INTERNAL_CONFIG_WRITE;\n+\n+    public static EnumSet<AuditCategory> parse(final Collection<String> categories) {\n+        EnumSet<AuditCategory> set = EnumSet.noneOf(AuditCategory.class);\n+        if (categories == null)", "originalCommit": "8aa4bb4882203834f18a997ebd555f743910cfb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjkzMQ==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398186931", "bodyText": "I don't think so. As far as this parse is concerned, absence of values in input (whether null || empty) should mean no output categories.", "author": "sujithvm", "createdAt": "2020-03-25T21:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzU1NQ==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398207555", "bodyText": "While you may handle null the same way as an empty collection, the parse() function itself follows \"prefer empty collection over null\" and converts null to an empty set.", "author": "vrozov", "createdAt": "2020-03-25T22:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0MDk1OQ==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398340959", "bodyText": "I didnt quite follow you.\nIf we have an input list of nulls, since we are filtering non-nulls in the stream we would return empty set.\nThis is what I meant by absence of values and we are return an empty set. [null, null...] = null => return empty set.", "author": "sujithvm", "createdAt": "2020-03-26T06:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MzkwNA==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398663904", "bodyText": "What if the collection categories itself is null? When I referred to \"check for an empty collection\" I meant instead of if (categories == null), check if (categories.isEmpty()).\nYou brought a good question, how null should be handled inside the collection. IMO, that is a programming mistake to pass null inside the categories collection.", "author": "vrozov", "createdAt": "2020-03-26T15:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0ODgyOA==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398748828", "bodyText": "Are you saying to short-circuit if (categories == null || categories.isEmpty())  ?\nI mean to say, absence of values whether categories is null or empty or list of only null strings should all mean the same thing -> empty category set.", "author": "sujithvm", "createdAt": "2020-03-26T17:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NzE0Mg==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398757142", "bodyText": "@vrozov If you could tell exactly the change you are looking for, i could can do that and move on. I don't want to be blocked with such issues.", "author": "sujithvm", "createdAt": "2020-03-26T17:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2ODMzMQ==", "url": "https://github.com/opensearch-project/security/pull/304#discussion_r398768331", "bodyText": "My suggestion is not to allow null at all, whether the collection itself is null or it contains null. Change if (categores == null) to if (categories.isEmpty()) and remove the filter.", "author": "vrozov", "createdAt": "2020-03-26T17:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mjk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "a13e867ed20873f83d5433d3ae172f4a3eecd2c2", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java\nindex 64739eb7..27d825a0 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditCategory.java\n\n@@ -21,12 +21,11 @@ public enum AuditCategory {\n \n     public static EnumSet<AuditCategory> parse(final Collection<String> categories) {\n         EnumSet<AuditCategory> set = EnumSet.noneOf(AuditCategory.class);\n-        if (categories == null)\n+        if (categories.isEmpty())\n             return set;\n \n         return categories\n                 .stream()\n-                .filter(Objects::nonNull)\n                 .map(String::toUpperCase)\n                 .map(AuditCategory::valueOf)\n                 .collect(Collectors.toCollection(() -> set));\n"}}, {"oid": "b2b86cf202e9e5fa5267c99c195bc9c7794530ab", "url": "https://github.com/opensearch-project/security/commit/b2b86cf202e9e5fa5267c99c195bc9c7794530ab", "message": "Address code reviews", "committedDate": "2020-03-26T06:18:24Z", "type": "commit"}, {"oid": "a13e867ed20873f83d5433d3ae172f4a3eecd2c2", "url": "https://github.com/opensearch-project/security/commit/a13e867ed20873f83d5433d3ae172f4a3eecd2c2", "message": "Address code reviews", "committedDate": "2020-03-26T18:40:48Z", "type": "commit"}]}