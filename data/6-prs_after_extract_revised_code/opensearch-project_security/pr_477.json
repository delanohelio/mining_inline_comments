{"pr_number": 477, "pr_title": "Adding metadata_body to SAML config", "pr_createdAt": "2020-05-28T21:46:09Z", "pr_url": "https://github.com/opensearch-project/security/pull/477", "timeline": [{"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "url": "https://github.com/opensearch-project/security/commit/47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "message": "Adding metadata_body to SAML config", "committedDate": "2020-05-28T22:40:05Z", "type": "commit"}, {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "url": "https://github.com/opensearch-project/security/commit/47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "message": "Adding metadata_body to SAML config", "committedDate": "2020-05-28T22:40:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5Njk4Ng==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432196986", "bodyText": "Does this ID needs to be different every time it is initialized?", "author": "palashhedau", "createdAt": "2020-05-29T00:37:44Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0ODI1Ng==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432548256", "bodyText": "Was following the format of https://github.com/opendistro-for-elasticsearch/security/blob/master/src/main/java/com/amazon/dlic/auth/http/saml/SamlHTTPMetadataResolver.java#L40", "author": "debjanibnrj", "createdAt": "2020-05-29T15:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5Njk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyOTgyMA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432729820", "bodyText": "Consider moving common initialization to createMetadataResolver()", "author": "vrozov", "createdAt": "2020-05-29T20:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5Njk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\nindex 74937a83..f10dcd40 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n\n@@ -1,54 +1,50 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n package com.amazon.dlic.auth.http.saml;\n \n-import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n-import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.common.settings.Settings;\n import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n \n-import java.io.IOException;\n import java.io.StringReader;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n \n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n \n public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n-    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n-\n-    private static int componentIdCounter = 0;\n-\n-    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n-        super(getMetadataDOM(settings));\n-        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n-        setRequireValidMetadata(true);\n-        setFailFastInitialization(false);\n-        BasicParserPool basicParserPool = new BasicParserPool();\n-        basicParserPool.initialize();\n-        setParserPool(basicParserPool);\n-    }\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n \n-    private static Element getMetadataDOM(Settings settings) throws Exception {\n-        String xmlString = settings.get(\"idp.metadata_body\", null);\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n \n+    private static Element getMetadataDOM(final String xmlString) throws Exception {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         factory.setNamespaceAware(true);\n \n-        //API to obtain DOM Document instance\n         DocumentBuilder builder = null;\n-        try\n-        {\n+        try {\n             builder = factory.newDocumentBuilder();\n             Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n             return doc.getDocumentElement();\n-        } catch (Exception e)\n-        {\n-            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);\n+        } catch (Exception e) {\n+            log.error(\"Error while parsing SAML Metadata Body \", e);\n             throw e;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMDQ5Nw==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432200497", "bodyText": "nit: indentation", "author": "palashhedau", "createdAt": "2020-05-29T00:51:27Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -104,11 +107,11 @@ public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n                 throw new Exception(\"kibana_url is unconfigured\");\n             }\n \n-            if (idpMetadataUrl == null && idpMetadataFile == null) {\n-                throw new Exception(\"idp.metadata_url and idp.metadata_file are unconfigured\");\n+            if (idpMetadataUrl == null && idpMetadataFile == null && idpMetadataBody == null) {\n+                throw new Exception(\"idp.metadata_url, idp.metadata_file and idpMetadataBody are unconfigured\");\n             }\n \n-            this.metadataResolver = createMetadataResolver(settings, configPath);\n+             this.metadataResolver = createMetadataResolver(settings, configPath);", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex bc0563cd..42c75ffd 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -107,11 +102,7 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n                 throw new Exception(\"kibana_url is unconfigured\");\n             }\n \n-            if (idpMetadataUrl == null && idpMetadataFile == null && idpMetadataBody == null) {\n-                throw new Exception(\"idp.metadata_url, idp.metadata_file and idpMetadataBody are unconfigured\");\n-            }\n-\n-             this.metadataResolver = createMetadataResolver(settings, configPath);\n+            this.metadataResolver = createMetadataResolver(settings, configPath);\n \n             this.saml2SettingsProvider = new Saml2SettingsProvider(settings, this.metadataResolver);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMDk5NA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432200994", "bodyText": "twice \"e\" while logging?", "author": "palashhedau", "createdAt": "2020-05-29T00:53:25Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n+        setRequireValidMetadata(true);\n+        setFailFastInitialization(false);\n+        BasicParserPool basicParserPool = new BasicParserPool();\n+        basicParserPool.initialize();\n+        setParserPool(basicParserPool);\n+    }\n+\n+    private static Element getMetadataDOM(Settings settings) throws Exception {\n+        String xmlString = settings.get(\"idp.metadata_body\", null);\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        //API to obtain DOM Document instance\n+        DocumentBuilder builder = null;\n+        try\n+        {\n+            builder = factory.newDocumentBuilder();\n+            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n+            return doc.getDocumentElement();\n+        } catch (Exception e)\n+        {\n+            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\nindex 74937a83..f10dcd40 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n\n@@ -1,54 +1,50 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n package com.amazon.dlic.auth.http.saml;\n \n-import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n-import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.common.settings.Settings;\n import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n \n-import java.io.IOException;\n import java.io.StringReader;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n \n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n \n public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n-    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n-\n-    private static int componentIdCounter = 0;\n-\n-    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n-        super(getMetadataDOM(settings));\n-        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n-        setRequireValidMetadata(true);\n-        setFailFastInitialization(false);\n-        BasicParserPool basicParserPool = new BasicParserPool();\n-        basicParserPool.initialize();\n-        setParserPool(basicParserPool);\n-    }\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n \n-    private static Element getMetadataDOM(Settings settings) throws Exception {\n-        String xmlString = settings.get(\"idp.metadata_body\", null);\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n \n+    private static Element getMetadataDOM(final String xmlString) throws Exception {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         factory.setNamespaceAware(true);\n \n-        //API to obtain DOM Document instance\n         DocumentBuilder builder = null;\n-        try\n-        {\n+        try {\n             builder = factory.newDocumentBuilder();\n             Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n             return doc.getDocumentElement();\n-        } catch (Exception e)\n-        {\n-            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);\n+        } catch (Exception e) {\n+            log.error(\"Error while parsing SAML Metadata Body \", e);\n             throw e;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMTQwOA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432201408", "bodyText": "not sure we are adding roles. Will have to confirm", "author": "palashhedau", "createdAt": "2020-05-29T00:55:08Z", "path": "src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java", "diffHunk": "@@ -151,6 +152,63 @@ public void basicTest() throws Exception {\n         Assert.assertEquals(\"horst\", jwt.getClaim(\"sub\"));\n     }\n \n+    @Test\n+    public void testMetadataBody() throws Exception {\n+        mockSamlIdpServer.setSignResponses(true);\n+        mockSamlIdpServer.loadSigningKeys(\"saml/kirk-keystore.jks\", \"kirk\");\n+        mockSamlIdpServer.setAuthenticateUser(\"horst\");\n+        mockSamlIdpServer.setEndpointQueryString(null);\n+\n+        // Note: We need to replace endpoint with mockSamlIdpServer endpoint\n+        final String metadataBody = FileHelper.loadFile(\"saml/metadata.xml\")\n+                                        .replaceAll(\"http://localhost:33667/\", mockSamlIdpServer.getMetadataUri());\n+\n+        Settings settings = Settings.builder().put(\"idp.metadata_body\", metadataBody)\n+            .put(\"kibana_url\", \"http://wherever\")\n+            .put(\"idp.entity_id\", mockSamlIdpServer.getIdpEntityId())\n+            .put(\"exchange_key\", \"abc\").put(\"roles_key\", \"roles\").put(\"path.home\", \".\").build();", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NDA2MQ==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432884061", "bodyText": "Was following the same Settings as other tests in this file -\nhttps://github.com/opendistro-for-elasticsearch/security/blob/master/src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java#L125-L127", "author": "debjanibnrj", "createdAt": "2020-05-30T20:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMTQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java b/src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java\nindex 7da0db9f..8f70474a 100644\n--- a/src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java\n+++ b/src/test/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticatorTest.java\n\n@@ -194,7 +193,7 @@ public class HTTPSamlAuthenticatorTest {\n     }\n \n \n-    @Test(expected= SAXParseException.class)\n+    @Test(expected= RuntimeException.class)\n     public void testEmptyMetadataBody() throws Exception {\n         mockSamlIdpServer.setSignResponses(true);\n         mockSamlIdpServer.loadSigningKeys(\"saml/kirk-keystore.jks\", \"kirk\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwNDI4OA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432704288", "bodyText": "avoid throwing Exception, it should be either checked or run-time (preferred) Exception.", "author": "vrozov", "createdAt": "2020-05-29T19:53:02Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -76,7 +78,7 @@\n     private HTTPJwtAuthenticator httpJwtAuthenticator;\n     private Settings jwtSettings;\n \n-    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n+    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws Exception {", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MzY4NA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432883684", "bodyText": "I would prefer some exception/error to be thrown if the XML entered by the user is invalid. If I make this a checked/runtime exception I don't want it to silently fail.", "author": "debjanibnrj", "createdAt": "2020-05-30T20:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwNDI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex bc0563cd..42c75ffd 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -77,17 +74,15 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n     private AuthTokenProcessorHandler authTokenProcessorHandler;\n     private HTTPJwtAuthenticator httpJwtAuthenticator;\n     private Settings jwtSettings;\n+    private static int resolverIdCounter = 0;\n \n-    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws Exception {\n+    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws RuntimeException {\n         try {\n             ensureOpenSamlInitialization();\n \n             rolesKey = settings.get(\"roles_key\");\n             subjectKey = settings.get(\"subject_key\");\n             kibanaRootUrl = settings.get(\"kibana_url\");\n-            idpMetadataUrl = settings.get(\"idp.metadata_url\");\n-            idpMetadataFile = settings.get(\"idp.metadata_file\");\n-            idpMetadataBody = settings.get(\"idp.metadata_body\");\n             spSignatureAlgorithm = settings.get(\"sp.signature_algorithm\", Constants.RSA_SHA256);\n             spSignaturePrivateKey = getSpSignaturePrivateKey(settings, configPath);\n             useForceAuthn = settings.getAsBoolean(\"sp.forceAuthn\", null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwNjA3MA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432706070", "bodyText": "Consider \"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\".", "author": "vrozov", "createdAt": "2020-05-29T19:56:57Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -104,11 +107,11 @@ public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n                 throw new Exception(\"kibana_url is unconfigured\");\n             }\n \n-            if (idpMetadataUrl == null && idpMetadataFile == null) {\n-                throw new Exception(\"idp.metadata_url and idp.metadata_file are unconfigured\");\n+            if (idpMetadataUrl == null && idpMetadataFile == null && idpMetadataBody == null) {\n+                throw new Exception(\"idp.metadata_url, idp.metadata_file and idpMetadataBody are unconfigured\");", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex bc0563cd..42c75ffd 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -107,11 +102,7 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n                 throw new Exception(\"kibana_url is unconfigured\");\n             }\n \n-            if (idpMetadataUrl == null && idpMetadataFile == null && idpMetadataBody == null) {\n-                throw new Exception(\"idp.metadata_url, idp.metadata_file and idpMetadataBody are unconfigured\");\n-            }\n-\n-             this.metadataResolver = createMetadataResolver(settings, configPath);\n+            this.metadataResolver = createMetadataResolver(settings, configPath);\n \n             this.saml2SettingsProvider = new Saml2SettingsProvider(settings, this.metadataResolver);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxOTk2OA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432719968", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (idpMetadataUrl != null) {\n          \n          \n            \n                    final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n          \n          \n            \n                    if (idpMetadataUrl != null) {\n          \n          \n            \n                        metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);", "author": "vrozov", "createdAt": "2020-05-29T20:29:20Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +278,16 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n         if (idpMetadataUrl != null) {", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex bc0563cd..42c75ffd 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -282,12 +273,17 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n             throws Exception {\n         final AbstractBatchMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n         } else if (idpMetadataFile != null) {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new SamlDOMMetadataResolver(idpMetadataBody);\n         } else {\n-            metadataResolver = new SamlDOMMetadataResolver(settings);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n         SecurityManager sm = System.getSecurityManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyMDk0Nw==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432720947", "bodyText": "Similar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (idpMetadataFile != null) {\n          \n          \n            \n                    } else {\n          \n          \n            \n                        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n          \n          \n            \n                        if (idpMetadataFile != null) {\n          \n          \n            \n                            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);", "author": "vrozov", "createdAt": "2020-05-29T20:31:43Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +278,16 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n         if (idpMetadataUrl != null) {\n             metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n-        } else {\n+        } else if (idpMetadataFile != null) {", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex bc0563cd..42c75ffd 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -282,12 +273,17 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n             throws Exception {\n         final AbstractBatchMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n         } else if (idpMetadataFile != null) {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new SamlDOMMetadataResolver(idpMetadataBody);\n         } else {\n-            metadataResolver = new SamlDOMMetadataResolver(settings);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n         SecurityManager sm = System.getSecurityManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyMjEwOA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432722108", "bodyText": "Move check here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                       throw new RuntimeException(\"One of 'idp.metadata_url', 'idp.metadata_file' or 'idp.metadata_body' must be configured\");", "author": "vrozov", "createdAt": "2020-05-29T20:34:34Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +278,16 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n         if (idpMetadataUrl != null) {\n             metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n-        } else {\n+        } else if (idpMetadataFile != null) {\n             metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+        } else {\n+            metadataResolver = new SamlDOMMetadataResolver(settings);\n         }", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex bc0563cd..42c75ffd 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -282,12 +273,17 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n             throws Exception {\n         final AbstractBatchMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n         } else if (idpMetadataFile != null) {\n-            metadataResolver = new SamlFilesystemMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new SamlDOMMetadataResolver(idpMetadataBody);\n         } else {\n-            metadataResolver = new SamlDOMMetadataResolver(settings);\n+            throw new Exception(\"One of idp.metadata_url, idp.metadata_file or idp.metadata_body must be configured\");\n         }\n \n         SecurityManager sm = System.getSecurityManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNTcyNQ==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432725725", "bodyText": "remove unused imports", "author": "vrozov", "createdAt": "2020-05-29T20:43:13Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\nindex 74937a83..f10dcd40 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n\n@@ -1,54 +1,50 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n package com.amazon.dlic.auth.http.saml;\n \n-import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n-import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.common.settings.Settings;\n import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n \n-import java.io.IOException;\n import java.io.StringReader;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n \n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n \n public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n-    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n-\n-    private static int componentIdCounter = 0;\n-\n-    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n-        super(getMetadataDOM(settings));\n-        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n-        setRequireValidMetadata(true);\n-        setFailFastInitialization(false);\n-        BasicParserPool basicParserPool = new BasicParserPool();\n-        basicParserPool.initialize();\n-        setParserPool(basicParserPool);\n-    }\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n \n-    private static Element getMetadataDOM(Settings settings) throws Exception {\n-        String xmlString = settings.get(\"idp.metadata_body\", null);\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n \n+    private static Element getMetadataDOM(final String xmlString) throws Exception {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         factory.setNamespaceAware(true);\n \n-        //API to obtain DOM Document instance\n         DocumentBuilder builder = null;\n-        try\n-        {\n+        try {\n             builder = factory.newDocumentBuilder();\n             Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n             return doc.getDocumentElement();\n-        } catch (Exception e)\n-        {\n-            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);\n+        } catch (Exception e) {\n+            log.error(\"Error while parsing SAML Metadata Body \", e);\n             throw e;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNjMyNA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432726324", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n          \n          \n            \n                private static final Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);", "author": "vrozov", "createdAt": "2020-05-29T20:44:38Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\nindex 74937a83..f10dcd40 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n\n@@ -1,54 +1,50 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n package com.amazon.dlic.auth.http.saml;\n \n-import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n-import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.common.settings.Settings;\n import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n \n-import java.io.IOException;\n import java.io.StringReader;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n \n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n \n public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n-    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n-\n-    private static int componentIdCounter = 0;\n-\n-    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n-        super(getMetadataDOM(settings));\n-        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n-        setRequireValidMetadata(true);\n-        setFailFastInitialization(false);\n-        BasicParserPool basicParserPool = new BasicParserPool();\n-        basicParserPool.initialize();\n-        setParserPool(basicParserPool);\n-    }\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n \n-    private static Element getMetadataDOM(Settings settings) throws Exception {\n-        String xmlString = settings.get(\"idp.metadata_body\", null);\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n \n+    private static Element getMetadataDOM(final String xmlString) throws Exception {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         factory.setNamespaceAware(true);\n \n-        //API to obtain DOM Document instance\n         DocumentBuilder builder = null;\n-        try\n-        {\n+        try {\n             builder = factory.newDocumentBuilder();\n             Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n             return doc.getDocumentElement();\n-        } catch (Exception e)\n-        {\n-            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);\n+        } catch (Exception e) {\n+            log.error(\"Error while parsing SAML Metadata Body \", e);\n             throw e;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMDEyMw==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432730123", "bodyText": "nit: no new line.", "author": "vrozov", "createdAt": "2020-05-29T20:54:06Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n+        setRequireValidMetadata(true);\n+        setFailFastInitialization(false);\n+        BasicParserPool basicParserPool = new BasicParserPool();\n+        basicParserPool.initialize();\n+        setParserPool(basicParserPool);\n+    }\n+\n+    private static Element getMetadataDOM(Settings settings) throws Exception {\n+        String xmlString = settings.get(\"idp.metadata_body\", null);\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        //API to obtain DOM Document instance\n+        DocumentBuilder builder = null;\n+        try\n+        {\n+            builder = factory.newDocumentBuilder();\n+            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n+            return doc.getDocumentElement();\n+        } catch (Exception e)\n+        {", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\nindex 74937a83..f10dcd40 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n\n@@ -1,54 +1,50 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n package com.amazon.dlic.auth.http.saml;\n \n-import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n-import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.common.settings.Settings;\n import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n \n-import java.io.IOException;\n import java.io.StringReader;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n \n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n \n public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n-    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n-\n-    private static int componentIdCounter = 0;\n-\n-    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n-        super(getMetadataDOM(settings));\n-        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n-        setRequireValidMetadata(true);\n-        setFailFastInitialization(false);\n-        BasicParserPool basicParserPool = new BasicParserPool();\n-        basicParserPool.initialize();\n-        setParserPool(basicParserPool);\n-    }\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n \n-    private static Element getMetadataDOM(Settings settings) throws Exception {\n-        String xmlString = settings.get(\"idp.metadata_body\", null);\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n \n+    private static Element getMetadataDOM(final String xmlString) throws Exception {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         factory.setNamespaceAware(true);\n \n-        //API to obtain DOM Document instance\n         DocumentBuilder builder = null;\n-        try\n-        {\n+        try {\n             builder = factory.newDocumentBuilder();\n             Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n             return doc.getDocumentElement();\n-        } catch (Exception e)\n-        {\n-            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);\n+        } catch (Exception e) {\n+            log.error(\"Error while parsing SAML Metadata Body \", e);\n             throw e;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMDM0Ng==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432730346", "bodyText": "Use smart logging.", "author": "vrozov", "createdAt": "2020-05-29T20:54:37Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.dlic.auth.http.saml;\n+\n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    private static int componentIdCounter = 0;\n+\n+    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n+        super(getMetadataDOM(settings));\n+        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n+        setRequireValidMetadata(true);\n+        setFailFastInitialization(false);\n+        BasicParserPool basicParserPool = new BasicParserPool();\n+        basicParserPool.initialize();\n+        setParserPool(basicParserPool);\n+    }\n+\n+    private static Element getMetadataDOM(Settings settings) throws Exception {\n+        String xmlString = settings.get(\"idp.metadata_body\", null);\n+\n+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setNamespaceAware(true);\n+\n+        //API to obtain DOM Document instance\n+        DocumentBuilder builder = null;\n+        try\n+        {\n+            builder = factory.newDocumentBuilder();\n+            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n+            return doc.getDocumentElement();\n+        } catch (Exception e)\n+        {\n+            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);", "originalCommit": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5208805ab9960fd09a524284ef3c4c9c77257080", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\nindex 74937a83..f10dcd40 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n\n@@ -1,54 +1,50 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n package com.amazon.dlic.auth.http.saml;\n \n-import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n-import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.common.settings.Settings;\n import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n \n-import java.io.IOException;\n import java.io.StringReader;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n \n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n \n public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n-    protected final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n-\n-    private static int componentIdCounter = 0;\n-\n-    public SamlDOMMetadataResolver(Settings settings) throws Exception {\n-        super(getMetadataDOM(settings));\n-        setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++componentIdCounter));\n-        setRequireValidMetadata(true);\n-        setFailFastInitialization(false);\n-        BasicParserPool basicParserPool = new BasicParserPool();\n-        basicParserPool.initialize();\n-        setParserPool(basicParserPool);\n-    }\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n \n-    private static Element getMetadataDOM(Settings settings) throws Exception {\n-        String xmlString = settings.get(\"idp.metadata_body\", null);\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n \n+    private static Element getMetadataDOM(final String xmlString) throws Exception {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         factory.setNamespaceAware(true);\n \n-        //API to obtain DOM Document instance\n         DocumentBuilder builder = null;\n-        try\n-        {\n+        try {\n             builder = factory.newDocumentBuilder();\n             Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n             return doc.getDocumentElement();\n-        } catch (Exception e)\n-        {\n-            log.error(\"Error while parsing SAML Metadata Body \"+ e, e);\n+        } catch (Exception e) {\n+            log.error(\"Error while parsing SAML Metadata Body \", e);\n             throw e;\n         }\n     }\n"}}, {"oid": "47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "url": "https://github.com/opensearch-project/security/commit/47ccdeb0f43eb6198e2f30d6ede03d598ac58ec1", "message": "Adding metadata_body to SAML config", "committedDate": "2020-05-28T22:40:05Z", "type": "forcePushed"}, {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080", "url": "https://github.com/opensearch-project/security/commit/5208805ab9960fd09a524284ef3c4c9c77257080", "message": "Addressing PR comments", "committedDate": "2020-05-31T02:56:50Z", "type": "commit"}, {"oid": "5208805ab9960fd09a524284ef3c4c9c77257080", "url": "https://github.com/opensearch-project/security/commit/5208805ab9960fd09a524284ef3c4c9c77257080", "message": "Addressing PR comments", "committedDate": "2020-05-31T02:56:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2NjMwOQ==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432966309", "bodyText": "nit: RuntimeException does not need to be declared", "author": "vrozov", "createdAt": "2020-05-31T17:15:20Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -75,16 +74,15 @@\n     private AuthTokenProcessorHandler authTokenProcessorHandler;\n     private HTTPJwtAuthenticator httpJwtAuthenticator;\n     private Settings jwtSettings;\n+    private static int resolverIdCounter = 0;\n \n-    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n+    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws RuntimeException {", "originalCommit": "5208805ab9960fd09a524284ef3c4c9c77257080", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21d0488499db45ae0a05efe6380f98ce20a7071c", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex 42c75ffd..2de9a384 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -74,9 +85,11 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n     private AuthTokenProcessorHandler authTokenProcessorHandler;\n     private HTTPJwtAuthenticator httpJwtAuthenticator;\n     private Settings jwtSettings;\n+    private static final DocumentBuilderFactory documentBuilderFactory = getDocumentBuildFactory();\n+\n     private static int resolverIdCounter = 0;\n \n-    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) throws RuntimeException {\n+    public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n         try {\n             ensureOpenSamlInitialization();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTU1NQ==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432969555", "bodyText": "Note that, for example AbstractHTTPJwtAuthenticator, does not raise exception in case it is misconfigured similar to how HTTPSamlAuthenticator behaved. It will be good to revisit the behavior and make it consistent as part of a follow up PR.", "author": "vrozov", "createdAt": "2020-05-31T17:57:19Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -127,6 +121,7 @@ public HTTPSamlAuthenticator(final Settings settings, final Path configPath) {\n \n         } catch (Exception e) {\n             log.error(\"Error creating HTTPSamlAuthenticator: \" + e + \". SAML authentication will not work\", e);\n+            throw new RuntimeException(e);", "originalCommit": "5208805ab9960fd09a524284ef3c4c9c77257080", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMTc5Ng==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r433501796", "bodyText": "That makes sense, created https://github.com/opendistro-for-elasticsearch/security/issues/482 to follow up", "author": "debjanibnrj", "createdAt": "2020-06-01T21:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTU1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTY3OA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432969678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n          \n          \n            \n                private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)", "author": "vrozov", "createdAt": "2020-05-31T17:59:00Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,21 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)", "originalCommit": "5208805ab9960fd09a524284ef3c4c9c77257080", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21d0488499db45ae0a05efe6380f98ce20a7071c", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex 42c75ffd..2de9a384 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -269,9 +282,9 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n         }\n     }\n \n-    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractBatchMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n         final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n         final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2OTcxNA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432969714", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final AbstractBatchMetadataResolver metadataResolver;\n          \n          \n            \n                    final AbstractMetadataResolver metadataResolver;", "author": "vrozov", "createdAt": "2020-05-31T17:59:34Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,21 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;", "originalCommit": "5208805ab9960fd09a524284ef3c4c9c77257080", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21d0488499db45ae0a05efe6380f98ce20a7071c", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex 42c75ffd..2de9a384 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -269,9 +282,9 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n         }\n     }\n \n-    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractBatchMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n         final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n         final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDA3NQ==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432970075", "bodyText": "Use DOMMetadataResolver:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        metadataResolver = new SamlDOMMetadataResolver(idpMetadataBody);\n          \n          \n            \n                        metadataResolver = new DOMMetadataResolver(getMetadataDOM(idpMetadataBody));", "author": "vrozov", "createdAt": "2020-05-31T18:04:39Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -275,14 +269,21 @@ public Void run() throws InitializationException {\n         }\n     }\n \n-    private AbstractReloadingMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractReloadingMetadataResolver metadataResolver;\n+        final AbstractBatchMetadataResolver metadataResolver;\n \n+        final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n+        final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n+        final String idpMetadataBody = settings.get(\"idp.metadata_body\");\n         if (idpMetadataUrl != null) {\n-            metadataResolver = new SamlHTTPMetadataResolver(settings, configPath);\n+            metadataResolver = new SamlHTTPMetadataResolver(idpMetadataUrl, settings, configPath);\n+        } else if (idpMetadataFile != null) {\n+            metadataResolver = new SamlFilesystemMetadataResolver(idpMetadataFile, settings, configPath);\n+        } else if (idpMetadataBody != null) {\n+            metadataResolver = new SamlDOMMetadataResolver(idpMetadataBody);", "originalCommit": "5208805ab9960fd09a524284ef3c4c9c77257080", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21d0488499db45ae0a05efe6380f98ce20a7071c", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex 42c75ffd..2de9a384 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -269,9 +282,9 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n         }\n     }\n \n-    private AbstractBatchMetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n+    private MetadataResolver createMetadataResolver(final Settings settings, final Path configPath)\n             throws Exception {\n-        final AbstractBatchMetadataResolver metadataResolver;\n+        final AbstractMetadataResolver metadataResolver;\n \n         final String idpMetadataUrl = settings.get(\"idp.metadata_url\");\n         final String idpMetadataFile = settings.get(\"idp.metadata_file\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDI5Ng==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432970296", "bodyText": "Is it necessary to run this code with elevated privileges? Can it be limited to metadataResolver.initialize();?", "author": "vrozov", "createdAt": "2020-05-31T18:07:27Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java", "diffHunk": "@@ -295,6 +296,12 @@ private AbstractReloadingMetadataResolver createMetadataResolver(final Settings\n             AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n                 @Override\n                 public Void run() throws ComponentInitializationException {\n+                    metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));", "originalCommit": "5208805ab9960fd09a524284ef3c4c9c77257080", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21d0488499db45ae0a05efe6380f98ce20a7071c", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\nindex 42c75ffd..2de9a384 100644\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n+++ b/src/main/java/com/amazon/dlic/auth/http/saml/HTTPSamlAuthenticator.java\n\n@@ -296,12 +316,6 @@ public class HTTPSamlAuthenticator implements HTTPAuthenticator, Destroyable {\n             AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n                 @Override\n                 public Void run() throws ComponentInitializationException {\n-                    metadataResolver.setId(HTTPSamlAuthenticator.class.getName() + \"_\" + (++resolverIdCounter));\n-                    metadataResolver.setRequireValidMetadata(true);\n-                    metadataResolver.setFailFastInitialization(false);\n-                    final BasicParserPool basicParserPool = new BasicParserPool();\n-                    basicParserPool.initialize();\n-                    metadataResolver.setParserPool(basicParserPool);\n                     metadataResolver.initialize();\n                     return null;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDU4Mw==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432970583", "bodyText": "Move this method to HTTPSamlAuthenticator, declare it to throw ParserConfigurationException, SAXException, IOException and delete SamlDOMMetadataResolver class.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Element getMetadataDOM(final String xmlString) throws Exception {\n          \n          \n            \n                private static Element getMetadataDOM(final String xmlString) throws ParserConfigurationException, SAXException, IOException {\n          \n          \n            \n                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n          \n          \n            \n                    factory.setNamespaceAware(true);\n          \n          \n            \n            \n          \n          \n            \n                    DocumentBuilder builder = factory.newDocumentBuilder();\n          \n          \n            \n                    try {\n          \n          \n            \n                        Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n          \n          \n            \n                        return doc.getDocumentElement();\n          \n          \n            \n                    } catch (SAXException e) {\n          \n          \n            \n                        log.error(\"Error while parsing SAML Metadata Body {}\", xmlString, e);\n          \n          \n            \n                        throw e;\n          \n          \n            \n                    }\n          \n          \n            \n                }", "author": "vrozov", "createdAt": "2020-05-31T18:10:58Z", "path": "src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.dlic.auth.http.saml;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n+\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.InputSource;\n+\n+public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n+    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n+\n+    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n+        super(getMetadataDOM(idpMetadataBody));\n+    }\n+\n+    private static Element getMetadataDOM(final String xmlString) throws Exception {", "originalCommit": "5208805ab9960fd09a524284ef3c4c9c77257080", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3Mjk4MA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432972980", "bodyText": "Any advantage of adding the logic in HTTPSamlAuthenticator vs a class. Thought of using a class as it would be consistent with the other Resolvers", "author": "debjanibnrj", "createdAt": "2020-05-31T18:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3NzU0OA==", "url": "https://github.com/opensearch-project/security/pull/477#discussion_r432977548", "bodyText": "There is no difference in functionality between SamlDOMMetadataResolver and its base class, so introduction of SamlDOMMetadataResolver is not necessary, compared to other MetadataResolver classes that implement fetchMetadata().", "author": "vrozov", "createdAt": "2020-05-31T19:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MDU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "21d0488499db45ae0a05efe6380f98ce20a7071c", "chunk": "diff --git a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java b/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\ndeleted file mode 100644\nindex f10dcd40..00000000\n--- a/src/main/java/com/amazon/dlic/auth/http/saml/SamlDOMMetadataResolver.java\n+++ /dev/null\n\n@@ -1,51 +0,0 @@\n-/*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\").\n- *  You may not use this file except in compliance with the License.\n- *  A copy of the License is located at\n- *\n- *  http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  or in the \"license\" file accompanying this file. This file is distributed\n- *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- *  express or implied. See the License for the specific language governing\n- *  permissions and limitations under the License.\n- */\n-\n-package com.amazon.dlic.auth.http.saml;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.opensaml.saml.metadata.resolver.impl.DOMMetadataResolver;\n-\n-import java.io.StringReader;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.xml.sax.InputSource;\n-\n-public class SamlDOMMetadataResolver extends DOMMetadataResolver {\n-    private final static Logger log = LogManager.getLogger(SamlDOMMetadataResolver.class);\n-\n-    public SamlDOMMetadataResolver(final String idpMetadataBody) throws Exception {\n-        super(getMetadataDOM(idpMetadataBody));\n-    }\n-\n-    private static Element getMetadataDOM(final String xmlString) throws Exception {\n-        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n-        factory.setNamespaceAware(true);\n-\n-        DocumentBuilder builder = null;\n-        try {\n-            builder = factory.newDocumentBuilder();\n-            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n-            return doc.getDocumentElement();\n-        } catch (Exception e) {\n-            log.error(\"Error while parsing SAML Metadata Body \", e);\n-            throw e;\n-        }\n-    }\n-}\n"}}, {"oid": "21d0488499db45ae0a05efe6380f98ce20a7071c", "url": "https://github.com/opensearch-project/security/commit/21d0488499db45ae0a05efe6380f98ce20a7071c", "message": "Addressing review comments", "committedDate": "2020-06-02T01:36:08Z", "type": "commit"}, {"oid": "21d0488499db45ae0a05efe6380f98ce20a7071c", "url": "https://github.com/opensearch-project/security/commit/21d0488499db45ae0a05efe6380f98ce20a7071c", "message": "Addressing review comments", "committedDate": "2020-06-02T01:36:08Z", "type": "forcePushed"}]}