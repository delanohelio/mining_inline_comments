{"pr_number": 834, "pr_title": "CLDR-10883 improving JSON RBNF", "pr_createdAt": "2020-11-06T19:18:37Z", "pr_url": "https://github.com/unicode-org/cldr/pull/834", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjgxNw==", "url": "https://github.com/unicode-org/cldr/pull/834#discussion_r520806817", "bodyText": "This block could be a subroutine. convertCldrItems is about 246 lines currently, way more than one screenful", "author": "btangmu", "createdAt": "2020-11-10T19:04:37Z", "path": "tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java", "diffHunk": "@@ -546,23 +547,16 @@ private int convertCldrItems(AtomicInteger readCount, int totalCount,\n                             throw new IllegalArgumentException(\"empty xpath in \" + filename + \" section \" + js.packageName + \"/\" + js.section);\n                         }\n                         if (type == RunType.rbnf) {\n-                            item.setValue(item.getValue().replace('\u2192', '>'));\n-                            item.setValue(item.getValue().replace('\u2190', '<'));\n-                            if (item.getFullPath().contains(\"@value\")) {\n-                                int indexStart = item.getFullPath().indexOf(\"@value\") + 8;\n-                                int indexEnd = item.getFullPath().indexOf(\"]\", indexStart) - 1;\n-                                if (indexStart >= 0 && indexEnd >= 0 && indexEnd > indexStart) {\n-                                    String sub = item.getFullPath().substring(indexStart, indexEnd);\n-                                    /* System.out.println(\"sub: \" + sub);\n-                                    System.out.println(\"full: \" + item.getFullPath());\n-                                    System.out.println(\"val: \" + item.getValue());*/\n-                                    item.setFullPath(item.getFullPath().replace(sub, item.getValue()));\n-                                    item.setFullPath(item.getFullPath().replaceAll(\"@value\", \"@\" + sub));\n-                                    //System.out.println(\"modifyfull: \" + item.getFullPath());\n-                                    item.setValue(\"\");\n-                                }\n+                            XPathParts xpp = XPathParts.getFrozenInstance(item.getFullPath());", "originalCommit": "ed508745560722e042c030b133f24b82d8f87616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8386a6555a7b5822493f82f51f543a7cccbddf10", "chunk": "diff --git a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\nindex 78b70f5fac..86d46f721d 100644\n--- a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n+++ b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n\n@@ -547,53 +547,8 @@ public class Ldml2JsonConverter {\n                             throw new IllegalArgumentException(\"empty xpath in \" + filename + \" section \" + js.packageName + \"/\" + js.section);\n                         }\n                         if (type == RunType.rbnf) {\n-                            XPathParts xpp = XPathParts.getFrozenInstance(item.getFullPath());\n-                            final String sub = xpp.findAttributeValue(\"rbnfrule\", \"value\");\n-                            if(sub != null){\n-                                xpp = xpp.cloneAsThawed();\n-                                final String value = item.getValue();\n-                                xpp.removeAttribute(-1, \"value\");\n-                                xpp.addAttribute(sub, value);\n-                                item.setFullPath(xpp.toString());\n-                                item.setValue(\"\");\n-                            }\n-                        }\n-                        // ADJUST ACCESS=PRIVATE/PUBLIC BASED ON ICU RULE -- START\n-                        if (type == RunType.rbnf) {\n-                            String fullpath = item.getFullPath();\n-                            if (fullpath.contains(\"/ruleset\")) {\n-                                int ruleStartIndex = fullpath.indexOf(\"/ruleset[\");\n-                                String checkString = fullpath.substring(ruleStartIndex);\n-\n-                                int ruleEndIndex = 0;\n-                                if (checkString.contains(\"/\")) {\n-                                    ruleEndIndex = fullpath.indexOf(\"/\", ruleStartIndex + 1);\n-                                }\n-                                if (ruleEndIndex > ruleStartIndex) {\n-                                    String oldRulePath = fullpath.substring(ruleStartIndex, ruleEndIndex);\n-\n-                                    String newRulePath = oldRulePath;\n-                                    if (newRulePath.contains(\"@type\")) {\n-                                        int typeIndexStart = newRulePath.indexOf(\"\\\"\", newRulePath.indexOf(\"@type\"));\n-                                        int typeIndexEnd = newRulePath.indexOf(\"\\\"\", typeIndexStart + 1);\n-                                        String type = newRulePath.substring(typeIndexStart + 1, typeIndexEnd);\n-\n-                                        String newType = \"\";\n-                                        if (newRulePath.contains(\"@access\")) {\n-                                            newType = \"%%\" + type;\n-                                        } else {\n-                                            newType = \"%\" + type;\n-                                        }\n-                                        newRulePath = newRulePath.replace(type, newType);\n-                                        item.setPath(item.getPath().replace(type, newType));\n-                                    }\n-                                    fullpath = fullpath.replace(oldRulePath, newRulePath);\n-                                    item.setFullPath(fullpath);\n-\n-                                }\n-                            }\n+                            item.adjustRbnfPath();\n                         }\n-                        // ADJUST ACCESS=PRIVATE/PUBLIC BASED ON ICU RULE -- END\n \n                         // items in the identity section of a file should only ever contain the lowest level, even if using\n                         // resolving source, so if we have duplicates ( caused by attributes used as a value ) then suppress\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODI5Mw==", "url": "https://github.com/unicode-org/cldr/pull/834#discussion_r520808293", "bodyText": "Delete rather than comment out? Recent best practice for \"clean code\" is \"no commented-out code\"", "author": "btangmu", "createdAt": "2020-11-10T19:07:22Z", "path": "tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java", "diffHunk": "@@ -973,7 +967,7 @@ private void resolveArrayItems(JsonWriter out,\n         ArrayList<CldrNode> nodesForLastItem,\n         ArrayList<CldrItem> arrayItems)\n         throws IOException, ParseException {\n-        boolean rbnfFlag = false;\n+//        boolean rbnfFlag = false;", "originalCommit": "ed508745560722e042c030b133f24b82d8f87616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQ1Mw==", "url": "https://github.com/unicode-org/cldr/pull/834#discussion_r520808453", "bodyText": "Same below", "author": "btangmu", "createdAt": "2020-11-10T19:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8386a6555a7b5822493f82f51f543a7cccbddf10", "chunk": "diff --git a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\nindex 78b70f5fac..86d46f721d 100644\n--- a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n+++ b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n\n@@ -967,7 +922,6 @@ public class Ldml2JsonConverter {\n         ArrayList<CldrNode> nodesForLastItem,\n         ArrayList<CldrItem> arrayItems)\n         throws IOException, ParseException {\n-//        boolean rbnfFlag = false;\n         if (!arrayItems.isEmpty()) {\n             CldrItem firstItem = arrayItems.get(0);\n             if (firstItem.needsSort()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwOTExMQ==", "url": "https://github.com/unicode-org/cldr/pull/834#discussion_r520809111", "bodyText": "Subroutine? outputArrayItem is over 100 lines", "author": "btangmu", "createdAt": "2020-11-10T19:08:58Z", "path": "tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java", "diffHunk": "@@ -1274,10 +1268,17 @@ private void outputArrayItem(JsonWriter out, CldrItem item,\n             } else {\n                 if (!objName.equals(\"rbnfrule\")) {\n                     out.beginObject();\n-                }\n-                writeLeafNode(out, objName, attrAsValueMap, value, nodesNum, cldrNode.getName());\n-                if (!objName.equals(\"rbnfrule\")) {\n+                    writeLeafNode(out, objName, attrAsValueMap, value, nodesNum, cldrNode.getName());", "originalCommit": "ed508745560722e042c030b133f24b82d8f87616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8386a6555a7b5822493f82f51f543a7cccbddf10", "chunk": "diff --git a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\nindex 78b70f5fac..86d46f721d 100644\n--- a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n+++ b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n\n@@ -1246,41 +1188,16 @@ public class Ldml2JsonConverter {\n \n             Map<String, String> attrAsValueMap = cldrNode.getAttrAsValueMap();\n \n-            // ADJUST RADIX BASED ON ICU RULE -- BEGIN\n-            if (attrAsValueMap.containsKey(\"radix\")) {\n-                String radixValue = attrAsValueMap.get(\"radix\");\n-                attrAsValueMap.remove(\"radix\");\n-                for (Map.Entry<String, String> attributes : attrAsValueMap.entrySet()) {\n-                    String oldKey = attributes.getKey();\n-                    String newValue = attributes.getValue();\n-                    String newKey = oldKey + \"/\" + radixValue;\n-                    attrAsValueMap.remove(oldKey);\n-                    attrAsValueMap.put(newKey, newValue);\n-\n-                }\n-            }\n-            // ADJUST RADIX BASED ON ICU RULE -- END\n-\n             if (attrAsValueMap.isEmpty()) {\n                 out.beginObject();\n                 out.name(objName).value(value);\n                 out.endObject();\n+            } else if (objName.equals(\"rbnfrule\")) {\n+                writeRbnfLeafNode(out, item, attrAsValueMap);\n             } else {\n-                if (!objName.equals(\"rbnfrule\")) {\n-                    out.beginObject();\n-                    writeLeafNode(out, objName, attrAsValueMap, value, nodesNum, cldrNode.getName());\n-                    out.endObject();\n-                } else {\n-                    if(attrAsValueMap.size() != 1) {\n-                        throw new IllegalArgumentException(\"Error, attributes seem wrong for RBNF \" + item.getUntransformedPath());\n-                    }\n-                    Entry<String, String> entry = attrAsValueMap.entrySet().iterator().next();\n-                    out.beginArray()\n-                        .value(entry.getKey())\n-                        .value(entry.getValue())\n-                        .endArray();\n-                }\n-\n+                out.beginObject();\n+                writeLeafNode(out, objName, attrAsValueMap, value, nodesNum, cldrNode.getName());\n+                out.endObject();\n             }\n             // the last node is closed, remove it.\n             nodesInPath.remove(nodesNum - 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNTg4MA==", "url": "https://github.com/unicode-org/cldr/pull/834#discussion_r521435880", "bodyText": "@btangmu I completely missed that there are two \"if(type == RunType.rbnf)\" conditionals right after another. Will fix.", "author": "srl295", "createdAt": "2020-11-11T15:25:55Z", "path": "tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java", "diffHunk": "@@ -546,23 +547,16 @@ private int convertCldrItems(AtomicInteger readCount, int totalCount,\n                             throw new IllegalArgumentException(\"empty xpath in \" + filename + \" section \" + js.packageName + \"/\" + js.section);\n                         }\n                         if (type == RunType.rbnf) {\n-                            item.setValue(item.getValue().replace('\u2192', '>'));\n-                            item.setValue(item.getValue().replace('\u2190', '<'));\n-                            if (item.getFullPath().contains(\"@value\")) {\n-                                int indexStart = item.getFullPath().indexOf(\"@value\") + 8;\n-                                int indexEnd = item.getFullPath().indexOf(\"]\", indexStart) - 1;\n-                                if (indexStart >= 0 && indexEnd >= 0 && indexEnd > indexStart) {\n-                                    String sub = item.getFullPath().substring(indexStart, indexEnd);\n-                                    /* System.out.println(\"sub: \" + sub);\n-                                    System.out.println(\"full: \" + item.getFullPath());\n-                                    System.out.println(\"val: \" + item.getValue());*/\n-                                    item.setFullPath(item.getFullPath().replace(sub, item.getValue()));\n-                                    item.setFullPath(item.getFullPath().replaceAll(\"@value\", \"@\" + sub));\n-                                    //System.out.println(\"modifyfull: \" + item.getFullPath());\n-                                    item.setValue(\"\");\n-                                }\n+                            XPathParts xpp = XPathParts.getFrozenInstance(item.getFullPath());\n+                            final String sub = xpp.findAttributeValue(\"rbnfrule\", \"value\");\n+                            if(sub != null){\n+                                xpp = xpp.cloneAsThawed();\n+                                final String value = item.getValue();\n+                                xpp.removeAttribute(-1, \"value\");\n+                                xpp.addAttribute(sub, value);\n+                                item.setFullPath(xpp.toString());\n+                                item.setValue(\"\");\n                             }\n-\n                         }\n                         // ADJUST ACCESS=PRIVATE/PUBLIC BASED ON ICU RULE -- START\n                         if (type == RunType.rbnf) {", "originalCommit": "ed508745560722e042c030b133f24b82d8f87616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDEyOA==", "url": "https://github.com/unicode-org/cldr/pull/834#discussion_r521474128", "bodyText": "I missed that too", "author": "btangmu", "createdAt": "2020-11-11T16:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNTg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "8386a6555a7b5822493f82f51f543a7cccbddf10", "chunk": "diff --git a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\nindex 78b70f5fac..86d46f721d 100644\n--- a/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n+++ b/tools/java/src/main/java/org/unicode/cldr/json/Ldml2JsonConverter.java\n\n@@ -547,53 +547,8 @@ public class Ldml2JsonConverter {\n                             throw new IllegalArgumentException(\"empty xpath in \" + filename + \" section \" + js.packageName + \"/\" + js.section);\n                         }\n                         if (type == RunType.rbnf) {\n-                            XPathParts xpp = XPathParts.getFrozenInstance(item.getFullPath());\n-                            final String sub = xpp.findAttributeValue(\"rbnfrule\", \"value\");\n-                            if(sub != null){\n-                                xpp = xpp.cloneAsThawed();\n-                                final String value = item.getValue();\n-                                xpp.removeAttribute(-1, \"value\");\n-                                xpp.addAttribute(sub, value);\n-                                item.setFullPath(xpp.toString());\n-                                item.setValue(\"\");\n-                            }\n-                        }\n-                        // ADJUST ACCESS=PRIVATE/PUBLIC BASED ON ICU RULE -- START\n-                        if (type == RunType.rbnf) {\n-                            String fullpath = item.getFullPath();\n-                            if (fullpath.contains(\"/ruleset\")) {\n-                                int ruleStartIndex = fullpath.indexOf(\"/ruleset[\");\n-                                String checkString = fullpath.substring(ruleStartIndex);\n-\n-                                int ruleEndIndex = 0;\n-                                if (checkString.contains(\"/\")) {\n-                                    ruleEndIndex = fullpath.indexOf(\"/\", ruleStartIndex + 1);\n-                                }\n-                                if (ruleEndIndex > ruleStartIndex) {\n-                                    String oldRulePath = fullpath.substring(ruleStartIndex, ruleEndIndex);\n-\n-                                    String newRulePath = oldRulePath;\n-                                    if (newRulePath.contains(\"@type\")) {\n-                                        int typeIndexStart = newRulePath.indexOf(\"\\\"\", newRulePath.indexOf(\"@type\"));\n-                                        int typeIndexEnd = newRulePath.indexOf(\"\\\"\", typeIndexStart + 1);\n-                                        String type = newRulePath.substring(typeIndexStart + 1, typeIndexEnd);\n-\n-                                        String newType = \"\";\n-                                        if (newRulePath.contains(\"@access\")) {\n-                                            newType = \"%%\" + type;\n-                                        } else {\n-                                            newType = \"%\" + type;\n-                                        }\n-                                        newRulePath = newRulePath.replace(type, newType);\n-                                        item.setPath(item.getPath().replace(type, newType));\n-                                    }\n-                                    fullpath = fullpath.replace(oldRulePath, newRulePath);\n-                                    item.setFullPath(fullpath);\n-\n-                                }\n-                            }\n+                            item.adjustRbnfPath();\n                         }\n-                        // ADJUST ACCESS=PRIVATE/PUBLIC BASED ON ICU RULE -- END\n \n                         // items in the identity section of a file should only ever contain the lowest level, even if using\n                         // resolving source, so if we have duplicates ( caused by attributes used as a value ) then suppress\n"}}, {"oid": "8386a6555a7b5822493f82f51f543a7cccbddf10", "url": "https://github.com/unicode-org/cldr/commit/8386a6555a7b5822493f82f51f543a7cccbddf10", "message": "CLDR-10883 improving JSON RBNF\n\n- simplify so there are fewer rbnf special cases\n- change to simpler tuple form:\n \"%spellout-cardinal\": [ [\"-x\",\"\u10db\u10d8\u10dc\u10e3\u10e1 \u2192\u2192;\"],[\"x.x\",\"\u2190\u2190 \u10db\u10eb\u10d8\u10db\u10d4 \u2192\u2192;\"],\n to preserve ordering", "committedDate": "2020-11-11T16:55:21Z", "type": "commit"}, {"oid": "8386a6555a7b5822493f82f51f543a7cccbddf10", "url": "https://github.com/unicode-org/cldr/commit/8386a6555a7b5822493f82f51f543a7cccbddf10", "message": "CLDR-10883 improving JSON RBNF\n\n- simplify so there are fewer rbnf special cases\n- change to simpler tuple form:\n \"%spellout-cardinal\": [ [\"-x\",\"\u10db\u10d8\u10dc\u10e3\u10e1 \u2192\u2192;\"],[\"x.x\",\"\u2190\u2190 \u10db\u10eb\u10d8\u10db\u10d4 \u2192\u2192;\"],\n to preserve ordering", "committedDate": "2020-11-11T16:55:21Z", "type": "forcePushed"}]}