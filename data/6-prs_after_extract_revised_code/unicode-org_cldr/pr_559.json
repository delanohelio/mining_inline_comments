{"pr_number": 559, "pr_title": "CLDR-13947 investigate checking consistency", "pr_createdAt": "2020-07-10T04:18:24Z", "pr_url": "https://github.com/unicode-org/cldr/pull/559", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyMzgyNg==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453123826", "bodyText": "Some changes are just Eclipse fixing formatting. Recommend Hide whitespace differences in Gear menu.", "author": "macchiati", "createdAt": "2020-07-10T23:47:30Z", "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java", "diffHunk": "@@ -88,7 +93,7 @@ public void oldTestInvariantPaths() {\n         SupplementalDataInfo sdi = SupplementalDataInfo\n             .getInstance(CLDRPaths.DEFAULT_SUPPLEMENTAL_DIRECTORY);\n \n-        Set<String> allPaths = new HashSet<String>();\n+        Set<String> allPaths = new HashSet<>();", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyMzk3MQ==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453123971", "bodyText": "Add some explicit tests for logical groups, to make sure we have all and only the right paths.", "author": "macchiati", "createdAt": "2020-07-10T23:48:11Z", "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java", "diffHunk": "@@ -664,4 +669,55 @@ private void checkBreakingLogicalGrouping(String localeId) {\n             ++count;\n         }\n     }\n+\n+    public void testLogicalGroupingSamples() {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbb975c0d31c75054a387a6c0db0143f67088d94", "chunk": "diff --git a/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java b/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java\nindex f452158239..e69f44e811 100644\n--- a/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java\n+++ b/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java\n\n@@ -674,6 +676,84 @@ public class TestCoverageLevel extends TestFmwkPlus {\n         System.out.println(GrammarInfo.SEED_LOCALES);\n         String[][] test = {\n             {\"de\",\n+                \"SINGLETON\",\n+                \"//ldml/localeDisplayNames/localeDisplayPattern/localePattern\",\n+            },\n+            {\"de\",\n+                \"METAZONE\",\n+                \"//ldml/dates/timeZoneNames/metazone[@type=\\\"Alaska\\\"]/long/generic\",\n+                \"//ldml/dates/timeZoneNames/metazone[@type=\\\"Alaska\\\"]/long/standard\",\n+                \"//ldml/dates/timeZoneNames/metazone[@type=\\\"Alaska\\\"]/long/daylight\",\n+            },\n+            {\"de\",\n+                \"DAYS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"sun\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"mon\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"tue\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"wed\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"thu\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"fri\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"sat\\\"]\",\n+            },\n+            {\"nl\",\n+                \"DAY_PERIODS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"morning1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"afternoon1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"evening1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"night1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"midnight\\\"]\",\n+            },\n+            {\"de\",\n+                \"QUARTERS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"2\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"3\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"4\\\"]\",\n+            },\n+            {\"de\",\n+                \"MONTHS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"2\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"3\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"4\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"5\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"6\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"7\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"8\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"9\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"10\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"11\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"12\\\"]\",\n+            },\n+            {\"de\",\n+                \"RELATIVE\",\n+                \"//ldml/dates/fields/field[@type=\\\"week-short\\\"]/relative[@type=\\\"-1\\\"]\",\n+                \"//ldml/dates/fields/field[@type=\\\"week-short\\\"]/relative[@type=\\\"0\\\"]\",\n+                \"//ldml/dates/fields/field[@type=\\\"week-short\\\"]/relative[@type=\\\"1\\\"]\",\n+            },\n+            {\"de\",\n+                \"DECIMAL_FORMAT_LENGTH\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"1000\\\"][@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"1000\\\"][@count=\\\"other\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"10000\\\"][@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"10000\\\"][@count=\\\"other\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"100000\\\"][@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"100000\\\"][@count=\\\"other\\\"]\",\n+            },\n+            {\"cs\",\n+                \"COUNT\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"few\\\"]\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"many\\\"]\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"other\\\"]\",\n+            },\n+            {\"de\",\n+                \"COUNT\",\n+                \"//ldml/numbers/minimalPairs/pluralMinimalPairs[@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/minimalPairs/pluralMinimalPairs[@count=\\\"other\\\"]\",\n+            },\n+            {\"de\",\n+                \"COUNT_CASE\",\n                 \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"accusative\\\"]\",\n                 \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"dative\\\"]\",\n                 \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"genitive\\\"]\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDAxMQ==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124011", "bodyText": "Utility for comparison", "author": "macchiati", "createdAt": "2020-07-10T23:48:26Z", "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java", "diffHunk": "@@ -664,4 +669,55 @@ private void checkBreakingLogicalGrouping(String localeId) {\n             ++count;\n         }\n     }\n+\n+    public void testLogicalGroupingSamples() {\n+        System.out.println(GrammarInfo.SEED_LOCALES);\n+        String[][] test = {\n+            {\"de\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"accusative\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"dative\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"genitive\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"other\\\"][@case=\\\"accusative\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"other\\\"][@case=\\\"dative\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"other\\\"][@case=\\\"genitive\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"other\\\"]\",\n+            },\n+            {\"fr\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/compoundUnit[@type=\\\"power2\\\"]/compoundUnitPattern1[@count=\\\"one\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/compoundUnit[@type=\\\"power2\\\"]/compoundUnitPattern1[@count=\\\"one\\\"][@gender=\\\"feminine\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/compoundUnit[@type=\\\"power2\\\"]/compoundUnitPattern1[@count=\\\"other\\\"]\",\n+                \"//ldml/units/unitLength[@type=\\\"long\\\"]/compoundUnit[@type=\\\"power2\\\"]/compoundUnitPattern1[@count=\\\"other\\\"][@gender=\\\"feminine\\\"]\",\n+            }\n+        };\n+        for (String[] row : test) {\n+            String locale = row[0];\n+            CLDRFile cldrFile = testInfo.getCldrFactory().make(locale, true);\n+            List<String> paths = Arrays.asList(row);\n+            paths = paths.subList(1, paths.size());\n+            Set<String> expected = new TreeSet<>(paths);\n+            Set<Multimap<String, String>> seen = new LinkedHashSet<>();\n+            for (String path : expected) {\n+                Set<String> grouping = new TreeSet<>(LogicalGrouping.getPaths(cldrFile, path));\n+                final Multimap<String, String> deltaValue = delta(expected, grouping);\n+                if (seen.add(deltaValue)) {\n+                    assertEquals(\"Logical group for \" + path, ImmutableListMultimap.of(), deltaValue);\n+                }\n+            }\n+        }\n+    }\n+\n+    private Multimap<String,String> delta(Set<String> expected, Set<String> grouping) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbb975c0d31c75054a387a6c0db0143f67088d94", "chunk": "diff --git a/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java b/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java\nindex f452158239..e69f44e811 100644\n--- a/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java\n+++ b/tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCoverageLevel.java\n\n@@ -674,6 +676,84 @@ public class TestCoverageLevel extends TestFmwkPlus {\n         System.out.println(GrammarInfo.SEED_LOCALES);\n         String[][] test = {\n             {\"de\",\n+                \"SINGLETON\",\n+                \"//ldml/localeDisplayNames/localeDisplayPattern/localePattern\",\n+            },\n+            {\"de\",\n+                \"METAZONE\",\n+                \"//ldml/dates/timeZoneNames/metazone[@type=\\\"Alaska\\\"]/long/generic\",\n+                \"//ldml/dates/timeZoneNames/metazone[@type=\\\"Alaska\\\"]/long/standard\",\n+                \"//ldml/dates/timeZoneNames/metazone[@type=\\\"Alaska\\\"]/long/daylight\",\n+            },\n+            {\"de\",\n+                \"DAYS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"sun\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"mon\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"tue\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"wed\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"thu\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"fri\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/days/dayContext[@type=\\\"format\\\"]/dayWidth[@type=\\\"wide\\\"]/day[@type=\\\"sat\\\"]\",\n+            },\n+            {\"nl\",\n+                \"DAY_PERIODS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"morning1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"afternoon1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"evening1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"night1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/dayPeriods/dayPeriodContext[@type=\\\"format\\\"]/dayPeriodWidth[@type=\\\"wide\\\"]/dayPeriod[@type=\\\"midnight\\\"]\",\n+            },\n+            {\"de\",\n+                \"QUARTERS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"2\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"3\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/quarters/quarterContext[@type=\\\"format\\\"]/quarterWidth[@type=\\\"wide\\\"]/quarter[@type=\\\"4\\\"]\",\n+            },\n+            {\"de\",\n+                \"MONTHS\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"1\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"2\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"3\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"4\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"5\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"6\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"7\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"8\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"9\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"10\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"11\\\"]\",\n+                \"//ldml/dates/calendars/calendar[@type=\\\"gregorian\\\"]/months/monthContext[@type=\\\"format\\\"]/monthWidth[@type=\\\"wide\\\"]/month[@type=\\\"12\\\"]\",\n+            },\n+            {\"de\",\n+                \"RELATIVE\",\n+                \"//ldml/dates/fields/field[@type=\\\"week-short\\\"]/relative[@type=\\\"-1\\\"]\",\n+                \"//ldml/dates/fields/field[@type=\\\"week-short\\\"]/relative[@type=\\\"0\\\"]\",\n+                \"//ldml/dates/fields/field[@type=\\\"week-short\\\"]/relative[@type=\\\"1\\\"]\",\n+            },\n+            {\"de\",\n+                \"DECIMAL_FORMAT_LENGTH\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"1000\\\"][@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"1000\\\"][@count=\\\"other\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"10000\\\"][@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"10000\\\"][@count=\\\"other\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"100000\\\"][@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/decimalFormats[@numberSystem=\\\"latn\\\"]/decimalFormatLength[@type=\\\"long\\\"]/decimalFormat[@type=\\\"standard\\\"]/pattern[@type=\\\"100000\\\"][@count=\\\"other\\\"]\",\n+            },\n+            {\"cs\",\n+                \"COUNT\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"few\\\"]\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"many\\\"]\",\n+                \"//ldml/numbers/currencies/currency[@type=\\\"BMD\\\"]/displayName[@count=\\\"other\\\"]\",\n+            },\n+            {\"de\",\n+                \"COUNT\",\n+                \"//ldml/numbers/minimalPairs/pluralMinimalPairs[@count=\\\"one\\\"]\",\n+                \"//ldml/numbers/minimalPairs/pluralMinimalPairs[@count=\\\"other\\\"]\",\n+            },\n+            {\"de\",\n+                \"COUNT_CASE\",\n                 \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"accusative\\\"]\",\n                 \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"dative\\\"]\",\n                 \"//ldml/units/unitLength[@type=\\\"long\\\"]/unit[@type=\\\"area-square-kilometer\\\"]/unitPattern[@count=\\\"one\\\"][@case=\\\"genitive\\\"]\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDA2MQ==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124061", "bodyText": "New subtype, used for warnings.", "author": "macchiati", "createdAt": "2020-07-10T23:48:42Z", "path": "tools/java/org/unicode/cldr/test/CheckCLDR.java", "diffHunk": "@@ -717,7 +717,7 @@ public CheckCLDR setCldrFileToCheck(CLDRFile cldrFileToCheck, Options options,\n             invalidPlaceHolder, asciiQuotesNotAllowed, badMinimumGroupingDigits, inconsistentPeriods,\n             inheritanceMarkerNotAllowed, invalidDurationUnitPattern, invalidDelimiter, illegalCharactersInPattern,\n             badParseLenient, tooManyValues, invalidSymbol, invalidGenderCode,\n-            mismatchedUnitComponent, longPowerWithSubscripts\n+            mismatchedUnitComponent, longPowerWithSubscripts, largerDifferences", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbb975c0d31c75054a387a6c0db0143f67088d94", "chunk": "diff --git a/tools/java/org/unicode/cldr/test/CheckCLDR.java b/tools/java/org/unicode/cldr/test/CheckCLDR.java\nindex 05c172d213..2430973887 100644\n--- a/tools/java/org/unicode/cldr/test/CheckCLDR.java\n+++ b/tools/java/org/unicode/cldr/test/CheckCLDR.java\n\n@@ -717,7 +717,7 @@ abstract public class CheckCLDR {\n             invalidPlaceHolder, asciiQuotesNotAllowed, badMinimumGroupingDigits, inconsistentPeriods,\n             inheritanceMarkerNotAllowed, invalidDurationUnitPattern, invalidDelimiter, illegalCharactersInPattern,\n             badParseLenient, tooManyValues, invalidSymbol, invalidGenderCode,\n-            mismatchedUnitComponent, longPowerWithSubscripts, largerDifferences\n+            mismatchedUnitComponent, longPowerWithSubscripts, gapsInPlaceholderNumbers, duplicatePlaceholders, largerDifferences\n             ;\n \n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDIxMw==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124213", "bodyText": "add new test for count, count+case, and count+case+gender. Produces warning.", "author": "macchiati", "createdAt": "2020-07-10T23:49:33Z", "path": "tools/java/org/unicode/cldr/test/CheckLogicalGroupings.java", "diffHunk": "@@ -88,10 +103,33 @@ public CheckCLDR handleCheck(String path, String fullPath, String value, Options\n             return this;\n         }\n \n-        Set<String> paths = LogicalGrouping.getPaths(getCldrFileToCheck(), path);\n+        Output<PathType> pathType = new Output<>();\n+        Set<String> paths = LogicalGrouping.getPaths(getCldrFileToCheck(), path, pathType);\n         if (paths == null || paths.size() < 2) return this; // skip if not part of a logical grouping\n \n-        // TODO\n+        // check the edit distances for count, gender, case", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDMzNg==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124336", "bodyText": "Utility for making sure we can see invisible differences.", "author": "macchiati", "createdAt": "2020-07-10T23:50:01Z", "path": "tools/java/org/unicode/cldr/test/CheckLogicalGroupings.java", "diffHunk": "@@ -205,4 +244,108 @@ public CheckCLDR handleCheck(String path, String fullPath, String value, Options\n         }\n         return this;\n     }\n+\n+    static final Transliterator SHOW_INVISIBLES = Transliterator.createFromRules(", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDQyNg==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124426", "bodyText": "Get the maximum difference among members of a logical group.", "author": "macchiati", "createdAt": "2020-07-10T23:50:31Z", "path": "tools/java/org/unicode/cldr/test/CheckLogicalGroupings.java", "diffHunk": "@@ -205,4 +244,108 @@ public CheckCLDR handleCheck(String path, String fullPath, String value, Options\n         }\n         return this;\n     }\n+\n+    static final Transliterator SHOW_INVISIBLES = Transliterator.createFromRules(\n+        \"show\",\n+        \"([[:C:][:Z:][:whitespace:][:Default_Ignorable_Code_Point:]-[\\\\u0020]]) > &hex/perl($1);\",\n+        Transliterator.FORWARD);\n+\n+    public static String showInvisibles(String value) {\n+        return SHOW_INVISIBLES.transform(value);\n+    }\n+\n+    public static String showInvisibles(int codePoint) {\n+        return showInvisibles(With.fromCodePoint(codePoint));\n+    }\n+\n+    public static String showInvisibles(Multiset<?> codePointCounts) {\n+        StringBuilder b = new StringBuilder().append('{');\n+        for (Entry<?> entry : codePointCounts.entrySet()) {\n+            if (b.length() > 1) {\n+                b.append(\", \");\n+            }\n+            Object element = entry.getElement();\n+            b.append(element instanceof Integer ? showInvisibles((int) element) : showInvisibles(element.toString()));\n+            if (entry.getCount() > 1) {\n+                b.append('\u2a31').append(entry.getCount());\n+            }\n+        }\n+        return b.append('}').toString();\n+    }\n+\n+    private int getMaxDistance(String path, String value, Set<String> paths, Multiset<String> values) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDYwMQ==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124601", "bodyText": "Fingerprint is a measure of a value's characters. Currently just a Multiset with counts for characters; later it could be more sophisticated.", "author": "macchiati", "createdAt": "2020-07-10T23:51:31Z", "path": "tools/java/org/unicode/cldr/test/CheckLogicalGroupings.java", "diffHunk": "@@ -205,4 +244,108 @@ public CheckCLDR handleCheck(String path, String fullPath, String value, Options\n         }\n         return this;\n     }\n+\n+    static final Transliterator SHOW_INVISIBLES = Transliterator.createFromRules(\n+        \"show\",\n+        \"([[:C:][:Z:][:whitespace:][:Default_Ignorable_Code_Point:]-[\\\\u0020]]) > &hex/perl($1);\",\n+        Transliterator.FORWARD);\n+\n+    public static String showInvisibles(String value) {\n+        return SHOW_INVISIBLES.transform(value);\n+    }\n+\n+    public static String showInvisibles(int codePoint) {\n+        return showInvisibles(With.fromCodePoint(codePoint));\n+    }\n+\n+    public static String showInvisibles(Multiset<?> codePointCounts) {\n+        StringBuilder b = new StringBuilder().append('{');\n+        for (Entry<?> entry : codePointCounts.entrySet()) {\n+            if (b.length() > 1) {\n+                b.append(\", \");\n+            }\n+            Object element = entry.getElement();\n+            b.append(element instanceof Integer ? showInvisibles((int) element) : showInvisibles(element.toString()));\n+            if (entry.getCount() > 1) {\n+                b.append('\u2a31').append(entry.getCount());\n+            }\n+        }\n+        return b.append('}').toString();\n+    }\n+\n+    private int getMaxDistance(String path, String value, Set<String> paths, Multiset<String> values) {\n+        values.clear();\n+        final CLDRFile cldrFileToCheck = getCldrFileToCheck();\n+        Set<Fingerprint> fingerprints = new HashSet<>();\n+        for (String path1 : paths) {\n+            final String pathValue = cleanSpaces(path.contentEquals(path1) ? value : cldrFileToCheck.getWinningValue(path1));\n+            values.add(pathValue);\n+            fingerprints.add(Fingerprint.make(pathValue));\n+        }\n+        return Fingerprint.maxDistanceBetween(fingerprints);\n+    }\n+\n+    private static final UnicodeMap<String> OTHER_SPACES = new UnicodeMap<String>().putAll(new UnicodeSet(\"[[:Z:][:S:][:whitespace:]]\"), \" \").freeze();\n+    public static String cleanSpaces(String pathValue) {\n+        return OTHER_SPACES.transform(pathValue);\n+    }\n+\n+    // Later\n+    private static ConcurrentHashMap<String, Fingerprint> FINGERPRINT_CACHE = new ConcurrentHashMap<>();", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDY5Mw==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124693", "bodyText": "Use a path link so we can link directly from a spreadsheet view.", "author": "macchiati", "createdAt": "2020-07-10T23:52:06Z", "path": "tools/java/org/unicode/cldr/test/ConsoleCheckCLDR.java", "diffHunk": "@@ -1558,7 +1562,7 @@ private static void showValue(CLDRFile cldrFile, String prettyPath, String local\n                     + \"\\t\u3010\" + example + \"\u3011\"\n                     + \"\\t\u2045\" + subType + \"\u2046\"\n                     + \"\\t\u276e\" + statusString + \"\u276f\"\n-                    + \"\\t\" + fullPath\n+                    + \"\\t\" + pathLink", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNDk1NA==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453124954", "bodyText": "Nothing but some immaterial formatting diffs.", "author": "macchiati", "createdAt": "2020-07-10T23:53:40Z", "path": "tools/java/org/unicode/cldr/util/CLDRFile.java", "diffHunk": "@@ -3889,20 +3888,23 @@ public LocaleStringProvider makeOverridingStringProvider(Map<String, String> pat\n     }\n \n     public class OverridingStringProvider implements LocaleStringProvider {\n-        private final Map<String,String> pathAndValueOverrides;\n+        private final Map<String, String> pathAndValueOverrides;\n \n         public OverridingStringProvider(Map<String, String> pathAndValueOverrides) {\n             this.pathAndValueOverrides = pathAndValueOverrides;\n         }\n+", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTA1OA==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125058", "bodyText": "Add check so it is safe to pass in null. Makes caller code simpler.", "author": "macchiati", "createdAt": "2020-07-10T23:54:22Z", "path": "tools/java/org/unicode/cldr/util/GrammarInfo.java", "diffHunk": "@@ -52,7 +52,7 @@ public CharSequence getSymbol() {\n             return symbol;\n         }\n         public String getDefault(Collection<String> values) {\n-            return this == grammaticalGender && !values.contains(\"neuter\") ? \"masculine\" : defaultValue;\n+            return this == grammaticalGender && values != null && !values.contains(\"neuter\") ? \"masculine\" : defaultValue;", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTE0Nw==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125147", "bodyText": "Optional parameter to return the type", "author": "macchiati", "createdAt": "2020-07-10T23:54:52Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -96,7 +99,7 @@\n      *\n      * Reference: https://unicode.org/cldr/trac/ticket/11854\n      */\n-    public static Set<String> getPaths(CLDRFile cldrFile, String path) {\n+    public static Set<String> getPaths(CLDRFile cldrFile, String path, Output<PathType> pathTypeOut) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTMwNw==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125307", "bodyText": "extract method so we can call elsewhere.", "author": "macchiati", "createdAt": "2020-07-10T23:55:38Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -364,51 +373,90 @@ void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts)\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n-                PluralInfo pluralInfo = getPluralInfo(cldrFile);\n-                Set<Count> pluralTypes = pluralInfo.getCounts();\n-                String lastElement = parts.getElement(-1);\n-                for (Count count : pluralTypes) {\n-                    parts.setAttribute(lastElement, \"count\", count.toString());\n-                    set.add(parts.toString());\n-                }\n+                addCaseOnly(set, cldrFile, parts);", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTQyOA==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125428", "bodyText": "Tweak the code to match what rawExtraPaths does.", "author": "macchiati", "createdAt": "2020-07-10T23:56:18Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -364,51 +373,90 @@ void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts)\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n-                PluralInfo pluralInfo = getPluralInfo(cldrFile);\n-                Set<Count> pluralTypes = pluralInfo.getCounts();\n-                String lastElement = parts.getElement(-1);\n-                for (Count count : pluralTypes) {\n-                    parts.setAttribute(lastElement, \"count\", count.toString());\n-                    set.add(parts.toString());\n-                }\n+                addCaseOnly(set, cldrFile, parts);\n             }\n         },\n-        CASE {\n+        COUNT_CASE {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTQ4MA==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125480", "bodyText": "Similar tweak to code.", "author": "macchiati", "createdAt": "2020-07-10T23:56:33Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -364,51 +373,90 @@ void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts)\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n-                PluralInfo pluralInfo = getPluralInfo(cldrFile);\n-                Set<Count> pluralTypes = pluralInfo.getCounts();\n-                String lastElement = parts.getElement(-1);\n-                for (Count count : pluralTypes) {\n-                    parts.setAttribute(lastElement, \"count\", count.toString());\n-                    set.add(parts.toString());\n-                }\n+                addCaseOnly(set, cldrFile, parts);\n             }\n         },\n-        CASE {\n+        COUNT_CASE {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n+                }\n                 GrammarInfo grammarInfo = supplementalData.getGrammarInfo(cldrFile.getLocaleID());\n-                //Collection<String> genders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n-\n-                if (grammarInfo != null) {\n-                    Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n-                    for (String case1 : rawCases) {\n-                        parts.setAttribute(-1, \"case\", case1);\n-                        set.add(parts.toString());\n-                    }\n+                if (grammarInfo == null\n+                    || (parts.getElement(3).equals(\"unitLength\")\n+                        && GrammarInfo.SPECIAL_TRANSLATION_UNITS.contains(parts.getAttributeValue(3, \"type\")))) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n                 }\n+                Set<Count> pluralTypes = getPluralInfo(cldrFile).getCounts();\n+                Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n+                setGrammarAttributes(set, parts, pluralTypes, rawCases, null);\n+\n             }\n         },\n-        GENDER {\n+        COUNT_CASE_GENDER {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTU3NA==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125574", "bodyText": "Make sure we consider plurals, case, and gender equally.", "author": "macchiati", "createdAt": "2020-07-10T23:57:01Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -364,51 +373,90 @@ void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts)\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n-                PluralInfo pluralInfo = getPluralInfo(cldrFile);\n-                Set<Count> pluralTypes = pluralInfo.getCounts();\n-                String lastElement = parts.getElement(-1);\n-                for (Count count : pluralTypes) {\n-                    parts.setAttribute(lastElement, \"count\", count.toString());\n-                    set.add(parts.toString());\n-                }\n+                addCaseOnly(set, cldrFile, parts);\n             }\n         },\n-        CASE {\n+        COUNT_CASE {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n+                }\n                 GrammarInfo grammarInfo = supplementalData.getGrammarInfo(cldrFile.getLocaleID());\n-                //Collection<String> genders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n-\n-                if (grammarInfo != null) {\n-                    Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n-                    for (String case1 : rawCases) {\n-                        parts.setAttribute(-1, \"case\", case1);\n-                        set.add(parts.toString());\n-                    }\n+                if (grammarInfo == null\n+                    || (parts.getElement(3).equals(\"unitLength\")\n+                        && GrammarInfo.SPECIAL_TRANSLATION_UNITS.contains(parts.getAttributeValue(3, \"type\")))) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n                 }\n+                Set<Count> pluralTypes = getPluralInfo(cldrFile).getCounts();\n+                Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n+                setGrammarAttributes(set, parts, pluralTypes, rawCases, null);\n+\n             }\n         },\n-        GENDER {\n+        COUNT_CASE_GENDER {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n+                }\n                 GrammarInfo grammarInfo = supplementalData.getGrammarInfo(cldrFile.getLocaleID());", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTY0Nw==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125647", "bodyText": "Refactored code for just case.", "author": "macchiati", "createdAt": "2020-07-10T23:57:20Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -364,51 +373,90 @@ void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts)\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n-                PluralInfo pluralInfo = getPluralInfo(cldrFile);\n-                Set<Count> pluralTypes = pluralInfo.getCounts();\n-                String lastElement = parts.getElement(-1);\n-                for (Count count : pluralTypes) {\n-                    parts.setAttribute(lastElement, \"count\", count.toString());\n-                    set.add(parts.toString());\n-                }\n+                addCaseOnly(set, cldrFile, parts);\n             }\n         },\n-        CASE {\n+        COUNT_CASE {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n+                }\n                 GrammarInfo grammarInfo = supplementalData.getGrammarInfo(cldrFile.getLocaleID());\n-                //Collection<String> genders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n-\n-                if (grammarInfo != null) {\n-                    Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n-                    for (String case1 : rawCases) {\n-                        parts.setAttribute(-1, \"case\", case1);\n-                        set.add(parts.toString());\n-                    }\n+                if (grammarInfo == null\n+                    || (parts.getElement(3).equals(\"unitLength\")\n+                        && GrammarInfo.SPECIAL_TRANSLATION_UNITS.contains(parts.getAttributeValue(3, \"type\")))) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n                 }\n+                Set<Count> pluralTypes = getPluralInfo(cldrFile).getCounts();\n+                Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n+                setGrammarAttributes(set, parts, pluralTypes, rawCases, null);\n+\n             }\n         },\n-        GENDER {\n+        COUNT_CASE_GENDER {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n+                }\n                 GrammarInfo grammarInfo = supplementalData.getGrammarInfo(cldrFile.getLocaleID());\n-\n-                if (grammarInfo != null) {\n-                    Collection<String> genders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n-                    for (String gender : genders) {\n-                        parts.setAttribute(-1, \"gender\", gender);\n-                        set.add(parts.toString());\n-                    }\n+                if (grammarInfo == null) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n                 }\n+                Set<Count> pluralTypes = getPluralInfo(cldrFile).getCounts();\n+                Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n+                Collection<String> rawGenders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n+                setGrammarAttributes(set, parts, pluralTypes, rawCases, rawGenders);\n             }\n         }\n \n         ;\n \n         abstract void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts);\n \n+        public void addCaseOnly(Set<String> set, CLDRFile cldrFile, XPathParts parts) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTcyNA==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125724", "bodyText": "refactored code to do all the grammatical features right.", "author": "macchiati", "createdAt": "2020-07-10T23:57:44Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -364,51 +373,90 @@ void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts)\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n-                PluralInfo pluralInfo = getPluralInfo(cldrFile);\n-                Set<Count> pluralTypes = pluralInfo.getCounts();\n-                String lastElement = parts.getElement(-1);\n-                for (Count count : pluralTypes) {\n-                    parts.setAttribute(lastElement, \"count\", count.toString());\n-                    set.add(parts.toString());\n-                }\n+                addCaseOnly(set, cldrFile, parts);\n             }\n         },\n-        CASE {\n+        COUNT_CASE {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n+                }\n                 GrammarInfo grammarInfo = supplementalData.getGrammarInfo(cldrFile.getLocaleID());\n-                //Collection<String> genders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n-\n-                if (grammarInfo != null) {\n-                    Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n-                    for (String case1 : rawCases) {\n-                        parts.setAttribute(-1, \"case\", case1);\n-                        set.add(parts.toString());\n-                    }\n+                if (grammarInfo == null\n+                    || (parts.getElement(3).equals(\"unitLength\")\n+                        && GrammarInfo.SPECIAL_TRANSLATION_UNITS.contains(parts.getAttributeValue(3, \"type\")))) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n                 }\n+                Set<Count> pluralTypes = getPluralInfo(cldrFile).getCounts();\n+                Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n+                setGrammarAttributes(set, parts, pluralTypes, rawCases, null);\n+\n             }\n         },\n-        GENDER {\n+        COUNT_CASE_GENDER {\n             @Override\n             @SuppressWarnings(\"unused\")\n             void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts) {\n+                if (!GrammarInfo.SEED_LOCALES.contains(cldrFile.getLocaleID())) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n+                }\n                 GrammarInfo grammarInfo = supplementalData.getGrammarInfo(cldrFile.getLocaleID());\n-\n-                if (grammarInfo != null) {\n-                    Collection<String> genders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n-                    for (String gender : genders) {\n-                        parts.setAttribute(-1, \"gender\", gender);\n-                        set.add(parts.toString());\n-                    }\n+                if (grammarInfo == null) {\n+                    addCaseOnly(set, cldrFile, parts);\n+                    return;\n                 }\n+                Set<Count> pluralTypes = getPluralInfo(cldrFile).getCounts();\n+                Collection<String> rawCases = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalCase, GrammaticalScope.units);\n+                Collection<String> rawGenders = grammarInfo.get(GrammaticalTarget.nominal, GrammaticalFeature.grammaticalGender, GrammaticalScope.units);\n+                setGrammarAttributes(set, parts, pluralTypes, rawCases, rawGenders);\n             }\n         }\n \n         ;\n \n         abstract void addPaths(Set<String> set, CLDRFile cldrFile, String path, XPathParts parts);\n \n+        public void addCaseOnly(Set<String> set, CLDRFile cldrFile, XPathParts parts) {\n+            Set<Count> pluralTypes = getPluralInfo(cldrFile).getCounts();\n+            for (Count count : pluralTypes) {\n+                parts.setAttribute(-1, \"count\", count.toString());\n+                set.add(parts.toString());\n+            }\n+        }\n+\n+        public void setGrammarAttributes(Set<String> set, XPathParts parts, Set<Count> pluralTypes, Collection<String> rawCases, Collection<String> rawGenders) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTgzMQ==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125831", "bodyText": "Be more specific about handling the two kinds of unit lengths", "author": "macchiati", "createdAt": "2020-07-10T23:58:25Z", "path": "tools/java/org/unicode/cldr/util/LogicalGrouping.java", "diffHunk": "@@ -460,11 +508,13 @@ private static PathType getPathTypeFromPath(String path) {\n             if (path.indexOf(\"/decimalFormatLength\") > 0) {\n                 return PathType.DECIMAL_FORMAT_LENGTH;\n             }\n-            if (path.indexOf(\"[@gender=\") > 0) {\n-                return PathType.GENDER;\n-            }\n-            if (path.indexOf(\"[@case=\") > 0) {\n-                return PathType.CASE;\n+            if (path.indexOf(\"/unitLength[@type=\\\"long\\\"]\") > 0) {", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyNTk3MQ==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r453125971", "bodyText": "This was a needless throw of an error. Null should just mean use default.", "author": "macchiati", "createdAt": "2020-07-10T23:59:13Z", "path": "tools/java/org/unicode/cldr/util/PathHeader.java", "diffHunk": "@@ -426,16 +426,15 @@ private PathHeader(SectionId sectionId, PageId pageId, String header,\n     }\n \n     /**\n-     * Return a factory for use in creating the headers. This should be cached.\n-     * The calls are thread-safe. The englishFile sets a static for now; after\n-     * the first time, null can be passed.\n+     * Return a factory for use in creating the headers. This is cached after first use.\n+     * The calls are thread-safe. Null gets the default (CLDRConfig) english file.\n      *\n      * @param englishFile\n      */\n     public static Factory getFactory(CLDRFile englishFile) {\n         if (factorySingleton == null) {\n             if (englishFile == null) {\n-                throw new IllegalArgumentException(\"English CLDRFile must not be null\");\n+                englishFile = CLDRConfig.getInstance().getEnglish();", "originalCommit": "17ecb09422c589e97d52c58c01a48f187804deb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "bbb975c0d31c75054a387a6c0db0143f67088d94", "url": "https://github.com/unicode-org/cldr/commit/bbb975c0d31c75054a387a6c0db0143f67088d94", "message": "CLDR-13947 investigate checking consistency\n\nSee #559", "committedDate": "2020-07-14T00:26:58Z", "type": "commit"}, {"oid": "bbb975c0d31c75054a387a6c0db0143f67088d94", "url": "https://github.com/unicode-org/cldr/commit/bbb975c0d31c75054a387a6c0db0143f67088d94", "message": "CLDR-13947 investigate checking consistency\n\nSee #559", "committedDate": "2020-07-14T00:26:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyNTk4Nw==", "url": "https://github.com/unicode-org/cldr/pull/559#discussion_r454025987", "bodyText": "This line changed in order to get rid of merge conflicts.", "author": "macchiati", "createdAt": "2020-07-14T00:30:57Z", "path": "tools/java/org/unicode/cldr/test/CheckCLDR.java", "diffHunk": "@@ -717,7 +717,7 @@ public CheckCLDR setCldrFileToCheck(CLDRFile cldrFileToCheck, Options options,\n             invalidPlaceHolder, asciiQuotesNotAllowed, badMinimumGroupingDigits, inconsistentPeriods,\n             inheritanceMarkerNotAllowed, invalidDurationUnitPattern, invalidDelimiter, illegalCharactersInPattern,\n             badParseLenient, tooManyValues, invalidSymbol, invalidGenderCode,\n-            mismatchedUnitComponent, longPowerWithSubscripts, gapsInPlaceholderNumbers, duplicatePlaceholders\n+            mismatchedUnitComponent, longPowerWithSubscripts, gapsInPlaceholderNumbers, duplicatePlaceholders, largerDifferences", "originalCommit": "bbb975c0d31c75054a387a6c0db0143f67088d94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}