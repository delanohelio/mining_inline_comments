{"pr_number": 941, "pr_title": "Vinagesh/prcommentfixes", "pr_createdAt": "2020-09-28T22:59:35Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/941", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NDk0Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496284942", "bodyText": "nit: only for the file name - shouldn't it be DigitalTwinClientTests?", "author": "abhipsaMisra", "createdAt": "2020-09-28T23:11:49Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinServiceClientTests.java", "diffHunk": "@@ -68,8 +68,7 @@ public void setUp() throws URISyntaxException, IOException, IotHubException {\n \n         this.deviceClient = createDeviceClient(protocol);\n         deviceClient.open();\n-        DigitalTwinAsyncClient asyncClient = new DigitalTwinAsyncClient(IOTHUB_CONNECTION_STRING);\n-        digitalTwinClient = new DigitalTwinClient(asyncClient);\n+        digitalTwinClient = DigitalTwinClient.createFromConnectionString(IOTHUB_CONNECTION_STRING);", "originalCommit": "0d2f795e69ff9e6663aa32ed160e1e3af39361a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NjY3MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496286671", "bodyText": "yes makes sense. Will change in a follow up PR.", "author": "vinagesh", "createdAt": "2020-09-28T23:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NDk0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTExNg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496285116", "bodyText": "call it out as private explicitly?", "author": "abhipsaMisra", "createdAt": "2020-09-28T23:12:25Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -23,34 +23,41 @@\n import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n import com.microsoft.rest.*;\n import com.microsoft.rest.serializer.JacksonAdapter;\n-import lombok.Builder;\n-import lombok.NonNull;\n-import lombok.Setter;\n import rx.Observable;\n import rx.schedulers.Schedulers;\n \n import java.util.List;\n import java.util.Objects;\n \n import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n-import static lombok.AccessLevel.PACKAGE;\n \n public class DigitalTwinAsyncClient {\n-    @Setter(PACKAGE)\n     private DigitalTwinsImpl digitalTwin;\n     private static ObjectMapper objectMapper = new ObjectMapper();\n \n-    /***\n-     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n-     * @param connectionString The IoTHub connection string\n-     */\n-    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n-    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+     DigitalTwinAsyncClient(String connectionString) {", "originalCommit": "0d2f795e69ff9e6663aa32ed160e1e3af39361a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTY1OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496285658", "bodyText": "It was not done so in track2. Private is default so I left it like this.", "author": "vinagesh", "createdAt": "2020-09-28T23:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTExNg=="}], "type": "inlineReview", "revised_code": {"commit": "d70ff49fff700fa82effe89b3799f8bda7c2d5d5", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java\nindex 171b1a590..5ef5f38ac 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java\n\n@@ -51,7 +51,7 @@ public class DigitalTwinAsyncClient {\n         digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n     }\n \n-    /***\n+    /**\n      * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n      * @param connectionString The IoTHub connection string\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTUyNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496285524", "bodyText": "nit: lambda can be replaced by method reference", "author": "abhipsaMisra", "createdAt": "2020-09-28T23:13:51Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -60,18 +67,10 @@ public DigitalTwinAsyncClient(@NonNull String connectionString) {\n      * @param <T> The generic type to deserialize the application/json into.\n      * @return The application/json of the digital twin.\n      */\n-    public <T> Observable<T> getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n     {\n-        return digitalTwin.getDigitalTwinAsync(digitalTwinId)\n-                .filter(Objects::nonNull)\n-                .flatMap(response -> {\n-                    try {\n-                        return Observable.just(DeserializationHelpers.castObject(objectMapper, response, clazz));\n-                    } catch (JsonProcessingException e) {\n-                        return Observable.error(e);\n-                    }\n-                })\n-                .subscribeOn(Schedulers.io());\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());", "originalCommit": "0d2f795e69ff9e6663aa32ed160e1e3af39361a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NjI0Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496286243", "bodyText": "This seemed more readable to me, specially because it is a small thing to do inside of map.", "author": "vinagesh", "createdAt": "2020-09-28T23:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTUyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTY0OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496285648", "bodyText": "argument check for clazz?", "author": "abhipsaMisra", "createdAt": "2020-09-28T23:14:16Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -81,7 +80,7 @@ public DigitalTwinAsyncClient(@NonNull String connectionString) {\n      * @param <T> The generic type to deserialize the application/json into.\n      * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n      */\n-    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (@NonNull String digitalTwinId, Class<T> clazz)\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)", "originalCommit": "0d2f795e69ff9e6663aa32ed160e1e3af39361a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NjgwOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496286809", "bodyText": "Not in this PR. Still need to evaluate it. I was stuck with mvn clean. Will be there in a follow up PR.", "author": "vinagesh", "createdAt": "2020-09-28T23:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NTY0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4Njc2Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496286762", "bodyText": "The PL should be accepting the payload as an Object, correct? So if we pass in a String, does it serialize it again?", "author": "abhipsaMisra", "createdAt": "2020-09-28T23:17:43Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java", "diffHunk": "@@ -166,7 +168,12 @@ public DigitalTwinCommandResponse invokeComponentCommand(@NonNull String digital\n      * @param options The optional settings for this request.\n      * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n      */\n-    public ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> invokeComponentCommandWithResponse(@NonNull String digitalTwinId, @NonNull String componentName, @NonNull String commandName, @NonNull String payload, @NonNull DigitalTwinInvokeCommandRequestOptions options) {\n+    public ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) {", "originalCommit": "0d2f795e69ff9e6663aa32ed160e1e3af39361a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9dcb3361d5e4aeba0273a7c03fda5aac58b157d0", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java\nindex 9fe789f77..4d3829313 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java\n\n@@ -167,8 +174,9 @@ public class DigitalTwinClient {\n      * @param payload The command payload.\n      * @param options The optional settings for this request.\n      * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws {@link IOException} can be thrown if the provided payload cannot be deserialized into a valid Json object.\n      */\n-    public ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) {\n+    public ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n         if(options == null)\n         {\n             options = new DigitalTwinInvokeCommandRequestOptions();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NzA2Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496287066", "bodyText": "why call async client and block on it? why not call the sync client directly - like you had it before?", "author": "abhipsaMisra", "createdAt": "2020-09-28T23:18:55Z", "path": "service/iot-service-samples/digitaltwin-service-samples/thermostat-service-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java", "diffHunk": "@@ -48,14 +48,13 @@ private static void RunSample() {\n     }\n \n     private static void InitializeServiceClient() {\n-        DigitalTwinAsyncClient asyncClient = new DigitalTwinAsyncClient(iotHubConnectionString);\n-        client = new DigitalTwinClient(asyncClient);\n+        asyncClient = DigitalTwinAsyncClient.createFromConnectionString(iotHubConnectionString);\n     }\n \n     private static void GetDigitalTwin()\n     {\n         // Get the digital twin.\n-        BasicDigitalTwin getResponse = client.getDigitalTwin(digitalTwinid, BasicDigitalTwin.class);\n+        BasicDigitalTwin getResponse = asyncClient.getDigitalTwin(digitalTwinid, BasicDigitalTwin.class).toBlocking().single();", "originalCommit": "0d2f795e69ff9e6663aa32ed160e1e3af39361a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NzI0Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496287243", "bodyText": "As in my PR description, Just to show how to use the async client, I made one sample use it.", "author": "vinagesh", "createdAt": "2020-09-28T23:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NzA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4ODE0Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496288143", "bodyText": "In that case, the sample should show how you would call observable APIs and subscribe to them.\nI don't think initializing an async client and then blocking on it demonstrates the async client usage properly, right?", "author": "abhipsaMisra", "createdAt": "2020-09-28T23:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4NzA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d70ff49fff700fa82effe89b3799f8bda7c2d5d5", "chunk": "diff --git a/service/iot-service-samples/digitaltwin-service-samples/thermostat-service-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java b/service/iot-service-samples/digitaltwin-service-samples/thermostat-service-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java\nindex 298c92648..c2b677676 100644\n--- a/service/iot-service-samples/digitaltwin-service-samples/thermostat-service-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java\n+++ b/service/iot-service-samples/digitaltwin-service-samples/thermostat-service-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java\n\n@@ -54,9 +54,13 @@ public class Thermostat {\n     private static void GetDigitalTwin()\n     {\n         // Get the digital twin.\n-        BasicDigitalTwin getResponse = asyncClient.getDigitalTwin(digitalTwinid, BasicDigitalTwin.class).toBlocking().single();\n-        System.out.println(\"Digital Twin Model Id: \" + getResponse.getMetadata().getModelId());\n-        System.out.println(\"Digital Twin: \" + prettyBasicDigitalTwin(getResponse));\n+        asyncClient.getDigitalTwin(digitalTwinid, BasicDigitalTwin.class)\n+                .subscribe(getResponse ->\n+                {\n+                    System.out.println(\"Digital Twin Model Id: \" + getResponse.getMetadata().getModelId());\n+                    System.out.println(\"Digital Twin: \" + prettyBasicDigitalTwin(getResponse));\n+                });\n+\n     }\n \n     private static void UpdateDigitalTwin()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4Nzc1Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/941#discussion_r496287753", "bodyText": "nit: formatting of *** looks incorrect.", "author": "bikamani", "createdAt": "2020-09-28T23:21:10Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -23,34 +23,41 @@\n import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n import com.microsoft.rest.*;\n import com.microsoft.rest.serializer.JacksonAdapter;\n-import lombok.Builder;\n-import lombok.NonNull;\n-import lombok.Setter;\n import rx.Observable;\n import rx.schedulers.Schedulers;\n \n import java.util.List;\n import java.util.Objects;\n \n import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n-import static lombok.AccessLevel.PACKAGE;\n \n public class DigitalTwinAsyncClient {\n-    @Setter(PACKAGE)\n     private DigitalTwinsImpl digitalTwin;\n     private static ObjectMapper objectMapper = new ObjectMapper();\n \n-    /***\n-     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n-     * @param connectionString The IoTHub connection string\n-     */\n-    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n-    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+     DigitalTwinAsyncClient(String connectionString) {\n         ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n         SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n         String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n \n-        init(sasTokenProvider, httpsEndpoint);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(new JacksonAdapter())\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /***", "originalCommit": "0d2f795e69ff9e6663aa32ed160e1e3af39361a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d70ff49fff700fa82effe89b3799f8bda7c2d5d5", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java\nindex 171b1a590..5ef5f38ac 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java\n\n@@ -51,7 +51,7 @@ public class DigitalTwinAsyncClient {\n         digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n     }\n \n-    /***\n+    /**\n      * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n      * @param connectionString The IoTHub connection string\n      */\n"}}, {"oid": "d70ff49fff700fa82effe89b3799f8bda7c2d5d5", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/d70ff49fff700fa82effe89b3799f8bda7c2d5d5", "message": "Changes based on PR review comments", "committedDate": "2020-09-28T23:42:48Z", "type": "forcePushed"}, {"oid": "9dcb3361d5e4aeba0273a7c03fda5aac58b157d0", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/9dcb3361d5e4aeba0273a7c03fda5aac58b157d0", "message": "Changes based on PR review comments", "committedDate": "2020-09-29T01:37:35Z", "type": "forcePushed"}, {"oid": "cb1e5dcf507f94951fbfe7fc7cb2da2f4c149011", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/cb1e5dcf507f94951fbfe7fc7cb2da2f4c149011", "message": "Changes based on PR review comments", "committedDate": "2020-09-29T01:40:01Z", "type": "commit"}, {"oid": "cb1e5dcf507f94951fbfe7fc7cb2da2f4c149011", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/cb1e5dcf507f94951fbfe7fc7cb2da2f4c149011", "message": "Changes based on PR review comments", "committedDate": "2020-09-29T01:40:01Z", "type": "forcePushed"}]}