{"pr_number": 987, "pr_title": "refactor(iot-dev, e2e): Fix log statement, add throttle resiliency to tests", "pr_createdAt": "2020-11-04T22:26:23Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/987", "timeline": [{"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/4cd5f5e470f7a2bff37b61a502f3a266098313cc", "message": "refactor(iot-dev, e2e): Fix log statement, add throttle resiliancy to tests\n\nAlso add bulk add functionality to e2e tests to help with upcoming multiplexing tests", "committedDate": "2020-11-04T22:19:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5MTc3NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517691775", "bodyText": "return gson.toJson(exportImportDevices) in a single line ?", "author": "vinagesh", "createdAt": "2020-11-04T23:29:26Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);", "originalCommit": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c9a791a5d591dda87371babc6a6982093a7c14f", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\nindex 42828074a..65d51bd06 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n\n@@ -22,8 +22,7 @@ public class ExportImportDevicesParser {\n      */\n     public String toJson()\n     {\n-        String json = gson.toJson(exportImportDevices);\n-        return json;\n+        return gson.toJson(exportImportDevices);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5MjE0Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517692146", "bodyText": "minor: \"the json string used to build the ExportImportDevicesParser\" might sound better.", "author": "vinagesh", "createdAt": "2020-11-04T23:30:31Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);\n+        return json;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string to build the ExportImportDevicesParser out of", "originalCommit": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c9a791a5d591dda87371babc6a6982093a7c14f", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\nindex 42828074a..65d51bd06 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n\n@@ -22,8 +22,7 @@ public class ExportImportDevicesParser {\n      */\n     public String toJson()\n     {\n-        String json = gson.toJson(exportImportDevices);\n-        return json;\n+        return gson.toJson(exportImportDevices);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5Mjc2NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517692764", "bodyText": "minor: This could be moved below line 51", "author": "vinagesh", "createdAt": "2020-11-04T23:32:17Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);\n+        return json;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string to build the ExportImportDevicesParser out of\n+     */\n+    public ExportImportDevicesParser(String json)\n+    {\n+        if (json == null || json.isEmpty())\n+        {\n+            throw new IllegalArgumentException(\"The provided json cannot be null or empty\");\n+        }\n+\n+        ExportImportDevicesParser exportImportDevicesParser = null;\n+        try\n+        {\n+            exportImportDevicesParser = gson.fromJson(json, ExportImportDevicesParser.class);\n+        }\n+        catch (JsonSyntaxException e)\n+        {\n+            throw new IllegalArgumentException(\"The provided json could not be parsed\");\n+        }\n+\n+        this.exportImportDevices = exportImportDevicesParser.getExportImportDevices();", "originalCommit": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c9a791a5d591dda87371babc6a6982093a7c14f", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\nindex 42828074a..65d51bd06 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n\n@@ -22,8 +22,7 @@ public class ExportImportDevicesParser {\n      */\n     public String toJson()\n     {\n-        String json = gson.toJson(exportImportDevices);\n-        return json;\n+        return gson.toJson(exportImportDevices);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5MzI2MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517693260", "bodyText": "Does final mean we can only set this value once in the constructor? Trying to understand how java works.", "author": "vinagesh", "createdAt": "2020-11-04T23:33:51Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);\n+        return json;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string to build the ExportImportDevicesParser out of\n+     */\n+    public ExportImportDevicesParser(String json)\n+    {\n+        if (json == null || json.isEmpty())\n+        {\n+            throw new IllegalArgumentException(\"The provided json cannot be null or empty\");\n+        }\n+\n+        ExportImportDevicesParser exportImportDevicesParser = null;\n+        try\n+        {\n+            exportImportDevicesParser = gson.fromJson(json, ExportImportDevicesParser.class);\n+        }\n+        catch (JsonSyntaxException e)\n+        {\n+            throw new IllegalArgumentException(\"The provided json could not be parsed\");\n+        }\n+\n+        this.exportImportDevices = exportImportDevicesParser.getExportImportDevices();\n+    }\n+\n+    public final Iterable<ExportImportDeviceParser> getExportImportDevices() {", "originalCommit": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5NDI2NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517694264", "bodyText": "The final modifier simply means that the method cannot be overriden by any class that extends this class. You can set/get this value as many times as you'd like, and whenever you'd like", "author": "timtay-microsoft", "createdAt": "2020-11-04T23:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5MzI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "9c9a791a5d591dda87371babc6a6982093a7c14f", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\nindex 42828074a..65d51bd06 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n\n@@ -22,8 +22,7 @@ public class ExportImportDevicesParser {\n      */\n     public String toJson()\n     {\n-        String json = gson.toJson(exportImportDevices);\n-        return json;\n+        return gson.toJson(exportImportDevices);\n     }\n \n     /**\n"}}, {"oid": "9c9a791a5d591dda87371babc6a6982093a7c14f", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/9c9a791a5d591dda87371babc6a6982093a7c14f", "message": "feedback", "committedDate": "2020-11-04T23:38:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5NjU4MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517696581", "bodyText": "nit: create constant for this", "author": "vinagesh", "createdAt": "2020-11-04T23:43:08Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,98 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)\n+            {\n+                long startTime = System.currentTimeMillis();\n+                while (System.currentTimeMillis() - startTime < RETRY_TIMEOUT_ON_NETWORK_FAILURE_MILLISECONDS)\n+                {\n+                    try\n+                    {\n+                        addDevices(subIterable, connectionString);\n+                        break;\n+                    }\n+                    catch (UnknownHostException | SocketException | SocketTimeoutException e)\n+                    {\n+                        log.warn(\"Failed to add devices\");\n+                        e.printStackTrace();\n+                        Thread.sleep(WAIT_FOR_RETRY);\n+                        if (System.currentTimeMillis() - startTime >= RETRY_TIMEOUT_ON_NETWORK_FAILURE_MILLISECONDS)\n+                        {\n+                            throw e;\n+                        }\n+                    }\n+\n+                }\n+\n+                // clear the sub list so it can be filled back up again with the next devices to add\n+                subIterable.clear();\n+            }\n+        }\n+    }\n+\n+    // This call mimics what should be a registry manager API for adding devices in bulk. Can be removed once we add support in our\n+    // registry manager for this\n+    public static void addDevices(Iterable<Device> devices, String connectionString) throws IOException, IotHubException {\n+        if (devices == null)\n+        {\n+            throw new IllegalArgumentException(\"devices cannot be null\");\n+        }\n+\n+        IotHubConnectionString iotHubConnectionString = IotHubConnectionString.createConnectionString(connectionString);\n+        URL url = getBulkDeviceAddUrl(iotHubConnectionString);\n+\n+        List<ExportImportDeviceParser> parsers = new ArrayList<>();\n+        for (Device device : devices)\n+        {\n+            ExportImportDeviceParser exportImportDevice = new ExportImportDeviceParser();\n+            exportImportDevice.setId(device.getDeviceId());\n+            AuthenticationParser authenticationParser = new AuthenticationParser();\n+            authenticationParser.setSymmetricKey(new SymmetricKeyParser(device.getSymmetricKey().getPrimaryKey(), device.getSymmetricKey().getSecondaryKey()));\n+            exportImportDevice.setAuthentication(authenticationParser);\n+            exportImportDevice.setImportMode(\"create\");", "originalCommit": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb1ea40c4035f3fe5db1388b119914e446be0dc7", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\nindex 5b76e5401..6515d2276 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n\n@@ -197,6 +197,7 @@ public class Tools\n \n     // This call mimics what should be a registry manager API for adding devices in bulk. Can be removed once we add support in our\n     // registry manager for this\n+    private static final String IMPORT_MODE = \"create\";\n     public static void addDevices(Iterable<Device> devices, String connectionString) throws IOException, IotHubException {\n         if (devices == null)\n         {\n"}}, {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/bb1ea40c4035f3fe5db1388b119914e446be0dc7", "message": "feedback", "committedDate": "2020-11-04T23:46:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5ODU5OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517698598", "bodyText": "Should this be if or while? Are we not adding only one to the list or am I missing something?", "author": "vinagesh", "createdAt": "2020-11-04T23:49:10Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,98 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)", "originalCommit": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMTgxNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517701814", "bodyText": "This if block represents what should happen once a list of 100 devices is ready to be added, or if a list of under 100 devices is ready to add and there are no more devices to add after this list", "author": "timtay-microsoft", "createdAt": "2020-11-04T23:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5ODU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMjEyMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517702122", "bodyText": "The purpose here is so that this method can take a list of arbitrary length, and chunk that list into smaller lists of 100 devices or fewer so that we can use the bulk add service API which has a limit of 100 devices per request", "author": "timtay-microsoft", "createdAt": "2020-11-04T23:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5ODU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "632f6b004635bcc32c1b815158e2b65d36ea78eb", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\nindex 5b76e5401..6515d2276 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n\n@@ -197,6 +197,7 @@ public class Tools\n \n     // This call mimics what should be a registry manager API for adding devices in bulk. Can be removed once we add support in our\n     // registry manager for this\n+    private static final String IMPORT_MODE = \"create\";\n     public static void addDevices(Iterable<Device> devices, String connectionString) throws IOException, IotHubException {\n         if (devices == null)\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMzMzOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517703338", "bodyText": "Why is this declared outside of the try/catch?", "author": "drwill-ms", "createdAt": "2020-11-05T00:04:03Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        return gson.toJson(exportImportDevices);\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string used to build the ExportImportDevicesParser\n+     */\n+    public ExportImportDevicesParser(String json)\n+    {\n+        if (json == null || json.isEmpty())\n+        {\n+            throw new IllegalArgumentException(\"The provided json cannot be null or empty\");\n+        }\n+\n+        ExportImportDevicesParser exportImportDevicesParser;", "originalCommit": "bb1ea40c4035f3fe5db1388b119914e446be0dc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMzcyMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517703721", "bodyText": "This can be simplified, sure", "author": "timtay-microsoft", "createdAt": "2020-11-05T00:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMzMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "632f6b004635bcc32c1b815158e2b65d36ea78eb", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\nindex 65d51bd06..34f7a7a4b 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java\n\n@@ -44,11 +44,9 @@ public class ExportImportDevicesParser {\n             throw new IllegalArgumentException(\"The provided json cannot be null or empty\");\n         }\n \n-        ExportImportDevicesParser exportImportDevicesParser;\n         try\n         {\n-            exportImportDevicesParser = gson.fromJson(json, ExportImportDevicesParser.class);\n-            this.exportImportDevices = exportImportDevicesParser.getExportImportDevices();\n+            this.exportImportDevices = gson.fromJson(json, ExportImportDevicesParser.class).getExportImportDevices();\n         }\n         catch (JsonSyntaxException e)\n         {\n"}}, {"oid": "632f6b004635bcc32c1b815158e2b65d36ea78eb", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/632f6b004635bcc32c1b815158e2b65d36ea78eb", "message": "feedback", "committedDate": "2020-11-05T00:04:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMzk5Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517703996", "bodyText": "comparison seems numerically backwards (checking the large number before the small number), but maybe that's just me", "author": "drwill-ms", "createdAt": "2020-11-05T00:06:08Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,99 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)", "originalCommit": "bb1ea40c4035f3fe5db1388b119914e446be0dc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNTA4NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517705085", "bodyText": "I'm not sure I follow which half of the if statement you mean here", "author": "timtay-microsoft", "createdAt": "2020-11-05T00:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMzk5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDIwMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517704201", "bodyText": "Well that is something interesting that Java can do", "author": "drwill-ms", "createdAt": "2020-11-05T00:06:57Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,99 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)\n+            {\n+                long startTime = System.currentTimeMillis();\n+                while (System.currentTimeMillis() - startTime < RETRY_TIMEOUT_ON_NETWORK_FAILURE_MILLISECONDS)\n+                {\n+                    try\n+                    {\n+                        addDevices(subIterable, connectionString);\n+                        break;\n+                    }\n+                    catch (UnknownHostException | SocketException | SocketTimeoutException e)", "originalCommit": "bb1ea40c4035f3fe5db1388b119914e446be0dc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDkyNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517704927", "bodyText": "I like it, personally", "author": "timtay-microsoft", "createdAt": "2020-11-05T00:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDIwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDUwNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517704504", "bodyText": "I only see 2 instances of {}, but 3 parameters. Is the exception parameter a special one?", "author": "drwill-ms", "createdAt": "2020-11-05T00:08:07Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java", "diffHunk": "@@ -49,6 +50,19 @@ public void evaluate() throws Throwable {\n                     log.warn(\"Thottling detected in test {}, waiting for {} milliseconds and then re-running the test\", description.getMethodName(), THROTTLING_RETRY_DELAY_MILLISECONDS, e);\n                     Thread.sleep(THROTTLING_RETRY_DELAY_MILLISECONDS);\n                 }\n+                catch (Exception e)\n+                {\n+                    if (e.getMessage() != null && e.getMessage().toLowerCase().contains(CONNECTION_REFUSED))\n+                    {\n+                        log.warn(\"Thottling detected in test {}, waiting for {} milliseconds and then re-running the test\", description.getMethodName(), THROTTLING_RETRY_DELAY_MILLISECONDS, e);", "originalCommit": "bb1ea40c4035f3fe5db1388b119914e446be0dc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDgxOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517704819", "bodyText": "The exception parameter is indeed special here. The log.warn (and log.error) will handle this exception without needing a {}", "author": "timtay-microsoft", "createdAt": "2020-11-05T00:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDUwNA=="}], "type": "inlineReview", "revised_code": null}]}