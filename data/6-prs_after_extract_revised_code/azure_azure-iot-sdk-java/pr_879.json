{"pr_number": 879, "pr_title": "refactor(e2e) adding throttling resiliency to tests, allow more registry operations in parallel", "pr_createdAt": "2020-08-04T23:19:07Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/879", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4NDM0Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/879#discussion_r465384342", "bodyText": "This method being synchronized meant that only one thread can enter this static method at a time. Because of this, tests have been failing lately just by getting stuck waiting in line to enter this method. In most cases, this method is called during each test setup, so it is called a lot.\nBy removing the synchronization, the SDK test side doesn't slow itself down in making these requests, but IoT Hub often responds slower because of it, or responds with a throttle. The added throttleResistantTestRule covers the latter, and using infinite read timeouts covers the former. As a result, our tests scale better if we ever upgrade to an S2 for testing, but still work against an S1", "author": "timtay-microsoft", "createdAt": "2020-08-04T23:24:40Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -109,20 +110,22 @@ public static boolean isCause(Class<? extends Throwable> possibleExceptionCause,\n         return possibleExceptionCause.isInstance(exceptionToSearch) || (exceptionToSearch != null && isCause(possibleExceptionCause, exceptionToSearch.getCause()));\n     }\n \n-    public synchronized static Device addDeviceWithRetry(RegistryManager registryManager, Device device) throws IotHubException, IOException, InterruptedException", "originalCommit": "6ed2ab35a5a7cefc28b05f4d8850701852000164", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33da0e8ce871048186cd0fc5a6e3f283639738df", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\nindex 22b69ae13..68e617f60 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n\n@@ -110,7 +109,7 @@ public class Tools\n         return possibleExceptionCause.isInstance(exceptionToSearch) || (exceptionToSearch != null && isCause(possibleExceptionCause, exceptionToSearch.getCause()));\n     }\n \n-    public static Device addDeviceWithRetry(RegistryManager registryManager, Device device) throws IotHubException, IOException, InterruptedException\n+    public synchronized static Device addDeviceWithRetry(RegistryManager registryManager, Device device) throws IotHubException, IOException, InterruptedException\n     {\n         long startTime = System.currentTimeMillis();\n         Device ret = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4NDUyNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/879#discussion_r465384527", "bodyText": "Same as above. This synchronization placed a bottle neck on the SDK tests, so I'm removing it", "author": "timtay-microsoft", "createdAt": "2020-08-04T23:25:11Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -136,20 +139,22 @@ public synchronized static Device addDeviceWithRetry(RegistryManager registryMan\n         return ret;\n     }\n \n-    public synchronized static Module addModuleWithRetry(RegistryManager registryManager, Module module) throws IotHubException, IOException, InterruptedException", "originalCommit": "6ed2ab35a5a7cefc28b05f4d8850701852000164", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33da0e8ce871048186cd0fc5a6e3f283639738df", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\nindex 22b69ae13..68e617f60 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java\n\n@@ -139,7 +136,7 @@ public class Tools\n         return ret;\n     }\n \n-    public static Module addModuleWithRetry(RegistryManager registryManager, Module module) throws IotHubException, IOException, InterruptedException\n+    public synchronized static Module addModuleWithRetry(RegistryManager registryManager, Module module) throws IotHubException, IOException, InterruptedException\n     {\n         long startTime = System.currentTimeMillis();\n         Module ret = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4NDg3OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/879#discussion_r465384878", "bodyText": "This test rule makes each test run (base.evaluate() runs the test) until it passes or until it fails with a non-throttling exception", "author": "timtay-microsoft", "createdAt": "2020-08-04T23:26:27Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers.rules;\n+\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubTooManyRequestsException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Assume;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+/**\n+ * On lower tier IoT Hubs, this test project often hits throttling limits. Rather than add retry logic to every call\n+ * to the hub, this rule will catch these throttling errors and re-run the test until it passes or fails for non-throttling\n+ * reasons. It has a configurable delay between each re-run to give IoT Hub time to free up some throughput\n+ */\n+@Slf4j\n+public class ThrottleResistantTestRule implements TestRule\n+{\n+    final static int THROTTLING_RETRY_DELAY_MILLISECONDS = 10 * 1000;\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return new ThrottleResistantStatement(base, description);\n+    }\n+\n+    private class ThrottleResistantStatement extends Statement {\n+\n+        private final Statement base;\n+        private final Description description;\n+\n+        public ThrottleResistantStatement(Statement base, Description description) {\n+            this.base = base;\n+            this.description = description;\n+        }\n+\n+        @Override\n+        public void evaluate() throws Throwable {", "originalCommit": "6ed2ab35a5a7cefc28b05f4d8850701852000164", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e68027cd11ead6c60aae46012436ea2dddd815f0", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java\nindex 3fa89e4fc..aaf863913 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java\n\n@@ -52,4 +52,4 @@ public class ThrottleResistantTestRule implements TestRule\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4NTE0Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/879#discussion_r465385142", "bodyText": "This exception gets thrown by any HTTP request (registryManager.addDevice, deviceMethod.invokeMethod, etc.)", "author": "timtay-microsoft", "createdAt": "2020-08-04T23:27:10Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers.rules;\n+\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubTooManyRequestsException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Assume;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+/**\n+ * On lower tier IoT Hubs, this test project often hits throttling limits. Rather than add retry logic to every call\n+ * to the hub, this rule will catch these throttling errors and re-run the test until it passes or fails for non-throttling\n+ * reasons. It has a configurable delay between each re-run to give IoT Hub time to free up some throughput\n+ */\n+@Slf4j\n+public class ThrottleResistantTestRule implements TestRule\n+{\n+    final static int THROTTLING_RETRY_DELAY_MILLISECONDS = 10 * 1000;\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return new ThrottleResistantStatement(base, description);\n+    }\n+\n+    private class ThrottleResistantStatement extends Statement {\n+\n+        private final Statement base;\n+        private final Description description;\n+\n+        public ThrottleResistantStatement(Statement base, Description description) {\n+            this.base = base;\n+            this.description = description;\n+        }\n+\n+        @Override\n+        public void evaluate() throws Throwable {\n+            boolean ranWithoutThottling = false;\n+            while (!ranWithoutThottling)\n+            {\n+                try\n+                {\n+                    base.evaluate();\n+                    ranWithoutThottling = true;\n+                }\n+                catch (IotHubTooManyRequestsException e)", "originalCommit": "6ed2ab35a5a7cefc28b05f4d8850701852000164", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e68027cd11ead6c60aae46012436ea2dddd815f0", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java\nindex 3fa89e4fc..aaf863913 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java\n\n@@ -52,4 +52,4 @@ public class ThrottleResistantTestRule implements TestRule\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n"}}, {"oid": "e4b8c2276db44cf100201ca3b8c784a80d4d9e5e", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e4b8c2276db44cf100201ca3b8c784a80d4d9e5e", "message": "refactor(e2e) adding throttling resiliency to tests, allow more registry\noperations at once\n\nAlso make read timeout for registry requests infinite", "committedDate": "2020-08-04T23:45:47Z", "type": "forcePushed"}, {"oid": "e68027cd11ead6c60aae46012436ea2dddd815f0", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e68027cd11ead6c60aae46012436ea2dddd815f0", "message": "refactor(e2e): Make e2e tests use infinite read timeout, all throttle resiliancy\n\nOn lower tier hubs, these tests often hit either read timeouts from waiting for hub to finish an operation or they hit a throttling limit. This PR ensures that the SDK waits for an infinite amount of read time to account for this, and it also adds a test rule that makes a test re-run if it failed due to a throttling exception", "committedDate": "2020-08-19T18:24:17Z", "type": "commit"}, {"oid": "33da0e8ce871048186cd0fc5a6e3f283639738df", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/33da0e8ce871048186cd0fc5a6e3f283639738df", "message": "Merge branch 'master' of https://github.com/Azure/azure-iot-sdk-java into timtay/e2e3", "committedDate": "2020-08-19T17:55:45Z", "type": "forcePushed"}, {"oid": "e68027cd11ead6c60aae46012436ea2dddd815f0", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e68027cd11ead6c60aae46012436ea2dddd815f0", "message": "refactor(e2e): Make e2e tests use infinite read timeout, all throttle resiliancy\n\nOn lower tier hubs, these tests often hit either read timeouts from waiting for hub to finish an operation or they hit a throttling limit. This PR ensures that the SDK waits for an infinite amount of read time to account for this, and it also adds a test rule that makes a test re-run if it failed due to a throttling exception", "committedDate": "2020-08-19T18:24:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzOTA0OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/879#discussion_r473239049", "bodyText": "With the throttle resistant test rule, we can no longer use this method of checking for an exception upon executing some code. If the test encounters a 429 exception, that 429 gets compared to this GatewayTimeoutException, and since they don't match, the test throws an AssertionFailedException. Once that AssertionFailedException bubbles up to the throttle resistant test rule, the test won't be re-run since the test didn't seem to fail from a 429.", "author": "timtay-microsoft", "createdAt": "2020-08-19T18:31:41Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java", "diffHunk": "@@ -340,7 +339,7 @@ public void invokeMethodDefaultConnectionTimeoutSucceed() throws Exception\n         Assert.assertEquals(buildExceptionMessage(\"Unexpected status errors occurred\", testInstance.deviceTestManager.client), 0, deviceTestManger.getStatusError());\n     }\n \n-    @Test (expected = IotHubGatewayTimeoutException.class)", "originalCommit": "e68027cd11ead6c60aae46012436ea2dddd815f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzOTQzNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/879#discussion_r473239435", "bodyText": "Making each test have their own registry manager instead of sharing one static instance", "author": "timtay-microsoft", "createdAt": "2020-08-19T18:32:27Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceMethodCommon.java", "diffHunk": "@@ -59,8 +58,6 @@ public static Collection inputs() throws Exception\n \n     protected static String iotHubConnectionString = \"\";\n \n-    protected static RegistryManager registryManager;", "originalCommit": "e68027cd11ead6c60aae46012436ea2dddd815f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "71696affdb3e528c9bcae9f694acf7dac3868913", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/71696affdb3e528c9bcae9f694acf7dac3868913", "message": "fixup", "committedDate": "2020-08-19T18:33:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0MjEwNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/879#discussion_r473242104", "bodyText": "Note that only the read timeout will be infinite. The tests will still timeout if they fail to connect to iothub. With this change, they just won't throw an exception if iothub takes a while to finish the operation and return the http response", "author": "timtay-microsoft", "createdAt": "2020-08-19T18:37:30Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/IntegrationTest.java", "diffHunk": "@@ -67,4 +70,6 @@ protected void finished(Description description)\n     public static boolean runIotHubTests = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(\"RUN_IOTHUB_TESTS\", \"true\"));\n     public static boolean runProvisioningTests = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(\"RUN_PROVISIONING_TESTS\", \"true\"));\n \n+    // Infinite read timeout for all http operations\n+    public static int HTTP_READ_TIMEOUT = 0;", "originalCommit": "71696affdb3e528c9bcae9f694acf7dac3868913", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}