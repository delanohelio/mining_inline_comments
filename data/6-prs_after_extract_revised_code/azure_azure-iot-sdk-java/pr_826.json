{"pr_number": 826, "pr_title": "refactor(iot-dev): Use wait and notify to cut down on useless thread creation in transport layer", "pr_createdAt": "2020-06-26T18:50:59Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/826", "timeline": [{"oid": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/28b8d123641538ce0a79e63a4ed0ab56b6ff887d", "message": "fix(iot-dev): Fix issue where device client spawned send/receive threads even when transport is disconnected retrying\n\nThese threads cause the retry logic to hog a lot of resources and accomplished nothing since no messages can be sent/received when reconnecting", "committedDate": "2020-06-26T20:26:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNTk5NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446415994", "bodyText": "This type was pretty redundant, and couldn't capture the same state as the IotHubTransport layer had, so I removed this type and just re-used the IotHubConnectionStatus class for this purpose", "author": "timtay-microsoft", "createdAt": "2020-06-26T21:22:42Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -68,14 +69,8 @@\n  * The task scheduler for sending and receiving messages for the Device Client\n  */\n @Slf4j\n-public final class DeviceIO\n+public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n {\n-    /** The state of the IoT Hub client's connection with the IoT Hub. */\n-    protected enum IotHubClientState", "originalCommit": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127bb10a708a35cd51454357b7e9a74504398294", "chunk": "diff --git a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\nindex 3a0d194dc..0882f179a 100644\n--- a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n+++ b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n\n@@ -69,8 +68,14 @@ import java.util.concurrent.TimeUnit;\n  * The task scheduler for sending and receiving messages for the Device Client\n  */\n @Slf4j\n-public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n+public final class DeviceIO\n {\n+    /** The state of the IoT Hub client's connection with the IoT Hub. */\n+    protected enum IotHubClientState\n+    {\n+        OPEN, CLOSED\n+    }\n+\n     private long sendPeriodInMilliseconds;\n     private long receivePeriodInMilliseconds;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjE4NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446416184", "bodyText": "Passing this in as a parameter so that the transpor layer can callback up to this layer when the connection status changes", "author": "timtay-microsoft", "createdAt": "2020-06-26T21:23:15Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -119,22 +114,22 @@\n         this.receivePeriodInMilliseconds = receivePeriodInMilliseconds;\n \n         /* Codes_SRS_DEVICE_IO_21_006: [The constructor shall set the `state` as `DISCONNECTED`.] */\n-        this.state = IotHubClientState.CLOSED;\n+        this.state = IotHubConnectionStatus.DISCONNECTED;\n \n         if (protocol == IotHubClientProtocol.AMQPS_WS || protocol == IotHubClientProtocol.MQTT_WS)\n         {\n             this.config.setUseWebsocket(true);\n         }\n \n-        this.transport = new IotHubTransport(config);\n+        this.transport = new IotHubTransport(config, this);", "originalCommit": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127bb10a708a35cd51454357b7e9a74504398294", "chunk": "diff --git a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\nindex 3a0d194dc..0882f179a 100644\n--- a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n+++ b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n\n@@ -114,14 +119,14 @@ public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n         this.receivePeriodInMilliseconds = receivePeriodInMilliseconds;\n \n         /* Codes_SRS_DEVICE_IO_21_006: [The constructor shall set the `state` as `DISCONNECTED`.] */\n-        this.state = IotHubConnectionStatus.DISCONNECTED;\n+        this.state = IotHubClientState.CLOSED;\n \n         if (protocol == IotHubClientProtocol.AMQPS_WS || protocol == IotHubClientProtocol.MQTT_WS)\n         {\n             this.config.setUseWebsocket(true);\n         }\n \n-        this.transport = new IotHubTransport(config, this);\n+        this.transport = new IotHubTransport(config);\n \n         /* Codes_SRS_DEVICE_IO_21_037: [The constructor shall initialize the `sendPeriodInMilliseconds` with default value of 10 milliseconds.] */\n         this.sendPeriodInMilliseconds = sendPeriodInMilliseconds;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjYzMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446416631", "bodyText": "This logic was moved to the connection status callback. That way, this method (which starts up the send/receive thread pool) gets called every time the client goes from DISCONNECTED or DISCONNECTED_RETRYING to CONNECTED. This allows the thread pool to not be active during DISCONNECTED_RETRYING", "author": "timtay-microsoft", "createdAt": "2020-06-26T21:24:38Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -161,10 +156,6 @@ void open() throws IOException\n         {\n             throw new IOException(\"Could not open the connection\", e);\n         }\n-\n-        /* Codes_SRS_DEVICE_IO_21_014: [The open shall schedule receive tasks to run every receivePeriodInMilliseconds milliseconds.] */\n-        /* Codes_SRS_DEVICE_IO_21_016: [The open shall set the `state` as `CONNECTED`.] */\n-        commonOpenSetup();", "originalCommit": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127bb10a708a35cd51454357b7e9a74504398294", "chunk": "diff --git a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\nindex 3a0d194dc..0882f179a 100644\n--- a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n+++ b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n\n@@ -156,6 +161,10 @@ public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n         {\n             throw new IOException(\"Could not open the connection\", e);\n         }\n+\n+        /* Codes_SRS_DEVICE_IO_21_014: [The open shall schedule receive tasks to run every receivePeriodInMilliseconds milliseconds.] */\n+        /* Codes_SRS_DEVICE_IO_21_016: [The open shall set the `state` as `CONNECTED`.] */\n+        commonOpenSetup();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjk3Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446416976", "bodyText": "this method will be called back from the transport layer every time the state changes. This class should start/stop the send/receive thread pool and then update its own state to be consistent with the transport state", "author": "timtay-microsoft", "createdAt": "2020-06-26T21:25:36Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -429,4 +425,25 @@ public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeC\n         //Codes_SRS_DEVICE_IO_34_020: [This function shall register the callback with the transport.]\n         this.transport.registerConnectionStatusChangeCallback(statusChangeCallback, callbackContext);\n     }\n+\n+    /*\n+     * IotHubTransport layer will notify this layer when the connection is established and when it is lost. This layer should start/stop\n+     * the send/receive threads accordingly\n+     */\n+    @Override\n+    public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeReason statusChangeReason, Throwable throwable, Object callbackContext)", "originalCommit": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d1c560589a7367093cc36e40a78006aed967182", "chunk": "diff --git a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\nindex 3a0d194dc..e07db0e7e 100644\n--- a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n+++ b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n\n@@ -441,7 +441,7 @@ public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n         else if (status == IotHubConnectionStatus.CONNECTED)\n         {\n             // Restart the task scheduler so that send/receive tasks start spawning again\n-            this.commonOpenSetup();\n+            this.startWorkerThreads();\n         }\n \n         this.state = status;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMjE1Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446422152", "bodyText": "See here for a more in-depth explanation on wait/notify, but the short of it is that this thread goes dormant until notified. When dormant, this thread has minimal performance impact on the machine running the SDK", "author": "timtay-microsoft", "createdAt": "2020-06-26T21:38:27Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubReceiveTask.java", "diffHunk": "@@ -32,11 +40,24 @@ public void run()\n \n         try\n         {\n-            // Codes_SRS_IOTHUBRECEIVETASK_11_002: [The function shall poll an IoT Hub for messages, invoke the message callback if one exists, and return one of COMPLETE, ABANDON, or REJECT to the IoT Hub.]\n+            // HTTP is the only protocol where the SDK must actively poll for received messages. Because of that, never\n+            // wait on the IoTHubTransport layer to notify this thread that a received message is ready to be handled.\n+            if (this.transport.getProtocol() != IotHubClientProtocol.HTTPS)\n+            {\n+                synchronized (this.receiveThreadLock)\n+                {\n+                    if (!this.transport.hasReceivedMessagesToHandle() && !this.transport.isClosed())\n+                    {\n+                        // AMQP and MQTT layers will notify the IoTHubTransport layer once a message arrives, and at\n+                        // that time, this thread will be notified to handle them.\n+                        this.receiveThreadLock.wait();", "originalCommit": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8d1c560589a7367093cc36e40a78006aed967182", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/8d1c560589a7367093cc36e40a78006aed967182", "message": "fix(iot-dev): Fix issue where device client spawned send/receive threads even when transport is disconnected retrying\n\nThese threads cause the retry logic to hog a lot of resources and accomplished nothing since no messages can be sent/received when reconnecting", "committedDate": "2020-06-27T00:01:40Z", "type": "forcePushed"}, {"oid": "127bb10a708a35cd51454357b7e9a74504398294", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/127bb10a708a35cd51454357b7e9a74504398294", "message": "refactor(iot-dev): Use wait and notify to cut down on useless thread creation in transport layer\n\nThe current design of the device client library periodically spawns threads to handle sending and receiving messages as well as invoking callbacks. The device client will spawn these threads regardless of if any messages actually need to be sent/received, though.\n\nWith this change, the send/receive threads will instead wait until a message requires them to wake up. This will cut down on thread creation during less busy times without sacrificing performance during busy times", "committedDate": "2020-06-30T02:32:31Z", "type": "commit"}, {"oid": "b7f11435927f4a88ba339873ab887891c44a5580", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/b7f11435927f4a88ba339873ab887891c44a5580", "message": "fix(iot-dev): Fix issue where device client spawned send/receive threads even when transport is disconnected retrying\n\nThese threads cause the retry logic to hog a lot of resources and accomplished nothing since no messages can be sent/received when reconnecting", "committedDate": "2020-06-30T02:32:31Z", "type": "commit"}, {"oid": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f", "message": "refactor(iot-dev): Separate task schedulers for send and receive tasks\n\nWant to avoid a state where a unified task scheduler has 2 send tasks active at once, and neither have any work to do. This would block all receiving of messages. Better to just separate these schedulers into send and receive to avoid this", "committedDate": "2020-06-30T02:32:31Z", "type": "commit"}, {"oid": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f", "message": "refactor(iot-dev): Separate task schedulers for send and receive tasks\n\nWant to avoid a state where a unified task scheduler has 2 send tasks active at once, and neither have any work to do. This would block all receiving of messages. Better to just separate these schedulers into send and receive to avoid this", "committedDate": "2020-06-30T02:32:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3MzI4Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447373286", "bodyText": "Splitting this into two separate schedulers so that there is no chance of this thread pool of size 2 having two send tasks active at once, and both waiting for work to arrive. If that were to happen, then no receive threads will spawn, so any received messages will be stuck.", "author": "timtay-microsoft", "createdAt": "2020-06-30T02:38:33Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -185,24 +177,30 @@ void addClient(DeviceClientConfig config)\n     /**\n      * Handles logic common to all open functions.\n      */\n-    private void commonOpenSetup()\n+    private void startWorkerThreads()\n     {\n         this.sendTask = new IotHubSendTask(this.transport);\n         this.receiveTask = new IotHubReceiveTask(this.transport);\n \n-        this.taskScheduler = Executors.newScheduledThreadPool(2);", "originalCommit": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODI2Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447868262", "bodyText": "how are these managed when calls are made in parallel - i.e. I call open() over one thread, and then close() over another thread, at the same time.", "author": "abhipsaMisra", "createdAt": "2020-06-30T17:44:26Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -146,7 +142,7 @@\n     void open() throws IOException\n     {\n         /* Codes_SRS_DEVICE_IO_21_007: [If the client is already open, the open shall do nothing.] */\n-        if (this.state == IotHubClientState.OPEN)\n+        if (this.state == IotHubConnectionStatus.CONNECTED || this.state == IotHubConnectionStatus.DISCONNECTED_RETRYING)", "originalCommit": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjc1MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447922750", "bodyText": "I can add a state lock for that, sure. Right now, we just hope customers don't do that", "author": "timtay-microsoft", "createdAt": "2020-06-30T19:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "caf8585f86b671c96638508a8ff20240845c37b2", "chunk": "diff --git a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\nindex 0cc17d69e..5812b83aa 100644\n--- a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n+++ b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n\n@@ -141,21 +144,21 @@ public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n      */\n     void open() throws IOException\n     {\n-        /* Codes_SRS_DEVICE_IO_21_007: [If the client is already open, the open shall do nothing.] */\n-        if (this.state == IotHubConnectionStatus.CONNECTED || this.state == IotHubConnectionStatus.DISCONNECTED_RETRYING)\n+        synchronized (this.stateLock)\n         {\n-            return;\n-        }\n+            if (this.state == IotHubConnectionStatus.CONNECTED || this.state == IotHubConnectionStatus.DISCONNECTED_RETRYING)\n+            {\n+                return;\n+            }\n \n-        /* Codes_SRS_DEVICE_IO_21_012: [The open shall open the transport to communicate with an IoT Hub.] */\n-        /* Codes_SRS_DEVICE_IO_21_015: [If an error occurs in opening the transport, the open shall throw an IOException.] */\n-        try\n-        {\n-            this.transport.open(deviceClientConfigs);\n-        }\n-        catch (DeviceClientException e)\n-        {\n-            throw new IOException(\"Could not open the connection\", e);\n+            try\n+            {\n+                this.transport.open(deviceClientConfigs);\n+            }\n+            catch (DeviceClientException e)\n+            {\n+                throw new IOException(\"Could not open the connection\", e);\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODU4OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447868588", "bodyText": "shouldn't these status updates be made over a lock?", "author": "abhipsaMisra", "createdAt": "2020-06-30T17:44:58Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -429,4 +432,33 @@ public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeC\n         //Codes_SRS_DEVICE_IO_34_020: [This function shall register the callback with the transport.]\n         this.transport.registerConnectionStatusChangeCallback(statusChangeCallback, callbackContext);\n     }\n+\n+    /*\n+     * IotHubTransport layer will notify this layer when the connection is established and when it is lost. This layer should start/stop\n+     * the send/receive threads accordingly\n+     */\n+    @Override\n+    public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeReason statusChangeReason, Throwable throwable, Object callbackContext)\n+    {\n+        if (status == IotHubConnectionStatus.DISCONNECTED || status == IotHubConnectionStatus.DISCONNECTED_RETRYING)\n+        {\n+            // No need to keep spawning send/receive tasks during reconnection or when the client is closed\n+            if (this.sendTaskScheduler != null)\n+            {\n+                this.sendTaskScheduler.shutdown();\n+            }\n+\n+            if (this.receiveTaskScheduler != null)\n+            {\n+                this.receiveTaskScheduler.shutdown();\n+            }\n+        }\n+        else if (status == IotHubConnectionStatus.CONNECTED)\n+        {\n+            // Restart the task scheduler so that send/receive tasks start spawning again\n+            this.startWorkerThreads();\n+        }\n+\n+        this.state = status;", "originalCommit": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMzQ1Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447923453", "bodyText": "Sure, I'll protect this with the same lock that I'll add for open/close", "author": "timtay-microsoft", "createdAt": "2020-06-30T19:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "caf8585f86b671c96638508a8ff20240845c37b2", "chunk": "diff --git a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\nindex 0cc17d69e..5812b83aa 100644\n--- a/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n+++ b/device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java\n\n@@ -440,25 +444,28 @@ public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n     @Override\n     public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeReason statusChangeReason, Throwable throwable, Object callbackContext)\n     {\n-        if (status == IotHubConnectionStatus.DISCONNECTED || status == IotHubConnectionStatus.DISCONNECTED_RETRYING)\n+        synchronized (this.stateLock)\n         {\n-            // No need to keep spawning send/receive tasks during reconnection or when the client is closed\n-            if (this.sendTaskScheduler != null)\n+            if (status == IotHubConnectionStatus.DISCONNECTED || status == IotHubConnectionStatus.DISCONNECTED_RETRYING)\n             {\n-                this.sendTaskScheduler.shutdown();\n+                // No need to keep spawning send/receive tasks during reconnection or when the client is closed\n+                if (this.sendTaskScheduler != null)\n+                {\n+                    this.sendTaskScheduler.shutdown();\n+                }\n+\n+                if (this.receiveTaskScheduler != null)\n+                {\n+                    this.receiveTaskScheduler.shutdown();\n+                }\n             }\n-\n-            if (this.receiveTaskScheduler != null)\n+            else if (status == IotHubConnectionStatus.CONNECTED)\n             {\n-                this.receiveTaskScheduler.shutdown();\n+                // Restart the task scheduler so that send/receive tasks start spawning again\n+                this.startWorkerThreads();\n             }\n-        }\n-        else if (status == IotHubConnectionStatus.CONNECTED)\n-        {\n-            // Restart the task scheduler so that send/receive tasks start spawning again\n-            this.startWorkerThreads();\n-        }\n \n-        this.state = status;\n+            this.state = status;\n+        }\n     }\n }\n"}}, {"oid": "caf8585f86b671c96638508a8ff20240845c37b2", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/caf8585f86b671c96638508a8ff20240845c37b2", "message": "refactor(iot-dev): Add state lock for synchronizing open/close at deviceIO level", "committedDate": "2020-06-30T19:23:53Z", "type": "commit"}]}