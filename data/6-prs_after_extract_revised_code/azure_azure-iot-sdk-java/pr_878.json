{"pr_number": 878, "pr_title": "feat(iot-serv): Make http connect and read timeouts configurable on twin and methods clients", "pr_createdAt": "2020-08-04T21:22:45Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/878", "timeline": [{"oid": "4763c59dd7c754e37f1f1520b9abb2e116a83be5", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/4763c59dd7c754e37f1f1520b9abb2e116a83be5", "message": "feat(iot-service): Add proxy support and configurable read/connect timeouts to methods/twin clients\n\nIn order to write tests for the proxy support, each test instance now has its own twin service client so that some can be configured to use proxies and others are not\n\nHaving the twin/method client's read/connect timeouts be configurable will help our e2e tests deal with timeouts when doing method/twin operations", "committedDate": "2020-08-04T22:07:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDMxNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465360314", "bodyText": "By default, the test instance already has a methodServiceClient, but it isn't setup to use a proxy, so this will create a proxy enabled client for this test in particular", "author": "timtay-microsoft", "createdAt": "2020-08-04T22:14:14Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java", "diffHunk": "@@ -483,4 +489,39 @@ public void invokeMethodOnUnregisteredDevice() throws Exception\n             }\n         }\n     }\n+\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void invokeMethodWithServiceSideProxy() throws Exception\n+    {\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        String testProxyHostname = \"127.0.0.1\";\n+        int testProxyPort = 8894;\n+        HttpProxyServer proxyServer = DefaultHttpProxyServer.bootstrap()\n+                .withPort(testProxyPort)\n+                .start();\n+\n+        try\n+        {\n+            Proxy serviceSideProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(testProxyHostname, testProxyPort));\n+\n+            ProxyOptions proxyOptions = new ProxyOptions(serviceSideProxy);\n+            DeviceMethodClientOptions options = DeviceMethodClientOptions.builder().proxyOptions(proxyOptions).build();\n+\n+            this.testInstance.methodServiceClient = DeviceMethod.createFromConnectionString(iotHubConnectionString, options);", "originalCommit": "4763c59dd7c754e37f1f1520b9abb2e116a83be5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java\nindex a56b47c22..8549303d3 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java\n\n@@ -494,7 +494,7 @@ public class DeviceMethodTests extends DeviceMethodCommon\n     @StandardTierHubOnlyTest\n     public void invokeMethodWithServiceSideProxy() throws Exception\n     {\n-        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS)\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS || testInstance.clientType != ClientType.DEVICE_CLIENT)\n         {\n             // This test doesn't really care about the device side protocol or authentication, so just run it once\n             // when the device is using MQTT with SAS auth\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDQ3Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465360472", "bodyText": "This test method uses the above testInstance.methodServiceClient with the proxy configured", "author": "timtay-microsoft", "createdAt": "2020-08-04T22:14:42Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java", "diffHunk": "@@ -483,4 +489,39 @@ public void invokeMethodOnUnregisteredDevice() throws Exception\n             }\n         }\n     }\n+\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void invokeMethodWithServiceSideProxy() throws Exception\n+    {\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        String testProxyHostname = \"127.0.0.1\";\n+        int testProxyPort = 8894;\n+        HttpProxyServer proxyServer = DefaultHttpProxyServer.bootstrap()\n+                .withPort(testProxyPort)\n+                .start();\n+\n+        try\n+        {\n+            Proxy serviceSideProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(testProxyHostname, testProxyPort));\n+\n+            ProxyOptions proxyOptions = new ProxyOptions(serviceSideProxy);\n+            DeviceMethodClientOptions options = DeviceMethodClientOptions.builder().proxyOptions(proxyOptions).build();\n+\n+            this.testInstance.methodServiceClient = DeviceMethod.createFromConnectionString(iotHubConnectionString, options);\n+\n+            super.openDeviceClientAndSubscribeToMethods();\n+            super.invokeMethodSucceed();", "originalCommit": "4763c59dd7c754e37f1f1520b9abb2e116a83be5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java\nindex a56b47c22..8549303d3 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java\n\n@@ -494,7 +494,7 @@ public class DeviceMethodTests extends DeviceMethodCommon\n     @StandardTierHubOnlyTest\n     public void invokeMethodWithServiceSideProxy() throws Exception\n     {\n-        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS)\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS || testInstance.clientType != ClientType.DEVICE_CLIENT)\n         {\n             // This test doesn't really care about the device side protocol or authentication, so just run it once\n             // when the device is using MQTT with SAS auth\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDY3MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465360671", "bodyText": "In order for some tests to have the twin service client use a proxy, and others to not, each test must have its own", "author": "timtay-microsoft", "createdAt": "2020-08-04T22:15:14Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -146,7 +145,6 @@ public static Collection inputs() throws Exception\n     protected static RegistryManager registryManager;\n     protected InternalClient internalClient;\n     protected static RawTwinQuery scRawTwinQueryClient;\n-    protected static DeviceTwin sCDeviceTwin;", "originalCommit": "4763c59dd7c754e37f1f1520b9abb2e116a83be5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\nindex 63b41bb4e..716b0f301 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n\n@@ -142,9 +139,7 @@ public class DeviceTwinCommon extends IntegrationTest\n     protected static String moduleIdPrefix = \"java-twin-e2e-test-module\";\n \n     // States of SDK\n-    protected static RegistryManager registryManager;\n     protected InternalClient internalClient;\n-    protected static RawTwinQuery scRawTwinQueryClient;\n     protected DeviceState deviceUnderTest = null;\n \n     protected DeviceState[] devicesUnderTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTcxNg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465361716", "bodyText": "These default values have changed to 24 seconds each to follow the RegistryManager pattern", "author": "timtay-microsoft", "createdAt": "2020-08-04T22:17:49Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -22,9 +23,9 @@\n {\n     private IotHubConnectionString iotHubConnectionString = null;\n     private Integer requestId = 0;\n-    private static final int DEFAULT_RESPONSE_TIMEOUT = 30; // default response timeout is 30 seconds\n-    private static final int DEFAULT_CONNECT_TIMEOUT = 0;", "originalCommit": "4763c59dd7c754e37f1f1520b9abb2e116a83be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNDM0OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468134349", "bodyText": "nit: If we are changing the default values, can we default to a round number instead? \ud83d\ude04", "author": "abhipsaMisra", "createdAt": "2020-08-10T19:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\nindex 20da38477..f83379ff4 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\n\n@@ -31,14 +31,16 @@ public class DeviceMethod\n      *\n      * @param connectionString is the IoTHub connection string.\n      * @return an instance of the DeviceMethod.\n-     * @throws IOException This exception is thrown if the object creation failed\n+     * @throws IOException This exception is thrown if the object creation failed.\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n     {\n-        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()\n-                .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n-                .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n-                .build());\n+        return createFromConnectionString(\n+                connectionString,\n+                DeviceMethodClientOptions.builder()\n+                    .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                    .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                    .build());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwOTM3OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465409378", "bodyText": "nit: extra line", "author": "sharmasejal", "createdAt": "2020-08-05T00:52:53Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -422,6 +420,8 @@ public DeviceTwinCommon(IotHubClientProtocol protocol, AuthenticationType authen\n         public String x509Thumbprint;\n         public String uuid;\n         public ClientType clientType;\n+        public DeviceTwin sCDeviceTwin;\n+", "originalCommit": "4d13d6874a433711423771bdb0c5bc6b88d3a307", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\nindex 63b41bb4e..716b0f301 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n\n@@ -420,10 +415,12 @@ public class DeviceTwinCommon extends IntegrationTest\n         public String x509Thumbprint;\n         public String uuid;\n         public ClientType clientType;\n-        public DeviceTwin sCDeviceTwin;\n+        public DeviceTwin twinServiceClient;\n+        public RegistryManager registryManager;\n+        public RawTwinQuery rawTwinQueryClient;\n \n \n-        public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint)\n+        public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n             this.authenticationType = authenticationType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMDMyNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465410327", "bodyText": "add stop punctuation for consistency", "author": "sharmasejal", "createdAt": "2020-08-05T00:56:14Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -33,17 +34,36 @@\n      * @throws IOException This exception is thrown if the object creation failed\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n+    {\n+        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()\n+                .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                .build());\n+    }\n+\n+    /**\n+     * Create a DeviceMethod instance from the information in the connection string.\n+     *\n+     * @param connectionString is the IoTHub connection string.\n+     * @param options the configurable options for each operation on this client. May not be null.\n+     * @return an instance of the DeviceMethod.\n+     * @throws IOException This exception is thrown if the object creation failed", "originalCommit": "4d13d6874a433711423771bdb0c5bc6b88d3a307", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\nindex 20da38477..f83379ff4 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\n\n@@ -31,14 +31,16 @@ public class DeviceMethod\n      *\n      * @param connectionString is the IoTHub connection string.\n      * @return an instance of the DeviceMethod.\n-     * @throws IOException This exception is thrown if the object creation failed\n+     * @throws IOException This exception is thrown if the object creation failed.\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n     {\n-        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()\n-                .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n-                .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n-                .build());\n+        return createFromConnectionString(\n+                connectionString,\n+                DeviceMethodClientOptions.builder()\n+                    .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                    .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                    .build());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMDkwNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465410905", "bodyText": "nit: best if we can be consistent with stoppages", "author": "sharmasejal", "createdAt": "2020-08-05T00:58:19Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -140,6 +143,91 @@ public static HttpResponse request(\n         return response;\n     }\n \n+    /**\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub", "originalCommit": "4d13d6874a433711423771bdb0c5bc6b88d3a307", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\nindex 5e531a662..d98afa456 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n\n@@ -146,17 +146,17 @@ public class DeviceOperations\n     /**\n      * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n      *\n-     * @param iotHubConnectionString is the connection string for the IoTHub\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n      * @param url is the Twin URL for the device ID.\n      * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n      * @param payload is the array of bytes that contains the payload.\n      * @param requestId is an unique number that identify the request.\n-     * @param connectTimeout the http connect timeout to use\n-     * @param readTimeout the http read timeout to use\n-     * @param proxy the proxy to use, or null if no proxy will be used\n+     * @param connectTimeout the http connect timeout to use, in milliseconds.\n+     * @param readTimeout the http read timeout to use, in milliseconds.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n      * @return the result of the request.\n-     * @throws IotHubException This exception is thrown if the response verification failed\n-     * @throws IOException This exception is thrown if the IO operation failed\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n      */\n     public static HttpResponse request(\n             IotHubConnectionString iotHubConnectionString,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMTA5NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465411094", "bodyText": "nit: same as above", "author": "sharmasejal", "createdAt": "2020-08-05T00:59:02Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwin.java", "diffHunk": "@@ -33,22 +34,36 @@\n      * @throws IOException This exception is thrown if the object creation failed\n      */\n     public static DeviceTwin createFromConnectionString(String connectionString) throws IOException\n+    {\n+        return createFromConnectionString(connectionString, DeviceTwinClientOptions.builder()\n+                .httpConnectTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                .httpReadTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                .build());\n+    }\n+\n+    /**\n+     * Static constructor to create instance from connection string\n+     *\n+     * @param connectionString The iot hub connection string\n+     * @param options the configurable options for each operation on this client. May not be null.", "originalCommit": "4d13d6874a433711423771bdb0c5bc6b88d3a307", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwin.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwin.java\nindex 74b38fa15..e375d6365 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwin.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwin.java\n\n@@ -27,27 +27,29 @@ public class DeviceTwin\n     private DeviceTwinClientOptions options;\n \n     /**\n-     * Static constructor to create instance from connection string\n+     * Static constructor to create instance from connection string.\n      *\n-     * @param connectionString The iot hub connection string\n-     * @return The instance of DeviceTwin\n-     * @throws IOException This exception is thrown if the object creation failed\n+     * @param connectionString The iot hub connection string.\n+     * @return The instance of DeviceTwin.\n+     * @throws IOException This exception is thrown if the object creation failed.\n      */\n     public static DeviceTwin createFromConnectionString(String connectionString) throws IOException\n     {\n-        return createFromConnectionString(connectionString, DeviceTwinClientOptions.builder()\n-                .httpConnectTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n-                .httpReadTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n-                .build());\n+        return createFromConnectionString(\n+                connectionString,\n+                DeviceTwinClientOptions.builder()\n+                    .httpConnectTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                    .httpReadTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                    .build());\n     }\n \n     /**\n-     * Static constructor to create instance from connection string\n+     * Static constructor to create instance from connection string.\n      *\n-     * @param connectionString The iot hub connection string\n+     * @param connectionString The iot hub connection string.\n      * @param options the configurable options for each operation on this client. May not be null.\n-     * @return The instance of DeviceTwin\n-     * @throws IOException This exception is thrown if the object creation failed\n+     * @return The instance of DeviceTwin.\n+     * @throws IOException This exception is thrown if the object creation failed.\n      */\n     public static DeviceTwin createFromConnectionString(String connectionString, DeviceTwinClientOptions options) throws IOException\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMTUwMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465411500", "bodyText": "nit: stop punctuation", "author": "sharmasejal", "createdAt": "2020-08-05T01:00:20Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all twin client operations\n+ */\n+@Builder\n+public class DeviceTwinClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds\n+\n+    /**\n+     * The options that specify what proxy to tunnel through. If null, no proxy will be used", "originalCommit": "4d13d6874a433711423771bdb0c5bc6b88d3a307", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java\nindex f8b0a6a75..846a9e294 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java\n\n@@ -5,7 +5,7 @@ import lombok.Builder;\n import lombok.Getter;\n \n /**\n- * Configurable options for all twin client operations\n+ * Configurable options for all twin client operations.\n  */\n @Builder\n public class DeviceTwinClientOptions\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkwOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465433908", "bodyText": "Can we not use a common client options for both methods and twins? They seem to be containing settings for the same properties.", "author": "abhipsaMisra", "createdAt": "2020-08-05T02:23:48Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all twin client operations.\n+ */\n+@Builder\n+public class DeviceTwinClientOptions", "originalCommit": "0cb2068f13be11a0c302e6af1aef2029d3b827b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NTA3NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465865075", "bodyText": "Right now they are the same, yes, but this separation allows us to add other options that are specific to method/twin/registry later", "author": "timtay-microsoft", "createdAt": "2020-08-05T16:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NzUwMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465867503", "bodyText": "Plus the one that exists right now is called \"RegistryManagerOptions\" so it would be a bit odd to recycle it for the twin and method clients", "author": "timtay-microsoft", "createdAt": "2020-08-05T16:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java\nindex 3b1fb8a70..846a9e294 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java\n\n@@ -23,7 +23,7 @@ public class DeviceTwinClientOptions\n      * The http read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from\n      * Input stream after a connection is established to a resource. If the timeout expires before there is data available\n      * for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout.\n-     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}.\n+     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}. Must be a non-negative value.\n      */\n     @Getter\n     private int httpReadTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NDk1MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466694950", "bodyText": "Now is a good time to rename this one like we did for some other tests", "author": "bikamani", "createdAt": "2020-08-06T21:25:35Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -422,6 +420,7 @@ public DeviceTwinCommon(IotHubClientProtocol protocol, AuthenticationType authen\n         public String x509Thumbprint;\n         public String uuid;\n         public ClientType clientType;\n+        public DeviceTwin sCDeviceTwin;", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\nindex 421e6662e..716b0f301 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n\n@@ -420,9 +415,12 @@ public class DeviceTwinCommon extends IntegrationTest\n         public String x509Thumbprint;\n         public String uuid;\n         public ClientType clientType;\n-        public DeviceTwin sCDeviceTwin;\n+        public DeviceTwin twinServiceClient;\n+        public RegistryManager registryManager;\n+        public RawTwinQuery rawTwinQueryClient;\n+\n \n-        public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint)\n+        public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n             this.authenticationType = authenticationType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjAwNg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466696006", "bodyText": "so why are we doing it?", "author": "bikamani", "createdAt": "2020-08-06T21:27:59Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -431,6 +430,17 @@ public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType\n             this.privateKey = privateKey;\n             this.x509Thumbprint = x509Thumbprint;\n             this.clientType = clientType;\n+\n+            try\n+            {\n+                this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+            }\n+            catch (IOException e)\n+            {\n+                // A little odd to do this, but the createFromConnectionString call doesn't ever actually throw this exception, and", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTI1NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468085255", "bodyText": "I'll get rid of this and just have every twin test constructor declare that they throw this instead", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\nindex 421e6662e..716b0f301 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n\n@@ -420,9 +415,12 @@ public class DeviceTwinCommon extends IntegrationTest\n         public String x509Thumbprint;\n         public String uuid;\n         public ClientType clientType;\n-        public DeviceTwin sCDeviceTwin;\n+        public DeviceTwin twinServiceClient;\n+        public RegistryManager registryManager;\n+        public RawTwinQuery rawTwinQueryClient;\n+\n \n-        public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint)\n+        public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n             this.authenticationType = authenticationType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjcxOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466696719", "bodyText": "Since you are moving this one to test instance. Are others here not used as a common resource?", "author": "bikamani", "createdAt": "2020-08-06T21:29:40Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -146,7 +145,6 @@ public static Collection inputs() throws Exception\n     protected static RegistryManager registryManager;\n     protected InternalClient internalClient;\n     protected static RawTwinQuery scRawTwinQueryClient;", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDE1NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470240154", "bodyText": "I can move these to be per-test instance, sure", "author": "timtay-microsoft", "createdAt": "2020-08-13T20:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\nindex 421e6662e..716b0f301 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java\n\n@@ -142,9 +139,7 @@ public class DeviceTwinCommon extends IntegrationTest\n     protected static String moduleIdPrefix = \"java-twin-e2e-test-module\";\n \n     // States of SDK\n-    protected static RegistryManager registryManager;\n     protected InternalClient internalClient;\n-    protected static RawTwinQuery scRawTwinQueryClient;\n     protected DeviceState deviceUnderTest = null;\n \n     protected DeviceState[] devicesUnderTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5Njk2Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466696963", "bodyText": "When do we see this one - GeneralSecurityException ?", "author": "bikamani", "createdAt": "2020-08-06T21:30:15Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -716,7 +725,7 @@ public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeR\n         this.internalClient.registerConnectionStatusChangeCallback(connectionStatusUpdateCallback, null);\n     }\n \n-    protected void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException\n+    protected void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NjY1Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468086652", "bodyText": "When something goes wrong when creating the SSL context", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5Njk2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTI5OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466701299", "bodyText": "So if we are using in both the tests, why are we removing @before block?", "author": "bikamani", "createdAt": "2020-08-06T21:40:39Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java", "diffHunk": "@@ -38,16 +47,47 @@ public GetTwinTests(IotHubClientProtocol protocol, AuthenticationType authentica\n         super(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n-    @Before\n-    public void setUpNewDeviceAndModule() throws IOException, IotHubException, URISyntaxException, InterruptedException, ModuleClientException, GeneralSecurityException\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n         super.setUpNewDeviceAndModule();\n+        super.testGetDeviceTwin();\n     }\n \n     @Test\n     @StandardTierHubOnlyTest\n-    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException\n+    public void testGetDeviceTwinWithProxy() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n-        super.testGetDeviceTwin();\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS || testInstance.clientType != ClientType.DEVICE_CLIENT)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        super.setUpNewDeviceAndModule();", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4ODk1Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468088956", "bodyText": "The @ Before runs before any of the short circuiting we do at line 66 above. Basically, there is no need to setup for a test that doesn't need to run", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NzgwOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468097809", "bodyText": "It helps to cut down on device identity creation, which has been a bottleneck lately in our builds", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java\nindex a7d8cb4c6..904305acf 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java\n\n@@ -42,7 +35,7 @@ import java.util.Collection;\n @RunWith(Parameterized.class)\n public class GetTwinTests extends DeviceTwinCommon\n {\n-    public GetTwinTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint)\n+    public GetTwinTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n         super(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTYzNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466701635", "bodyText": "nit: can we have the tabbing differentiate between the builder args and createFromConnectionString args. Eg:\npublic static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n{\n    return createFromConnectionString(\n            connectionString,\n            DeviceMethodClientOptions.builder()\n                    .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n                    .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n                    .build());\n}", "author": "abhipsaMisra", "createdAt": "2020-08-06T21:41:28Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -22,28 +23,47 @@\n {\n     private IotHubConnectionString iotHubConnectionString = null;\n     private Integer requestId = 0;\n-    private static final int DEFAULT_RESPONSE_TIMEOUT = 30; // default response timeout is 30 seconds\n-    private static final int DEFAULT_CONNECT_TIMEOUT = 0;\n-    private static final int THOUSAND_MS = 1000;\n+\n+    private DeviceMethodClientOptions options;\n+\n     /**\n      * Create a DeviceMethod instance from the information in the connection string.\n      *\n      * @param connectionString is the IoTHub connection string.\n      * @return an instance of the DeviceMethod.\n-     * @throws IOException This exception is thrown if the object creation failed\n+     * @throws IOException This exception is thrown if the object creation failed.\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n+    {\n+        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4OTQwMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468089401", "bodyText": "I'll do it here and for the same block of code in DeviceTwin.java sure", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\nindex b84fe4ff2..f83379ff4 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java\n\n@@ -35,10 +35,12 @@ public class DeviceMethod\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n     {\n-        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()\n-                .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n-                .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n-                .build());\n+        return createFromConnectionString(\n+                connectionString,\n+                DeviceMethodClientOptions.builder()\n+                    .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                    .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                    .build());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDM0NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466704344", "bodyText": "Is this a customer request?", "author": "bikamani", "createdAt": "2020-08-06T21:48:08Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4OTk0MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468089941", "bodyText": "The builder pattern is just for consistency with our RegistryManagerOptions class. These options are a customer ask to configure, yes", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\nindex ae6c0e699..ec7ba14e7 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\n\n@@ -23,7 +23,7 @@ public class DeviceMethodClientOptions\n      * The http read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from\n      * Input stream after a connection is established to a resource. If the timeout expires before there is data available\n      * for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout.\n-     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}.\n+     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}. Must be a non-negative value.\n      */\n     @Getter\n     private int httpReadTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQyMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466705423", "bodyText": "Why are these values 24?", "author": "bikamani", "createdAt": "2020-08-06T21:50:32Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MDA5Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468090096", "bodyText": "These were the defaults before my changes here", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\nindex ae6c0e699..ec7ba14e7 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\n\n@@ -23,7 +23,7 @@ public class DeviceMethodClientOptions\n      * The http read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from\n      * Input stream after a connection is established to a resource. If the timeout expires before there is data available\n      * for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout.\n-     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}.\n+     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}. Must be a non-negative value.\n      */\n     @Getter\n     private int httpReadTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466705433", "bodyText": "If proxy is present as a part of options, then in order to invoke methods and update twins, I'd have to set proxy to their specific \"options\" types, correct?\nWouldn't that be a bit of overhead? What do think about having a ClientOptions type instead (with proxy, and anything else that would be common across the client), and have these operations specific options inherit from that?", "author": "abhipsaMisra", "createdAt": "2020-08-06T21:50:33Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -127,74 +147,43 @@ public synchronized MethodResult invoke(String deviceId, String moduleId, String\n      * @param methodName is the name of the method that shall be invoked on the device.\n      * @param responseTimeoutInSeconds is the maximum waiting time for a response from the device in seconds.\n      * @param connectTimeoutInSeconds is the maximum waiting time for a response from the connection in seconds.\n-     * @param payload is the the method parameter\n-     * @return the status and payload resulted from the method invoke\n-     * @throws IotHubException This exception is thrown if the response verification failed\n-     * @throws IOException This exception is thrown if the IO operation failed\n+     * @param payload is the the method parameter.\n+     * @return the status and payload resulted from the method invoke.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n      */\n     private synchronized MethodResult invokeMethod(URL url, String methodName, Long responseTimeoutInSeconds, Long connectTimeoutInSeconds, Object payload) throws IotHubException, IOException\n     {\n-        /* Codes_SRS_DEVICEMETHOD_21_006: [The invoke shall throw IllegalArgumentException if the provided responseTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_007: [The invoke shall throw IllegalArgumentException if the provided connectTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_014: [The invoke shall bypass the Exception if one of the functions called by invoke failed.] */\n         MethodParser methodParser = new MethodParser(methodName, responseTimeoutInSeconds, connectTimeoutInSeconds, payload);\n \n-        /* Codes_SRS_DEVICEMETHOD_21_011: [The invoke shall add a HTTP body with Json created by the `serializer.MethodParser`.] */\n         String json = methodParser.toJson();\n         if(json == null)\n         {\n-            /* Codes_SRS_DEVICEMETHOD_21_012: [If `MethodParser` return a null Json, the invoke shall throw IllegalArgumentException.] */\n             throw new IllegalArgumentException(\"MethodParser return null Json\");\n         }\n \n-        long  responseTimeout, connectTimeout;\n+        Proxy proxy = options.getProxyOptions() != null ? options.getProxyOptions().getProxy() : null;", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MjY3MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468092671", "bodyText": "Customers can re-use the same ProxyOptions instance, but you are right that they would have to create separate methods/twin/registry options classes to house that. It is a bit of overhead, sure, but I think this is the easiest design for customer's to understand.\nI'm not sure inheritance here would make for the best user experience. If the constructor for a twin/method service client took a concrete class named ClientOptions, then how am I supposed to know that there is also some TwinClientOptions class that inherits from it that has other options that I may want? I'd rather just have several concrete classes so that the API is quick to pick up and customer's won't miss important configurable options.", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5OTA3Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468099073", "bodyText": "Yes, I agree; inheritance will not be solving anything here from customer's perspective, but it might make code maintenance easier for us though.", "author": "abhipsaMisra", "createdAt": "2020-08-10T18:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDY3NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470240675", "bodyText": "But what is more important, customer usability or code maintenance? I don't think that we are imposing too much on ourselves here", "author": "timtay-microsoft", "createdAt": "2020-08-13T20:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMTI4Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466711286", "bodyText": "What happens if these are negative values?", "author": "bikamani", "createdAt": "2020-08-06T22:05:18Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds\n+\n+    /**\n+     * The options that specify what proxy to tunnel through. If null, no proxy will be used.\n+     */\n+    @Getter\n+    private ProxyOptions proxyOptions;\n+\n+    /**\n+     * The http read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from\n+     * Input stream after a connection is established to a resource. If the timeout expires before there is data available\n+     * for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout.", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MzgzMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468093833", "bodyText": "The http library will throw an exception saying \"timeout cannot be negative\"", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\nindex ae6c0e699..ec7ba14e7 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java\n\n@@ -23,7 +23,7 @@ public class DeviceMethodClientOptions\n      * The http read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from\n      * Input stream after a connection is established to a resource. If the timeout expires before there is data available\n      * for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout.\n-     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}.\n+     * By default, this value is {@link #DEFAULT_HTTP_READ_TIMEOUT_MS}. Must be a non-negative value.\n      */\n     @Getter\n     private int httpReadTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ2MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466713460", "bodyText": "Add a comment about this timeout values being in seconds", "author": "bikamani", "createdAt": "2020-08-06T22:11:23Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MzIyOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468093228", "bodyText": "milliseconds, but yeah I'll add a note", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\nindex b5c1f9f41..d98afa456 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n\n@@ -151,8 +151,8 @@ public class DeviceOperations\n      * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n      * @param payload is the array of bytes that contains the payload.\n      * @param requestId is an unique number that identify the request.\n-     * @param connectTimeout the http connect timeout to use.\n-     * @param readTimeout the http read timeout to use.\n+     * @param connectTimeout the http connect timeout to use, in milliseconds.\n+     * @param readTimeout the http read timeout to use, in milliseconds.\n      * @param proxy the proxy to use, or null if no proxy will be used.\n      * @return the result of the request.\n      * @throws IotHubException This exception is thrown if the response verification failed.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ4NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466713484", "bodyText": "should we not check these values >= 0? What's the behavior otherwise?", "author": "bikamani", "createdAt": "2020-08-06T22:11:26Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.\n+     * @param readTimeout the http read timeout to use.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");\n+        }\n+\n+        if (method == null)\n+        {\n+            throw new IllegalArgumentException(\"Null method\");\n+        }\n+\n+        String sasTokenString = new IotHubServiceSasToken(iotHubConnectionString).toString();\n+        if((sasTokenString == null) || sasTokenString.isEmpty())\n+        {\n+            throw new IOException(\"Illegal sasToken null or empty\");\n+        }\n+\n+        HttpRequest request;\n+        if (proxy != null)\n+        {\n+            request = new HttpRequest(url, method, payload, proxy);\n+        }\n+        else\n+        {\n+            request = new HttpRequest(url, method, payload);\n+        }\n+\n+        request.setReadTimeoutMillis(readTimeout);", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MzY0MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468093640", "bodyText": "The http library we use does this check for us and throws an appropriate exception, so I don't see the need to add any checking up here.", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\nindex b5c1f9f41..d98afa456 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n\n@@ -151,8 +151,8 @@ public class DeviceOperations\n      * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n      * @param payload is the array of bytes that contains the payload.\n      * @param requestId is an unique number that identify the request.\n-     * @param connectTimeout the http connect timeout to use.\n-     * @param readTimeout the http read timeout to use.\n+     * @param connectTimeout the http connect timeout to use, in milliseconds.\n+     * @param readTimeout the http read timeout to use, in milliseconds.\n      * @param proxy the proxy to use, or null if no proxy will be used.\n      * @return the result of the request.\n      * @throws IotHubException This exception is thrown if the response verification failed.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzk2Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466713967", "bodyText": "should we not catch exception here?", "author": "bikamani", "createdAt": "2020-08-06T22:12:46Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.\n+     * @param readTimeout the http read timeout to use.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");\n+        }\n+\n+        if (method == null)\n+        {\n+            throw new IllegalArgumentException(\"Null method\");\n+        }\n+\n+        String sasTokenString = new IotHubServiceSasToken(iotHubConnectionString).toString();\n+        if((sasTokenString == null) || sasTokenString.isEmpty())\n+        {\n+            throw new IOException(\"Illegal sasToken null or empty\");\n+        }\n+\n+        HttpRequest request;\n+        if (proxy != null)\n+        {\n+            request = new HttpRequest(url, method, payload, proxy);\n+        }\n+        else\n+        {\n+            request = new HttpRequest(url, method, payload);\n+        }\n+\n+        request.setReadTimeoutMillis(readTimeout);\n+        request.setConnectTimeoutMillis(connectTimeout);\n+\n+        if((requestId != null) && !requestId.isEmpty())\n+        {\n+            request.setHeaderField(REQUEST_ID, requestId);\n+        }\n+\n+        request.setHeaderField(AUTHORIZATION, sasTokenString);\n+        request.setHeaderField(USER_AGENT, TransportUtils.javaServiceClientIdentifier + TransportUtils.serviceVersion);\n+        request.setHeaderField(ACCEPT, ACCEPT_VALUE);\n+        request.setHeaderField(CONTENT_TYPE, ACCEPT_VALUE + \"; \" + ACCEPT_CHARSET);\n+\n+        if (headers != null)\n+        {\n+            for(Map.Entry<String, String> header : headers.entrySet())\n+            {\n+                request.setHeaderField(header.getKey(), header.getValue());\n+            }\n+\n+            headers = null;\n+        }\n+\n+        HttpResponse response = request.send();", "originalCommit": "b9a9cf16e5a95442c588c51539c3c0679978264e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NTQyNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468095425", "bodyText": "No, what would we do with the exception if we caught it? For IOExceptions, they will get bubbled up to the user as expected. For hub level exceptions (404, 429, etc) the line below this one check the http response and will generate and throw any appropriate exceptions", "author": "timtay-microsoft", "createdAt": "2020-08-10T18:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\nindex b5c1f9f41..d98afa456 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n\n@@ -151,8 +151,8 @@ public class DeviceOperations\n      * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n      * @param payload is the array of bytes that contains the payload.\n      * @param requestId is an unique number that identify the request.\n-     * @param connectTimeout the http connect timeout to use.\n-     * @param readTimeout the http read timeout to use.\n+     * @param connectTimeout the http connect timeout to use, in milliseconds.\n+     * @param readTimeout the http read timeout to use, in milliseconds.\n      * @param proxy the proxy to use, or null if no proxy will be used.\n      * @return the result of the request.\n      * @throws IotHubException This exception is thrown if the response verification failed.\n"}}, {"oid": "7da0f8d9531a021eab767e244234ed44e22c5b85", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/7da0f8d9531a021eab767e244234ed44e22c5b85", "message": "feat(iot-service): Add proxy support and configurable read/connect timeouts to methods/twin clients\n\nIn order to write tests for the proxy support, each test instance now has its own twin service client so that some can be configured to use proxies and others are not\n\nHaving the twin/method client's read/connect timeouts be configurable will help our e2e tests deal with timeouts when doing method/twin operations", "committedDate": "2020-08-10T18:31:40Z", "type": "commit"}, {"oid": "7da0f8d9531a021eab767e244234ed44e22c5b85", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/7da0f8d9531a021eab767e244234ed44e22c5b85", "message": "feat(iot-service): Add proxy support and configurable read/connect timeouts to methods/twin clients\n\nIn order to write tests for the proxy support, each test instance now has its own twin service client so that some can be configured to use proxies and others are not\n\nHaving the twin/method client's read/connect timeouts be configurable will help our e2e tests deal with timeouts when doing method/twin operations", "committedDate": "2020-08-10T18:31:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNTU0NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468135545", "bodyText": "nit: can we add some more context to these exception messages - http method is null, endpoint connecting to is null etc?", "author": "abhipsaMisra", "createdAt": "2020-08-10T19:35:06Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use, in milliseconds.\n+     * @param readTimeout the http read timeout to use, in milliseconds.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");", "originalCommit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDg1Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470240856", "bodyText": "Sure", "author": "timtay-microsoft", "createdAt": "2020-08-13T20:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNTU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7030a4be028676b95b07d49e512d62d27ffbf4b4", "chunk": "diff --git a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\nindex d98afa456..3faca5ead 100644\n--- a/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n+++ b/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java\n\n@@ -169,19 +170,19 @@ public class DeviceOperations\n             Proxy proxy)\n             throws IOException, IotHubException, IllegalArgumentException\n     {\n-        if (iotHubConnectionString == null)\n+        if(iotHubConnectionString == null)\n         {\n-            throw new IllegalArgumentException(\"Null ConnectionString\");\n+            throw new IllegalArgumentException(\"Http requests must provide a non-null connection string\");\n         }\n \n-        if (url == null)\n+        if(url == null)\n         {\n-            throw new IllegalArgumentException(\"Null URL\");\n+            throw new IllegalArgumentException(\"Http requests must provide a non-null URL\");\n         }\n \n-        if (method == null)\n+        if(method == null)\n         {\n-            throw new IllegalArgumentException(\"Null method\");\n+            throw new IllegalArgumentException(\"Http requests must provide a non-null http method\");\n         }\n \n         String sasTokenString = new IotHubServiceSasToken(iotHubConnectionString).toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNzExMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468137110", "bodyText": "Q - haven't seen this before! Do we have a sample/ test on how these non-sql queries are used?", "author": "abhipsaMisra", "createdAt": "2020-08-10T19:38:17Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/QueryCollection.java", "diffHunk": "@@ -116,14 +127,86 @@ protected QueryCollection(int pageSize, QueryType requestQueryType, IotHubConnec\n         this.isInitialQuery = true;\n     }\n \n+    /**\n+     * Constructor for sql based queries\n+     *\n+     * @param query the sql query to use.\n+     * @param pageSize the size of the page to return per query collection response.\n+     * @param requestQueryType the type of query this is.\n+     * @param iotHubConnectionString the connection string to connect with to query against.\n+     * @param url the url to query against.\n+     * @param httpMethod the http method to call with the query.\n+     * @param httpConnectTimeout the http connect timeout to use.\n+     * @param httpReadTimeout the http read timeout to use.\n+     * @throws IllegalArgumentException if page size is 0 or negative, or if the query type is null or unknown, of if the query string is null or empty,\n+     *  or if the provided connection string is null, or if the provided url is null, or if the provided http method is null.\n+     */\n+    protected QueryCollection(String query, int pageSize, QueryType requestQueryType, IotHubConnectionString iotHubConnectionString, URL url, HttpMethod httpMethod, int httpConnectTimeout, int httpReadTimeout, Proxy proxy)\n+    {\n+        this.validateQueryRequestArguments(iotHubConnectionString, url, httpMethod, pageSize, requestQueryType);\n+\n+        ParserUtility.validateQuery(query);\n+\n+        this.pageSize = pageSize;\n+        this.query = query;\n+        this.requestQueryType = requestQueryType;\n+        this.iotHubConnectionString = iotHubConnectionString;\n+        this.responseContinuationToken = null;\n+        this.httpMethod = httpMethod;\n+        this.httpConnectTimeout = httpConnectTimeout;\n+        this.httpReadTimeout = httpReadTimeout;\n+        this.proxy = proxy;\n+        this.url = url;\n+        this.responseQueryType = QueryType.UNKNOWN;\n+\n+        this.isSqlQuery = true;\n+\n+        this.isInitialQuery = true;\n+    }\n+\n+    /**\n+     * Constructor for non-sql based queries.", "originalCommit": "7da0f8d9531a021eab767e244234ed44e22c5b85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MjUzNg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470242536", "bodyText": "Honestly, I'm not sure how this API gets used. \"Non-sql query\" seems contradictory to me", "author": "timtay-microsoft", "createdAt": "2020-08-13T20:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNzExMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7030a4be028676b95b07d49e512d62d27ffbf4b4", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/7030a4be028676b95b07d49e512d62d27ffbf4b4", "message": "cr comments", "committedDate": "2020-08-13T20:54:37Z", "type": "commit"}, {"oid": "e79b4ed1ae0199e3485140e8de4f7a573497e22e", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e79b4ed1ae0199e3485140e8de4f7a573497e22e", "message": "Merge branch 'master' into timtay/httpTimeouts", "committedDate": "2020-08-18T21:34:31Z", "type": "commit"}]}