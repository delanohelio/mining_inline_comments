{"pr_number": 1040, "pr_title": "BXC-2711 - Improve deposit pausing", "pr_createdAt": "2020-07-10T12:57:01Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/1040", "timeline": [{"oid": "0fdfc7aa334a709d8decc2e0516281d6b5cb97ba", "url": "https://github.com/UNC-Libraries/box-c/commit/0fdfc7aa334a709d8decc2e0516281d6b5cb97ba", "message": "Switch binary transfers to using FileUtils methods, since they are using FileChannels behind the scenes, which can be more performant and are interruptible", "committedDate": "2020-07-09T18:38:30Z", "type": "commit"}, {"oid": "6c27fdc8e09ab8e2ba629597b07ec725b69ec63a", "url": "https://github.com/UNC-Libraries/box-c/commit/6c27fdc8e09ab8e2ba629597b07ec725b69ec63a", "message": "Add breakpoints into deposit jobs where it will check to see if the thread has been interrupted or the deposit paused. If so, a JobInterruptedException is thrown. Interruption logged at info level.\n\nFix bug in virus scan job caused when not exception is returned by clam.\nIngest job throwing original exceptions instead of transaction exceptions.\nRemoved unused exception handling block from supervisor.\nRemoved extra scan of files in directory normalization job.", "committedDate": "2020-07-09T20:36:13Z", "type": "commit"}, {"oid": "f7726e75942f5796d8948c8fe7a860a8999e5c98", "url": "https://github.com/UNC-Libraries/box-c/commit/f7726e75942f5796d8948c8fe7a860a8999e5c98", "message": "Tests for pausing and resuming", "committedDate": "2020-07-10T12:44:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTk5MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452829991", "bodyText": "Would this cause any noticeable slowdown in ingest, checking for interruptions so often in succession?", "author": "lfarrell", "createdAt": "2020-07-10T13:04:59Z", "path": "deposit/src/main/java/edu/unc/lib/deposit/normalize/BagIt2N3BagJob.java", "diffHunk": "@@ -92,10 +92,14 @@ public void runJob() {\n             MandatoryVerifier.checkBagitFileExists(bagReader.getRootDir(), bagReader.getVersion());\n \n             try (BagVerifier verifier = new BagVerifier()) {\n+                interruptJobIfStopped();\n                 verifier.isComplete(bagReader, false);\n+                interruptJobIfStopped();\n                 verifier.isValid(bagReader, false);\n             }\n \n+            interruptJobIfStopped();", "originalCommit": "f7726e75942f5796d8948c8fe7a860a8999e5c98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NDEwMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452884100", "bodyText": "I tried to balance that by not adding too many of these checks in, and not adding them at all for some of the jobs that finish quickly. I decided which jobs to add it to by looking at the runtimes for each job in previous testing tickets. These checks should be pretty fast since redis is on the same server, and is generally very fast. But it is still a new cost.\nIn this particular case, there is a max of 3 calls for the job, unlike some of the others where it depends on the number of objects, so I'm not too worried about it in this case. I tried to place them in between long running steps, before it starts writing to the deposit model.", "author": "bbpennel", "createdAt": "2020-07-10T14:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTk5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjA2OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452832068", "bodyText": "Does DepositState.running need to be here twice?", "author": "lfarrell", "createdAt": "2020-07-10T13:08:59Z", "path": "deposit/src/test/java/edu/unc/lib/deposit/fcrepo4/IngestContentObjectsJobTest.java", "diffHunk": "@@ -441,6 +450,52 @@ public void resumeIngestWorkObjectTest() throws Exception {\n         verify(jobStatusFactory).setTotalCompletion(eq(jobUUID), eq(3));\n     }\n \n+    @Test\n+    public void pauseAndResumeTest() throws Exception {\n+        PID workPid = makePid(RepositoryPathConstants.CONTENT_BASE);\n+        WorkObject work = mock(WorkObject.class);\n+        Bag workBag = setupWork(workPid, work);\n+\n+        String mainLoc = \"pdf.pdf\";\n+        String mainMime = \"application/pdf\";\n+        PID mainPid = addFileObject(workBag, mainLoc, mainMime);\n+\n+        workBag.addProperty(Cdr.primaryObject, model.getResource(mainPid.getRepositoryPath()));\n+\n+        job.closeModel();\n+\n+        when(work.addDataFile(any(PID.class), any(URI.class),\n+                anyString(), anyString(), anyString(), anyString(), any(Model.class)))\n+                .thenReturn(mockFileObj);\n+        when(mockFileObj.getPid()).thenReturn(mainPid);\n+\n+        when(depositStatusFactory.getState(depositUUID))\n+                .thenReturn(DepositState.running)\n+                .thenReturn(DepositState.running)", "originalCommit": "f7726e75942f5796d8948c8fe7a860a8999e5c98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NTg2MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452885861", "bodyText": "when multiple thenReturns are chained like this, it means the first and second calls of getState will return running, and then all calls after that will return paused. So the number of runnings depended on the number of calls expected", "author": "bbpennel", "createdAt": "2020-07-10T14:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjA2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjk4MA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452832980", "bodyText": "Same here, does it need to be here twice?", "author": "lfarrell", "createdAt": "2020-07-10T13:10:38Z", "path": "deposit/src/test/java/edu/unc/lib/deposit/validate/VirusScanJobTest.java", "diffHunk": "@@ -233,6 +234,49 @@ public void errorScanTest() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void pauseScanTest() throws Exception {\n+        when(scanResult.getStatus()).thenReturn(Status.PASSED);\n+\n+        Model model = job.getWritableModel();\n+        Bag depBag = model.createBag(depositPid.getRepositoryPath());\n+\n+        File pdfFile = new File(depositDir, \"pdf.pdf\");\n+        File textFile = new File(depositDir, \"text.txt\");\n+        PID file1Pid = addFileObject(depBag, pdfFile);\n+        PID file2Pid = addFileObject(depBag, textFile);\n+\n+        // Should be running for the first file, then paused\n+        when(depositStatusFactory.getState(depositUUID))\n+                .thenReturn(DepositState.running)\n+                .thenReturn(DepositState.running)", "originalCommit": "f7726e75942f5796d8948c8fe7a860a8999e5c98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NjY5Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/1040#discussion_r452886696", "bodyText": "this was so it would register as \"paused\" on the second file, since there is now an interrupt check at the beginning of every deposit job.", "author": "bbpennel", "createdAt": "2020-07-10T14:40:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjk4MA=="}], "type": "inlineReview", "revised_code": null}]}