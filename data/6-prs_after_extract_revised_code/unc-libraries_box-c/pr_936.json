{"pr_number": 936, "pr_title": "BXC-2527 - MODS History/versioning", "pr_createdAt": "2020-03-20T19:09:49Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/936", "timeline": [{"oid": "e90a6289ea2945efd1332586e04e13cc68cdc563", "url": "https://github.com/UNC-Libraries/box-c/commit/e90a6289ea2945efd1332586e04e13cc68cdc563", "message": "Make service exceptions a type of repo exception", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "fb33c6530c5d87978b6b59f5485260b63d70d539", "url": "https://github.com/UNC-Libraries/box-c/commit/fb33c6530c5d87978b6b59f5485260b63d70d539", "message": "Implement history log and service for adding new versions to a versioned datastream", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "3fe8e70607dff56b74c15a1bb31409424c58de37", "url": "https://github.com/UNC-Libraries/box-c/commit/3fe8e70607dff56b74c15a1bb31409424c58de37", "message": "add test for history log", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "a48c84c536f10bbcaabb533291f4c3b554488d28", "url": "https://github.com/UNC-Libraries/box-c/commit/a48c84c536f10bbcaabb533291f4c3b554488d28", "message": "add integration test for VersionedDatastreamService", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "5ba82084faab58776879646e9ba88c644ca1cb05", "url": "https://github.com/UNC-Libraries/box-c/commit/5ba82084faab58776879646e9ba88c644ca1cb05", "message": "replacing setDescription with update description service", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "e6f2f1540c6d08db319b4940823b1f1eb9cecbbc", "url": "https://github.com/UNC-Libraries/box-c/commit/e6f2f1540c6d08db319b4940823b1f1eb9cecbbc", "message": "Use namespace for datastream history", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "fc1f6a7c138510ed26b50512d76fd4c0b41b8cc6", "url": "https://github.com/UNC-Libraries/box-c/commit/fc1f6a7c138510ed26b50512d76fd4c0b41b8cc6", "message": "Remove unused exists method", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "ad9554d50c5e0d3cd9dc364d57a7a65cd6edbee9", "url": "https://github.com/UNC-Libraries/box-c/commit/ad9554d50c5e0d3cd9dc364d57a7a65cd6edbee9", "message": "Use last modified timestamp for versions created after the first one added to the log.", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "ddc0f50c9b86b5835b2c790400b3859c7fb9030a", "url": "https://github.com/UNC-Libraries/box-c/commit/ddc0f50c9b86b5835b2c790400b3859c7fb9030a", "message": "Add manager for getting locks on pids", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "cfd292d90a2192c784a211f86c673efe50426da6", "url": "https://github.com/UNC-Libraries/box-c/commit/cfd292d90a2192c784a211f86c673efe50426da6", "message": "Lock pids for writing before beginning version updating. Not using fedora transaction here since it would not protect binary transfers and there are inconsistencies as to whether or not fedora returns a date created in a transaction", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "37730b37acdad9e0a7caef37ea6a4308d762918e", "url": "https://github.com/UNC-Libraries/box-c/commit/37730b37acdad9e0a7caef37ea6a4308d762918e", "message": "Fixes to fedora content service to require valid datastreams be selected, and to allow access to datastreams other than the original file. Datastreams now record what container they can be found in. Added datastream for mods history", "committedDate": "2020-03-25T20:11:35Z", "type": "commit"}, {"oid": "37730b37acdad9e0a7caef37ea6a4308d762918e", "url": "https://github.com/UNC-Libraries/box-c/commit/37730b37acdad9e0a7caef37ea6a4308d762918e", "message": "Fixes to fedora content service to require valid datastreams be selected, and to allow access to datastreams other than the original file. Datastreams now record what container they can be found in. Added datastream for mods history", "committedDate": "2020-03-25T20:11:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NzUyOA==", "url": "https://github.com/UNC-Libraries/box-c/pull/936#discussion_r398797528", "bodyText": "Is this needed?", "author": "bbpennel", "createdAt": "2020-03-26T18:26:09Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java", "diffHunk": "@@ -114,34 +117,49 @@ public void init() throws Exception{\n         objPid = PIDs.get(UUID.randomUUID().toString());\n         modsPid = getMdDescriptivePid(objPid);\n         modsStream = new ByteArrayInputStream(FILE_CONTENT.getBytes());\n-        transferredUri = URI.create(\"file:///path/to/transferred/file.txt\");\n \n-        when(obj.setDescription(any(URI.class))).thenReturn(mock(BinaryObject.class));\n+        when(versioningService.addVersion(any(DatastreamVersion.class))).thenReturn(mockDescBin);\n         when(obj.getPid()).thenReturn(objPid);\n \n-        when(transferSession.transferReplaceExisting(modsPid, modsStream)).thenReturn(transferredUri);\n-\n         service = new UpdateDescriptionService();\n         service.setAclService(aclService);\n         service.setRepositoryObjectLoader(repoObjLoader);\n+        service.setRepositoryObjectFactory(repoObjFactory);\n         service.setOperationsMessageSender(messageSender);\n         service.setModsValidator(modsValidator);\n-        service.setTransferService(transferService);\n+        service.setVersionedDatastreamService(versioningService);\n     }\n \n     @Test\n     public void updateDescriptionTest() throws Exception {\n-        when(transferService.getSession(obj)).thenReturn(transferSession);\n-\n         service.updateDescription(agent, objPid, modsStream);\n \n-        verify(transferSession).transferReplaceExisting(eq(modsPid), inputStreamCaptor.capture());\n-        assertEquals(FILE_CONTENT, IOUtils.toString(inputStreamCaptor.getValue()));\n+        verify(versioningService).addVersion(versionCaptor.capture());\n+        DatastreamVersion version = versionCaptor.getValue();\n+        assertEquals(modsPid, version.getDsPid());\n+        assertEquals(\"text/xml\", version.getContentType());\n+        assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n \n-        verify(obj).setDescription(transferredUri);\n+        verify(versioningService).addVersion(any(DatastreamVersion.class));", "originalCommit": "37730b37acdad9e0a7caef37ea6a4308d762918e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9854396e55933f6f331adfe47f079c176ba00ac1", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\nindex 588fea411..5262a31a8 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\n\n@@ -140,8 +140,6 @@ public class UpdateDescriptionServiceTest {\n         assertEquals(\"text/xml\", version.getContentType());\n         assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n \n-        verify(versioningService).addVersion(any(DatastreamVersion.class));\n-\n         assertMessageSent();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5Nzg3OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/936#discussion_r398797878", "bodyText": "check", "author": "bbpennel", "createdAt": "2020-03-26T18:26:41Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java", "diffHunk": "@@ -114,34 +117,49 @@ public void init() throws Exception{\n         objPid = PIDs.get(UUID.randomUUID().toString());\n         modsPid = getMdDescriptivePid(objPid);\n         modsStream = new ByteArrayInputStream(FILE_CONTENT.getBytes());\n-        transferredUri = URI.create(\"file:///path/to/transferred/file.txt\");\n \n-        when(obj.setDescription(any(URI.class))).thenReturn(mock(BinaryObject.class));\n+        when(versioningService.addVersion(any(DatastreamVersion.class))).thenReturn(mockDescBin);\n         when(obj.getPid()).thenReturn(objPid);\n \n-        when(transferSession.transferReplaceExisting(modsPid, modsStream)).thenReturn(transferredUri);\n-\n         service = new UpdateDescriptionService();\n         service.setAclService(aclService);\n         service.setRepositoryObjectLoader(repoObjLoader);\n+        service.setRepositoryObjectFactory(repoObjFactory);\n         service.setOperationsMessageSender(messageSender);\n         service.setModsValidator(modsValidator);\n-        service.setTransferService(transferService);\n+        service.setVersionedDatastreamService(versioningService);\n     }\n \n     @Test\n     public void updateDescriptionTest() throws Exception {\n-        when(transferService.getSession(obj)).thenReturn(transferSession);\n-\n         service.updateDescription(agent, objPid, modsStream);\n \n-        verify(transferSession).transferReplaceExisting(eq(modsPid), inputStreamCaptor.capture());\n-        assertEquals(FILE_CONTENT, IOUtils.toString(inputStreamCaptor.getValue()));\n+        verify(versioningService).addVersion(versionCaptor.capture());\n+        DatastreamVersion version = versionCaptor.getValue();\n+        assertEquals(modsPid, version.getDsPid());\n+        assertEquals(\"text/xml\", version.getContentType());\n+        assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n \n-        verify(obj).setDescription(transferredUri);\n+        verify(versioningService).addVersion(any(DatastreamVersion.class));\n \n         assertMessageSent();\n+    }\n+\n+    @Test\n+    public void updateDescriptionAlreadyExistsTest() throws Exception {\n+        when(repoObjFactory.objectExists(modsPid.getRepositoryUri())).thenReturn(true);\n+\n+        service.updateDescription(agent, objPid, modsStream);\n \n+        verify(versioningService).addVersion(versionCaptor.capture());\n+        DatastreamVersion version = versionCaptor.getValue();\n+        assertEquals(modsPid, version.getDsPid());\n+        assertEquals(\"text/xml\", version.getContentType());\n+        assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n+\n+        verify(versioningService).addVersion(any(DatastreamVersion.class));", "originalCommit": "37730b37acdad9e0a7caef37ea6a4308d762918e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9854396e55933f6f331adfe47f079c176ba00ac1", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\nindex 588fea411..5262a31a8 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\n\n@@ -140,8 +140,6 @@ public class UpdateDescriptionServiceTest {\n         assertEquals(\"text/xml\", version.getContentType());\n         assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n \n-        verify(versioningService).addVersion(any(DatastreamVersion.class));\n-\n         assertMessageSent();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODMwMw==", "url": "https://github.com/UNC-Libraries/box-c/pull/936#discussion_r398798303", "bodyText": "check", "author": "bbpennel", "createdAt": "2020-03-26T18:27:21Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java", "diffHunk": "@@ -171,14 +202,31 @@ public void invalidModsValidationOff() throws Exception {\n     public void updateDescriptionProvidedSession() throws Exception {\n         service.updateDescription(transferSession, agent, objPid, modsStream);\n \n-        verify(transferSession).transferReplaceExisting(eq(modsPid), inputStreamCaptor.capture());\n-        assertEquals(FILE_CONTENT, IOUtils.toString(inputStreamCaptor.getValue()));\n-\n-        verify(obj).setDescription(transferredUri);\n+        verify(versioningService).addVersion(versionCaptor.capture());\n+        DatastreamVersion version = versionCaptor.getValue();\n+        assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n+        assertEquals(transferSession, version.getTransferSession());\n \n         assertMessageSent();\n     }\n \n+    @Test\n+    public void updateDescriptionDisableMassgesTest() throws Exception {\n+        service.setSendsMessages(false);\n+\n+        service.updateDescription(agent, objPid, modsStream);\n+\n+        verify(versioningService).addVersion(versionCaptor.capture());\n+        DatastreamVersion version = versionCaptor.getValue();\n+        assertEquals(modsPid, version.getDsPid());\n+        assertEquals(\"text/xml\", version.getContentType());\n+        assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n+\n+        verify(versioningService).addVersion(any(DatastreamVersion.class));", "originalCommit": "37730b37acdad9e0a7caef37ea6a4308d762918e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9854396e55933f6f331adfe47f079c176ba00ac1", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\nindex 588fea411..5262a31a8 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/UpdateDescriptionServiceTest.java\n\n@@ -222,8 +218,6 @@ public class UpdateDescriptionServiceTest {\n         assertEquals(\"text/xml\", version.getContentType());\n         assertEquals(FILE_CONTENT, IOUtils.toString(version.getContentStream()));\n \n-        verify(versioningService).addVersion(any(DatastreamVersion.class));\n-\n         verify(messageSender, never()).sendUpdateDescriptionOperation(anyString(), pidsCaptor.capture());\n     }\n \n"}}, {"oid": "9854396e55933f6f331adfe47f079c176ba00ac1", "url": "https://github.com/UNC-Libraries/box-c/commit/9854396e55933f6f331adfe47f079c176ba00ac1", "message": "Remove unneeded code", "committedDate": "2020-03-26T18:43:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0MDk4MA==", "url": "https://github.com/UNC-Libraries/box-c/pull/936#discussion_r398840980", "bodyText": "Did you want to remove this?", "author": "lfarrell", "createdAt": "2020-03-26T19:36:07Z", "path": "fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java", "diffHunk": "@@ -143,5 +143,4 @@ public RepositoryObject getRepositoryObject(PID pid) {\n             }\n         }\n     }\n-", "originalCommit": "9854396e55933f6f331adfe47f079c176ba00ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzMzI1MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/936#discussion_r399233251", "bodyText": "I had added a new method here and then removed it a commit or two later. I've undone this change now", "author": "bbpennel", "createdAt": "2020-03-27T12:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0MDk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e394273c8951682f141412fbb2c308de3f443cfd", "chunk": "diff --git a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java\nindex ed0f01e51..23557e0a7 100644\n--- a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java\n+++ b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java\n\n@@ -143,4 +143,5 @@ public class RepositoryObjectLoader {\n             }\n         }\n     }\n+\n }\n"}}, {"oid": "e394273c8951682f141412fbb2c308de3f443cfd", "url": "https://github.com/UNC-Libraries/box-c/commit/e394273c8951682f141412fbb2c308de3f443cfd", "message": "Undo change", "committedDate": "2020-03-27T12:35:57Z", "type": "commit"}]}