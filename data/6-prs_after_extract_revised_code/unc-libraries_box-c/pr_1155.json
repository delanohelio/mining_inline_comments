{"pr_number": 1155, "pr_title": "BXC-2950 - Filter fedora queue", "pr_createdAt": "2020-11-30T18:09:05Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/1155", "timeline": [{"oid": "491fd9899637e6589780bfa23145667f0c7a993f", "url": "https://github.com/UNC-Libraries/box-c/commit/491fd9899637e6589780bfa23145667f0c7a993f", "message": "Consolidate fcrepo jms constants into constants file", "committedDate": "2020-11-30T18:05:16Z", "type": "commit"}, {"oid": "a9ad8fda623de35c5cc66c33a463e2b22addfeb0", "url": "https://github.com/UNC-Libraries/box-c/commit/a9ad8fda623de35c5cc66c33a463e2b22addfeb0", "message": "Add filters to fedora message processing to limit which objects receive triple store indexing and enhancement processing", "committedDate": "2020-11-30T18:05:16Z", "type": "commit"}, {"oid": "717133e79d17c07c6982e9575d3beaa39cedd35c", "url": "https://github.com/UNC-Libraries/box-c/commit/717133e79d17c07c6982e9575d3beaa39cedd35c", "message": "Add constructor", "committedDate": "2020-11-30T18:14:56Z", "type": "commit"}, {"oid": "f7b5d7a9302213fca241bb938f41bcc4480f13eb", "url": "https://github.com/UNC-Libraries/box-c/commit/f7b5d7a9302213fca241bb938f41bcc4480f13eb", "message": "Allow all binaries through so that they can be registered with longleaf", "committedDate": "2020-11-30T18:50:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMDM0OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1155#discussion_r533400348", "bodyText": "Should event logs have enhancements run on them?", "author": "lfarrell", "createdAt": "2020-12-01T13:19:27Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java", "diffHunk": "@@ -78,6 +84,110 @@ public void testRouteStartContainer() throws Exception {\n         assertMockEndpointsSatisfied();\n     }\n \n+    @Test\n+    public void testRouteStartTimemap() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/\" + FCR_VERSIONS,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartDatafs() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs\",\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartDepositRecord() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(DEPOSIT_ID,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartNotAPid() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"what/is/going/on\",\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartCollections() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"/content/\" + RepositoryPathConstants.CONTENT_ROOT_ID,\n+                Fcrepo4Repository.Container.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartBinaryMetadata() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(0);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs/original_file/fcr:metadata\",\n+                Fcrepo4Repository.NonRdfSourceDescription.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartOriginalBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(1);\n+\n+        createContext(META_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID + \"/datafs/original_file\",\n+                Fcrepo4Repository.Binary.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testRouteStartPremisBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(1);", "originalCommit": "f7b5d7a9302213fca241bb938f41bcc4480f13eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NjQzOA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1155#discussion_r535356438", "bodyText": "The issue at the moment is that longleaf registration happens in the EnhancementRouter, while the new filtering is in MetaServicesRouter, so all binaries have to reach MetaServicesRouter at the moment. But we don't need enhancements on any binaries except originals currently. I could move the call to longleaf up into the metaservicesrouter... that might be better in some ways, as running enhancements doesn't affect the original binary, so it shouldn't need to register in longleaf again. On the other hand, we might have to add a way to trigger longleaf registration for cases where it fails. I think that's fine though. I'll try to split longleaf out of the enhancement router.", "author": "bbpennel", "createdAt": "2020-12-03T15:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMDM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "a6a4fc05e288af78c34a39576503c7fb99da8531", "chunk": "diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java\nindex ffa1b647b..1a981c7d3 100644\n--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java\n+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java\n\n@@ -75,11 +75,12 @@ public class MetaServicesRouterTest extends CamelSpringTestSupport {\n     @Test\n     public void testRouteStartContainer() throws Exception {\n         getMockEndpoint(\"mock:direct-vm:index.start\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct-vm:filter.longleaf\").expectedMessageCount(0);\n         getMockEndpoint(\"mock:direct:process.enhancement\").expectedMessageCount(1);\n \n         createContext(META_ROUTE);\n \n-        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID, Binary.getURI()));\n+        template.sendBodyAndHeaders(\"\", createEvent(CONTAINER_ID, Container.getURI()));\n \n         assertMockEndpointsSatisfied();\n     }\n"}}, {"oid": "a6a4fc05e288af78c34a39576503c7fb99da8531", "url": "https://github.com/UNC-Libraries/box-c/commit/a6a4fc05e288af78c34a39576503c7fb99da8531", "message": "Move longleaf registration up to metaservicesrouter", "committedDate": "2020-12-03T16:24:14Z", "type": "commit"}, {"oid": "214d7dd5043baff34de0167cd6de1bcae034996c", "url": "https://github.com/UNC-Libraries/box-c/commit/214d7dd5043baff34de0167cd6de1bcae034996c", "message": "Adds deposit record root pid and returns it from PIDs.get, so that we don't get failures when deposit record root is filter", "committedDate": "2020-12-03T17:08:04Z", "type": "commit"}]}