{"pr_number": 983, "pr_title": "Only run enhancements if they don't already exist or are \"forced\"", "pr_createdAt": "2020-05-05T16:00:25Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/983", "timeline": [{"oid": "bf71da29d4de7f010ea69be16e0a7575c78397e5", "url": "https://github.com/UNC-Libraries/box-c/commit/bf71da29d4de7f010ea69be16e0a7575c78397e5", "message": "Only run enhancements if they don't already exist or are \"forced\"", "committedDate": "2020-05-05T16:02:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyNjI4OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422126289", "bodyText": "think you can remove this one, its not used in this test", "author": "bbpennel", "createdAt": "2020-05-08T12:54:45Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java", "diffHunk": "@@ -121,6 +122,9 @@\n     @BeanInject(value = \"fulltextProcessor\")\n     private FulltextProcessor fulltextProcessor;\n \n+    @BeanInject(value = \"addFullTextDerivativeProcessor\")", "originalCommit": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d1d8cf5bcaca9e0ca2a0f0d5fd94e5146ee8e", "chunk": "diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java\nindex aefdfd527..44564924c 100644\n--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java\n+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java\n\n@@ -122,9 +122,6 @@ public class EnhancementRouterIT {\n     @BeanInject(value = \"fulltextProcessor\")\n     private FulltextProcessor fulltextProcessor;\n \n-    @BeanInject(value = \"addFullTextDerivativeProcessor\")\n-    private AddDerivativeProcessor adProcessor;\n-\n     @BeanInject(value = \"binaryMetadataProcessor\")\n     private BinaryMetadataProcessor binaryMetadataProcessor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyOTU3Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422129576", "bodyText": "You can probably skip these delete steps since you have the @After method which recursively deletes the dir. If you didn't, this delete could be problematic since if the test failed it wouldn't delete the file.", "author": "bbpennel", "createdAt": "2020-05-08T13:02:02Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouterTest.java", "diffHunk": "@@ -60,14 +74,60 @@ protected AbstractApplicationContext createApplicationContext() {\n         return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/fulltext-context.xml\");\n     }\n \n+    @After\n+    public void cleanup() throws IOException {\n+        FileUtils.deleteDirectory(new File(\"target/34\"));\n+    }\n+\n+    @Test\n+    public void testFullTextExtractionFilterValidMimeTypeNoForceNoExistingFile() throws Exception {\n+        getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(1);\n+        createContext(ENHANCEMENT_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent());\n+        assertMockEndpointsSatisfied();\n+    }\n+\n     @Test\n-    public void testFullTextExtractionFilterValidMimeType() throws Exception {\n+    public void testFullTextExtractionFilterValidMimeTypeForceNoExistingFile() throws Exception {\n         getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(1);\n         createContext(ENHANCEMENT_ROUTE);\n \n+        Map<String, Object> headers = createEvent();\n+        headers.put(\"force\", \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testFullTextExtractionFilterValidMimeTypeNoForceExistingFile() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".txt\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(0);\n+        createContext(ENHANCEMENT_ROUTE);\n+\n+        Map<String, Object> headers = createEvent();\n         template.sendBodyAndHeaders(\"\", createEvent());\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testFullTextExtractionFilterValidMimeTypeForceExistingFile() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".txt\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        getMockEndpoint(\"mock:direct:fulltext.extraction\").expectedMessageCount(1);\n+        createContext(ENHANCEMENT_ROUTE);\n \n+        Map<String, Object> headers = createEvent();\n+        headers.put(\"force\", \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n         assertMockEndpointsSatisfied();\n+        existingFile.delete();", "originalCommit": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d1d8cf5bcaca9e0ca2a0f0d5fd94e5146ee8e", "chunk": "diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouterTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouterTest.java\nindex c58e45df1..554ba05d0 100644\n--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouterTest.java\n+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouterTest.java\n\n@@ -111,7 +111,6 @@ public class FulltextRouterTest extends CamelSpringTestSupport {\n         Map<String, Object> headers = createEvent();\n         template.sendBodyAndHeaders(\"\", createEvent());\n         assertMockEndpointsSatisfied();\n-        existingFile.delete();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMDY5MA==", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422130690", "bodyText": "Can remove these in this class as well", "author": "bbpennel", "createdAt": "2020-05-08T13:04:27Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "diffHunk": "@@ -123,40 +150,146 @@ public void testThumbDisallowedImageType() throws Exception {\n     }\n \n     @Test\n-    public void testThumbSmallRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceNoFileExists() throws Exception {\n         createContext(smallThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceNoFileExists() throws Exception {\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n         template.sendBodyAndHeaders(\"\", headers);\n \n         verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testThumbLargeRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();", "originalCommit": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d1d8cf5bcaca9e0ca2a0f0d5fd94e5146ee8e", "chunk": "diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\nindex f4922dbc5..233b0ad16 100644\n--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\n+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\n\n@@ -190,7 +190,6 @@ public class ImageEnhancementsRouterTest extends CamelSpringTestSupport {\n \n         verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n-        existingFile.delete();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMTQ5NA==", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422131494", "bodyText": "Is this throw serving a purpose here? Doesn't seem like what you'd expect in a successful case", "author": "bbpennel", "createdAt": "2020-05-08T13:06:15Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "diffHunk": "@@ -123,40 +150,146 @@ public void testThumbDisallowedImageType() throws Exception {\n     }\n \n     @Test\n-    public void testThumbSmallRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceNoFileExists() throws Exception {\n         createContext(smallThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceNoFileExists() throws Exception {\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n         template.sendBodyAndHeaders(\"\", headers);\n \n         verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testThumbLargeRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbLargeRouteNoForceNoFileExists() throws Exception {\n         createContext(largeThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n \n         template.sendBodyAndHeaders(\"\", headers);\n \n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));\n+\n         verify(addLargeThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testAccessCopyRoute() throws Exception {\n+    public void testThumbLargeRouteForceNoFileExists() throws Exception {\n+        createContext(largeThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));", "originalCommit": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d1d8cf5bcaca9e0ca2a0f0d5fd94e5146ee8e", "chunk": "diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\nindex f4922dbc5..233b0ad16 100644\n--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\n+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\n\n@@ -190,7 +190,6 @@ public class ImageEnhancementsRouterTest extends CamelSpringTestSupport {\n \n         verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n-        existingFile.delete();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMTg2Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r422131867", "bodyText": "same question for this throw, plus you can probably remove the delete below", "author": "bbpennel", "createdAt": "2020-05-08T13:07:01Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java", "diffHunk": "@@ -123,40 +150,146 @@ public void testThumbDisallowedImageType() throws Exception {\n     }\n \n     @Test\n-    public void testThumbSmallRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceNoFileExists() throws Exception {\n         createContext(smallThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceNoFileExists() throws Exception {\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n         template.sendBodyAndHeaders(\"\", headers);\n \n         verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testThumbLargeRoute() throws Exception {\n+    public void testThumbSmallRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbSmallRouteForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+\n+        createContext(smallThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+        existingFile.delete();\n+    }\n+\n+    @Test\n+    public void testThumbLargeRouteNoForceNoFileExists() throws Exception {\n         createContext(largeThumbRoute);\n \n         getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n \n-        Map<String, Object> headers = createEvent(fileID, eventTypes);\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n \n         template.sendBodyAndHeaders(\"\", headers);\n \n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));\n+\n         verify(addLargeThumbnailProcessor).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n     }\n \n     @Test\n-    public void testAccessCopyRoute() throws Exception {\n+    public void testThumbLargeRouteForceNoFileExists() throws Exception {\n+        createContext(largeThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(1);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"true\");\n+\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));\n+\n+        verify(addLargeThumbnailProcessor).process(any(Exchange.class));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void testThumbLargeRouteNoForceFileExists() throws Exception {\n+        String derivativePath = idToPath(fileID, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + derivativePath + \"/\" + fileID + \".png\");\n+        FileUtils.writeStringToFile(existingFile, \"extracted text\", \"utf-8\");\n+        createContext(largeThumbRoute);\n+\n+        getMockEndpoint(\"mock:exec:/bin/sh\").expectedMessageCount(0);\n+\n+        Map<String, Object> headers = createEvent(fileID, eventTypes, \"false\");\n+\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        doThrow(Exception.class).when(addLargeThumbnailProcessor).process(any(Exchange.class));", "originalCommit": "6131c1af48c73bf94a3b63c60b2e498a295bdfcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "645d1d8cf5bcaca9e0ca2a0f0d5fd94e5146ee8e", "chunk": "diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\nindex f4922dbc5..233b0ad16 100644\n--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\n+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java\n\n@@ -190,7 +190,6 @@ public class ImageEnhancementsRouterTest extends CamelSpringTestSupport {\n \n         verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));\n         assertMockEndpointsSatisfied();\n-        existingFile.delete();\n     }\n \n     @Test\n"}}, {"oid": "645d1d8cf5bcaca9e0ca2a0f0d5fd94e5146ee8e", "url": "https://github.com/UNC-Libraries/box-c/commit/645d1d8cf5bcaca9e0ca2a0f0d5fd94e5146ee8e", "message": "Update tests", "committedDate": "2020-05-08T16:00:41Z", "type": "forcePushed"}, {"oid": "dfdf14a8ffa48c0fd10a66c655836372ddf5300a", "url": "https://github.com/UNC-Libraries/box-c/commit/dfdf14a8ffa48c0fd10a66c655836372ddf5300a", "message": "Only run enhancements if they don't already exist or are \"forced\"", "committedDate": "2020-05-08T17:57:24Z", "type": "commit"}, {"oid": "6dce8cd26eff3d8c510066c926079e63ce2294dd", "url": "https://github.com/UNC-Libraries/box-c/commit/6dce8cd26eff3d8c510066c926079e63ce2294dd", "message": "Add failing test", "committedDate": "2020-05-08T17:57:24Z", "type": "commit"}, {"oid": "ed83f2ff5c7ae5b405711af1515dac834ed23318", "url": "https://github.com/UNC-Libraries/box-c/commit/ed83f2ff5c7ae5b405711af1515dac834ed23318", "message": "Move where needsRun filter runs and update tests", "committedDate": "2020-05-08T17:57:24Z", "type": "commit"}, {"oid": "a21f598962e2aff97f854a3d42e239164e08c63e", "url": "https://github.com/UNC-Libraries/box-c/commit/a21f598962e2aff97f854a3d42e239164e08c63e", "message": "Always create new thumbnails for collections/admin units", "committedDate": "2020-05-08T17:57:24Z", "type": "commit"}, {"oid": "a430e8bd158c47ceacc162245860dfb36297a281", "url": "https://github.com/UNC-Libraries/box-c/commit/a430e8bd158c47ceacc162245860dfb36297a281", "message": "Update tests", "committedDate": "2020-05-08T17:57:24Z", "type": "commit"}, {"oid": "a430e8bd158c47ceacc162245860dfb36297a281", "url": "https://github.com/UNC-Libraries/box-c/commit/a430e8bd158c47ceacc162245860dfb36297a281", "message": "Update tests", "committedDate": "2020-05-08T17:57:24Z", "type": "forcePushed"}, {"oid": "81fa282484aa1c80de9b0fb170cea398dcd137d7", "url": "https://github.com/UNC-Libraries/box-c/commit/81fa282484aa1c80de9b0fb170cea398dcd137d7", "message": "Allow collections with thumbnails to have enhancments run on them", "committedDate": "2020-05-13T14:53:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NjE1Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/983#discussion_r424566153", "bodyText": "Hmm, I would rather leave it up to the enhancement processors to decide if anything needs to be done to an object rather than do it here, which we would need to remember to update in the future if more types of derivatives are added for non-files. So I'd suggest removing this and the conditional at 119. The shortcut to jump to the original ds is probably fine to keep.", "author": "bbpennel", "createdAt": "2020-05-13T16:19:40Z", "path": "services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java", "diffHunk": "@@ -110,11 +115,12 @@ public void setAclService(AccessControlService aclService) {\n     private void createMessage(BriefObjectMetadata metadata, String username, Boolean force) {\n         PID pid = metadata.getPid();\n         Datastream originalDs = metadata.getDatastreamObject(ORIGINAL_FILE.getId());\n-        if (originalDs == null) {\n+        Datastream hasThumbnail = metadata.getDatastreamObject(THUMBNAIL_SMALL.getId());", "originalCommit": "81fa282484aa1c80de9b0fb170cea398dcd137d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7ae84b0cfe77d4db8bd06272dd8f6c74c2385eb", "chunk": "diff --git a/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java b/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java\nindex 566588499..64dfbe9df 100644\n--- a/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java\n+++ b/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/RunEnhancementsService.java\n\n@@ -115,11 +114,6 @@ public class RunEnhancementsService {\n     private void createMessage(BriefObjectMetadata metadata, String username, Boolean force) {\n         PID pid = metadata.getPid();\n         Datastream originalDs = metadata.getDatastreamObject(ORIGINAL_FILE.getId());\n-        Datastream hasThumbnail = metadata.getDatastreamObject(THUMBNAIL_SMALL.getId());\n-        if (originalDs == null && hasThumbnail == null) {\n-            return;\n-        }\n-\n         PID originalPid = (originalDs != null) ? DatastreamPids.getOriginalFilePid(pid) : pid;\n         Document msg = makeEnhancementOperationBody(username, originalPid, force);\n         messageSender.sendMessage(msg);\n"}}, {"oid": "f7ae84b0cfe77d4db8bd06272dd8f6c74c2385eb", "url": "https://github.com/UNC-Libraries/box-c/commit/f7ae84b0cfe77d4db8bd06272dd8f6c74c2385eb", "message": "Remove conditional check", "committedDate": "2020-05-13T17:10:16Z", "type": "commit"}, {"oid": "f7ae84b0cfe77d4db8bd06272dd8f6c74c2385eb", "url": "https://github.com/UNC-Libraries/box-c/commit/f7ae84b0cfe77d4db8bd06272dd8f6c74c2385eb", "message": "Remove conditional check", "committedDate": "2020-05-13T17:10:16Z", "type": "forcePushed"}]}