{"pr_number": 966, "pr_title": "Add ExpireEmbargoService class and tests; add new premis resource", "pr_createdAt": "2020-04-28T14:13:04Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/966", "timeline": [{"oid": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "url": "https://github.com/UNC-Libraries/box-c/commit/b4668a5c51d3f16524db10be8e9a2905004ab79f", "message": "Add ExpireEmbargoService class and tests; add new premis resource", "committedDate": "2020-04-24T20:41:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY1NDI5Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416654296", "bodyText": "Could you rename this to \"Dissemination\" and move it up in with the other eventTypes above, alphabetically?", "author": "bbpennel", "createdAt": "2020-04-28T14:22:11Z", "path": "metadata/src/main/java/edu/unc/lib/dl/rdf/Premis.java", "diffHunk": "@@ -268,4 +268,7 @@ public static String getURI() {\n     public static final Resource Fail = createResource(\"http://id.loc.gov/vocabulary/preservation/eventOutcome/fai\");\n \n     public static final Resource Success = createResource(\"http://id.loc.gov/vocabulary/preservation/eventOutcome/suc\");\n+\n+    public static final Resource ExpireEmbargo = createResource(", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/metadata/src/main/java/edu/unc/lib/dl/rdf/Premis.java b/metadata/src/main/java/edu/unc/lib/dl/rdf/Premis.java\nindex 6ddddc0dc..8e98e3b31 100644\n--- a/metadata/src/main/java/edu/unc/lib/dl/rdf/Premis.java\n+++ b/metadata/src/main/java/edu/unc/lib/dl/rdf/Premis.java\n\n@@ -268,7 +268,4 @@ public class Premis {\n     public static final Resource Fail = createResource(\"http://id.loc.gov/vocabulary/preservation/eventOutcome/fai\");\n \n     public static final Resource Success = createResource(\"http://id.loc.gov/vocabulary/preservation/eventOutcome/suc\");\n-\n-    public static final Resource ExpireEmbargo = createResource(\n-            \"http://id.loc.gov/vocabulary/preservation/eventType/dis\");\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2NzY3Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416667676", "bodyText": "you can do model.getResource(repoObj.getResource()); to save a step", "author": "bbpennel", "createdAt": "2020-04-28T14:38:33Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+\n+import java.util.Date;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    public void expireEmbargo(PID pid, PatronAccessDetails accessDetails, AgentPrincipals agent) {\n+        try (Timer.Context context = timer.time()) {\n+            RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+            Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+            Resource resc = model.getResource(repoObj.getPid().getRepositoryPath());", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8652997d7..9e0d9ac4a 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,22 +15,38 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n import edu.unc.lib.dl.fedora.PID;\n import edu.unc.lib.dl.metrics.TimerFactory;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Resource;\n \n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n+import java.util.List;\n \n import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n \n /**\n  * Service that manages embargo expiration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1OTI4MA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416759280", "bodyText": "So it seems like the two remaining steps are detecting expired embargoes, and performing this check periodically.\nTo detect expired embargoes, you'll need to run a sparql query. You should be able to inject an instance of SparqlQueryService to do this. For an example of its usage, you can see:\nhttps://github.com/UNC-Libraries/Carolina-Digital-Repository/blob/fcrepo4/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyProxyService.java#L82-L105\nYou'll need to query for objects with an embargoUtil property in the past. This post might be helpful https://stackoverflow.com/questions/24051435/filter-by-date-range-in-sparql\nMy guess is that implementing this will inform the design of expireEmbargo some as well. You will most likely just be starting from a PID.\nFor the other step of performing a method on a schedule, one option is this annotation:\nhttps://www.baeldung.com/spring-scheduled-tasks", "author": "bbpennel", "createdAt": "2020-04-28T16:36:15Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+\n+import java.util.Date;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class ExpireEmbargoService {", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8652997d7..9e0d9ac4a 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,22 +15,38 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n import edu.unc.lib.dl.fedora.PID;\n import edu.unc.lib.dl.metrics.TimerFactory;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Resource;\n \n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n+import java.util.List;\n \n import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n \n /**\n  * Service that manages embargo expiration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NTEwMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416765100", "bodyText": "You may want to use the deleteProperty method in RepositoryObjectFactory which can be used to delete all triples with a particular predicate on an object directly in the repository.\nYou may have already been looking some at the existing service for updating patron access controls:\nhttps://github.com/UNC-Libraries/Carolina-Digital-Repository/blob/8f456d1b07a9737b389756a9fe1cbb38c5d238e2/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/PatronAccessAssignmentService.java\nBut it updates a lot of settings at once, so it might not be a great model. There may be useful details in the updateEmbargo method, but its probably overkill.", "author": "bbpennel", "createdAt": "2020-04-28T16:44:51Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+\n+import java.util.Date;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    public void expireEmbargo(PID pid, PatronAccessDetails accessDetails, AgentPrincipals agent) {\n+        try (Timer.Context context = timer.time()) {\n+            RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+            Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+            Resource resc = model.getResource(repoObj.getPid().getRepositoryPath());\n+\n+            String eventText = null;\n+\n+            // remove embargo from access controls\n+            Date accessDetailsEmbargo = accessDetails.getEmbargo();\n+\n+            boolean expiredEmbargo = false;\n+            if (accessDetailsEmbargo != null) {", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8652997d7..9e0d9ac4a 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,22 +15,38 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n import edu.unc.lib.dl.fedora.PID;\n import edu.unc.lib.dl.metrics.TimerFactory;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Resource;\n \n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n+import java.util.List;\n \n import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n \n /**\n  * Service that manages embargo expiration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NzQyMg==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416767422", "bodyText": "You should wrap removal of the embargo and adding of the premis event into a transaction. There should be good examples of the usage patterns for TransactionManager elsewhere in this module.", "author": "bbpennel", "createdAt": "2020-04-28T16:48:11Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+\n+import java.util.Date;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    public void expireEmbargo(PID pid, PatronAccessDetails accessDetails, AgentPrincipals agent) {\n+        try (Timer.Context context = timer.time()) {", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8652997d7..9e0d9ac4a 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,22 +15,38 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n import edu.unc.lib.dl.fedora.PID;\n import edu.unc.lib.dl.metrics.TimerFactory;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Resource;\n \n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n+import java.util.List;\n \n import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n \n /**\n  * Service that manages embargo expiration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3MTE5NA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416771194", "bodyText": "Looks like we want to use a software agent for these events according to the profile. There are enumerations for these, although we may need to update one of them to match the profile.\nSee edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent\nThe profile is here:\nhttps://docs.google.com/spreadsheets/d/1GdHWCI_4iY0TcQv_B_Xa4-mZoA4X-BgSafnXA4FRVsI/edit#gid=1409504546&range=324:337\nSo I think the value is supposed to be embargo-update-service", "author": "bbpennel", "createdAt": "2020-04-28T16:53:24Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+\n+import java.util.Date;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    public void expireEmbargo(PID pid, PatronAccessDetails accessDetails, AgentPrincipals agent) {\n+        try (Timer.Context context = timer.time()) {\n+            RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+            Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+            Resource resc = model.getResource(repoObj.getPid().getRepositoryPath());\n+\n+            String eventText = null;\n+\n+            // remove embargo from access controls\n+            Date accessDetailsEmbargo = accessDetails.getEmbargo();\n+\n+            boolean expiredEmbargo = false;\n+            if (accessDetailsEmbargo != null) {\n+                accessDetails.setEmbargo(null);\n+                expiredEmbargo = true;\n+            }\n+            if (resc.hasProperty(embargoUntil)) {\n+                resc.removeAll(embargoUntil);\n+                expiredEmbargo = true;\n+            }\n+\n+            if (expiredEmbargo) {\n+                eventText = \"Expired an embargo which ended \" + accessDetailsEmbargo.toString();\n+            } else {\n+                eventText = \"Failed to expire embargo.\";\n+            }\n+\n+            // Produce the premis event for this embargo\n+            Resource embargoEvent = repoObj.getPremisLog().buildEvent(Premis.ExpireEmbargo)\n+                    .addImplementorAgent(agent.getUsernameUri())", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8652997d7..9e0d9ac4a 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,22 +15,38 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n import edu.unc.lib.dl.fedora.PID;\n import edu.unc.lib.dl.metrics.TimerFactory;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Resource;\n \n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n+import java.util.List;\n \n import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n \n /**\n  * Service that manages embargo expiration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NDgwMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416774800", "bodyText": "It would be good to have an integration test of this functionality, and it may actually be easier to write than a unit test, particularly once you have the sparql query stuff in there, so you're welcome to switch this over to being an integration test.\nDestroyObjectsJobIT would probably be a good reference, it has a lot of the same needs as this service, plus some extra stuff you don't need (you don't need to create nearly as many objects for example). The context files it uses might be fine too, although i haven't looked closely. The treeIndexer usage should be pretty helpful in terms of populating the triple store. I'm happy to consult or help get things started if that would be useful.", "author": "bbpennel", "createdAt": "2020-04-28T16:58:52Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisEventBuilder;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.test.SelfReturningAnswer;\n+import org.apache.jena.rdf.model.Literal;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+public class ExpireEmbargoServiceTest {", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceTest.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceTest.java\ndeleted file mode 100644\nindex 00f2b6f0d..000000000\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceTest.java\n+++ /dev/null\n\n@@ -1,143 +0,0 @@\n-/**\n- * Copyright 2008 The University of North Carolina at Chapel Hill\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *         http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package edu.unc.lib.dl.persist.services.edit;\n-\n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n-import edu.unc.lib.dl.event.PremisEventBuilder;\n-import edu.unc.lib.dl.event.PremisLogger;\n-import edu.unc.lib.dl.fcrepo4.PIDs;\n-import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n-import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n-import edu.unc.lib.dl.fedora.PID;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n-import edu.unc.lib.dl.rdf.Premis;\n-import edu.unc.lib.dl.test.SelfReturningAnswer;\n-import org.apache.jena.rdf.model.Literal;\n-import org.apache.jena.rdf.model.Model;\n-import org.apache.jena.rdf.model.ModelFactory;\n-import org.apache.jena.rdf.model.Resource;\n-import org.apache.jena.rdf.model.Statement;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Mock;\n-\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.UUID;\n-\n-import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.anyString;\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.mockito.MockitoAnnotations.initMocks;\n-\n-public class ExpireEmbargoServiceTest {\n-\n-    @Mock\n-    private RepositoryObjectLoader repoObjLoader;\n-    @Mock\n-    private RepositoryObject repoObj;\n-    @Mock\n-    private Model model;\n-    @Mock\n-    private Resource resc;\n-    @Mock\n-    private AgentPrincipals agent;\n-    @Mock\n-    private PremisLogger premisLogger;\n-    @Mock\n-    private Statement statement;\n-    @Mock\n-    private Literal literal;\n-\n-    @Captor\n-    private ArgumentCaptor<String> labelCaptor;\n-\n-    private PremisEventBuilder eventBuilder;\n-    private PID pid;\n-    private ExpireEmbargoService service;\n-\n-    @Before\n-    public void init() {\n-        initMocks(this);\n-\n-        pid = PIDs.get(UUID.randomUUID().toString());\n-        service = new ExpireEmbargoService();\n-        service.setRepositoryObjectLoader(repoObjLoader);\n-\n-        Model objModel = ModelFactory.createDefaultModel();\n-        when(repoObj.getModel()).thenReturn(objModel);\n-\n-        when(repoObjLoader.getRepositoryObject(any(PID.class))).thenReturn(repoObj);\n-        when(repoObj.getPid()).thenReturn(pid);\n-        when(model.getResource(anyString())).thenReturn(resc);\n-\n-        eventBuilder = mock(PremisEventBuilder.class, new SelfReturningAnswer());\n-        when(repoObj.getPremisLog()).thenReturn(premisLogger);\n-        when(premisLogger.buildEvent(eq(Premis.ExpireEmbargo))).thenReturn(eventBuilder);\n-        when(agent.getUsernameUri()).thenReturn(\"agentname\");\n-        when(eventBuilder.write()).thenReturn(resc);\n-    }\n-\n-    @Test\n-    public void expireEmbargoTest() {\n-        Date embargoUntilDate = yesterday();\n-\n-        when(resc.hasProperty(embargoUntil)).thenReturn(true);\n-        when(resc.getProperty(embargoUntil)).thenReturn(statement);\n-        when(statement.getLiteral()).thenReturn(literal);\n-        when(literal.getValue()).thenReturn(embargoUntilDate.toString());\n-\n-        PatronAccessDetails accessDetails = new PatronAccessDetails();\n-        accessDetails.setEmbargo(embargoUntilDate);\n-\n-        service.expireEmbargo(pid, accessDetails, agent);\n-\n-        verify(premisLogger).buildEvent(eq(Premis.ExpireEmbargo));\n-        verify(eventBuilder).addEventDetail(labelCaptor.capture());\n-        assertEquals(\"Expired an embargo which ended \" + embargoUntilDate, labelCaptor.getValue());\n-        verify(eventBuilder).writeAndClose();\n-    }\n-\n-\n-    @Test\n-    public void expireEmbargoFailureTest() {\n-        when(resc.hasProperty(embargoUntil)).thenReturn(false);\n-        when(resc.getProperty(embargoUntil)).thenReturn(null);\n-\n-        PatronAccessDetails accessDetails = new PatronAccessDetails();\n-        accessDetails.setEmbargo(null);\n-\n-        service.expireEmbargo(pid, accessDetails, agent);\n-\n-        verify(premisLogger).buildEvent(eq(Premis.ExpireEmbargo));\n-        verify(eventBuilder).addEventDetail(labelCaptor.capture());\n-        assertEquals(\"Failed to expire embargo.\", labelCaptor.getValue());\n-        verify(eventBuilder).writeAndClose();\n-    }\n-\n-    private Date yesterday() {\n-        final Calendar cal = Calendar.getInstance();\n-        cal.add(Calendar.DATE, -1);\n-        return cal.getTime();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NTYxNg==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416775616", "bodyText": "I don't think you need to do this step, the usage of writeAndClose just above this should be pushing the event directly to fedora.", "author": "bbpennel", "createdAt": "2020-04-28T17:00:10Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+\n+import java.util.Date;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    public void expireEmbargo(PID pid, PatronAccessDetails accessDetails, AgentPrincipals agent) {\n+        try (Timer.Context context = timer.time()) {\n+            RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+            Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+            Resource resc = model.getResource(repoObj.getPid().getRepositoryPath());\n+\n+            String eventText = null;\n+\n+            // remove embargo from access controls\n+            Date accessDetailsEmbargo = accessDetails.getEmbargo();\n+\n+            boolean expiredEmbargo = false;\n+            if (accessDetailsEmbargo != null) {\n+                accessDetails.setEmbargo(null);\n+                expiredEmbargo = true;\n+            }\n+            if (resc.hasProperty(embargoUntil)) {\n+                resc.removeAll(embargoUntil);\n+                expiredEmbargo = true;\n+            }\n+\n+            if (expiredEmbargo) {\n+                eventText = \"Expired an embargo which ended \" + accessDetailsEmbargo.toString();\n+            } else {\n+                eventText = \"Failed to expire embargo.\";\n+            }\n+\n+            // Produce the premis event for this embargo\n+            Resource embargoEvent = repoObj.getPremisLog().buildEvent(Premis.ExpireEmbargo)\n+                    .addImplementorAgent(agent.getUsernameUri())\n+                    .addEventDetail(eventText)\n+                    .writeAndClose();\n+            // write premis event to log\n+            writePremisEvents(repoObj, embargoEvent);", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8652997d7..9e0d9ac4a 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,22 +15,38 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n import edu.unc.lib.dl.fedora.PID;\n import edu.unc.lib.dl.metrics.TimerFactory;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Resource;\n \n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n+import java.util.List;\n \n import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n \n /**\n  * Service that manages embargo expiration\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3NjE3Mg==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r416776172", "bodyText": "I think we will need to emit a message if an embargo is expired. It should be the same as here https://github.com/UNC-Libraries/Carolina-Digital-Repository/blob/8f456d1b07a9737b389756a9fe1cbb38c5d238e2/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/PatronAccessAssignmentService.java#L127", "author": "bbpennel", "createdAt": "2020-04-28T17:01:02Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n+import edu.unc.lib.dl.rdf.Premis;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+\n+import java.util.Date;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectLoader repoObjLoader;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    public void expireEmbargo(PID pid, PatronAccessDetails accessDetails, AgentPrincipals agent) {\n+        try (Timer.Context context = timer.time()) {\n+            RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+            Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+            Resource resc = model.getResource(repoObj.getPid().getRepositoryPath());\n+\n+            String eventText = null;\n+\n+            // remove embargo from access controls\n+            Date accessDetailsEmbargo = accessDetails.getEmbargo();\n+\n+            boolean expiredEmbargo = false;\n+            if (accessDetailsEmbargo != null) {\n+                accessDetails.setEmbargo(null);\n+                expiredEmbargo = true;\n+            }\n+            if (resc.hasProperty(embargoUntil)) {\n+                resc.removeAll(embargoUntil);\n+                expiredEmbargo = true;\n+            }\n+\n+            if (expiredEmbargo) {\n+                eventText = \"Expired an embargo which ended \" + accessDetailsEmbargo.toString();\n+            } else {\n+                eventText = \"Failed to expire embargo.\";\n+            }\n+\n+            // Produce the premis event for this embargo\n+            Resource embargoEvent = repoObj.getPremisLog().buildEvent(Premis.ExpireEmbargo)\n+                    .addImplementorAgent(agent.getUsernameUri())\n+                    .addEventDetail(eventText)\n+                    .writeAndClose();\n+            // write premis event to log\n+            writePremisEvents(repoObj, embargoEvent);\n+        }\n+    }", "originalCommit": "b4668a5c51d3f16524db10be8e9a2905004ab79f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8652997d7..9e0d9ac4a 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,22 +15,38 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.acl.util.AgentPrincipals;\n import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n import edu.unc.lib.dl.fedora.PID;\n import edu.unc.lib.dl.metrics.TimerFactory;\n-import edu.unc.lib.dl.persist.services.acl.PatronAccessDetails;\n import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n import org.apache.jena.rdf.model.Resource;\n \n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n+import java.util.List;\n \n import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n \n /**\n  * Service that manages embargo expiration\n"}}, {"oid": "9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "url": "https://github.com/UNC-Libraries/box-c/commit/9a822295bd04b1655d0bbcbe4d294e5c3b295c9d", "message": "Query fedora for expired embargoes", "committedDate": "2020-05-20T18:07:04Z", "type": "commit"}, {"oid": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "url": "https://github.com/UNC-Libraries/box-c/commit/710eb52c8640059e945d5a57485a8e09b1a1ad61", "message": "Schedule embargo expiration service to run daily", "committedDate": "2020-05-20T18:13:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3Mjc4OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428272789", "bodyText": "Should be a timer for ExpireEmbargoService", "author": "bbpennel", "createdAt": "2020-05-20T19:58:23Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMTAwNw==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428311007", "bodyText": "You should be able to reuse DateTimeUtil.utcFormatter", "author": "bbpennel", "createdAt": "2020-05-20T21:14:14Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {\n+                String rescUri = resourceList.get(i);\n+                PID pid = PIDs.get(rescUri);\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+                Resource resc = model.getResource(rescUri);\n+\n+                String eventText = null;\n+                boolean expiredEmbargo = false;\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+\n+                if (resc.hasProperty(embargoUntil)) {\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);\n+                    expiredEmbargo = true;\n+                }\n+\n+                if (expiredEmbargo) {\n+                    eventText = \"Expired an embargo for \" + pid.toString() + \" which ended \" +\n+                            formatDateToUTC(parseUTCToDate(embargoDate));\n+                } else {\n+                    eventText = \"Failed to expire embargo.\";\n+                }\n+\n+                // Produce the premis event for this embargo\n+                repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n+                        .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n+                        .addEventDetail(eventText)\n+                        .writeAndClose();\n+            }\n+\n+            // send a message for expired embargoes\n+            operationsMessageSender.sendOperationMessage(SoftwareAgent.embargoExpirationService.getFullname(),\n+                    JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL,\n+                    pids);\n+        } catch (Exception e) {\n+            tx.cancelAndIgnore();\n+            throw e;\n+        } finally {\n+            tx.close();\n+        }\n+    }\n+\n+    private final static String EMBARGO_QUERY =\n+            \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\\n\" +\n+                    \"select ?resource ?date\\n\" +\n+                    \"where {\\n\" +\n+                    \"  ?resource <http://cdr.unc.edu/definitions/acl#embargoUntil> ?date .\\n\" +\n+                    \"  FILTER (?date < \\\"%s\\\"^^xsd:dateTime)\\n\" +\n+                    \"}\";\n+\n+    private List<String> getEmbargoInfo() {\n+        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMTk0NA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428311944", "bodyText": "I don't think you need to return ?date here since its not being used outside the query", "author": "bbpennel", "createdAt": "2020-05-20T21:16:22Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {\n+                String rescUri = resourceList.get(i);\n+                PID pid = PIDs.get(rescUri);\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+                Resource resc = model.getResource(rescUri);\n+\n+                String eventText = null;\n+                boolean expiredEmbargo = false;\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+\n+                if (resc.hasProperty(embargoUntil)) {\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);\n+                    expiredEmbargo = true;\n+                }\n+\n+                if (expiredEmbargo) {\n+                    eventText = \"Expired an embargo for \" + pid.toString() + \" which ended \" +\n+                            formatDateToUTC(parseUTCToDate(embargoDate));\n+                } else {\n+                    eventText = \"Failed to expire embargo.\";\n+                }\n+\n+                // Produce the premis event for this embargo\n+                repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n+                        .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n+                        .addEventDetail(eventText)\n+                        .writeAndClose();\n+            }\n+\n+            // send a message for expired embargoes\n+            operationsMessageSender.sendOperationMessage(SoftwareAgent.embargoExpirationService.getFullname(),\n+                    JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL,\n+                    pids);\n+        } catch (Exception e) {\n+            tx.cancelAndIgnore();\n+            throw e;\n+        } finally {\n+            tx.close();\n+        }\n+    }\n+\n+    private final static String EMBARGO_QUERY =\n+            \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\\n\" +\n+                    \"select ?resource ?date\\n\" +", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMzU4NQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428313585", "bodyText": "since you don't really need the loop control variable's value here, it'd probably make more sense to use a for each\nfor (String rescUri: resourceList) { ...\nor\nresourceList.forEach(rescUri -> { ...", "author": "bbpennel", "createdAt": "2020-05-20T21:20:01Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxNzc1OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428317759", "bodyText": "I think you can remove this conditional, everything returned by the sparql query should have it, and if it weren't present i think there would be a null pointer exception at line 93", "author": "bbpennel", "createdAt": "2020-05-20T21:29:05Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {\n+                String rescUri = resourceList.get(i);\n+                PID pid = PIDs.get(rescUri);\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+                Resource resc = model.getResource(rescUri);\n+\n+                String eventText = null;\n+                boolean expiredEmbargo = false;\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+\n+                if (resc.hasProperty(embargoUntil)) {", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxOTUyMg==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428319522", "bodyText": "you can probably skip cloning this model. The deleteProperty method edits the value directly to fedora rather than the local copy. Also, you can go directly to the resource by calling repoObj.getResource()", "author": "bbpennel", "createdAt": "2020-05-20T21:32:02Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {\n+                String rescUri = resourceList.get(i);\n+                PID pid = PIDs.get(rescUri);\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMTk3MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428321971", "bodyText": "this method isn't used", "author": "bbpennel", "createdAt": "2020-05-20T21:37:27Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {\n+                String rescUri = resourceList.get(i);\n+                PID pid = PIDs.get(rescUri);\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+                Resource resc = model.getResource(rescUri);\n+\n+                String eventText = null;\n+                boolean expiredEmbargo = false;\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+\n+                if (resc.hasProperty(embargoUntil)) {\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);\n+                    expiredEmbargo = true;\n+                }\n+\n+                if (expiredEmbargo) {\n+                    eventText = \"Expired an embargo for \" + pid.toString() + \" which ended \" +\n+                            formatDateToUTC(parseUTCToDate(embargoDate));\n+                } else {\n+                    eventText = \"Failed to expire embargo.\";\n+                }\n+\n+                // Produce the premis event for this embargo\n+                repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n+                        .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n+                        .addEventDetail(eventText)\n+                        .writeAndClose();\n+            }\n+\n+            // send a message for expired embargoes\n+            operationsMessageSender.sendOperationMessage(SoftwareAgent.embargoExpirationService.getFullname(),\n+                    JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL,\n+                    pids);\n+        } catch (Exception e) {\n+            tx.cancelAndIgnore();\n+            throw e;\n+        } finally {\n+            tx.close();\n+        }\n+    }\n+\n+    private final static String EMBARGO_QUERY =\n+            \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\\n\" +\n+                    \"select ?resource ?date\\n\" +\n+                    \"where {\\n\" +\n+                    \"  ?resource <http://cdr.unc.edu/definitions/acl#embargoUntil> ?date .\\n\" +\n+                    \"  FILTER (?date < \\\"%s\\\"^^xsd:dateTime)\\n\" +\n+                    \"}\";\n+\n+    private List<String> getEmbargoInfo() {\n+        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+        String today = dateFormat.format(new Date());\n+        String query = String.format(EMBARGO_QUERY, today);\n+\n+        try (QueryExecution exec = sparqlQueryService.executeQuery(query)) {\n+            ResultSet resultSet = exec.execSelect();\n+            List<String> embargoedRescList = new ArrayList<>();\n+\n+            for (; resultSet.hasNext() ;) {\n+                QuerySolution soln = resultSet.nextSolution();\n+                Resource resc = soln.getResource(\"resource\");\n+                embargoedRescList.add(resc.getURI());\n+            }\n+            return embargoedRescList;\n+        }\n+    }\n+\n+\n+    /**\n+     * @param sparqlQueryService the sparqlQueryService to set\n+     */\n+    public void setSparqlQueryService(SparqlQueryService sparqlQueryService) {\n+        this.sparqlQueryService = sparqlQueryService;\n+    }\n+\n+    private void writePremisEvents(RepositoryObject repoObj, Resource embargoEvent) {", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMzAzMg==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428323032", "bodyText": "You can remove the pid from the log entry", "author": "bbpennel", "createdAt": "2020-05-20T21:39:47Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {\n+                String rescUri = resourceList.get(i);\n+                PID pid = PIDs.get(rescUri);\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+                Resource resc = model.getResource(rescUri);\n+\n+                String eventText = null;\n+                boolean expiredEmbargo = false;\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+\n+                if (resc.hasProperty(embargoUntil)) {\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);\n+                    expiredEmbargo = true;\n+                }\n+\n+                if (expiredEmbargo) {\n+                    eventText = \"Expired an embargo for \" + pid.toString() + \" which ended \" +", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyNzM5MA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428327390", "bodyText": "I see that this came from the premis spreadsheet, but i'm not really sure what cases we would be capturing with the failed premis event (maybe just that the triple store was out of sync with fedora?). I'd be inclined to remove this. A more likely failure would be a thrown exception, but there's a pretty high chance in that case that we wouldn't be able to update the premis log in fedora.\nSpeaking of which, i'm not really sure how an error thrown in here gets logged, did you see if it went to the services-camel log?", "author": "bbpennel", "createdAt": "2020-05-20T21:48:57Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();\n+\n+        try (Timer.Context context = timer.time()) {\n+            // get list of expired embargoes\n+            List<String> resourceList = getEmbargoInfo();\n+            Collection<PID> pids = new ArrayList<>();\n+\n+            // remove all expired embargoes\n+            for (int i = 0; i < resourceList.size(); i++) {\n+                String rescUri = resourceList.get(i);\n+                PID pid = PIDs.get(rescUri);\n+                RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n+                Resource resc = model.getResource(rescUri);\n+\n+                String eventText = null;\n+                boolean expiredEmbargo = false;\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+\n+                if (resc.hasProperty(embargoUntil)) {\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);\n+                    expiredEmbargo = true;\n+                }\n+\n+                if (expiredEmbargo) {\n+                    eventText = \"Expired an embargo for \" + pid.toString() + \" which ended \" +\n+                            formatDateToUTC(parseUTCToDate(embargoDate));\n+                } else {\n+                    eventText = \"Failed to expire embargo.\";", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyODU2MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428328561", "bodyText": "It should probably be a transaction per object having its embargo expired. If one were to fail, then none of the others would get updated, so we might end up with no embargoes getting expired for a while", "author": "bbpennel", "createdAt": "2020-05-20T21:51:43Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.event.PremisLogger;\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.rdf.model.Resource;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        FedoraTransaction tx = txManager.startTransaction();", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 8cd1517df..07bb47c1b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -15,7 +15,6 @@\n  */\n package edu.unc.lib.dl.persist.services.edit;\n \n-import edu.unc.lib.dl.event.PremisLogger;\n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyODk2Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428328966", "bodyText": "queryModel and fcrepoClient aren't being used here", "author": "bbpennel", "createdAt": "2020-05-20T21:52:31Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.rdf.PremisAgentType;\n+import edu.unc.lib.dl.rdf.Prov;\n+import edu.unc.lib.dl.rdf.Rdf;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class ExpireEmbargoServiceIT {\n+\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private Model queryModel;", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\nindex 15938e83b..d29ae9825 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n\n@@ -42,7 +42,6 @@ import org.apache.jena.rdf.model.Resource;\n import org.apache.jena.rdf.model.Statement;\n import org.apache.jena.rdf.model.StmtIterator;\n import org.apache.jena.vocabulary.RDF;\n-import org.fcrepo.client.FcrepoClient;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyOTgwNg==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428329806", "bodyText": "could you add a test to verify that no embargoes get cleared when there are embargoes present in the future?", "author": "bbpennel", "createdAt": "2020-05-20T21:54:20Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.rdf.PremisAgentType;\n+import edu.unc.lib.dl.rdf.Prov;\n+import edu.unc.lib.dl.rdf.Rdf;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class ExpireEmbargoServiceIT {", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\nindex 15938e83b..d29ae9825 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n\n@@ -42,7 +42,6 @@ import org.apache.jena.rdf.model.Resource;\n import org.apache.jena.rdf.model.Statement;\n import org.apache.jena.rdf.model.StmtIterator;\n import org.apache.jena.vocabulary.RDF;\n-import org.fcrepo.client.FcrepoClient;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMDk3NQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428330975", "bodyText": "should split this into two lines, 120 is the max line length (I think checkstyles might be configured weird for tests at the moment)", "author": "bbpennel", "createdAt": "2020-05-20T21:57:06Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.rdf.PremisAgentType;\n+import edu.unc.lib.dl.rdf.Prov;\n+import edu.unc.lib.dl.rdf.Rdf;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class ExpireEmbargoServiceIT {\n+\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjFactory;\n+    @Mock\n+    private OperationsMessageSender operationsMessageSender;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private SparqlQueryService sparqlQueryService;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Captor\n+    private ArgumentCaptor<List<PID>> pidListCaptor;\n+\n+    private ExpireEmbargoService service;\n+\n+    private ContentRootObject contentRoot;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collObj1;\n+    private CollectionObject collObj2;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+        TestHelper.setContentBase(baseAddress);\n+\n+        service = new ExpireEmbargoService();\n+        service.setOperationsMessageSender(operationsMessageSender);\n+        service.setRepositoryObjectLoader(repoObjLoader);\n+        service.setRepositoryObjectFactory(repoObjFactory);\n+        service.setTransactionManager(txManager);\n+        service.setSparqlQueryService(sparqlQueryService);\n+\n+        PID contentRootPid = RepositoryPaths.getContentRootPid();\n+        try {\n+            repoObjFactory.createContentRootObject(\n+                    contentRootPid.getRepositoryUri(), null);\n+        } catch (FedoraException e) {\n+            // Ignore failure as the content root will already exist after first test\n+        }\n+        contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+    }\n+\n+    @Test\n+    public void expireSingleEmbargoTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        RepositoryObject target = repoObjLoader.getRepositoryObject(pid);\n+        assertNoEmbargo(target);\n+\n+        List<String> eventDetails = getEventDetails(target);\n+        assertEquals(1, eventDetails.size());\n+        assertEventWithDetail(eventDetails, \"Expired an embargo for \" + pid.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\nindex 15938e83b..d29ae9825 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n\n@@ -42,7 +42,6 @@ import org.apache.jena.rdf.model.Resource;\n import org.apache.jena.rdf.model.Statement;\n import org.apache.jena.rdf.model.StmtIterator;\n import org.apache.jena.vocabulary.RDF;\n-import org.fcrepo.client.FcrepoClient;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzMTk5Mg==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428331992", "bodyText": "this method isn't being used right now, so you can either remove it or may use of it. You'd just need to allow it to take multiple pids. Easiest way to do that would be to change the signature to take an array with PID... pid", "author": "bbpennel", "createdAt": "2020-05-20T21:59:14Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.rdf.PremisAgentType;\n+import edu.unc.lib.dl.rdf.Prov;\n+import edu.unc.lib.dl.rdf.Rdf;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class ExpireEmbargoServiceIT {\n+\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjFactory;\n+    @Mock\n+    private OperationsMessageSender operationsMessageSender;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private SparqlQueryService sparqlQueryService;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Captor\n+    private ArgumentCaptor<List<PID>> pidListCaptor;\n+\n+    private ExpireEmbargoService service;\n+\n+    private ContentRootObject contentRoot;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collObj1;\n+    private CollectionObject collObj2;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+        TestHelper.setContentBase(baseAddress);\n+\n+        service = new ExpireEmbargoService();\n+        service.setOperationsMessageSender(operationsMessageSender);\n+        service.setRepositoryObjectLoader(repoObjLoader);\n+        service.setRepositoryObjectFactory(repoObjFactory);\n+        service.setTransactionManager(txManager);\n+        service.setSparqlQueryService(sparqlQueryService);\n+\n+        PID contentRootPid = RepositoryPaths.getContentRootPid();\n+        try {\n+            repoObjFactory.createContentRootObject(\n+                    contentRootPid.getRepositoryUri(), null);\n+        } catch (FedoraException e) {\n+            // Ignore failure as the content root will already exist after first test\n+        }\n+        contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+    }\n+\n+    @Test\n+    public void expireSingleEmbargoTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        RepositoryObject target = repoObjLoader.getRepositoryObject(pid);\n+        assertNoEmbargo(target);\n+\n+        List<String> eventDetails = getEventDetails(target);\n+        assertEquals(1, eventDetails.size());\n+        assertEventWithDetail(eventDetails, \"Expired an embargo for \" + pid.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+        verify(operationsMessageSender).sendOperationMessage(\n+                eq(SoftwareAgent.embargoExpirationService.getFullname()),\n+                eq(JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL),\n+                pidListCaptor.capture());\n+        assertTrue(pidListCaptor.getValue().contains(pid));\n+    }\n+\n+\n+    @Test\n+    public void expireMultipleEmbargoesTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+        // create first embargoed collection\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid1 = collObj1.getPid();\n+        // create second embargoed collection\n+        createSecondCollectionInUnit(new AclModelBuilder(\"Another collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid2 = collObj2.getPid();\n+\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        RepositoryObject target1 = repoObjLoader.getRepositoryObject(pid1);\n+        RepositoryObject target2 = repoObjLoader.getRepositoryObject(pid2);\n+        assertNoEmbargo(target1);\n+        assertNoEmbargo(target2);\n+\n+        List<String> eventDetails1 = getEventDetails(target1);\n+        List<String> eventDetails2 = getEventDetails(target2);\n+        assertEquals(1, eventDetails1.size());\n+        assertEquals(1, eventDetails2.size());\n+\n+        assertEventWithDetail(eventDetails1, \"Expired an embargo for \" + pid1.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+        assertEventWithDetail(eventDetails2, \"Expired an embargo for \" + pid2.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+\n+        verify(operationsMessageSender).sendOperationMessage(\n+                eq(SoftwareAgent.embargoExpirationService.getFullname()),\n+                eq(JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL),\n+                pidListCaptor.capture());\n+        List<PID> pids = pidListCaptor.getValue();\n+        assertTrue(pids.contains(pid1));\n+        assertTrue(pids.contains(pid2));\n+    }\n+\n+    @Test\n+    public void expireNoEmbargoesTest() throws Exception {\n+        createCollectionInUnit(null);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        // collection was not created with an embargo and should not have one\n+        RepositoryObject target = repoObjLoader.getRepositoryObject(pid);\n+        assertNoEmbargo(target);\n+\n+        // no event should have been created since no embargoes were expired\n+        List<String> eventDetails = getEventDetails(target);\n+        assertEquals(0, eventDetails.size());\n+    }\n+    \n+    private Calendar yesterday() {\n+        final Calendar cal = Calendar.getInstance();\n+        cal.add(Calendar.DATE, -1);\n+        return cal;\n+    }\n+\n+    private void createCollectionInUnit(Model collModel) {\n+        adminUnit = repoObjFactory.createAdminUnit(null);\n+        contentRoot.addMember(adminUnit);\n+        collObj1 = repoObjFactory.createCollectionObject(collModel);\n+        adminUnit.addMember(collObj1);\n+    }\n+\n+    private void createSecondCollectionInUnit(Model collModel) {\n+        adminUnit = repoObjFactory.createAdminUnit(null);\n+        contentRoot.addMember(adminUnit);\n+        collObj2 = repoObjFactory.createCollectionObject(collModel);\n+        adminUnit.addMember(collObj2);\n+    }\n+\n+    private void assertNoEmbargo(RepositoryObject obj) {\n+        Resource resc = obj.getResource();\n+        assertFalse(\"Unexpected embargo assigned to \" + obj.getPid().getId(),\n+                resc.hasProperty(CdrAcl.embargoUntil));\n+    }\n+\n+    private List<String> getEventDetails(RepositoryObject repoObj) {\n+        List<String> details = new ArrayList<>();\n+\n+        Model eventsModel = repoObj.getPremisLog().getEventsModel();\n+        Resource objResc = eventsModel.getResource(repoObj.getPid().getRepositoryPath());\n+        StmtIterator it = eventsModel.listStatements(null, Prov.used, objResc);\n+        while (it.hasNext()) {\n+            Statement stmt = it.next();\n+            Resource eventResc = stmt.getSubject();\n+\n+            assertTrue(\"Event type was not set\",\n+                    eventResc.hasProperty(RDF.type, Premis.Dissemination));\n+            Resource execAgent = eventResc.getProperty(Premis.hasEventRelatedAgentExecutor).getResource();\n+            assertTrue(\"Executing agent did not have software type\",\n+                    execAgent.hasProperty(RDF.type, PremisAgentType.Software));\n+            assertTrue(\"Executing agent did not have name\",\n+                    execAgent.hasLiteral(Rdf.label, SoftwareAgent.embargoExpirationService.getFullname()));\n+            details.add(eventResc.getProperty(Premis.note).getString());\n+        }\n+\n+        return details;\n+    }\n+\n+    private void assertEventWithDetail(List<String> eventDetails, String expected) {\n+        assertTrue(\"No event with expected detail '\" + expected + \"'\",\n+                eventDetails.stream().anyMatch(d -> d.contains(expected)));\n+    }\n+\n+    private void assertMessageSent(PID pid) {", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\nindex 15938e83b..d29ae9825 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n\n@@ -42,7 +42,6 @@ import org.apache.jena.rdf.model.Resource;\n import org.apache.jena.rdf.model.Statement;\n import org.apache.jena.rdf.model.StmtIterator;\n import org.apache.jena.vocabulary.RDF;\n-import org.fcrepo.client.FcrepoClient;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNDUyMw==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428334523", "bodyText": "I think you only need createCollectionInUnit, you would just need to return collObj at the end. You're not currently using adminUnit anywhere outside of this method, so it probably doesn't need to be an instance variable.", "author": "bbpennel", "createdAt": "2020-05-20T22:05:21Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.rdf.PremisAgentType;\n+import edu.unc.lib.dl.rdf.Prov;\n+import edu.unc.lib.dl.rdf.Rdf;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class ExpireEmbargoServiceIT {\n+\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjFactory;\n+    @Mock\n+    private OperationsMessageSender operationsMessageSender;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private SparqlQueryService sparqlQueryService;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Captor\n+    private ArgumentCaptor<List<PID>> pidListCaptor;\n+\n+    private ExpireEmbargoService service;\n+\n+    private ContentRootObject contentRoot;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collObj1;\n+    private CollectionObject collObj2;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+        TestHelper.setContentBase(baseAddress);\n+\n+        service = new ExpireEmbargoService();\n+        service.setOperationsMessageSender(operationsMessageSender);\n+        service.setRepositoryObjectLoader(repoObjLoader);\n+        service.setRepositoryObjectFactory(repoObjFactory);\n+        service.setTransactionManager(txManager);\n+        service.setSparqlQueryService(sparqlQueryService);\n+\n+        PID contentRootPid = RepositoryPaths.getContentRootPid();\n+        try {\n+            repoObjFactory.createContentRootObject(\n+                    contentRootPid.getRepositoryUri(), null);\n+        } catch (FedoraException e) {\n+            // Ignore failure as the content root will already exist after first test\n+        }\n+        contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+    }\n+\n+    @Test\n+    public void expireSingleEmbargoTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        RepositoryObject target = repoObjLoader.getRepositoryObject(pid);\n+        assertNoEmbargo(target);\n+\n+        List<String> eventDetails = getEventDetails(target);\n+        assertEquals(1, eventDetails.size());\n+        assertEventWithDetail(eventDetails, \"Expired an embargo for \" + pid.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+        verify(operationsMessageSender).sendOperationMessage(\n+                eq(SoftwareAgent.embargoExpirationService.getFullname()),\n+                eq(JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL),\n+                pidListCaptor.capture());\n+        assertTrue(pidListCaptor.getValue().contains(pid));\n+    }\n+\n+\n+    @Test\n+    public void expireMultipleEmbargoesTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+        // create first embargoed collection\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid1 = collObj1.getPid();\n+        // create second embargoed collection\n+        createSecondCollectionInUnit(new AclModelBuilder(\"Another collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid2 = collObj2.getPid();\n+\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        RepositoryObject target1 = repoObjLoader.getRepositoryObject(pid1);\n+        RepositoryObject target2 = repoObjLoader.getRepositoryObject(pid2);\n+        assertNoEmbargo(target1);\n+        assertNoEmbargo(target2);\n+\n+        List<String> eventDetails1 = getEventDetails(target1);\n+        List<String> eventDetails2 = getEventDetails(target2);\n+        assertEquals(1, eventDetails1.size());\n+        assertEquals(1, eventDetails2.size());\n+\n+        assertEventWithDetail(eventDetails1, \"Expired an embargo for \" + pid1.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+        assertEventWithDetail(eventDetails2, \"Expired an embargo for \" + pid2.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+\n+        verify(operationsMessageSender).sendOperationMessage(\n+                eq(SoftwareAgent.embargoExpirationService.getFullname()),\n+                eq(JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL),\n+                pidListCaptor.capture());\n+        List<PID> pids = pidListCaptor.getValue();\n+        assertTrue(pids.contains(pid1));\n+        assertTrue(pids.contains(pid2));\n+    }\n+\n+    @Test\n+    public void expireNoEmbargoesTest() throws Exception {\n+        createCollectionInUnit(null);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        // collection was not created with an embargo and should not have one\n+        RepositoryObject target = repoObjLoader.getRepositoryObject(pid);\n+        assertNoEmbargo(target);\n+\n+        // no event should have been created since no embargoes were expired\n+        List<String> eventDetails = getEventDetails(target);\n+        assertEquals(0, eventDetails.size());\n+    }\n+    \n+    private Calendar yesterday() {\n+        final Calendar cal = Calendar.getInstance();\n+        cal.add(Calendar.DATE, -1);\n+        return cal;\n+    }\n+\n+    private void createCollectionInUnit(Model collModel) {\n+        adminUnit = repoObjFactory.createAdminUnit(null);\n+        contentRoot.addMember(adminUnit);\n+        collObj1 = repoObjFactory.createCollectionObject(collModel);\n+        adminUnit.addMember(collObj1);\n+    }\n+\n+    private void createSecondCollectionInUnit(Model collModel) {", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\nindex 15938e83b..d29ae9825 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n\n@@ -42,7 +42,6 @@ import org.apache.jena.rdf.model.Resource;\n import org.apache.jena.rdf.model.Statement;\n import org.apache.jena.rdf.model.StmtIterator;\n import org.apache.jena.vocabulary.RDF;\n-import org.fcrepo.client.FcrepoClient;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNjE5Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428336197", "bodyText": "This is already being set in the @Before method, so you can remove these from the test methods.", "author": "bbpennel", "createdAt": "2020-05-20T22:09:29Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.rdf.PremisAgentType;\n+import edu.unc.lib.dl.rdf.Prov;\n+import edu.unc.lib.dl.rdf.Rdf;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class ExpireEmbargoServiceIT {\n+\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjFactory;\n+    @Mock\n+    private OperationsMessageSender operationsMessageSender;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private SparqlQueryService sparqlQueryService;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Captor\n+    private ArgumentCaptor<List<PID>> pidListCaptor;\n+\n+    private ExpireEmbargoService service;\n+\n+    private ContentRootObject contentRoot;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collObj1;\n+    private CollectionObject collObj2;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+        TestHelper.setContentBase(baseAddress);\n+\n+        service = new ExpireEmbargoService();\n+        service.setOperationsMessageSender(operationsMessageSender);\n+        service.setRepositoryObjectLoader(repoObjLoader);\n+        service.setRepositoryObjectFactory(repoObjFactory);\n+        service.setTransactionManager(txManager);\n+        service.setSparqlQueryService(sparqlQueryService);\n+\n+        PID contentRootPid = RepositoryPaths.getContentRootPid();\n+        try {\n+            repoObjFactory.createContentRootObject(\n+                    contentRootPid.getRepositoryUri(), null);\n+        } catch (FedoraException e) {\n+            // Ignore failure as the content root will already exist after first test\n+        }\n+        contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+    }\n+\n+    @Test\n+    public void expireSingleEmbargoTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\nindex 15938e83b..d29ae9825 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n\n@@ -42,7 +42,6 @@ import org.apache.jena.rdf.model.Resource;\n import org.apache.jena.rdf.model.Statement;\n import org.apache.jena.rdf.model.StmtIterator;\n import org.apache.jena.vocabulary.RDF;\n-import org.fcrepo.client.FcrepoClient;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNjQ4MA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428336480", "bodyText": "Check that no messages were sent. You can use the never() method with verify for that", "author": "bbpennel", "createdAt": "2020-05-20T22:10:13Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.RepositoryPaths;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.FedoraException;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.rdf.CdrAcl;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.rdf.PremisAgentType;\n+import edu.unc.lib.dl.rdf.Prov;\n+import edu.unc.lib.dl.rdf.Rdf;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.Statement;\n+import org.apache.jena.rdf.model.StmtIterator;\n+import org.apache.jena.vocabulary.RDF;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\")\n+})\n+public class ExpireEmbargoServiceIT {\n+\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjFactory;\n+    @Mock\n+    private OperationsMessageSender operationsMessageSender;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private SparqlQueryService sparqlQueryService;\n+    @Autowired\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+    @Captor\n+    private ArgumentCaptor<List<PID>> pidListCaptor;\n+\n+    private ExpireEmbargoService service;\n+\n+    private ContentRootObject contentRoot;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collObj1;\n+    private CollectionObject collObj2;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+        TestHelper.setContentBase(baseAddress);\n+\n+        service = new ExpireEmbargoService();\n+        service.setOperationsMessageSender(operationsMessageSender);\n+        service.setRepositoryObjectLoader(repoObjLoader);\n+        service.setRepositoryObjectFactory(repoObjFactory);\n+        service.setTransactionManager(txManager);\n+        service.setSparqlQueryService(sparqlQueryService);\n+\n+        PID contentRootPid = RepositoryPaths.getContentRootPid();\n+        try {\n+            repoObjFactory.createContentRootObject(\n+                    contentRootPid.getRepositoryUri(), null);\n+        } catch (FedoraException e) {\n+            // Ignore failure as the content root will already exist after first test\n+        }\n+        contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+    }\n+\n+    @Test\n+    public void expireSingleEmbargoTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        RepositoryObject target = repoObjLoader.getRepositoryObject(pid);\n+        assertNoEmbargo(target);\n+\n+        List<String> eventDetails = getEventDetails(target);\n+        assertEquals(1, eventDetails.size());\n+        assertEventWithDetail(eventDetails, \"Expired an embargo for \" + pid.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+        verify(operationsMessageSender).sendOperationMessage(\n+                eq(SoftwareAgent.embargoExpirationService.getFullname()),\n+                eq(JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL),\n+                pidListCaptor.capture());\n+        assertTrue(pidListCaptor.getValue().contains(pid));\n+    }\n+\n+\n+    @Test\n+    public void expireMultipleEmbargoesTest() throws Exception {\n+        Calendar embargoUntil = yesterday();\n+        // create first embargoed collection\n+        createCollectionInUnit(new AclModelBuilder(\"Collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid1 = collObj1.getPid();\n+        // create second embargoed collection\n+        createSecondCollectionInUnit(new AclModelBuilder(\"Another collection with embargo\")\n+                .addEmbargoUntil(embargoUntil)\n+                .model);\n+        PID pid2 = collObj2.getPid();\n+\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        RepositoryObject target1 = repoObjLoader.getRepositoryObject(pid1);\n+        RepositoryObject target2 = repoObjLoader.getRepositoryObject(pid2);\n+        assertNoEmbargo(target1);\n+        assertNoEmbargo(target2);\n+\n+        List<String> eventDetails1 = getEventDetails(target1);\n+        List<String> eventDetails2 = getEventDetails(target2);\n+        assertEquals(1, eventDetails1.size());\n+        assertEquals(1, eventDetails2.size());\n+\n+        assertEventWithDetail(eventDetails1, \"Expired an embargo for \" + pid1.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+        assertEventWithDetail(eventDetails2, \"Expired an embargo for \" + pid2.toString() + \" which ended \" + formatDateToUTC(embargoUntil.getTime()));\n+\n+        verify(operationsMessageSender).sendOperationMessage(\n+                eq(SoftwareAgent.embargoExpirationService.getFullname()),\n+                eq(JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL),\n+                pidListCaptor.capture());\n+        List<PID> pids = pidListCaptor.getValue();\n+        assertTrue(pids.contains(pid1));\n+        assertTrue(pids.contains(pid2));\n+    }\n+\n+    @Test\n+    public void expireNoEmbargoesTest() throws Exception {\n+        createCollectionInUnit(null);\n+        PID pid = collObj1.getPid();\n+        TestHelper.setContentBase(baseAddress);\n+        treeIndexer.indexAll(baseAddress);\n+\n+        service.expireEmbargoes();\n+\n+        // collection was not created with an embargo and should not have one\n+        RepositoryObject target = repoObjLoader.getRepositoryObject(pid);\n+        assertNoEmbargo(target);\n+\n+        // no event should have been created since no embargoes were expired\n+        List<String> eventDetails = getEventDetails(target);\n+        assertEquals(0, eventDetails.size());", "originalCommit": "710eb52c8640059e945d5a57485a8e09b1a1ad61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "chunk": "diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\nindex 15938e83b..d29ae9825 100644\n--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoServiceIT.java\n\n@@ -42,7 +42,6 @@ import org.apache.jena.rdf.model.Resource;\n import org.apache.jena.rdf.model.Statement;\n import org.apache.jena.rdf.model.StmtIterator;\n import org.apache.jena.vocabulary.RDF;\n-import org.fcrepo.client.FcrepoClient;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"oid": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "url": "https://github.com/UNC-Libraries/box-c/commit/5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "message": "Update expire embargo service and add another test", "committedDate": "2020-05-21T16:47:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDI3MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428884271", "bodyText": "I think this is always going to be true now, so you can remove the variable and this conditional", "author": "bbpennel", "createdAt": "2020-05-21T20:05:08Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -65,76 +61,71 @@\n     private TransactionManager txManager;\n     private SparqlQueryService sparqlQueryService;\n \n-    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n \n     public ExpireEmbargoService() {\n     }\n \n     // run service every day 1 minute after midnight\n     @Scheduled(cron = \"0 1 0 * * *\")\n     public void expireEmbargoes() {\n-        FedoraTransaction tx = txManager.startTransaction();\n+        // get list of expired embargoes\n+        List<String> resourceList = getEmbargoInfo();\n+        Collection<PID> pids = new ArrayList<>();\n \n-        try (Timer.Context context = timer.time()) {\n-            // get list of expired embargoes\n-            List<String> resourceList = getEmbargoInfo();\n-            Collection<PID> pids = new ArrayList<>();\n+        // remove all expired embargoes\n+        for (String rescUri: resourceList) {\n+            FedoraTransaction tx = txManager.startTransaction();\n \n-            // remove all expired embargoes\n-            for (int i = 0; i < resourceList.size(); i++) {\n-                String rescUri = resourceList.get(i);\n+            try (Timer.Context context = timer.time()) {\n                 PID pid = PIDs.get(rescUri);\n                 RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n-                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n-                Resource resc = model.getResource(rescUri);\n+                Resource resc = repoObj.getResource();\n \n                 String eventText = null;\n                 boolean expiredEmbargo = false;\n-                String embargoDate = resc.getProperty(embargoUntil).getString();\n \n-                if (resc.hasProperty(embargoUntil)) {\n-                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n-                    pids.add(pid);\n-                    expiredEmbargo = true;\n-                }\n+                // remove embargo\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+                repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                pids.add(pid);\n+                expiredEmbargo = true;\n \n                 if (expiredEmbargo) {", "originalCommit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a16ba789a2b5859478eba6d502fbda684c4237e8", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 07bb47c1b..09ddc8491 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -63,11 +65,13 @@ public class ExpireEmbargoService {\n \n     private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n \n+    private static final Logger log = LoggerFactory.getLogger(ExpireEmbargoService.class);\n+\n     public ExpireEmbargoService() {\n     }\n \n     // run service every day 1 minute after midnight\n-    @Scheduled(cron = \"0 1 0 * * *\")\n+    @Scheduled(cron = \"0 15 16 * * *\")\n     public void expireEmbargoes() {\n         // get list of expired embargoes\n         List<String> resourceList = getEmbargoInfo();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NTUzNQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428885535", "bodyText": "You will need to log the error rather than rethrow it now so that it will attempt to continue on with the rest of the embargoed objects, otherwise the messages for successful embargo updates won't get sent.", "author": "bbpennel", "createdAt": "2020-05-21T20:07:49Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -65,76 +61,71 @@\n     private TransactionManager txManager;\n     private SparqlQueryService sparqlQueryService;\n \n-    private static final Timer timer = TimerFactory.createTimerForClass(EditTitleService.class);\n+    private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n \n     public ExpireEmbargoService() {\n     }\n \n     // run service every day 1 minute after midnight\n     @Scheduled(cron = \"0 1 0 * * *\")\n     public void expireEmbargoes() {\n-        FedoraTransaction tx = txManager.startTransaction();\n+        // get list of expired embargoes\n+        List<String> resourceList = getEmbargoInfo();\n+        Collection<PID> pids = new ArrayList<>();\n \n-        try (Timer.Context context = timer.time()) {\n-            // get list of expired embargoes\n-            List<String> resourceList = getEmbargoInfo();\n-            Collection<PID> pids = new ArrayList<>();\n+        // remove all expired embargoes\n+        for (String rescUri: resourceList) {\n+            FedoraTransaction tx = txManager.startTransaction();\n \n-            // remove all expired embargoes\n-            for (int i = 0; i < resourceList.size(); i++) {\n-                String rescUri = resourceList.get(i);\n+            try (Timer.Context context = timer.time()) {\n                 PID pid = PIDs.get(rescUri);\n                 RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n-                Model model = ModelFactory.createDefaultModel().add(repoObj.getModel());\n-                Resource resc = model.getResource(rescUri);\n+                Resource resc = repoObj.getResource();\n \n                 String eventText = null;\n                 boolean expiredEmbargo = false;\n-                String embargoDate = resc.getProperty(embargoUntil).getString();\n \n-                if (resc.hasProperty(embargoUntil)) {\n-                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n-                    pids.add(pid);\n-                    expiredEmbargo = true;\n-                }\n+                // remove embargo\n+                String embargoDate = resc.getProperty(embargoUntil).getString();\n+                repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                pids.add(pid);\n+                expiredEmbargo = true;\n \n                 if (expiredEmbargo) {\n-                    eventText = \"Expired an embargo for \" + pid.toString() + \" which ended \" +\n+                    eventText = \"Expired an embargo which ended \" +\n                             formatDateToUTC(parseUTCToDate(embargoDate));\n-                } else {\n-                    eventText = \"Failed to expire embargo.\";\n+                    // Produce the premis event for this embargo\n+                    repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n+                            .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n+                            .addEventDetail(eventText)\n+                            .writeAndClose();\n                 }\n-\n-                // Produce the premis event for this embargo\n-                repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n-                        .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n-                        .addEventDetail(eventText)\n-                        .writeAndClose();\n+            } catch (Exception e) {\n+                tx.cancelAndIgnore();", "originalCommit": "5debf34b24d8478be5db5cdf8bb5f5dd6472b192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a16ba789a2b5859478eba6d502fbda684c4237e8", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 07bb47c1b..09ddc8491 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -63,11 +65,13 @@ public class ExpireEmbargoService {\n \n     private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n \n+    private static final Logger log = LoggerFactory.getLogger(ExpireEmbargoService.class);\n+\n     public ExpireEmbargoService() {\n     }\n \n     // run service every day 1 minute after midnight\n-    @Scheduled(cron = \"0 1 0 * * *\")\n+    @Scheduled(cron = \"0 15 16 * * *\")\n     public void expireEmbargoes() {\n         // get list of expired embargoes\n         List<String> resourceList = getEmbargoInfo();\n"}}, {"oid": "a16ba789a2b5859478eba6d502fbda684c4237e8", "url": "https://github.com/UNC-Libraries/box-c/commit/a16ba789a2b5859478eba6d502fbda684c4237e8", "message": "Log embargo expiration error", "committedDate": "2020-05-21T20:34:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwMDc1Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428900757", "bodyText": "you don't actually need the {} for an exception when its the last parameter in a log statement. But it probably wouldn't be a bad idea to log the PID of the object that it failed to clear the embargo on along with the exception", "author": "bbpennel", "createdAt": "2020-05-21T20:38:11Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -82,27 +86,20 @@ public void expireEmbargoes() {\n                 RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n                 Resource resc = repoObj.getResource();\n \n-                String eventText = null;\n-                boolean expiredEmbargo = false;\n-\n                 // remove embargo\n                 String embargoDate = resc.getProperty(embargoUntil).getString();\n                 repoObjFactory.deleteProperty(repoObj, embargoUntil);\n                 pids.add(pid);\n-                expiredEmbargo = true;\n-\n-                if (expiredEmbargo) {\n-                    eventText = \"Expired an embargo which ended \" +\n-                            formatDateToUTC(parseUTCToDate(embargoDate));\n-                    // Produce the premis event for this embargo\n-                    repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n-                            .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n-                            .addEventDetail(eventText)\n-                            .writeAndClose();\n-                }\n+                String eventText = \"Expired an embargo which ended \" +\n+                        formatDateToUTC(parseUTCToDate(embargoDate));\n+                // Produce the premis event for this embargo\n+                repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n+                        .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n+                        .addEventDetail(eventText)\n+                        .writeAndClose();\n             } catch (Exception e) {\n                 tx.cancelAndIgnore();\n-                throw e;\n+                log.error(\"Failed to expire embargo: {}\", e);", "originalCommit": "a16ba789a2b5859478eba6d502fbda684c4237e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54568c8f458e3ba442c3ece6d9486adf237d0c31", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 09ddc8491..f3797ca44 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -83,6 +84,7 @@ public class ExpireEmbargoService {\n \n             try (Timer.Context context = timer.time()) {\n                 PID pid = PIDs.get(rescUri);\n+                currentPid = pid;\n                 RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n                 Resource resc = repoObj.getResource();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwMDgzMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428900830", "bodyText": "guessing you didn't mean to commit this change", "author": "bbpennel", "createdAt": "2020-05-21T20:38:22Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -63,11 +65,13 @@\n \n     private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n \n+    private static final Logger log = LoggerFactory.getLogger(ExpireEmbargoService.class);\n+\n     public ExpireEmbargoService() {\n     }\n \n     // run service every day 1 minute after midnight\n-    @Scheduled(cron = \"0 1 0 * * *\")\n+    @Scheduled(cron = \"0 15 16 * * *\")", "originalCommit": "a16ba789a2b5859478eba6d502fbda684c4237e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwMjc5MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r428902791", "bodyText": "nope!  sorry!", "author": "smithjp", "createdAt": "2020-05-21T20:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwMDgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "54568c8f458e3ba442c3ece6d9486adf237d0c31", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nindex 09ddc8491..f3797ca44 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n\n@@ -71,11 +71,12 @@ public class ExpireEmbargoService {\n     }\n \n     // run service every day 1 minute after midnight\n-    @Scheduled(cron = \"0 15 16 * * *\")\n+    @Scheduled(cron = \"0 1 0 * * *\")\n     public void expireEmbargoes() {\n         // get list of expired embargoes\n         List<String> resourceList = getEmbargoInfo();\n         Collection<PID> pids = new ArrayList<>();\n+        PID currentPid = null;\n \n         // remove all expired embargoes\n         for (String rescUri: resourceList) {\n"}}, {"oid": "54568c8f458e3ba442c3ece6d9486adf237d0c31", "url": "https://github.com/UNC-Libraries/box-c/commit/54568c8f458e3ba442c3ece6d9486adf237d0c31", "message": "Reset cron time and update log message", "committedDate": "2020-05-21T21:17:41Z", "type": "commit"}, {"oid": "d9971bcf0462faa1d24c529e2218072f5cabb344", "url": "https://github.com/UNC-Libraries/box-c/commit/d9971bcf0462faa1d24c529e2218072f5cabb344", "message": "Add ExpireEmbargoService to services-camel context file", "committedDate": "2020-06-04T16:02:47Z", "type": "commit"}, {"oid": "87dc5035b5fc71cf2ae4b1b7c2af1b866f4bcf93", "url": "https://github.com/UNC-Libraries/box-c/commit/87dc5035b5fc71cf2ae4b1b7c2af1b866f4bcf93", "message": "Handle exception in ExpireEmbargoService when no expired objects are found", "committedDate": "2020-06-04T16:03:20Z", "type": "commit"}, {"oid": "dc3eb2d0bc2cc4d4830f5419cfc10371e8dc189f", "url": "https://github.com/UNC-Libraries/box-c/commit/dc3eb2d0bc2cc4d4830f5419cfc10371e8dc189f", "message": "Add properties to expireEmbagroService bean", "committedDate": "2020-06-04T21:15:18Z", "type": "commit"}, {"oid": "464cfb6ed513be75cf7583fd6a02970a72c227c7", "url": "https://github.com/UNC-Libraries/box-c/commit/464cfb6ed513be75cf7583fd6a02970a72c227c7", "message": "Add whitespace", "committedDate": "2020-06-05T12:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MDgwNA==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r436050804", "bodyText": "make this info", "author": "bbpennel", "createdAt": "2020-06-05T17:06:57Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.DateTimeUtil;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@Component\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n+\n+    private static final Logger log = LoggerFactory.getLogger(ExpireEmbargoService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        log.info(\"running ExpireEmbargoService\");\n+        // get list of expired embargoes\n+        List<String> resourceList = getEmbargoInfo();\n+        Collection<PID> pids = new ArrayList<>();\n+        PID currentPid = null;\n+\n+        if (resourceList.size() > 0) {\n+            // remove all expired embargoes\n+            for (String rescUri: resourceList) {\n+                FedoraTransaction tx = txManager.startTransaction();\n+\n+                try (Timer.Context context = timer.time()) {\n+                    PID pid = PIDs.get(rescUri);\n+                    currentPid = pid;\n+                    RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                    Resource resc = repoObj.getResource();\n+\n+                    // remove embargo\n+                    String embargoDate = resc.getProperty(embargoUntil).getString();\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);\n+                    String eventText = \"Expired an embargo which ended \" +\n+                            formatDateToUTC(parseUTCToDate(embargoDate));\n+                    // Produce the premis event for this embargo\n+                    repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n+                            .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n+                            .addEventDetail(eventText)\n+                            .writeAndClose();\n+                } catch (Exception e) {\n+                    tx.cancelAndIgnore();\n+                    log.error(\"Failed to expire embargo for {} with error:\", currentPid, e);\n+                } finally {\n+                    tx.close();\n+                }\n+            }\n+        } else {\n+            log.error(\"No embargoes to expire\");", "originalCommit": "464cfb6ed513be75cf7583fd6a02970a72c227c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0ed8c913a3dd222156d66c6ede1d58ba479ff4", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nsimilarity index 96%\nrename from persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nrename to persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nindex 47172527c..ce6d1807b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package edu.unc.lib.dl.persist.services.edit;\n+package edu.unc.lib.dl.persist.services.acl;\n \n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjI5Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r436052293", "bodyText": "Its not all that common to want to catch a NullPointerException. Which part of this is throwing one? Would it be possible to check whatever object it is that is triggering it to make sure its not null first?", "author": "bbpennel", "createdAt": "2020-06-05T17:10:05Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.DateTimeUtil;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@Component\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n+\n+    private static final Logger log = LoggerFactory.getLogger(ExpireEmbargoService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        log.info(\"running ExpireEmbargoService\");\n+        // get list of expired embargoes\n+        List<String> resourceList = getEmbargoInfo();\n+        Collection<PID> pids = new ArrayList<>();\n+        PID currentPid = null;\n+\n+        if (resourceList.size() > 0) {\n+            // remove all expired embargoes\n+            for (String rescUri: resourceList) {\n+                FedoraTransaction tx = txManager.startTransaction();\n+\n+                try (Timer.Context context = timer.time()) {\n+                    PID pid = PIDs.get(rescUri);\n+                    currentPid = pid;\n+                    RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                    Resource resc = repoObj.getResource();\n+\n+                    // remove embargo\n+                    String embargoDate = resc.getProperty(embargoUntil).getString();\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);\n+                    String eventText = \"Expired an embargo which ended \" +\n+                            formatDateToUTC(parseUTCToDate(embargoDate));\n+                    // Produce the premis event for this embargo\n+                    repoObj.getPremisLog().buildEvent(Premis.Dissemination)\n+                            .addSoftwareAgent(SoftwareAgent.embargoExpirationService.getFullname())\n+                            .addEventDetail(eventText)\n+                            .writeAndClose();\n+                } catch (Exception e) {\n+                    tx.cancelAndIgnore();\n+                    log.error(\"Failed to expire embargo for {} with error:\", currentPid, e);\n+                } finally {\n+                    tx.close();\n+                }\n+            }\n+        } else {\n+            log.error(\"No embargoes to expire\");\n+        }\n+\n+        if (!pids.isEmpty()) {\n+            // send a message for expired embargoes\n+            operationsMessageSender.sendOperationMessage(SoftwareAgent.embargoExpirationService.getFullname(),\n+                    JMSMessageUtil.CDRActions.EDIT_ACCESS_CONTROL,\n+                    pids);\n+        }\n+    }\n+\n+    private final static String EMBARGO_QUERY =\n+            \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\\n\" +\n+                    \"select ?resource\\n\" +\n+                    \"where {\\n\" +\n+                    \"  ?resource <http://cdr.unc.edu/definitions/acl#embargoUntil> ?date .\\n\" +\n+                    \"  FILTER (?date < \\\"%s\\\"^^xsd:dateTime)\\n\" +\n+                    \"}\";\n+\n+    private List<String> getEmbargoInfo() {\n+        String today = DateTimeUtil.formatDateToUTC(new Date());\n+        String query = String.format(EMBARGO_QUERY, today);\n+\n+        try (QueryExecution exec = sparqlQueryService.executeQuery(query)) {\n+            ResultSet resultSet = exec.execSelect();\n+            List<String> embargoedRescList = new ArrayList<>();\n+\n+            for (; resultSet.hasNext() ;) {\n+                QuerySolution soln = resultSet.nextSolution();\n+                Resource resc = soln.getResource(\"resource\");\n+                embargoedRescList.add(resc.getURI());\n+            }\n+            return embargoedRescList;\n+        } catch (NullPointerException e) {", "originalCommit": "464cfb6ed513be75cf7583fd6a02970a72c227c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0ed8c913a3dd222156d66c6ede1d58ba479ff4", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nsimilarity index 96%\nrename from persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nrename to persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nindex 47172527c..ce6d1807b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package edu.unc.lib.dl.persist.services.edit;\n+package edu.unc.lib.dl.persist.services.acl;\n \n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MzExNw==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r436053117", "bodyText": "it would probably make sense to put this class (and its test) in edu.unc.lib.dl.persist.services.acl", "author": "bbpennel", "createdAt": "2020-06-05T17:11:54Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;", "originalCommit": "464cfb6ed513be75cf7583fd6a02970a72c227c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0ed8c913a3dd222156d66c6ede1d58ba479ff4", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nsimilarity index 96%\nrename from persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nrename to persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nindex 47172527c..ce6d1807b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package edu.unc.lib.dl.persist.services.edit;\n+package edu.unc.lib.dl.persist.services.acl;\n \n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1NDkyNw==", "url": "https://github.com/UNC-Libraries/box-c/pull/966#discussion_r436054927", "bodyText": "Might be nice to add a log statement at debug or info level to say that an embargo was cleared for a particular object in case we have to debug this at some point", "author": "bbpennel", "createdAt": "2020-06-05T17:15:44Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.persist.services.edit;\n+\n+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.metrics.TimerFactory;\n+import edu.unc.lib.dl.rdf.Premis;\n+import edu.unc.lib.dl.services.OperationsMessageSender;\n+import edu.unc.lib.dl.sparql.SparqlQueryService;\n+import edu.unc.lib.dl.util.DateTimeUtil;\n+import edu.unc.lib.dl.util.JMSMessageUtil;\n+import edu.unc.lib.dl.util.SoftwareAgentConstants.SoftwareAgent;\n+import io.dropwizard.metrics5.Timer;\n+import org.apache.jena.query.QueryExecution;\n+import org.apache.jena.query.QuerySolution;\n+import org.apache.jena.query.ResultSet;\n+import org.apache.jena.rdf.model.Resource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static edu.unc.lib.dl.rdf.CdrAcl.embargoUntil;\n+import static edu.unc.lib.dl.util.DateTimeUtil.formatDateToUTC;\n+import static edu.unc.lib.dl.util.DateTimeUtil.parseUTCToDate;\n+\n+/**\n+ * Service that manages embargo expiration\n+ *\n+ * @author smithjp\n+ *\n+ */\n+@Component\n+@EnableScheduling\n+public class ExpireEmbargoService {\n+\n+    private RepositoryObjectFactory repoObjFactory;\n+    private RepositoryObjectLoader repoObjLoader;\n+    private OperationsMessageSender operationsMessageSender;\n+    private TransactionManager txManager;\n+    private SparqlQueryService sparqlQueryService;\n+\n+    private static final Timer timer = TimerFactory.createTimerForClass(ExpireEmbargoService.class);\n+\n+    private static final Logger log = LoggerFactory.getLogger(ExpireEmbargoService.class);\n+\n+    public ExpireEmbargoService() {\n+    }\n+\n+    // run service every day 1 minute after midnight\n+    @Scheduled(cron = \"0 1 0 * * *\")\n+    public void expireEmbargoes() {\n+        log.info(\"running ExpireEmbargoService\");\n+        // get list of expired embargoes\n+        List<String> resourceList = getEmbargoInfo();\n+        Collection<PID> pids = new ArrayList<>();\n+        PID currentPid = null;\n+\n+        if (resourceList.size() > 0) {\n+            // remove all expired embargoes\n+            for (String rescUri: resourceList) {\n+                FedoraTransaction tx = txManager.startTransaction();\n+\n+                try (Timer.Context context = timer.time()) {\n+                    PID pid = PIDs.get(rescUri);\n+                    currentPid = pid;\n+                    RepositoryObject repoObj = repoObjLoader.getRepositoryObject(pid);\n+                    Resource resc = repoObj.getResource();\n+\n+                    // remove embargo\n+                    String embargoDate = resc.getProperty(embargoUntil).getString();\n+                    repoObjFactory.deleteProperty(repoObj, embargoUntil);\n+                    pids.add(pid);", "originalCommit": "464cfb6ed513be75cf7583fd6a02970a72c227c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0ed8c913a3dd222156d66c6ede1d58ba479ff4", "chunk": "diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nsimilarity index 96%\nrename from persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\nrename to persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\nindex 47172527c..ce6d1807b 100644\n--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/ExpireEmbargoService.java\n+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/acl/ExpireEmbargoService.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package edu.unc.lib.dl.persist.services.edit;\n+package edu.unc.lib.dl.persist.services.acl;\n \n import edu.unc.lib.dl.fcrepo4.FedoraTransaction;\n import edu.unc.lib.dl.fcrepo4.PIDs;\n"}}, {"oid": "ae0ed8c913a3dd222156d66c6ede1d58ba479ff4", "url": "https://github.com/UNC-Libraries/box-c/commit/ae0ed8c913a3dd222156d66c6ede1d58ba479ff4", "message": "Move ExpireEmbargoService to edu.unc.lib.dl.persist.services.acl; remove null pointer catch", "committedDate": "2020-06-05T18:52:06Z", "type": "commit"}]}