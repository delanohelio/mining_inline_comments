{"pr_number": 1385, "pr_title": "Update already enrolled course message", "pr_createdAt": "2020-03-18T12:17:49Z", "pr_url": "https://github.com/edx/edx-app-android/pull/1385", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4MDg4OA==", "url": "https://github.com/edx/edx-app-android/pull/1385#discussion_r395580888", "bodyText": "We are duplicating the functionality of this function. It should be removed and the following should be used.\n\n  \n    \n      edx-app-android/OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseAPI.java\n    \n    \n        Lines 118 to 131\n      in\n      c897ba3\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * @param courseId The course ID. \n        \n\n        \n          \n                * @return The course identified by the provided ID if available from the cache, null if no \n        \n\n        \n          \n                *         course is found. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               @Nullable \n        \n\n        \n          \n               public EnrolledCoursesResponse getCourseById(@NonNull final String courseId) throws Exception { \n        \n\n        \n          \n                   for (EnrolledCoursesResponse r : executeStrict(getEnrolledCoursesFromCache())) { \n        \n\n        \n          \n                       if (r.getCourse().getId().equals(courseId)) { \n        \n\n        \n          \n                           return r; \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   return null; \n        \n\n        \n          \n               }", "author": "farhan", "createdAt": "2020-03-20T11:37:16Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java", "diffHunk": "@@ -134,4 +139,26 @@ public boolean apply(CourseComponent courseComponent) {\n             }\n         });\n     }\n+\n+    /**\n+     * Obtain the enrolled courses data from app level cache and then find the specified course.\n+     *\n+     * @param courseId    Id of the course.\n+     * @return Searched out the course. In case course is not present in\n+     * app level cache it will return false.\n+     */\n+    public Boolean getEnrolledCourseByIdFromAppLevelCache(@NonNull final String courseId) {\n+        try {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse =\n+                    executeStrict(courseApi.getEnrolledCoursesFromCache());\n+            for (EnrolledCoursesResponse course : enrolledCoursesResponse) {", "originalCommit": "92cd5c289e290b9232c41a0acb4a73df11b7eae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba7ae5cf8491adec68e08e8e38099706b1f43d7e", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java b/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java\nindex dcb7cdf7..30683d7e 100644\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java\n+++ b/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java\n\n@@ -139,26 +134,4 @@ public class CourseManager {\n             }\n         });\n     }\n-\n-    /**\n-     * Obtain the enrolled courses data from app level cache and then find the specified course.\n-     *\n-     * @param courseId    Id of the course.\n-     * @return Searched out the course. In case course is not present in\n-     * app level cache it will return false.\n-     */\n-    public Boolean getEnrolledCourseByIdFromAppLevelCache(@NonNull final String courseId) {\n-        try {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse =\n-                    executeStrict(courseApi.getEnrolledCoursesFromCache());\n-            for (EnrolledCoursesResponse course : enrolledCoursesResponse) {\n-                if (course.getCourse().getId().equals(courseId)) {\n-                    return true;\n-                }\n-            }\n-        } catch (Exception ex) {\n-            logger.debug(\"Unable to get cached enrollments list\");\n-        }\n-        return false;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4MTkwOQ==", "url": "https://github.com/edx/edx-app-android/pull/1385#discussion_r395581909", "bodyText": "Function doc is not properly indented.\nPro Tip: Use \"Option + Command + L\" short cut key.\nAlso content of the comment needs to be improved", "author": "farhan", "createdAt": "2020-03-20T11:39:45Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java", "diffHunk": "@@ -134,4 +139,26 @@ public boolean apply(CourseComponent courseComponent) {\n             }\n         });\n     }\n+\n+    /**\n+     * Obtain the enrolled courses data from app level cache and then find the specified course.", "originalCommit": "92cd5c289e290b9232c41a0acb4a73df11b7eae4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba7ae5cf8491adec68e08e8e38099706b1f43d7e", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java b/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java\nindex dcb7cdf7..30683d7e 100644\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java\n+++ b/OpenEdXMobile/src/main/java/org/edx/mobile/services/CourseManager.java\n\n@@ -139,26 +134,4 @@ public class CourseManager {\n             }\n         });\n     }\n-\n-    /**\n-     * Obtain the enrolled courses data from app level cache and then find the specified course.\n-     *\n-     * @param courseId    Id of the course.\n-     * @return Searched out the course. In case course is not present in\n-     * app level cache it will return false.\n-     */\n-    public Boolean getEnrolledCourseByIdFromAppLevelCache(@NonNull final String courseId) {\n-        try {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse =\n-                    executeStrict(courseApi.getEnrolledCoursesFromCache());\n-            for (EnrolledCoursesResponse course : enrolledCoursesResponse) {\n-                if (course.getCourse().getId().equals(courseId)) {\n-                    return true;\n-                }\n-            }\n-        } catch (Exception ex) {\n-            logger.debug(\"Unable to get cached enrollments list\");\n-        }\n-        return false;\n-    }\n }\n"}}, {"oid": "ba7ae5cf8491adec68e08e8e38099706b1f43d7e", "url": "https://github.com/edx/edx-app-android/commit/ba7ae5cf8491adec68e08e8e38099706b1f43d7e", "message": "Address PR comments", "committedDate": "2020-03-25T07:11:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjY0MQ==", "url": "https://github.com/edx/edx-app-android/pull/1385#discussion_r401522641", "bodyText": "it's better to check if the course is already enrolled before the service call of course enrollment and move to the course dashboard without calling an extra service.", "author": "farhan-arshad-dev", "createdAt": "2020-04-01T10:44:27Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/links/DefaultActionListener.java", "diffHunk": "@@ -162,7 +162,10 @@ public void onClickEnroll(@NonNull final String courseId, final boolean emailOpt\n                     protected void onResponse(@NonNull final ResponseBody responseBody) {\n                         super.onResponse(responseBody);\n                         logger.debug(\"Enrollment successful: \" + courseId);\n-                        Toast.makeText(activity, activity.getString(R.string.you_are_now_enrolled), Toast.LENGTH_SHORT).show();\n+                        Toast.makeText(activity, activity.getString(\n+                                courseApi.isCourseEnrolled(courseId) ?", "originalCommit": "ba7ae5cf8491adec68e08e8e38099706b1f43d7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb4689a8014e5280251d965fbac714c782ffaa36", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/util/links/DefaultActionListener.java b/OpenEdXMobile/src/main/java/org/edx/mobile/util/links/DefaultActionListener.java\nindex f267ebcc..bf0d1c87 100644\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/util/links/DefaultActionListener.java\n+++ b/OpenEdXMobile/src/main/java/org/edx/mobile/util/links/DefaultActionListener.java\n\n@@ -154,65 +156,74 @@ public class DefaultActionListener implements URLInterceptorWebViewClient.Action\n \n         logger.debug(\"CourseId - \" + courseId);\n         logger.debug(\"Email option - \" + emailOptIn);\n-        courseService.enrollInACourse(new CourseService.EnrollBody(courseId, emailOptIn))\n-                .enqueue(new CourseService.EnrollCallback(\n-                        activity,\n-                        new TaskProgressCallback.ProgressViewController(progressWheel)) {\n-                    @Override\n-                    protected void onResponse(@NonNull final ResponseBody responseBody) {\n-                        super.onResponse(responseBody);\n-                        logger.debug(\"Enrollment successful: \" + courseId);\n-                        Toast.makeText(activity, activity.getString(\n-                                courseApi.isCourseEnrolled(courseId) ?\n-                                        R.string.you_are_already_enrolled :\n-                                        R.string.you_are_now_enrolled), Toast.LENGTH_SHORT).show();\n+        if (courseApi.isCourseEnrolled(courseId)) {\n+            Toast.makeText(activity, activity.getString(R.string.you_are_already_enrolled), Toast.LENGTH_SHORT).show();\n+            openEnrolledCourseDashboard(courseId);\n+        } else {\n+            courseService.enrollInACourse(new CourseService.EnrollBody(courseId, emailOptIn))\n+                    .enqueue(new CourseService.EnrollCallback(\n+                            activity,\n+                            new TaskProgressCallback.ProgressViewController(progressWheel)) {\n+                        @Override\n+                        protected void onResponse(@NonNull final ResponseBody responseBody) {\n+                            super.onResponse(responseBody);\n+                            logger.debug(\"Enrollment successful: \" + courseId);\n+                            Toast.makeText(activity, activity.getString(R.string.you_are_now_enrolled), Toast.LENGTH_SHORT).show();\n \n-                        environment.getAnalyticsRegistry().trackEnrolmentSuccess(courseId, emailOptIn);\n+                            environment.getAnalyticsRegistry().trackEnrolmentSuccess(courseId, emailOptIn);\n+                            openEnrolledCourseDashboard(courseId);\n+                        }\n \n-                        new Handler().post(new Runnable() {\n-                            @Override\n-                            public void run() {\n-                                courseApi.getEnrolledCourses().enqueue(new CourseAPI.GetCourseByIdCallback(\n-                                        activity, courseId,\n-                                        new TaskProgressCallback.ProgressViewController(progressWheel)) {\n-                                    @Override\n-                                    protected void onResponse(@NonNull final EnrolledCoursesResponse course) {\n-                                        enrollCallback.onResponse(course);\n-                                        environment.getRouter().showMainDashboard(activity);\n-                                        environment.getRouter().showCourseDashboardTabs(activity, course, false);\n-                                    }\n-\n-                                    @Override\n-                                    protected void onFailure(@NonNull final Throwable error) {\n-                                        logger.warn(\"Error during enroll api call\\n\" + error);\n-                                        isTaskInProgress = false;\n-                                        enrollCallback.onFailure(error);\n-                                        Toast.makeText(activity, R.string.cannot_show_dashboard, Toast.LENGTH_SHORT).show();\n-                                    }\n-                                });\n+                        @Override\n+                        protected void onFailure(@NonNull Throwable error) {\n+                            logger.warn(\"Error during enroll api call\\n\" + error);\n+                            isTaskInProgress = false;\n+                            enrollCallback.onFailure(error);\n+\n+                            if (activity instanceof BaseFragmentActivity) {\n+                                final BaseFragmentActivity baseFragmentActivity = (BaseFragmentActivity) activity;\n+                                if (error instanceof HttpStatusException && ((HttpStatusException) error).getStatusCode() == HttpStatus.BAD_REQUEST) {\n+                                    final HashMap<String, CharSequence> params = new HashMap<>();\n+                                    params.put(\"platform_name\", environment.getConfig().getPlatformName());\n+                                    final CharSequence message = ResourceUtil.getFormattedString(activity.getResources(), R.string.enrollment_error_message, params);\n+                                    baseFragmentActivity.showAlertDialog(activity.getString(R.string.enrollment_error_title), message.toString());\n+                                } else {\n+                                    showEnrollErrorMessage(baseFragmentActivity, courseId, emailOptIn);\n+                                }\n                             }\n-                        });\n+                        }\n+                    });\n+        }\n+    }\n+\n+    /**\n+     * Method to open enrolled course dashboard based on courseId\n+     * @param courseId\n+     */\n+    private void openEnrolledCourseDashboard(@NonNull final String courseId) {\n+        new Handler().post(new Runnable() {\n+            @Override\n+            public void run() {\n+                courseApi.getEnrolledCourses().enqueue(new CourseAPI.GetCourseByIdCallback(\n+                        activity, courseId,\n+                        new TaskProgressCallback.ProgressViewController(progressWheel)) {\n+                    @Override\n+                    protected void onResponse(@NonNull final EnrolledCoursesResponse course) {\n+                        enrollCallback.onResponse(course);\n+                        environment.getRouter().showMainDashboard(activity);\n+                        environment.getRouter().showCourseDashboardTabs(activity, course, false);\n                     }\n \n                     @Override\n-                    protected void onFailure(@NonNull Throwable error) {\n+                    protected void onFailure(@NonNull final Throwable error) {\n                         logger.warn(\"Error during enroll api call\\n\" + error);\n                         isTaskInProgress = false;\n                         enrollCallback.onFailure(error);\n-\n-                        if (activity instanceof BaseFragmentActivity) {\n-                            final BaseFragmentActivity baseFragmentActivity = (BaseFragmentActivity) activity;\n-                            if (error instanceof HttpStatusException && ((HttpStatusException) error).getStatusCode() == HttpStatus.BAD_REQUEST) {\n-                                final HashMap<String, CharSequence> params = new HashMap<>();\n-                                params.put(\"platform_name\", environment.getConfig().getPlatformName());\n-                                final CharSequence message = ResourceUtil.getFormattedString(activity.getResources(), R.string.enrollment_error_message, params);\n-                                baseFragmentActivity.showAlertDialog(activity.getString(R.string.enrollment_error_title), message.toString());\n-                            } else {\n-                                showEnrollErrorMessage(baseFragmentActivity, courseId, emailOptIn);\n-                            }\n-                        }\n+                        Toast.makeText(activity, R.string.cannot_show_dashboard, Toast.LENGTH_SHORT).show();\n                     }\n                 });\n+            }\n+        });\n     }\n \n     private void showEnrollErrorMessage(@NonNull BaseFragmentActivity baseFragmentActivity,\n"}}, {"oid": "cb4689a8014e5280251d965fbac714c782ffaa36", "url": "https://github.com/edx/edx-app-android/commit/cb4689a8014e5280251d965fbac714c782ffaa36", "message": "Address PR comments", "committedDate": "2020-04-01T13:47:46Z", "type": "forcePushed"}, {"oid": "2a13d70198bd70c41e0331658694039fb5c05ca6", "url": "https://github.com/edx/edx-app-android/commit/2a13d70198bd70c41e0331658694039fb5c05ca6", "message": "Update already enrolled course message", "committedDate": "2020-04-02T15:39:07Z", "type": "forcePushed"}, {"oid": "83732240d024dfa6f5f88eb2af2283d92de79b03", "url": "https://github.com/edx/edx-app-android/commit/83732240d024dfa6f5f88eb2af2283d92de79b03", "message": "LEARNER-6671 Update already enrolled course message", "committedDate": "2020-04-02T15:42:35Z", "type": "forcePushed"}, {"oid": "6f2f1afc117297ae7f42b85c5f6b3d082695c3f8", "url": "https://github.com/edx/edx-app-android/commit/6f2f1afc117297ae7f42b85c5f6b3d082695c3f8", "message": "Update already enrolled course message\n- LEARNER-6671", "committedDate": "2020-04-02T15:46:23Z", "type": "commit"}, {"oid": "6f2f1afc117297ae7f42b85c5f6b3d082695c3f8", "url": "https://github.com/edx/edx-app-android/commit/6f2f1afc117297ae7f42b85c5f6b3d082695c3f8", "message": "Update already enrolled course message\n- LEARNER-6671", "committedDate": "2020-04-02T15:46:23Z", "type": "forcePushed"}]}