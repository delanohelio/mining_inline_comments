{"pr_number": 1438, "pr_title": "Prioritise cache response of course enrolments api", "pr_createdAt": "2020-07-15T09:56:56Z", "pr_url": "https://github.com/edx/edx-app-android/pull/1438", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MDA3Nw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456370077", "bodyText": "no need to initialize Null.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T10:53:26Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MTMyOQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456371329", "bodyText": "these lines of code should be in the background thread otherwise increase load time.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T10:56:18Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5ODUzNA==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r457198534", "bodyText": "IMO we have to use the retrofit callback.", "author": "farhan-arshad-dev", "createdAt": "2020-07-20T09:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MTMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MjI1Mg==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456372252", "bodyText": "better to display loadingIndicator before loading course data when getting cached data.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T10:58:17Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjkzNQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456376935", "bodyText": "should cover all the scenarios as cover before. L#125", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:09:47Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n+                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NzgxMA==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456377810", "bodyText": "IMO getEnrolledCourses is the more appropriate name here instated of apiCall", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:12:00Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3ODE4MQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456378181", "bodyText": "better to add @NotNull annotation with call and response params.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:13:01Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4MjY1Ng==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456382656", "bodyText": "IMO, we have to check response code 200, there is the min chance to get other response code, as isSuccessful Returns true if response code is in the range [200..300).", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:24:17Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4NTI4Mw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456385283", "bodyText": "better to replace with lambda notation.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T11:30:58Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTIwNw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456489207", "bodyText": "there should be more appropriate method name e.d populateCourseData.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:46:49Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -110,70 +108,25 @@ public void onRefresh() {\n     @Override\n     public void onViewCreated(View view, Bundle savedInstanceState) {\n         super.onViewCreated(view, savedInstanceState);\n-        loadData(true);\n-    }\n-\n-    @Override\n-    public Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> onCreateLoader(int i, Bundle bundle) {\n-        return new CoursesAsyncLoader(getActivity());\n+        loadData(true, true);\n     }\n \n-    @Override\n-    public void onLoadFinished(Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> asyncTaskResultLoader, AsyncTaskResult<List<EnrolledCoursesResponse>> result) {\n-        adapter.clear();\n-        final Exception exception = result.getEx();\n-        if (exception != null) {\n-            if (exception instanceof AuthException) {\n-                loginPrefs.clear();\n-                getActivity().finish();\n-            } else if (exception instanceof HttpStatusException) {\n-                final HttpStatusException httpStatusException = (HttpStatusException) exception;\n-                switch (httpStatusException.getStatusCode()) {\n-                    case HttpStatus.UNAUTHORIZED: {\n-                        environment.getRouter().forceLogout(getContext(),\n-                                environment.getAnalyticsRegistry(),\n-                                environment.getNotificationDelegate());\n-                        break;\n-                    }\n-                }\n-            } else {\n-                logger.error(exception);\n-            }\n-\n-            errorNotification.showError(getActivity(), exception, R.string.lbl_reload,\n-                    new View.OnClickListener() {\n-                        @Override\n-                        public void onClick(View v) {\n-                            if (NetworkUtil.isConnected(getContext())) {\n-                                onRefresh();\n-                            }\n-                        }\n-                    });\n-        } else if (result.getResult() != null) {\n-            ArrayList<EnrolledCoursesResponse> newItems = new ArrayList<EnrolledCoursesResponse>(result.getResult());\n-\n-            updateDatabaseAfterDownload(newItems);\n-\n-            if (result.getResult().size() > 0) {\n-                adapter.setItems(newItems);\n-            }\n-            addFindCoursesFooter();\n-            adapter.notifyDataSetChanged();\n+    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDU4NQ==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456490585", "bodyText": "As these line of code is executed in any case pass/fail service response. Should cover in retrofit call fail/success too.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:48:54Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -110,70 +108,25 @@ public void onRefresh() {\n     @Override\n     public void onViewCreated(View view, Bundle savedInstanceState) {\n         super.onViewCreated(view, savedInstanceState);\n-        loadData(true);\n-    }\n-\n-    @Override\n-    public Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> onCreateLoader(int i, Bundle bundle) {\n-        return new CoursesAsyncLoader(getActivity());\n+        loadData(true, true);\n     }\n \n-    @Override\n-    public void onLoadFinished(Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> asyncTaskResultLoader, AsyncTaskResult<List<EnrolledCoursesResponse>> result) {\n-        adapter.clear();\n-        final Exception exception = result.getEx();\n-        if (exception != null) {\n-            if (exception instanceof AuthException) {\n-                loginPrefs.clear();\n-                getActivity().finish();\n-            } else if (exception instanceof HttpStatusException) {\n-                final HttpStatusException httpStatusException = (HttpStatusException) exception;\n-                switch (httpStatusException.getStatusCode()) {\n-                    case HttpStatus.UNAUTHORIZED: {\n-                        environment.getRouter().forceLogout(getContext(),\n-                                environment.getAnalyticsRegistry(),\n-                                environment.getNotificationDelegate());\n-                        break;\n-                    }\n-                }\n-            } else {\n-                logger.error(exception);\n-            }\n-\n-            errorNotification.showError(getActivity(), exception, R.string.lbl_reload,\n-                    new View.OnClickListener() {\n-                        @Override\n-                        public void onClick(View v) {\n-                            if (NetworkUtil.isConnected(getContext())) {\n-                                onRefresh();\n-                            }\n-                        }\n-                    });\n-        } else if (result.getResult() != null) {\n-            ArrayList<EnrolledCoursesResponse> newItems = new ArrayList<EnrolledCoursesResponse>(result.getResult());\n-\n-            updateDatabaseAfterDownload(newItems);\n-\n-            if (result.getResult().size() > 0) {\n-                adapter.setItems(newItems);\n-            }\n-            addFindCoursesFooter();\n-            adapter.notifyDataSetChanged();\n+    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n+        updateDatabaseAfterDownload(data);\n \n-            if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-                errorNotification.showError(R.string.no_courses_to_display,\n-                        FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-                binding.myCourseList.setVisibility(View.GONE);\n-            } else {\n-                binding.myCourseList.setVisibility(View.VISIBLE);\n-                errorNotification.hideError();\n-            }\n+        if (data.size() > 0) {\n+            adapter.setItems(data);\n         }\n-        binding.swipeContainer.setRefreshing(false);\n-        binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+        addFindCoursesFooter();\n+        adapter.notifyDataSetChanged();\n \n-        if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-            EventBus.getDefault().registerSticky(MyCoursesListFragment.this);", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MTQ5Nw==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456491497", "bodyText": "should create a common method to show the error message, as these lines of code also using in case of success.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:50:12Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n+                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n+                        new View.OnClickListener() {\n+                            @Override\n+                            public void onClick(View v) {\n+                                if (NetworkUtil.isConnected(getContext())) {\n+                                    onRefresh();\n+                                }\n+                            }\n+                        });", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NTgyNg==", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456495826", "bodyText": "should place these line of code in onFailure case too.", "author": "farhan-arshad-dev", "createdAt": "2020-07-17T14:56:54Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }", "originalCommit": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d448916df86d6e349b8f68066f9c4cc628e39eed", "chunk": "diff --git a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java b/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\ndeleted file mode 100644\nindex ca4ba930..00000000\n--- a/OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java\n+++ /dev/null\n\n@@ -1,311 +0,0 @@\n-package org.edx.mobile.view;\n-\n-import androidx.databinding.DataBindingUtil;\n-\n-import android.os.Bundle;\n-\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.joanzapata.iconify.fonts.FontAwesomeIcons;\n-\n-import org.edx.mobile.R;\n-import org.edx.mobile.core.IEdxEnvironment;\n-import org.edx.mobile.course.CourseAPI;\n-import org.edx.mobile.databinding.FragmentMyCoursesListBinding;\n-import org.edx.mobile.databinding.PanelFindCourseBinding;\n-import org.edx.mobile.deeplink.Screen;\n-import org.edx.mobile.event.MoveToDiscoveryTabEvent;\n-import org.edx.mobile.event.EnrolledInCourseEvent;\n-import org.edx.mobile.event.MainDashboardRefreshEvent;\n-import org.edx.mobile.event.NetworkConnectivityChangeEvent;\n-import org.edx.mobile.http.HttpStatus;\n-import org.edx.mobile.http.HttpStatusException;\n-import org.edx.mobile.http.notifications.FullScreenErrorNotification;\n-import org.edx.mobile.interfaces.RefreshListener;\n-import org.edx.mobile.logger.Logger;\n-import org.edx.mobile.model.api.EnrolledCoursesResponse;\n-import org.edx.mobile.module.db.DataCallback;\n-import org.edx.mobile.util.ConfigUtil;\n-import org.edx.mobile.util.NetworkUtil;\n-import org.edx.mobile.util.UiUtil;\n-import org.edx.mobile.view.adapters.MyCoursesAdapter;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.inject.Inject;\n-\n-import de.greenrobot.event.EventBus;\n-import okhttp3.MediaType;\n-import okhttp3.ResponseBody;\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-\n-import static org.edx.mobile.http.util.CallUtil.executeStrict;\n-\n-public class MyCoursesListFragment extends OfflineSupportBaseFragment\n-        implements RefreshListener {\n-\n-    private MyCoursesAdapter adapter;\n-    private FragmentMyCoursesListBinding binding;\n-    private final Logger logger = new Logger(getClass().getSimpleName());\n-    private boolean refreshOnResume = false;\n-\n-    @Inject\n-    private IEdxEnvironment environment;\n-\n-    @Inject\n-    CourseAPI api;\n-\n-    private FullScreenErrorNotification errorNotification;\n-\n-    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n-    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n-\n-    @Override\n-    public void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        adapter = new MyCoursesAdapter(getActivity(), environment) {\n-            @Override\n-            public void onItemClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, false);\n-            }\n-\n-            @Override\n-            public void onAnnouncementClicked(EnrolledCoursesResponse model) {\n-                environment.getRouter().showCourseDashboardTabs(getActivity(), model, true);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n-                             Bundle savedInstanceState) {\n-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false);\n-        errorNotification = new FullScreenErrorNotification(binding.myCourseList);\n-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n-            @Override\n-            public void onRefresh() {\n-                // Hide the progress bar as swipe layout has its own progress indicator\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-                errorNotification.hideError();\n-                loadData(false, false);\n-            }\n-        });\n-        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer);\n-        // Add empty view to cause divider to render at the top of the list.\n-        binding.myCourseList.addHeaderView(new View(getContext()), null, false);\n-        binding.myCourseList.setAdapter(adapter);\n-        binding.myCourseList.setOnItemClickListener(adapter);\n-        return binding.getRoot();\n-    }\n-\n-    @Override\n-    public void onViewCreated(View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        loadData(true, true);\n-    }\n-\n-    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n-        updateDatabaseAfterDownload(data);\n-\n-        if (data.size() > 0) {\n-            adapter.setItems(data);\n-        }\n-        addFindCoursesFooter();\n-        adapter.notifyDataSetChanged();\n-\n-        if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            errorNotification.showError(R.string.no_courses_to_display,\n-                    FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-            binding.myCourseList.setVisibility(View.GONE);\n-        } else {\n-            binding.myCourseList.setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-    }\n-\n-    public void updateDatabaseAfterDownload(ArrayList<EnrolledCoursesResponse> list) {\n-        if (list != null && list.size() > 0) {\n-            //update all videos in the DB as Deactivated\n-            environment.getDatabase().updateAllVideosAsDeactivated(dataCallback);\n-\n-            for (int i = 0; i < list.size(); i++) {\n-                //Check if the flag of isIs_active is marked to true,\n-                //then activate all videos\n-                if (list.get(i).isIs_active()) {\n-                    //update all videos for a course fetched in the API as Activated\n-                    environment.getDatabase().updateVideosActivatedForCourse(list.get(i).getCourse().getId(),\n-                            dataCallback);\n-                } else {\n-                    list.remove(i);\n-                }\n-            }\n-\n-            //Delete all videos which are marked as Deactivated in the database\n-            environment.getStorage().deleteAllUnenrolledVideos();\n-        }\n-    }\n-\n-    private DataCallback<Integer> dataCallback = new DataCallback<Integer>() {\n-        @Override\n-        public void onResult(Integer result) {\n-        }\n-\n-        @Override\n-        public void onFail(Exception ex) {\n-            logger.error(ex);\n-        }\n-    };\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        if (refreshOnResume) {\n-            loadData(false, true);\n-            refreshOnResume = false;\n-        }\n-    }\n-\n-    @Override\n-    public void onDestroy() {\n-        super.onDestroy();\n-        EventBus.getDefault().unregister(this);\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEventMainThread(EnrolledInCourseEvent event) {\n-        refreshOnResume = true;\n-    }\n-\n-    protected void loadData(boolean showProgress, boolean isCached) {\n-        if (isCached) {\n-            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n-            try {\n-                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n-                environment.getNotificationDelegate().syncWithServerForFailure();\n-                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n-                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n-                if (enrolledCoursesResponse.size() > 0) {\n-                    showProgress = false;\n-                }\n-            } catch (Exception exception) {\n-                logger.error(exception);\n-            }\n-        }\n-        if (showProgress) {\n-            binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n-            errorNotification.hideError();\n-        }\n-        getUserEnrolledCourses();\n-    }\n-\n-    private void getUserEnrolledCourses() {\n-        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n-        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n-            @Override\n-            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n-                if (response.isSuccessful()) {\n-                    setCourseData(new ArrayList<>(response.body()));\n-                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n-                    environment.getRouter().forceLogout(getContext(),\n-                            environment.getAnalyticsRegistry(),\n-                            environment.getNotificationDelegate());\n-                } else {\n-                    errorNotification.showError(getContext(), new HttpStatusException(\n-                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n-                            R.string.lbl_reload,\n-                            new View.OnClickListener() {\n-                                @Override\n-                                public void onClick(View v) {\n-                                    if (NetworkUtil.isConnected(getContext())) {\n-                                        onRefresh();\n-                                    }\n-                                }\n-                            });\n-                }\n-                binding.swipeContainer.setRefreshing(false);\n-                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n-\n-                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n-                }\n-            }\n-\n-            @Override\n-            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n-                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n-                        new View.OnClickListener() {\n-                            @Override\n-                            public void onClick(View v) {\n-                                if (NetworkUtil.isConnected(getContext())) {\n-                                    onRefresh();\n-                                }\n-                            }\n-                        });\n-            }\n-        });\n-    }\n-\n-    private void addFindCoursesFooter() {\n-        // Validate footer is not already added.\n-        if (binding.myCourseList.getFooterViewsCount() > 0) {\n-            return;\n-        }\n-        if (ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-            // Add 'Find a Course' list item as a footer.\n-            final PanelFindCourseBinding footer = DataBindingUtil.inflate(LayoutInflater.from(getActivity()),\n-                    R.layout.panel_find_course, binding.myCourseList, false);\n-            binding.myCourseList.addFooterView(footer.getRoot(), null, false);\n-            footer.courseBtn.setOnClickListener(v -> {\n-                environment.getAnalyticsRegistry().trackUserFindsCourses();\n-                EventBus.getDefault().post(new MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY));\n-            });\n-        }\n-        // Add empty view to cause divider to render at the bottom of the list.\n-        binding.myCourseList.addFooterView(new View(getContext()), null, false);\n-    }\n-\n-    @Override\n-    public void onRefresh() {\n-        EventBus.getDefault().post(new MainDashboardRefreshEvent());\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(MainDashboardRefreshEvent event) {\n-        loadData(true, false);\n-    }\n-\n-    @Override\n-    protected void onRevisit() {\n-        super.onRevisit();\n-        if (NetworkUtil.isConnected(getActivity())) {\n-            binding.swipeContainer.setEnabled(true);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unused\")\n-    public void onEvent(NetworkConnectivityChangeEvent event) {\n-        if (getActivity() != null) {\n-            if (NetworkUtil.isConnected(getContext())) {\n-                binding.swipeContainer.setEnabled(true);\n-            } else {\n-                //Disable swipe functionality and hide the loading view\n-                binding.swipeContainer.setEnabled(false);\n-                binding.swipeContainer.setRefreshing(false);\n-            }\n-            onNetworkConnectivityChangeEvent(event);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean isShowingFullScreenError() {\n-        return errorNotification != null && errorNotification.isShowing();\n-    }\n-}\n"}}, {"oid": "d448916df86d6e349b8f68066f9c4cc628e39eed", "url": "https://github.com/edx/edx-app-android/commit/d448916df86d6e349b8f68066f9c4cc628e39eed", "message": "Prioritise cache response of course enrolments api\n-LEARNER-7778\n-Remove AsynLoader Class\n-Convert MyCourseListFragment into kotlin\n-Improve line of codes\n-Prioritise cache response over server call", "committedDate": "2020-07-22T12:30:15Z", "type": "commit"}, {"oid": "d448916df86d6e349b8f68066f9c4cc628e39eed", "url": "https://github.com/edx/edx-app-android/commit/d448916df86d6e349b8f68066f9c4cc628e39eed", "message": "Prioritise cache response of course enrolments api\n-LEARNER-7778\n-Remove AsynLoader Class\n-Convert MyCourseListFragment into kotlin\n-Improve line of codes\n-Prioritise cache response over server call", "committedDate": "2020-07-22T12:30:15Z", "type": "forcePushed"}]}