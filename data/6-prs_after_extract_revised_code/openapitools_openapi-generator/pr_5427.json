{"pr_number": 5427, "pr_title": "[typescript] Clean up modelPropertyNaming across generators ", "pr_createdAt": "2020-02-25T09:45:53Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5427", "timeline": [{"oid": "da3c699cd1486a951052a0f91227faa120e82d1d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/da3c699cd1486a951052a0f91227faa120e82d1d", "message": "[typescript] Clean up modelPropertyNaming across generators\nFixes https://github.com/OpenAPITools/openapi-generator/issues/2976\n\nGenerators without runtime models conversion use \"original\" property naming by default. It's still possible to change it via cli options\n\nGenerators with runtime conversion keep using \"camelCase\"", "committedDate": "2020-02-25T08:23:17Z", "type": "commit"}, {"oid": "af99207e61d1672997edaa2a426102c2dbd9a765", "url": "https://github.com/OpenAPITools/openapi-generator/commit/af99207e61d1672997edaa2a426102c2dbd9a765", "message": "Refactoring: use enum instead of string for modelPropertyNaming", "committedDate": "2020-02-25T08:35:05Z", "type": "commit"}, {"oid": "457c63dbcc55a60a56370fbc46b37c9b15adc66e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/457c63dbcc55a60a56370fbc46b37c9b15adc66e", "message": "Restore the original camelCase for var names, decouple it from property names", "committedDate": "2020-02-25T09:07:30Z", "type": "commit"}, {"oid": "96a05dabff4cada2bd8b762e263b387f9a3514f6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/96a05dabff4cada2bd8b762e263b387f9a3514f6", "message": "Swap toParamName and toVarName logic (looks like I've mistaken them)", "committedDate": "2020-02-25T09:23:53Z", "type": "commit"}, {"oid": "d4e99a086101d6cdff3beebab2a1b92d446fa70e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d4e99a086101d6cdff3beebab2a1b92d446fa70e", "message": "Regenerate docs", "committedDate": "2020-02-25T09:31:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NzQxMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5427#discussion_r383767410", "bodyText": "I carelessly removed this special case.\nPlease let me know if there is a particular reason to handle upper case differently from everything else!", "author": "amakhrov", "createdAt": "2020-02-25T09:48:25Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -274,39 +283,36 @@ public String modelFileFolder() {\n \n     @Override\n     public String toParamName(String name) {\n-        // sanitize name\n         name = sanitizeName(name, \"[^\\\\w$]\");\n \n         if (\"_\".equals(name)) {\n             name = \"_u\";\n         }\n \n-        // if it's all uppper case, do nothing\n-        if (name.matches(\"^[A-Z_]*$\")) {", "originalCommit": "d4e99a086101d6cdff3beebab2a1b92d446fa70e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68b88c0f92e5c9f3cd5800ba6bcff560970e5526", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\nindex 2cf44d1a4a1..6ae71b01e3b 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n\n@@ -316,18 +316,6 @@ public abstract class AbstractTypeScriptClientCodegen extends DefaultCodegen imp\n         return name;\n     }\n \n-    /**\n-     * Checks whether property names have breaking characters like ':', '-'.\n-     * @param str string to check for breaking characters\n-     * @return <code>true</code> if breaking characters are present and <code>false</code> if not\n-     */\n-    private boolean propertyHasBreakingCharacters(String str) {\n-        final String regex = \"^.*[+*:;,.()-]+.*$\";\n-        final Pattern pattern = Pattern.compile(regex);\n-        final Matcher matcher = pattern.matcher(str);\n-        return matcher.matches();\n-    }\n-\n     @Override\n     public String toModelName(final String name) {\n         String fullModelName = name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDI2OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5427#discussion_r383770268", "bodyText": "this would never happen, because at this point name has been sanitized with even more restrictive rules", "author": "amakhrov", "createdAt": "2020-02-25T09:53:09Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -274,39 +283,36 @@ public String modelFileFolder() {\n \n     @Override\n     public String toParamName(String name) {\n-        // sanitize name\n         name = sanitizeName(name, \"[^\\\\w$]\");\n \n         if (\"_\".equals(name)) {\n             name = \"_u\";\n         }\n \n-        // if it's all uppper case, do nothing\n-        if (name.matches(\"^[A-Z_]*$\")) {\n-            return name;\n-        }\n-\n-        name = getNameUsingModelPropertyNaming(name);\n-\n-        // for reserved word or word starting with number, append _\n-        if (isReservedWord(name) || name.matches(\"^\\\\d.*\")) {\n-            name = escapeReservedWord(name);\n-        }\n+        name = camelize(name, true);\n+        name = toSafeIdentifier(name);\n \n         return name;\n     }\n \n     @Override\n     public String toVarName(String name) {\n-        name = this.toParamName(name);\n-        \n-        // if the property name has any breaking characters such as :, ;, . etc.\n-        // then wrap the name within single quotes.\n-        // my:interface:property: string; => 'my:interface:property': string;\n-        if (propertyHasBreakingCharacters(name)) {", "originalCommit": "d4e99a086101d6cdff3beebab2a1b92d446fa70e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68b88c0f92e5c9f3cd5800ba6bcff560970e5526", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\nindex 2cf44d1a4a1..6ae71b01e3b 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n\n@@ -316,18 +316,6 @@ public abstract class AbstractTypeScriptClientCodegen extends DefaultCodegen imp\n         return name;\n     }\n \n-    /**\n-     * Checks whether property names have breaking characters like ':', '-'.\n-     * @param str string to check for breaking characters\n-     * @return <code>true</code> if breaking characters are present and <code>false</code> if not\n-     */\n-    private boolean propertyHasBreakingCharacters(String str) {\n-        final String regex = \"^.*[+*:;,.()-]+.*$\";\n-        final Pattern pattern = Pattern.compile(regex);\n-        final Matcher matcher = pattern.matcher(str);\n-        return matcher.matches();\n-    }\n-\n     @Override\n     public String toModelName(final String name) {\n         String fullModelName = name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MTU5NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5427#discussion_r383771595", "bodyText": "This was not used either in the class or in the mustache templates. Most likely - copy/paste from another generator with runtime conversion support (like typescript-fetch)", "author": "amakhrov", "createdAt": "2020-02-25T09:55:28Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptRxjsClientCodegen.java", "diffHunk": "@@ -89,8 +89,6 @@ public void setNpmRepository(String npmRepository) {\n     @Override\n     public void processOpts() {\n         super.processOpts();\n-        additionalProperties.put(\"isOriginalModelPropertyNaming\", getModelPropertyNaming().equals(\"original\"));\n-        additionalProperties.put(\"modelPropertyNaming\", getModelPropertyNaming());", "originalCommit": "d4e99a086101d6cdff3beebab2a1b92d446fa70e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "68b88c0f92e5c9f3cd5800ba6bcff560970e5526", "url": "https://github.com/OpenAPITools/openapi-generator/commit/68b88c0f92e5c9f3cd5800ba6bcff560970e5526", "message": "Remove a no longer used private method", "committedDate": "2020-02-25T09:56:26Z", "type": "commit"}]}