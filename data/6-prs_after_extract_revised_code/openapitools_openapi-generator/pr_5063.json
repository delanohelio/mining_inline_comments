{"pr_number": 5063, "pr_title": "[test] Removes jmockit in favor of mockito", "pr_createdAt": "2020-01-21T05:23:03Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5063", "timeline": [{"oid": "f1cf99b87d768695de6a4414cfd88612b984c025", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f1cf99b87d768695de6a4414cfd88612b984c025", "message": "[test] Removes jmockit in favor of mockito\n\nWe use mockito in many tests. This removes jmockit which is run as a\njavaagent in favor of Mockito which is not.\n\nThis work is in preparation for applying some static analysis tools,\nwhile evaluating others such as Jacoco. I'm also look at ways to improve\nbuild times while also decreasing \"ramp up time\" for contributions from\nthe community. Reducing the number of mock frameworks and dependencies\nis a step toward that goal.", "committedDate": "2020-01-21T05:11:48Z", "type": "commit"}, {"oid": "8cee01d948fa8d1e41fcd73e421c17ff2795d0a5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8cee01d948fa8d1e41fcd73e421c17ff2795d0a5", "message": "Rename method in new.sh", "committedDate": "2020-01-21T05:17:28Z", "type": "commit"}, {"oid": "39ba95e0cbfaee818bb13817a39b699490df2b87", "url": "https://github.com/OpenAPITools/openapi-generator/commit/39ba95e0cbfaee818bb13817a39b699490df2b87", "message": "[cli] Mock the generate task", "committedDate": "2020-01-22T03:05:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MjY0OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5063#discussion_r369352649", "bodyText": "library1 here should have resulted in an exception, but jmockit swallowed it.", "author": "jimschubert", "createdAt": "2020-01-22T03:13:24Z", "path": "modules/openapi-generator-cli/src/test/java/org/openapitools/codegen/cmd/GenerateTest.java", "diffHunk": "@@ -17,536 +17,413 @@\n \n package org.openapitools.codegen.cmd;\n \n-import org.openapitools.codegen.ClientOptInput;\n+import io.airlift.airline.Cli;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.mockito.MockSettings;\n import org.openapitools.codegen.DefaultGenerator;\n-import org.openapitools.codegen.OpenAPIGenerator;\n+import org.openapitools.codegen.Generator;\n import org.openapitools.codegen.config.CodegenConfigurator;\n-import mockit.Expectations;\n-import mockit.FullVerifications;\n-import mockit.Injectable;\n-import mockit.Mocked;\n-import mockit.Verifications;\n-import org.apache.commons.lang3.ArrayUtils;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n-@SuppressWarnings(\"unused\")\n-public class GenerateTest {\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n \n-    @Mocked\n-    CodegenConfigurator configurator;\n+import static org.mockito.Answers.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.*;\n+import static org.testng.Assert.fail;\n \n-    @Injectable\n-    ClientOptInput clientOptInput;\n+@SuppressWarnings(\"unused\")\n+public class GenerateTest {\n \n-    @Mocked\n-    DefaultGenerator generator;\n+    protected MockSettings mockSettings = withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS);\n+    private Generator generator;\n+    private CodegenConfigurator configurator;\n+    private Path outputDirectory;\n \n-    @Test\n-    public void testVerbose() throws Exception {\n-        setupAndRunGenericTest(\"-v\");\n+    @AfterMethod\n+    public void afterEachTest() {\n+        outputDirectory.toFile().deleteOnExit();\n+    }\n \n-        new FullVerifications() {\n-            {\n-                configurator.setVerbose(true);\n-                times = 1;\n-            }\n-        };\n+    @BeforeMethod\n+    public void beforeEachTest() throws IOException {\n+        outputDirectory = Files.createTempDirectory(\"GenerateTest\");\n+        generator = mock(DefaultGenerator.class);\n+        when(generator.generate()).thenReturn(new ArrayList<>());\n \n-        setupAndRunGenericTest(\"--verbose\");\n+        configurator = mock(CodegenConfigurator.class, mockSettings);\n+    }\n \n-        new FullVerifications() {\n-            {\n-                configurator.setVerbose(true);\n-                times = 1;\n-            }\n-        };\n+    @Test\n+    public void testAdditionalPropertiesLong() {\n+        setupAndRunGenericTest(\"--additional-properties\", \"hello=world,key=,foo=bar,key2\");\n+        verify(configurator).addAdditionalProperty(\"hello\", \"world\");\n+        verify(configurator).addAdditionalProperty(\"foo\", \"bar\");\n+        verify(configurator).addAdditionalProperty(\"key\", \"\");\n+        verify(configurator).addAdditionalProperty(\"key2\", \"\");\n     }\n \n     @Test\n-    public void testRequiredArgs_ShortArgs() throws Exception {\n-        setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", false, null, \"-p\", \"foo=bar\");\n-        new FullVerifications() {\n-            {\n-                configurator.addAdditionalProperty(\"foo\", \"bar\");\n-                times = 1;\n-            }\n-        };\n+    public void testAdditionalPropertiesLongMultiple() {\n+        setupAndRunGenericTest(\"--additional-properties\", \"hello=world\", \"--additional-properties\",\n+                \"key=\", \"--additional-properties\", \"foo=bar\", \"--additional-properties\", \"key2\");\n+        verify(configurator).addAdditionalProperty(\"hello\", \"world\");\n+        verify(configurator).addAdditionalProperty(\"foo\", \"bar\");\n+        verify(configurator).addAdditionalProperty(\"key\", \"\");\n+        verify(configurator).addAdditionalProperty(\"key2\", \"\");\n     }\n \n     @Test\n-    public void testRequiredArgs_LongArgs() throws Exception {\n-        setupAndRunTest(\"--input-spec\", \"src/test/resources/swagger.yaml\", \"--generator-name\", \"java\", \"--output\",\n-                \"src/main/java\", false, null);\n-        new FullVerifications() {\n-            {\n-            }\n-        };\n+    public void testApiPackage() {\n+        final String value = \"io.foo.bar.api\";\n+        setupAndRunGenericTest(\"--api-package\", value);\n+        verify(configurator).setApiPackage(value);\n     }\n \n     @Test\n-    public void testTemplateDir() throws Exception {\n+    public void testArtifactId() {\n+        final String value = \"awesome-api\";\n+        setupAndRunGenericTest(\"--artifact-id\", value);\n \n-        final String templateDir = \"src/main/resources/customTemplates\";\n+        verify(configurator).setArtifactId(value);\n+    }\n \n-        setupAndRunGenericTest(\"--template-dir\", templateDir);\n+    private void setupAndRunGenericTest(String... additionalParameters) {\n+        setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", false, null,\n+                additionalParameters);\n+    }\n \n-        new FullVerifications() {\n-            {\n-                configurator.setTemplateDir(templateDir);\n-                times = 1;\n-            }\n-        };\n+    @SuppressWarnings(\"SameParameterValue\")\n+    private void setupAndRunTest(String specFlag, final String spec, String langFlag,\n+                                 final String lang, String outputDirFlag, final String outputDir,\n+                                 boolean configuratorFromFile, final String configFile, String... additionalParameters) {\n+        final String[] commonArgs =\n+                {\"generate\", langFlag, lang, outputDirFlag, outputDir, specFlag, spec};\n \n-        setupAndRunGenericTest(\"-t\", templateDir);\n+        String[] argsToUse = ArrayUtils.addAll(commonArgs, additionalParameters);\n \n-        new FullVerifications() {\n-            {\n-                configurator.setTemplateDir(templateDir);\n-                times = 1;\n-            }\n-        };\n+        Cli.CliBuilder<Runnable> builder =\n+                Cli.<Runnable>builder(\"openapi-generator-cli\")\n+                        .withCommands(Generate.class);\n+\n+        Generate generate = (Generate) builder.build().parse(argsToUse);\n+\n+        generate.configurator = configurator;\n+        generate.generator = generator;\n+\n+        try {\n+            generate.run();\n+        } finally {\n+            verify(configurator).setInputSpec(spec);\n+            verify(configurator).setGeneratorName(lang);\n+            verify(configurator).setOutputDir(outputDir);\n+        }\n     }\n \n     @Test\n-    public void testAuth() throws Exception {\n+    public void testArtifactVersion() {\n+        final String value = \"1.2.3\";\n+        setupAndRunGenericTest(\"--artifact-version\", value);\n \n-        final String auth = \"hello:world\";\n+        verify(configurator).setArtifactVersion(value);\n+    }\n \n+    @Test\n+    public void testAuthLong() {\n+        final String auth = \"hello:world\";\n         setupAndRunGenericTest(\"--auth\", auth);\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n+        verify(configurator).setAuth(auth);\n+        verifyNoMoreInteractions(configurator);\n+    }\n \n-        new FullVerifications() {\n-            {\n-                configurator.setAuth(auth);\n-                times = 1;\n-            }\n-        };\n-\n+    @Test\n+    public void testAuthShort() {\n+        final String auth = \"hello:world\";\n         setupAndRunGenericTest(\"-a\", auth);\n-\n-        new FullVerifications() {\n-            {\n-                configurator.setAuth(auth);\n-                times = 1;\n-            }\n-        };\n-\n-        setupAndRunGenericTest();\n-\n-        new FullVerifications() {\n-            {\n-                configurator.setAuth(anyString);\n-                times = 0;\n-            }\n-        };\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n+        verify(configurator).setAuth(auth);\n+        verifyNoMoreInteractions(configurator);\n     }\n \n     @Test\n-    public void testConfigJson() throws Exception {\n+    public void testAuthUnspecified() {\n+        setupAndRunGenericTest();\n \n-        setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", true,\n-                \"config.json\", \"-c\", \"config.json\");\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n \n-        new FullVerifications() {\n-            {\n-            }\n-        };\n+        verify(configurator, never()).setAuth(anyString());\n+        verifyNoMoreInteractions(configurator);\n+    }\n \n+    @Test\n+    public void testConfigJsonLong() {\n         setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", true,\n                 \"config.json\", \"--config\", \"config.json\");\n \n-        new FullVerifications() {\n-            {\n-            }\n-        };\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n+\n+        verifyNoMoreInteractions(configurator);\n     }\n \n     @Test\n-    public void testConfigYaml() throws Exception {\n-\n+    public void testConfigJsonShort() {\n         setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", true,\n-                \"config.yaml\", \"-c\", \"config.yaml\");\n-\n-        new FullVerifications() {\n-            {\n-            }\n-        };\n+                \"config.json\", \"-c\", \"config.json\");\n \n-        setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", true,\n-                \"config.yaml\", \"--config\", \"config.yaml\");\n+        // on top of those in setupAndRunTest\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n \n-        new FullVerifications() {\n-            {\n-            }\n-        };\n+        verifyNoMoreInteractions(configurator);\n     }\n \n     @Test\n-    public void testSkipOverwrite() throws Exception {\n+    public void testConfigYamlLong() {\n+        setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", true,\n+                \"config.yaml\", \"--config\", \"config.yaml\");\n \n-        setupAndRunGenericTest(\"-s\");\n-        new FullVerifications() {\n-            {\n-                configurator.setSkipOverwrite(true);\n-                times = 1;\n-            }\n-        };\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n \n-        setupAndRunGenericTest(\"--skip-overwrite\");\n-        new FullVerifications() {\n-            {\n-                configurator.setSkipOverwrite(true);\n-                times = 1;\n-            }\n-        };\n+        verifyNoMoreInteractions(configurator);\n     }\n \n     @Test\n-    public void testStrictSpec() throws Exception {\n+    public void testConfigYamlShort() {\n+        setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", true,\n+                \"config.yaml\", \"-c\", \"config.yaml\");\n \n-        setupAndRunGenericTest(\"--strict-spec\", \"true\");\n-        new FullVerifications() {\n-            {\n-                configurator.setStrictSpecBehavior(true);\n-                times = 1;\n-            }\n-        };\n+        // on top of those in setupAndRunTest\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n \n-        setupAndRunGenericTest(\"--strict-spec\", \"false\");\n-        new FullVerifications() {\n-            {\n-                configurator.setStrictSpecBehavior(false);\n-                times = 1;\n-            }\n-        };\n+        verifyNoMoreInteractions(configurator);\n     }\n \n     @Test\n-    public void testPackageName() throws Exception {\n-        final String value = \"io.foo.bar.baz\";\n-        setupAndRunGenericTest(\"--package-name\", value);\n-\n-        new FullVerifications() {\n-            {\n-                configurator.setPackageName(value);\n-                times = 1;\n-            }\n-        };\n+    public void testGroupId() {\n+        final String value = \"io.foo.bar.api\";\n+        setupAndRunGenericTest(\"--group-id\", value);\n+        verify(configurator).setGroupId(value);\n     }\n \n     @Test\n-    public void testApiPackage() throws Exception {\n-        final String value = \"io.foo.bar.api\";\n-        setupAndRunGenericTest(\"--api-package\", value);\n+    public void testImportMappingsLong() {\n+        setupAndRunGenericTest(\"--import-mappings\", \"hello=world,key=,foo=bar,key2\");\n \n-        new FullVerifications() {\n-            {\n-                configurator.setApiPackage(value);\n-                times = 1;\n-            }\n-        };\n+        verify(configurator).addImportMapping(\"hello\", \"world\");\n+        verify(configurator).addImportMapping(\"foo\", \"bar\");\n+        verify(configurator).addImportMapping(\"key\", \"\");\n+        verify(configurator).addImportMapping(\"key2\", \"\");\n     }\n \n     @Test\n-    public void testModelPackage() throws Exception {\n-        final String value = \"io.foo.bar.api\";\n-        setupAndRunGenericTest(\"--model-package\", value);\n+    public void testImportMappingsLongMultiple() {\n+        setupAndRunGenericTest(\"--import-mappings\", \"hello=world\", \"--import-mappings\", \"key=\",\n+                \"--import-mappings\", \"foo=bar\", \"--import-mappings\", \"key2\");\n \n-        new FullVerifications() {\n-            {\n-                configurator.setModelPackage(value);\n-                times = 1;\n-            }\n-        };\n+        verify(configurator).addImportMapping(\"hello\", \"world\");\n+        verify(configurator).addImportMapping(\"foo\", \"bar\");\n+        verify(configurator).addImportMapping(\"key\", \"\");\n+        verify(configurator).addImportMapping(\"key2\", \"\");\n     }\n \n     @Test\n-    public void testInstantiationTypes() throws Exception {\n-\n+    public void testInstantiationTypesLong() {\n         setupAndRunGenericTest(\"--instantiation-types\", \"hello=world,key=,foo=bar,key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addInstantiationType(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addInstantiationType(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addInstantiationType(\"key\", \"\");\n-                times = 1;\n-                configurator.addInstantiationType(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n-\n-        setupAndRunGenericTest(\"--instantiation-types\", \"hello=world\", \"--instantiation-types\",\n-                \"key=\", \"--instantiation-types\", \"foo=bar\", \"--instantiation-types\", \"key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addInstantiationType(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addInstantiationType(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addInstantiationType(\"key\", \"\");\n-                times = 1;\n-                configurator.addInstantiationType(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n+        verify(configurator).addInstantiationType(\"hello\", \"world\");\n+        verify(configurator).addInstantiationType(\"foo\", \"bar\");\n+        verify(configurator).addInstantiationType(\"key\", \"\");\n+        verify(configurator).addInstantiationType(\"key2\", \"\");\n     }\n \n     @Test\n-    public void testTypeMappings() throws Exception {\n-        setupAndRunGenericTest(\"--type-mappings\", \"hello=world,key=,foo=bar,key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addTypeMapping(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addTypeMapping(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addTypeMapping(\"key\", \"\");\n-                times = 1;\n-                configurator.addTypeMapping(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n-\n-        setupAndRunGenericTest(\"--type-mappings\", \"hello=world\", \"--type-mappings\", \"key=\",\n-                \"--type-mappings\", \"foo=bar\", \"--type-mappings\", \"key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addTypeMapping(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addTypeMapping(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addTypeMapping(\"key\", \"\");\n-                times = 1;\n-                configurator.addTypeMapping(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n+    public void testInstantiationTypesLongMultiple() {\n+        setupAndRunGenericTest(\"--instantiation-types\", \"hello=world\", \"--instantiation-types\",\n+                \"key=\", \"--instantiation-types\", \"foo=bar\", \"--instantiation-types\", \"key2\");\n+        verify(configurator).addInstantiationType(\"hello\", \"world\");\n+        verify(configurator).addInstantiationType(\"foo\", \"bar\");\n+        verify(configurator).addInstantiationType(\"key\", \"\");\n+        verify(configurator).addInstantiationType(\"key2\", \"\");\n     }\n \n     @Test\n-    public void testAdditionalProperties() throws Exception {\n-        setupAndRunGenericTest(\"--additional-properties\", \"hello=world,key=,foo=bar,key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addAdditionalProperty(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addAdditionalProperty(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addAdditionalProperty(\"key\", \"\");\n-                times = 1;\n-                configurator.addAdditionalProperty(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n-\n-        setupAndRunGenericTest(\"--additional-properties\", \"hello=world\", \"--additional-properties\",\n-                \"key=\", \"--additional-properties\", \"foo=bar\", \"--additional-properties\", \"key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addAdditionalProperty(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addAdditionalProperty(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addAdditionalProperty(\"key\", \"\");\n-                times = 1;\n-                configurator.addAdditionalProperty(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n+    public void testInvokerPackage() {\n+        final String value = \"io.foo.bar.api\";\n+        setupAndRunGenericTest(\"--invoker-package\", value);\n+        verify(configurator).setInvokerPackage(value);\n     }\n \n     @Test\n-    public void testLanguageSpecificPrimitives() throws Exception {\n+    public void testLanguageSpecificPrimitives() {\n         setupAndRunGenericTest(\"--language-specific-primitives\", \"foo,,bar\",\n                 \"--language-specific-primitives\", \"hello,world\");\n \n-        new FullVerifications() {\n-            {\n-                configurator.addLanguageSpecificPrimitive(\"foo\");\n-                times = 1;\n-                configurator.addLanguageSpecificPrimitive(\"bar\");\n-                times = 1;\n-                configurator.addLanguageSpecificPrimitive(\"hello\");\n-                times = 1;\n-                configurator.addLanguageSpecificPrimitive(\"world\");\n-                times = 1;\n-            }\n-        };\n+        verify(configurator).addLanguageSpecificPrimitive(\"foo\");\n+        verify(configurator).addLanguageSpecificPrimitive(\"bar\");\n+        verify(configurator).addLanguageSpecificPrimitive(\"hello\");\n+        verify(configurator).addLanguageSpecificPrimitive(\"world\");\n     }\n \n     @Test\n-    public void testImportMappings() throws Exception {\n-        setupAndRunGenericTest(\"--import-mappings\", \"hello=world,key=,foo=bar,key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addImportMapping(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addImportMapping(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addImportMapping(\"key\", \"\");\n-                times = 1;\n-                configurator.addImportMapping(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n-\n-        setupAndRunGenericTest(\"--import-mappings\", \"hello=world\", \"--import-mappings\", \"key=\",\n-                \"--import-mappings\", \"foo=bar\", \"--import-mappings\", \"key2\");\n-\n-        new FullVerifications() {\n-            {\n-                configurator.addImportMapping(\"hello\", \"world\");\n-                times = 1;\n-                configurator.addImportMapping(\"foo\", \"bar\");\n-                times = 1;\n-                configurator.addImportMapping(\"key\", \"\");\n-                times = 1;\n-                configurator.addImportMapping(\"key2\", \"\");\n-                times = 1;\n-            }\n-        };\n+    public void testLibrary() {\n+        final String value = \"feign\";\n+        setupAndRunGenericTest(\"--library\", value);\n+        verify(configurator).setLibrary(value);\n     }\n \n     @Test\n-    public void testInvokerPackage() throws Exception {\n+    public void testModelPackage() {\n         final String value = \"io.foo.bar.api\";\n-        setupAndRunGenericTest(\"--invoker-package\", value);\n-\n-        new FullVerifications() {\n-            {\n-                configurator.setInvokerPackage(value);\n-                times = 1;\n-            }\n-        };\n+        setupAndRunGenericTest(\"--model-package\", value);\n+        verify(configurator).setModelPackage(value);\n     }\n \n     @Test\n-    public void testGroupId() throws Exception {\n-        final String value = \"io.foo.bar.api\";\n-        setupAndRunGenericTest(\"--group-id\", value);\n-\n-        new FullVerifications() {\n-            {\n-                configurator.setGroupId(value);\n-                times = 1;\n-            }\n-        };\n+    public void testPackageName() {\n+        final String value = \"io.foo.bar.baz\";\n+        setupAndRunGenericTest(\"--package-name\", value);\n+        verify(configurator).setPackageName(value);\n     }\n \n     @Test\n-    public void testArtifactId() throws Exception {\n-        final String value = \"awesome-api\";\n-        setupAndRunGenericTest(\"--artifact-id\", value);\n+    public void testRequiredArgs_LongArgs() {\n+        setupAndRunTest(\"--input-spec\", \"src/test/resources/swagger.yaml\", \"--generator-name\", \"java\", \"--output\",\n+                \"src/main/java\", false, null);\n \n-        new FullVerifications() {\n-            {\n-                configurator.setArtifactId(value);\n-                times = 1;\n-            }\n-        };\n+        // on top of those in setupAndRunTest:\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n+\n+        verifyNoMoreInteractions(configurator);\n     }\n \n     @Test\n-    public void testArtifactVersion() throws Exception {\n-        final String value = \"1.2.3\";\n-        setupAndRunGenericTest(\"--artifact-version\", value);\n+    public void testRequiredArgs_ShortArgs() {\n+        setupAndRunTest(\"-i\", \"src/test/resources/swagger.yaml\", \"-g\", \"java\", \"-o\", \"src/main/java\", false, null, \"-p\", \"foo=bar\");\n+\n+        verify(configurator).addAdditionalProperty(\"foo\", \"bar\");\n+        verify(configurator).toClientOptInput();\n+        verify(configurator).toContext();\n \n-        new FullVerifications() {\n-            {\n-                configurator.setArtifactVersion(value);\n-                times = 1;\n-            }\n-        };\n+        verifyNoMoreInteractions(configurator);\n     }\n \n     @Test\n-    public void testLibrary() throws Exception {\n-        final String value = \"library1\";", "originalCommit": "39ba95e0cbfaee818bb13817a39b699490df2b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2ddcfe04728e832cc0b4b38a51daf5660109287", "chunk": "diff --git a/modules/openapi-generator-cli/src/test/java/org/openapitools/codegen/cmd/GenerateTest.java b/modules/openapi-generator-cli/src/test/java/org/openapitools/codegen/cmd/GenerateTest.java\nindex 838607e18f8..496e078a15d 100644\n--- a/modules/openapi-generator-cli/src/test/java/org/openapitools/codegen/cmd/GenerateTest.java\n+++ b/modules/openapi-generator-cli/src/test/java/org/openapitools/codegen/cmd/GenerateTest.java\n\n@@ -362,7 +362,9 @@ public class GenerateTest {\n             verify(configurator).toContext();\n             verifyNoMoreInteractions(configurator);\n         } finally {\n-            f.delete();\n+            if(!f.delete()) {\n+                System.out.println(\"Directory didn't delete. You can ignore this.\");\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MjcxNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5063#discussion_r369352715", "bodyText": "This old value should have resulted in an exception, but jmockit swallowed it.", "author": "jimschubert", "createdAt": "2020-01-22T03:13:49Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/options/ScalaHttpClientOptionsProvider.java", "diffHunk": "@@ -29,7 +29,7 @@\n     public static final String SORT_PARAMS_VALUE = \"false\";\n     public static final String SORT_MODEL_PROPERTIES_VALUE = \"false\";\n     public static final String ENSURE_UNIQUE_PARAMS_VALUE = \"true\";\n-    public static final String MODEL_PROPERTY_NAMING = \"modelPropertyNaming\";", "originalCommit": "39ba95e0cbfaee818bb13817a39b699490df2b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f2ddcfe04728e832cc0b4b38a51daf5660109287", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f2ddcfe04728e832cc0b4b38a51daf5660109287", "message": "Avoid ignoring boolean from File#delete", "committedDate": "2020-01-22T03:31:49Z", "type": "commit"}]}