{"pr_number": 6290, "pr_title": "[codegen][python-experimental] Composed schema with additionalProperties ", "pr_createdAt": "2020-05-13T21:09:10Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6290", "timeline": [{"oid": "5f428a4b5829f7ba7a41475083b7d55bef28304d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5f428a4b5829f7ba7a41475083b7d55bef28304d", "message": "run sample scripts", "committedDate": "2020-05-21T04:04:57Z", "type": "commit"}, {"oid": "9b82711fe6630f1e36c3ecc7af9e150c97826862", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9b82711fe6630f1e36c3ecc7af9e150c97826862", "message": "run sample scripts", "committedDate": "2020-05-21T04:06:53Z", "type": "commit"}, {"oid": "0b19b7f4b60787fabea995206bf3f2bde3e5e9d2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0b19b7f4b60787fabea995206bf3f2bde3e5e9d2", "message": "refactor cli option for additional properties", "committedDate": "2020-05-21T05:11:45Z", "type": "commit"}, {"oid": "006900a4f850df380fa507241020c1a66c6ebe7d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/006900a4f850df380fa507241020c1a66c6ebe7d", "message": "refactor cli option for additional properties", "committedDate": "2020-05-21T05:35:08Z", "type": "commit"}, {"oid": "a63f6701432c58be78c100cc498821befdcfb259", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a63f6701432c58be78c100cc498821befdcfb259", "message": "run samples scripts", "committedDate": "2020-05-21T05:38:23Z", "type": "commit"}, {"oid": "38ecb91b638fdad96c676c7620ad589c307cb095", "url": "https://github.com/OpenAPITools/openapi-generator/commit/38ecb91b638fdad96c676c7620ad589c307cb095", "message": "run sample scripts", "committedDate": "2020-05-21T05:40:56Z", "type": "commit"}, {"oid": "66d35c5c197b1918b14fabb25e1f316e23823724", "url": "https://github.com/OpenAPITools/openapi-generator/commit/66d35c5c197b1918b14fabb25e1f316e23823724", "message": "run sample scripts", "committedDate": "2020-05-21T05:43:09Z", "type": "commit"}, {"oid": "fe87ff0d573bb53ed1576aa250aba200f85d5aaa", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fe87ff0d573bb53ed1576aa250aba200f85d5aaa", "message": "run sample scripts", "committedDate": "2020-05-21T05:44:46Z", "type": "commit"}, {"oid": "ed54ab81957afc1a46cd255863c975e562c186e4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ed54ab81957afc1a46cd255863c975e562c186e4", "message": "run sample scripts", "committedDate": "2020-05-21T05:46:52Z", "type": "commit"}, {"oid": "65d1401dcb6f621e2f0a5e00a2b9be409eb681e7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/65d1401dcb6f621e2f0a5e00a2b9be409eb681e7", "message": "Add yaml comments", "committedDate": "2020-05-21T05:53:35Z", "type": "commit"}, {"oid": "0ce0b6b6f85b47277a496201fb105b622bdbc9f6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0ce0b6b6f85b47277a496201fb105b622bdbc9f6", "message": "small refactor", "committedDate": "2020-05-21T05:59:48Z", "type": "commit"}, {"oid": "92cb99bfa80e33c1000cd1ddbe56ec5ceabc4827", "url": "https://github.com/OpenAPITools/openapi-generator/commit/92cb99bfa80e33c1000cd1ddbe56ec5ceabc4827", "message": "small refactor", "committedDate": "2020-05-21T06:00:57Z", "type": "commit"}, {"oid": "765757f420b7baddec739f6edaa6eaa7bd382048", "url": "https://github.com/OpenAPITools/openapi-generator/commit/765757f420b7baddec739f6edaa6eaa7bd382048", "message": "run sample scripts", "committedDate": "2020-05-21T06:07:08Z", "type": "commit"}, {"oid": "ec200306f9e3803ff525857d910b5563bbe8575c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ec200306f9e3803ff525857d910b5563bbe8575c", "message": "run sample scripts", "committedDate": "2020-05-21T06:09:54Z", "type": "commit"}, {"oid": "d14898cadc8ae3b4ce64555288766284beadfc27", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d14898cadc8ae3b4ce64555288766284beadfc27", "message": "fix unit tests", "committedDate": "2020-05-21T06:31:05Z", "type": "commit"}, {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/89117b9b54879154459c08fe790586cf6e03fbb8", "message": "Set disallowAdditionalPropertiesIfNotPresent flag", "committedDate": "2020-05-21T13:34:06Z", "type": "commit"}, {"oid": "1351fd0e9234e995a34eb3fc624b245d025d248e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1351fd0e9234e995a34eb3fc624b245d025d248e", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-21T15:20:54Z", "type": "commit"}, {"oid": "ba6573568266660188c8e176f1cdf4aaaf376b14", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ba6573568266660188c8e176f1cdf4aaaf376b14", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-22T02:19:22Z", "type": "commit"}, {"oid": "9a0b89e18566266efb3b9d6373fc443008eb8514", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9a0b89e18566266efb3b9d6373fc443008eb8514", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-22T16:01:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NTk3OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429355979", "bodyText": "Should we also do codegenModel.imports.addAll(referencedModelNames);\nDo we have an example that uses this code? Where?", "author": "spacether", "createdAt": "2020-05-22T16:56:03Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -969,14 +1007,20 @@ public String toInstantiationType(Schema property) {\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n-        Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        Schema addProps = getAdditionalProperties(schema);\n+        if (addProps != null) {\n+            // if AdditionalProperties exists, get its datatype and\n+            // store it in codegenModel.additionalPropertiesType.\n+            // The 'addProps' may be a reference, getTypeDeclaration will resolve\n+            // the reference.\n+            List<String> referencedModelNames = new ArrayList<String>();\n+            codegenModel.additionalPropertiesType = getTypeString(addProps, \"\", \"\", referencedModelNames);\n+            if (referencedModelNames.size() != 0) {\n+                codegenModel.vendorExtensions.put(referencedModelNamesExtension, referencedModelNames);", "originalCommit": "89117b9b54879154459c08fe790586cf6e03fbb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MzYzMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429363632", "bodyText": "Should we also do codegenModel.imports.addAll(referencedModelNames);\n\nCan you explain why? I can do it if you think this is required, I would like to understand why.\n\nDo we have an example that uses this code? Where?\n\nYes, here: https://github.com/OpenAPITools/openapi-generator/pull/6290/files#diff-ce668661a7662b4d1644917208c94d59R1951\nThe example would fail to execute without this import.", "author": "sebastien-rosset", "createdAt": "2020-05-22T17:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NTk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c84190ef4387be4d823bd89890127b4870c453a", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex 470849ce571..92c76bb89bb 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -1007,20 +969,14 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n-        Schema addProps = getAdditionalProperties(schema);\n-        if (addProps != null) {\n-            // if AdditionalProperties exists, get its datatype and\n-            // store it in codegenModel.additionalPropertiesType.\n-            // The 'addProps' may be a reference, getTypeDeclaration will resolve\n-            // the reference.\n-            List<String> referencedModelNames = new ArrayList<String>();\n-            codegenModel.additionalPropertiesType = getTypeString(addProps, \"\", \"\", referencedModelNames);\n-            if (referencedModelNames.size() != 0) {\n-                codegenModel.vendorExtensions.put(referencedModelNamesExtension, referencedModelNames);\n-            }\n+        Schema addProps = ModelUtils.getAdditionalProperties(schema);\n+        if (addProps != null && addProps.get$ref() == null) {\n+            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n+            String typeString = getTypeDeclaration(addProps);\n+            codegenModel.additionalPropertiesType = typeString;\n+        } else {\n+            addParentContainer(codegenModel, codegenModel.name, schema);\n         }\n-        // If addProps is null, the value of the 'additionalProperties' keyword is set\n-        // to false, i.e. no additional properties are allowed.\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429356417", "bodyText": "Why did we remove the imports check here?", "author": "spacether", "createdAt": "2020-05-22T16:57:04Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java", "diffHunk": "@@ -289,9 +289,8 @@ public void mapModelTest() {\n         Assert.assertEquals(cm.classname, \"sample.Sample\");\n         Assert.assertEquals(cm.description, \"a map model\");\n         Assert.assertEquals(cm.vars.size(), 0);\n-        Assert.assertEquals(cm.parent, \"dict\");\n-        Assert.assertEquals(cm.imports.size(), 1);\n-        Assert.assertEquals(Sets.intersection(cm.imports, Sets.newHashSet(\"children.Children\")).size(), 1);", "originalCommit": "89117b9b54879154459c08fe790586cf6e03fbb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzQ0MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429367441", "bodyText": "Why did we remove the imports check here?\n\nBecause now that composed schemas support the additionalProperties keyword, the additional properties are no longer in the parent. The other unit tests cover the scenario of composed schema with additional properties.", "author": "sebastien-rosset", "createdAt": "2020-05-22T17:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MjAwNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429372005", "bodyText": "Okay, but  what should we expect to see in cm.imports here?\nAn empty list?\nIf it a list of length 1, what should it contain?\nCan you put the assertions back in verifying that the length and value of cm.imports is correct?", "author": "spacether", "createdAt": "2020-05-22T17:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NTY3MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429375671", "bodyText": "The new assertion is there: https://github.com/OpenAPITools/openapi-generator/pull/6290/files/89117b9b54879154459c08fe790586cf6e03fbb8#diff-81a58419c148eb8bb7ddfa31ed3f0d2cR292\nI didn't just remove the assertion, I replaced them with the proper assertion.", "author": "sebastien-rosset", "createdAt": "2020-05-22T17:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "4c84190ef4387be4d823bd89890127b4870c453a", "chunk": "diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java\nindex c7988952b7f..c040b61b33e 100644\n--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java\n+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java\n\n@@ -289,8 +289,9 @@ public class PythonClientExperimentalTest {\n         Assert.assertEquals(cm.classname, \"sample.Sample\");\n         Assert.assertEquals(cm.description, \"a map model\");\n         Assert.assertEquals(cm.vars.size(), 0);\n-        Assert.assertEquals(cm.parent, null);\n-        Assert.assertEquals(cm.imports.size(), 0);\n+        Assert.assertEquals(cm.parent, \"dict\");\n+        Assert.assertEquals(cm.imports.size(), 1);\n+        Assert.assertEquals(Sets.intersection(cm.imports, Sets.newHashSet(\"children.Children\")).size(), 1);\n     }\n \n }\n"}}, {"oid": "4c84190ef4387be4d823bd89890127b4870c453a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4c84190ef4387be4d823bd89890127b4870c453a", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-22T17:17:14Z", "type": "commit"}, {"oid": "0f1f59ca22f49fdc59115f19fd06a95ae97d7134", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0f1f59ca22f49fdc59115f19fd06a95ae97d7134", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-22T17:17:32Z", "type": "commit"}, {"oid": "5206a30eaaec420ee4cc7ef8716e55f92fe80d37", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5206a30eaaec420ee4cc7ef8716e55f92fe80d37", "message": "reduced size of test yaml file", "committedDate": "2020-05-22T17:39:40Z", "type": "commit"}, {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5339ab728076ed348387f8c742ed9e7a2dfd6872", "message": "simplify code and add imports directly", "committedDate": "2020-05-22T17:53:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwMTM0Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429401343", "bodyText": "Great addition here. This is very helpful, thanks!", "author": "spacether", "createdAt": "2020-05-22T18:43:19Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -52,11 +53,19 @@ public static OpenAPI parseFlattenSpec(String specFilePath) {\n      * @return A \"raw\" OpenAPI document\n      */\n     public static OpenAPI parseSpec(String specFilePath) {\n-        return new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();\n+        // Invoke helper function to get the original swagger version.\n+        // See https://github.com/swagger-api/swagger-parser/pull/1374\n+        // Also see https://github.com/swagger-api/swagger-parser/issues/1369.\n+        ModelUtils.getOpenApiVersion(openAPI, specFilePath, null);", "originalCommit": "5339ab728076ed348387f8c742ed9e7a2dfd6872", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94ae68328b8b05a4d67f99520466f4a3ab08d091", "chunk": "diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\nindex dc5ec9965a2..077268f2408 100644\n--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\n+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\n\n@@ -53,19 +52,11 @@ public class TestUtils {\n      * @return A \"raw\" OpenAPI document\n      */\n     public static OpenAPI parseSpec(String specFilePath) {\n-        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();\n-        // Invoke helper function to get the original swagger version.\n-        // See https://github.com/swagger-api/swagger-parser/pull/1374\n-        // Also see https://github.com/swagger-api/swagger-parser/issues/1369.\n-        ModelUtils.getOpenApiVersion(openAPI, specFilePath, null);\n-        return openAPI;\n+        return new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();\n     }\n \n     public static OpenAPI parseContent(String jsonOrYaml) {\n-        OpenAPI openAPI = new OpenAPIParser().readContents(jsonOrYaml, null, null).getOpenAPI();\n-        // Invoke helper function to get the original swagger version.\n-        ModelUtils.getOpenApiVersion(openAPI, jsonOrYaml, null);\n-        return openAPI;\n+        return new OpenAPIParser().readContents(jsonOrYaml, null, null).getOpenAPI();\n     }\n \n     public static OpenAPI createOpenAPI() {\n"}}, {"oid": "0f014dddbb9d7855afe43f88ebec5ddc1cbd5907", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0f014dddbb9d7855afe43f88ebec5ddc1cbd5907", "message": "rename some of the properties used in tests", "committedDate": "2020-05-22T21:41:00Z", "type": "commit"}, {"oid": "ffae039487a7c5333a920eece5bea4b5a73966ab", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ffae039487a7c5333a920eece5bea4b5a73966ab", "message": "Handle more scenarios for nullable types", "committedDate": "2020-05-22T23:24:00Z", "type": "commit"}, {"oid": "94ae68328b8b05a4d67f99520466f4a3ab08d091", "url": "https://github.com/OpenAPITools/openapi-generator/commit/94ae68328b8b05a4d67f99520466f4a3ab08d091", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-22T23:24:57Z", "type": "commit"}, {"oid": "8fdbd278fdbdf1da674206cf1ca8d337a7c26d80", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8fdbd278fdbdf1da674206cf1ca8d337a7c26d80", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-22T23:25:20Z", "type": "commit"}, {"oid": "aac9f5a45496cee2f092fcbbec1378a479451e9d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/aac9f5a45496cee2f092fcbbec1378a479451e9d", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-23T01:16:38Z", "type": "commit"}, {"oid": "248086a6ed556e32ab3c5d9410f6739eb05a7e97", "url": "https://github.com/OpenAPITools/openapi-generator/commit/248086a6ed556e32ab3c5d9410f6739eb05a7e97", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-23T01:16:57Z", "type": "commit"}, {"oid": "93baa3deb70eacd53335c94970b6f0ebcb3ad4ba", "url": "https://github.com/OpenAPITools/openapi-generator/commit/93baa3deb70eacd53335c94970b6f0ebcb3ad4ba", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-23T02:37:32Z", "type": "commit"}, {"oid": "47e542e1c4e02c64d8d61626e7f2449b16e65c2a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/47e542e1c4e02c64d8d61626e7f2449b16e65c2a", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-23T02:42:39Z", "type": "commit"}, {"oid": "5c313b4934037fb39067fe3f4cee27d6eb4ffae4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5c313b4934037fb39067fe3f4cee27d6eb4ffae4", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-23T14:49:07Z", "type": "commit"}, {"oid": "e91ad67c9ff5716abcada471cbe2a42a187363fd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e91ad67c9ff5716abcada471cbe2a42a187363fd", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-23T14:50:07Z", "type": "commit"}, {"oid": "cda8898cc87009a86e6e3a6cc0ab6a22236142b5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cda8898cc87009a86e6e3a6cc0ab6a22236142b5", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-23T16:14:20Z", "type": "commit"}, {"oid": "aee63b6c056bab17b64f9ce8b55f73c50f89d66f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/aee63b6c056bab17b64f9ce8b55f73c50f89d66f", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-23T17:39:31Z", "type": "commit"}, {"oid": "b1b487a14ca2689e06bc5760d3be3f41c63c03d9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b1b487a14ca2689e06bc5760d3be3f41c63c03d9", "message": "add code comments", "committedDate": "2020-05-23T17:45:48Z", "type": "commit"}, {"oid": "1f7e5c1c07ccc3a3fca2a4b2d13875965faa2a43", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1f7e5c1c07ccc3a3fca2a4b2d13875965faa2a43", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-24T00:58:32Z", "type": "commit"}, {"oid": "b0339d00f03ee4434a57698c071508de0506a4e4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b0339d00f03ee4434a57698c071508de0506a4e4", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-24T00:59:30Z", "type": "commit"}, {"oid": "5466a8876b4c4fe2a3a243155b0a4e6b37467b5d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5466a8876b4c4fe2a3a243155b0a4e6b37467b5d", "message": "Adds *args input to __init__ method to fix test testFruitNullValue", "committedDate": "2020-05-24T07:33:00Z", "type": "commit"}, {"oid": "7eb9c8e218fc21003fc6e92352aea7edd4d5e45b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7eb9c8e218fc21003fc6e92352aea7edd4d5e45b", "message": "Merge pull request #21 from spacether/all-of-additional-properties_jblack\n\nAdds *args input to __init__ method to fix test testFruitNullValue", "committedDate": "2020-05-25T15:42:29Z", "type": "commit"}, {"oid": "bef435ed8ceed036f5de457f2d7b4b5a0a328b81", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bef435ed8ceed036f5de457f2d7b4b5a0a328b81", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-25T23:54:25Z", "type": "commit"}, {"oid": "e5ba96751d72f0840a4f614d1c8eee1c8f768621", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e5ba96751d72f0840a4f614d1c8eee1c8f768621", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-25T23:55:07Z", "type": "commit"}, {"oid": "6d561ad04585b760fb80cc13d659bb4039028462", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6d561ad04585b760fb80cc13d659bb4039028462", "message": "Resolve merge issues", "committedDate": "2020-05-25T23:58:03Z", "type": "commit"}, {"oid": "4e6a8275f01f872e70c26c2ca84fe58194a5bea4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4e6a8275f01f872e70c26c2ca84fe58194a5bea4", "message": "Merge branch 'all-of-additional-properties' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-26T00:25:14Z", "type": "commit"}, {"oid": "768d933f508cafadbaf79fdec312c34c8b51ad5f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/768d933f508cafadbaf79fdec312c34c8b51ad5f", "message": "run samples scripts", "committedDate": "2020-05-26T05:10:36Z", "type": "commit"}, {"oid": "3283e3c696ba6cfe9dbeafcee5f2fac1b7ab4284", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3283e3c696ba6cfe9dbeafcee5f2fac1b7ab4284", "message": "run doc generator", "committedDate": "2020-05-26T13:37:14Z", "type": "commit"}, {"oid": "a9cad3859c1acb20c586ecaa9b890343a63ee05d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a9cad3859c1acb20c586ecaa9b890343a63ee05d", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-26T17:10:01Z", "type": "commit"}, {"oid": "5bed2f7058ee52ab0a02fefb92996ade448cc3d5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5bed2f7058ee52ab0a02fefb92996ade448cc3d5", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-26T17:10:51Z", "type": "commit"}, {"oid": "877ecfef416f48e1eb426ed0e8f5217da1bb67de", "url": "https://github.com/OpenAPITools/openapi-generator/commit/877ecfef416f48e1eb426ed0e8f5217da1bb67de", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-27T02:32:50Z", "type": "commit"}, {"oid": "fba480346f5d3c8ad491597755e7a526bc020903", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fba480346f5d3c8ad491597755e7a526bc020903", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-27T02:33:23Z", "type": "commit"}, {"oid": "8c055f5d01538588d3018a22315e923d3776d81f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8c055f5d01538588d3018a22315e923d3776d81f", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-27T16:23:32Z", "type": "commit"}, {"oid": "d64f42192ca79f6939c69ab6301240f775ed9482", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d64f42192ca79f6939c69ab6301240f775ed9482", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-28T13:40:04Z", "type": "commit"}, {"oid": "408409eef9479d2f0014d1c96e0cec31cb9f32f3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/408409eef9479d2f0014d1c96e0cec31cb9f32f3", "message": "resolve merge conflicts", "committedDate": "2020-05-28T13:43:20Z", "type": "commit"}, {"oid": "65f6cf84c62e0aeb3c1f647eadc43c4deeada770", "url": "https://github.com/OpenAPITools/openapi-generator/commit/65f6cf84c62e0aeb3c1f647eadc43c4deeada770", "message": "fix merge conflicts", "committedDate": "2020-05-28T13:47:13Z", "type": "commit"}, {"oid": "41e97e6d2bd817c39e0ce6593acea8b9b290ddd6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/41e97e6d2bd817c39e0ce6593acea8b9b290ddd6", "message": "Mustache template should use invokerPackage tag to generate import", "committedDate": "2020-05-13T01:57:25Z", "type": "commit"}, {"oid": "1760f6a2af3b67a1cd35d3c92fad53671c44caf2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1760f6a2af3b67a1cd35d3c92fad53671c44caf2", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-13T13:28:59Z", "type": "commit"}, {"oid": "3ae466e772a3277d19b0d213719935155724aab8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3ae466e772a3277d19b0d213719935155724aab8", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-13T16:15:21Z", "type": "commit"}, {"oid": "b628667b1f63d7102e4cf929778053b718aa42d4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b628667b1f63d7102e4cf929778053b718aa42d4", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-13T16:44:21Z", "type": "commit"}, {"oid": "fca81de731bb07e0eaa65ee565374870c54aad1c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fca81de731bb07e0eaa65ee565374870c54aad1c", "message": "Add a unit test for allOf and additionalProperties", "committedDate": "2020-05-13T21:07:56Z", "type": "commit"}, {"oid": "13d865a04f551aa3eb2c76789e2970c2c1eceb0f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/13d865a04f551aa3eb2c76789e2970c2c1eceb0f", "message": "Fix getAdditionalProperties", "committedDate": "2020-05-13T22:10:26Z", "type": "commit"}, {"oid": "eed27dc4105fde10491bd455af790916b0204739", "url": "https://github.com/OpenAPITools/openapi-generator/commit/eed27dc4105fde10491bd455af790916b0204739", "message": "Add code comments", "committedDate": "2020-05-14T05:10:55Z", "type": "commit"}, {"oid": "158ee579ddef524de0bc9067b9ad9feeab42ed78", "url": "https://github.com/OpenAPITools/openapi-generator/commit/158ee579ddef524de0bc9067b9ad9feeab42ed78", "message": "Add code comments", "committedDate": "2020-05-14T05:11:17Z", "type": "commit"}, {"oid": "24fc6c526143b4e6d33705d538de56bab5827042", "url": "https://github.com/OpenAPITools/openapi-generator/commit/24fc6c526143b4e6d33705d538de56bab5827042", "message": "set nullable for additionalproperties", "committedDate": "2020-05-14T05:12:05Z", "type": "commit"}, {"oid": "c47d0972f5cd83da658f630cf1c6801e2e0a6515", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c47d0972f5cd83da658f630cf1c6801e2e0a6515", "message": "add variants of additionalProperties", "committedDate": "2020-05-14T05:12:42Z", "type": "commit"}, {"oid": "4c889510f03e8d2493dbbf0a07203221ca8bdfb0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4c889510f03e8d2493dbbf0a07203221ca8bdfb0", "message": "Add more unit tests", "committedDate": "2020-05-14T05:13:27Z", "type": "commit"}, {"oid": "9b687da90b9d7c0a5aeded43674a9fecdf58c3aa", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9b687da90b9d7c0a5aeded43674a9fecdf58c3aa", "message": "Handle additionalProperties for composed schemas", "committedDate": "2020-05-14T05:27:06Z", "type": "commit"}, {"oid": "4dc915c5972e95473c4733503e8f7d790b0e3556", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4dc915c5972e95473c4733503e8f7d790b0e3556", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-14T14:37:49Z", "type": "commit"}, {"oid": "bc628a436ed8de9fbfeff080be2328bda5b9be3c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bc628a436ed8de9fbfeff080be2328bda5b9be3c", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-14T14:43:41Z", "type": "commit"}, {"oid": "c603f099a8db8e056a8f948e1e8bde957045e93b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c603f099a8db8e056a8f948e1e8bde957045e93b", "message": "improve code comments", "committedDate": "2020-05-14T15:08:22Z", "type": "commit"}, {"oid": "a594a1a0c313ba9d73d60192b8cad4de4e34ff08", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a594a1a0c313ba9d73d60192b8cad4de4e34ff08", "message": "Add code comments", "committedDate": "2020-05-14T15:29:05Z", "type": "commit"}, {"oid": "068b137b33c969c2f8a070745cfbce6851e893f3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/068b137b33c969c2f8a070745cfbce6851e893f3", "message": "Add code comments", "committedDate": "2020-05-14T15:42:35Z", "type": "commit"}, {"oid": "524bd31683f2ca21ce5066323bcabecfcc524eaa", "url": "https://github.com/OpenAPITools/openapi-generator/commit/524bd31683f2ca21ce5066323bcabecfcc524eaa", "message": "Add code comments", "committedDate": "2020-05-14T15:48:15Z", "type": "commit"}, {"oid": "e2e2e0869ced3b0d1d3d5edb4219ab8e86bd251c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e2e2e0869ced3b0d1d3d5edb4219ab8e86bd251c", "message": "Add code comments", "committedDate": "2020-05-14T15:51:30Z", "type": "commit"}, {"oid": "b62ae93b1cb610e20261ee486f2ca761e71260f2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b62ae93b1cb610e20261ee486f2ca761e71260f2", "message": "Add code comments", "committedDate": "2020-05-14T16:05:10Z", "type": "commit"}, {"oid": "c2cadb08b0335d96940fddb70fa297e9f25cd02c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c2cadb08b0335d96940fddb70fa297e9f25cd02c", "message": "Add assertions in unit tests", "committedDate": "2020-05-14T16:13:21Z", "type": "commit"}, {"oid": "62733880dc37140b43bd2f424a927288d715ade3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/62733880dc37140b43bd2f424a927288d715ade3", "message": "Add new property to support the 'additionalProperties' keyword with composed schemas", "committedDate": "2020-05-14T16:46:49Z", "type": "commit"}, {"oid": "f32f9eb4c8052b5360e4e03139867ef304ad04c2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f32f9eb4c8052b5360e4e03139867ef304ad04c2", "message": "run sample scripts", "committedDate": "2020-05-14T16:51:52Z", "type": "commit"}, {"oid": "87f900ff42f575c36aa6f851edba1c7badb03202", "url": "https://github.com/OpenAPITools/openapi-generator/commit/87f900ff42f575c36aa6f851edba1c7badb03202", "message": "fix unit tests to handle additionalProperties", "committedDate": "2020-05-14T17:32:01Z", "type": "commit"}, {"oid": "ed47df0e36add511872d8387b38e767260e8167a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ed47df0e36add511872d8387b38e767260e8167a", "message": "Handle additional properties and composed schema", "committedDate": "2020-05-14T21:02:19Z", "type": "commit"}, {"oid": "80a6f9bdc7b4b11dfd19ee742d5c77fe763dc5b9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/80a6f9bdc7b4b11dfd19ee742d5c77fe763dc5b9", "message": "Handle additional properties and composed schema", "committedDate": "2020-05-14T21:04:37Z", "type": "commit"}, {"oid": "82507564a052d60c719e5199ff35ded6f147c56b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/82507564a052d60c719e5199ff35ded6f147c56b", "message": "Add support for additionalProperties and composed schema", "committedDate": "2020-05-14T22:13:18Z", "type": "commit"}, {"oid": "64723518dcd26fa487430e1a6a655c702019854e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/64723518dcd26fa487430e1a6a655c702019854e", "message": "Format java code", "committedDate": "2020-05-14T22:25:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425466298", "bodyText": "@spacether , can you comment on:\n\nIn Python-experimental, what is the use case for modeling additionalProperties as a parent container? What is the purpose of calling addParentContainer()? I don't understand the use case.\n\nIf I comment out the call to addParentContainer(), nothing changes in the generated output of ./bin/openapi3/python-experimental-petstore.sh and ./openapi3/python-experimental-petstore.sh\n\n\nI am guessing the intent was addParentContainer should be called only when additionalProperties is a reference. It should not be called if additionalProperties: false. Right? I.e. if addProps is null, addParentContainer() should not be called.\nDoes it really matter if the additionalProperties are defined inline versus as a $ref? Shouldn't we set codegenModel.additionalPropertiesType in both cases? Or do we really need to model a $ref additionalProperties as a parent?", "author": "sebastien-rosset", "createdAt": "2020-05-14T22:29:10Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "originalCommit": "64723518dcd26fa487430e1a6a655c702019854e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ3NjYyMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425476621", "bodyText": "So I'm not sure what benefit we get from calling addParentContainer. It looks like I copied and pasted that code from DefaultCodegen at:\n\n  \n    \n      openapi-generator/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java\n    \n    \n         Line 2796\n      in\n      dc1bdac\n    \n    \n    \n    \n\n        \n          \n           protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) { \n        \n    \n  \n\n\n\n\n\nThe way I read that code is that if additional properties exist, we call the if block.\nIf they don't call the else block. And the else block code is consistent with what the DefaultCodegen does in its own addAdditionPropertiesToCodeGenModel method.\n\n\nPer my #1 interpretation addParentContainer would be called if additionalProperties is false. It would also be called if additionalProperties is null.\n\n\nI don't think that it should matter if additionalProperties is inline or a $ref. Doesn't the code that we have work for both cases?", "author": "spacether", "createdAt": "2020-05-14T23:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4MTE1Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425481152", "bodyText": "v2.0 points us to the https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md JSON schema Draft 4 definition, and OpenAPI does not tell us a default value.\nPer here it sounds like an omitted additionalProperties should be an empty schema.\nv3.0.0 points us to the https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md JSON Schema Specification Wright Draft 00 definition, and OpenAPI does not tell us a default value.\nWright Draft 00 mentions\nIf \"additionalProperties\" is absent, it may be considered present with an empty schema as a value.\nbut that's a MAY not a MUST or SHALL. I can see us setting it to {} if omitted for v3.0.0 specs based on this.\nv3.0.3 explicitly says that it defaults to true here: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md\nSo it looks like in all of these examples the additionalProperties value should not be null before it gets here, it should be empty schema or True, do you agree?", "author": "spacether", "createdAt": "2020-05-14T23:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NDM3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425484378", "bodyText": "I think the default is always specified regardless of the version, because of the following text in the OAS specs:\n\nThe following properties are taken from the JSON Schema definition but their definitions were adjusted to the OpenAPI Specification.\nadditionalProperties - Value can be boolean or object. Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.\n\nNote OAS 2.0 is not exactly the same language as OAS 3.0, but they both mean the additionalProperties keyword is specified in the JSON schema validation draft.\nHence whatever is specified in JSON schema validation is applicable to OAS. Each OAS version is referring to a different version of the JSON drafts, but they all seem to have the same default behavior.\nSpecifically from https://tools.ietf.org/html/draft-wright-json-schema-validation-00#page-10:\n\nIf \"additionalProperties\" is absent, it may be considered present with an empty schema as a value.\n\nWhich means the values can be anything. So I don't think there is any version dependency.", "author": "sebastien-rosset", "createdAt": "2020-05-14T23:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NTkxMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425485913", "bodyText": "BTW, this sentence in 3.0.3 is superfluous: \"Consistent with JSON Schema, additionalProperties defaults to true.\"  It's already defined in the JSON core/validation specs, hence it should not be repeated in OAS.\nIn fact in OAS 3.1, it was completely removed because the goal of the technical committee is for OAS to be a superset of JSON schema, i.e. supporting all JSON schema constructs as is, without the need to rephrase the JSON specification inside the OAS spec.", "author": "sebastien-rosset", "createdAt": "2020-05-14T23:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NjM3OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425486379", "bodyText": "The way I read that code is that if additional properties exist, we call the if block.\nIf they don't call the else block. And the else block code is consistent with what the DefaultCodegen does in its own addAdditionPropertiesToCodeGenModel method.\n\nok, let me try to refactor that code a bit so that it works the same whether it's a reference or not. I will add a unit test too to exercise the code.", "author": "sebastien-rosset", "createdAt": "2020-05-14T23:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzMDY5MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425930690", "bodyText": "Unfortunately, I found out the OpenAPI parser for a V2 document sets Schema.additionalProperties to the null value even when the OAS document has additionalProperties: true|false\nSo I need to add some logic that if the doc is version 2, then assume the old behavior, because we don't know if additionalProperties should be true or false. This seems to be a bug in the parser.", "author": "sebastien-rosset", "createdAt": "2020-05-15T16:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2MjY2Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425962666", "bodyText": "What if you added the CLI flag supportsAdditionalProperties\nAnd if the generator has it turned on, postprocess the spec to correctly set additionalProperties to {} if the input is null\nOr should that not be done, or be done in another PR?\nJust now I made this additionalProperties issue in swagger-parser to track it in that project", "author": "spacether", "createdAt": "2020-05-15T18:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MTcxNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426951714", "bodyText": "I am adding a legacyAdditionalPropertiesBehavior CLI flag.", "author": "sebastien-rosset", "createdAt": "2020-05-18T23:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "5f428a4b5829f7ba7a41475083b7d55bef28304d", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex 9d3dde5056c..470849ce571 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -971,17 +1007,19 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n-        Schema addProps = ModelUtils.getAdditionalProperties(schema);\n+        Schema addProps = getAdditionalProperties(schema);\n         if (addProps != null) {\n-            if (addProps.get$ref() == null) {\n-                // if AdditionalProperties exists and is an inline definition, get its datatype and\n-                // store it in codegenModel.additionalPropertiesType.\n-                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n-            } else {\n-                addParentContainer(codegenModel, codegenModel.name, schema);\n+            // if AdditionalProperties exists, get its datatype and\n+            // store it in codegenModel.additionalPropertiesType.\n+            // The 'addProps' may be a reference, getTypeDeclaration will resolve\n+            // the reference.\n+            List<String> referencedModelNames = new ArrayList<String>();\n+            codegenModel.additionalPropertiesType = getTypeString(addProps, \"\", \"\", referencedModelNames);\n+            if (referencedModelNames.size() != 0) {\n+                codegenModel.vendorExtensions.put(referencedModelNamesExtension, referencedModelNames);\n             }\n         }\n-        // If addProps is null, that means the value of the 'additionalProperties' keyword is set\n+        // If addProps is null, the value of the 'additionalProperties' keyword is set\n         // to false, i.e. no additional properties are allowed.\n     }\n \n"}}, {"oid": "e158fef4a814f1f404c9c1bac76dda08490f3eae", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e158fef4a814f1f404c9c1bac76dda08490f3eae", "message": "Add more unit tests for Python", "committedDate": "2020-05-14T23:02:55Z", "type": "commit"}, {"oid": "250dd7cd6a82848189eb5a964977dac5bc8853d1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/250dd7cd6a82848189eb5a964977dac5bc8853d1", "message": "Handle reference in additionalProperty keyword", "committedDate": "2020-05-15T00:32:29Z", "type": "commit"}, {"oid": "6b4fa1fd9a59d4c70deda65ba57ed7204f9b1d32", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6b4fa1fd9a59d4c70deda65ba57ed7204f9b1d32", "message": "Handle reference in additionalProperty keyword", "committedDate": "2020-05-15T00:32:38Z", "type": "commit"}, {"oid": "3b2261bc0deb3cc611c471f9714961efc173a19a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3b2261bc0deb3cc611c471f9714961efc173a19a", "message": "Add use case for additionalProperties and reference", "committedDate": "2020-05-15T00:33:06Z", "type": "commit"}, {"oid": "b8b6d221aabab0c3db5b85c5f6400a645a60f834", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b8b6d221aabab0c3db5b85c5f6400a645a60f834", "message": "run sample scripts", "committedDate": "2020-05-15T14:52:57Z", "type": "commit"}, {"oid": "66ec230f74d25a22e49734e06bb39fbc7c18cfc6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/66ec230f74d25a22e49734e06bb39fbc7c18cfc6", "message": "resolve schema reference", "committedDate": "2020-05-15T14:53:49Z", "type": "commit"}, {"oid": "594332a6fc70c8320ac57cab35deab7d7bf44fa8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/594332a6fc70c8320ac57cab35deab7d7bf44fa8", "message": "Add OpenAPI argument", "committedDate": "2020-05-15T18:12:44Z", "type": "commit"}, {"oid": "12c55cab66977394f144b35b0d300b8f9310e0f8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/12c55cab66977394f144b35b0d300b8f9310e0f8", "message": "Add OpenAPI argument", "committedDate": "2020-05-15T18:13:21Z", "type": "commit"}, {"oid": "b0b198a8ed3c1d281fa42fb604f40f5c33bbdac2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b0b198a8ed3c1d281fa42fb604f40f5c33bbdac2", "message": "Add OpenAPI argument", "committedDate": "2020-05-15T18:14:07Z", "type": "commit"}, {"oid": "628520d636588208bc2d1caa39dd7e9505d9e97c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/628520d636588208bc2d1caa39dd7e9505d9e97c", "message": "Add OpenAPI argument", "committedDate": "2020-05-15T18:14:26Z", "type": "commit"}, {"oid": "fa07164010cac1dbb964e67082e55b5ef2a4522e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fa07164010cac1dbb964e67082e55b5ef2a4522e", "message": "Add OpenAPI argument", "committedDate": "2020-05-15T18:14:44Z", "type": "commit"}, {"oid": "d45636bff706df8f728258e7f628f4c2663eebb4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d45636bff706df8f728258e7f628f4c2663eebb4", "message": "Handle additional property keyword with reference", "committedDate": "2020-05-16T01:35:32Z", "type": "commit"}, {"oid": "8a1c42530e414b36e91ec6329d77f9828fab4349", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8a1c42530e414b36e91ec6329d77f9828fab4349", "message": "Handle additional property keyword with reference", "committedDate": "2020-05-16T01:35:54Z", "type": "commit"}, {"oid": "ed36b759063b2b9a98050c3b16d1b4957f41fed4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ed36b759063b2b9a98050c3b16d1b4957f41fed4", "message": "Handle additional property keyword with reference", "committedDate": "2020-05-16T01:36:15Z", "type": "commit"}, {"oid": "230c2b8f948f095e9cdb65b47c86bcf5196c687c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/230c2b8f948f095e9cdb65b47c86bcf5196c687c", "message": "Handle additional property keyword with reference", "committedDate": "2020-05-16T01:36:39Z", "type": "commit"}, {"oid": "726d47eab53dadda3f427a11653b8b458b14f9cb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/726d47eab53dadda3f427a11653b8b458b14f9cb", "message": "add additionalproperties attribute with boolean values", "committedDate": "2020-05-16T01:40:46Z", "type": "commit"}, {"oid": "a67cc80ce4e6bb6de6f95841c3b9a8367e96dfc7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a67cc80ce4e6bb6de6f95841c3b9a8367e96dfc7", "message": "Run sample scripts", "committedDate": "2020-05-16T01:43:58Z", "type": "commit"}, {"oid": "7a207f674a8cceebb74a47b8c8474781467b6572", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7a207f674a8cceebb74a47b8c8474781467b6572", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-16T04:29:37Z", "type": "commit"}, {"oid": "c729225a81c58038c1e776ba5acada7f2f3d1d30", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c729225a81c58038c1e776ba5acada7f2f3d1d30", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-16T04:30:00Z", "type": "commit"}, {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b", "message": "handle additional properties", "committedDate": "2020-05-16T04:32:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExODQ5Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426118492", "bodyText": "Should we handle this in a preprocessor before a v2 spec is converted to v3?", "author": "spacether", "createdAt": "2020-05-16T04:52:35Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1080,12 +1080,55 @@ public static Schema unaliasSchema(OpenAPI openAPI,\n         return schema;\n     }\n \n-    public static Schema getAdditionalProperties(Schema schema) {\n-        if (schema.getAdditionalProperties() instanceof Schema) {\n-            return (Schema) schema.getAdditionalProperties();\n+    /**\n+     * Returns the additionalProperties Schema for the specified input schema.\n+     * \n+     * The additionalProperties keyword is used to control the handling of additional, undeclared\n+     * properties, that is, properties whose names are not listed in the properties keyword.\n+     * The additionalProperties keyword may be either a boolean or an object.\n+     * If additionalProperties is a boolean and set to false, no additional properties are allowed.\n+     * By default when the additionalProperties keyword is not specified in the input schema,\n+     * any additional properties are allowed. This is equivalent to setting additionalProperties\n+     * to the boolean value True or setting additionalProperties: {}\n+     * \n+     * @param openAPI the object that encapsulates the OAS document.\n+     * @param schema the input schema that may or may not have the additionalProperties keyword.\n+     * @return the Schema of the additionalProperties. The null value is returned if no additional\n+     *         properties are allowed.\n+     */\n+    public static Schema getAdditionalProperties(OpenAPI openAPI, Schema schema) {\n+        Object addProps = schema.getAdditionalProperties();\n+        if (addProps instanceof Schema) {\n+            return (Schema) addProps;\n+        }\n+        if (addProps == null) {\n+            Map<String, Object> extensions = openAPI.getExtensions();\n+            if (extensions != null) {\n+                // Get original swagger version from OAS extension.\n+                // Note openAPI.getOpenapi() is always set to 3.x even when the document\n+                // is converted from a OAS/Swagger 2.0 document.\n+                // https://github.com/swagger-api/swagger-parser/pull/1374\n+                Object ext = extensions.get(\"x-original-swagger-version\");\n+                if (ext instanceof String) {\n+                    SemVer version = new SemVer((String)ext);\n+                    if (version.major == 2) {\n+                        // The OAS version 2 parser sets Schema.additionalProperties to the null value\n+                        // even if the OAS document has additionalProperties: true|false\n+                        // So we are unable to determine if additional properties are allowed or not.", "originalCommit": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1OTAwNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426759007", "bodyText": "This is fine handling for our current use case.\nIt looks like you are working on a 2.0 fix here in swagger-parser", "author": "spacether", "createdAt": "2020-05-18T16:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExODQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5f428a4b5829f7ba7a41475083b7d55bef28304d", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\nindex 471b6764c7d..d66947dc107 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\n\n@@ -1080,6 +988,80 @@ public class ModelUtils {\n         return schema;\n     }\n \n+    /**\n+     * Check to see if the schema is a free form object.\n+     *\n+     * A free form object is an object (i.e. 'type: object' in a OAS document) that:\n+     * 1) Does not define properties, and\n+     * 2) Is not a composed schema (no anyOf, oneOf, allOf), and\n+     * 3) additionalproperties is not defined, or additionalproperties: true, or additionalproperties: {}.\n+     *\n+     * Examples:\n+     *\n+     * components:\n+     *   schemas:\n+     *     arbitraryObject:\n+     *       type: object\n+     *       description: This is a free-form object.\n+     *         The value must be a map of strings to values. The value cannot be 'null'.\n+     *         It cannot be array, string, integer, number.\n+     *     arbitraryNullableObject:\n+     *       type: object\n+     *       description: This is a free-form object.\n+     *         The value must be a map of strings to values. The value can be 'null',\n+     *         It cannot be array, string, integer, number.\n+     *       nullable: true\n+     *     arbitraryTypeValue:\n+     *       description: This is NOT a free-form object.\n+     *         The value can be any type except the 'null' value.\n+     *\n+     * @param openAPI the object that encapsulates the OAS document.\n+     * @param schema potentially containing a '$ref'\n+     * @return true if it's a free-form object\n+     */\n+    public static boolean isFreeFormObject(OpenAPI openAPI, Schema schema) {\n+        if (schema == null) {\n+            // TODO: Is this message necessary? A null schema is not a free-form object, so the result is correct.\n+            once(LOGGER).error(\"Schema cannot be null in isFreeFormObject check\");\n+            return false;\n+        }\n+\n+        // not free-form if allOf, anyOf, oneOf is not empty\n+        if (schema instanceof ComposedSchema) {\n+            ComposedSchema cs = (ComposedSchema) schema;\n+            List<Schema> interfaces = ModelUtils.getInterfaces(cs);\n+            if (interfaces != null && !interfaces.isEmpty()) {\n+                return false;\n+            }\n+        }\n+\n+        // has at least one property\n+        if (\"object\".equals(schema.getType())) {\n+            // no properties\n+            if ((schema.getProperties() == null || schema.getProperties().isEmpty())) {\n+                Schema addlProps = getAdditionalProperties(openAPI, schema);\n+                // additionalProperties not defined\n+                if (addlProps == null) {\n+                    return true;\n+                } else {\n+                    if (addlProps instanceof ObjectSchema) {\n+                        ObjectSchema objSchema = (ObjectSchema) addlProps;\n+                        // additionalProperties defined as {}\n+                        if (objSchema.getProperties() == null || objSchema.getProperties().isEmpty()) {\n+                            return true;\n+                        }\n+                    } else if (addlProps instanceof Schema) {\n+                        // additionalProperties defined as {}\n+                        if (addlProps.getType() == null && (addlProps.getProperties() == null || addlProps.getProperties().isEmpty())) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n     /**\n      * Returns the additionalProperties Schema for the specified input schema.\n      * \n"}}, {"oid": "776fba674a32e37709670a94a5a390f75c6d1e1a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/776fba674a32e37709670a94a5a390f75c6d1e1a", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-18T16:11:47Z", "type": "commit"}, {"oid": "7773c48d0ea78dc7883fda9175600ad790f157fe", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7773c48d0ea78dc7883fda9175600ad790f157fe", "message": "resolve merge conflicts", "committedDate": "2020-05-18T16:13:52Z", "type": "commit"}, {"oid": "70f6207f6d7ceb75f47f8f6f2a768b568af46fa7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/70f6207f6d7ceb75f47f8f6f2a768b568af46fa7", "message": "Handle additionalProperties boolean values", "committedDate": "2020-05-18T23:45:30Z", "type": "commit"}, {"oid": "c4d049f26d0086b0331435b097f6fdb2deca54c0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c4d049f26d0086b0331435b097f6fdb2deca54c0", "message": "Run sample scripts", "committedDate": "2020-05-19T01:27:59Z", "type": "commit"}, {"oid": "98e862abc3f3a0fceed4720c09c2300182054b01", "url": "https://github.com/OpenAPITools/openapi-generator/commit/98e862abc3f3a0fceed4720c09c2300182054b01", "message": "fix javadoc issues", "committedDate": "2020-05-19T04:28:29Z", "type": "commit"}, {"oid": "86d6733f1d24229e1cc82b0a0a812a83acbf739f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/86d6733f1d24229e1cc82b0a0a812a83acbf739f", "message": "fix javadoc issues", "committedDate": "2020-05-19T04:33:14Z", "type": "commit"}, {"oid": "1f51fb030dc53f0c55a345ecb8a8d45848759b7d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1f51fb030dc53f0c55a345ecb8a8d45848759b7d", "message": "Add Locale to String.toLowerCase", "committedDate": "2020-05-19T04:42:28Z", "type": "commit"}, {"oid": "886d41209f384ba82455686cfa74e941640cd019", "url": "https://github.com/OpenAPITools/openapi-generator/commit/886d41209f384ba82455686cfa74e941640cd019", "message": "execute sample scripts", "committedDate": "2020-05-19T05:32:04Z", "type": "commit"}, {"oid": "4bdf1114144164cfa95eb1bc140d21f54f0883fb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4bdf1114144164cfa95eb1bc140d21f54f0883fb", "message": "handle additional properties", "committedDate": "2020-05-19T15:17:40Z", "type": "commit"}, {"oid": "3fac4347d19f6e1d80083487a5ec69dd4358428e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3fac4347d19f6e1d80083487a5ec69dd4358428e", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-19T15:25:28Z", "type": "commit"}, {"oid": "45bf56508291cfa881e7d8b1a7cd014ff15ebfac", "url": "https://github.com/OpenAPITools/openapi-generator/commit/45bf56508291cfa881e7d8b1a7cd014ff15ebfac", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-19T15:26:02Z", "type": "commit"}, {"oid": "b05b4150b8c7e99d34bb6c6658a5da400ff2bac9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b05b4150b8c7e99d34bb6c6658a5da400ff2bac9", "message": "Add code comments", "committedDate": "2020-05-19T17:34:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTE2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427525163", "bodyText": "@spacether , here the model type is set in the codegenModel.additionalPropertiesType property, assigned by the addAdditionPropertiesToCodeGenModel() function. I need to add that type to the imports, otherwise Python cannot lookup the type.", "author": "sebastien-rosset", "createdAt": "2020-05-19T18:49:29Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -907,18 +909,27 @@ private String getTypeString(Schema p, String prefix, String suffix) {\n         if (\")\".equals(suffix)) {\n             fullSuffix = \",\" + suffix;\n         }\n-        if (ModelUtils.isAnyTypeSchema(p)) {\n+        if (StringUtils.isNotEmpty(p.get$ref())) {\n+            // The input schema is a reference. If the resolved schema is\n+            // a composed schema, convert the name to a Python class.\n+            Schema s = ModelUtils.getReferencedSchema(this.openAPI, p);\n+            if (s instanceof ComposedSchema) {\n+                String modelName = ModelUtils.getSimpleRef(p.get$ref());\n+                return prefix + toModelName(modelName) + fullSuffix;", "originalCommit": "b05b4150b8c7e99d34bb6c6658a5da400ff2bac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MDY1OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427590659", "bodyText": "Fixed in f57338d", "author": "sebastien-rosset", "createdAt": "2020-05-19T20:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5f428a4b5829f7ba7a41475083b7d55bef28304d", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex 085bd92aca6..470849ce571 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -901,9 +923,11 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n      * @param p The OAS schema.\n      * @param prefix prepended to the returned value.\n      * @param suffix appended to the returned value.\n+     * @param referencedModelNames a list of models that are being referenced while generating the types,\n+     *          may be used to generate imports.\n      * @return a comma-separated string representation of the Python types\n      */\n-    private String getTypeString(Schema p, String prefix, String suffix) {\n+    private String getTypeString(Schema p, String prefix, String suffix, List<String> referencedModelNames) {\n         // this is used to set dataType, which defines a python tuple of classes\n         String fullSuffix = suffix;\n         if (\")\".equals(suffix)) {\n"}}, {"oid": "f57338d2110e0694dec7c0e07c9966c914c74359", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f57338d2110e0694dec7c0e07c9966c914c74359", "message": "Handle imports of referenced models in additional properties", "committedDate": "2020-05-19T20:34:51Z", "type": "commit"}, {"oid": "be49ab4b3f75b2861c46a87e79ae9fe98affd0fa", "url": "https://github.com/OpenAPITools/openapi-generator/commit/be49ab4b3f75b2861c46a87e79ae9fe98affd0fa", "message": "Handle isNullable class", "committedDate": "2020-05-19T22:43:39Z", "type": "commit"}, {"oid": "faecafdf61dbcb04be46c7e72087106aca9b4ee3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/faecafdf61dbcb04be46c7e72087106aca9b4ee3", "message": "handle nullable type", "committedDate": "2020-05-20T00:17:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427691897", "bodyText": "This description is confusing to me. We are describing it as legacyAdditionalPropertiesBehavior.\nSo it sounds like True mean s use legacy behavior.\nBut then in our definition we say true is spec compliant behavior\nFalse is legacy non-compliant behavior here.\nHow about instead naming this something like:\n\nNULLABLE_ADDITIONAL_PROPERTIES_BEHAVIOR\nCOMPLIANT_ADDITIONAL_PROPERTIES_BEHAVIOR\nor keeping it:\nLEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR\nbut have True be non-compliant legacy behavior, and False be compliant behavior\n\nAlso, what generator sets this to True?\nI don't see that happening outside fo the tests. Did I miss it?", "author": "spacether", "createdAt": "2020-05-20T01:32:22Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java", "diffHunk": "@@ -359,4 +359,18 @@\n     public static final String USE_SINGLE_REQUEST_PARAMETER = \"useSingleRequestParameter\";\n     public static final String USE_SINGLE_REQUEST_PARAMETER_DESC = \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter.\";\n \n+    // The reason this parameter exists is because there is a dependency\n+    // on swagger-api/swagger-parser issue https://github.com/swagger-api/swagger-parser/issues/1369.\n+    // When that issue is resolved, this parameter should be removed.\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR = \"legacyAdditionalPropertiesBehavior\";\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR_DESC =\n+        \"If true, the 'additionalProperties' keyword is implemented as specified in the OAS and JSON schema specifications. \" +\n+        \"Full compliance currently works with OAS 3.0 documents only. \" +\n+        \"It is not supported for 2.0 documents until issues #1369 and #1371 have been resolved in the dependent swagger-parser project. \" +\n+        \"If false, codegen uses a legacy, non-compliant interpretation of the 'additionalProperties' keyword. \" +", "originalCommit": "faecafdf61dbcb04be46c7e72087106aca9b4ee3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NTIwNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427695206", "bodyText": "Good catch, I inadvertently swapped the values.", "author": "sebastien-rosset", "createdAt": "2020-05-20T01:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNTI2Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427705266", "bodyText": "Improved documentation. I don't think it's necessary to change the name based on the improved documentation.", "author": "sebastien-rosset", "createdAt": "2020-05-20T02:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNjA0MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427706041", "bodyText": "The default value is set at https://github.com/OpenAPITools/openapi-generator/pull/6290/files#diff-7cb46fa53f89a458a7b7cb201d2214a8R1511", "author": "sebastien-rosset", "createdAt": "2020-05-20T02:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5f428a4b5829f7ba7a41475083b7d55bef28304d", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java\nindex 575d4464a21..fded4a05766 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java\n\n@@ -359,18 +359,20 @@ public class CodegenConstants {\n     public static final String USE_SINGLE_REQUEST_PARAMETER = \"useSingleRequestParameter\";\n     public static final String USE_SINGLE_REQUEST_PARAMETER_DESC = \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter.\";\n \n-    // The reason this parameter exists is because there is a dependency\n-    // on swagger-api/swagger-parser issue https://github.com/swagger-api/swagger-parser/issues/1369.\n-    // When that issue is resolved, this parameter should be removed.\n-    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR = \"legacyAdditionalPropertiesBehavior\";\n-    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR_DESC =\n-        \"If true, the 'additionalProperties' keyword is implemented as specified in the OAS and JSON schema specifications. \" +\n-        \"Full compliance currently works with OAS 3.0 documents only. \" +\n-        \"It is not supported for 2.0 documents until issues #1369 and #1371 have been resolved in the dependent swagger-parser project. \" +\n-        \"If false, codegen uses a legacy, non-compliant interpretation of the 'additionalProperties' keyword. \" +\n-        \"In the non-compliant mode, codegen uses the following interpretation: \" +\n-        \"1) In a OpenAPI 2.0 document, boolean values of the 'additionalProperties' keyword are ignored.\" +\n-        \"2) In a OpenAPI 3.x document, the non-compliance is when the 'additionalProperties' keyword is not present in a schema. \" +\n-        \"If the 'additionalProperties' keyword is not present in a schema, it is interpreted as if additionalProperties had been set to false, i.e. no additional properties are allowed.\";\n+    public static final String DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT = \"disallowAdditionalPropertiesIfNotPresent\";\n+    public static final String DISALLOW_ADDITIONAL_PROPERTIES_IF_NOT_PRESENT_DESC =\n+        \"Specify the behavior when the 'additionalProperties' keyword is not present in the OAS document\\n\" +\n+        \n+        \"If false: the 'additionalProperties' implementation is compliant with the OAS and JSON schema specifications. \" +\n+\n+        \"If true: when the 'additionalProperties' keyword is not present in a schema, \" +\n+        \"the value of 'additionalProperties' is set to false, i.e. no additional properties are allowed. \" +\n+        \"Note: this mode is not compliant with the JSON schema specification. \" +\n+        \"This is the original openapi-generator behavior.\" +\n+\n+        \"This setting is currently ignored for OAS 2.0 documents: \" +\n+        \" 1) When the 'additionalProperties' keyword is not present in a 2.0 schema, additional properties are NOT allowed. \" +\n+        \" 2) Boolean values of the 'additionalProperties' keyword are ignored. It's as if additional properties are NOT allowed.\" +\n+        \"Note: the root cause are issues #1369 and #1371, which must be resolved in the swagger-parser project.\";\n \n }\n"}}, {"oid": "cbfa01857ef4ff5b775360402695a5338dd088b3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cbfa01857ef4ff5b775360402695a5338dd088b3", "message": "improve documentation, run sample scripts", "committedDate": "2020-05-20T02:21:11Z", "type": "commit"}, {"oid": "45959d85ae919e2e063eff0352300fdf12a44595", "url": "https://github.com/OpenAPITools/openapi-generator/commit/45959d85ae919e2e063eff0352300fdf12a44595", "message": "improve documentation, run sample scripts", "committedDate": "2020-05-20T02:24:54Z", "type": "commit"}, {"oid": "1cc405c9858b7478976fcf963070907d905c32be", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1cc405c9858b7478976fcf963070907d905c32be", "message": "execute sample scripts", "committedDate": "2020-05-20T13:15:28Z", "type": "commit"}, {"oid": "f55c2f0dc705348f0deeacc6cdaa89ea6b94b0f5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f55c2f0dc705348f0deeacc6cdaa89ea6b94b0f5", "message": "execute sample scripts", "committedDate": "2020-05-20T13:19:46Z", "type": "commit"}, {"oid": "a96c46b93f34b825763df703150c3611ddd5b625", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a96c46b93f34b825763df703150c3611ddd5b625", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-05-20T13:30:30Z", "type": "commit"}, {"oid": "eeb6ed082f0401b2b500d1c6ac5e616a5bf39ce6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/eeb6ed082f0401b2b500d1c6ac5e616a5bf39ce6", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into all-of-additional-properties", "committedDate": "2020-05-20T13:30:56Z", "type": "commit"}, {"oid": "c41d5fc7278fa3ff320fa16f9ffa888343018e69", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c41d5fc7278fa3ff320fa16f9ffa888343018e69", "message": "Execute sample scripts", "committedDate": "2020-05-20T16:28:39Z", "type": "commit"}, {"oid": "2cb7acd6c1c82a368f23206739dd33324d185402", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2cb7acd6c1c82a368f23206739dd33324d185402", "message": "Run samples scripts", "committedDate": "2020-05-20T16:33:40Z", "type": "commit"}, {"oid": "ddbb667407e02e40064492b0947d8d6e68cec673", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ddbb667407e02e40064492b0947d8d6e68cec673", "message": "set legacyAdditionalPropertiesBehavior to true by default, except python", "committedDate": "2020-05-20T21:05:41Z", "type": "commit"}, {"oid": "f12663a61616db4287e2151c47cec4148e274769", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f12663a61616db4287e2151c47cec4148e274769", "message": "create separate yaml file to avoid having lots of changes in the pr", "committedDate": "2020-05-20T21:30:16Z", "type": "commit"}, {"oid": "88dd98fe22117a8787365e3eb5b156641f7dad18", "url": "https://github.com/OpenAPITools/openapi-generator/commit/88dd98fe22117a8787365e3eb5b156641f7dad18", "message": "create separate yaml file to avoid having lots of changes in the pr", "committedDate": "2020-05-20T21:38:16Z", "type": "commit"}, {"oid": "782bdf6ccbaf835d003ed30e12c97c25a4e250d8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/782bdf6ccbaf835d003ed30e12c97c25a4e250d8", "message": "create separate yaml file to avoid having lots of changes in the pr", "committedDate": "2020-05-20T22:02:42Z", "type": "commit"}, {"oid": "58d38c25cc839ee94526a3bc4b4047bf2b0951b0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/58d38c25cc839ee94526a3bc4b4047bf2b0951b0", "message": "create separate yaml file to avoid having lots of changes in the pr", "committedDate": "2020-05-20T22:04:44Z", "type": "commit"}, {"oid": "4be1ef93ab1ac26f722500b210ddd34a4395db8a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4be1ef93ab1ac26f722500b210ddd34a4395db8a", "message": "create separate yaml file to avoid having lots of changes in the pr", "committedDate": "2020-05-20T22:07:24Z", "type": "commit"}, {"oid": "9fd0685dc0ec5c2d1c138bf6eec08c9ae450813a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9fd0685dc0ec5c2d1c138bf6eec08c9ae450813a", "message": "create separate yaml file to avoid having lots of changes in the pr", "committedDate": "2020-05-20T22:10:23Z", "type": "commit"}, {"oid": "ac278121f25798eb7a6976e488c3a9c3ff04804f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ac278121f25798eb7a6976e488c3a9c3ff04804f", "message": "Change name of CLI option", "committedDate": "2020-05-21T02:05:39Z", "type": "commit"}, {"oid": "d9518f1e814db5f72d7d764f198d99ae8ea69ef5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d9518f1e814db5f72d7d764f198d99ae8ea69ef5", "message": "Generate doc", "committedDate": "2020-05-21T02:09:08Z", "type": "commit"}, {"oid": "79e5ecf7edb7fa4eaf430577e5ef906e4a06c8b9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/79e5ecf7edb7fa4eaf430577e5ef906e4a06c8b9", "message": "Add TODO statement", "committedDate": "2020-05-21T02:16:55Z", "type": "commit"}, {"oid": "34740a1553e0dd3f9d10a0764641dff87bd0916c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/34740a1553e0dd3f9d10a0764641dff87bd0916c", "message": "add code comments", "committedDate": "2020-05-21T02:30:37Z", "type": "commit"}, {"oid": "598b0e489c516bd775a2585a9dc89a2ce0137ebc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/598b0e489c516bd775a2585a9dc89a2ce0137ebc", "message": "run samples scripts", "committedDate": "2020-05-21T03:21:22Z", "type": "commit"}, {"oid": "8d93337187059bf06ae66984aec7f47112b60957", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8d93337187059bf06ae66984aec7f47112b60957", "message": "run sample scripts", "committedDate": "2020-05-21T03:43:07Z", "type": "commit"}, {"oid": "7195e03be7ca6351e14746b8352615f628b80fc2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7195e03be7ca6351e14746b8352615f628b80fc2", "message": "run sample scripts", "committedDate": "2020-05-21T03:45:56Z", "type": "commit"}, {"oid": "9212c85a7642527ae4385bc78ec3d6b6a4601d64", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9212c85a7642527ae4385bc78ec3d6b6a4601d64", "message": "run sample scripts", "committedDate": "2020-05-21T03:47:56Z", "type": "commit"}, {"oid": "cc80080e232460c1ee309dbf993101963725e6df", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cc80080e232460c1ee309dbf993101963725e6df", "message": "run sample scripts", "committedDate": "2020-05-21T03:50:15Z", "type": "commit"}, {"oid": "3604c95c164bcb116061c0c28e85d9b0540e12e2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3604c95c164bcb116061c0c28e85d9b0540e12e2", "message": "run sample scripts", "committedDate": "2020-05-21T03:53:37Z", "type": "commit"}, {"oid": "dee6dc4901ef3542d1c2c63a753fb6c5f46f3402", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dee6dc4901ef3542d1c2c63a753fb6c5f46f3402", "message": "run sample scripts", "committedDate": "2020-05-21T03:55:02Z", "type": "commit"}, {"oid": "0b6797466de507cec4f10169c9911dc76016eb5b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0b6797466de507cec4f10169c9911dc76016eb5b", "message": "run sample scripts", "committedDate": "2020-05-21T03:57:14Z", "type": "commit"}, {"oid": "22777e7e7cd274f05cf577376ecc8e6080838401", "url": "https://github.com/OpenAPITools/openapi-generator/commit/22777e7e7cd274f05cf577376ecc8e6080838401", "message": "run sample scripts", "committedDate": "2020-05-21T04:02:25Z", "type": "commit"}, {"oid": "a389e185b834933cccc880f061bee33ca2369d17", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a389e185b834933cccc880f061bee33ca2369d17", "message": "run sample scripts", "committedDate": "2020-05-21T04:03:31Z", "type": "commit"}]}