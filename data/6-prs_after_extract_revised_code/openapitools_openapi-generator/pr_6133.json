{"pr_number": 6133, "pr_title": "[python-experimental] Make the array items attribute optional", "pr_createdAt": "2020-05-01T20:14:31Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6133", "timeline": [{"oid": "c875c245ce9c426ba3a0cfcd304d4d77df8e2270", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c875c245ce9c426ba3a0cfcd304d4d77df8e2270", "message": "Make the array items optional", "committedDate": "2020-05-01T20:13:45Z", "type": "commit"}, {"oid": "b5fe1d1ab141832b92690427a40b69a5b2db1237", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b5fe1d1ab141832b92690427a40b69a5b2db1237", "message": "Handle any type schema", "committedDate": "2020-05-02T01:01:24Z", "type": "commit"}, {"oid": "f0c905999831ad040c29ae8832d44634eca89ece", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f0c905999831ad040c29ae8832d44634eca89ece", "message": "Handle any type schema", "committedDate": "2020-05-02T01:02:19Z", "type": "commit"}, {"oid": "48a5ce9a78c12b458fd262be831d764d4b8321f1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/48a5ce9a78c12b458fd262be831d764d4b8321f1", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into python-array-item-is-optional", "committedDate": "2020-05-03T21:08:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNTE0MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r419405140", "bodyText": "@sebastien-rosset I don't think we need prefix and fullSuffix here. These are for models only (e.g. Pet => MyPetV3). Same for line 901.", "author": "wing328", "createdAt": "2020-05-04T12:40:44Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -910,7 +913,15 @@ public String getTypeString(Schema p, String prefix, String suffix) {\n         } else if (ModelUtils.isArraySchema(p)) {\n             ArraySchema ap = (ArraySchema) p;\n             Schema inner = ap.getItems();\n-            return prefix + \"[\" + getTypeString(inner, \"\", \"\") + \"]\" + fullSuffix;\n+            if (inner == null) {\n+                // In OAS 3.0.x, the array \"items\" attribute is required.\n+                // In OAS >= 3.1, the array \"items\" attribute is optional such that the OAS\n+                // specification is aligned with the JSON schema specification.\n+                // When \"items\" is not specified, the elements of the array may be anything at all.\n+                return prefix + \"[bool, date, datetime, dict, float, int, list, str, none_type]\" + fullSuffix;", "originalCommit": "48a5ce9a78c12b458fd262be831d764d4b8321f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTg5OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r419605898", "bodyText": "makes sense, I am fixing.", "author": "sebastien-rosset", "createdAt": "2020-05-04T17:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNTE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "fd4ed5ac581ca0e5440cfdbf28f099388bd1f12c", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex 231561d4765..3750d95e26a 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -918,7 +918,7 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n                 // In OAS >= 3.1, the array \"items\" attribute is optional such that the OAS\n                 // specification is aligned with the JSON schema specification.\n                 // When \"items\" is not specified, the elements of the array may be anything at all.\n-                return prefix + \"[bool, date, datetime, dict, float, int, list, str, none_type]\" + fullSuffix;\n+                return \"[bool, date, datetime, dict, float, int, list, str, none_type]\";\n             } else {\n                 return prefix + \"[\" + getTypeString(inner, \"\", \"\") + \"]\" + fullSuffix;\n             }\n"}}, {"oid": "19f9137349d0cebfa1a38f0c05b9ea69944801f9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/19f9137349d0cebfa1a38f0c05b9ea69944801f9", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into python-array-item-is-optional", "committedDate": "2020-05-04T17:28:34Z", "type": "commit"}, {"oid": "fd4ed5ac581ca0e5440cfdbf28f099388bd1f12c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fd4ed5ac581ca0e5440cfdbf28f099388bd1f12c", "message": "remove prefix and fullSuffix", "committedDate": "2020-05-04T17:36:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NTUzMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421495533", "bodyText": "@sebastien-rosset Shall we remove prefix, suffix from this line as well?", "author": "wing328", "createdAt": "2020-05-07T13:17:41Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -897,6 +897,9 @@ public String getTypeString(Schema p, String prefix, String suffix) {\n         if (\")\".equals(suffix)) {\n             fullSuffix = \",\" + suffix;\n         }\n+        if (ModelUtils.isAnyTypeSchema(p)) {\n+            return prefix + \"bool, date, datetime, dict, float, int, list, str, none_type\" + suffix;", "originalCommit": "fd4ed5ac581ca0e5440cfdbf28f099388bd1f12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxODE1NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421618155", "bodyText": "done", "author": "sebastien-rosset", "createdAt": "2020-05-07T16:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NTUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "7d708e21a19f67da9667403664c51eb81c4de669", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex 3750d95e26a..ccd9ad77251 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -898,7 +900,7 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n             fullSuffix = \",\" + suffix;\n         }\n         if (ModelUtils.isAnyTypeSchema(p)) {\n-            return prefix + \"bool, date, datetime, dict, float, int, list, str, none_type\" + suffix;\n+            return \"bool, date, datetime, dict, float, int, list, str, none_type\";\n         }\n         // Resolve $ref because ModelUtils.isXYZ methods do not automatically resolve references.\n         if (ModelUtils.isNullable(ModelUtils.getReferencedSchema(this.openAPI, p))) {\n"}}, {"oid": "245ce18f6cbb2bb590464fac0dd070f4b866b842", "url": "https://github.com/OpenAPITools/openapi-generator/commit/245ce18f6cbb2bb590464fac0dd070f4b866b842", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into python-array-item-is-optional", "committedDate": "2020-05-07T15:51:48Z", "type": "commit"}, {"oid": "7d708e21a19f67da9667403664c51eb81c4de669", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7d708e21a19f67da9667403664c51eb81c4de669", "message": "Remove prefix and suffix", "committedDate": "2020-05-07T15:56:17Z", "type": "commit"}, {"oid": "5dffcdbeea7d11a0f64b35ea510818331fc25a65", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5dffcdbeea7d11a0f64b35ea510818331fc25a65", "message": "fix Java code comment", "committedDate": "2020-05-07T18:57:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421857577", "bodyText": "We also need to include the prefix before these types and the fullSuffix after them.\nCan you update it to this?\nreturn prefix + \"bool, date, datetime, dict, float, int, list, str, none_type\" + fullSuffix;\n\nOr you could include ModelUtils.isAnyTypeSchema(p) in the conditionals on lines:\n\n906\n909\n\nAnd then we wouldn't need this additional if statement because we will correctly return in line 910.\nUp to you which way you want to do it.", "author": "spacether", "createdAt": "2020-05-07T23:49:21Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -897,6 +899,9 @@ public String getTypeString(Schema p, String prefix, String suffix) {\n         if (\")\".equals(suffix)) {\n             fullSuffix = \",\" + suffix;\n         }\n+        if (ModelUtils.isAnyTypeSchema(p)) {\n+            return \"bool, date, datetime, dict, float, int, list, str, none_type\";", "originalCommit": "5dffcdbeea7d11a0f64b35ea510818331fc25a65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4Njk3Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421886973", "bodyText": "I specifically removed the prefix based on Wing's feedback. Now my understanding is that prefix/suffix is only used for model, this is done on purpose. But my understanding is limited. If you still think this needs to be added, can you provide a better java doc that explains the exact purpose of the prefix and suffix? And the conditions under which prefix and suffix is set? If I make a change, I'd like to understand why it needs to be done and document it.", "author": "sebastien-rosset", "createdAt": "2020-05-08T01:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NzQ3Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421887473", "bodyText": "We also need to include the prefix before these types and the fullSuffix after them.\nCan you update it to this?\nreturn prefix + \"bool, date, datetime, dict, float, int, list, str, none_type\" + fullSuffix;\n\nOr you could include ModelUtils.isAnyTypeSchema(p) in the conditionals on lines:\n\n906\n909\n\nAnd then we wouldn't need this additional if statement because we will correctly return in line 910.\nUp to you which way you want to do it.\n\nI think this would make the code more complicate to understand and maintain, I don't think it's worth adding recursion.", "author": "sebastien-rosset", "createdAt": "2020-05-08T01:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMzE1Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421933157", "bodyText": "So reading through the java doc we have:\n    /**\n     * Return a string representation of the Python types for the specified schema.\n     * Primitive types in the OAS specification are implemented in Python using the corresponding\n     * Python primitive types.\n     * Composed types (e.g. allAll, oneOf, anyOf) are represented in Python using list of types.\n     *\n     * @param p The OAS schema.\n     * @param prefix prepended to the returned value.\n     * @param suffix appended to the returned value.\n     * @return a string representation of the Python types\n     */\n\nSo we see that the prefix and suffix are put on the beginning and the end of the string.\nLooking at the call site's javadoc we see that:\n    /**\n     * Output the type declaration of a given name\n     *\n     * @param p property schema\n     * @return a string presentation of the type\n     */\n    @Override\n    public String getTypeDeclaration(Schema p) {\n        // this is used to set dataType, which defines a python tuple of classes\n        // in Python we will wrap this in () to make it a tuple but here we\n        // will omit the parens so the generated documentation will not include\n        // them\n        return getTypeString(p, \"\", \"\");\n    }\n\nSo we see that at the outermost layer we omit setting the prefix and suffix so the documentation works correctly. The prefix and suffix are used for wrapping inner types in the required [], {}, or () characters which we see inside the function.\nCan't AnyType schemas be inside array items and MapSchemas (lines 914 + 925)?\nIf so, then we need to add the prefix +blah + fullSuffix to include the required [], {}, or () container characters.", "author": "spacether", "createdAt": "2020-05-08T04:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjAxMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421936010", "bodyText": "So reading through the java doc we have:\n    /**\n     * Return a string representation of the Python types for the specified schema.\n     * Primitive types in the OAS specification are implemented in Python using the corresponding\n     * Python primitive types.\n     * Composed types (e.g. allAll, oneOf, anyOf) are represented in Python using list of types.\n     *\n     * @param p The OAS schema.\n     * @param prefix prepended to the returned value.\n     * @param suffix appended to the returned value.\n     * @return a string representation of the Python types\n     */\n\n\nI've read that but that doc does not actually explain anything. It's not usable documentation that provides actionable information. Good doc provides contextual information. Without context, the prefix could be any arbitrary string. What value can the prefix get? Since the doc does not say anything, you have to assume it can be anything. Is it even ASCII? UTF-8? Is it a python type? Or maybe a package name? or 200 other possibilities.\nJust to be clear, I'm adding documentation whenever I can to improve.", "author": "sebastien-rosset", "createdAt": "2020-05-08T04:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzOTgxMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421939813", "bodyText": "That doc explains that prefix goes in front, suffix goes behind, and what types they are. I am hearing that you want an explanation of the valid values. Reading the function and my explanation shows that the values can be:\nprefix \"({[\" and empty string\nsuffix \"({[\" and empty string\nThey allow us to enclose the python data types in containing characters which define tuples, dicts, and lists. Does that help?\nThank you for adding the documentation when it helps.\nMan I have strived to add a lot of documentation and tests to python-experimental in many many places. When your comments start from a place of this is not a good doc, it is discouraging. Can you give me the benefit of the doubt? I am trying to make improvements; the goal is to inform people and provide a useful tool. This generator has a lot more documentation, features, and tests than a lot of others. I am trying hard here.", "author": "spacether", "createdAt": "2020-05-08T05:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NDAwOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421944008", "bodyText": "I think this function should be private or protected. The fact that it's public means it can be invoked from anywhere, which means by contract the caller can pass anything, not just \"({[\"\nI understand you mean well, and we are all striving to improve the doc and the code, but also when a particular doc sentence is not helpful, I need to say it so we can improve it. Here are some guidelines for good docs: https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html\nThe doc states this:\n@param prefix prepended to the returned value.\nFrom that sentence and the type, you can see the prefix is a string, and the value is just prepended to the return value. But it does not have information about what the prefix is supposed to mean.", "author": "sebastien-rosset", "createdAt": "2020-05-08T05:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NjY0NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421946644", "bodyText": "Sure, I get that.\n-This is unclear to me,\n-I think that this is missing import information about what characters are allowed\n-In the future when you write docs, can you follow this best practice\nare all sentences that convey the same intent rather than starting with the much worse \"this is not good\".\nI promise you that me and others will respond better with these types of responses. Let's try to treat each other well?\nWhen people new to python write bad python I don't say \"This is not good\" I give them specific advice about how it can be improved, and why I think we should make the change.", "author": "spacether", "createdAt": "2020-05-08T05:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MzYwMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421953602", "bodyText": "Sorry, I was just trying to point out that this particular doc was not helpful. You can see from several of my other PRs that I keep improving the doc, so I don't complain, I just improve the doc.", "author": "sebastien-rosset", "createdAt": "2020-05-08T05:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7aa03e027351c6c75cb74abbe86bb91eca6df62d", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex ec68c2c74ca..7210e3cef8d 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -881,26 +881,32 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n     }\n \n     /**\n-     * Return a string representation of the Python types for the specified schema.\n+     * Return a string representation of the Python types for the specified OAS schema.\n      * Primitive types in the OAS specification are implemented in Python using the corresponding\n      * Python primitive types.\n      * Composed types (e.g. allAll, oneOf, anyOf) are represented in Python using list of types.\n+     * \n+     * The caller should set the prefix and suffix arguments to empty string, except when\n+     * getTypeString invokes itself recursively. A non-empty prefix/suffix may be specified\n+     * to wrap the return value in a python dict, list or tuple.\n      *\n-     * Prefix and suffix are for models, e.g. Pet is transformed to MyPetV3.\n-     *\n+     * Examples:\n+     * - \"bool, date, float\"  The data must be a bool, date or float.\n+     * - \"[bool, date]\"       The data must be an array, and the array items must be a bool or date.\n+     * \n      * @param p The OAS schema.\n      * @param prefix prepended to the returned value.\n      * @param suffix appended to the returned value.\n-     * @return a string representation of the Python types\n+     * @return a comma-separated string representation of the Python types\n      */\n-    public String getTypeString(Schema p, String prefix, String suffix) {\n+    private String getTypeString(Schema p, String prefix, String suffix) {\n         // this is used to set dataType, which defines a python tuple of classes\n         String fullSuffix = suffix;\n         if (\")\".equals(suffix)) {\n             fullSuffix = \",\" + suffix;\n         }\n         if (ModelUtils.isAnyTypeSchema(p)) {\n-            return \"bool, date, datetime, dict, float, int, list, str, none_type\";\n+            return prefix + \"bool, date, datetime, dict, float, int, list, str, none_type\" + suffix;\n         }\n         // Resolve $ref because ModelUtils.isXYZ methods do not automatically resolve references.\n         if (ModelUtils.isNullable(ModelUtils.getReferencedSchema(this.openAPI, p))) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1ODQyNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421858424", "bodyText": "This is the 3rd location in this function that w have defined this list of all types.\nInstead of defining this same info 3 times, how about doing one more recursive call and routing us to the return case on line 903 or 910? That keeps this simpler.", "author": "spacether", "createdAt": "2020-05-07T23:52:16Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -910,7 +915,15 @@ public String getTypeString(Schema p, String prefix, String suffix) {\n         } else if (ModelUtils.isArraySchema(p)) {\n             ArraySchema ap = (ArraySchema) p;\n             Schema inner = ap.getItems();\n-            return prefix + \"[\" + getTypeString(inner, \"\", \"\") + \"]\" + fullSuffix;\n+            if (inner == null) {\n+                // In OAS 3.0.x, the array \"items\" attribute is required.\n+                // In OAS >= 3.1, the array \"items\" attribute is optional such that the OAS\n+                // specification is aligned with the JSON schema specification.\n+                // When \"items\" is not specified, the elements of the array may be anything at all.\n+                return \"[bool, date, datetime, dict, float, int, list, str, none_type]\";", "originalCommit": "5dffcdbeea7d11a0f64b35ea510818331fc25a65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5MDExMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421890112", "bodyText": "I'm not convinced by your argument. I think recursion will make the code more complicated to understand and troubleshoot. Plus here the inner schema is null, so getTypeString() would have to be invoked with either a null value, or create/use a new AnyType schema", "author": "sebastien-rosset", "createdAt": "2020-05-08T01:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1ODQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjg4NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421936884", "bodyText": "Yup, my thought was that one would invoke it with the null Schema input, but AnyType inpht would be better.\n\nline 925 does this same [] wrapping logic\nThe returned data is the line 903 anytype data, all we would need to add is a null check in line 902\nThe rest of the function uses recursion\n\nBut if this is clearer to you we can keep it this way.", "author": "spacether", "createdAt": "2020-05-08T04:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1ODQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1Mjc4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6133#discussion_r421952780", "bodyText": "I have added code comments and used recursion. Thanks for your input, that helps to improve the doc.\nI have put some additional code comments for recursion because I think the recursion complicates readability and maintainability.", "author": "sebastien-rosset", "createdAt": "2020-05-08T05:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1ODQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "7aa03e027351c6c75cb74abbe86bb91eca6df62d", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex ec68c2c74ca..7210e3cef8d 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -920,7 +926,11 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n                 // In OAS >= 3.1, the array \"items\" attribute is optional such that the OAS\n                 // specification is aligned with the JSON schema specification.\n                 // When \"items\" is not specified, the elements of the array may be anything at all.\n-                return \"[bool, date, datetime, dict, float, int, list, str, none_type]\";\n+                // In that case, the return value should be:\n+                //    \"[bool, date, datetime, dict, float, int, list, str, none_type]\"\n+                // Using recursion to wrap the allowed python types in an array.\n+                Schema anyType = new Schema(); // A Schema without any attribute represents 'any type'.\n+                return getTypeString(anyType, \"[\", \"]\");\n             } else {\n                 return prefix + \"[\" + getTypeString(inner, \"\", \"\") + \"]\" + fullSuffix;\n             }\n"}}, {"oid": "31635e7f19f970d78e32c0b41f3e7a2c57fd1468", "url": "https://github.com/OpenAPITools/openapi-generator/commit/31635e7f19f970d78e32c0b41f3e7a2c57fd1468", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into python-array-item-is-optional", "committedDate": "2020-05-08T04:20:10Z", "type": "commit"}, {"oid": "7aa03e027351c6c75cb74abbe86bb91eca6df62d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7aa03e027351c6c75cb74abbe86bb91eca6df62d", "message": "Add code comments, use recursion for any type", "committedDate": "2020-05-08T05:50:10Z", "type": "commit"}, {"oid": "7fc1f17769206db0d67a6bf3575bae7c8f6ef47c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7fc1f17769206db0d67a6bf3575bae7c8f6ef47c", "message": "Address review comments", "committedDate": "2020-05-08T06:31:32Z", "type": "commit"}]}