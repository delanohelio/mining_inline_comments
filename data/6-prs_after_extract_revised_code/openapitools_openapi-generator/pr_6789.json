{"pr_number": 6789, "pr_title": "Fix Union Types Import Issue", "pr_createdAt": "2020-06-26T09:29:41Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6789", "timeline": [{"oid": "54a529cfe5c420106d7298a7821346a4805353de", "url": "https://github.com/OpenAPITools/openapi-generator/commit/54a529cfe5c420106d7298a7821346a4805353de", "message": "First approach for discussion", "committedDate": "2020-06-26T09:17:14Z", "type": "commit"}, {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448", "url": "https://github.com/OpenAPITools/openapi-generator/commit/234d2bd1c337bc19d893b7f15b10692474f57448", "message": "typo", "committedDate": "2020-06-26T09:17:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTk1OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446279959", "bodyText": "please add some docs to describe what this does, with an example", "author": "macjohnny", "createdAt": "2020-06-26T16:15:57Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){", "originalCommit": "234d2bd1c337bc19d893b7f15b10692474f57448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NTg0MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r448345841", "bodyText": "I added the doc to the new method toModelImportMap", "author": "FrankEssenberger", "createdAt": "2020-07-01T13:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "74f32861f2bc48a7f6ffa801e6f48e1dae2273b6", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\nindex ac27f027841..a85fb31656a 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n\n@@ -227,7 +227,8 @@ public abstract class AbstractTypeScriptClientCodegen extends DefaultCodegen imp\n     @Override\n     public String toModelImport( String name){\n         if(name.contains(\"|\")){\n-            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           LOGGER.warn(\"The import is a union type. Consider using the toModelImportMap method.\");\n            return names.stream()\n                    .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n                    .map(noSpace->super.toModelImport(noSpace))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDA3Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446280076", "bodyText": "docs", "author": "macjohnny", "createdAt": "2020-06-26T16:16:09Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    protected String toModelImportForUnionTypes(String name, Function<String,String> toModelImportSingle){", "originalCommit": "234d2bd1c337bc19d893b7f15b10692474f57448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0ODEwMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r448348100", "bodyText": "removed the method.", "author": "FrankEssenberger", "createdAt": "2020-07-01T13:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "74f32861f2bc48a7f6ffa801e6f48e1dae2273b6", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\nindex ac27f027841..a85fb31656a 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n\n@@ -227,7 +227,8 @@ public abstract class AbstractTypeScriptClientCodegen extends DefaultCodegen imp\n     @Override\n     public String toModelImport( String name){\n         if(name.contains(\"|\")){\n-            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           LOGGER.warn(\"The import is a union type. Consider using the toModelImportMap method.\");\n            return names.stream()\n                    .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n                    .map(noSpace->super.toModelImport(noSpace))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDU0Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446280546", "bodyText": "@amakhrov @wing328  do you think such a complicated logic is necessary, or could this be solved elsewhere?", "author": "macjohnny", "createdAt": "2020-06-26T16:17:04Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    protected String toModelImportForUnionTypes(String name, Function<String,String> toModelImportSingle){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+            return names.stream()\n+                    .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                    .map(noSpace->toModelImportSingle.apply(noSpace))\n+                    .collect(Collectors.joining(\"|\"));\n+        }\n+        return toModelImportSingle.apply(name);\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(final Map<String, Object> objs, final List<Object> allModels) {\n+        Map<String, Object> objsUnderProcess=  super.postProcessOperationsWithModels(objs, allModels);\n+\n+        if(Boolean.valueOf(objsUnderProcess.get(\"hasImport\").toString())){\n+            objsUnderProcess.put(\"imports\", splitUniontypeImports((List<Map<String,String>>) objsUnderProcess.get(\"imports\")));\n+        }\n+        return objsUnderProcess;\n+    }\n+\n+    protected List<Object> splitUniontypeImports(List<Map<String,String>> imports){", "originalCommit": "234d2bd1c337bc19d893b7f15b10692474f57448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5OTYyNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446299624", "bodyText": "It looks quite similar to the existing logic in TypeScriptAngularClientCodegen (see postProcessAllModels and parseImports)\nMaybe we should lift the logic from AngularClient to AbstractTypescriptClient instead of pretty much repeating it?\nThe root problem, as I see it, is that toModelImport takes a string as an argument rather than a model and returns a string instead of a list. It makes it very limited in terms of handling composite models. But changing that would require a change in Generator and CodegenConfig interfaces. And generally means more work, of course.", "author": "amakhrov", "createdAt": "2020-06-26T16:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MDI1OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446950258", "bodyText": "I totally agree on your analysis regarding the signature of the toModelImport(). I did not want to change that. I have also missed the implementation  already present in the AngularClient. I will try to move everything up to the parent class.", "author": "FrankEssenberger", "createdAt": "2020-06-29T12:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "74f32861f2bc48a7f6ffa801e6f48e1dae2273b6", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\nindex ac27f027841..a85fb31656a 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n\n@@ -227,7 +227,8 @@ public abstract class AbstractTypeScriptClientCodegen extends DefaultCodegen imp\n     @Override\n     public String toModelImport( String name){\n         if(name.contains(\"|\")){\n-            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           LOGGER.warn(\"The import is a union type. Consider using the toModelImportMap method.\");\n            return names.stream()\n                    .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n                    .map(noSpace->super.toModelImport(noSpace))\n"}}, {"oid": "74f32861f2bc48a7f6ffa801e6f48e1dae2273b6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/74f32861f2bc48a7f6ffa801e6f48e1dae2273b6", "message": "add addiotional method", "committedDate": "2020-07-01T12:55:44Z", "type": "commit"}, {"oid": "598ec7b24e24bd0d524925a9a0533ccf52562b16", "url": "https://github.com/OpenAPITools/openapi-generator/commit/598ec7b24e24bd0d524925a9a0533ccf52562b16", "message": "polish a bit", "committedDate": "2020-07-01T13:03:45Z", "type": "commit"}, {"oid": "57e9f2ea13d42419686b115bfada8fd057859639", "url": "https://github.com/OpenAPITools/openapi-generator/commit/57e9f2ea13d42419686b115bfada8fd057859639", "message": "remove call of super method", "committedDate": "2020-07-01T13:10:19Z", "type": "commit"}, {"oid": "a5f5021d32ec66931b98f90e80e8f460933c102c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a5f5021d32ec66931b98f90e80e8f460933c102c", "message": "fix javadoc error", "committedDate": "2020-07-01T13:30:15Z", "type": "commit"}, {"oid": "5f12d9a80cb2f3d8d2b74c32d6ad899e48803480", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5f12d9a80cb2f3d8d2b74c32d6ad899e48803480", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-07-02T08:57:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3NTI1Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r449275257", "bodyText": "Is google.common.colllect preferred over java.util.* in OAI generator?", "author": "TiFu", "createdAt": "2020-07-02T21:31:35Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n package org.openapitools.codegen;\n \n+import com.google.common.collect.Lists;", "originalCommit": "5f12d9a80cb2f3d8d2b74c32d6ad899e48803480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMzg5Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r449413897", "bodyText": "Just an old habit from other projects. I used the basic java methods to create new Lists and Maps.", "author": "FrankEssenberger", "createdAt": "2020-07-03T07:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3NTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "53d6b3c03b5e1042caa6cb9ee6f0cfabdcba5654", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java\nindex 839352bfd1c..d46439cc08b 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java\n\n@@ -17,8 +17,6 @@\n \n package org.openapitools.codegen;\n \n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Maps;\n import io.swagger.v3.core.util.Json;\n import io.swagger.v3.oas.models.OpenAPI;\n import io.swagger.v3.oas.models.Operation;\n"}}, {"oid": "53d6b3c03b5e1042caa6cb9ee6f0cfabdcba5654", "url": "https://github.com/OpenAPITools/openapi-generator/commit/53d6b3c03b5e1042caa6cb9ee6f0cfabdcba5654", "message": "com.google.common.collect.", "committedDate": "2020-07-03T07:08:36Z", "type": "commit"}, {"oid": "d0f83e3b7caca045aa7fa813ea47e67a1446b9a4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d0f83e3b7caca045aa7fa813ea47e67a1446b9a4", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-03T12:19:32Z", "type": "commit"}, {"oid": "8f4d3b730b95f43121237ab38b5828916cea3a7f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8f4d3b730b95f43121237ab38b5828916cea3a7f", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-07T08:51:35Z", "type": "commit"}, {"oid": "2529f408e823b5dd0ea1f566cdf96351545c96bf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2529f408e823b5dd0ea1f566cdf96351545c96bf", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-10T13:17:08Z", "type": "commit"}, {"oid": "cbb87013de05af27ff253361f9c1cc05fa8c99dd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cbb87013de05af27ff253361f9c1cc05fa8c99dd", "message": "merge master regenerate samples", "committedDate": "2020-07-10T13:57:24Z", "type": "commit"}, {"oid": "b3fc17e687f12923cc1724d6871d26e402ec0730", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b3fc17e687f12923cc1724d6871d26e402ec0730", "message": "sort imports alphabetically", "committedDate": "2020-07-10T18:18:11Z", "type": "commit"}, {"oid": "bcfdc66b52b5051c4073c77aaa07d25b997da1f6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bcfdc66b52b5051c4073c77aaa07d25b997da1f6", "message": "sort imports alphabetically with right key", "committedDate": "2020-07-10T18:24:03Z", "type": "commit"}, {"oid": "51b911c2f92cca7889d43a98328d49e0b8d57238", "url": "https://github.com/OpenAPITools/openapi-generator/commit/51b911c2f92cca7889d43a98328d49e0b8d57238", "message": "typo", "committedDate": "2020-07-10T18:27:05Z", "type": "commit"}, {"oid": "c8f113980138222e98315402fd445c4eed606836", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c8f113980138222e98315402fd445c4eed606836", "message": "add type previous imports are still there.", "committedDate": "2020-07-11T11:47:11Z", "type": "commit"}, {"oid": "eec9818bd107618ee07daae8c2cec696a6f18979", "url": "https://github.com/OpenAPITools/openapi-generator/commit/eec9818bd107618ee07daae8c2cec696a6f18979", "message": "add type previous imports are still there.", "committedDate": "2020-07-12T11:23:58Z", "type": "commit"}, {"oid": "d52396d11032d7cec74efb934262563489fb2da0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d52396d11032d7cec74efb934262563489fb2da0", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-12T11:24:20Z", "type": "commit"}, {"oid": "23de7559d715f3dbf19079afa5d2f7865371527c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/23de7559d715f3dbf19079afa5d2f7865371527c", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-20T09:18:30Z", "type": "commit"}, {"oid": "e1c0882100679e912f2d730f9c8e7926125db402", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e1c0882100679e912f2d730f9c8e7926125db402", "message": "remove new test to see if they are the problem.", "committedDate": "2020-07-20T12:18:30Z", "type": "commit"}, {"oid": "f34fe6223e25d0ced3ca4b7d591dbc3708b076e0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f34fe6223e25d0ced3ca4b7d591dbc3708b076e0", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-27T07:33:07Z", "type": "commit"}, {"oid": "d75a96a84b0f9a66630c936c6701d2a92953709d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d75a96a84b0f9a66630c936c6701d2a92953709d", "message": "merge master add tests back in", "committedDate": "2020-07-27T07:33:33Z", "type": "commit"}, {"oid": "f66c514cd619acf3f56b41dbfd35760bf670e588", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f66c514cd619acf3f56b41dbfd35760bf670e588", "message": "align changes which should not lead to failing test but you never know.", "committedDate": "2020-07-27T07:56:18Z", "type": "commit"}, {"oid": "a8ecd4e6b47cbf1ee1522ec9507c8ed1b069f79b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a8ecd4e6b47cbf1ee1522ec9507c8ed1b069f79b", "message": "remove formatting changes", "committedDate": "2020-07-27T08:16:56Z", "type": "commit"}, {"oid": "460a0f57667b23026a0c6b831fe97a269bd635d6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/460a0f57667b23026a0c6b831fe97a269bd635d6", "message": "dummy change", "committedDate": "2020-07-27T08:25:19Z", "type": "commit"}, {"oid": "f7a9516360682d0cb02580d88a17c675f52d505d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f7a9516360682d0cb02580d88a17c675f52d505d", "message": "revert spaces", "committedDate": "2020-07-27T08:28:55Z", "type": "commit"}, {"oid": "08042bf34a2b11e8201152f0fce592aaecfd2c50", "url": "https://github.com/OpenAPITools/openapi-generator/commit/08042bf34a2b11e8201152f0fce592aaecfd2c50", "message": "revert spaces", "committedDate": "2020-07-27T08:31:23Z", "type": "commit"}, {"oid": "7096692406d14042fd30c6ea0a98e7e0bcfe09dd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7096692406d14042fd30c6ea0a98e7e0bcfe09dd", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-28T07:06:39Z", "type": "commit"}, {"oid": "246614b08393e5a79df685e17aa25993825ab960", "url": "https://github.com/OpenAPITools/openapi-generator/commit/246614b08393e5a79df685e17aa25993825ab960", "message": "revert functional changes", "committedDate": "2020-07-28T07:14:37Z", "type": "commit"}, {"oid": "2bbd922a9080bc3f4efbb5b0ee54420c812fa582", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2bbd922a9080bc3f4efbb5b0ee54420c812fa582", "message": "comment out test", "committedDate": "2020-07-28T07:25:21Z", "type": "commit"}, {"oid": "56eff35e14944e78a9a7ab0607f6e935ed8fc569", "url": "https://github.com/OpenAPITools/openapi-generator/commit/56eff35e14944e78a9a7ab0607f6e935ed8fc569", "message": "remove model", "committedDate": "2020-07-28T09:01:33Z", "type": "commit"}, {"oid": "16f897f82247392a7c6cd52c0de6d9993cbe7cbf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/16f897f82247392a7c6cd52c0de6d9993cbe7cbf", "message": "remove interface method", "committedDate": "2020-07-28T09:55:42Z", "type": "commit"}, {"oid": "83b5e6f477e48681dd67a704b6da6f8766131496", "url": "https://github.com/OpenAPITools/openapi-generator/commit/83b5e6f477e48681dd67a704b6da6f8766131496", "message": "remove test class completely", "committedDate": "2020-07-28T11:08:17Z", "type": "commit"}, {"oid": "dc0f5751900ba7fd0552f185aee7514a85135476", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dc0f5751900ba7fd0552f185aee7514a85135476", "message": "put test class back - test body commented out", "committedDate": "2020-08-03T06:40:41Z", "type": "commit"}, {"oid": "de585d5b3392f92d392ab7d7d25499e94ece889e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/de585d5b3392f92d392ab7d7d25499e94ece889e", "message": "rename test methods", "committedDate": "2020-08-03T07:16:11Z", "type": "commit"}, {"oid": "40dce449a0c449cbdb16019df75c2c98365d46d5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/40dce449a0c449cbdb16019df75c2c98365d46d5", "message": "put back logic and tests", "committedDate": "2020-08-03T09:04:12Z", "type": "commit"}, {"oid": "40dce449a0c449cbdb16019df75c2c98365d46d5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/40dce449a0c449cbdb16019df75c2c98365d46d5", "message": "put back logic and tests", "committedDate": "2020-08-03T09:04:12Z", "type": "forcePushed"}, {"oid": "7cc0b16a6a888ce1aee8ee170fa1f4eccb287dbe", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7cc0b16a6a888ce1aee8ee170fa1f4eccb287dbe", "message": "remove generated APIs", "committedDate": "2020-08-03T11:16:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzM3NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r464773374", "bodyText": "These two methods (toModelImportMap and toModelImport) look very similar (split by |, remove spaces, process each part). Should one method just delegate to the other? E.g. toModelImport could call toModelImportMap and then collect the resulting map back into a string.", "author": "amakhrov", "createdAt": "2020-08-04T03:12:45Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,38 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+           List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           LOGGER.warn(\"The import is a union type. Consider using the toModelImportMap method.\");\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    /**\n+     * Maps the fully qualified model import to the initial given name. In case of union types the map will have multiple entries.\n+     * For example for \"classA | classB\" the map will two entries have [\"model.classA\",\"classA\"] and [\"model.classB\",\"classB\"].\n+     *\n+     * @param name the name of the \"Model\"\n+     * @return Map between the fully qualified model import and the initial given name.\n+     */\n+    @Override\n+    public Map<String,String> toModelImportMap( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.replace(\" \",\"\").split(\"\\\\|\"));\n+            Map<String,String> result = Maps.newHashMap();\n+            names.forEach(s->result.put(toModelImport(s),s));\n+            return  result;\n+        }\n+        return Collections.singletonMap(toModelImport(name),name);\n+    }", "originalCommit": "7cc0b16a6a888ce1aee8ee170fa1f4eccb287dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1ODM0NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r464858345", "bodyText": "sure good point. I introduced small helper methods with a more descriptive name and used the map method inside the single entry one.", "author": "FrankEssenberger", "createdAt": "2020-08-04T07:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "1aff13b3cb5e5d29588d49dc74fd089482dc78ea", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\nindex 09754b26b7a..bc3755b29af 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java\n\n@@ -226,13 +226,9 @@ public abstract class AbstractTypeScriptClientCodegen extends DefaultCodegen imp\n \n     @Override\n     public String toModelImport( String name){\n-        if(name.contains(\"|\")){\n-           List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+        if(isUnionType(name)){\n            LOGGER.warn(\"The import is a union type. Consider using the toModelImportMap method.\");\n-           return names.stream()\n-                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n-                   .map(noSpace->super.toModelImport(noSpace))\n-                   .collect(Collectors.joining(\"|\"));\n+           return toModelImportMap(name).values().stream().collect(Collectors.joining(\"|\"));\n         }\n         return super.toModelImport(name);\n     }\n"}}, {"oid": "1aff13b3cb5e5d29588d49dc74fd089482dc78ea", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1aff13b3cb5e5d29588d49dc74fd089482dc78ea", "message": "remark amakhrov", "committedDate": "2020-08-04T07:36:41Z", "type": "commit"}, {"oid": "88ded7d0ebb05c36cf71ff2b484e5ba2e64d221c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/88ded7d0ebb05c36cf71ff2b484e5ba2e64d221c", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-08-04T08:02:58Z", "type": "commit"}, {"oid": "1fb99beb26791b15a9222968f0363e9f57dde044", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1fb99beb26791b15a9222968f0363e9f57dde044", "message": "check in one generated file to test", "committedDate": "2020-08-04T08:45:45Z", "type": "commit"}, {"oid": "24dc8ce2d864d84a6f51f4e58c77b3671c5ca98c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/24dc8ce2d864d84a6f51f4e58c77b3671c5ca98c", "message": "adjust call super", "committedDate": "2020-08-04T09:02:38Z", "type": "commit"}, {"oid": "c83d6b49176db46e1a7c5eed6da9eac76a4b78a7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c83d6b49176db46e1a7c5eed6da9eac76a4b78a7", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-08-04T11:57:47Z", "type": "commit"}, {"oid": "5f376de14126f4fd13948741fda3db4b4cefc60f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5f376de14126f4fd13948741fda3db4b4cefc60f", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-08-11T16:52:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NzY2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r469077663", "bodyText": "Can you please add docstrings to explain what these new (private) functions do (e.g. avoid duplicates)?\nWe want to document all methods in the default codegen/generator class to make code easier to understand for new contributors. (I do not expect you to document all methods missing the docstring. The community can help with separate PRs)", "author": "wing328", "createdAt": "2020-08-12T08:01:28Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -1115,6 +1099,40 @@ private static String generateParameterId(Parameter parameter) {\n         return operations;\n     }\n \n+    private Map<String,String> getAllImportsMapppings(Set<String> allImports){", "originalCommit": "5f376de14126f4fd13948741fda3db4b4cefc60f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzNzQ0Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r470037443", "bodyText": "I added some doc and used a Set to better represent that the entries are unique for the other method.", "author": "FrankEssenberger", "createdAt": "2020-08-13T15:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NzY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d0761607197dbbc7b48ebc12782fd4fabd24ea82", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java\nindex 7fbffa50b62..c73e1f5fb13 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java\n\n@@ -1099,7 +1101,12 @@ public class DefaultGenerator implements Generator {\n         return operations;\n     }\n \n-    private Map<String,String> getAllImportsMapppings(Set<String> allImports){\n+    /**\n+     * Transforms a set of imports to a map with key config.toModelImport(import) and value the import string.\n+     * @param allImports - Set of imports\n+     * @return Map of fully qualified import path and initial import.\n+     */\n+    private Map<String,String> getAllImportsMappings(Set<String> allImports){\n         Map<String,String> result = new HashMap<>();\n         allImports.forEach(nextImport->{\n             String mapping = config.importMapping().get(nextImport);\n"}}, {"oid": "d0761607197dbbc7b48ebc12782fd4fabd24ea82", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d0761607197dbbc7b48ebc12782fd4fabd24ea82", "message": "add comment use set.", "committedDate": "2020-08-13T15:25:26Z", "type": "commit"}]}