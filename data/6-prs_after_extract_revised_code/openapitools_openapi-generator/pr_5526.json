{"pr_number": 5526, "pr_title": "Adds parseFlattenSpec", "pr_createdAt": "2020-03-05T03:08:19Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5526", "timeline": [{"oid": "d5b127128fb12c1cea959911f8c8cf28cdb2854c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d5b127128fb12c1cea959911f8c8cf28cdb2854c", "message": "Adds parseFlattenSpec, updates tests and helper functions", "committedDate": "2020-03-07T04:26:46Z", "type": "commit"}, {"oid": "d2f0cd04e825180dbe3bf2fc2a07c6f8c60aba4d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d2f0cd04e825180dbe3bf2fc2a07c6f8c60aba4d", "message": "Adds fixes for java tests", "committedDate": "2020-03-07T04:26:46Z", "type": "commit"}, {"oid": "bbc71a836e0ff376e66de05d6f9f40608bb39b7d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bbc71a836e0ff376e66de05d6f9f40608bb39b7d", "message": "Runs ensure-up-to-date", "committedDate": "2020-03-07T04:26:46Z", "type": "commit"}, {"oid": "bbc71a836e0ff376e66de05d6f9f40608bb39b7d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bbc71a836e0ff376e66de05d6f9f40608bb39b7d", "message": "Runs ensure-up-to-date", "committedDate": "2020-03-07T04:26:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzA2Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391317066", "bodyText": "Typo: Schmea.", "author": "sebastien-rosset", "createdAt": "2020-03-11T22:58:19Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1126,7 +1134,10 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        refedWithoutDiscriminator.add(parentName);\n+                        Boolean isNotExtractedInlineSchmea = !parentName.equals(schemaName+\"_allOf\");", "originalCommit": "bbc71a836e0ff376e66de05d6f9f40608bb39b7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzOTEzNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391339134", "bodyText": "Thanks for the catch. This typo has been corrected.", "author": "spacether", "createdAt": "2020-03-12T00:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "180e1902f70ff68f02b3aaf2bc027209dad42d10", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\nindex 6ecc3aa7232..eee679a6e16 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\n\n@@ -1134,8 +1134,8 @@ public class ModelUtils {\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        Boolean isNotExtractedInlineSchmea = !parentName.equals(schemaName+\"_allOf\");\n-                        if (isNotExtractedInlineSchmea) {\n+                        Boolean isNotExtractedInlineSchema = !parentName.equals(schemaName+\"_allOf\");\n+                        if (isNotExtractedInlineSchema) {\n                             refedWithoutDiscriminator.add(parentName);\n                         }\n                     }\n"}}, {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10", "url": "https://github.com/OpenAPITools/openapi-generator/commit/180e1902f70ff68f02b3aaf2bc027209dad42d10", "message": "Fixes typo", "committedDate": "2020-03-12T00:10:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzOTUwNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391839505", "bodyText": "boolean instead of Boolean? Don't think we actually need an object here", "author": "TiFu", "createdAt": "2020-03-12T19:19:41Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1126,7 +1134,10 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        refedWithoutDiscriminator.add(parentName);\n+                        Boolean isNotExtractedInlineSchema = !parentName.equals(schemaName+\"_allOf\");", "originalCommit": "180e1902f70ff68f02b3aaf2bc027209dad42d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2OTEyNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391869127", "bodyText": "This has been changed to type boolean\nTrue we don't need an object but having it named conveys that we are checking that a schema isNotExtractedInlineSchema. This helps us understand the meaning of the code vs what it is doing.", "author": "spacether", "createdAt": "2020-03-12T20:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzOTUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c73bb01cbdb5ef733cb856de17887ebab3a5e419", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\nindex eee679a6e16..13265572a93 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java\n\n@@ -1134,7 +1134,7 @@ public class ModelUtils {\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        Boolean isNotExtractedInlineSchema = !parentName.equals(schemaName+\"_allOf\");\n+                        boolean isNotExtractedInlineSchema = !parentName.equals(schemaName+\"_allOf\");\n                         if (isNotExtractedInlineSchema) {\n                             refedWithoutDiscriminator.add(parentName);\n                         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391840383", "bodyText": "Call TestUtils.parseSpec instead of reimplementing parsing here?", "author": "TiFu", "createdAt": "2020-03-12T19:21:26Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "originalCommit": "180e1902f70ff68f02b3aaf2bc027209dad42d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2NDExNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391864115", "bodyText": "The long term intention is to deprecate, possibly remove, or change the location of parseSpec. For that reason these functions should be independent of each other.", "author": "spacether", "createdAt": "2020-03-12T20:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2ODI1Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391868256", "bodyText": "Is this request blocking? Why?", "author": "spacether", "createdAt": "2020-03-12T20:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzODk3Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391938976", "bodyText": "Sounds good.", "author": "TiFu", "createdAt": "2020-03-12T22:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwMDcyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392000720", "bodyText": "The long term intention is to deprecate, possibly remove, or change the location of parseSpec.\n\nNot true. We will still need parseSpec for current and future classes which operate on \"raw\" spec files.", "author": "jimschubert", "createdAt": "2020-03-13T02:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxOTA5MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392019091", "bodyText": "Sorry, I meant my long term intention, not ours. @jimschubert classes which operate on raw files aren't something that I know about. What are some examples? Are they not being tested right now?", "author": "spacether", "createdAt": "2020-03-13T03:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE5NjEwOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392196108", "bodyText": "InlineModelResolver, and as mentioned in your other PR, I will be reworking Spec processing using a transformer pipeline which will need this too.", "author": "jimschubert", "createdAt": "2020-03-13T12:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5NDYxOQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392294619", "bodyText": "Thank you for clarifying that. That other use case is newer and is not yet in the code path. Per that conversation in the other PR this issue: #843 documents the spec processing.", "author": "spacether", "createdAt": "2020-03-13T15:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTc2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392301769", "bodyText": "parseFlattenSpec has been updated to call parseSpec because we need to keep parseSpec as a public util", "author": "spacether", "createdAt": "2020-03-13T15:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ef117ed484472069f098f2931d3603bf2fb485e1", "chunk": "diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\nindex 281e8610cd3..27bb0a3c60d 100644\n--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\n+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\n\n@@ -35,7 +35,7 @@ public class TestUtils {\n      * @return A processed OpenAPI document\n      */\n     public static OpenAPI parseFlattenSpec(String specFilePath) {\n-        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();\n+        OpenAPI openAPI = parseSpec(specFilePath);\n         // resolve inline models\n         InlineModelResolver inlineModelResolver = new InlineModelResolver();\n         inlineModelResolver.flatten(openAPI);\n"}}, {"oid": "c73bb01cbdb5ef733cb856de17887ebab3a5e419", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c73bb01cbdb5ef733cb856de17887ebab3a5e419", "message": "Updates Boolean to boolean", "committedDate": "2020-03-12T20:10:46Z", "type": "commit"}, {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ef117ed484472069f098f2931d3603bf2fb485e1", "message": "Adds parseSPec invocation inside parseFlattenSpec", "committedDate": "2020-03-13T15:30:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392537625", "bodyText": "Be careful when refactoring things like this. While YAML (as used in this method) may process schemas in a consistent order, JSON does not have a determinate order on object properties.", "author": "jimschubert", "createdAt": "2020-03-14T00:33:07Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java", "diffHunk": "@@ -26,86 +26,84 @@\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n public class ModelUtilsTest {\n \n     @Test\n     public void testGetAllUsedSchemas() {\n-        final OpenAPI openAPI = TestUtils.parseSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n+        final OpenAPI openAPI = TestUtils.parseFlattenSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n         List<String> allUsedSchemas = ModelUtils.getAllUsedSchemas(openAPI);\n-        Assert.assertEquals(allUsedSchemas.size(), 41);\n-\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObjShared\"), \"contains 'SomeObjShared'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj1\"), \"contains 'UnusedObj1'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj2\"), \"contains 'SomeObj2'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj3\"), \"contains 'SomeObj3'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj6\"), \"contains 'SomeObj6'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj7\"), \"contains 'SomeObj7'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj8\"), \"contains 'SomeObj8'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9A\"), \"contains 'SomeObj9A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9B\"), \"contains 'SomeObj9B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10A\"), \"contains 'SomeObj10A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10B\"), \"contains 'SomeObj10B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj11\"), \"contains 'SomeObj11'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj12\"), \"contains 'SomeArrayObj12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem12\"), \"contains 'ArrayItem12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj13\"), \"contains 'SomeArrayObj13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem13\"), \"contains 'ArrayItem13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj14\"), \"contains 'SomeObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PropertyObj14\"), \"contains 'PropertyObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj15\"), \"contains 'SomeObj15'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeMapObj16\"), \"contains 'SomeMapObj16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"MapItem16\"), \"contains 'MapItem16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj17\"), \"contains 'SomeObj17'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj18\"), \"contains 'SomeObj18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Common18\"), \"contains 'Common18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByAge\"), \"contains 'Obj19ByAge'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByType\"), \"contains 'Obj19ByType'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj20\"), \"contains 'SomeObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"OtherObj20\"), \"contains 'OtherObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataInput21\"), \"contains 'PingDataInput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataOutput21\"), \"contains 'PingDataOutput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SInput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SOutput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader23\"), \"contains 'SomeHeader23'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader24\"), \"contains 'SomeHeader24'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj25\"), \"contains 'SomeObj25'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj26\"), \"contains 'SomeObj26'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param27\"), \"contains 'Param27'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param28\"), \"contains 'Param28'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Parent30\"), \"contains 'Parent30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"AChild30\"), \"contains 'AChild30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"BChild30\"), \"contains 'BChild30'\");\n+        Assert.assertEquals(allUsedSchemas.size(), 42);\n+        List<String> expectedallUsedSchemas = Arrays.asList(", "originalCommit": "ef117ed484472069f098f2931d3603bf2fb485e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxODY2OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392618668", "bodyText": "Thank you for sharing that json and yaml are processed differently; I didn't know that. Do you want me to change this back to our old testing style so it will work if we swap in json in the future?\nMaybe we should add a method checkJsonYamlCollectionPresence(list1, list2)\nwith a comment:\n// YAML may process items in a consistent order, JSON does not have a determinate order on items", "author": "spacether", "createdAt": "2020-03-14T20:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyMTM4OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392621389", "bodyText": "Or optionally I could cast them to sets and check equality of the sets.", "author": "spacether", "createdAt": "2020-03-14T21:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyMTc0OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392621749", "bodyText": "This check has been changed to use List.containsAll to check presence rather than order.", "author": "spacether", "createdAt": "2020-03-14T21:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f77fee638c0565e1c710e14793358965048b80aa", "chunk": "diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java\nindex 41a14e16a2e..99b65d2745e 100644\n--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java\n+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java\n\n@@ -79,7 +79,7 @@ public class ModelUtilsTest {\n                 \"AChild30\",\n                 \"BChild30\"\n         );\n-        Assert.assertEquals(allUsedSchemas, expectedallUsedSchemas);\n+        Assert.assertTrue(allUsedSchemas.containsAll(expectedallUsedSchemas));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzc0OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392537749", "bodyText": "This comment is unnecessary.", "author": "jimschubert", "createdAt": "2020-03-14T00:34:04Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = parseSpec(specFilePath);\n+        // resolve inline models", "originalCommit": "ef117ed484472069f098f2931d3603bf2fb485e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxODc3OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392618778", "bodyText": "This comment has been removed", "author": "spacether", "createdAt": "2020-03-14T20:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "60c23e9a54dafe417a8e78c63333f8223594c263", "chunk": "diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\nindex 27bb0a3c60d..077268f2408 100644\n--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\n+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java\n\n@@ -36,7 +36,6 @@ public class TestUtils {\n      */\n     public static OpenAPI parseFlattenSpec(String specFilePath) {\n         OpenAPI openAPI = parseSpec(specFilePath);\n-        // resolve inline models\n         InlineModelResolver inlineModelResolver = new InlineModelResolver();\n         inlineModelResolver.flatten(openAPI);\n         return openAPI;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTEwMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392539101", "bodyText": "What is the point of this for loop? Why can't you just do composedSchema.getName() to get this schema's name? I think this needs a comment because it could be a pretty large performance impact on huge schema documents.", "author": "jimschubert", "createdAt": "2020-03-14T00:38:33Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1110,6 +1110,14 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n         int nullSchemaChildrenCount = 0;\n         boolean hasAmbiguousParents = false;\n         List<String> refedWithoutDiscriminator = new ArrayList<>();\n+        String schemaName = \"\";", "originalCommit": "ef117ed484472069f098f2931d3603bf2fb485e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxOTQ1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392619454", "bodyText": "@jimschubert we use this for loop to find out the name of the name of the composedSchema and we use it below to check that one of the oneOf models is an extracted inline schema.\nThis for loop is needed because the Schema.name is null for all schemas in allSchemas and in composedSchema.\nDo you want me to edit the getSchemas method to set the names in the returned schemas? Then I could Use composedSchema.getName() like you have described.\nHowever, that may have widespread impacts because comparing two schemas would then give different results if one had the name and one didn't have it.\nFor reference:\n    public static Map<String, Schema> getSchemas(OpenAPI openAPI) {\n        if (openAPI != null && openAPI.getComponents() != null && openAPI.getComponents().getSchemas() != null) {\n            return openAPI.getComponents().getSchemas();\n        }\n        return Collections.emptyMap();\n    }\n\nWhen we return openAPI.getComponents().getSchemas() none of those schemas have name set in them.", "author": "spacether", "createdAt": "2020-03-14T21:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MjI5Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r393392292", "bodyText": "I see. No need to change, as I suspect ModelUtils will change pretty heavily by 5.0 anyway.", "author": "jimschubert", "createdAt": "2020-03-17T01:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTEwMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "60c23e9a54dafe417a8e78c63333f8223594c263", "url": "https://github.com/OpenAPITools/openapi-generator/commit/60c23e9a54dafe417a8e78c63333f8223594c263", "message": "Removes comment", "committedDate": "2020-03-14T20:58:17Z", "type": "commit"}, {"oid": "f77fee638c0565e1c710e14793358965048b80aa", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f77fee638c0565e1c710e14793358965048b80aa", "message": "Changes to List.containsAll to check presence not order", "committedDate": "2020-03-14T21:44:13Z", "type": "commit"}, {"oid": "25475a2d58ee1a04b090d255817fe7092bdeaebd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/25475a2d58ee1a04b090d255817fe7092bdeaebd", "message": "Switches two tests to use containsAll", "committedDate": "2020-03-14T22:02:04Z", "type": "commit"}, {"oid": "c0771a491495368cf67e30054d1e2bae6a275778", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c0771a491495368cf67e30054d1e2bae6a275778", "message": "Updates another test to use containsAll", "committedDate": "2020-03-14T22:06:47Z", "type": "commit"}]}