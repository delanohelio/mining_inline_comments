{"pr_number": 7157, "pr_title": "[python-exp] simplify examples", "pr_createdAt": "2020-08-07T04:15:10Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7157", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0ODM4OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7157#discussion_r466848388", "bodyText": "That's a special case we added a while ago for type:string, format:number to map the type into BigDecimal in Java as format: double or format:float of type:number have been mapped accordingly. PM me if you need more info.", "author": "wing328", "createdAt": "2020-08-07T06:34:23Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -1106,71 +1119,432 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n         // to false, i.e. no additional properties are allowed.\n     }\n \n+    protected String toExampleValueBase(Schema schema) {\n+        if (schema.getExample() != null) {\n+            return schema.getExample().toString();\n+        }\n+\n+        return toDefaultValue(schema);\n+    }\n+\n     @Override\n-    public void setParameterExampleValue(CodegenParameter p) {\n-        // we have a custom version of this function so we can set the file\n-        // type example value\n-        String example;\n+    public String toExampleValue(Schema schema) {\n+        return toExampleValueRecursive(schema, new ArrayList<String>(), 1, \"\", 0);\n+    }\n \n-        if (p.defaultValue == null) {\n-            example = p.example;\n+    private String toExampleValueRecursive(Schema schema, List<String> included_schemas, int indentationLevel, String prefix, Integer exampleLine) {\n+        final String indentionConst = \"    \";\n+        String currentIndentation = \"\";\n+        String closingIndentation = \"\";\n+        for (int i=0 ; i < indentationLevel ; i++) currentIndentation += indentionConst;\n+        String example = toExampleValueBase(schema);\n+        if (exampleLine.equals(0)) {\n+            closingIndentation = currentIndentation;\n+            currentIndentation = \"\";\n         } else {\n-            p.example = p.defaultValue;\n-            return;\n+            closingIndentation = currentIndentation;\n+        }\n+        String fullPrefix = currentIndentation + prefix;\n+\n+        if (ModelUtils.isNullType(schema) && null != example) {\n+            // The 'null' type is allowed in OAS 3.1 and above. It is not supported by OAS 3.0.x,\n+            // though this tooling supports it.\n+            return fullPrefix + \"None\";\n+        }\n+        // correct \"true\"s into \"True\"s, since super.toExampleValue uses \"toString()\" on Java booleans\n+        if (ModelUtils.isBooleanSchema(schema) && null!=example) {\n+            if (\"false\".equalsIgnoreCase(example)) {\n+                example = \"False\";\n+            } else {\n+                example = \"True\";\n+            }\n         }\n \n-        String type = p.baseType;\n-        if (type == null) {\n-            type = p.dataType;\n+        // correct \"&#39;\"s into \"'\"s after toString()\n+        if (ModelUtils.isStringSchema(schema) && schema.getDefault() != null && !ModelUtils.isDateSchema(schema) && !ModelUtils.isDateTimeSchema(schema)) {\n+            example = (String) schema.getDefault();\n         }\n \n-        if (\"String\".equalsIgnoreCase(type) || \"str\".equalsIgnoreCase(type)) {\n-            if (example == null) {\n-                example = p.paramName + \"_example\";\n+        if (StringUtils.isNotBlank(example) && !\"null\".equals(example)) {\n+            if (ModelUtils.isStringSchema(schema)) {\n+                example = \"'\" + example + \"'\";\n+            }\n+            return fullPrefix + example;\n+        }\n+\n+        if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n+            // Enum case:\n+            example = schema.getEnum().get(0).toString();\n+            if (ModelUtils.isStringSchema(schema)) {\n+                example = \"'\" + escapeText(example) + \"'\";\n+            }\n+            if (null == example)\n+                LOGGER.warn(\"Empty enum. Cannot built an example!\");\n+\n+            return fullPrefix + example;\n+        } else if (null != schema.get$ref()) {\n+            // $ref case:\n+            Map<String, Schema> allDefinitions = ModelUtils.getSchemas(this.openAPI);\n+            String ref = ModelUtils.getSimpleRef(schema.get$ref());\n+            if (allDefinitions != null) {\n+                Schema refSchema = allDefinitions.get(ref);\n+                if (null == refSchema) {\n+                    return fullPrefix + \"None\";\n+                } else {\n+                    String refTitle = refSchema.getTitle();\n+                    if (StringUtils.isBlank(refTitle) || \"null\".equals(refTitle)) {\n+                        refSchema.setTitle(ref);\n+                    }\n+                    if (StringUtils.isNotBlank(schema.getTitle()) && !\"null\".equals(schema.getTitle())) {\n+                        included_schemas.add(schema.getTitle());\n+                    }\n+                    return toExampleValueRecursive(refSchema, included_schemas, indentationLevel, prefix, exampleLine);\n+                }\n+            } else {\n+                LOGGER.warn(\"allDefinitions not defined in toExampleValue!\\n\");\n+            }\n+        }\n+        if (ModelUtils.isDateSchema(schema)) {\n+            example = \"datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isDateTimeSchema(schema)) {\n+            example = \"datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isBinarySchema(schema)) {\n+            example = \"open('/path/to/file', 'rb')\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isByteArraySchema(schema)) {\n+            example = \"'YQ=='\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isStringSchema(schema)) {\n+            // a BigDecimal:\n+            if (\"Number\".equalsIgnoreCase(schema.getFormat())) {return fullPrefix + \"1\";}\n+            // TODO why is Number handled here?", "originalCommit": "e548541d35b96b5ca1f64cb80cfa003f969850b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a03c0d884bd6456ddfdad6036b04f7233a5cff33", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex 29c5b5573d3..39484821079 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -1119,234 +1146,313 @@ public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n         // to false, i.e. no additional properties are allowed.\n     }\n \n-    protected String toExampleValueBase(Schema schema) {\n+    protected String toExampleValueBase(Schema sc) {\n+        Schema schema = sc;\n+        String ref = sc.get$ref();\n+        if (ref != null) {\n+            schema = ModelUtils.getSchema(this.openAPI, ModelUtils.getSimpleRef(ref));\n+        }\n+        // TODO handle examples in object models in the future\n+        Boolean objectModel = (ModelUtils.isObjectSchema(schema) || ModelUtils.isMapSchema(schema) || ModelUtils.isComposedSchema(schema));\n+        if (objectModel) {\n+            return null;\n+        }\n+        String example = null;\n+        String defaultValue = toDefaultValue(schema);\n         if (schema.getExample() != null) {\n-            return schema.getExample().toString();\n+            example = schema.getExample().toString();\n+        } else if (defaultValue != null) {\n+            example = defaultValue;\n+        } else if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n+            example = schema.getEnum().get(0).toString();\n         }\n+        if (ModelUtils.isStringSchema(schema) && example != null && example.length() >= 2) {\n+            // TODO check to see if example does not have quotes on it\n+            // if it lacks them add double quotes\n+            // TODO update the string handling code to just use the value without adding quotes\n+            char firstChar = example.charAt(0);\n+            char lastChar = example.charAt(example.length() - 1);\n+            char quoteChar = \"'\".charAt(0);\n+            if (firstChar == quoteChar && lastChar == quoteChar) {\n+                example = example.substring(1, example.length()-1);\n+            }\n+        }\n+        return example;\n+    }\n \n-        return toDefaultValue(schema);\n+    /***\n+     * Ensures that the string has a leading and trailing quote\n+     *\n+     * @param in input string\n+     * @return quoted string\n+     */\n+    public String ensureQuotes(String in) {\n+        Pattern pattern = Pattern.compile(\"\\r\\n|\\r|\\n\");\n+        Matcher matcher = pattern.matcher(in);\n+        if (matcher.find()) {\n+            // if a string has a new line in it add triple quotes to make it a python multiline string\n+            return \"'''\" + in + \"'''\";\n+        }\n+        String strPattern = \"^['\\\"].*?['\\\"]$\";\n+        if (in.matches(strPattern)) {\n+            return in;\n+        }\n+        return \"\\\"\" + in + \"\\\"\";\n     }\n \n-    @Override\n-    public String toExampleValue(Schema schema) {\n-        return toExampleValueRecursive(schema, new ArrayList<String>(), 1, \"\", 0);\n+    public String toExampleValue(Schema schema, Object objExample) {\n+        String modelName = getModelName(schema);\n+        return toExampleValueRecursive(modelName, schema, objExample, 1, \"\", 0);\n+    }\n+\n+    private Boolean simpleStringSchema(Schema schema) {\n+        Schema sc = schema;\n+        String ref = schema.get$ref();\n+        if (ref != null) {\n+            sc = ModelUtils.getSchema(this.openAPI, ModelUtils.getSimpleRef(ref));\n+        }\n+        if (ModelUtils.isStringSchema(sc) && !ModelUtils.isDateSchema(sc) && !ModelUtils.isDateTimeSchema(sc) && !\"Number\".equalsIgnoreCase(sc.getFormat()) && !ModelUtils.isByteArraySchema(sc) && !ModelUtils.isBinarySchema(sc) && schema.getPattern() == null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private MappedModel getDiscriminatorMappedModel(CodegenDiscriminator disc, Map<String, Schema> allDefinitions) {\n+        for ( MappedModel mm : disc.getMappedModels() ) {\n+            String modelName = mm.getModelName();\n+            Schema modelSchema = allDefinitions.get(modelName);\n+            if (ModelUtils.isObjectSchema(modelSchema)) {\n+                return mm;\n+            }\n+        }\n+        return null;\n     }\n \n-    private String toExampleValueRecursive(Schema schema, List<String> included_schemas, int indentationLevel, String prefix, Integer exampleLine) {\n+    /***\n+     * Recursively generates string examples for schemas\n+     *\n+     * @param modelName the string name of the refed model that will be generated for the schema or null\n+     * @param schema the schema that we need an example for\n+     * @param objExample the example that applies to this schema, for now only string example are used\n+     * @param indentationLevel integer indentation level that we are currently at\n+     *                         we assume the indentaion amount is 4 spaces times this integer\n+     * @param prefix the string prefix that we will use when assigning an example for this line\n+     *               this is used when setting key: value, pairs \"key: \" is the prefix\n+     *               and this is used when setting properties like some_property='some_property_example'\n+     * @param exampleLine this is the current line that we are generatign an example for, starts at 0\n+     *                    we don't indentin the 0th line because using the example value looks like:\n+     *                    prop = ModelName( line 0\n+     *                        some_property='some_property_example' line 1\n+     *                    ) line 2\n+     *                    and our example value is:\n+     *                    ModelName( line 0\n+     *                        some_property='some_property_example' line 1\n+     *                    ) line 2\n+     * @return the string example\n+     */\n+    private String toExampleValueRecursive(String modelName, Schema schema, Object objExample, int indentationLevel, String prefix, Integer exampleLine) {\n         final String indentionConst = \"    \";\n         String currentIndentation = \"\";\n         String closingIndentation = \"\";\n         for (int i=0 ; i < indentationLevel ; i++) currentIndentation += indentionConst;\n-        String example = toExampleValueBase(schema);\n+        String example = null;\n+        if (objExample instanceof String) {\n+            example = (String) objExample;\n+        } else {\n+            example = toExampleValueBase(schema);\n+        }\n         if (exampleLine.equals(0)) {\n             closingIndentation = currentIndentation;\n             currentIndentation = \"\";\n         } else {\n             closingIndentation = currentIndentation;\n         }\n-        String fullPrefix = currentIndentation + prefix;\n-\n-        if (ModelUtils.isNullType(schema) && null != example) {\n-            // The 'null' type is allowed in OAS 3.1 and above. It is not supported by OAS 3.0.x,\n-            // though this tooling supports it.\n-            return fullPrefix + \"None\";\n-        }\n-        // correct \"true\"s into \"True\"s, since super.toExampleValue uses \"toString()\" on Java booleans\n-        if (ModelUtils.isBooleanSchema(schema) && null!=example) {\n-            if (\"false\".equalsIgnoreCase(example)) {\n-                example = \"False\";\n-            } else {\n-                example = \"True\";\n-            }\n-        }\n-\n-        // correct \"&#39;\"s into \"'\"s after toString()\n-        if (ModelUtils.isStringSchema(schema) && schema.getDefault() != null && !ModelUtils.isDateSchema(schema) && !ModelUtils.isDateTimeSchema(schema)) {\n-            example = (String) schema.getDefault();\n-        }\n-\n-        if (StringUtils.isNotBlank(example) && !\"null\".equals(example)) {\n-            if (ModelUtils.isStringSchema(schema)) {\n-                example = \"'\" + example + \"'\";\n-            }\n-            return fullPrefix + example;\n+        String openChars = \"\";\n+        String closeChars = \"\";\n+        if (modelName != null) {\n+            openChars = modelName+\"(\";\n+            closeChars = \")\";\n         }\n \n-        if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n-            // Enum case:\n-            example = schema.getEnum().get(0).toString();\n-            if (ModelUtils.isStringSchema(schema)) {\n-                example = \"'\" + escapeText(example) + \"'\";\n-            }\n-            if (null == example)\n-                LOGGER.warn(\"Empty enum. Cannot built an example!\");\n+        String fullPrefix = currentIndentation + prefix + openChars;\n \n-            return fullPrefix + example;\n-        } else if (null != schema.get$ref()) {\n+        if (null != schema.get$ref()) {\n             // $ref case:\n             Map<String, Schema> allDefinitions = ModelUtils.getSchemas(this.openAPI);\n             String ref = ModelUtils.getSimpleRef(schema.get$ref());\n             if (allDefinitions != null) {\n                 Schema refSchema = allDefinitions.get(ref);\n                 if (null == refSchema) {\n-                    return fullPrefix + \"None\";\n+                    return fullPrefix + \"None\" + closeChars;\n                 } else {\n-                    String refTitle = refSchema.getTitle();\n-                    if (StringUtils.isBlank(refTitle) || \"null\".equals(refTitle)) {\n-                        refSchema.setTitle(ref);\n-                    }\n-                    if (StringUtils.isNotBlank(schema.getTitle()) && !\"null\".equals(schema.getTitle())) {\n-                        included_schemas.add(schema.getTitle());\n-                    }\n-                    return toExampleValueRecursive(refSchema, included_schemas, indentationLevel, prefix, exampleLine);\n+                    String refModelName = getModelName(refSchema);\n+                    return toExampleValueRecursive(refModelName, refSchema, objExample, indentationLevel, prefix, exampleLine);\n                 }\n             } else {\n                 LOGGER.warn(\"allDefinitions not defined in toExampleValue!\\n\");\n             }\n-        }\n-        if (ModelUtils.isDateSchema(schema)) {\n-            example = \"datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()\";\n-            return fullPrefix + example;\n+        } else if (ModelUtils.isNullType(schema) || isAnyTypeSchema(schema)) {\n+            // The 'null' type is allowed in OAS 3.1 and above. It is not supported by OAS 3.0.x,\n+            // though this tooling supports it.\n+            return fullPrefix + \"None\" + closeChars;\n+        } else if (ModelUtils.isBooleanSchema(schema)) {\n+            if (example == null) {\n+                example = \"True\";\n+            } else {\n+                if (\"false\".equalsIgnoreCase(example)) {\n+                    example = \"False\";\n+                } else {\n+                    example = \"True\";\n+                }\n+            }\n+            return fullPrefix + example + closeChars;\n+        } else if (ModelUtils.isDateSchema(schema)) {\n+            if (example == null) {\n+                example = \"1970-01-01\";\n+            }\n+            example = \"datetime.datetime.strptime('\" + example + \"', '%Y-%m-%d').date()\";\n+            return fullPrefix + example + closeChars;\n         } else if (ModelUtils.isDateTimeSchema(schema)) {\n-            example = \"datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')\";\n-            return fullPrefix + example;\n+            if (example == null) {\n+                example = \"1970-01-01T00:00:00.00Z\";\n+            }\n+            // TODO add time zone offset to sample\n+            example = \"datetime.datetime.strptime('\" + example + \"', '%Y-%m-%dT%H:%M:%S.%f')\";\n+            return fullPrefix + example + closeChars;\n         } else if (ModelUtils.isBinarySchema(schema)) {\n-            example = \"open('/path/to/file', 'rb')\";\n-            return fullPrefix + example;\n+            if (example == null) {\n+                example = \"/path/to/file.txt\";\n+            }\n+            example = \"open('\" + example + \"', 'rb')\";\n+            return fullPrefix + example + closeChars;\n         } else if (ModelUtils.isByteArraySchema(schema)) {\n-            example = \"'YQ=='\";\n-            return fullPrefix + example;\n-        } else if (ModelUtils.isStringSchema(schema)) {\n-            // a BigDecimal:\n-            if (\"Number\".equalsIgnoreCase(schema.getFormat())) {return fullPrefix + \"1\";}\n-            // TODO why is Number handled here?\n-            if (StringUtils.isNotBlank(schema.getPattern())) return fullPrefix + \"'a'\"; // I cheat here, since it would be too complicated to generate a string from a regexp\n-            if (null != schema.getMinLength()) {\n-                int len = schema.getMinLength().intValue();\n-                for (int i=0;i<len;i++) example += \"a\";\n-                return fullPrefix + example;\n+            if (example == null) {\n+                example = \"'YQ=='\";\n             }\n+            return fullPrefix + example + closeChars;\n+        } else if (ModelUtils.isStringSchema(schema)) {\n             if (example == null) {\n-                example = \"hello\";\n+                // a BigDecimal:\n+                if (\"Number\".equalsIgnoreCase(schema.getFormat())) {\n+                    example = \"2\";\n+                    return  fullPrefix + example + closeChars;\n+                } else if (StringUtils.isNotBlank(schema.getPattern())) {\n+                    String pattern = schema.getPattern();\n+                    RgxGen rgxGen = new RgxGen(pattern);\n+                    // this seed makes it so if we have [a-z] we pick a\n+                    Random random = new Random(18);\n+                    String sample = rgxGen.generate(random);\n+                    // omit leading / and trailing /, omit trailing /i\n+                    Pattern valueExtractor = Pattern.compile(\"^/?(.+?)/?.?$\");\n+                    Matcher m = valueExtractor.matcher(sample);\n+                    if (m.find()) {\n+                        example = m.group(m.groupCount());\n+                    } else {\n+                        example = \"\";\n+                    }\n+                } else if (schema.getMinLength() != null) {\n+                    example = \"\";\n+                    int len = schema.getMinLength().intValue();\n+                    for (int i=0;i<len;i++) example += \"a\";\n+                } else if (ModelUtils.isUUIDSchema(schema)) {\n+                    example = \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\";\n+                } else {\n+                    example = \"string_example\";\n+                }\n             }\n-            return  fullPrefix + \"'\" + escapeText(example) + \"'\";\n+            return  fullPrefix + ensureQuotes(example) + closeChars;\n         } else if (ModelUtils.isIntegerSchema(schema)) {\n-            if (schema.getMinimum() != null)\n-                example = schema.getMinimum().toString();\n-            else\n-                example = \"56\";\n-            return fullPrefix + example;\n+            if (example == null) {\n+                if (schema.getMinimum() != null) {\n+                    example = schema.getMinimum().toString();\n+                } else {\n+                    example = \"1\";\n+                }\n+            }\n+            return fullPrefix + example + closeChars;\n         } else if (ModelUtils.isNumberSchema(schema)) {\n-            if (schema.getMinimum() != null)\n-                example = schema.getMinimum().toString();\n-            else\n-                example = \"1.337\";\n-            return fullPrefix + example;\n-        } else if (ModelUtils.isBooleanSchema(schema)) {\n-            example = \"True\";\n-            return fullPrefix + example;\n-        } else if (ModelUtils.isArraySchema(schema)) {\n-            String modelName = getModelName(schema);\n-            String openChar = \"[\";\n-            String closeChar = \"]\";\n-            if (modelName != null) {\n-                openChar = modelName+\"(\";\n-                closeChar = \")\";\n+            if (example == null) {\n+                if (schema.getMinimum() != null) {\n+                    example = schema.getMinimum().toString();\n+                } else {\n+                    example = \"3.14\";\n+                }\n             }\n+            return fullPrefix + example + closeChars;\n+        } else if (ModelUtils.isArraySchema(schema)) {\n             ArraySchema arrayschema = (ArraySchema) schema;\n-            example = fullPrefix + openChar + \"\\n\" + toExampleValueRecursive(arrayschema.getItems(), included_schemas, indentationLevel+1, \"\", exampleLine+1) + \",\\n\" + closingIndentation + closeChar;\n+            Schema itemSchema = arrayschema.getItems();\n+            String itemModelName = getModelName(itemSchema);\n+            example = fullPrefix + \"[\" + \"\\n\" + toExampleValueRecursive(itemModelName, itemSchema, objExample, indentationLevel+1, \"\", exampleLine+1) + \",\\n\" + closingIndentation + \"]\" + closeChars;\n             return example;\n         } else if (ModelUtils.isMapSchema(schema)) {\n-            String openChar = \"{\";\n-            String closeChar = \"}\";\n-            if (StringUtils.isNotBlank(schema.getTitle()) && !\"null\".equals(schema.getTitle())) {\n-                included_schemas.add(schema.getTitle());\n-                openChar = schema.getTitle()+\"(\";\n-                closeChar = \")\";\n+            if (modelName == null) {\n+                fullPrefix += \"{\";\n+                closeChars = \"}\";\n             }\n-            Object additionalObject = schema.getAdditionalProperties();\n-            if (additionalObject instanceof Schema) {\n-                Schema additional = (Schema) additionalObject;\n-                String the_key = \"'key'\";\n-                if (additional.getEnum() != null && !additional.getEnum().isEmpty()) {\n-                    the_key = additional.getEnum().get(0).toString();\n-                    if (ModelUtils.isStringSchema(additional)) {\n-                        the_key = \"'\" + escapeText(the_key) + \"'\";\n-                    }\n+            Object addPropsObj = schema.getAdditionalProperties();\n+            // TODO handle true case for additionalProperties\n+            if (addPropsObj instanceof Schema) {\n+                Schema addPropsSchema = (Schema) addPropsObj;\n+                String key = \"key\";\n+                Object addPropsExample = toExampleValueBase(addPropsSchema);\n+                if (addPropsSchema.getEnum() != null && !addPropsSchema.getEnum().isEmpty()) {\n+                    key = addPropsSchema.getEnum().get(0).toString();\n                 }\n-                example = fullPrefix + openChar + \"\\n\" +  toExampleValueRecursive(additional, included_schemas, indentationLevel + 1, the_key + \": \", exampleLine + 1) + \",\\n\" + closingIndentation + closeChar;\n+                addPropsExample = exampleFromStringOrArraySchema(addPropsSchema, addPropsExample, key);\n+                String addPropPrefix = ensureQuotes(key) + \": \";\n+                String addPropsModelName = getModelName(addPropsSchema);\n+                example = fullPrefix + \"\\n\" +  toExampleValueRecursive(addPropsModelName, addPropsSchema, addPropsExample, indentationLevel + 1, addPropPrefix, exampleLine + 1) + \",\\n\" + closingIndentation + closeChars;\n             } else {\n-                example = fullPrefix + openChar + closeChar;\n+                example = fullPrefix + closeChars;\n             }\n             return example;\n         } else if (ModelUtils.isObjectSchema(schema)) {\n-            String modelName = getModelName(schema);\n-            String openChar = \"{\";\n-            String closeChar = \"}\";\n-            if (modelName != null) {\n-                openChar = modelName+\"(\";\n-                closeChar = \")\";\n+            if (modelName == null) {\n+                fullPrefix += \"{\";\n+                closeChars = \"}\";\n             }\n-\n-            // TODO only include the required properties\n-            // TODO grab a valid discriminator value from the discriminator map\n-            // I remove any property that is a discriminator, since it is not well supported by the python generator\n-            String toExclude = null;\n-            if (schema.getDiscriminator() != null) {\n-                toExclude = schema.getDiscriminator().getPropertyName();\n-            }\n-\n-            example = fullPrefix + openChar;\n-\n-            // if required only:\n-            // List<String> reqs = schema.getRequired();\n-\n-            // if required and optionals\n-            List<String> reqs = new ArrayList<>();\n-            if (schema.getProperties() != null && !schema.getProperties().isEmpty()) {\n-                for (Object toAdd : schema.getProperties().keySet()) {\n-                    reqs.add((String) toAdd);\n-                }\n-\n-                Map<String, Schema> properties = schema.getProperties();\n-                Set<String> propkeys = null;\n-                if (properties != null) propkeys = properties.keySet();\n-                if (toExclude != null && reqs.contains(toExclude)) {\n-                    reqs.remove(toExclude);\n+            CodegenDiscriminator disc = createDiscriminator(modelName, schema, openAPI);\n+            if (disc != null) {\n+                Map<String, Schema> allDefinitions = ModelUtils.getSchemas(this.openAPI);\n+                Map<String, Schema> modelNameToSchema = new HashMap<String, Schema>();\n+                for (Map.Entry<String, Schema> entry: allDefinitions.entrySet()) {\n+                    String schemaName = entry.getKey();\n+                    Schema modelSchema = entry.getValue();\n+                    String schemaModelName = toModelName(schemaName);\n+                    modelNameToSchema.put(schemaModelName, modelSchema);\n                 }\n-                for (String toRemove : included_schemas) {\n-                    if (reqs.contains(toRemove)) {\n-                        reqs.remove(toRemove);\n-                    }\n-                }\n-                if (StringUtils.isNotBlank(schema.getTitle()) && !\"null\".equals(schema.getTitle())) {\n-                    included_schemas.add(schema.getTitle());\n-                }\n-                if (null != schema.getRequired()) for (Object toAdd : schema.getRequired()) {\n-                    String requiredParam = (String) toAdd;\n-                    if (!reqs.contains(requiredParam)) {\n-                        reqs.add(requiredParam);\n-                    }\n-                }\n-                if (null != propkeys) {\n-                    example += \"\\n\";\n-                }\n-                for (String propname : propkeys) {\n-                    Schema schema2 = properties.get(propname);\n-                    if (reqs.contains(propname)) {\n-                        //String refTitle = schema2.getTitle();\n-                        //if (StringUtils.isBlank(refTitle) || \"null\".equals(refTitle)) {\n-                        //    schema2.setTitle(propname);\n-                        //}\n-                        example += toExampleValueRecursive(schema2, included_schemas, indentationLevel + 1, underscore(propname) + \"=\", exampleLine + 1) + \",\\n\";\n-                    }\n+                MappedModel mm = getDiscriminatorMappedModel(disc, modelNameToSchema);\n+                if (mm != null) {\n+                    String discPropNameValue = mm.getMappingName();\n+                    String chosenModelName = mm.getModelName();\n+                    // TODO handle this case in the future, this is when the discriminated\n+                    // schema allOf includes this schema, like Cat allOf includes Pet\n+                    // so this is the composed schema use case\n+                } else {\n+                    return fullPrefix + closeChars;\n                 }\n             }\n-            example += closingIndentation + closeChar;\n-            return example;\n+            return exampleForObjectModel(schema, fullPrefix, closeChars, null, indentationLevel, exampleLine, closingIndentation);\n         } else if (ModelUtils.isComposedSchema(schema)) {\n-            String modelName = getModelName(schema);\n-            return fullPrefix + modelName+\"()\";\n+            // TODO add examples for composed schema models without discriminators\n+\n+            CodegenDiscriminator disc = createDiscriminator(modelName, schema, openAPI);\n+            if (disc != null) {\n+                MappedModel mm = getDiscriminatorMappedModel(disc, modelNameToSchema);\n+                if (mm != null) {\n+                    String discPropNameValue = mm.getMappingName();\n+                    String chosenModelName = mm.getModelName();\n+                    Schema modelSchema = modelNameToSchema.get(chosenModelName);\n+                    CodegenProperty cp = new CodegenProperty();\n+                    cp.setName(disc.getPropertyName());\n+                    cp.setExample(discPropNameValue);\n+                    return exampleForObjectModel(modelSchema, fullPrefix, closeChars, cp, indentationLevel, exampleLine, closingIndentation);\n+                } else {\n+                    return fullPrefix + closeChars;\n+                }\n+            }\n+            return fullPrefix + closeChars;\n         } else {\n             LOGGER.warn(\"Type \" + schema.getType() + \" not handled properly in toExampleValue\");\n         }\n"}}, {"oid": "a03c0d884bd6456ddfdad6036b04f7233a5cff33", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a03c0d884bd6456ddfdad6036b04f7233a5cff33", "message": "Adds example setting code in python-experimental with one fn setting example values\n\nFixes sample indentations\n\nHandles composed schema models, object model and arraymodels\n\nAdds brackets in arraymodel input\n\nSets modelName with map schemas\n\nRemoves included_schemas arguments, dicriminator examples do not include property examples\n\nRefactors modelName into toExampleValueRecursive argument\n\nFixes bug where example models contained themselves\n\nStops using model ExampleGenerator examples because they are inconsistent with the ones in python-experimental\n\nUses example values if they exist\n\nRemoves single quotes from enum examples\n\nFixes password example\n\nAdds commented our regex handling, commented out because it breaks\n\nHandles AnyType schema examples\n\nAdds x_example values for simple string properties, uses toExampleValue for all example generation\n\nAdds examples for simple string parameters\n\nUpdates comments in toExampleValueBase\n\nFixes the double nested bug for AdditionalPropertiesWithArrayOfEnums\n\nFixes bug where NumberWithValidations had double nesting\n\nUpdates simple string examples in arrays\n\nFixes array string examples\n\nFixes example for string endpoint body example\n\nAdds exampleFromStringOrArraySchema\n\nAdds regex examples, pegs slf4j-version to v1.7.29 for rgxgen\n\nAdds comment about regex seed\n\nUpdates pattern matcher to not handle ^ and $\n\nUpdates used sample values\n\nAdds ensureQuotes\n\nAdds ensureQuotes\n\nFixes double quote bug\n\nUpdates mustache file\n\nAdds ensureQuotes to key handling\n\nAdds modelNameToSchema map, reduces run time by using it\n\nFixes java tests\n\nRegenerates python-experimental samples\n\nFixes python test", "committedDate": "2020-08-17T06:36:14Z", "type": "forcePushed"}, {"oid": "79268a3a1140b772232fe891f703eb6bcadc1b2c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/79268a3a1140b772232fe891f703eb6bcadc1b2c", "message": "Adds example setting code in python-experimental with one fn setting example values\n\nFixes sample indentations\n\nHandles composed schema models, object model and arraymodels\n\nAdds brackets in arraymodel input\n\nSets modelName with map schemas\n\nRemoves included_schemas arguments, dicriminator examples do not include property examples\n\nRefactors modelName into toExampleValueRecursive argument\n\nFixes bug where example models contained themselves\n\nStops using model ExampleGenerator examples because they are inconsistent with the ones in python-experimental\n\nUses example values if they exist\n\nRemoves single quotes from enum examples\n\nFixes password example\n\nAdds commented our regex handling, commented out because it breaks\n\nHandles AnyType schema examples\n\nAdds x_example values for simple string properties, uses toExampleValue for all example generation\n\nAdds examples for simple string parameters\n\nUpdates comments in toExampleValueBase\n\nFixes the double nested bug for AdditionalPropertiesWithArrayOfEnums\n\nFixes bug where NumberWithValidations had double nesting\n\nUpdates simple string examples in arrays\n\nFixes array string examples\n\nFixes example for string endpoint body example\n\nAdds exampleFromStringOrArraySchema\n\nAdds regex examples, pegs slf4j-version to v1.7.29 for rgxgen\n\nAdds comment about regex seed\n\nUpdates pattern matcher to not handle ^ and $\n\nUpdates used sample values\n\nAdds ensureQuotes\n\nAdds ensureQuotes\n\nFixes double quote bug\n\nUpdates mustache file\n\nAdds ensureQuotes to key handling\n\nAdds modelNameToSchema map, reduces run time by using it\n\nFixes java tests\n\nRegenerates python-experimental samples\n\nFixes python test", "committedDate": "2020-08-17T06:38:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Njc0MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7157#discussion_r471546741", "bodyText": "This seems to be the same code as my PR #7220. I've noticed other code generators have similar issues, that's why I put the map in DefaultCodeGenerator.  It would be good if we can either get my PR in then that can be reused for your PR, or even remove this part of the enhancement and when my PR is in, the performance optimization will be applied.", "author": "sebastien-rosset", "createdAt": "2020-08-17T15:11:44Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -37,19 +40,23 @@\n import org.openapitools.codegen.meta.Stability;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import com.github.curiousoddman.rgxgen.RgxGen;\n \n import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n import java.io.File;\n import java.util.*;\n import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n \n+import static org.openapitools.codegen.utils.OnceLogger.once;\n import static org.openapitools.codegen.utils.StringUtils.camelize;\n import static org.openapitools.codegen.utils.StringUtils.underscore;\n \n public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n     private static final Logger LOGGER = LoggerFactory.getLogger(PythonClientExperimentalCodegen.class);\n+    private Map<String, Schema> modelNameToSchema = new HashMap<String, Schema>();", "originalCommit": "79268a3a1140b772232fe891f703eb6bcadc1b2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMTU3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7157#discussion_r471601570", "bodyText": "Than you for letting me know about your PR\nI will wait for your PR to be landed, and then I will use your code in this one.", "author": "spacether", "createdAt": "2020-08-17T16:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Njc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5d019b64f0657c2bee0bfb937d74f6f1b01709f", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\nindex 86b4205e33d..a7f66def902 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java\n\n@@ -56,7 +56,6 @@ import static org.openapitools.codegen.utils.StringUtils.underscore;\n \n public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n     private static final Logger LOGGER = LoggerFactory.getLogger(PythonClientExperimentalCodegen.class);\n-    private Map<String, Schema> modelNameToSchema = new HashMap<String, Schema>();\n \n     public PythonClientExperimentalCodegen() {\n         super();\n"}}, {"oid": "a5d019b64f0657c2bee0bfb937d74f6f1b01709f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a5d019b64f0657c2bee0bfb937d74f6f1b01709f", "message": "Adds example setting code in python-experimental with one fn setting example values\n\nFixes sample indentations\n\nHandles composed schema models, object model and arraymodels\n\nAdds brackets in arraymodel input\n\nSets modelName with map schemas\n\nRemoves included_schemas arguments, dicriminator examples do not include property examples\n\nRefactors modelName into toExampleValueRecursive argument\n\nFixes bug where example models contained themselves\n\nStops using model ExampleGenerator examples because they are inconsistent with the ones in python-experimental\n\nUses example values if they exist\n\nRemoves single quotes from enum examples\n\nFixes password example\n\nAdds commented our regex handling, commented out because it breaks\n\nHandles AnyType schema examples\n\nAdds x_example values for simple string properties, uses toExampleValue for all example generation\n\nAdds examples for simple string parameters\n\nUpdates comments in toExampleValueBase\n\nFixes the double nested bug for AdditionalPropertiesWithArrayOfEnums\n\nFixes bug where NumberWithValidations had double nesting\n\nUpdates simple string examples in arrays\n\nFixes array string examples\n\nFixes example for string endpoint body example\n\nAdds exampleFromStringOrArraySchema\n\nAdds regex examples, pegs slf4j-version to v1.7.29 for rgxgen\n\nAdds comment about regex seed\n\nUpdates pattern matcher to not handle ^ and $\n\nUpdates used sample values\n\nAdds ensureQuotes\n\nAdds ensureQuotes\n\nFixes double quote bug\n\nUpdates mustache file\n\nAdds ensureQuotes to key handling\n\nAdds modelNameToSchema map, reduces run time by using it\n\nFixes java tests\n\nRegenerates python-experimental samples\n\nFixes python test", "committedDate": "2020-08-18T19:25:30Z", "type": "forcePushed"}, {"oid": "24aad07717e52c27245fa57f5e31476d876ba95b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/24aad07717e52c27245fa57f5e31476d876ba95b", "message": "Adds example setting code in python-experimental with one fn setting example values\n\nFixes sample indentations\n\nHandles composed schema models, object model and arraymodels\n\nAdds brackets in arraymodel input\n\nSets modelName with map schemas\n\nRemoves included_schemas arguments, dicriminator examples do not include property examples\n\nRefactors modelName into toExampleValueRecursive argument\n\nFixes bug where example models contained themselves\n\nStops using model ExampleGenerator examples because they are inconsistent with the ones in python-experimental\n\nUses example values if they exist\n\nRemoves single quotes from enum examples\n\nFixes password example\n\nAdds commented our regex handling, commented out because it breaks\n\nHandles AnyType schema examples\n\nAdds x_example values for simple string properties, uses toExampleValue for all example generation\n\nAdds examples for simple string parameters\n\nUpdates comments in toExampleValueBase\n\nFixes the double nested bug for AdditionalPropertiesWithArrayOfEnums\n\nFixes bug where NumberWithValidations had double nesting\n\nUpdates simple string examples in arrays\n\nFixes array string examples\n\nFixes example for string endpoint body example\n\nAdds exampleFromStringOrArraySchema\n\nAdds regex examples, pegs slf4j-version to v1.7.29 for rgxgen\n\nAdds comment about regex seed\n\nUpdates pattern matcher to not handle ^ and $\n\nUpdates used sample values\n\nAdds ensureQuotes\n\nAdds ensureQuotes\n\nFixes double quote bug\n\nUpdates mustache file\n\nAdds ensureQuotes to key handling\n\nAdds modelNameToSchema map, reduces run time by using it\n\nFixes java tests\n\nRegenerates python-experimental samples\n\nFixes python test", "committedDate": "2020-08-19T15:50:05Z", "type": "commit"}, {"oid": "dcf0f0973847a32e9a4981bb4641ed218462b476", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dcf0f0973847a32e9a4981bb4641ed218462b476", "message": "Rebased on master", "committedDate": "2020-08-19T15:50:05Z", "type": "commit"}, {"oid": "fa5ac8ba936a58924a3fa536c7bd192dbf2a2675", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fa5ac8ba936a58924a3fa536c7bd192dbf2a2675", "message": "Adds getModelNameToSchemaCache", "committedDate": "2020-08-19T15:50:05Z", "type": "commit"}, {"oid": "fa5ac8ba936a58924a3fa536c7bd192dbf2a2675", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fa5ac8ba936a58924a3fa536c7bd192dbf2a2675", "message": "Adds getModelNameToSchemaCache", "committedDate": "2020-08-19T15:50:05Z", "type": "forcePushed"}, {"oid": "5a4469b32d503b2461694f53fc3e0dac756f709d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5a4469b32d503b2461694f53fc3e0dac756f709d", "message": "Updates toDefaultValue to not mutate schemas", "committedDate": "2020-08-20T01:47:45Z", "type": "commit"}, {"oid": "412db5dac5499b106900c2f80be71f3fdb06941d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/412db5dac5499b106900c2f80be71f3fdb06941d", "message": "Has all dates and datetimes default and example setting use the same helper function", "committedDate": "2020-08-20T03:31:46Z", "type": "commit"}, {"oid": "69e7cc558c019b5f6471ac205d4d8895af75c24a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/69e7cc558c019b5f6471ac205d4d8895af75c24a", "message": "Samples regenerated", "committedDate": "2020-08-20T03:41:38Z", "type": "commit"}, {"oid": "35126636cb31e3fde74f159ed46df39ef2730abf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/35126636cb31e3fde74f159ed46df39ef2730abf", "message": "indentation tweak, removes txt from sample file", "committedDate": "2020-08-20T03:49:59Z", "type": "commit"}]}