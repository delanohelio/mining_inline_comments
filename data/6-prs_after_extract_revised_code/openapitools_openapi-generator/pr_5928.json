{"pr_number": 5928, "pr_title": "[Rust Server] Bugfix #5947 multi tag generate multi method issue.", "pr_createdAt": "2020-04-14T12:27:31Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5928", "timeline": [{"oid": "48bc89e3aa7d6a7f883e923911816d8176b4e451", "url": "https://github.com/OpenAPITools/openapi-generator/commit/48bc89e3aa7d6a7f883e923911816d8176b4e451", "message": "[Rust Server] Add test case yaml with multi tag.", "committedDate": "2020-04-16T02:42:11Z", "type": "forcePushed"}, {"oid": "846fd4148dd74d23897f6fc6f5808e88add69dea", "url": "https://github.com/OpenAPITools/openapi-generator/commit/846fd4148dd74d23897f6fc6f5808e88add69dea", "message": "[Rust Server] Add test case yaml with multi tag.", "committedDate": "2020-04-16T06:30:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQyNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5928#discussion_r411631425", "bodyText": "I don't think this is a warning - this is a perfectly fine situation to exist.\nAlso, I think we should say additional, not repeating.", "author": "richardwhiuk", "createdAt": "2020-04-20T19:24:05Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "diffHunk": "@@ -1056,6 +1056,26 @@ public boolean isDataTypeFile(final String dataType) {\n         return dataType != null && dataType.equals(typeMapping.get(\"File\").toString());\n     }\n \n+    /**\n+     * Add operation to group\n+     *\n+     * @param tag          name of the tag\n+     * @param resourcePath path of the resource\n+     * @param operation    OAS Operation object\n+     * @param co           Codegen Operation object\n+     * @param operations   map of Codegen operations\n+     */\n+    @SuppressWarnings(\"static-method\")\n+    public void addOperationToGroup(String tag, String resourcePath, Operation operation, CodegenOperation\n+            co, Map<String, List<CodegenOperation>> operations) {\n+        // only generate operation for the first tag of the tags\n+        if (tag != null && co.tags.size() > 1 && !tag.equals(co.tags.get(0).getName())) {\n+            LOGGER.warn(\"generated skip operationId `\" + co.operationId + \"` with the repeating tag=\" + tag);", "originalCommit": "846fd4148dd74d23897f6fc6f5808e88add69dea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyOTEwMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5928#discussion_r412629102", "bodyText": "LOGGER.info(\"generated skip additional tag \" + tag + \" with operationId=\" + co.operationId);", "author": "paladinzh", "createdAt": "2020-04-22T02:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "60db9aa6bc8d9e829e68072b10f3d7529bac21f9", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java\nindex 0803dc319a1..2fd3712b811 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java\n\n@@ -1066,11 +1066,12 @@ public class RustServerCodegen extends DefaultCodegen implements CodegenConfig {\n      * @param operations   map of Codegen operations\n      */\n     @SuppressWarnings(\"static-method\")\n+    @Override\n     public void addOperationToGroup(String tag, String resourcePath, Operation operation, CodegenOperation\n             co, Map<String, List<CodegenOperation>> operations) {\n         // only generate operation for the first tag of the tags\n         if (tag != null && co.tags.size() > 1 && !tag.equals(co.tags.get(0).getName())) {\n-            LOGGER.warn(\"generated skip operationId `\" + co.operationId + \"` with the repeating tag=\" + tag);\n+            LOGGER.info(\"generated skip additional tag `\" + tag + \"` with operationId=\" + co.operationId);\n             return;\n         }\n         super.addOperationToGroup(tag, resourcePath, operation, co, operations);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTcxNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5928#discussion_r411631716", "bodyText": "Can you add an @Override annotation here? That way if the method we are overloading changes, we'll get a compile error.", "author": "richardwhiuk", "createdAt": "2020-04-20T19:24:38Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "diffHunk": "@@ -1056,6 +1056,26 @@ public boolean isDataTypeFile(final String dataType) {\n         return dataType != null && dataType.equals(typeMapping.get(\"File\").toString());\n     }\n \n+    /**\n+     * Add operation to group\n+     *\n+     * @param tag          name of the tag\n+     * @param resourcePath path of the resource\n+     * @param operation    OAS Operation object\n+     * @param co           Codegen Operation object\n+     * @param operations   map of Codegen operations\n+     */\n+    @SuppressWarnings(\"static-method\")", "originalCommit": "846fd4148dd74d23897f6fc6f5808e88add69dea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMzM0OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5928#discussion_r412623348", "bodyText": "ok. I will add it.", "author": "paladinzh", "createdAt": "2020-04-22T02:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMTcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "60db9aa6bc8d9e829e68072b10f3d7529bac21f9", "chunk": "diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java\nindex 0803dc319a1..2fd3712b811 100644\n--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java\n+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java\n\n@@ -1066,11 +1066,12 @@ public class RustServerCodegen extends DefaultCodegen implements CodegenConfig {\n      * @param operations   map of Codegen operations\n      */\n     @SuppressWarnings(\"static-method\")\n+    @Override\n     public void addOperationToGroup(String tag, String resourcePath, Operation operation, CodegenOperation\n             co, Map<String, List<CodegenOperation>> operations) {\n         // only generate operation for the first tag of the tags\n         if (tag != null && co.tags.size() > 1 && !tag.equals(co.tags.get(0).getName())) {\n-            LOGGER.warn(\"generated skip operationId `\" + co.operationId + \"` with the repeating tag=\" + tag);\n+            LOGGER.info(\"generated skip additional tag `\" + tag + \"` with operationId=\" + co.operationId);\n             return;\n         }\n         super.addOperationToGroup(tag, resourcePath, operation, co, operations);\n"}}, {"oid": "60db9aa6bc8d9e829e68072b10f3d7529bac21f9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/60db9aa6bc8d9e829e68072b10f3d7529bac21f9", "message": "[Rust Server] Fix multi tag generate multi method issue.", "committedDate": "2020-04-22T02:44:38Z", "type": "commit"}, {"oid": "0146766b213193dd6eb5179e73e8928db76ace5e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0146766b213193dd6eb5179e73e8928db76ace5e", "message": "[Rust Server] Add test case yaml with multi tag.", "committedDate": "2020-04-22T02:44:56Z", "type": "commit"}, {"oid": "0146766b213193dd6eb5179e73e8928db76ace5e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0146766b213193dd6eb5179e73e8928db76ace5e", "message": "[Rust Server] Add test case yaml with multi tag.", "committedDate": "2020-04-22T02:44:56Z", "type": "forcePushed"}]}