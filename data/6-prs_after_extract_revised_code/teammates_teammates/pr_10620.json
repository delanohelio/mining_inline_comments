{"pr_number": 10620, "pr_title": "[#10397] Create API for receiving all responses of a feedback question", "pr_createdAt": "2020-08-17T23:27:03Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10620", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDEzNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10620#discussion_r471850137", "bodyText": "Don't forget javadoc", "author": "xpdavid", "createdAt": "2020-08-18T00:44:48Z", "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackQuestionDetails.java", "diffHunk": "@@ -63,6 +63,8 @@ public boolean isIndividualResponsesShownToStudents() {\n      */\n     public abstract List<String> validateQuestionDetails();\n \n+    public abstract List<String> validateResponsesDetails(List<FeedbackResponseDetails> responseDetails);", "originalCommit": "1095aea151653fcfeb06ac4b6a3638754bf87cef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08fe25f6e8104067b7da66c7257d11f114feecb9", "chunk": "diff --git a/src/main/java/teammates/common/datatransfer/questions/FeedbackQuestionDetails.java b/src/main/java/teammates/common/datatransfer/questions/FeedbackQuestionDetails.java\nindex 719ea8178a..9cf1b22e06 100644\n--- a/src/main/java/teammates/common/datatransfer/questions/FeedbackQuestionDetails.java\n+++ b/src/main/java/teammates/common/datatransfer/questions/FeedbackQuestionDetails.java\n\n@@ -63,7 +63,12 @@ public abstract class FeedbackQuestionDetails {\n      */\n     public abstract List<String> validateQuestionDetails();\n \n-    public abstract List<String> validateResponsesDetails(List<FeedbackResponseDetails> responseDetails);\n+    /**\n+     * Validates the list of response details.\n+     * @return A {@code List<String>} of error messages (to show as status message to user) if any, or an\n+     *         empty list if all response details are valid.\n+     */\n+    public abstract List<String> validateResponsesDetails(List<FeedbackResponseDetails> responseDetails, int numRecipients);\n \n     /**\n      * Validates if giverType and recipientType are valid for the question type.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MDkxNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10620#discussion_r471850917", "bodyText": "Can we inherit the doc for deleteFeedbackResponsesForQuestion in feedbackResponsesLogic", "author": "xpdavid", "createdAt": "2020-08-18T00:47:50Z", "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -1487,4 +1487,9 @@ public int getNumOfGeneratedChoicesForParticipantType(String courseId, FeedbackP\n         return feedbackQuestionsLogic.getNumOfGeneratedChoicesForParticipantType(courseId, generateOptionsFor);\n     }\n \n+    public void deleteFeedbackResponsesForQuestion(String feedbackQuestionId) {", "originalCommit": "67d6feaf68aac713c1bf90f4a234418894e40a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08fe25f6e8104067b7da66c7257d11f114feecb9", "chunk": "diff --git a/src/main/java/teammates/logic/api/Logic.java b/src/main/java/teammates/logic/api/Logic.java\nindex 3f6234dc91..cae6d58459 100644\n--- a/src/main/java/teammates/logic/api/Logic.java\n+++ b/src/main/java/teammates/logic/api/Logic.java\n\n@@ -1487,6 +1487,11 @@ public class Logic {\n         return feedbackQuestionsLogic.getNumOfGeneratedChoicesForParticipantType(courseId, generateOptionsFor);\n     }\n \n+    /**\n+     * Deletes all feedback responses of a question cascade its associated comments.\n+     *\n+     * @see FeedbackResponsesLogic#deleteFeedbackResponsesForQuestionCascade(String)\n+     */\n     public void deleteFeedbackResponsesForQuestion(String feedbackQuestionId) {\n         Assumption.assertNotNull(feedbackQuestionId);\n         feedbackResponsesLogic.deleteFeedbackResponsesForQuestionCascade(feedbackQuestionId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1NTk2Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10620#discussion_r471855967", "bodyText": "I don't recommend to use map as API request. It is too abstract and there is no way to tell the structure immediately even looking at the class itself.\nInstead, I think it should accept a list of FeedbackResponseRequest where there are two field recipientIdentifier  and responseDetails.", "author": "xpdavid", "createdAt": "2020-08-18T01:06:55Z", "path": "src/main/java/teammates/ui/webapi/request/FeedbackResponseSubmissionRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package teammates.ui.webapi.request;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import teammates.common.datatransfer.questions.FeedbackQuestionType;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.util.JsonUtils;\n+\n+/**\n+ * The basic request of modifying a feedback response.\n+ */\n+public class FeedbackResponseSubmissionRequest extends BasicRequest {\n+\n+    private FeedbackQuestionType questionType;\n+    private Map<String, Map<String, Object>> responseDetailsPerRecipient = new HashMap<>();", "originalCommit": "f62b8a9c292098a107ded00b1ad2a16f7757a3ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08fe25f6e8104067b7da66c7257d11f114feecb9", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/request/FeedbackResponseSubmissionRequest.java b/src/main/java/teammates/ui/webapi/request/FeedbackResponseSubmissionRequest.java\ndeleted file mode 100644\nindex 2fdda00ec3..0000000000\n--- a/src/main/java/teammates/ui/webapi/request/FeedbackResponseSubmissionRequest.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package teammates.ui.webapi.request;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import teammates.common.datatransfer.questions.FeedbackQuestionType;\n-import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n-import teammates.common.util.JsonUtils;\n-\n-/**\n- * The basic request of modifying a feedback response.\n- */\n-public class FeedbackResponseSubmissionRequest extends BasicRequest {\n-\n-    private FeedbackQuestionType questionType;\n-    private Map<String, Map<String, Object>> responseDetailsPerRecipient = new HashMap<>();\n-\n-    /**\n-     * Gets the question type of the response.\n-     */\n-    public FeedbackQuestionType getQuestionType() {\n-        // TODO remove this after migrate CONSTSUM to either CONSTSUM_OPTIONS or CONSTSUM_RECIPIENTS\n-        if (questionType == FeedbackQuestionType.CONSTSUM_OPTIONS\n-                || questionType == FeedbackQuestionType.CONSTSUM_RECIPIENTS) {\n-            return FeedbackQuestionType.CONSTSUM;\n-        }\n-        return questionType;\n-    }\n-\n-    public void setQuestionType(FeedbackQuestionType feedbackQuestionType) {\n-        this.questionType = feedbackQuestionType;\n-    }\n-\n-    /**\n-     * placeholder.\n-     */\n-    public Map<String, FeedbackResponseDetails> getResponseDetailsPerRecipient() {\n-        Map<String, FeedbackResponseDetails> responseDetails = new HashMap<>();\n-        responseDetailsPerRecipient.forEach((recipient, response) ->\n-                responseDetails.put(recipient,\n-                        JsonUtils.fromJson(JsonUtils.toJson(response), getQuestionType().getResponseDetailsClass())));\n-        return responseDetails;\n-    }\n-\n-    public Set<String> getRecipients() {\n-        return responseDetailsPerRecipient.keySet();\n-    }\n-\n-    /**\n-     * placeholder.\n-     */\n-    public void setResponseDetailsPerRecipient(Map<String, FeedbackResponseDetails> responseDetailsPerRecipient) {\n-        Map<String, Map<String, Object>> responseDetails = new HashMap<>();\n-        responseDetails.forEach((recipient, response) ->\n-                responseDetails.put(recipient, JsonUtils.fromJson(JsonUtils.toJson(response), Map.class)));\n-        this.responseDetailsPerRecipient = responseDetails;\n-    }\n-\n-    @Override\n-    public void validate() {\n-        assertTrue(questionType != null, \"questionType cannot be null\");\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODMzNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10620#discussion_r471858336", "bodyText": "The above lines can be written as\nFeedbackResponseAttributes.UpdateOptions options = XXXX (Line 148 - 154)\nFeedbackResponseAttributes updatedResponse = new FeedbackResponseAttributes(feedbackResponse);\nupdatedResponse.update(options)\nfeedbackResponsesToValidate.add(updatedResponse)", "author": "xpdavid", "createdAt": "2020-08-18T01:15:36Z", "path": "src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package teammates.ui.webapi.action;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.exception.EntityAlreadyExistsException;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.InvalidHttpRequestBodyException;\n+import teammates.common.exception.InvalidParametersException;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.output.FeedbackResponsesData;\n+import teammates.ui.webapi.request.FeedbackResponseSubmissionRequest;\n+import teammates.ui.webapi.request.Intent;\n+\n+/**\n+ * Submits a list of feedback responses to a feedback question.\n+ *\n+ * <p>This action is meant to completely overwrite the feedback responses that are previously attached to the\n+ * same feedback question.\n+ */\n+public class SubmitFeedbackResponsesAction extends BasicFeedbackSubmissionAction {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        String feedbackQuestionId = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+        FeedbackQuestionAttributes feedbackQuestion = logic.getFeedbackQuestion(feedbackQuestionId);\n+        if (feedbackQuestion == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"The feedback question does not exist.\"));\n+        }\n+        FeedbackSessionAttributes feedbackSession =\n+                logic.getFeedbackSession(feedbackQuestion.feedbackSessionName, feedbackQuestion.courseId);\n+\n+        verifyInstructorCanSeeQuestionIfInModeration(feedbackQuestion);\n+        verifySessionOpenExceptForModeration(feedbackSession);\n+        verifyNotPreview();\n+\n+        Map<String, String> recipientsOfTheQuestion;\n+        Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n+        switch (intent) {\n+        case STUDENT_SUBMISSION:\n+            gateKeeper.verifyAnswerableForStudent(feedbackQuestion);\n+            StudentAttributes studentAttributes = getStudentOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n+            recipientsOfTheQuestion = logic.getRecipientsOfQuestion(feedbackQuestion, null, studentAttributes);\n+            break;\n+        case INSTRUCTOR_SUBMISSION:\n+            gateKeeper.verifyAnswerableForInstructor(feedbackQuestion);\n+            InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n+            recipientsOfTheQuestion = logic.getRecipientsOfQuestion(feedbackQuestion, instructorAttributes, null);\n+            break;\n+        case INSTRUCTOR_RESULT:\n+        case STUDENT_RESULT:\n+            throw new InvalidHttpParameterException(\"Invalid intent for this action\");\n+        default:\n+            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);\n+        }\n+\n+        FeedbackResponseSubmissionRequest submitRequest = getAndValidateRequestBody(FeedbackResponseSubmissionRequest.class);\n+\n+        for (String recipient : submitRequest.getRecipients()) {\n+            if (!recipientsOfTheQuestion.containsKey(recipient)) {\n+                throw new UnauthorizedAccessException(\"The recipient is not a valid recipient of the question\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        String feedbackQuestionId = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+        FeedbackQuestionAttributes feedbackQuestion = logic.getFeedbackQuestion(feedbackQuestionId);\n+        if (feedbackQuestion == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"The feedback question does not exist.\"));\n+        }\n+\n+        FeedbackResponseSubmissionRequest submitRequest = getAndValidateRequestBody(FeedbackResponseSubmissionRequest.class);\n+\n+        if (submitRequest.getResponseDetailsPerRecipient().isEmpty()) {\n+            logic.deleteFeedbackResponsesForQuestion(feedbackQuestionId);\n+            return new JsonResult(new FeedbackResponsesData(new ArrayList<>()));\n+        }\n+\n+        List<FeedbackResponseAttributes> existingResponses;\n+\n+        String giverIdentifier;\n+        String giverSection;\n+        Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n+        switch (intent) {\n+        case STUDENT_SUBMISSION:\n+            StudentAttributes studentAttributes = getStudentOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            giverIdentifier =\n+                    feedbackQuestion.getGiverType() == FeedbackParticipantType.TEAMS\n+                            ? studentAttributes.getTeam() : studentAttributes.getEmail();\n+            giverSection = studentAttributes.getSection();\n+            existingResponses = logic.getFeedbackResponsesFromStudentOrTeamForQuestion(feedbackQuestion, studentAttributes);\n+            logic.populateFieldsToGenerateInQuestion(feedbackQuestion,\n+                    studentAttributes.getEmail(), studentAttributes.getTeam());\n+            break;\n+        case INSTRUCTOR_SUBMISSION:\n+            InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            giverIdentifier = instructorAttributes.getEmail();\n+            giverSection = Const.DEFAULT_SECTION;\n+            existingResponses = logic.getFeedbackResponsesFromInstructorForQuestion(feedbackQuestion, instructorAttributes);\n+            logic.populateFieldsToGenerateInQuestion(feedbackQuestion,\n+                    instructorAttributes.getEmail(), null);\n+            break;\n+        default:\n+            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);\n+        }\n+\n+        Map<String, FeedbackResponseAttributes> existingResponsesPerRecipient = new HashMap<>();\n+        existingResponses.forEach(response -> existingResponsesPerRecipient.put(response.getRecipient(), response));\n+        Map<String, FeedbackResponseDetails> responseDetailsPerRecipient = submitRequest.getResponseDetailsPerRecipient();\n+        List<FeedbackResponseAttributes> feedbackResponsesToValidate = new ArrayList<>();\n+        List<FeedbackResponseAttributes> feedbackResponsesToAdd = new ArrayList<>();\n+        List<FeedbackResponseAttributes.UpdateOptions> feedbackResponsesToUpdate = new ArrayList<>();\n+\n+        responseDetailsPerRecipient.forEach((recipient, responseDetails) -> {\n+            if (existingResponsesPerRecipient.containsKey(recipient)) {\n+                FeedbackResponseAttributes feedbackResponse = existingResponsesPerRecipient.get(recipient);\n+                feedbackResponse.giver = giverIdentifier;\n+                feedbackResponse.giverSection = giverSection;\n+                feedbackResponse.recipient = recipient;\n+                feedbackResponse.recipientSection =\n+                        getRecipientSection(feedbackQuestion.getCourseId(), feedbackQuestion.getGiverType(),\n+                                feedbackQuestion.getRecipientType(), recipient);\n+                feedbackResponse.responseDetails = responseDetails;\n+\n+                feedbackResponsesToValidate.add(feedbackResponse);", "originalCommit": "f62b8a9c292098a107ded00b1ad2a16f7757a3ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08fe25f6e8104067b7da66c7257d11f114feecb9", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java b/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java\nindex fbdec2181e..a86815f6ed 100644\n--- a/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java\n\n@@ -22,7 +22,7 @@ import teammates.common.exception.InvalidParametersException;\n import teammates.common.exception.UnauthorizedAccessException;\n import teammates.common.util.Const;\n import teammates.ui.webapi.output.FeedbackResponsesData;\n-import teammates.ui.webapi.request.FeedbackResponseSubmissionRequest;\n+import teammates.ui.webapi.request.FeedbackResponsesRequest;\n import teammates.ui.webapi.request.Intent;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODY1MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10620#discussion_r471858650", "bodyText": "Why we need set the ID manually? The ID should be updated correctly in the returned response. I believe the previous API is written before my improvement on DB layer.", "author": "xpdavid", "createdAt": "2020-08-18T01:16:53Z", "path": "src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java", "diffHunk": "@@ -0,0 +1,221 @@\n+package teammates.ui.webapi.action;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.exception.EntityAlreadyExistsException;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.InvalidHttpRequestBodyException;\n+import teammates.common.exception.InvalidParametersException;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.output.FeedbackResponsesData;\n+import teammates.ui.webapi.request.FeedbackResponseSubmissionRequest;\n+import teammates.ui.webapi.request.Intent;\n+\n+/**\n+ * Submits a list of feedback responses to a feedback question.\n+ *\n+ * <p>This action is meant to completely overwrite the feedback responses that are previously attached to the\n+ * same feedback question.\n+ */\n+public class SubmitFeedbackResponsesAction extends BasicFeedbackSubmissionAction {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        String feedbackQuestionId = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+        FeedbackQuestionAttributes feedbackQuestion = logic.getFeedbackQuestion(feedbackQuestionId);\n+        if (feedbackQuestion == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"The feedback question does not exist.\"));\n+        }\n+        FeedbackSessionAttributes feedbackSession =\n+                logic.getFeedbackSession(feedbackQuestion.feedbackSessionName, feedbackQuestion.courseId);\n+\n+        verifyInstructorCanSeeQuestionIfInModeration(feedbackQuestion);\n+        verifySessionOpenExceptForModeration(feedbackSession);\n+        verifyNotPreview();\n+\n+        Map<String, String> recipientsOfTheQuestion;\n+        Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n+        switch (intent) {\n+        case STUDENT_SUBMISSION:\n+            gateKeeper.verifyAnswerableForStudent(feedbackQuestion);\n+            StudentAttributes studentAttributes = getStudentOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n+            recipientsOfTheQuestion = logic.getRecipientsOfQuestion(feedbackQuestion, null, studentAttributes);\n+            break;\n+        case INSTRUCTOR_SUBMISSION:\n+            gateKeeper.verifyAnswerableForInstructor(feedbackQuestion);\n+            InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n+            recipientsOfTheQuestion = logic.getRecipientsOfQuestion(feedbackQuestion, instructorAttributes, null);\n+            break;\n+        case INSTRUCTOR_RESULT:\n+        case STUDENT_RESULT:\n+            throw new InvalidHttpParameterException(\"Invalid intent for this action\");\n+        default:\n+            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);\n+        }\n+\n+        FeedbackResponseSubmissionRequest submitRequest = getAndValidateRequestBody(FeedbackResponseSubmissionRequest.class);\n+\n+        for (String recipient : submitRequest.getRecipients()) {\n+            if (!recipientsOfTheQuestion.containsKey(recipient)) {\n+                throw new UnauthorizedAccessException(\"The recipient is not a valid recipient of the question\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        String feedbackQuestionId = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+        FeedbackQuestionAttributes feedbackQuestion = logic.getFeedbackQuestion(feedbackQuestionId);\n+        if (feedbackQuestion == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"The feedback question does not exist.\"));\n+        }\n+\n+        FeedbackResponseSubmissionRequest submitRequest = getAndValidateRequestBody(FeedbackResponseSubmissionRequest.class);\n+\n+        if (submitRequest.getResponseDetailsPerRecipient().isEmpty()) {\n+            logic.deleteFeedbackResponsesForQuestion(feedbackQuestionId);\n+            return new JsonResult(new FeedbackResponsesData(new ArrayList<>()));\n+        }\n+\n+        List<FeedbackResponseAttributes> existingResponses;\n+\n+        String giverIdentifier;\n+        String giverSection;\n+        Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n+        switch (intent) {\n+        case STUDENT_SUBMISSION:\n+            StudentAttributes studentAttributes = getStudentOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            giverIdentifier =\n+                    feedbackQuestion.getGiverType() == FeedbackParticipantType.TEAMS\n+                            ? studentAttributes.getTeam() : studentAttributes.getEmail();\n+            giverSection = studentAttributes.getSection();\n+            existingResponses = logic.getFeedbackResponsesFromStudentOrTeamForQuestion(feedbackQuestion, studentAttributes);\n+            logic.populateFieldsToGenerateInQuestion(feedbackQuestion,\n+                    studentAttributes.getEmail(), studentAttributes.getTeam());\n+            break;\n+        case INSTRUCTOR_SUBMISSION:\n+            InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(feedbackQuestion.getCourseId());\n+            giverIdentifier = instructorAttributes.getEmail();\n+            giverSection = Const.DEFAULT_SECTION;\n+            existingResponses = logic.getFeedbackResponsesFromInstructorForQuestion(feedbackQuestion, instructorAttributes);\n+            logic.populateFieldsToGenerateInQuestion(feedbackQuestion,\n+                    instructorAttributes.getEmail(), null);\n+            break;\n+        default:\n+            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);\n+        }\n+\n+        Map<String, FeedbackResponseAttributes> existingResponsesPerRecipient = new HashMap<>();\n+        existingResponses.forEach(response -> existingResponsesPerRecipient.put(response.getRecipient(), response));\n+        Map<String, FeedbackResponseDetails> responseDetailsPerRecipient = submitRequest.getResponseDetailsPerRecipient();\n+        List<FeedbackResponseAttributes> feedbackResponsesToValidate = new ArrayList<>();\n+        List<FeedbackResponseAttributes> feedbackResponsesToAdd = new ArrayList<>();\n+        List<FeedbackResponseAttributes.UpdateOptions> feedbackResponsesToUpdate = new ArrayList<>();\n+\n+        responseDetailsPerRecipient.forEach((recipient, responseDetails) -> {\n+            if (existingResponsesPerRecipient.containsKey(recipient)) {\n+                FeedbackResponseAttributes feedbackResponse = existingResponsesPerRecipient.get(recipient);\n+                feedbackResponse.giver = giverIdentifier;\n+                feedbackResponse.giverSection = giverSection;\n+                feedbackResponse.recipient = recipient;\n+                feedbackResponse.recipientSection =\n+                        getRecipientSection(feedbackQuestion.getCourseId(), feedbackQuestion.getGiverType(),\n+                                feedbackQuestion.getRecipientType(), recipient);\n+                feedbackResponse.responseDetails = responseDetails;\n+\n+                feedbackResponsesToValidate.add(feedbackResponse);\n+                feedbackResponsesToUpdate.add(FeedbackResponseAttributes.updateOptionsBuilder(feedbackResponse.getId())\n+                        .withGiver(feedbackResponse.giver)\n+                        .withGiverSection(feedbackResponse.giverSection)\n+                        .withRecipient(feedbackResponse.recipient)\n+                        .withRecipientSection(feedbackResponse.recipientSection)\n+                        .withResponseDetails(feedbackResponse.getResponseDetails())\n+                        .build());\n+            } else {\n+                FeedbackResponseAttributes feedbackResponse = FeedbackResponseAttributes\n+                        .builder(feedbackQuestion.getId(), giverIdentifier, recipient)\n+                        .withGiverSection(giverSection)\n+                        .withRecipientSection(getRecipientSection(feedbackQuestion.getCourseId(),\n+                                feedbackQuestion.getGiverType(),\n+                                feedbackQuestion.getRecipientType(), recipient))\n+                        .withCourseId(feedbackQuestion.getCourseId())\n+                        .withFeedbackSessionName(feedbackQuestion.getFeedbackSessionName())\n+                        .withResponseDetails(responseDetails)\n+                        .build();\n+\n+                feedbackResponsesToValidate.add(feedbackResponse);\n+                feedbackResponsesToAdd.add(feedbackResponse);\n+            }\n+        });\n+\n+        validateResponsesOfQuestion(feedbackQuestion, feedbackResponsesToValidate);\n+\n+        List<FeedbackResponseAttributes> feedbackResponsesToDelete = existingResponsesPerRecipient.entrySet().stream()\n+                .filter(entry -> !responseDetailsPerRecipient.containsKey(entry.getKey()))\n+                .map(entry -> entry.getValue())\n+                .collect(Collectors.toList());\n+\n+        for (FeedbackResponseAttributes feedbackResponse : feedbackResponsesToDelete) {\n+            logic.deleteFeedbackResponseCascade(feedbackResponse.getId());\n+        }\n+\n+        List<FeedbackResponseAttributes> output = new ArrayList<>();\n+\n+        for (FeedbackResponseAttributes feedbackResponse : feedbackResponsesToAdd) {\n+            try {\n+                FeedbackResponseAttributes createdFeedbackResponse = logic.createFeedbackResponse(feedbackResponse);\n+                createdFeedbackResponse.setId(", "originalCommit": "f62b8a9c292098a107ded00b1ad2a16f7757a3ae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08fe25f6e8104067b7da66c7257d11f114feecb9", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java b/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java\nindex fbdec2181e..a86815f6ed 100644\n--- a/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/SubmitFeedbackResponsesAction.java\n\n@@ -22,7 +22,7 @@ import teammates.common.exception.InvalidParametersException;\n import teammates.common.exception.UnauthorizedAccessException;\n import teammates.common.util.Const;\n import teammates.ui.webapi.output.FeedbackResponsesData;\n-import teammates.ui.webapi.request.FeedbackResponseSubmissionRequest;\n+import teammates.ui.webapi.request.FeedbackResponsesRequest;\n import teammates.ui.webapi.request.Intent;\n \n /**\n"}}, {"oid": "08fe25f6e8104067b7da66c7257d11f114feecb9", "url": "https://github.com/TEAMMATES/teammates/commit/08fe25f6e8104067b7da66c7257d11f114feecb9", "message": "Add more rounding off and change modulo operator", "committedDate": "2020-08-18T10:57:34Z", "type": "forcePushed"}, {"oid": "0410f21870508c1c73a88d2a56d5e17da8d35cde", "url": "https://github.com/TEAMMATES/teammates/commit/0410f21870508c1c73a88d2a56d5e17da8d35cde", "message": "Add more rounding off and change modulo operator", "committedDate": "2020-08-19T02:55:47Z", "type": "forcePushed"}, {"oid": "7f55106d86128f0407170fbe3d17731138a47e9b", "url": "https://github.com/TEAMMATES/teammates/commit/7f55106d86128f0407170fbe3d17731138a47e9b", "message": "Move question type-specific response validation to QuestionDetails class", "committedDate": "2020-08-19T13:43:41Z", "type": "commit"}, {"oid": "493f03e67f79d63e95075d5326d07303c3cf2526", "url": "https://github.com/TEAMMATES/teammates/commit/493f03e67f79d63e95075d5326d07303c3cf2526", "message": "Add logic method to delete all feedback responses for a question", "committedDate": "2020-08-19T13:43:41Z", "type": "commit"}, {"oid": "3877b4f05ae8fc6ab4586a479af540c1ae57df41", "url": "https://github.com/TEAMMATES/teammates/commit/3877b4f05ae8fc6ab4586a479af540c1ae57df41", "message": "Unify API to submit session response per question", "committedDate": "2020-08-19T14:09:18Z", "type": "commit"}, {"oid": "3fe9401df6029a0633422883044b3d5ce9a9bcce", "url": "https://github.com/TEAMMATES/teammates/commit/3fe9401df6029a0633422883044b3d5ce9a9bcce", "message": "Add question-wide validation for constsum and rank recipient", "committedDate": "2020-08-19T14:09:18Z", "type": "commit"}, {"oid": "d8a85416c8d4e8b1d2675cb319b5b4534e97a099", "url": "https://github.com/TEAMMATES/teammates/commit/d8a85416c8d4e8b1d2675cb319b5b4534e97a099", "message": "Edit front-end to use new API endpoint structure", "committedDate": "2020-08-19T14:09:18Z", "type": "commit"}, {"oid": "fcf501d7fee27e61c7faf3dba6523b773020c6c3", "url": "https://github.com/TEAMMATES/teammates/commit/fcf501d7fee27e61c7faf3dba6523b773020c6c3", "message": "Remove usage of numOfConstSumOptions", "committedDate": "2020-08-19T14:09:18Z", "type": "commit"}, {"oid": "47cdc195178d49a4f4e69bd1eef51fa8463572d2", "url": "https://github.com/TEAMMATES/teammates/commit/47cdc195178d49a4f4e69bd1eef51fa8463572d2", "message": "Display only points per recipient for constsum recipient additional info", "committedDate": "2020-08-19T14:10:51Z", "type": "commit"}, {"oid": "a1634f374a08942a007d66325deac7a53be3bfa3", "url": "https://github.com/TEAMMATES/teammates/commit/a1634f374a08942a007d66325deac7a53be3bfa3", "message": "Allow erasing of answers", "committedDate": "2020-08-19T14:10:51Z", "type": "commit"}, {"oid": "e293894d0c401854a076bdb139f169e5707e6dc5", "url": "https://github.com/TEAMMATES/teammates/commit/e293894d0c401854a076bdb139f169e5707e6dc5", "message": "Add more rounding off and change modulo operator", "committedDate": "2020-08-19T14:10:51Z", "type": "commit"}, {"oid": "e293894d0c401854a076bdb139f169e5707e6dc5", "url": "https://github.com/TEAMMATES/teammates/commit/e293894d0c401854a076bdb139f169e5707e6dc5", "message": "Add more rounding off and change modulo operator", "committedDate": "2020-08-19T14:10:51Z", "type": "forcePushed"}, {"oid": "da5e0581b797dd509ab1900787a4bd4edbdb3544", "url": "https://github.com/TEAMMATES/teammates/commit/da5e0581b797dd509ab1900787a4bd4edbdb3544", "message": "Merge branch 'master' into 10397-question-wide-validation", "committedDate": "2020-08-20T10:55:56Z", "type": "commit"}]}