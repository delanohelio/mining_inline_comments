{"pr_number": 9967, "pr_title": "[#9956] Make dataBundle return the json of actual objects created in backend", "pr_createdAt": "2020-02-24T01:13:44Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/9967", "timeline": [{"oid": "d88343dd44bb21adcc6382872e7093d72bc35d3d", "url": "https://github.com/TEAMMATES/teammates/commit/d88343dd44bb21adcc6382872e7093d72bc35d3d", "message": "Make persistDataBundle return updated databundle", "committedDate": "2020-02-23T17:20:13Z", "type": "commit"}, {"oid": "d4d08a6b736b6cb980d26053dde7b8ead2b7a0c0", "url": "https://github.com/TEAMMATES/teammates/commit/d4d08a6b736b6cb980d26053dde7b8ead2b7a0c0", "message": "Add test for dataBundle updating its values", "committedDate": "2020-02-23T19:57:50Z", "type": "commit"}, {"oid": "3b25516c6e6fa72901d11b702a8fa8cc89904947", "url": "https://github.com/TEAMMATES/teammates/commit/3b25516c6e6fa72901d11b702a8fa8cc89904947", "message": "Make putDataBundle return updated json", "committedDate": "2020-02-23T20:49:43Z", "type": "commit"}, {"oid": "9441f7249adfe338fcdcb9579ac377b591338bef", "url": "https://github.com/TEAMMATES/teammates/commit/9441f7249adfe338fcdcb9579ac377b591338bef", "message": "Make LnP tests use updated data bundles", "committedDate": "2020-02-23T22:28:32Z", "type": "commit"}, {"oid": "ca071e6913402dcccdd5d6cf45b37ce1b2e0019a", "url": "https://github.com/TEAMMATES/teammates/commit/ca071e6913402dcccdd5d6cf45b37ce1b2e0019a", "message": "Fix tests and faulty logic", "committedDate": "2020-02-24T00:13:48Z", "type": "commit"}, {"oid": "69aff7d5c4411dd8f73bb23ed6ded49983dbd11a", "url": "https://github.com/TEAMMATES/teammates/commit/69aff7d5c4411dd8f73bb23ed6ded49983dbd11a", "message": "Lint fixes", "committedDate": "2020-02-24T01:02:03Z", "type": "commit"}, {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213", "url": "https://github.com/TEAMMATES/teammates/commit/75545c56e6df6b79635c05a4f87d0e084e361213", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-02-24T01:24:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzI4NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067284", "bodyText": "seems the logic can be simplified here?\nIs \"adding all accounts from 'newAccounts' that already exist in oldAccounts?\"", "author": "junming403", "createdAt": "2020-02-24T02:28:10Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {", "originalCommit": "75545c56e6df6b79635c05a4f87d0e084e361213", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNTU1OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383135559", "bodyText": "It is mapping back the accounts in newAccounts back to their original keys, by finding an corresponding account in the oldAccounts (which is the account before being added into the server)\nThe oldAccounts contain the Map<string, AccountAttributes> which contains the attributes before they were added into the server. NewAccounts contain a List of AccountAttributes, that contain the same objects as oldAccounts, but taken directly from the database after being added, which means that they have updated values that their respective counterparts in oldAccounts do not have.\nSince dataBundle uses Map to store the respective attributes, when we need to update the Attributes from the new ones directly from the database, we need to ensure that they get mapped back to the correct Key. This is because the external classes that uses databundle uses the keys to retrieve the attributes, and having the wrong attributes mapped to wrong keys will result in problems for those external classes.\nThe first problem is that when the values are passed into the database, key-value mapping is lost and we only have the list of attributes to work on. The second issue is that the old and new value aren't exactly equal, because the new attributes have some variables that are generated by the server (createdAt, and feedbackQuestionId are such variables). The third issue is that there seems to be no requirement for uniqueness for the attribute's variables, which means that there is no single variable that can be used to link the new attributes to the old attribute.\nI ended up with writing this n + 1 query to ensure that the updated attributes gets mapped back to the correct key, by comparing all possible relevant variables with the old values, that does not get changed by the database. It only affects tests so the performance impact won't be as significant, but I'm definitely open to using another approach if a better one exists.", "author": "daekoon", "createdAt": "2020-02-24T08:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1OTM0Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383659347", "bodyText": "In this case if you want to check if one entry in oldAccounts exists in newAccounts, probably hasing is a better idea? Currently the double nested loop seems to be not efficient (O(n^2))", "author": "junming403", "createdAt": "2020-02-25T05:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MjgxNw==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r384192817", "bodyText": "Updated logic to use hashing", "author": "daekoon", "createdAt": "2020-02-25T23:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex f0ab572b0a..366b932eba 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -142,21 +142,20 @@ public final class DataBundleLogic {\n \n     private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n         Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n         Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n \n+        for (int i = 0; i < newAccounts.size(); i++) {\n+            newAccountsMap.put(newAccounts.get(i), i);\n+        }\n+\n         for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n             String key = entry.getKey();\n             AccountAttributes value = entry.getValue();\n \n-            for (AccountAttributes cur : newAccounts) {\n-                if (customEquals(cur.email, value.email)\n-                            && customEquals(cur.name, value.name)\n-                            && customEquals(cur.institute, value.institute)\n-                            && customEquals(cur.googleId, value.googleId)) {\n-                    accounts.put(key, cur);\n-                    newAccounts.remove(cur);\n-                    break;\n-                }\n+            if (newAccountsMap.containsKey(value)) {\n+                int index = newAccountsMap.get(value);\n+                accounts.put(key, newAccounts.get(index));\n             }\n         }\n         dataBundle.accounts = accounts;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzM3NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067375", "bodyText": "same here\uff1f", "author": "junming403", "createdAt": "2020-02-24T02:28:50Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {", "originalCommit": "75545c56e6df6b79635c05a4f87d0e084e361213", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex f0ab572b0a..366b932eba 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -142,21 +142,20 @@ public final class DataBundleLogic {\n \n     private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n         Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n         Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n \n+        for (int i = 0; i < newAccounts.size(); i++) {\n+            newAccountsMap.put(newAccounts.get(i), i);\n+        }\n+\n         for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n             String key = entry.getKey();\n             AccountAttributes value = entry.getValue();\n \n-            for (AccountAttributes cur : newAccounts) {\n-                if (customEquals(cur.email, value.email)\n-                            && customEquals(cur.name, value.name)\n-                            && customEquals(cur.institute, value.institute)\n-                            && customEquals(cur.googleId, value.googleId)) {\n-                    accounts.put(key, cur);\n-                    newAccounts.remove(cur);\n-                    break;\n-                }\n+            if (newAccountsMap.containsKey(value)) {\n+                int index = newAccountsMap.get(value);\n+                accounts.put(key, newAccounts.get(index));\n             }\n         }\n         dataBundle.accounts = accounts;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzM5Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067393", "bodyText": "same here", "author": "junming403", "createdAt": "2020-02-24T02:29:00Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {", "originalCommit": "75545c56e6df6b79635c05a4f87d0e084e361213", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex f0ab572b0a..366b932eba 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -142,21 +142,20 @@ public final class DataBundleLogic {\n \n     private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n         Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n         Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n \n+        for (int i = 0; i < newAccounts.size(); i++) {\n+            newAccountsMap.put(newAccounts.get(i), i);\n+        }\n+\n         for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n             String key = entry.getKey();\n             AccountAttributes value = entry.getValue();\n \n-            for (AccountAttributes cur : newAccounts) {\n-                if (customEquals(cur.email, value.email)\n-                            && customEquals(cur.name, value.name)\n-                            && customEquals(cur.institute, value.institute)\n-                            && customEquals(cur.googleId, value.googleId)) {\n-                    accounts.put(key, cur);\n-                    newAccounts.remove(cur);\n-                    break;\n-                }\n+            if (newAccountsMap.containsKey(value)) {\n+                int index = newAccountsMap.get(value);\n+                accounts.put(key, newAccounts.get(index));\n             }\n         }\n         dataBundle.accounts = accounts;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzQwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067407", "bodyText": "same here", "author": "junming403", "createdAt": "2020-02-24T02:29:11Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {", "originalCommit": "75545c56e6df6b79635c05a4f87d0e084e361213", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex f0ab572b0a..366b932eba 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -142,21 +142,20 @@ public final class DataBundleLogic {\n \n     private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n         Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n         Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n \n+        for (int i = 0; i < newAccounts.size(); i++) {\n+            newAccountsMap.put(newAccounts.get(i), i);\n+        }\n+\n         for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n             String key = entry.getKey();\n             AccountAttributes value = entry.getValue();\n \n-            for (AccountAttributes cur : newAccounts) {\n-                if (customEquals(cur.email, value.email)\n-                            && customEquals(cur.name, value.name)\n-                            && customEquals(cur.institute, value.institute)\n-                            && customEquals(cur.googleId, value.googleId)) {\n-                    accounts.put(key, cur);\n-                    newAccounts.remove(cur);\n-                    break;\n-                }\n+            if (newAccountsMap.containsKey(value)) {\n+                int index = newAccountsMap.get(value);\n+                accounts.put(key, newAccounts.get(index));\n             }\n         }\n         dataBundle.accounts = accounts;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzQ5Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067497", "bodyText": "same here", "author": "junming403", "createdAt": "2020-02-24T02:30:00Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {\n+            String key = entry.getKey();\n+            InstructorAttributes value = entry.getValue();\n+\n+            for (InstructorAttributes cur : newInstructors) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.displayedName, value.displayedName)\n+                            && customEquals(cur.role, value.role)) {\n+                    instructors.put(key, cur);\n+                    newInstructors.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.instructors = instructors;\n+    }\n+\n+    private void updateDataBundleStudents(DataBundle dataBundle, List<StudentAttributes> newStudents) {\n+        Map<String, StudentAttributes> oldStudents = dataBundle.students;\n+        Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentAttributes> entry : oldStudents.entrySet()) {\n+            String key = entry.getKey();\n+            StudentAttributes value = entry.getValue();\n+\n+            for (StudentAttributes cur : newStudents) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.course, value.course)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.team, value.team)\n+                            && customEquals(cur.section, value.section)\n+                            && customEquals(cur.comments, value.comments)) {\n+                    students.put(key, cur);\n+                    newStudents.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.students = students;\n+    }\n+\n+    private void updateDataBundleFeedbackSessions(DataBundle dataBundle,\n+            List<FeedbackSessionAttributes> newFeedbackSessions) {\n+        Map<String, FeedbackSessionAttributes> oldFeedbackSessions = dataBundle.feedbackSessions;\n+        Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackSessionAttributes> entry : oldFeedbackSessions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackSessionAttributes value = entry.getValue();\n+\n+            for (FeedbackSessionAttributes cur : newFeedbackSessions) {", "originalCommit": "75545c56e6df6b79635c05a4f87d0e084e361213", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex f0ab572b0a..366b932eba 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -142,21 +142,20 @@ public final class DataBundleLogic {\n \n     private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n         Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n         Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n \n+        for (int i = 0; i < newAccounts.size(); i++) {\n+            newAccountsMap.put(newAccounts.get(i), i);\n+        }\n+\n         for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n             String key = entry.getKey();\n             AccountAttributes value = entry.getValue();\n \n-            for (AccountAttributes cur : newAccounts) {\n-                if (customEquals(cur.email, value.email)\n-                            && customEquals(cur.name, value.name)\n-                            && customEquals(cur.institute, value.institute)\n-                            && customEquals(cur.googleId, value.googleId)) {\n-                    accounts.put(key, cur);\n-                    newAccounts.remove(cur);\n-                    break;\n-                }\n+            if (newAccountsMap.containsKey(value)) {\n+                int index = newAccountsMap.get(value);\n+                accounts.put(key, newAccounts.get(index));\n             }\n         }\n         dataBundle.accounts = accounts;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzUwOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067509", "bodyText": "same here", "author": "junming403", "createdAt": "2020-02-24T02:30:05Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {\n+            String key = entry.getKey();\n+            InstructorAttributes value = entry.getValue();\n+\n+            for (InstructorAttributes cur : newInstructors) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.displayedName, value.displayedName)\n+                            && customEquals(cur.role, value.role)) {\n+                    instructors.put(key, cur);\n+                    newInstructors.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.instructors = instructors;\n+    }\n+\n+    private void updateDataBundleStudents(DataBundle dataBundle, List<StudentAttributes> newStudents) {\n+        Map<String, StudentAttributes> oldStudents = dataBundle.students;\n+        Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentAttributes> entry : oldStudents.entrySet()) {\n+            String key = entry.getKey();\n+            StudentAttributes value = entry.getValue();\n+\n+            for (StudentAttributes cur : newStudents) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.course, value.course)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.team, value.team)\n+                            && customEquals(cur.section, value.section)\n+                            && customEquals(cur.comments, value.comments)) {\n+                    students.put(key, cur);\n+                    newStudents.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.students = students;\n+    }\n+\n+    private void updateDataBundleFeedbackSessions(DataBundle dataBundle,\n+            List<FeedbackSessionAttributes> newFeedbackSessions) {\n+        Map<String, FeedbackSessionAttributes> oldFeedbackSessions = dataBundle.feedbackSessions;\n+        Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackSessionAttributes> entry : oldFeedbackSessions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackSessionAttributes value = entry.getValue();\n+\n+            for (FeedbackSessionAttributes cur : newFeedbackSessions) {\n+                if (customEquals(cur.getFeedbackSessionName(), value.getFeedbackSessionName())\n+                            && customEquals(cur.getCourseId(), value.getCourseId())\n+                            && customEquals(cur.getInstructions(), value.getInstructions())\n+                            && customEquals(cur.getCreatorEmail(), value.getCreatorEmail())) {\n+                    feedbackSessions.put(key, cur);\n+                    newFeedbackSessions.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.feedbackSessions = feedbackSessions;\n+    }\n+\n+    private void updateDataBundleFeedbackQuestions(DataBundle dataBundle,\n+                List<FeedbackQuestionAttributes> createdQuestions) {\n+        Map<String, FeedbackQuestionAttributes> oldFeedbackQuestions = dataBundle.feedbackQuestions;\n+        Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackQuestionAttributes> entry : oldFeedbackQuestions.entrySet()) {", "originalCommit": "75545c56e6df6b79635c05a4f87d0e084e361213", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex f0ab572b0a..366b932eba 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -142,21 +142,20 @@ public final class DataBundleLogic {\n \n     private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n         Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n         Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n \n+        for (int i = 0; i < newAccounts.size(); i++) {\n+            newAccountsMap.put(newAccounts.get(i), i);\n+        }\n+\n         for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n             String key = entry.getKey();\n             AccountAttributes value = entry.getValue();\n \n-            for (AccountAttributes cur : newAccounts) {\n-                if (customEquals(cur.email, value.email)\n-                            && customEquals(cur.name, value.name)\n-                            && customEquals(cur.institute, value.institute)\n-                            && customEquals(cur.googleId, value.googleId)) {\n-                    accounts.put(key, cur);\n-                    newAccounts.remove(cur);\n-                    break;\n-                }\n+            if (newAccountsMap.containsKey(value)) {\n+                int index = newAccountsMap.get(value);\n+                accounts.put(key, newAccounts.get(index));\n             }\n         }\n         dataBundle.accounts = accounts;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzUyOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067529", "bodyText": "same here", "author": "junming403", "createdAt": "2020-02-24T02:30:12Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {\n+            String key = entry.getKey();\n+            InstructorAttributes value = entry.getValue();\n+\n+            for (InstructorAttributes cur : newInstructors) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.displayedName, value.displayedName)\n+                            && customEquals(cur.role, value.role)) {\n+                    instructors.put(key, cur);\n+                    newInstructors.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.instructors = instructors;\n+    }\n+\n+    private void updateDataBundleStudents(DataBundle dataBundle, List<StudentAttributes> newStudents) {\n+        Map<String, StudentAttributes> oldStudents = dataBundle.students;\n+        Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentAttributes> entry : oldStudents.entrySet()) {\n+            String key = entry.getKey();\n+            StudentAttributes value = entry.getValue();\n+\n+            for (StudentAttributes cur : newStudents) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.course, value.course)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.team, value.team)\n+                            && customEquals(cur.section, value.section)\n+                            && customEquals(cur.comments, value.comments)) {\n+                    students.put(key, cur);\n+                    newStudents.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.students = students;\n+    }\n+\n+    private void updateDataBundleFeedbackSessions(DataBundle dataBundle,\n+            List<FeedbackSessionAttributes> newFeedbackSessions) {\n+        Map<String, FeedbackSessionAttributes> oldFeedbackSessions = dataBundle.feedbackSessions;\n+        Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackSessionAttributes> entry : oldFeedbackSessions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackSessionAttributes value = entry.getValue();\n+\n+            for (FeedbackSessionAttributes cur : newFeedbackSessions) {\n+                if (customEquals(cur.getFeedbackSessionName(), value.getFeedbackSessionName())\n+                            && customEquals(cur.getCourseId(), value.getCourseId())\n+                            && customEquals(cur.getInstructions(), value.getInstructions())\n+                            && customEquals(cur.getCreatorEmail(), value.getCreatorEmail())) {\n+                    feedbackSessions.put(key, cur);\n+                    newFeedbackSessions.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.feedbackSessions = feedbackSessions;\n+    }\n+\n+    private void updateDataBundleFeedbackQuestions(DataBundle dataBundle,\n+                List<FeedbackQuestionAttributes> createdQuestions) {\n+        Map<String, FeedbackQuestionAttributes> oldFeedbackQuestions = dataBundle.feedbackQuestions;\n+        Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackQuestionAttributes> entry : oldFeedbackQuestions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackQuestionAttributes value = entry.getValue();\n+\n+            for (FeedbackQuestionAttributes cur : createdQuestions) {\n+                if (customEquals(cur.feedbackSessionName, value.feedbackSessionName)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && cur.questionNumber == value.questionNumber) {\n+                    feedbackQuestions.put(key, cur);\n+                    createdQuestions.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.feedbackQuestions = feedbackQuestions;\n+    }\n+\n+    private void updateDataBundleFeedbackResponses(DataBundle dataBundle,\n+                List<FeedbackResponseAttributes> newFeedbackResponses) {\n+        Map<String, FeedbackResponseAttributes> oldFeedbackResponses = dataBundle.feedbackResponses;\n+        Map<String, FeedbackResponseAttributes> feedbackResponses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackResponseAttributes> entry : oldFeedbackResponses.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackResponseAttributes value = entry.getValue();", "originalCommit": "75545c56e6df6b79635c05a4f87d0e084e361213", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex f0ab572b0a..366b932eba 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -142,21 +142,20 @@ public final class DataBundleLogic {\n \n     private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n         Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n         Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n \n+        for (int i = 0; i < newAccounts.size(); i++) {\n+            newAccountsMap.put(newAccounts.get(i), i);\n+        }\n+\n         for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n             String key = entry.getKey();\n             AccountAttributes value = entry.getValue();\n \n-            for (AccountAttributes cur : newAccounts) {\n-                if (customEquals(cur.email, value.email)\n-                            && customEquals(cur.name, value.name)\n-                            && customEquals(cur.institute, value.institute)\n-                            && customEquals(cur.googleId, value.googleId)) {\n-                    accounts.put(key, cur);\n-                    newAccounts.remove(cur);\n-                    break;\n-                }\n+            if (newAccountsMap.containsKey(value)) {\n+                int index = newAccountsMap.get(value);\n+                accounts.put(key, newAccounts.get(index));\n             }\n         }\n         dataBundle.accounts = accounts;\n"}}, {"oid": "ecb13976a60b6f052e11f81a9920a3129f01b338", "url": "https://github.com/TEAMMATES/teammates/commit/ecb13976a60b6f052e11f81a9920a3129f01b338", "message": "Add hashcode method for related attributes", "committedDate": "2020-02-25T17:34:20Z", "type": "commit"}, {"oid": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "url": "https://github.com/TEAMMATES/teammates/commit/8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "message": "Add hash and equal method for attributes", "committedDate": "2020-02-25T23:22:06Z", "type": "commit"}, {"oid": "e1a6088a75e54da4e6bb35503523a6d4d4d4881e", "url": "https://github.com/TEAMMATES/teammates/commit/e1a6088a75e54da4e6bb35503523a6d4d4d4881e", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-05T08:58:28Z", "type": "commit"}, {"oid": "3b6146b62d1eac055f6c084dd29705ed2b1c4efe", "url": "https://github.com/TEAMMATES/teammates/commit/3b6146b62d1eac055f6c084dd29705ed2b1c4efe", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-08T03:44:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MzE3Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r390793173", "bodyText": "The function return two different things (json response or BACKDOOR_STATUS_FAILURE ) with different meanings which result in the hack in https://github.com/TEAMMATES/teammates/pull/9967/files#diff-6509e6ed4f2a3ea02c0d46c61b1ff10fR185. I think it is better to just throw exception for failing situation.", "author": "xpdavid", "createdAt": "2020-03-11T07:51:44Z", "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -215,8 +215,10 @@ public static String removeAndRestoreDataBundle(DataBundle dataBundle) {\n         removeDataBundle(dataBundle);\n         ResponseBodyAndCode putRequestOutput =\n                 executePostRequest(Const.ResourceURIs.DATABUNDLE, null, JsonUtils.toJson(dataBundle));\n-        return putRequestOutput.responseCode == HttpStatus.SC_OK\n-                ? Const.StatusCodes.BACKDOOR_STATUS_SUCCESS : Const.StatusCodes.BACKDOOR_STATUS_FAILURE;\n+        if (putRequestOutput.responseCode == HttpStatus.SC_OK) {\n+            return putRequestOutput.responseBody;", "originalCommit": "3b6146b62d1eac055f6c084dd29705ed2b1c4efe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MTY4Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393051686", "bodyText": "Updated code to throw exception when HTTP request fails for removeandupdateDataBundle", "author": "daekoon", "createdAt": "2020-03-16T14:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MzE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "49504d2b042bc20c8b1a3c06f4e00d7258de535a", "chunk": "diff --git a/src/e2e/java/teammates/e2e/util/BackDoor.java b/src/e2e/java/teammates/e2e/util/BackDoor.java\nindex 1b52022e08..a17fe5c7e2 100644\n--- a/src/e2e/java/teammates/e2e/util/BackDoor.java\n+++ b/src/e2e/java/teammates/e2e/util/BackDoor.java\n\n@@ -211,14 +213,14 @@ public final class BackDoor {\n      * However, removing the data bundle on teardown manually is not a perfect solution because two tests can concurrently\n      * access the same account and their data may get mixed up in the process. This is a major problem we need to address.\n      */\n-    public static String removeAndRestoreDataBundle(DataBundle dataBundle) {\n+    public static String removeAndRestoreDataBundle(DataBundle dataBundle) throws HttpRequestFailedException {\n         removeDataBundle(dataBundle);\n         ResponseBodyAndCode putRequestOutput =\n                 executePostRequest(Const.ResourceURIs.DATABUNDLE, null, JsonUtils.toJson(dataBundle));\n         if (putRequestOutput.responseCode == HttpStatus.SC_OK) {\n             return putRequestOutput.responseBody;\n         }\n-        return Const.StatusCodes.BACKDOOR_STATUS_FAILURE;\n+        throw new HttpRequestFailedException(\"Request failed with status code: \" + putRequestOutput.responseCode);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NjUxOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r390796519", "bodyText": "All the logic above looks the same? Why not writing a generic function?", "author": "xpdavid", "createdAt": "2020-03-11T07:59:55Z", "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,226 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);", "originalCommit": "3b6146b62d1eac055f6c084dd29705ed2b1c4efe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExMzM1Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393113356", "bodyText": "Updated all updateXXX methods into a generic function", "author": "daekoon", "createdAt": "2020-03-16T15:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NjUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c2293eec588f0a11399ec8c02ec8cce57318f376", "chunk": "diff --git a/src/main/java/teammates/logic/core/DataBundleLogic.java b/src/main/java/teammates/logic/core/DataBundleLogic.java\nindex 366b932eba..612e8bff19 100644\n--- a/src/main/java/teammates/logic/core/DataBundleLogic.java\n+++ b/src/main/java/teammates/logic/core/DataBundleLogic.java\n\n@@ -124,212 +125,40 @@ public final class DataBundleLogic {\n         List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n         List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n \n-        updateDataBundleAccounts(dataBundle, newAccounts);\n-\n-        updateDataBundleProfiles(dataBundle, newProfiles);\n-        updateDataBundleCourses(dataBundle, newCourses);\n-        updateDataBundleInstructors(dataBundle, newInstructors);\n-\n-        updateDataBundleStudents(dataBundle, newStudents);\n-        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n-        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n-        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n-        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+        updateDataBundleValue(newAccounts, dataBundle.accounts);\n+        updateDataBundleValue(newProfiles, dataBundle.profiles);\n+        updateDataBundleValue(newCourses, dataBundle.courses);\n+        updateDataBundleValue(newInstructors, dataBundle.instructors);\n+        updateDataBundleValue(newStudents, dataBundle.students);\n+        updateDataBundleValue(newFeedbackSessions, dataBundle.feedbackSessions);\n+        updateDataBundleValue(createdQuestions, dataBundle.feedbackQuestions);\n+        updateDataBundleValue(newFeedbackResponses, dataBundle.feedbackResponses);\n+        updateDataBundleValue(newFeedbackResponseComments, dataBundle.feedbackResponseComments);\n \n         return dataBundle;\n \n     }\n \n-    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n-        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n-        Map<AccountAttributes, Integer> newAccountsMap = new HashMap<>();\n-        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n-\n-        for (int i = 0; i < newAccounts.size(); i++) {\n-            newAccountsMap.put(newAccounts.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n-            String key = entry.getKey();\n-            AccountAttributes value = entry.getValue();\n-\n-            if (newAccountsMap.containsKey(value)) {\n-                int index = newAccountsMap.get(value);\n-                accounts.put(key, newAccounts.get(index));\n-            }\n-        }\n-        dataBundle.accounts = accounts;\n-    }\n-\n-    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n-        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n-        Map<StudentProfileAttributes, Integer> newProfilesMap = new HashMap<>();\n-        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n-\n-        for (int i = 0; i < newProfiles.size(); i++) {\n-            newProfilesMap.put(newProfiles.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n-            String key = entry.getKey();\n-            StudentProfileAttributes value = entry.getValue();\n-            if (newProfilesMap.containsKey(value)) {\n-                int index = newProfilesMap.get(value);\n-                profiles.put(key, newProfiles.get(index));\n-            }\n-        }\n-        dataBundle.profiles = profiles;\n-    }\n-\n-    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n-        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n-        Map<CourseAttributes, Integer> newCoursesMap = new HashMap<>();\n-        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n-\n-        for (int i = 0; i < newCourses.size(); i++) {\n-            newCoursesMap.put(newCourses.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n-            String key = entry.getKey();\n-            CourseAttributes value = entry.getValue();\n-            if (newCoursesMap.containsKey(value)) {\n-                int index = newCoursesMap.get(value);\n-                courses.put(key, newCourses.get(index));\n-            }\n-        }\n-        dataBundle.courses = courses;\n-    }\n-\n-    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n-        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n-        Map<InstructorAttributes, Integer> newInstructorsMap = new HashMap<>();\n-        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+    private <T extends EntityAttributes> void updateDataBundleValue(List<T> newValues, Map<String, T> oldValues) {\n+        Map<T, Integer> newValuesMap = new HashMap<>();\n+        Map<String, T> values = new LinkedHashMap<>();\n \n-        for (int i = 0; i < newInstructors.size(); i++) {\n-            newInstructorsMap.put(newInstructors.get(i), i);\n+        for (int i = 0; i < newValues.size(); i++) {\n+            newValuesMap.put(newValues.get(i), i);\n         }\n \n-        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {\n+        for (Map.Entry<String, T> entry : oldValues.entrySet()) {\n             String key = entry.getKey();\n-            InstructorAttributes value = entry.getValue();\n+            T value = entry.getValue();\n \n-            if (newInstructorsMap.containsKey(value)) {\n-                int index = newInstructorsMap.get(value);\n-                instructors.put(key, newInstructors.get(index));\n+            if (newValuesMap.containsKey(value)) {\n+                int index = newValuesMap.get(value);\n+                values.put(key, newValues.get(index));\n             }\n         }\n-        dataBundle.instructors = instructors;\n-    }\n-\n-    private void updateDataBundleStudents(DataBundle dataBundle, List<StudentAttributes> newStudents) {\n-        Map<String, StudentAttributes> oldStudents = dataBundle.students;\n-        Map<StudentAttributes, Integer> newStudentsMap = new HashMap<>();\n-        Map<String, StudentAttributes> students = new LinkedHashMap<>();\n \n-        for (int i = 0; i < newStudents.size(); i++) {\n-            newStudentsMap.put(newStudents.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, StudentAttributes> entry : oldStudents.entrySet()) {\n-            String key = entry.getKey();\n-            StudentAttributes value = entry.getValue();\n-\n-            if (newStudentsMap.containsKey(value)) {\n-                int index = newStudentsMap.get(value);\n-                students.put(key, newStudents.get(index));\n-            }\n-        }\n-        dataBundle.students = students;\n-    }\n-\n-    private void updateDataBundleFeedbackSessions(DataBundle dataBundle,\n-            List<FeedbackSessionAttributes> newFeedbackSessions) {\n-        Map<String, FeedbackSessionAttributes> oldFeedbackSessions = dataBundle.feedbackSessions;\n-        Map<FeedbackSessionAttributes, Integer> newFeedbackSessionsMap = new HashMap<>();\n-        Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n-\n-        for (int i = 0; i < newFeedbackSessions.size(); i++) {\n-            newFeedbackSessionsMap.put(newFeedbackSessions.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, FeedbackSessionAttributes> entry : oldFeedbackSessions.entrySet()) {\n-            String key = entry.getKey();\n-            FeedbackSessionAttributes value = entry.getValue();\n-\n-            if (newFeedbackSessionsMap.containsKey(value)) {\n-                int index = newFeedbackSessionsMap.get(value);\n-                feedbackSessions.put(key, newFeedbackSessions.get(index));\n-            }\n-        }\n-        dataBundle.feedbackSessions = feedbackSessions;\n-    }\n-\n-    private void updateDataBundleFeedbackQuestions(DataBundle dataBundle,\n-                List<FeedbackQuestionAttributes> createdQuestions) {\n-        Map<String, FeedbackQuestionAttributes> oldFeedbackQuestions = dataBundle.feedbackQuestions;\n-        Map<FeedbackQuestionAttributes, Integer> newFeedbackQuestionsMap = new HashMap<>();\n-        Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n-\n-        for (int i = 0; i < createdQuestions.size(); i++) {\n-            newFeedbackQuestionsMap.put(createdQuestions.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, FeedbackQuestionAttributes> entry : oldFeedbackQuestions.entrySet()) {\n-            String key = entry.getKey();\n-            FeedbackQuestionAttributes value = entry.getValue();\n-\n-            if (newFeedbackQuestionsMap.containsKey(value)) {\n-                int index = newFeedbackQuestionsMap.get(value);\n-                feedbackQuestions.put(key, createdQuestions.get(index));\n-            }\n-        }\n-        dataBundle.feedbackQuestions = feedbackQuestions;\n-    }\n-\n-    private void updateDataBundleFeedbackResponses(DataBundle dataBundle,\n-                List<FeedbackResponseAttributes> newFeedbackResponses) {\n-        Map<String, FeedbackResponseAttributes> oldFeedbackResponses = dataBundle.feedbackResponses;\n-        Map<FeedbackResponseAttributes, Integer> newFeedbackResponsesMap = new HashMap<>();\n-        Map<String, FeedbackResponseAttributes> feedbackResponses = new LinkedHashMap<>();\n-\n-        for (int i = 0; i < newFeedbackResponses.size(); i++) {\n-            newFeedbackResponsesMap.put(newFeedbackResponses.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, FeedbackResponseAttributes> entry : oldFeedbackResponses.entrySet()) {\n-            String key = entry.getKey();\n-            FeedbackResponseAttributes value = entry.getValue();\n-\n-            if (newFeedbackResponsesMap.containsKey(value)) {\n-                int index = newFeedbackResponsesMap.get(value);\n-                feedbackResponses.put(key, newFeedbackResponses.get(index));\n-            }\n-        }\n-        dataBundle.feedbackResponses = feedbackResponses;\n-    }\n-\n-    private void updateDataBundleFeedbackResponseComments(DataBundle dataBundle,\n-                List<FeedbackResponseCommentAttributes> newFeedbackResponseComments) {\n-        Map<String, FeedbackResponseCommentAttributes> oldFeedbackResponseComments =\n-                dataBundle.feedbackResponseComments;\n-        Map<FeedbackResponseCommentAttributes, Integer> newFeedbackResponseCommentsMap = new HashMap<>();\n-        Map<String, FeedbackResponseCommentAttributes> feedbackResponseComments = new LinkedHashMap<>();\n-\n-        for (int i = 0; i < newFeedbackResponseComments.size(); i++) {\n-            newFeedbackResponseCommentsMap.put(newFeedbackResponseComments.get(i), i);\n-        }\n-\n-        for (Map.Entry<String, FeedbackResponseCommentAttributes> entry : oldFeedbackResponseComments.entrySet()) {\n-            String key = entry.getKey();\n-            FeedbackResponseCommentAttributes value = entry.getValue();\n-\n-            if (newFeedbackResponseCommentsMap.containsKey(value)) {\n-                int index = newFeedbackResponseCommentsMap.get(value);\n-                feedbackResponseComments.put(key, newFeedbackResponseComments.get(index));\n-            }\n-        }\n-        dataBundle.feedbackResponseComments = feedbackResponseComments;\n+        oldValues.clear();\n+        oldValues.putAll(values);\n     }\n \n     /**\n"}}, {"oid": "11ae5def98c064332a7ba73379296a2bb5a6b04d", "url": "https://github.com/TEAMMATES/teammates/commit/11ae5def98c064332a7ba73379296a2bb5a6b04d", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-16T09:20:41Z", "type": "commit"}, {"oid": "49504d2b042bc20c8b1a3c06f4e00d7258de535a", "url": "https://github.com/TEAMMATES/teammates/commit/49504d2b042bc20c8b1a3c06f4e00d7258de535a", "message": "Update removeAndRestoreDataBundle to throw exception when request fails", "committedDate": "2020-03-16T14:13:45Z", "type": "commit"}, {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376", "url": "https://github.com/TEAMMATES/teammates/commit/c2293eec588f0a11399ec8c02ec8cce57318f376", "message": "Compress all updateXXX methods into a single generic method", "committedDate": "2020-03-16T15:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTE0NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393151145", "bodyText": "Just a nit: The whole message body can be the json. Don't use a specific field to hold them (magic \"message\" field) .", "author": "xpdavid", "createdAt": "2020-03-16T16:27:42Z", "path": "src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java", "diffHunk": "@@ -162,18 +163,27 @@ protected void createTestData() {\n         LNPTestData testData = getTestData();\n         try {\n             createJsonDataFile(testData);\n+            persistTestData();\n             createCsvConfigDataFile(testData);\n-        } catch (IOException ex) {\n+        } catch (IOException | HttpRequestFailedException ex) {\n             log.severe(TeammatesException.toStringWithStackTrace(ex));\n         }\n     }\n \n     /**\n      * Creates the entities in the datastore from the JSON data file.\n      */\n-    protected void persistTestData() {\n+    protected void persistTestData() throws IOException, HttpRequestFailedException {\n         DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n-        BackDoor.removeAndRestoreDataBundle(dataBundle);\n+        String responseBody = \"\";\n+        responseBody = BackDoor.removeAndRestoreDataBundle(dataBundle);\n+\n+        String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n+        String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();", "originalCommit": "c2293eec588f0a11399ec8c02ec8cce57318f376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NDY4OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r394544688", "bodyText": "From what I checked, in order to be able to return the entire DataBundle object as json I need to create a new DataBundleData class that extends ApiOutput, and converts all the values into xxxData. I checked through the various xxxData classes, and my concern is that some of the classes does not have the same structure as their respective xxxAttributes.\nFor example, the class FeedbackQuestionData converts the two fields, showResponsesTo and showGiverNameTo, which are FeedbackParticipantType class, into FeedbackVisibilityType class. I'm worried that using xxxData will have unintended side effect - should we proceed with this? (Removing the magic \"message\" field)", "author": "daekoon", "createdAt": "2020-03-18T18:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NjYwNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r394546604", "bodyText": "I am not suggestion to use xxxData. Let me rephrase the question, why there is message key here?", "author": "xpdavid", "createdAt": "2020-03-18T18:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NTA2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r394555062", "bodyText": "This is a behaviour from the PutDataBundleAction.java, method execute().\nLink to code\nThe execute() method has to return a JsonResult object. JsonResult class has 4 constructors :\npublic JsonResult(ApiOutput output) { }\npublic JsonResult(ApiOutput output, List<Cookie> cookies) { }\npublic JsonResult(String message) { }\npublic JsonResult(String message, int statusCode) {}\n\nAs for now I'm returning the String converted, it will use the 3rd constructor which creates a MessageOutput object with my json String as the message. Which is why the message key is used in the json return value.\nIn order to use the ApiOutput I need to create the DataBundleData class, but now that I think about it the message body will still be returned under the \"DataBundle\" key even if I do that.\nI've tried looking around to find a way to remove the extra key (basically pass the entire json string by itself), but I couldn't find it so far. Not sure whether creating an entire group of extra classes just to get rid of the extra key is going to be worth it either.", "author": "daekoon", "createdAt": "2020-03-18T18:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0e3df1c1ebf04de7d605c6051defc50357055ae", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java b/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java\nindex 04e4338236..4e0c019825 100644\n--- a/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java\n+++ b/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java\n\n@@ -180,10 +181,7 @@ public abstract class BaseLNPTestCase extends BaseTestCase {\n \n         String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n         String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();\n-        try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(pathToResultFile))) {\n-            bw.write(jsonValue);\n-            bw.flush();\n-        }\n+        FileHelper.saveFile(pathToResultFile, jsonValue);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTUzNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393151535", "bodyText": "I think you can try FileHelper.saveFile", "author": "xpdavid", "createdAt": "2020-03-16T16:28:18Z", "path": "src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java", "diffHunk": "@@ -162,18 +163,27 @@ protected void createTestData() {\n         LNPTestData testData = getTestData();\n         try {\n             createJsonDataFile(testData);\n+            persistTestData();\n             createCsvConfigDataFile(testData);\n-        } catch (IOException ex) {\n+        } catch (IOException | HttpRequestFailedException ex) {\n             log.severe(TeammatesException.toStringWithStackTrace(ex));\n         }\n     }\n \n     /**\n      * Creates the entities in the datastore from the JSON data file.\n      */\n-    protected void persistTestData() {\n+    protected void persistTestData() throws IOException, HttpRequestFailedException {\n         DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n-        BackDoor.removeAndRestoreDataBundle(dataBundle);\n+        String responseBody = \"\";\n+        responseBody = BackDoor.removeAndRestoreDataBundle(dataBundle);\n+\n+        String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n+        String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();\n+        try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(pathToResultFile))) {", "originalCommit": "c2293eec588f0a11399ec8c02ec8cce57318f376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3ODc4NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r394578784", "bodyText": "Updated method to use filehelper", "author": "daekoon", "createdAt": "2020-03-18T19:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0e3df1c1ebf04de7d605c6051defc50357055ae", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java b/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java\nindex 04e4338236..4e0c019825 100644\n--- a/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java\n+++ b/src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java\n\n@@ -180,10 +181,7 @@ public abstract class BaseLNPTestCase extends BaseTestCase {\n \n         String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n         String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();\n-        try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(pathToResultFile))) {\n-            bw.write(jsonValue);\n-            bw.flush();\n-        }\n+        FileHelper.saveFile(pathToResultFile, jsonValue);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjEwOA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393152108", "bodyText": "It OK to use IOException I think.", "author": "xpdavid", "createdAt": "2020-03-16T16:29:10Z", "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -212,12 +213,14 @@ private static void addAuthKeys(HttpRequestBase request) {\n      * However, removing the data bundle on teardown manually is not a perfect solution because two tests can concurrently\n      * access the same account and their data may get mixed up in the process. This is a major problem we need to address.\n      */\n-    public static String removeAndRestoreDataBundle(DataBundle dataBundle) {\n+    public static String removeAndRestoreDataBundle(DataBundle dataBundle) throws HttpRequestFailedException {\n         removeDataBundle(dataBundle);\n         ResponseBodyAndCode putRequestOutput =\n                 executePostRequest(Const.ResourceURIs.DATABUNDLE, null, JsonUtils.toJson(dataBundle));\n-        return putRequestOutput.responseCode == HttpStatus.SC_OK\n-                ? Const.StatusCodes.BACKDOOR_STATUS_SUCCESS : Const.StatusCodes.BACKDOOR_STATUS_FAILURE;\n+        if (putRequestOutput.responseCode == HttpStatus.SC_OK) {\n+            return putRequestOutput.responseBody;\n+        }\n+        throw new HttpRequestFailedException(\"Request failed with status code: \" + putRequestOutput.responseCode);", "originalCommit": "c2293eec588f0a11399ec8c02ec8cce57318f376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMzA3NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r394403075", "bodyText": "I felt that Http requests should use a separate exception because they aren't exactly IO, and you might want to handle them separately if you need to.", "author": "daekoon", "createdAt": "2020-03-18T14:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjEwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MzkzOA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393153938", "bodyText": "I think you should put the method into EntityAttributes since it is about comparison between attributes. In addition, please don't call it as customEquals. The name is not constructive as how \"custom\" is \"custom\". A name such as equalsWithNullComparaision (of course it is not a ideal name) is far better than customEquals.", "author": "xpdavid", "createdAt": "2020-03-16T16:32:04Z", "path": "src/main/java/teammates/common/util/CustomLogic.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package teammates.common.util;\n+\n+/**\n+ * Stores various custom logic that are used across classes.\n+ */\n+public final class CustomLogic {\n+\n+    private CustomLogic() {\n+        // utility class\n+    }\n+\n+    /**\n+     * Custom equals method that is able to handle null objects.\n+     * @param first first object to be compared\n+     * @param second second object to be compared\n+     * @return true of both objects are null or equal, false otherwise.\n+     */\n+    public static boolean customEquals(Object first, Object second) {", "originalCommit": "c2293eec588f0a11399ec8c02ec8cce57318f376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMzk3NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r394603975", "bodyText": "Moved custom equals method to EntityAttributes, and renamed it to reflect its purpose more clearly", "author": "daekoon", "createdAt": "2020-03-18T19:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MzkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "9735aa6086f4c7f4cfdfa30bb997b430e7bacf16", "chunk": "diff --git a/src/main/java/teammates/common/util/CustomLogic.java b/src/main/java/teammates/common/util/CustomLogic.java\ndeleted file mode 100644\nindex 2740f1b161..0000000000\n--- a/src/main/java/teammates/common/util/CustomLogic.java\n+++ /dev/null\n\n@@ -1,26 +0,0 @@\n-package teammates.common.util;\n-\n-/**\n- * Stores various custom logic that are used across classes.\n- */\n-public final class CustomLogic {\n-\n-    private CustomLogic() {\n-        // utility class\n-    }\n-\n-    /**\n-     * Custom equals method that is able to handle null objects.\n-     * @param first first object to be compared\n-     * @param second second object to be compared\n-     * @return true of both objects are null or equal, false otherwise.\n-     */\n-    public static boolean customEquals(Object first, Object second) {\n-        if (first == null && second == null) {\n-            return true;\n-        } else if (first == null || second == null) {\n-            return false;\n-        }\n-        return first.equals(second);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NDU0OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393154549", "bodyText": "Don't forget to write test for the equals method.", "author": "xpdavid", "createdAt": "2020-03-16T16:32:58Z", "path": "src/main/java/teammates/common/datatransfer/attributes/FeedbackResponseAttributes.java", "diffHunk": "@@ -168,6 +170,28 @@ public String toString() {\n                 + \", answer=\" + getSerializedFeedbackResponseDetail() + \"]\";\n     }\n \n+    @Override\n+    public int hashCode() {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(this.feedbackSessionName).append(this.courseId)\n+                .append(this.feedbackQuestionId).append(this.giver).append(this.recipient);\n+        return stringBuilder.toString().hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {", "originalCommit": "c2293eec588f0a11399ec8c02ec8cce57318f376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MzA3NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r394693074", "bodyText": "Added tests for the equals method", "author": "daekoon", "createdAt": "2020-03-18T23:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NDU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9735aa6086f4c7f4cfdfa30bb997b430e7bacf16", "chunk": "diff --git a/src/main/java/teammates/common/datatransfer/attributes/FeedbackResponseAttributes.java b/src/main/java/teammates/common/datatransfer/attributes/FeedbackResponseAttributes.java\nindex f118e9329a..f4aa0e73ec 100644\n--- a/src/main/java/teammates/common/datatransfer/attributes/FeedbackResponseAttributes.java\n+++ b/src/main/java/teammates/common/datatransfer/attributes/FeedbackResponseAttributes.java\n\n@@ -182,11 +180,11 @@ public class FeedbackResponseAttributes extends EntityAttributes<FeedbackRespons\n     public boolean equals(Object other) {\n         if (this.getClass() == other.getClass()) {\n             FeedbackResponseAttributes otherFeedbackResponse = (FeedbackResponseAttributes) other;\n-            return customEquals(this.feedbackSessionName, otherFeedbackResponse.feedbackSessionName)\n-                    && customEquals(this.courseId, otherFeedbackResponse.courseId)\n-                    && customEquals(this.feedbackQuestionId, otherFeedbackResponse.feedbackQuestionId)\n-                    && customEquals(this.giver, otherFeedbackResponse.giver)\n-                    && customEquals(this.recipient, otherFeedbackResponse.recipient);\n+            return nullableDataEquals(this.feedbackSessionName, otherFeedbackResponse.feedbackSessionName)\n+                    && nullableDataEquals(this.courseId, otherFeedbackResponse.courseId)\n+                    && nullableDataEquals(this.feedbackQuestionId, otherFeedbackResponse.feedbackQuestionId)\n+                    && nullableDataEquals(this.giver, otherFeedbackResponse.giver)\n+                    && nullableDataEquals(this.recipient, otherFeedbackResponse.recipient);\n         } else {\n             return false;\n         }\n"}}, {"oid": "f0e3df1c1ebf04de7d605c6051defc50357055ae", "url": "https://github.com/TEAMMATES/teammates/commit/f0e3df1c1ebf04de7d605c6051defc50357055ae", "message": "Update BaseLnPTestCase to use FileHelper", "committedDate": "2020-03-18T19:08:23Z", "type": "commit"}, {"oid": "9735aa6086f4c7f4cfdfa30bb997b430e7bacf16", "url": "https://github.com/TEAMMATES/teammates/commit/9735aa6086f4c7f4cfdfa30bb997b430e7bacf16", "message": "Move custom equals class to EntityAttribute class", "committedDate": "2020-03-18T19:56:55Z", "type": "commit"}, {"oid": "5f2d07e5a292c504440bba1b583758d865c6811b", "url": "https://github.com/TEAMMATES/teammates/commit/5f2d07e5a292c504440bba1b583758d865c6811b", "message": "Fix lint", "committedDate": "2020-03-18T20:21:52Z", "type": "commit"}, {"oid": "58dff4bfa3b7f6582cfbc17b3d2f3b534b8d0835", "url": "https://github.com/TEAMMATES/teammates/commit/58dff4bfa3b7f6582cfbc17b3d2f3b534b8d0835", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-18T21:37:41Z", "type": "commit"}, {"oid": "d147ac0f787cc277c2c78169c0f8314cf2a188e4", "url": "https://github.com/TEAMMATES/teammates/commit/d147ac0f787cc277c2c78169c0f8314cf2a188e4", "message": "Add test for equals method", "committedDate": "2020-03-18T23:06:03Z", "type": "commit"}, {"oid": "44615e0e96157f4f73a7979c822d731e121bd02e", "url": "https://github.com/TEAMMATES/teammates/commit/44615e0e96157f4f73a7979c822d731e121bd02e", "message": "Merge branch '9956-dataBundle-returns-actual-object-in-database' of github.com:daekoon/teammates into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-18T23:06:18Z", "type": "commit"}, {"oid": "33b6ad32f2410ce3c2d555e9e7a6794503185653", "url": "https://github.com/TEAMMATES/teammates/commit/33b6ad32f2410ce3c2d555e9e7a6794503185653", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-23T04:09:04Z", "type": "commit"}, {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de", "url": "https://github.com/TEAMMATES/teammates/commit/8f55a933c78a2c019fd08ee03aeeb9a69ff297de", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-23T05:10:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNjAxNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r396226014", "bodyText": "I think there is a way such that this (usage of magic string message) can be mitigated. Let me get back to you later.", "author": "wkurniawan07", "createdAt": "2020-03-23T05:54:59Z", "path": "src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java", "diffHunk": "@@ -162,18 +164,24 @@ protected void createTestData() {\n         LNPTestData testData = getTestData();\n         try {\n             createJsonDataFile(testData);\n+            persistTestData();\n             createCsvConfigDataFile(testData);\n-        } catch (IOException ex) {\n+        } catch (IOException | HttpRequestFailedException ex) {\n             log.severe(TeammatesException.toStringWithStackTrace(ex));\n         }\n     }\n \n     /**\n      * Creates the entities in the datastore from the JSON data file.\n      */\n-    protected void persistTestData() {\n+    protected void persistTestData() throws IOException, HttpRequestFailedException {\n         DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n-        BackDoor.removeAndRestoreDataBundle(dataBundle);\n+        String responseBody = \"\";\n+        responseBody = BackDoor.removeAndRestoreDataBundle(dataBundle);\n+\n+        String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n+        String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();", "originalCommit": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTIwOA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r396855208", "bodyText": "Actually, you can use Objects.equals from java.util.Objects", "author": "xpdavid", "createdAt": "2020-03-24T01:33:49Z", "path": "src/main/java/teammates/common/datatransfer/attributes/EntityAttributes.java", "diffHunk": "@@ -55,6 +55,21 @@ public void addNonEmptyError(String error, List<String> errors) {\n         errors.add(error);\n     }\n \n+    /**\n+     * Custom equals method that is able to handle null objects.\n+     * @param first first object to be compared\n+     * @param second second object to be compared\n+     * @return true of both objects are null or equal, false otherwise.\n+     */\n+    protected boolean nullableDataEquals(Object first, Object second) {", "originalCommit": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MDcwNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r397170705", "bodyText": "Replaced all usage of nullableDataEquals with Objects.equals", "author": "daekoon", "createdAt": "2020-03-24T13:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MzE1NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r398763154", "bodyText": "You can remove the method also?", "author": "xpdavid", "createdAt": "2020-03-26T17:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "72066d4f330f3072ae01d0cf1b1f896d941262b8", "chunk": "diff --git a/src/main/java/teammates/common/datatransfer/attributes/EntityAttributes.java b/src/main/java/teammates/common/datatransfer/attributes/EntityAttributes.java\nindex 32c4b457a4..eb6ce3e04e 100644\n--- a/src/main/java/teammates/common/datatransfer/attributes/EntityAttributes.java\n+++ b/src/main/java/teammates/common/datatransfer/attributes/EntityAttributes.java\n\n@@ -62,12 +63,16 @@ public abstract class EntityAttributes<E extends BaseEntity> {\n      * @return true of both objects are null or equal, false otherwise.\n      */\n     protected boolean nullableDataEquals(Object first, Object second) {\n+\n+        return Objects.equals(first, second);\n+        /*\n         if (first == null && second == null) {\n             return true;\n         } else if (first == null || second == null) {\n             return false;\n         }\n         return first.equals(second);\n+        */\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTY3Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r396855673", "bodyText": "You can test: hashCode() of objects should be equal if there are equal.", "author": "xpdavid", "createdAt": "2020-03-24T01:35:45Z", "path": "src/test/java/teammates/test/cases/datatransfer/StudentProfileAttributesTest.java", "diffHunk": "@@ -295,6 +295,35 @@ public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError(\n                         .withPictureKey(null));\n     }\n \n+    @Test\n+    public void testEquals() {", "originalCommit": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MjY5MA==", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r397262690", "bodyText": "Added tests for hashCode()", "author": "daekoon", "createdAt": "2020-03-24T15:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d48ad4498e150d6c3bce89fac9aa5415b042a4d8", "chunk": "diff --git a/src/test/java/teammates/test/cases/datatransfer/StudentProfileAttributesTest.java b/src/test/java/teammates/test/cases/datatransfer/StudentProfileAttributesTest.java\nindex 7ed6535320..3074bfe752 100644\n--- a/src/test/java/teammates/test/cases/datatransfer/StudentProfileAttributesTest.java\n+++ b/src/test/java/teammates/test/cases/datatransfer/StudentProfileAttributesTest.java\n\n@@ -324,6 +324,33 @@ public class StudentProfileAttributesTest extends BaseAttributesTest {\n         assertFalse(profile.equals(3));\n     }\n \n+    @Test\n+    public void testHashCode() {\n+        // When the two student profiles are copies of each other, they should have the same hash code\n+        StudentProfileAttributes studentProfileCopy = profile.getCopy();\n+\n+        assertTrue(profile.hashCode() == studentProfileCopy.hashCode());\n+\n+        // When the two student profiles have same values but created at different time,\n+        // they should still have the same hash code\n+        StudentProfileAttributes studentProfileSimilar = StudentProfileAttributes.builder(VALID_GOOGLE_ID)\n+                .withShortName(\"shor\")\n+                .withInstitute(\"institute\")\n+                .withEmail(\"valid@email.com\")\n+                .withNationality(\"Lebanese\")\n+                .withGender(StudentProfileAttributes.Gender.FEMALE)\n+                .withMoreInfo(\"moreInfo can have a lot more than this...\")\n+                .withPictureKey(\"profile Pic Key\")\n+                .build();\n+\n+        assertTrue(profile.hashCode() == studentProfileSimilar.hashCode());\n+\n+        // When the two student profiles are different, they should have different hash code\n+        StudentProfileAttributes studentProfileDifferent = getStudentProfileAttributesToSanitize();\n+\n+        assertFalse(profile.hashCode() == studentProfileDifferent.hashCode());\n+    }\n+\n     // -------------------------------------------------------------------------------------------------------\n     // -------------------------------------- Helper Functions\n     // -----------------------------------------------\n"}}, {"oid": "72066d4f330f3072ae01d0cf1b1f896d941262b8", "url": "https://github.com/TEAMMATES/teammates/commit/72066d4f330f3072ae01d0cf1b1f896d941262b8", "message": "Change nullableObjectEquals to java's Objects.equal method", "committedDate": "2020-03-24T13:49:55Z", "type": "commit"}, {"oid": "90d3210d0b78885d4b88f32d9e3a5df5e6f417e4", "url": "https://github.com/TEAMMATES/teammates/commit/90d3210d0b78885d4b88f32d9e3a5df5e6f417e4", "message": "Merge branch '9956-dataBundle-returns-actual-object-in-database' of github.com:daekoon/teammates into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-24T13:50:16Z", "type": "commit"}, {"oid": "d48ad4498e150d6c3bce89fac9aa5415b042a4d8", "url": "https://github.com/TEAMMATES/teammates/commit/d48ad4498e150d6c3bce89fac9aa5415b042a4d8", "message": "Add tests for xxxAttributes' hash code", "committedDate": "2020-03-24T15:53:02Z", "type": "commit"}, {"oid": "b48d82a048f4ef3e27054e6c07cdedcee0d55b06", "url": "https://github.com/TEAMMATES/teammates/commit/b48d82a048f4ef3e27054e6c07cdedcee0d55b06", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database", "committedDate": "2020-03-26T14:21:49Z", "type": "commit"}, {"oid": "7654795161fcfcd76368f04e62bd7b5a37147744", "url": "https://github.com/TEAMMATES/teammates/commit/7654795161fcfcd76368f04e62bd7b5a37147744", "message": "Remove deprecated method nullableDataEquals", "committedDate": "2020-03-27T08:34:43Z", "type": "commit"}, {"oid": "eb4cfdc71f86f39fab8430db9c2f9ff989185f36", "url": "https://github.com/TEAMMATES/teammates/commit/eb4cfdc71f86f39fab8430db9c2f9ff989185f36", "message": "Remove unused import", "committedDate": "2020-03-27T09:02:28Z", "type": "commit"}]}