{"pr_number": 10696, "pr_title": "[#9536] Student Feedback Results Page E2E Test", "pr_createdAt": "2020-09-06T20:30:33Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10696", "timeline": [{"oid": "35e76a4c7d6e6698be6791fb88d04b002da02258", "url": "https://github.com/TEAMMATES/teammates/commit/35e76a4c7d6e6698be6791fb88d04b002da02258", "message": "Add StudentFeedbackResultsPageE2ETest", "committedDate": "2020-09-07T03:41:19Z", "type": "commit"}, {"oid": "682ad0a876faa352b8b0c1e5b9667e407069e871", "url": "https://github.com/TEAMMATES/teammates/commit/682ad0a876faa352b8b0c1e5b9667e407069e871", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into student-results-e2e", "committedDate": "2020-09-07T03:41:41Z", "type": "commit"}, {"oid": "682ad0a876faa352b8b0c1e5b9667e407069e871", "url": "https://github.com/TEAMMATES/teammates/commit/682ad0a876faa352b8b0c1e5b9667e407069e871", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into student-results-e2e", "committedDate": "2020-09-07T03:41:41Z", "type": "forcePushed"}, {"oid": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "url": "https://github.com/TEAMMATES/teammates/commit/eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into student-results-e2e\n\n# Conflicts:\n#\tsrc/e2e/java/teammates/e2e/cases/BaseTestCaseWithBackDoorApiAccess.java\n#\tsrc/e2e/resources/testng-e2e.xml\n#\tsrc/test/java/teammates/test/cases/browsertests/StudentFeedbackResultsPageUiTest.java", "committedDate": "2020-10-18T12:20:55Z", "type": "commit"}, {"oid": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "url": "https://github.com/TEAMMATES/teammates/commit/eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into student-results-e2e\n\n# Conflicts:\n#\tsrc/e2e/java/teammates/e2e/cases/BaseTestCaseWithBackDoorApiAccess.java\n#\tsrc/e2e/resources/testng-e2e.xml\n#\tsrc/test/java/teammates/test/cases/browsertests/StudentFeedbackResultsPageUiTest.java", "committedDate": "2020-10-18T12:20:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3Njc1Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511876753", "bodyText": "I think this one can benefit from checking the questions loaded as well. However unlikely it might be, we don't want a situation whereby the session details are loaded but the questions are not to pass here.", "author": "wkurniawan07", "createdAt": "2020-10-26T11:00:35Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#STUDENT_SESSION_RESULTS_PAGE}.\n+ */\n+public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n+    private StudentFeedbackResultsPage resultsPage;\n+    private FeedbackSessionAttributes openSession;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/StudentFeedbackResultsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        openSession = testData.feedbackSessions.get(\"Open Session\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"unregistered student can access results\");\n+        StudentAttributes unregistered = testData.students.get(\"Unregistered\");\n+        AppUrl url = createUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)\n+                .withCourseId(unregistered.course)\n+                .withStudentEmail(unregistered.email)\n+                .withSessionName(openSession.getFeedbackSessionName())\n+                .withRegistrationKey(getKeyForStudent(unregistered));\n+        logout();\n+        resultsPage = AppPage.getNewPageInstance(browser, url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0d306cc91b8134f3265fa64c8f84bb0bc0fead8", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\nindex 2a7d1d5d68..c448316fbc 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n\n@@ -26,6 +26,7 @@ import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n     private StudentFeedbackResultsPage resultsPage;\n     private FeedbackSessionAttributes openSession;\n+    private List<FeedbackQuestionAttributes> questions = new ArrayList<>();\n \n     @Override\n     protected void prepareTestData() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3NzUwMw==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511877503", "bodyText": "Parameter should be studentEmail", "author": "wkurniawan07", "createdAt": "2020-10-26T11:01:59Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#STUDENT_SESSION_RESULTS_PAGE}.\n+ */\n+public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n+    private StudentFeedbackResultsPage resultsPage;\n+    private FeedbackSessionAttributes openSession;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/StudentFeedbackResultsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        openSession = testData.feedbackSessions.get(\"Open Session\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"unregistered student can access results\");\n+        StudentAttributes unregistered = testData.students.get(\"Unregistered\");\n+        AppUrl url = createUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)\n+                .withCourseId(unregistered.course)\n+                .withStudentEmail(unregistered.email)\n+                .withSessionName(openSession.getFeedbackSessionName())\n+                .withRegistrationKey(getKeyForStudent(unregistered));\n+        logout();\n+        resultsPage = AppPage.getNewPageInstance(browser, url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"registered student can access results\");\n+        StudentAttributes student = testData.students.get(\"Alice\");\n+        url = createUrl(Const.WebPageURIs.STUDENT_SESSION_RESULTS_PAGE)\n+                .withUserId(student.googleId)\n+                .withCourseId(openSession.getCourseId())\n+                .withSessionName(openSession.getFeedbackSessionName());\n+        resultsPage = loginAdminToPage(url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"questions loaded\");\n+        for (int i = 1; i <= 11; i++) {\n+            resultsPage.verifyQuestionDetails(i, testData.feedbackQuestions.get(\"qn\" + i));\n+        }\n+\n+        ______TS(\"questions with no responses not shown\");\n+        resultsPage.verifyQuestionNotPresent(12);\n+\n+        ______TS(\"verify responses\");\n+        // qn11 is a contribution question so we only need to check the statistics for that question\n+        for (int i = 1; i <= 10; i++) {\n+            verifyResponseDetails(student, testData.feedbackQuestions.get(\"qn\" + i));\n+        }\n+\n+        ______TS(\"verify statistics - numscale\");\n+        resultsPage.verifyNumScaleStatistics(5, student, getReceivedResponses(student,\n+                testData.feedbackQuestions.get(\"qn5\")));\n+\n+        ______TS(\"verify statistics - rubric\");\n+        FeedbackQuestionAttributes rubricsQn = testData.feedbackQuestions.get(\"qn10\");\n+        resultsPage.verifyRubricStatistics(10, rubricsQn, getReceivedResponses(student, rubricsQn),\n+                getAllResponses(student, rubricsQn), getVisibleRecipients(student, rubricsQn), student,\n+                testData.students.values());\n+\n+        ______TS(\"verify statistics - contribution\");\n+        int[] expectedOwnStatistics = { 20, 50, -50 };\n+        int[] expectedTeamStatistics = { 71, -20, -31 };\n+        resultsPage.verifyContributionStatistics(11, expectedOwnStatistics, expectedTeamStatistics);\n+\n+        ______TS(\"verify comments\");\n+        verifyCommentDetails(2, testData.feedbackResponseComments.get(\"qn2Comment1\"), student);\n+        verifyCommentDetails(2, testData.feedbackResponseComments.get(\"qn2Comment2\"), student);\n+        verifyCommentDetails(3, testData.feedbackResponseComments.get(\"qn3Comment1\"), student);\n+        verifyCommentDetails(3, testData.feedbackResponseComments.get(\"qn3Comment2\"), student);\n+    }\n+\n+    private void verifyResponseDetails(StudentAttributes currentStudent, FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> givenResponses = getGivenResponses(currentStudent, question);\n+        List<FeedbackResponseAttributes> otherResponses = getOtherResponses(currentStudent, question);\n+        Set<String> visibleGivers = getVisibleGivers(currentStudent, question);\n+        Set<String> visibleRecipients = getVisibleRecipients(currentStudent, question);\n+        resultsPage.verifyResponseDetails(question, givenResponses, otherResponses, visibleGivers, visibleRecipients);\n+    }\n+\n+    private void verifyCommentDetails(int questionNum, FeedbackResponseCommentAttributes comment,\n+                                      StudentAttributes currentStudent) {\n+        String editor = \"\";\n+        String giver = \"\";\n+        if (comment.getLastEditorEmail() != null) {\n+            editor = getIdentifier(currentStudent, comment.getLastEditorEmail());\n+        }\n+        if (!comment.getCommentGiverType().equals(FeedbackParticipantType.STUDENTS)) {\n+            giver = getIdentifier(currentStudent, comment.getCommentGiver());\n+        }\n+        resultsPage.verifyCommentDetails(questionNum, giver, editor, comment.getCommentText());\n+    }\n+\n+    private List<FeedbackResponseAttributes> getGivenResponses(StudentAttributes currentStudent,\n+                                                               FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> givenResponses = testData.feedbackResponses.values().stream()\n+                .filter(f -> f.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber()))\n+                        && f.getGiver().equals(currentStudent.getEmail())\n+                        && !f.getRecipient().equals(currentStudent.getEmail()))\n+                .collect(Collectors.toList());\n+        return editIdentifiers(currentStudent, givenResponses);\n+    }\n+\n+    private List<FeedbackResponseAttributes> getOtherResponses(StudentAttributes currentStudent,\n+                                                               FeedbackQuestionAttributes question) {\n+        Set<String> visibleResponseGivers = getRelevantUsers(currentStudent, question.getShowResponsesTo());\n+        visibleResponseGivers.add(currentStudent.getEmail());\n+\n+        List<FeedbackResponseAttributes> questionResponses = testData.feedbackResponses.values().stream()\n+                .filter(fr -> fr.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber())))\n+                .collect(Collectors.toList());\n+\n+        List<FeedbackResponseAttributes> selfEvaluationResponses = questionResponses.stream()\n+                .filter(fr -> fr.getGiver().equals(currentStudent.email) && fr.getRecipient().equals(currentStudent.email))\n+                .collect(Collectors.toList());\n+\n+        List<FeedbackResponseAttributes> responsesByOthers = questionResponses.stream()\n+                .filter(fr -> !fr.getGiver().equals(currentStudent.email) && visibleResponseGivers.contains(fr.getGiver()))\n+                .collect(Collectors.toList());\n+\n+        List<FeedbackResponseAttributes> responsesToSelf = new ArrayList<>();\n+        if (visibleResponseGivers.contains(\"RECEIVER\")) {\n+            responsesToSelf = questionResponses.stream()\n+                    .filter(fr -> !fr.getGiver().equals(currentStudent.email)\n+                            && fr.getRecipient().equals(currentStudent.email))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        List<FeedbackResponseAttributes> otherResponses = new ArrayList<>();\n+        otherResponses.addAll(selfEvaluationResponses);\n+        otherResponses.addAll(responsesByOthers);\n+        otherResponses.addAll(responsesToSelf);\n+\n+        return editIdentifiers(currentStudent, otherResponses);\n+    }\n+\n+    private List<FeedbackResponseAttributes> getReceivedResponses(StudentAttributes currentStudent,\n+                                                                  FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> receivedResponses = testData.feedbackResponses.values().stream()\n+                .filter(f -> f.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber()))\n+                        && f.getRecipient().equals(currentStudent.getEmail()))\n+                .collect(Collectors.toList());\n+        return editIdentifiers(currentStudent, receivedResponses);\n+    }\n+\n+    private List<FeedbackResponseAttributes> getAllResponses(StudentAttributes currentStudent,\n+                                                             FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> allResponses = testData.feedbackResponses.values().stream()\n+                .filter(f -> f.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber())))\n+                .collect(Collectors.toList());\n+        return editIdentifiers(currentStudent, allResponses);\n+    }\n+\n+    private Set<String> getVisibleGivers(StudentAttributes currentStudent, FeedbackQuestionAttributes question) {\n+        return getRelevantUsers(currentStudent, question.getShowGiverNameTo()).stream()\n+                .map(user -> getIdentifier(currentStudent, user))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private Set<String> getVisibleRecipients(StudentAttributes currentStudent, FeedbackQuestionAttributes question) {\n+        return getRelevantUsers(currentStudent, question.getShowRecipientNameTo()).stream()\n+                .map(user -> getIdentifier(currentStudent, user))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private Set<String> getRelevantUsers(StudentAttributes giver, List<FeedbackParticipantType> relevantParticipants) {\n+        Set<String> relevantUsers = new HashSet<>();\n+        List<StudentAttributes> students = new ArrayList<>();\n+        if (relevantParticipants.contains(FeedbackParticipantType.STUDENTS)) {\n+            students.addAll(getOtherStudents(giver));\n+        } else if (relevantParticipants.contains(FeedbackParticipantType.OWN_TEAM_MEMBERS)) {\n+            students.addAll(getOtherTeammates(giver));\n+        }\n+        students.forEach(s -> relevantUsers.add(s.email));\n+        students.forEach(s -> relevantUsers.add(s.team));\n+\n+        if (relevantParticipants.contains(FeedbackParticipantType.RECEIVER)) {\n+            relevantUsers.add(\"RECEIVER\");\n+        }\n+\n+        return relevantUsers;\n+    }\n+\n+    private Set<StudentAttributes> getOtherTeammates(StudentAttributes currentStudent) {\n+        return testData.students.values().stream()\n+                .filter(s -> s.getTeam().equals(currentStudent.getTeam())\n+                && !s.equals(currentStudent))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private Set<StudentAttributes> getOtherStudents(StudentAttributes currentStudent) {\n+        return testData.students.values().stream()\n+                .filter(s -> s.getCourse().equals(currentStudent.getCourse())\n+                && !s.equals(currentStudent))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private List<FeedbackResponseAttributes> editIdentifiers(StudentAttributes currentStudent,\n+                                                             List<FeedbackResponseAttributes> responses) {\n+        List<FeedbackResponseAttributes> editedResponses = deepCopyResponses(responses);\n+        editedResponses.forEach(fr -> {\n+            fr.giver = getIdentifier(currentStudent, fr.getGiver());\n+            fr.recipient = getIdentifier(currentStudent, fr.getRecipient());\n+        });\n+        return editedResponses;\n+    }\n+\n+    private String getIdentifier(StudentAttributes currentStudent, String user) {\n+        if (currentStudent.getEmail().equals(user)) {\n+            return \"You\";\n+        }\n+        if (Const.GENERAL_QUESTION.equals(user)) {\n+            return Const.USER_NOBODY_TEXT;\n+        }\n+        if (user.equals(currentStudent.getTeam())) {\n+            return \"Your Team (\" + user + \")\";\n+        }\n+        String identifier = getInstructorName(user);\n+        if (identifier == null) {\n+            identifier = getStudentName(user);\n+        }\n+        if (identifier == null) {\n+            identifier = user;\n+        }\n+        return identifier;\n+    }\n+\n+    private String getStudentName(String student) {", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0d306cc91b8134f3265fa64c8f84bb0bc0fead8", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\nindex 2a7d1d5d68..c448316fbc 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n\n@@ -26,6 +26,7 @@ import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n     private StudentFeedbackResultsPage resultsPage;\n     private FeedbackSessionAttributes openSession;\n+    private List<FeedbackQuestionAttributes> questions = new ArrayList<>();\n \n     @Override\n     protected void prepareTestData() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3NzU2NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511877564", "bodyText": "Parameter should be instructorEmail", "author": "wkurniawan07", "createdAt": "2020-10-26T11:02:07Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#STUDENT_SESSION_RESULTS_PAGE}.\n+ */\n+public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n+    private StudentFeedbackResultsPage resultsPage;\n+    private FeedbackSessionAttributes openSession;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/StudentFeedbackResultsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        openSession = testData.feedbackSessions.get(\"Open Session\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"unregistered student can access results\");\n+        StudentAttributes unregistered = testData.students.get(\"Unregistered\");\n+        AppUrl url = createUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)\n+                .withCourseId(unregistered.course)\n+                .withStudentEmail(unregistered.email)\n+                .withSessionName(openSession.getFeedbackSessionName())\n+                .withRegistrationKey(getKeyForStudent(unregistered));\n+        logout();\n+        resultsPage = AppPage.getNewPageInstance(browser, url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"registered student can access results\");\n+        StudentAttributes student = testData.students.get(\"Alice\");\n+        url = createUrl(Const.WebPageURIs.STUDENT_SESSION_RESULTS_PAGE)\n+                .withUserId(student.googleId)\n+                .withCourseId(openSession.getCourseId())\n+                .withSessionName(openSession.getFeedbackSessionName());\n+        resultsPage = loginAdminToPage(url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"questions loaded\");\n+        for (int i = 1; i <= 11; i++) {\n+            resultsPage.verifyQuestionDetails(i, testData.feedbackQuestions.get(\"qn\" + i));\n+        }\n+\n+        ______TS(\"questions with no responses not shown\");\n+        resultsPage.verifyQuestionNotPresent(12);\n+\n+        ______TS(\"verify responses\");\n+        // qn11 is a contribution question so we only need to check the statistics for that question\n+        for (int i = 1; i <= 10; i++) {\n+            verifyResponseDetails(student, testData.feedbackQuestions.get(\"qn\" + i));\n+        }\n+\n+        ______TS(\"verify statistics - numscale\");\n+        resultsPage.verifyNumScaleStatistics(5, student, getReceivedResponses(student,\n+                testData.feedbackQuestions.get(\"qn5\")));\n+\n+        ______TS(\"verify statistics - rubric\");\n+        FeedbackQuestionAttributes rubricsQn = testData.feedbackQuestions.get(\"qn10\");\n+        resultsPage.verifyRubricStatistics(10, rubricsQn, getReceivedResponses(student, rubricsQn),\n+                getAllResponses(student, rubricsQn), getVisibleRecipients(student, rubricsQn), student,\n+                testData.students.values());\n+\n+        ______TS(\"verify statistics - contribution\");\n+        int[] expectedOwnStatistics = { 20, 50, -50 };\n+        int[] expectedTeamStatistics = { 71, -20, -31 };\n+        resultsPage.verifyContributionStatistics(11, expectedOwnStatistics, expectedTeamStatistics);\n+\n+        ______TS(\"verify comments\");\n+        verifyCommentDetails(2, testData.feedbackResponseComments.get(\"qn2Comment1\"), student);\n+        verifyCommentDetails(2, testData.feedbackResponseComments.get(\"qn2Comment2\"), student);\n+        verifyCommentDetails(3, testData.feedbackResponseComments.get(\"qn3Comment1\"), student);\n+        verifyCommentDetails(3, testData.feedbackResponseComments.get(\"qn3Comment2\"), student);\n+    }\n+\n+    private void verifyResponseDetails(StudentAttributes currentStudent, FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> givenResponses = getGivenResponses(currentStudent, question);\n+        List<FeedbackResponseAttributes> otherResponses = getOtherResponses(currentStudent, question);\n+        Set<String> visibleGivers = getVisibleGivers(currentStudent, question);\n+        Set<String> visibleRecipients = getVisibleRecipients(currentStudent, question);\n+        resultsPage.verifyResponseDetails(question, givenResponses, otherResponses, visibleGivers, visibleRecipients);\n+    }\n+\n+    private void verifyCommentDetails(int questionNum, FeedbackResponseCommentAttributes comment,\n+                                      StudentAttributes currentStudent) {\n+        String editor = \"\";\n+        String giver = \"\";\n+        if (comment.getLastEditorEmail() != null) {\n+            editor = getIdentifier(currentStudent, comment.getLastEditorEmail());\n+        }\n+        if (!comment.getCommentGiverType().equals(FeedbackParticipantType.STUDENTS)) {\n+            giver = getIdentifier(currentStudent, comment.getCommentGiver());\n+        }\n+        resultsPage.verifyCommentDetails(questionNum, giver, editor, comment.getCommentText());\n+    }\n+\n+    private List<FeedbackResponseAttributes> getGivenResponses(StudentAttributes currentStudent,\n+                                                               FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> givenResponses = testData.feedbackResponses.values().stream()\n+                .filter(f -> f.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber()))\n+                        && f.getGiver().equals(currentStudent.getEmail())\n+                        && !f.getRecipient().equals(currentStudent.getEmail()))\n+                .collect(Collectors.toList());\n+        return editIdentifiers(currentStudent, givenResponses);\n+    }\n+\n+    private List<FeedbackResponseAttributes> getOtherResponses(StudentAttributes currentStudent,\n+                                                               FeedbackQuestionAttributes question) {\n+        Set<String> visibleResponseGivers = getRelevantUsers(currentStudent, question.getShowResponsesTo());\n+        visibleResponseGivers.add(currentStudent.getEmail());\n+\n+        List<FeedbackResponseAttributes> questionResponses = testData.feedbackResponses.values().stream()\n+                .filter(fr -> fr.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber())))\n+                .collect(Collectors.toList());\n+\n+        List<FeedbackResponseAttributes> selfEvaluationResponses = questionResponses.stream()\n+                .filter(fr -> fr.getGiver().equals(currentStudent.email) && fr.getRecipient().equals(currentStudent.email))\n+                .collect(Collectors.toList());\n+\n+        List<FeedbackResponseAttributes> responsesByOthers = questionResponses.stream()\n+                .filter(fr -> !fr.getGiver().equals(currentStudent.email) && visibleResponseGivers.contains(fr.getGiver()))\n+                .collect(Collectors.toList());\n+\n+        List<FeedbackResponseAttributes> responsesToSelf = new ArrayList<>();\n+        if (visibleResponseGivers.contains(\"RECEIVER\")) {\n+            responsesToSelf = questionResponses.stream()\n+                    .filter(fr -> !fr.getGiver().equals(currentStudent.email)\n+                            && fr.getRecipient().equals(currentStudent.email))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        List<FeedbackResponseAttributes> otherResponses = new ArrayList<>();\n+        otherResponses.addAll(selfEvaluationResponses);\n+        otherResponses.addAll(responsesByOthers);\n+        otherResponses.addAll(responsesToSelf);\n+\n+        return editIdentifiers(currentStudent, otherResponses);\n+    }\n+\n+    private List<FeedbackResponseAttributes> getReceivedResponses(StudentAttributes currentStudent,\n+                                                                  FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> receivedResponses = testData.feedbackResponses.values().stream()\n+                .filter(f -> f.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber()))\n+                        && f.getRecipient().equals(currentStudent.getEmail()))\n+                .collect(Collectors.toList());\n+        return editIdentifiers(currentStudent, receivedResponses);\n+    }\n+\n+    private List<FeedbackResponseAttributes> getAllResponses(StudentAttributes currentStudent,\n+                                                             FeedbackQuestionAttributes question) {\n+        List<FeedbackResponseAttributes> allResponses = testData.feedbackResponses.values().stream()\n+                .filter(f -> f.getFeedbackQuestionId().equals(Integer.toString(question.getQuestionNumber())))\n+                .collect(Collectors.toList());\n+        return editIdentifiers(currentStudent, allResponses);\n+    }\n+\n+    private Set<String> getVisibleGivers(StudentAttributes currentStudent, FeedbackQuestionAttributes question) {\n+        return getRelevantUsers(currentStudent, question.getShowGiverNameTo()).stream()\n+                .map(user -> getIdentifier(currentStudent, user))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private Set<String> getVisibleRecipients(StudentAttributes currentStudent, FeedbackQuestionAttributes question) {\n+        return getRelevantUsers(currentStudent, question.getShowRecipientNameTo()).stream()\n+                .map(user -> getIdentifier(currentStudent, user))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private Set<String> getRelevantUsers(StudentAttributes giver, List<FeedbackParticipantType> relevantParticipants) {\n+        Set<String> relevantUsers = new HashSet<>();\n+        List<StudentAttributes> students = new ArrayList<>();\n+        if (relevantParticipants.contains(FeedbackParticipantType.STUDENTS)) {\n+            students.addAll(getOtherStudents(giver));\n+        } else if (relevantParticipants.contains(FeedbackParticipantType.OWN_TEAM_MEMBERS)) {\n+            students.addAll(getOtherTeammates(giver));\n+        }\n+        students.forEach(s -> relevantUsers.add(s.email));\n+        students.forEach(s -> relevantUsers.add(s.team));\n+\n+        if (relevantParticipants.contains(FeedbackParticipantType.RECEIVER)) {\n+            relevantUsers.add(\"RECEIVER\");\n+        }\n+\n+        return relevantUsers;\n+    }\n+\n+    private Set<StudentAttributes> getOtherTeammates(StudentAttributes currentStudent) {\n+        return testData.students.values().stream()\n+                .filter(s -> s.getTeam().equals(currentStudent.getTeam())\n+                && !s.equals(currentStudent))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private Set<StudentAttributes> getOtherStudents(StudentAttributes currentStudent) {\n+        return testData.students.values().stream()\n+                .filter(s -> s.getCourse().equals(currentStudent.getCourse())\n+                && !s.equals(currentStudent))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private List<FeedbackResponseAttributes> editIdentifiers(StudentAttributes currentStudent,\n+                                                             List<FeedbackResponseAttributes> responses) {\n+        List<FeedbackResponseAttributes> editedResponses = deepCopyResponses(responses);\n+        editedResponses.forEach(fr -> {\n+            fr.giver = getIdentifier(currentStudent, fr.getGiver());\n+            fr.recipient = getIdentifier(currentStudent, fr.getRecipient());\n+        });\n+        return editedResponses;\n+    }\n+\n+    private String getIdentifier(StudentAttributes currentStudent, String user) {\n+        if (currentStudent.getEmail().equals(user)) {\n+            return \"You\";\n+        }\n+        if (Const.GENERAL_QUESTION.equals(user)) {\n+            return Const.USER_NOBODY_TEXT;\n+        }\n+        if (user.equals(currentStudent.getTeam())) {\n+            return \"Your Team (\" + user + \")\";\n+        }\n+        String identifier = getInstructorName(user);\n+        if (identifier == null) {\n+            identifier = getStudentName(user);\n+        }\n+        if (identifier == null) {\n+            identifier = user;\n+        }\n+        return identifier;\n+    }\n+\n+    private String getStudentName(String student) {\n+        return testData.students.values().stream()\n+               .filter(s -> s.getEmail().equals(student))\n+               .map(StudentAttributes::getName)\n+               .findFirst()\n+               .orElse(null);\n+    }\n+\n+    private String getInstructorName(String instructor) {", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0d306cc91b8134f3265fa64c8f84bb0bc0fead8", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\nindex 2a7d1d5d68..c448316fbc 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n\n@@ -26,6 +26,7 @@ import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n     private StudentFeedbackResultsPage resultsPage;\n     private FeedbackSessionAttributes openSession;\n+    private List<FeedbackQuestionAttributes> questions = new ArrayList<>();\n \n     @Override\n     protected void prepareTestData() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3ODY1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511878655", "bodyText": "This logic (skip checking if contribution question) should be in the page objects instead? That way no question needs to be skipped.", "author": "wkurniawan07", "createdAt": "2020-10-26T11:04:16Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#STUDENT_SESSION_RESULTS_PAGE}.\n+ */\n+public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n+    private StudentFeedbackResultsPage resultsPage;\n+    private FeedbackSessionAttributes openSession;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/StudentFeedbackResultsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        openSession = testData.feedbackSessions.get(\"Open Session\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"unregistered student can access results\");\n+        StudentAttributes unregistered = testData.students.get(\"Unregistered\");\n+        AppUrl url = createUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)\n+                .withCourseId(unregistered.course)\n+                .withStudentEmail(unregistered.email)\n+                .withSessionName(openSession.getFeedbackSessionName())\n+                .withRegistrationKey(getKeyForStudent(unregistered));\n+        logout();\n+        resultsPage = AppPage.getNewPageInstance(browser, url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"registered student can access results\");\n+        StudentAttributes student = testData.students.get(\"Alice\");\n+        url = createUrl(Const.WebPageURIs.STUDENT_SESSION_RESULTS_PAGE)\n+                .withUserId(student.googleId)\n+                .withCourseId(openSession.getCourseId())\n+                .withSessionName(openSession.getFeedbackSessionName());\n+        resultsPage = loginAdminToPage(url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"questions loaded\");\n+        for (int i = 1; i <= 11; i++) {\n+            resultsPage.verifyQuestionDetails(i, testData.feedbackQuestions.get(\"qn\" + i));\n+        }\n+\n+        ______TS(\"questions with no responses not shown\");\n+        resultsPage.verifyQuestionNotPresent(12);\n+\n+        ______TS(\"verify responses\");\n+        // qn11 is a contribution question so we only need to check the statistics for that question", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0d306cc91b8134f3265fa64c8f84bb0bc0fead8", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\nindex 2a7d1d5d68..c448316fbc 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n\n@@ -26,6 +26,7 @@ import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n     private StudentFeedbackResultsPage resultsPage;\n     private FeedbackSessionAttributes openSession;\n+    private List<FeedbackQuestionAttributes> questions = new ArrayList<>();\n \n     @Override\n     protected void prepareTestData() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3OTM4MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511879381", "bodyText": "Let's just hard-code the statistics here. Similarly for the numscale question statistics.", "author": "wkurniawan07", "createdAt": "2020-10-26T11:05:34Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#STUDENT_SESSION_RESULTS_PAGE}.\n+ */\n+public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n+    private StudentFeedbackResultsPage resultsPage;\n+    private FeedbackSessionAttributes openSession;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/StudentFeedbackResultsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        openSession = testData.feedbackSessions.get(\"Open Session\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"unregistered student can access results\");\n+        StudentAttributes unregistered = testData.students.get(\"Unregistered\");\n+        AppUrl url = createUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)\n+                .withCourseId(unregistered.course)\n+                .withStudentEmail(unregistered.email)\n+                .withSessionName(openSession.getFeedbackSessionName())\n+                .withRegistrationKey(getKeyForStudent(unregistered));\n+        logout();\n+        resultsPage = AppPage.getNewPageInstance(browser, url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"registered student can access results\");\n+        StudentAttributes student = testData.students.get(\"Alice\");\n+        url = createUrl(Const.WebPageURIs.STUDENT_SESSION_RESULTS_PAGE)\n+                .withUserId(student.googleId)\n+                .withCourseId(openSession.getCourseId())\n+                .withSessionName(openSession.getFeedbackSessionName());\n+        resultsPage = loginAdminToPage(url, StudentFeedbackResultsPage.class);\n+\n+        resultsPage.verifyFeedbackSessionDetails(testData.feedbackSessions.get(\"Open Session\"));\n+\n+        ______TS(\"questions loaded\");\n+        for (int i = 1; i <= 11; i++) {\n+            resultsPage.verifyQuestionDetails(i, testData.feedbackQuestions.get(\"qn\" + i));\n+        }\n+\n+        ______TS(\"questions with no responses not shown\");\n+        resultsPage.verifyQuestionNotPresent(12);\n+\n+        ______TS(\"verify responses\");\n+        // qn11 is a contribution question so we only need to check the statistics for that question\n+        for (int i = 1; i <= 10; i++) {\n+            verifyResponseDetails(student, testData.feedbackQuestions.get(\"qn\" + i));\n+        }\n+\n+        ______TS(\"verify statistics - numscale\");\n+        resultsPage.verifyNumScaleStatistics(5, student, getReceivedResponses(student,\n+                testData.feedbackQuestions.get(\"qn5\")));\n+\n+        ______TS(\"verify statistics - rubric\");\n+        FeedbackQuestionAttributes rubricsQn = testData.feedbackQuestions.get(\"qn10\");\n+        resultsPage.verifyRubricStatistics(10, rubricsQn, getReceivedResponses(student, rubricsQn),", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0d306cc91b8134f3265fa64c8f84bb0bc0fead8", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\nindex 2a7d1d5d68..c448316fbc 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/StudentFeedbackResultsPageE2ETest.java\n\n@@ -26,6 +26,7 @@ import teammates.e2e.pageobjects.StudentFeedbackResultsPage;\n public class StudentFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n     private StudentFeedbackResultsPage resultsPage;\n     private FeedbackSessionAttributes openSession;\n+    private List<FeedbackQuestionAttributes> questions = new ArrayList<>();\n \n     @Override\n     protected void prepareTestData() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3OTk2MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511879961", "bodyText": "Use Assert.fail instead", "author": "wkurniawan07", "createdAt": "2020-10-26T11:06:43Z", "path": "src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java", "diffHunk": "@@ -0,0 +1,757 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.NoSuchElementException;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackNumericalScaleResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackQuestionType;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Page Object Model for student feedback results page.\n+ */\n+public class StudentFeedbackResultsPage extends AppPage {\n+    private static final String CURRENT_STUDENT_IDENTIFIER = \"You\";\n+\n+    @FindBy(id = \"course-id\")\n+    private WebElement courseId;\n+\n+    @FindBy(id = \"session-name\")\n+    private WebElement sessionName;\n+\n+    @FindBy(id = \"opening-time\")\n+    private WebElement sessionOpeningTime;\n+\n+    @FindBy(id = \"closing-time\")\n+    private WebElement sessionClosingTime;\n+\n+    public StudentFeedbackResultsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageTitle().contains(\"Feedback Session Results\");\n+    }\n+\n+    public void verifyFeedbackSessionDetails(FeedbackSessionAttributes feedbackSession) {\n+        assertEquals(getCourseId(), feedbackSession.getCourseId());\n+        assertEquals(getFeedbackSessionName(), feedbackSession.getFeedbackSessionName());\n+        assertDateEquals(getOpeningTime(), feedbackSession.getStartTime(), feedbackSession.getTimeZone());\n+        assertDateEquals(getClosingTime(), feedbackSession.getEndTime(), feedbackSession.getTimeZone());\n+    }\n+\n+    public void verifyQuestionDetails(int questionNum, FeedbackQuestionAttributes question) {\n+        assertEquals(question.getQuestionDetails().getQuestionText(), getQuestionText(questionNum));\n+        if (!question.getQuestionType().equals(FeedbackQuestionType.TEXT)) {\n+            assertEquals(getAdditionalInfoString(question), getAdditionalInfo(questionNum));\n+        }\n+    }\n+\n+    public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses,\n+                                      List<FeedbackResponseAttributes> otherResponses,\n+                                      Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        verifyGivenResponses(question, givenResponses);\n+        verifyOtherResponses(question, otherResponses, visibleGivers, visibleRecipients);\n+    }\n+\n+    public void verifyQuestionNotPresent(int questionNum) {\n+        try {\n+            getQuestionResponsesSection(questionNum);\n+            throw new RuntimeException(\"Question \" + questionNum + \" should not be present.\");", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4900b4febabceb425258d2315902222cecd1504", "chunk": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\nindex 2ae77927cc..a552d9e173 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n\n@@ -81,6 +81,9 @@ public class StudentFeedbackResultsPage extends AppPage {\n     public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses,\n                                       List<FeedbackResponseAttributes> otherResponses,\n                                       Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        if (!hasDisplayedResponses(question)) {\n+            return;\n+        }\n         verifyGivenResponses(question, givenResponses);\n         verifyOtherResponses(question, otherResponses, visibleGivers, visibleRecipients);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4MDY3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511880679", "bodyText": "I don't think the variable isExpected is necessary?", "author": "wkurniawan07", "createdAt": "2020-10-26T11:08:00Z", "path": "src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java", "diffHunk": "@@ -0,0 +1,757 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.NoSuchElementException;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackNumericalScaleResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackQuestionType;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Page Object Model for student feedback results page.\n+ */\n+public class StudentFeedbackResultsPage extends AppPage {\n+    private static final String CURRENT_STUDENT_IDENTIFIER = \"You\";\n+\n+    @FindBy(id = \"course-id\")\n+    private WebElement courseId;\n+\n+    @FindBy(id = \"session-name\")\n+    private WebElement sessionName;\n+\n+    @FindBy(id = \"opening-time\")\n+    private WebElement sessionOpeningTime;\n+\n+    @FindBy(id = \"closing-time\")\n+    private WebElement sessionClosingTime;\n+\n+    public StudentFeedbackResultsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageTitle().contains(\"Feedback Session Results\");\n+    }\n+\n+    public void verifyFeedbackSessionDetails(FeedbackSessionAttributes feedbackSession) {\n+        assertEquals(getCourseId(), feedbackSession.getCourseId());\n+        assertEquals(getFeedbackSessionName(), feedbackSession.getFeedbackSessionName());\n+        assertDateEquals(getOpeningTime(), feedbackSession.getStartTime(), feedbackSession.getTimeZone());\n+        assertDateEquals(getClosingTime(), feedbackSession.getEndTime(), feedbackSession.getTimeZone());\n+    }\n+\n+    public void verifyQuestionDetails(int questionNum, FeedbackQuestionAttributes question) {\n+        assertEquals(question.getQuestionDetails().getQuestionText(), getQuestionText(questionNum));\n+        if (!question.getQuestionType().equals(FeedbackQuestionType.TEXT)) {\n+            assertEquals(getAdditionalInfoString(question), getAdditionalInfo(questionNum));\n+        }\n+    }\n+\n+    public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses,\n+                                      List<FeedbackResponseAttributes> otherResponses,\n+                                      Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        verifyGivenResponses(question, givenResponses);\n+        verifyOtherResponses(question, otherResponses, visibleGivers, visibleRecipients);\n+    }\n+\n+    public void verifyQuestionNotPresent(int questionNum) {\n+        try {\n+            getQuestionResponsesSection(questionNum);\n+            throw new RuntimeException(\"Question \" + questionNum + \" should not be present.\");\n+        } catch (NoSuchElementException e) {\n+            // success\n+        }\n+    }\n+\n+    public void verifyNumScaleStatistics(int questionNum, StudentAttributes student,\n+                                         List<FeedbackResponseAttributes> receivedResponses) {\n+        verifyTableRowValues(getNumScaleStatistics(questionNum), getExpectedNumScaleStatistics(student, receivedResponses));\n+    }\n+\n+    public void verifyRubricStatistics(int questionNum, FeedbackQuestionAttributes question,\n+                                       List<FeedbackResponseAttributes> receivedResponses,\n+                                       List<FeedbackResponseAttributes> otherResponses, Set<String> visibleRecipients,\n+                                       StudentAttributes currentStudent, Collection<StudentAttributes> students) {\n+        FeedbackRubricQuestionDetails questionDetails = (FeedbackRubricQuestionDetails) question.getQuestionDetails();\n+        String[][] expectedStatistics = getExpectedRubricStatistics(questionDetails, receivedResponses, false);\n+        markOptionAsUnselected(getRubricExcludeSelfCheckbox(questionNum));\n+        verifyTableBodyValues(getRubricStatistics(questionNum), expectedStatistics);\n+\n+        boolean hasSelfEvaluation = receivedResponses.stream()\n+                .anyMatch(response -> response.getGiver().equals(CURRENT_STUDENT_IDENTIFIER));\n+        if (hasSelfEvaluation) {\n+            expectedStatistics = getExpectedRubricStatistics(questionDetails, receivedResponses, true);\n+        }\n+        markOptionAsSelected(getRubricExcludeSelfCheckbox(questionNum));\n+        verifyTableBodyValues(getRubricStatistics(questionNum), expectedStatistics);\n+\n+        if (questionDetails.hasAssignedWeights()) {\n+            // sort by recipient name\n+            sortRubricPerRecipientStats(questionNum, 1);\n+            replaceRecipientWithAnonymous(otherResponses, visibleRecipients);\n+            String[][] expectedStatsPerRecipient = getExpectedRubricStatsPerRecipient(questionDetails, otherResponses,\n+                    currentStudent, students);\n+            verifyTableBodyValues(getRubricPerRecipientStats(questionNum), expectedStatsPerRecipient);\n+        }\n+    }\n+\n+    public void verifyContributionStatistics(int questionNum, int[] expectedOwnStats, int[] expectedTeamStats) {\n+        WebElement questionSection = getQuestionResponsesSection(questionNum);\n+        String[] ownStatsStrings = getExpectedContribStatistics(expectedOwnStats);\n+        String[] teamStatsStrings = getExpectedContribStatistics(expectedTeamStats);\n+        assertEquals(questionSection.findElement(By.id(\"own-view-me\")).getText(), ownStatsStrings[0]);\n+        assertEquals(questionSection.findElement(By.id(\"own-view-others\")).getText().trim(), ownStatsStrings[1]);\n+        assertEquals(questionSection.findElement(By.id(\"team-view-me\")).getText(), teamStatsStrings[0]);\n+        assertEquals(questionSection.findElement(By.id(\"team-view-others\")).getText().trim(), teamStatsStrings[1]);\n+    }\n+\n+    public void verifyCommentDetails(int questionNum, String commentGiver, String commentEditor, String commentString) {\n+        WebElement commentField = getCommentField(questionNum, commentString);\n+        if (commentGiver.isEmpty()) {\n+            assertTrue(isCommentByResponseGiver(commentField));\n+        } else {\n+            assertEquals(commentGiver, getCommentGiver(commentField));\n+        }\n+        if (!commentEditor.isEmpty()) {\n+            assertEquals(commentEditor, getCommentEditor(commentField));\n+        }\n+    }\n+\n+    private void verifyGivenResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses) {\n+        for (FeedbackResponseAttributes response : givenResponses) {\n+            WebElement responseField = getGivenResponseField(question.questionNumber, response.getRecipient());\n+            assertTrue(isResponseEqual(question, responseField, response));\n+        }\n+    }\n+\n+    private void verifyOtherResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> otherResponses,\n+                                      Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        Set<String> recipients = getRecipients(otherResponses);\n+        for (String recipient : recipients) {\n+            List<FeedbackResponseAttributes> expectedResponses = otherResponses.stream()\n+                    .filter(r -> r.getRecipient().equals(recipient))\n+                    .collect(Collectors.toList());\n+\n+            verifyResponseForRecipient(question, recipient, expectedResponses, visibleGivers, visibleRecipients);\n+        }\n+    }\n+\n+    private Set<String> getRecipients(List<FeedbackResponseAttributes> responses) {\n+        return responses.stream().map(FeedbackResponseAttributes::getRecipient).collect(Collectors.toSet());\n+    }\n+\n+    private void verifyResponseForRecipient(FeedbackQuestionAttributes question, String recipient,\n+                                            List<FeedbackResponseAttributes> otherResponses,\n+                                            Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        List<WebElement> responseViews = getAllResponseViews(question.questionNumber);\n+        for (FeedbackResponseAttributes response : otherResponses) {\n+            boolean isRecipientVisible = visibleRecipients.contains(response.giver)\n+                    || recipient.equals(CURRENT_STUDENT_IDENTIFIER);\n+            boolean isGiverVisible = visibleGivers.contains(response.giver)\n+                    || (visibleGivers.contains(\"RECEIVER\") && response.getRecipient().equals(CURRENT_STUDENT_IDENTIFIER))\n+                    || response.getGiver().equals(CURRENT_STUDENT_IDENTIFIER);\n+            if (isRecipientVisible) {\n+                int recipientIndex = getRecipientIndex(question.questionNumber, recipient);\n+                WebElement responseView = responseViews.get(recipientIndex);\n+                List<WebElement> responsesFields = getAllResponseFields(responseView);\n+                if (isGiverVisible) {\n+                    int giverIndex = getGiverIndex(responseView, response.getGiver());\n+                    assertTrue(isResponseEqual(question, responsesFields.get(giverIndex), response));\n+                } else {\n+                    assertTrue(isAnyAnonymousResponseEqual(question, responseView, response));\n+                }\n+            } else {\n+                verifyAnonymousResponseView(question, otherResponses, isGiverVisible);\n+            }\n+        }\n+    }\n+\n+    private void verifyAnonymousResponseView(FeedbackQuestionAttributes question,\n+                                             List<FeedbackResponseAttributes> expectedResponses,\n+                                             boolean isGiverVisible) {\n+        List<WebElement> anonymousViews = getAllResponseViews(question.questionNumber).stream()\n+                .filter(v -> isAnonymous(v.findElement(By.id(\"response-recipient\")).getText()))\n+                .collect(Collectors.toList());\n+        if (anonymousViews.isEmpty()) {\n+            throw new RuntimeException(\"No anonymous views found\");\n+        }\n+\n+        boolean hasCorrectResponses = true;\n+        for (WebElement responseView : anonymousViews) {\n+            hasCorrectResponses = true;\n+            List<WebElement> responseFields = getAllResponseFields(responseView);\n+            for (FeedbackResponseAttributes response : expectedResponses) {\n+                if (isGiverVisible) {\n+                    int giverIndex = getGiverIndex(responseView, response.getGiver());\n+                    if (!isResponseEqual(question, responseFields.get(giverIndex), response)) {\n+                        hasCorrectResponses = false;\n+                        break;\n+                    }\n+                } else if (!isAnyAnonymousResponseEqual(question, responseView, response)) {\n+                    hasCorrectResponses = false;\n+                    break;\n+                }\n+            }\n+            if (hasCorrectResponses) {\n+                break;\n+            }\n+        }\n+        assertTrue(hasCorrectResponses);\n+    }\n+\n+    private boolean isResponseEqual(FeedbackQuestionAttributes question, WebElement responseField,\n+                                    FeedbackResponseAttributes response) {\n+        if (question.getQuestionType().equals(FeedbackQuestionType.RUBRIC)) {\n+            return isRubricResponseEqual(responseField, response);\n+        } else {\n+            return getAnswerString(question, response.getResponseDetails()).equals(responseField.getText());\n+        }\n+    }\n+\n+    private boolean isRubricResponseEqual(WebElement responseField, FeedbackResponseAttributes response) {\n+        FeedbackRubricResponseDetails responseDetails = (FeedbackRubricResponseDetails) response.getResponseDetails();\n+        List<Integer> answers = responseDetails.getAnswer();\n+        for (int i = 0; i < answers.size(); i++) {\n+            WebElement rubricRow = responseField.findElements(By.cssSelector(\"#rubric-answers tr\")).get(i);\n+            WebElement rubricCell = rubricRow.findElements(By.tagName(\"td\")).get(answers.get(i) + 1);\n+            if (rubricCell.findElements(By.className(\"fa-check\")).size() == 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isAnonymous(String identifier) {\n+        return identifier.contains(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT);\n+    }\n+\n+    private boolean isAnyAnonymousResponseEqual(FeedbackQuestionAttributes question, WebElement responseView,\n+                                                FeedbackResponseAttributes response) {\n+        List<WebElement> giverNames = responseView.findElements(By.id(\"response-giver\"));\n+        List<WebElement> responseFields = getAllResponseFields(responseView);\n+        for (int i = 0; i < giverNames.size(); i++) {\n+            if (isAnonymous(giverNames.get(i).getText()) && isResponseEqual(question, responseFields.get(i), response)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String getCourseId() {\n+        return courseId.getText();\n+    }\n+\n+    private String getFeedbackSessionName() {\n+        return sessionName.getText();\n+    }\n+\n+    private String getOpeningTime() {\n+        return sessionOpeningTime.getText();\n+    }\n+\n+    private String getClosingTime() {\n+        return sessionClosingTime.getText();\n+    }\n+\n+    private void assertDateEquals(String actual, Instant instant, ZoneId timeZone) {\n+        String dateStrWithAbbr = getDateStringWithAbbr(instant, timeZone);\n+        String dateStrWithOffset = getDateStringWithOffset(instant, timeZone);\n+\n+        boolean isExpected = actual.equals(dateStrWithAbbr) || actual.equals(dateStrWithOffset);\n+        assertTrue(isExpected);", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4900b4febabceb425258d2315902222cecd1504", "chunk": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\nindex 2ae77927cc..a552d9e173 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n\n@@ -81,6 +81,9 @@ public class StudentFeedbackResultsPage extends AppPage {\n     public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses,\n                                       List<FeedbackResponseAttributes> otherResponses,\n                                       Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        if (!hasDisplayedResponses(question)) {\n+            return;\n+        }\n         verifyGivenResponses(question, givenResponses);\n         verifyOtherResponses(question, otherResponses, visibleGivers, visibleRecipients);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4MDg0Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r511880842", "bodyText": "\\n -> System.lineSeparator(). Similarly in other parts of this file.", "author": "wkurniawan07", "createdAt": "2020-10-26T11:08:23Z", "path": "src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java", "diffHunk": "@@ -0,0 +1,757 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.NoSuchElementException;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackNumericalScaleResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackQuestionType;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Page Object Model for student feedback results page.\n+ */\n+public class StudentFeedbackResultsPage extends AppPage {\n+    private static final String CURRENT_STUDENT_IDENTIFIER = \"You\";\n+\n+    @FindBy(id = \"course-id\")\n+    private WebElement courseId;\n+\n+    @FindBy(id = \"session-name\")\n+    private WebElement sessionName;\n+\n+    @FindBy(id = \"opening-time\")\n+    private WebElement sessionOpeningTime;\n+\n+    @FindBy(id = \"closing-time\")\n+    private WebElement sessionClosingTime;\n+\n+    public StudentFeedbackResultsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageTitle().contains(\"Feedback Session Results\");\n+    }\n+\n+    public void verifyFeedbackSessionDetails(FeedbackSessionAttributes feedbackSession) {\n+        assertEquals(getCourseId(), feedbackSession.getCourseId());\n+        assertEquals(getFeedbackSessionName(), feedbackSession.getFeedbackSessionName());\n+        assertDateEquals(getOpeningTime(), feedbackSession.getStartTime(), feedbackSession.getTimeZone());\n+        assertDateEquals(getClosingTime(), feedbackSession.getEndTime(), feedbackSession.getTimeZone());\n+    }\n+\n+    public void verifyQuestionDetails(int questionNum, FeedbackQuestionAttributes question) {\n+        assertEquals(question.getQuestionDetails().getQuestionText(), getQuestionText(questionNum));\n+        if (!question.getQuestionType().equals(FeedbackQuestionType.TEXT)) {\n+            assertEquals(getAdditionalInfoString(question), getAdditionalInfo(questionNum));\n+        }\n+    }\n+\n+    public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses,\n+                                      List<FeedbackResponseAttributes> otherResponses,\n+                                      Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        verifyGivenResponses(question, givenResponses);\n+        verifyOtherResponses(question, otherResponses, visibleGivers, visibleRecipients);\n+    }\n+\n+    public void verifyQuestionNotPresent(int questionNum) {\n+        try {\n+            getQuestionResponsesSection(questionNum);\n+            throw new RuntimeException(\"Question \" + questionNum + \" should not be present.\");\n+        } catch (NoSuchElementException e) {\n+            // success\n+        }\n+    }\n+\n+    public void verifyNumScaleStatistics(int questionNum, StudentAttributes student,\n+                                         List<FeedbackResponseAttributes> receivedResponses) {\n+        verifyTableRowValues(getNumScaleStatistics(questionNum), getExpectedNumScaleStatistics(student, receivedResponses));\n+    }\n+\n+    public void verifyRubricStatistics(int questionNum, FeedbackQuestionAttributes question,\n+                                       List<FeedbackResponseAttributes> receivedResponses,\n+                                       List<FeedbackResponseAttributes> otherResponses, Set<String> visibleRecipients,\n+                                       StudentAttributes currentStudent, Collection<StudentAttributes> students) {\n+        FeedbackRubricQuestionDetails questionDetails = (FeedbackRubricQuestionDetails) question.getQuestionDetails();\n+        String[][] expectedStatistics = getExpectedRubricStatistics(questionDetails, receivedResponses, false);\n+        markOptionAsUnselected(getRubricExcludeSelfCheckbox(questionNum));\n+        verifyTableBodyValues(getRubricStatistics(questionNum), expectedStatistics);\n+\n+        boolean hasSelfEvaluation = receivedResponses.stream()\n+                .anyMatch(response -> response.getGiver().equals(CURRENT_STUDENT_IDENTIFIER));\n+        if (hasSelfEvaluation) {\n+            expectedStatistics = getExpectedRubricStatistics(questionDetails, receivedResponses, true);\n+        }\n+        markOptionAsSelected(getRubricExcludeSelfCheckbox(questionNum));\n+        verifyTableBodyValues(getRubricStatistics(questionNum), expectedStatistics);\n+\n+        if (questionDetails.hasAssignedWeights()) {\n+            // sort by recipient name\n+            sortRubricPerRecipientStats(questionNum, 1);\n+            replaceRecipientWithAnonymous(otherResponses, visibleRecipients);\n+            String[][] expectedStatsPerRecipient = getExpectedRubricStatsPerRecipient(questionDetails, otherResponses,\n+                    currentStudent, students);\n+            verifyTableBodyValues(getRubricPerRecipientStats(questionNum), expectedStatsPerRecipient);\n+        }\n+    }\n+\n+    public void verifyContributionStatistics(int questionNum, int[] expectedOwnStats, int[] expectedTeamStats) {\n+        WebElement questionSection = getQuestionResponsesSection(questionNum);\n+        String[] ownStatsStrings = getExpectedContribStatistics(expectedOwnStats);\n+        String[] teamStatsStrings = getExpectedContribStatistics(expectedTeamStats);\n+        assertEquals(questionSection.findElement(By.id(\"own-view-me\")).getText(), ownStatsStrings[0]);\n+        assertEquals(questionSection.findElement(By.id(\"own-view-others\")).getText().trim(), ownStatsStrings[1]);\n+        assertEquals(questionSection.findElement(By.id(\"team-view-me\")).getText(), teamStatsStrings[0]);\n+        assertEquals(questionSection.findElement(By.id(\"team-view-others\")).getText().trim(), teamStatsStrings[1]);\n+    }\n+\n+    public void verifyCommentDetails(int questionNum, String commentGiver, String commentEditor, String commentString) {\n+        WebElement commentField = getCommentField(questionNum, commentString);\n+        if (commentGiver.isEmpty()) {\n+            assertTrue(isCommentByResponseGiver(commentField));\n+        } else {\n+            assertEquals(commentGiver, getCommentGiver(commentField));\n+        }\n+        if (!commentEditor.isEmpty()) {\n+            assertEquals(commentEditor, getCommentEditor(commentField));\n+        }\n+    }\n+\n+    private void verifyGivenResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses) {\n+        for (FeedbackResponseAttributes response : givenResponses) {\n+            WebElement responseField = getGivenResponseField(question.questionNumber, response.getRecipient());\n+            assertTrue(isResponseEqual(question, responseField, response));\n+        }\n+    }\n+\n+    private void verifyOtherResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> otherResponses,\n+                                      Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        Set<String> recipients = getRecipients(otherResponses);\n+        for (String recipient : recipients) {\n+            List<FeedbackResponseAttributes> expectedResponses = otherResponses.stream()\n+                    .filter(r -> r.getRecipient().equals(recipient))\n+                    .collect(Collectors.toList());\n+\n+            verifyResponseForRecipient(question, recipient, expectedResponses, visibleGivers, visibleRecipients);\n+        }\n+    }\n+\n+    private Set<String> getRecipients(List<FeedbackResponseAttributes> responses) {\n+        return responses.stream().map(FeedbackResponseAttributes::getRecipient).collect(Collectors.toSet());\n+    }\n+\n+    private void verifyResponseForRecipient(FeedbackQuestionAttributes question, String recipient,\n+                                            List<FeedbackResponseAttributes> otherResponses,\n+                                            Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        List<WebElement> responseViews = getAllResponseViews(question.questionNumber);\n+        for (FeedbackResponseAttributes response : otherResponses) {\n+            boolean isRecipientVisible = visibleRecipients.contains(response.giver)\n+                    || recipient.equals(CURRENT_STUDENT_IDENTIFIER);\n+            boolean isGiverVisible = visibleGivers.contains(response.giver)\n+                    || (visibleGivers.contains(\"RECEIVER\") && response.getRecipient().equals(CURRENT_STUDENT_IDENTIFIER))\n+                    || response.getGiver().equals(CURRENT_STUDENT_IDENTIFIER);\n+            if (isRecipientVisible) {\n+                int recipientIndex = getRecipientIndex(question.questionNumber, recipient);\n+                WebElement responseView = responseViews.get(recipientIndex);\n+                List<WebElement> responsesFields = getAllResponseFields(responseView);\n+                if (isGiverVisible) {\n+                    int giverIndex = getGiverIndex(responseView, response.getGiver());\n+                    assertTrue(isResponseEqual(question, responsesFields.get(giverIndex), response));\n+                } else {\n+                    assertTrue(isAnyAnonymousResponseEqual(question, responseView, response));\n+                }\n+            } else {\n+                verifyAnonymousResponseView(question, otherResponses, isGiverVisible);\n+            }\n+        }\n+    }\n+\n+    private void verifyAnonymousResponseView(FeedbackQuestionAttributes question,\n+                                             List<FeedbackResponseAttributes> expectedResponses,\n+                                             boolean isGiverVisible) {\n+        List<WebElement> anonymousViews = getAllResponseViews(question.questionNumber).stream()\n+                .filter(v -> isAnonymous(v.findElement(By.id(\"response-recipient\")).getText()))\n+                .collect(Collectors.toList());\n+        if (anonymousViews.isEmpty()) {\n+            throw new RuntimeException(\"No anonymous views found\");\n+        }\n+\n+        boolean hasCorrectResponses = true;\n+        for (WebElement responseView : anonymousViews) {\n+            hasCorrectResponses = true;\n+            List<WebElement> responseFields = getAllResponseFields(responseView);\n+            for (FeedbackResponseAttributes response : expectedResponses) {\n+                if (isGiverVisible) {\n+                    int giverIndex = getGiverIndex(responseView, response.getGiver());\n+                    if (!isResponseEqual(question, responseFields.get(giverIndex), response)) {\n+                        hasCorrectResponses = false;\n+                        break;\n+                    }\n+                } else if (!isAnyAnonymousResponseEqual(question, responseView, response)) {\n+                    hasCorrectResponses = false;\n+                    break;\n+                }\n+            }\n+            if (hasCorrectResponses) {\n+                break;\n+            }\n+        }\n+        assertTrue(hasCorrectResponses);\n+    }\n+\n+    private boolean isResponseEqual(FeedbackQuestionAttributes question, WebElement responseField,\n+                                    FeedbackResponseAttributes response) {\n+        if (question.getQuestionType().equals(FeedbackQuestionType.RUBRIC)) {\n+            return isRubricResponseEqual(responseField, response);\n+        } else {\n+            return getAnswerString(question, response.getResponseDetails()).equals(responseField.getText());\n+        }\n+    }\n+\n+    private boolean isRubricResponseEqual(WebElement responseField, FeedbackResponseAttributes response) {\n+        FeedbackRubricResponseDetails responseDetails = (FeedbackRubricResponseDetails) response.getResponseDetails();\n+        List<Integer> answers = responseDetails.getAnswer();\n+        for (int i = 0; i < answers.size(); i++) {\n+            WebElement rubricRow = responseField.findElements(By.cssSelector(\"#rubric-answers tr\")).get(i);\n+            WebElement rubricCell = rubricRow.findElements(By.tagName(\"td\")).get(answers.get(i) + 1);\n+            if (rubricCell.findElements(By.className(\"fa-check\")).size() == 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isAnonymous(String identifier) {\n+        return identifier.contains(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT);\n+    }\n+\n+    private boolean isAnyAnonymousResponseEqual(FeedbackQuestionAttributes question, WebElement responseView,\n+                                                FeedbackResponseAttributes response) {\n+        List<WebElement> giverNames = responseView.findElements(By.id(\"response-giver\"));\n+        List<WebElement> responseFields = getAllResponseFields(responseView);\n+        for (int i = 0; i < giverNames.size(); i++) {\n+            if (isAnonymous(giverNames.get(i).getText()) && isResponseEqual(question, responseFields.get(i), response)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String getCourseId() {\n+        return courseId.getText();\n+    }\n+\n+    private String getFeedbackSessionName() {\n+        return sessionName.getText();\n+    }\n+\n+    private String getOpeningTime() {\n+        return sessionOpeningTime.getText();\n+    }\n+\n+    private String getClosingTime() {\n+        return sessionClosingTime.getText();\n+    }\n+\n+    private void assertDateEquals(String actual, Instant instant, ZoneId timeZone) {\n+        String dateStrWithAbbr = getDateStringWithAbbr(instant, timeZone);\n+        String dateStrWithOffset = getDateStringWithOffset(instant, timeZone);\n+\n+        boolean isExpected = actual.equals(dateStrWithAbbr) || actual.equals(dateStrWithOffset);\n+        assertTrue(isExpected);\n+    }\n+\n+    private String getDateStringWithAbbr(Instant instant, ZoneId timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"EE, dd MMM, yyyy, hh:mm a z\")\n+                .format(instant.atZone(timeZone));\n+    }\n+\n+    private String getDateStringWithOffset(Instant instant, ZoneId timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"EE, dd MMM, yyyy, hh:mm a X\")\n+                .format(instant.atZone(timeZone));\n+    }\n+\n+    private String getQuestionText(int questionNum) {\n+        return getQuestionResponsesSection(questionNum).findElement(By.id(\"question-text\")).getText().trim();\n+    }\n+\n+    private String getMcqAddInfo(FeedbackMcqQuestionDetails questionDetails) {\n+        String additionalInfo = \"Multiple-choice (single answer) question options:\\n\";", "originalCommit": "eb64584dac5e630da7c0bcc11f9bc5df0bac1542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4900b4febabceb425258d2315902222cecd1504", "chunk": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\nindex 2ae77927cc..a552d9e173 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n\n@@ -81,6 +81,9 @@ public class StudentFeedbackResultsPage extends AppPage {\n     public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses,\n                                       List<FeedbackResponseAttributes> otherResponses,\n                                       Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        if (!hasDisplayedResponses(question)) {\n+            return;\n+        }\n         verifyGivenResponses(question, givenResponses);\n         verifyOtherResponses(question, otherResponses, visibleGivers, visibleRecipients);\n     }\n"}}, {"oid": "836a36c6a881099ed303bb849473ccc1bcf23ecb", "url": "https://github.com/TEAMMATES/teammates/commit/836a36c6a881099ed303bb849473ccc1bcf23ecb", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into student-results-e2e", "committedDate": "2020-10-31T00:59:03Z", "type": "commit"}, {"oid": "c0d306cc91b8134f3265fa64c8f84bb0bc0fead8", "url": "https://github.com/TEAMMATES/teammates/commit/c0d306cc91b8134f3265fa64c8f84bb0bc0fead8", "message": "Add loaded question check for unregistered student", "committedDate": "2020-10-31T06:38:59Z", "type": "commit"}, {"oid": "d4900b4febabceb425258d2315902222cecd1504", "url": "https://github.com/TEAMMATES/teammates/commit/d4900b4febabceb425258d2315902222cecd1504", "message": "Skip response check for contrib question in page object", "committedDate": "2020-10-31T06:40:24Z", "type": "commit"}, {"oid": "8caf079f0ae9e2f29f6cd5c8f4045598d530853b", "url": "https://github.com/TEAMMATES/teammates/commit/8caf079f0ae9e2f29f6cd5c8f4045598d530853b", "message": "Refactor for code quality", "committedDate": "2020-10-31T06:41:56Z", "type": "commit"}, {"oid": "483f3eaf35fa82badb1c6fdd5c6cd6ab73a7f223", "url": "https://github.com/TEAMMATES/teammates/commit/483f3eaf35fa82badb1c6fdd5c6cd6ab73a7f223", "message": "Use lineSeparator", "committedDate": "2020-10-31T06:44:17Z", "type": "commit"}, {"oid": "eb4310847a32d25c5409c955112ec45e8ba98c9c", "url": "https://github.com/TEAMMATES/teammates/commit/eb4310847a32d25c5409c955112ec45e8ba98c9c", "message": "Replace statistics with hardcoded expected", "committedDate": "2020-10-31T06:44:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MTEzNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r515571135", "bodyText": "All the other throw new RuntimeException should be changed to Assert.fail as well", "author": "wkurniawan07", "createdAt": "2020-11-01T03:46:10Z", "path": "src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java", "diffHunk": "@@ -0,0 +1,564 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.NoSuchElementException;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackQuestionType;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Page Object Model for student feedback results page.\n+ */\n+public class StudentFeedbackResultsPage extends AppPage {\n+    private static final String CURRENT_STUDENT_IDENTIFIER = \"You\";\n+\n+    @FindBy(id = \"course-id\")\n+    private WebElement courseId;\n+\n+    @FindBy(id = \"session-name\")\n+    private WebElement sessionName;\n+\n+    @FindBy(id = \"opening-time\")\n+    private WebElement sessionOpeningTime;\n+\n+    @FindBy(id = \"closing-time\")\n+    private WebElement sessionClosingTime;\n+\n+    public StudentFeedbackResultsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageTitle().contains(\"Feedback Session Results\");\n+    }\n+\n+    public void verifyFeedbackSessionDetails(FeedbackSessionAttributes feedbackSession) {\n+        assertEquals(getCourseId(), feedbackSession.getCourseId());\n+        assertEquals(getFeedbackSessionName(), feedbackSession.getFeedbackSessionName());\n+        assertDateEquals(getOpeningTime(), feedbackSession.getStartTime(), feedbackSession.getTimeZone());\n+        assertDateEquals(getClosingTime(), feedbackSession.getEndTime(), feedbackSession.getTimeZone());\n+    }\n+\n+    public void verifyQuestionDetails(int questionNum, FeedbackQuestionAttributes question) {\n+        assertEquals(question.getQuestionDetails().getQuestionText(), getQuestionText(questionNum));\n+        if (!question.getQuestionType().equals(FeedbackQuestionType.TEXT)) {\n+            assertEquals(getAdditionalInfoString(question), getAdditionalInfo(questionNum));\n+        }\n+    }\n+\n+    public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses,\n+                                      List<FeedbackResponseAttributes> otherResponses,\n+                                      Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        if (!hasDisplayedResponses(question)) {\n+            return;\n+        }\n+        verifyGivenResponses(question, givenResponses);\n+        verifyOtherResponses(question, otherResponses, visibleGivers, visibleRecipients);\n+    }\n+\n+    public void verifyQuestionNotPresent(int questionNum) {\n+        try {\n+            getQuestionResponsesSection(questionNum);\n+            fail(\"Question \" + questionNum + \" should not be present.\");\n+        } catch (NoSuchElementException e) {\n+            // success\n+        }\n+    }\n+\n+    public void verifyNumScaleStatistics(int questionNum, String[] expectedStats) {\n+        verifyTableRowValues(getNumScaleStatistics(questionNum), expectedStats);\n+    }\n+\n+    public void verifyRubricStatistics(int questionNum, String[][] expectedStats, String[][] expectedStatsExcludingSelf,\n+                                       String[][] expectedStatsPerRecipient) {\n+        WebElement excludeSelfCheckbox = getRubricExcludeSelfCheckbox(questionNum);\n+        markOptionAsUnselected(excludeSelfCheckbox);\n+        verifyTableBodyValues(getRubricStatistics(questionNum), expectedStats);\n+\n+        markOptionAsSelected(excludeSelfCheckbox);\n+        verifyTableBodyValues(getRubricStatistics(questionNum), expectedStatsExcludingSelf);\n+\n+        sortRubricPerRecipientStats(questionNum, 2);\n+        verifyTableBodyValues(getRubricPerRecipientStats(questionNum), expectedStatsPerRecipient);\n+    }\n+\n+    public void verifyContributionStatistics(int questionNum, String[] expectedStats) {\n+        WebElement questionSection = getQuestionResponsesSection(questionNum);\n+        assertEquals(questionSection.findElement(By.id(\"own-view-me\")).getText(), expectedStats[0]);\n+        assertEquals(questionSection.findElement(By.id(\"own-view-others\")).getText().trim(), expectedStats[1]);\n+        assertEquals(questionSection.findElement(By.id(\"team-view-me\")).getText(), expectedStats[2]);\n+        assertEquals(questionSection.findElement(By.id(\"team-view-others\")).getText().trim(), expectedStats[3]);\n+    }\n+\n+    public void verifyCommentDetails(int questionNum, String commentGiver, String commentEditor, String commentString) {\n+        WebElement commentField = getCommentField(questionNum, commentString);\n+        if (commentGiver.isEmpty()) {\n+            assertTrue(isCommentByResponseGiver(commentField));\n+        } else {\n+            assertEquals(commentGiver, getCommentGiver(commentField));\n+        }\n+        if (!commentEditor.isEmpty()) {\n+            assertEquals(commentEditor, getCommentEditor(commentField));\n+        }\n+    }\n+\n+    private boolean hasDisplayedResponses(FeedbackQuestionAttributes question) {\n+        return !question.getQuestionDetails().getQuestionType().equals(FeedbackQuestionType.CONTRIB);\n+    }\n+\n+    private void verifyGivenResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses) {\n+        for (FeedbackResponseAttributes response : givenResponses) {\n+            WebElement responseField = getGivenResponseField(question.questionNumber, response.getRecipient());\n+            assertTrue(isResponseEqual(question, responseField, response));\n+        }\n+    }\n+\n+    private void verifyOtherResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> otherResponses,\n+                                      Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        Set<String> recipients = getRecipients(otherResponses);\n+        for (String recipient : recipients) {\n+            List<FeedbackResponseAttributes> expectedResponses = otherResponses.stream()\n+                    .filter(r -> r.getRecipient().equals(recipient))\n+                    .collect(Collectors.toList());\n+\n+            verifyResponseForRecipient(question, recipient, expectedResponses, visibleGivers, visibleRecipients);\n+        }\n+    }\n+\n+    private Set<String> getRecipients(List<FeedbackResponseAttributes> responses) {\n+        return responses.stream().map(FeedbackResponseAttributes::getRecipient).collect(Collectors.toSet());\n+    }\n+\n+    private void verifyResponseForRecipient(FeedbackQuestionAttributes question, String recipient,\n+                                            List<FeedbackResponseAttributes> otherResponses,\n+                                            Set<String> visibleGivers, Set<String> visibleRecipients) {\n+        List<WebElement> responseViews = getAllResponseViews(question.questionNumber);\n+        for (FeedbackResponseAttributes response : otherResponses) {\n+            boolean isRecipientVisible = visibleRecipients.contains(response.giver)\n+                    || recipient.equals(CURRENT_STUDENT_IDENTIFIER);\n+            boolean isGiverVisible = visibleGivers.contains(response.giver)\n+                    || (visibleGivers.contains(\"RECEIVER\") && response.getRecipient().equals(CURRENT_STUDENT_IDENTIFIER))\n+                    || response.getGiver().equals(CURRENT_STUDENT_IDENTIFIER);\n+            if (isRecipientVisible) {\n+                int recipientIndex = getRecipientIndex(question.questionNumber, recipient);\n+                WebElement responseView = responseViews.get(recipientIndex);\n+                List<WebElement> responsesFields = getAllResponseFields(responseView);\n+                if (isGiverVisible) {\n+                    int giverIndex = getGiverIndex(responseView, response.getGiver());\n+                    assertTrue(isResponseEqual(question, responsesFields.get(giverIndex), response));\n+                } else {\n+                    assertTrue(isAnyAnonymousResponseEqual(question, responseView, response));\n+                }\n+            } else {\n+                verifyAnonymousResponseView(question, otherResponses, isGiverVisible);\n+            }\n+        }\n+    }\n+\n+    private void verifyAnonymousResponseView(FeedbackQuestionAttributes question,\n+                                             List<FeedbackResponseAttributes> expectedResponses,\n+                                             boolean isGiverVisible) {\n+        List<WebElement> anonymousViews = getAllResponseViews(question.questionNumber).stream()\n+                .filter(v -> isAnonymous(v.findElement(By.id(\"response-recipient\")).getText()))\n+                .collect(Collectors.toList());\n+        if (anonymousViews.isEmpty()) {\n+            throw new RuntimeException(\"No anonymous views found\");\n+        }\n+\n+        boolean hasCorrectResponses = true;\n+        for (WebElement responseView : anonymousViews) {\n+            hasCorrectResponses = true;\n+            List<WebElement> responseFields = getAllResponseFields(responseView);\n+            for (FeedbackResponseAttributes response : expectedResponses) {\n+                if (isGiverVisible) {\n+                    int giverIndex = getGiverIndex(responseView, response.getGiver());\n+                    if (!isResponseEqual(question, responseFields.get(giverIndex), response)) {\n+                        hasCorrectResponses = false;\n+                        break;\n+                    }\n+                } else if (!isAnyAnonymousResponseEqual(question, responseView, response)) {\n+                    hasCorrectResponses = false;\n+                    break;\n+                }\n+            }\n+            if (hasCorrectResponses) {\n+                break;\n+            }\n+        }\n+        assertTrue(hasCorrectResponses);\n+    }\n+\n+    private boolean isResponseEqual(FeedbackQuestionAttributes question, WebElement responseField,\n+                                    FeedbackResponseAttributes response) {\n+        if (question.getQuestionType().equals(FeedbackQuestionType.RUBRIC)) {\n+            return isRubricResponseEqual(responseField, response);\n+        } else {\n+            return getAnswerString(question, response.getResponseDetails()).equals(responseField.getText());\n+        }\n+    }\n+\n+    private boolean isRubricResponseEqual(WebElement responseField, FeedbackResponseAttributes response) {\n+        FeedbackRubricResponseDetails responseDetails = (FeedbackRubricResponseDetails) response.getResponseDetails();\n+        List<Integer> answers = responseDetails.getAnswer();\n+        for (int i = 0; i < answers.size(); i++) {\n+            WebElement rubricRow = responseField.findElements(By.cssSelector(\"#rubric-answers tr\")).get(i);\n+            WebElement rubricCell = rubricRow.findElements(By.tagName(\"td\")).get(answers.get(i) + 1);\n+            if (rubricCell.findElements(By.className(\"fa-check\")).size() == 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isAnonymous(String identifier) {\n+        return identifier.contains(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT);\n+    }\n+\n+    private boolean isAnyAnonymousResponseEqual(FeedbackQuestionAttributes question, WebElement responseView,\n+                                                FeedbackResponseAttributes response) {\n+        List<WebElement> giverNames = responseView.findElements(By.id(\"response-giver\"));\n+        List<WebElement> responseFields = getAllResponseFields(responseView);\n+        for (int i = 0; i < giverNames.size(); i++) {\n+            if (isAnonymous(giverNames.get(i).getText()) && isResponseEqual(question, responseFields.get(i), response)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String getCourseId() {\n+        return courseId.getText();\n+    }\n+\n+    private String getFeedbackSessionName() {\n+        return sessionName.getText();\n+    }\n+\n+    private String getOpeningTime() {\n+        return sessionOpeningTime.getText();\n+    }\n+\n+    private String getClosingTime() {\n+        return sessionClosingTime.getText();\n+    }\n+\n+    private void assertDateEquals(String actual, Instant instant, ZoneId timeZone) {\n+        String dateStrWithAbbr = getDateStringWithAbbr(instant, timeZone);\n+        String dateStrWithOffset = getDateStringWithOffset(instant, timeZone);\n+\n+        assertTrue(actual.equals(dateStrWithAbbr) || actual.equals(dateStrWithOffset));\n+    }\n+\n+    private String getDateStringWithAbbr(Instant instant, ZoneId timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"EE, dd MMM, yyyy, hh:mm a z\")\n+                .format(instant.atZone(timeZone));\n+    }\n+\n+    private String getDateStringWithOffset(Instant instant, ZoneId timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"EE, dd MMM, yyyy, hh:mm a X\")\n+                .format(instant.atZone(timeZone));\n+    }\n+\n+    private String getQuestionText(int questionNum) {\n+        return getQuestionResponsesSection(questionNum).findElement(By.id(\"question-text\")).getText().trim();\n+    }\n+\n+    private String getMcqAddInfo(FeedbackMcqQuestionDetails questionDetails) {\n+        String additionalInfo = \"Multiple-choice (single answer) question options:\" + System.lineSeparator();\n+        return appendMultiChoiceInfo(additionalInfo, questionDetails.getGenerateOptionsFor(),\n+                questionDetails.getMcqChoices(), questionDetails.isOtherEnabled());\n+    }\n+\n+    private String getMsqAddInfo(FeedbackMsqQuestionDetails questionDetails) {\n+        String additionalInfo = \"Multiple-choice (multiple answers) question options:\" + System.lineSeparator();\n+        return appendMultiChoiceInfo(additionalInfo, questionDetails.getGenerateOptionsFor(),\n+                questionDetails.getMsqChoices(), questionDetails.isOtherEnabled());\n+    }\n+\n+    private String appendMultiChoiceInfo(String info, FeedbackParticipantType generateOptionsFor, List<String> choices,\n+                                         boolean isOtherEnabled) {\n+        StringBuilder additionalInfo = new StringBuilder(info);\n+        if (generateOptionsFor.equals(FeedbackParticipantType.NONE)) {\n+            additionalInfo = appendOptions(additionalInfo, choices);\n+            if (isOtherEnabled) {\n+                additionalInfo.append(System.lineSeparator()).append(\"Other\");\n+            }\n+        } else {\n+            additionalInfo.append(\"The options for this question is automatically generated from the list of all \")\n+                    .append(generateOptionsFor.toDisplayGiverName().toLowerCase())\n+                    .append('.');\n+\n+        }\n+        return additionalInfo.toString();\n+    }\n+\n+    private String getRubricAddInfo(FeedbackRubricQuestionDetails questionDetails) {\n+        StringBuilder additionalInfo = new StringBuilder(\"Rubric question sub-questions:\");\n+        additionalInfo.append(System.lineSeparator());\n+        return appendOptions(additionalInfo, questionDetails.getRubricSubQuestions()).toString();\n+    }\n+\n+    private String getNumScaleAddInfo(FeedbackNumericalScaleQuestionDetails questionDetails) {\n+        return \"Numerical-scale question:\" + System.lineSeparator() + \"Minimum value: \" + questionDetails.getMinScale()\n+                + \". Increment: \" + questionDetails.getStep() + \". Maximum value: \" + questionDetails.getMaxScale() + \".\";\n+    }\n+\n+    private String getRankOptionsAddInfo(FeedbackRankOptionsQuestionDetails questionDetails) {\n+        StringBuilder additionalInfo = new StringBuilder(\"Rank (options) question options:\");\n+        additionalInfo.append(System.lineSeparator());\n+        return appendOptions(additionalInfo, questionDetails.getOptions()).toString();\n+    }\n+\n+    private String getConstSumOptionsAddInfo(FeedbackConstantSumQuestionDetails questionDetails) {\n+        StringBuilder additionalInfo = new StringBuilder(\"Distribute points (among options) question options:\");\n+        additionalInfo.append(System.lineSeparator());\n+        additionalInfo = appendOptions(additionalInfo, questionDetails.getConstSumOptions());\n+        additionalInfo.append(System.lineSeparator());\n+        if (questionDetails.isPointsPerOption()) {\n+            additionalInfo.append(\"Points per option: \");\n+        } else {\n+            additionalInfo.append(\"Total points: \");\n+        }\n+        additionalInfo.append(questionDetails.getPoints());\n+        return additionalInfo.toString();\n+    }\n+\n+    private String getConstSumRecipientsAddInfo(FeedbackConstantSumQuestionDetails questionDetails) {\n+        StringBuilder additionalInfo = new StringBuilder(\"Distribute points (among recipients) question\");\n+        additionalInfo.append(System.lineSeparator());\n+        if (questionDetails.isPointsPerOption()) {\n+            additionalInfo.append(\"Points per recipient: \");\n+        } else {\n+            additionalInfo.append(\"Total points: \");\n+        }\n+        additionalInfo.append(questionDetails.getPoints());\n+        return additionalInfo.toString();\n+    }\n+\n+    private StringBuilder appendOptions(StringBuilder info, List<String> options) {\n+        StringBuilder additionalInfo = info;\n+        for (String option : options) {\n+            additionalInfo.append(option).append(System.lineSeparator());\n+        }\n+        return additionalInfo.deleteCharAt(additionalInfo.length() - 1);\n+    }\n+\n+    private WebElement getQuestionResponsesSection(int questionNum) {\n+        return browser.driver.findElement(By.id(\"question-\" + questionNum + \"-responses\"));\n+    }\n+\n+    private void showAdditionalInfo(int qnNumber) {\n+        WebElement additionalInfoLink = getQuestionResponsesSection(qnNumber).findElement(By.id(\"additional-info-link\"));\n+        if (additionalInfoLink.getText().equals(\"[more]\")) {\n+            click(additionalInfoLink);\n+            waitUntilAnimationFinish();\n+        }\n+    }\n+\n+    private String getAdditionalInfo(int questionNum) {\n+        showAdditionalInfo(questionNum);\n+        return getQuestionResponsesSection(questionNum).findElement(By.id(\"additional-info\")).getText();\n+    }\n+\n+    private WebElement getGivenResponseField(int questionNum, String receiver) {\n+        int recipientIndex = getGivenRecipientIndex(questionNum, receiver);\n+        return getQuestionResponsesSection(questionNum)\n+                .findElements(By.cssSelector(\"#given-responses tm-single-response\"))\n+                .get(recipientIndex);\n+    }\n+\n+    private int getGivenRecipientIndex(int questionNum, String recipient) {\n+        List<WebElement> recipients = getQuestionResponsesSection(questionNum)\n+                .findElements(By.cssSelector(\"#given-responses #response-recipient\"));\n+        for (int i = 0; i < recipients.size(); i++) {\n+            if (recipients.get(i).getText().split(\"To: \")[1].equals(recipient)) {\n+                return i;\n+            }\n+        }\n+        throw new RuntimeException(\"Recipient not found: \" + recipient);", "originalCommit": "eb4310847a32d25c5409c955112ec45e8ba98c9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MjU3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10696#discussion_r515572578", "bodyText": "Hmm... For some of them if I change to using fail, I have to add a return null after to avoid missing return statement error. Is it better if I change to throw new AssertionError() instead?", "author": "jtankw3", "createdAt": "2020-11-01T04:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MTEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9beea3eeae68293ba2b8168a3efdb808f7aa7f0", "chunk": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\nindex cdf415f041..a208b2074d 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/StudentFeedbackResultsPage.java\n\n@@ -192,7 +192,7 @@ public class StudentFeedbackResultsPage extends AppPage {\n                 .filter(v -> isAnonymous(v.findElement(By.id(\"response-recipient\")).getText()))\n                 .collect(Collectors.toList());\n         if (anonymousViews.isEmpty()) {\n-            throw new RuntimeException(\"No anonymous views found\");\n+            fail(\"No anonymous views found\");\n         }\n \n         boolean hasCorrectResponses = true;\n"}}, {"oid": "bc11d65bb676fd90a591841824f9798923713b7c", "url": "https://github.com/TEAMMATES/teammates/commit/bc11d65bb676fd90a591841824f9798923713b7c", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into student-results-e2e\n\n# Conflicts:\n#\tsrc/e2e/java/teammates/e2e/cases/StudentFeedbackResultsPageE2ETest.java\n#\tsrc/e2e/resources/testng-e2e.xml", "committedDate": "2020-11-01T03:57:36Z", "type": "commit"}, {"oid": "b9beea3eeae68293ba2b8168a3efdb808f7aa7f0", "url": "https://github.com/TEAMMATES/teammates/commit/b9beea3eeae68293ba2b8168a3efdb808f7aa7f0", "message": "Use AssertionError instead of RuntimeException", "committedDate": "2020-11-01T04:18:35Z", "type": "commit"}, {"oid": "1d64b0f0b9818fc33435f13ae84aa37a3b47a273", "url": "https://github.com/TEAMMATES/teammates/commit/1d64b0f0b9818fc33435f13ae84aa37a3b47a273", "message": "Merge branch 'master' into student-results-e2e", "committedDate": "2020-11-01T06:34:49Z", "type": "commit"}]}