{"pr_number": 10231, "pr_title": "[#9993] Add Access Control Tests for Actions from API Endpoints", "pr_createdAt": "2020-06-24T09:27:27Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10231", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3Mjg1Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r444772856", "bodyText": "I think here can be more consistent with style by just using if as guarding clause.", "author": "Derek-Hardy", "createdAt": "2020-06-24T09:41:34Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java", "diffHunk": "@@ -37,10 +38,17 @@ public void checkSpecificAccessControl() {\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n         switch (intent) {\n         case INSTRUCTOR_RESULT:\n-            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n-            gateKeeper.verifyAccessible(instructor, fs);\n+            if (userInfo == null) {\n+                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource\");\n+            } else {\n+                InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+                gateKeeper.verifyAccessible(instructor, fs);\n+            }", "originalCommit": "3f3a2c6ef2a8ea4b35bbde3187626476baf2fef8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\nindex 4b8aaa68a8..61d8d7b117 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\n\n@@ -38,21 +38,18 @@ public class GetSessionResultsAction extends Action {\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n         switch (intent) {\n         case INSTRUCTOR_RESULT:\n-            if (userInfo == null) {\n+            if (userInfo == null || !userInfo.isInstructor) {\n                 throw new UnauthorizedAccessException(\"Instructor account is required to access this resource\");\n-            } else {\n-                InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n-                gateKeeper.verifyAccessible(instructor, fs);\n             }\n+            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+            gateKeeper.verifyAccessible(instructor, fs);\n             break;\n         case STUDENT_RESULT:\n             if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n                 throw new UnauthorizedAccessException(\"Student account is required to access this resource.\");\n             }\n             StudentAttributes student = getStudent(courseId);\n-\n             gateKeeper.verifyAccessible(student, fs);\n-\n             if (!fs.isPublished()) {\n                 throw new UnauthorizedAccessException(\"This feedback session is not yet published.\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3Nzc2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r444777762", "bodyText": "Maybe can have one arg on the same line as method name?", "author": "Derek-Hardy", "createdAt": "2020-06-24T09:50:01Z", "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -305,6 +335,16 @@ protected void verifyInaccessibleForSpecificInstructor(InstructorAttributes inst\n         verifyCannotAccess(params);\n     }\n \n+    protected void verifyAccessibleForAdminToMasqueradeAsInstructor(\n+            InstructorAttributes instructor, String[] submissionParams) {", "originalCommit": "3f3a2c6ef2a8ea4b35bbde3187626476baf2fef8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\nindex 94173f0ca3..a18732737b 100644\n--- a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n\n@@ -335,8 +335,8 @@ public abstract class BaseActionTest<T extends Action> extends BaseComponentTest\n         verifyCannotAccess(params);\n     }\n \n-    protected void verifyAccessibleForAdminToMasqueradeAsInstructor(\n-            InstructorAttributes instructor, String[] submissionParams) {\n+    protected void verifyAccessibleForAdminToMasqueradeAsInstructor(InstructorAttributes instructor,\n+                                                                    String[] submissionParams) {\n \n         ______TS(\"admin can access\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3Nzg1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r444777855", "bodyText": "Like here", "author": "Derek-Hardy", "createdAt": "2020-06-24T09:50:09Z", "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -218,6 +239,15 @@ protected void verifyOnlyInstructorsOfTheSameCourseCanAccess(String[] submission\n         verifyAccessibleForAdminToMasqueradeAsInstructor(submissionParams);\n     }\n \n+    protected void verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess(String privilege,\n+                                                                                           String[] submissionParams) {", "originalCommit": "3f3a2c6ef2a8ea4b35bbde3187626476baf2fef8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\nindex 94173f0ca3..7d6c43c816 100644\n--- a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n\n@@ -239,8 +238,9 @@ public abstract class BaseActionTest<T extends Action> extends BaseComponentTest\n         verifyAccessibleForAdminToMasqueradeAsInstructor(submissionParams);\n     }\n \n-    protected void verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess(String privilege,\n-                                                                                           String[] submissionParams) {\n+    protected void verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess(\n+            String privilege, String[] submissionParams)\n+            throws InvalidParametersException, EntityDoesNotExistException {\n         verifyInaccessibleWithoutLogin(submissionParams);\n         verifyInaccessibleForUnregisteredUsers(submissionParams);\n         verifyInaccessibleForStudents(submissionParams);\n"}}, {"oid": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "url": "https://github.com/TEAMMATES/teammates/commit/806f9963e32143a47564ec68bec4f90b6ac9d98d", "message": "Add Session Results & Submission Tests", "committedDate": "2020-06-25T03:09:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NTExNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445295114", "bodyText": "The check can be (and should be) inside getStudentOfCourseFromRequest to save the duplicated code.", "author": "xpdavid", "createdAt": "2020-06-25T04:06:53Z", "path": "src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java", "diffHunk": "@@ -36,6 +38,9 @@ public void checkSpecificAccessControl() {\n \n         switch (intent) {\n         case STUDENT_SUBMISSION:\n+            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {", "originalCommit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java b/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java\nindex 308580bc9f..2e59877d2b 100644\n--- a/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java\n\n@@ -38,9 +36,6 @@ public class DeleteFeedbackResponseCommentAction extends BasicCommentSubmissionA\n \n         switch (intent) {\n         case STUDENT_SUBMISSION:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Student account is required to access this resource.\");\n-            }\n             StudentAttributes student = getStudentOfCourseFromRequest(courseId);\n \n             gateKeeper.verifyAnswerableForStudent(question);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NTE1MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445295151", "bodyText": "Same here.", "author": "xpdavid", "createdAt": "2020-06-25T04:07:03Z", "path": "src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java", "diffHunk": "@@ -49,6 +54,9 @@ public void checkSpecificAccessControl() {\n                             ? student.getTeam() : student.getEmail());\n             break;\n         case INSTRUCTOR_SUBMISSION:\n+            if (userInfo == null || !userInfo.isInstructor) {", "originalCommit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java b/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java\nindex 308580bc9f..2e59877d2b 100644\n--- a/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/DeleteFeedbackResponseCommentAction.java\n\n@@ -54,9 +49,6 @@ public class DeleteFeedbackResponseCommentAction extends BasicCommentSubmissionA\n                             ? student.getTeam() : student.getEmail());\n             break;\n         case INSTRUCTOR_SUBMISSION:\n-            if (userInfo == null || !userInfo.isInstructor) {\n-                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource\");\n-            }\n             InstructorAttributes instructorAsFeedbackParticipant = getInstructorOfCourseFromRequest(courseId);\n \n             gateKeeper.verifyAnswerableForInstructor(question);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NTU4OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445295589", "bodyText": "Shouldn't we use gateKeeper.verifyLoggedInUserPrivileges(); for any null check for userInfo?", "author": "xpdavid", "createdAt": "2020-06-25T04:08:59Z", "path": "src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java", "diffHunk": "@@ -28,16 +30,25 @@ public void checkSpecificAccessControl() {\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n         case STUDENT_RESULT:\n+            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n+                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n+            }\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(courseId);\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n+            if (userInfo == null) {", "originalCommit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java b/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\nindex e0550f5319..b15e517a3d 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\n\n@@ -30,25 +28,16 @@ public class GetFeedbackSessionAction extends BasicFeedbackSubmissionAction {\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n         case STUDENT_RESULT:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n-            }\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(courseId);\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n-            if (userInfo == null) {\n-                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource.\");\n-            }\n             gateKeeper.verifyAccessible(\n                     logic.getInstructorForGoogleId(courseId, userInfo.getId()),\n                     feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n         case INSTRUCTOR_RESULT:\n-            if (userInfo == null) {\n-                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource.\");\n-            }\n             InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(courseId);\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n             break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NTc3NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445295774", "bodyText": "What is this submissionParams for?", "author": "xpdavid", "createdAt": "2020-06-25T04:09:44Z", "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -177,6 +180,23 @@ protected void loginAsStudentInstructor(String userId) {\n         assertFalse(user.isAdmin);\n     }\n \n+    protected void updateInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,\n+                                                            String privilege, String[] sections, String[] submissionParams) {", "originalCommit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\nindex a18732737b..7d6c43c816 100644\n--- a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n\n@@ -180,21 +181,19 @@ public abstract class BaseActionTest<T extends Action> extends BaseComponentTest\n         assertFalse(user.isAdmin);\n     }\n \n-    protected void updateInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,\n-                                                            String privilege, String[] sections, String[] submissionParams) {\n+    protected void grantInstructorWithSectionPrivilege(\n+            InstructorAttributes instructor, String privilege, String[] sections)\n+            throws InvalidParametersException, EntityDoesNotExistException {\n         InstructorPrivileges instructorPrivileges = new InstructorPrivileges();\n \n         for (String section : sections) {\n             instructorPrivileges.updatePrivilege(section, privilege, true);\n         }\n \n-        try {\n-            logic.updateInstructor(\n-                    InstructorAttributes.updateOptionsWithEmailBuilder(instructor.getCourseId(), instructor.email)\n-                            .withPrivileges(instructorPrivileges).build());\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n+        logic.updateInstructor(InstructorAttributes\n+                .updateOptionsWithEmailBuilder(instructor.getCourseId(), instructor.email)\n+                .withPrivileges(instructorPrivileges)\n+                .build());\n     }\n \n     // The next few methods are for testing access control\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NjA2Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445296067", "bodyText": "We should just throw the exception instead of keep it silent? Same for other places.", "author": "xpdavid", "createdAt": "2020-06-25T04:11:06Z", "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -177,6 +180,23 @@ protected void loginAsStudentInstructor(String userId) {\n         assertFalse(user.isAdmin);\n     }\n \n+    protected void updateInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,\n+                                                            String privilege, String[] sections, String[] submissionParams) {\n+        InstructorPrivileges instructorPrivileges = new InstructorPrivileges();\n+\n+        for (String section : sections) {\n+            instructorPrivileges.updatePrivilege(section, privilege, true);\n+        }\n+\n+        try {\n+            logic.updateInstructor(\n+                    InstructorAttributes.updateOptionsWithEmailBuilder(instructor.getCourseId(), instructor.email)\n+                            .withPrivileges(instructorPrivileges).build());\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\nindex a18732737b..7d6c43c816 100644\n--- a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n\n@@ -180,21 +181,19 @@ public abstract class BaseActionTest<T extends Action> extends BaseComponentTest\n         assertFalse(user.isAdmin);\n     }\n \n-    protected void updateInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,\n-                                                            String privilege, String[] sections, String[] submissionParams) {\n+    protected void grantInstructorWithSectionPrivilege(\n+            InstructorAttributes instructor, String privilege, String[] sections)\n+            throws InvalidParametersException, EntityDoesNotExistException {\n         InstructorPrivileges instructorPrivileges = new InstructorPrivileges();\n \n         for (String section : sections) {\n             instructorPrivileges.updatePrivilege(section, privilege, true);\n         }\n \n-        try {\n-            logic.updateInstructor(\n-                    InstructorAttributes.updateOptionsWithEmailBuilder(instructor.getCourseId(), instructor.email)\n-                            .withPrivileges(instructorPrivileges).build());\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n+        logic.updateInstructor(InstructorAttributes\n+                .updateOptionsWithEmailBuilder(instructor.getCourseId(), instructor.email)\n+                .withPrivileges(instructorPrivileges)\n+                .build());\n     }\n \n     // The next few methods are for testing access control\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NjY2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445296662", "bodyText": "As the we are setting the privilege to true, it is better to name the method as grantPrivilege instead of updatePrivilge.", "author": "xpdavid", "createdAt": "2020-06-25T04:13:48Z", "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -177,6 +180,23 @@ protected void loginAsStudentInstructor(String userId) {\n         assertFalse(user.isAdmin);\n     }\n \n+    protected void updateInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,", "originalCommit": "806f9963e32143a47564ec68bec4f90b6ac9d98d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\nindex a18732737b..7d6c43c816 100644\n--- a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n\n@@ -180,21 +181,19 @@ public abstract class BaseActionTest<T extends Action> extends BaseComponentTest\n         assertFalse(user.isAdmin);\n     }\n \n-    protected void updateInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,\n-                                                            String privilege, String[] sections, String[] submissionParams) {\n+    protected void grantInstructorWithSectionPrivilege(\n+            InstructorAttributes instructor, String privilege, String[] sections)\n+            throws InvalidParametersException, EntityDoesNotExistException {\n         InstructorPrivileges instructorPrivileges = new InstructorPrivileges();\n \n         for (String section : sections) {\n             instructorPrivileges.updatePrivilege(section, privilege, true);\n         }\n \n-        try {\n-            logic.updateInstructor(\n-                    InstructorAttributes.updateOptionsWithEmailBuilder(instructor.getCourseId(), instructor.email)\n-                            .withPrivileges(instructorPrivileges).build());\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n+        logic.updateInstructor(InstructorAttributes\n+                .updateOptionsWithEmailBuilder(instructor.getCourseId(), instructor.email)\n+                .withPrivileges(instructorPrivileges)\n+                .build());\n     }\n \n     // The next few methods are for testing access control\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5ODU2Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445798566", "bodyText": "The error message is not correct as instructor can call the method to access moderated/preview person.\nActually, I think it is not the method's responsibility to verify the login privilege here. As long as the pre-condition for getStudentOfCourseFromRequest is fulfilled, it should executed.\ni.e.\n\nThe login check should be only verified at orElseGet\nOther login privilege check should be in checkAccessControlForStudentFeedbackSubmission (e.g., to verify it is logged in when access as preview person)", "author": "xpdavid", "createdAt": "2020-06-25T19:47:16Z", "path": "src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java", "diffHunk": "@@ -48,6 +48,9 @@ protected void verifyInstructorCanSeeQuestionIfInModeration(FeedbackQuestionAttr\n      * Gets the student involved in the submission process.\n      */\n     protected StudentAttributes getStudentOfCourseFromRequest(String courseId) {\n+        if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n+            throw new UnauthorizedAccessException(\"Student account is required to access this resource.\");", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java b/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java\nindex d77749683f..218cf8454b 100644\n--- a/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java\n\n@@ -48,9 +48,6 @@ public abstract class BasicFeedbackSubmissionAction extends Action {\n      * Gets the student involved in the submission process.\n      */\n     protected StudentAttributes getStudentOfCourseFromRequest(String courseId) {\n-        if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-            throw new UnauthorizedAccessException(\"Student account is required to access this resource.\");\n-        }\n         String moderatedPerson = getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);\n         String previewAsPerson = getRequestParamValue(Const.ParamsNames.PREVIEWAS);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5ODg5MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445798891", "bodyText": "So you can delete the check?", "author": "xpdavid", "createdAt": "2020-06-25T19:47:57Z", "path": "src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java", "diffHunk": "@@ -40,11 +42,17 @@ public void checkSpecificAccessControl() {\n                 logic.getFeedbackSession(feedbackQuestion.getFeedbackSessionName(), feedbackQuestion.getCourseId());\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n+            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java b/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java\nindex f9b8c579ea..d156f3e87c 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java\n\n@@ -42,17 +40,11 @@ public class GetFeedbackQuestionRecipientsAction extends BasicFeedbackSubmission\n                 logic.getFeedbackSession(feedbackQuestion.getFeedbackSessionName(), feedbackQuestion.getCourseId());\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n-            }\n             gateKeeper.verifyAnswerableForStudent(feedbackQuestion);\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(feedbackSession.getCourseId());\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n-            if (userInfo == null) {\n-                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource.\");\n-            }\n             gateKeeper.verifyAnswerableForInstructor(feedbackQuestion);\n             InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(feedbackSession.getCourseId());\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5ODk1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445798955", "bodyText": "Same here?", "author": "xpdavid", "createdAt": "2020-06-25T19:48:03Z", "path": "src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java", "diffHunk": "@@ -40,11 +42,17 @@ public void checkSpecificAccessControl() {\n                 logic.getFeedbackSession(feedbackQuestion.getFeedbackSessionName(), feedbackQuestion.getCourseId());\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n+            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n+                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n+            }\n             gateKeeper.verifyAnswerableForStudent(feedbackQuestion);\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(feedbackSession.getCourseId());\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n+            if (userInfo == null) {", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java b/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java\nindex f9b8c579ea..d156f3e87c 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetFeedbackQuestionRecipientsAction.java\n\n@@ -42,17 +40,11 @@ public class GetFeedbackQuestionRecipientsAction extends BasicFeedbackSubmission\n                 logic.getFeedbackSession(feedbackQuestion.getFeedbackSessionName(), feedbackQuestion.getCourseId());\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n-            }\n             gateKeeper.verifyAnswerableForStudent(feedbackQuestion);\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(feedbackSession.getCourseId());\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n-            if (userInfo == null) {\n-                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource.\");\n-            }\n             gateKeeper.verifyAnswerableForInstructor(feedbackQuestion);\n             InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(feedbackSession.getCourseId());\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTQzMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445799432", "bodyText": "Same here.", "author": "xpdavid", "createdAt": "2020-06-25T19:49:03Z", "path": "src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java", "diffHunk": "@@ -28,16 +30,22 @@ public void checkSpecificAccessControl() {\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n         case STUDENT_RESULT:\n+            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java b/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\nindex 55f1244d2c..b15e517a3d 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\n\n@@ -30,22 +28,16 @@ public class GetFeedbackSessionAction extends BasicFeedbackSubmissionAction {\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n         case STUDENT_RESULT:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n-            }\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(courseId);\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n             gateKeeper.verifyAccessible(\n                     logic.getInstructorForGoogleId(courseId, userInfo.getId()),\n                     feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n-            break;\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n             InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(courseId);\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n             break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTU5NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445799594", "bodyText": "break?", "author": "xpdavid", "createdAt": "2020-06-25T19:49:20Z", "path": "src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java", "diffHunk": "@@ -28,16 +30,22 @@ public void checkSpecificAccessControl() {\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n         case STUDENT_RESULT:\n+            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n+                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n+            }\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(courseId);\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n+            gateKeeper.verifyLoggedInUserPrivileges();\n             gateKeeper.verifyAccessible(\n                     logic.getInstructorForGoogleId(courseId, userInfo.getId()),\n                     feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n+            break;", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1NzEwOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r446757108", "bodyText": "I think this was automatically added from my IDE for empty switch block. I'm guessing the original intent is for it to cascade to the next block right?", "author": "madanalogy", "createdAt": "2020-06-29T03:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java b/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\nindex 55f1244d2c..b15e517a3d 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetFeedbackSessionAction.java\n\n@@ -30,22 +28,16 @@ public class GetFeedbackSessionAction extends BasicFeedbackSubmissionAction {\n         switch (intent) {\n         case STUDENT_SUBMISSION:\n         case STUDENT_RESULT:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Instructor or Student account is required to access this resource.\");\n-            }\n             StudentAttributes studentAttributes = getStudentOfCourseFromRequest(courseId);\n             checkAccessControlForStudentFeedbackSubmission(studentAttributes, feedbackSession);\n             break;\n         case FULL_DETAIL:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n             gateKeeper.verifyAccessible(\n                     logic.getInstructorForGoogleId(courseId, userInfo.getId()),\n                     feedbackSession);\n             break;\n         case INSTRUCTOR_SUBMISSION:\n-            break;\n         case INSTRUCTOR_RESULT:\n-            gateKeeper.verifyLoggedInUserPrivileges();\n             InstructorAttributes instructorAttributes = getInstructorOfCourseFromRequest(courseId);\n             checkAccessControlForInstructorFeedbackSubmission(instructorAttributes, feedbackSession);\n             break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTc0OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445799749", "bodyText": "Same here", "author": "xpdavid", "createdAt": "2020-06-25T19:49:39Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java", "diffHunk": "@@ -37,14 +38,18 @@ public void checkSpecificAccessControl() {\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n         switch (intent) {\n         case INSTRUCTOR_RESULT:\n-            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n+            if (userInfo == null || !userInfo.isInstructor) {", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2MzI3Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r446763272", "bodyText": "Removing this null check throws a NPE in verifyOnlyInstructorsOfTheSameCourseCanAccess under testAccessControl_instructorAccessHisCourseInstructorResult_shouldPass", "author": "madanalogy", "createdAt": "2020-06-29T04:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\nindex 61d8d7b117..c1b2b4a2f7 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\n\n@@ -38,18 +37,14 @@ public class GetSessionResultsAction extends Action {\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n         switch (intent) {\n         case INSTRUCTOR_RESULT:\n-            if (userInfo == null || !userInfo.isInstructor) {\n-                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource\");\n-            }\n-            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n             gateKeeper.verifyAccessible(instructor, fs);\n             break;\n         case STUDENT_RESULT:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Student account is required to access this resource.\");\n-            }\n             StudentAttributes student = getStudent(courseId);\n+\n             gateKeeper.verifyAccessible(student, fs);\n+\n             if (!fs.isPublished()) {\n                 throw new UnauthorizedAccessException(\"This feedback session is not yet published.\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTgwNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445799805", "bodyText": "Same here", "author": "xpdavid", "createdAt": "2020-06-25T19:49:46Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java", "diffHunk": "@@ -37,14 +38,18 @@ public void checkSpecificAccessControl() {\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n         switch (intent) {\n         case INSTRUCTOR_RESULT:\n-            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n+            if (userInfo == null || !userInfo.isInstructor) {\n+                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource\");\n+            }\n+            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n             gateKeeper.verifyAccessible(instructor, fs);\n             break;\n         case STUDENT_RESULT:\n+            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2MzA4OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r446763088", "bodyText": "Removing this null check throws a NPE in verifyInaccessibleWithoutLogin under testAccessControl_withoutCorrectAuthInfoAccessStudentResult_shouldFail", "author": "madanalogy", "createdAt": "2020-06-29T04:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2Mzc3MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r446763770", "bodyText": "Then it's time to figure out which part of code result in the NPE. (Does the NPE cause by accessing userInfo without checking login privilege? If yes, should the method be responsible to check the login privilege?)", "author": "xpdavid", "createdAt": "2020-06-29T04:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2NjMxMw==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r446766313", "bodyText": "The NPE was caused by calling the action's checkSpecificAccessControl from the test case verifyInaccessibleWithoutLogin which specifically logs the user out. Since the action here is generated from the ActionFactory in WebApiServlet (if I'm not mistaken), it's feasible that someone could attempt to manually submit a request to our backend to request for the resource mapped to this action. Currently the server manages this by throwing an NPE since it can't get the userInfo.", "author": "madanalogy", "createdAt": "2020-06-29T04:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2Njk4OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r446766989", "bodyText": "Ahh. I see. I thought it is the same code related to feedback submission while it is not.", "author": "xpdavid", "createdAt": "2020-06-29T04:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2NzM4OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r446767388", "bodyText": "Yeap, the feedback submission has no issues when I remove the extra checks as you pointed out. I'll rectify that first and request for your review afterwards.", "author": "madanalogy", "createdAt": "2020-06-29T04:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5OTgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\nindex 61d8d7b117..c1b2b4a2f7 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java\n\n@@ -38,18 +37,14 @@ public class GetSessionResultsAction extends Action {\n         Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n         switch (intent) {\n         case INSTRUCTOR_RESULT:\n-            if (userInfo == null || !userInfo.isInstructor) {\n-                throw new UnauthorizedAccessException(\"Instructor account is required to access this resource\");\n-            }\n-            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+            InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.getId());\n             gateKeeper.verifyAccessible(instructor, fs);\n             break;\n         case STUDENT_RESULT:\n-            if (userInfo == null && StringHelper.isEmpty(getRequestParamValue(Const.ParamsNames.REGKEY))) {\n-                throw new UnauthorizedAccessException(\"Student account is required to access this resource.\");\n-            }\n             StudentAttributes student = getStudent(courseId);\n+\n             gateKeeper.verifyAccessible(student, fs);\n+\n             if (!fs.isPublished()) {\n                 throw new UnauthorizedAccessException(\"This feedback session is not yet published.\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwMDE5Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445800193", "bodyText": "I think only is not necessary\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void grantInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,\n          \n          \n            \n                protected void grantInstructorWithSectionPrivilege(InstructorAttributes instructor,", "author": "xpdavid", "createdAt": "2020-06-25T19:50:29Z", "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -177,6 +181,22 @@ protected void loginAsStudentInstructor(String userId) {\n         assertFalse(user.isAdmin);\n     }\n \n+    protected void grantInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwMTU1MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445801551", "bodyText": "I think @Derek-Hardy has brought this up for the indentation. However, it is not ideal to put one param \"up\" for very long method.\nSee https://oss-generic.github.io/process/codingStandards/CodingStandard-Java.html", "author": "xpdavid", "createdAt": "2020-06-25T19:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwMDE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0OTI3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445949278", "bodyText": "A side note: we have moved the coding standard to https://se-education.org/guides/conventions/java/index.html\nNo changes to contents though.", "author": "damithc", "createdAt": "2020-06-26T03:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwMDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\nindex 9abc9ad4a6..7d6c43c816 100644\n--- a/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/BaseActionTest.java\n\n@@ -181,9 +181,8 @@ public abstract class BaseActionTest<T extends Action> extends BaseComponentTest\n         assertFalse(user.isAdmin);\n     }\n \n-    protected void grantInstructorWithOnlySectionPrivilege(InstructorAttributes instructor,\n-                                                           String privilege,\n-                                                           String[] sections)\n+    protected void grantInstructorWithSectionPrivilege(\n+            InstructorAttributes instructor, String privilege, String[] sections)\n             throws InvalidParametersException, EntityDoesNotExistException {\n         InstructorPrivileges instructorPrivileges = new InstructorPrivileges();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNTU3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10231#discussion_r445805578", "bodyText": "Same reason here.\n\nActually, I think it is not the method's responsibility to verify the instructor privilege here. As long as the pre-condition for getInstructorOfCourseFromRequest is fulfilled, it should executed.\n\n\nThe login check should be only verified at L110 (where you delete the old code)\nThe caller method should verify that the entity is instructor (I think already is as checkAccessControlForInstructorFeedbackSubmission).", "author": "xpdavid", "createdAt": "2020-06-25T20:01:00Z", "path": "src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java", "diffHunk": "@@ -99,6 +102,9 @@ protected void checkAccessControlForStudentFeedbackSubmission(\n      * Gets the instructor involved in the submission process.\n      */\n     protected InstructorAttributes getInstructorOfCourseFromRequest(String courseId) {\n+        if (userInfo == null || !userInfo.isInstructor) {", "originalCommit": "b785f3c6f503e731430ea4f0863eb0d39cfed9b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java b/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java\nindex d77749683f..218cf8454b 100644\n--- a/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/BasicFeedbackSubmissionAction.java\n\n@@ -102,9 +104,6 @@ public abstract class BasicFeedbackSubmissionAction extends Action {\n      * Gets the instructor involved in the submission process.\n      */\n     protected InstructorAttributes getInstructorOfCourseFromRequest(String courseId) {\n-        if (userInfo == null || !userInfo.isInstructor) {\n-            throw new UnauthorizedAccessException(\"Instructor account is required to access this resource\");\n-        }\n         String moderatedPerson = getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);\n         String previewAsPerson = getRequestParamValue(Const.ParamsNames.PREVIEWAS);\n \n"}}, {"oid": "ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "url": "https://github.com/TEAMMATES/teammates/commit/ef5a8bf6170f1e6815e98bc9f9a82b902730e25f", "message": "Set up base access control modifications", "committedDate": "2020-06-29T05:23:21Z", "type": "commit"}, {"oid": "9e9aa2ba024637a242c6fb8d282726d0433683ce", "url": "https://github.com/TEAMMATES/teammates/commit/9e9aa2ba024637a242c6fb8d282726d0433683ce", "message": "Add Instructor CRUD Tests", "committedDate": "2020-06-29T05:24:47Z", "type": "commit"}, {"oid": "65e96782f8e27ffbeec420a0ad4395cdf35be68a", "url": "https://github.com/TEAMMATES/teammates/commit/65e96782f8e27ffbeec420a0ad4395cdf35be68a", "message": "Add Student CRUD Tests", "committedDate": "2020-06-29T05:26:31Z", "type": "commit"}, {"oid": "819f3752c37d57da4d79f1758c2ccdb881e61e85", "url": "https://github.com/TEAMMATES/teammates/commit/819f3752c37d57da4d79f1758c2ccdb881e61e85", "message": "Add Course CRUD Tests", "committedDate": "2020-06-29T05:27:02Z", "type": "commit"}, {"oid": "fe0ae2db3cee5fd956029aa5574c57f6b2c84611", "url": "https://github.com/TEAMMATES/teammates/commit/fe0ae2db3cee5fd956029aa5574c57f6b2c84611", "message": "Add FeedbackSession CRUD Tests", "committedDate": "2020-06-29T05:28:29Z", "type": "commit"}, {"oid": "80bbf7d571824186950c0e5fa4d971c697e309ed", "url": "https://github.com/TEAMMATES/teammates/commit/80bbf7d571824186950c0e5fa4d971c697e309ed", "message": "Add FeedbackQuestion CRUD Tests", "committedDate": "2020-06-29T05:29:37Z", "type": "commit"}, {"oid": "bd0a17cfe955cd5f275f7d04f2cbcee1325dcbd0", "url": "https://github.com/TEAMMATES/teammates/commit/bd0a17cfe955cd5f275f7d04f2cbcee1325dcbd0", "message": "Add FeedbackResponse CRUD Tests", "committedDate": "2020-06-29T05:30:53Z", "type": "commit"}, {"oid": "d481254b9bf77f2354587fdfc8ef615f77230e31", "url": "https://github.com/TEAMMATES/teammates/commit/d481254b9bf77f2354587fdfc8ef615f77230e31", "message": "Add Session Results & Submission Tests", "committedDate": "2020-06-29T05:31:43Z", "type": "commit"}, {"oid": "d481254b9bf77f2354587fdfc8ef615f77230e31", "url": "https://github.com/TEAMMATES/teammates/commit/d481254b9bf77f2354587fdfc8ef615f77230e31", "message": "Add Session Results & Submission Tests", "committedDate": "2020-06-29T05:31:43Z", "type": "forcePushed"}, {"oid": "c5c3773710362e727521627ef2fafc6d94e51566", "url": "https://github.com/TEAMMATES/teammates/commit/c5c3773710362e727521627ef2fafc6d94e51566", "message": "Merge branch 'master' into 9993-tests", "committedDate": "2020-06-29T06:40:36Z", "type": "commit"}]}