{"pr_number": 9961, "pr_title": "[#9382] Enable downloading of feedback session results as CSV", "pr_createdAt": "2020-02-17T06:34:00Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/9961", "timeline": [{"oid": "e8c2403b02446226739ec9d3848a5a2319380d59", "url": "https://github.com/TEAMMATES/teammates/commit/e8c2403b02446226739ec9d3848a5a2319380d59", "message": "Enable downloading of feedback session results as csv", "committedDate": "2020-02-17T06:29:49Z", "type": "commit"}, {"oid": "027d7f3b1859c8c86c090935ba9dd1152a1cf44e", "url": "https://github.com/TEAMMATES/teammates/commit/027d7f3b1859c8c86c090935ba9dd1152a1cf44e", "message": "Create runtime wrapper for ExceedingRangeException", "committedDate": "2020-02-23T06:48:44Z", "type": "commit"}, {"oid": "f8b44ab557dbf1e1ef609f298f89bac0f979f842", "url": "https://github.com/TEAMMATES/teammates/commit/f8b44ab557dbf1e1ef609f298f89bac0f979f842", "message": "Add GetSessionResultsAction Tests", "committedDate": "2020-02-27T15:25:25Z", "type": "commit"}, {"oid": "db82b9d884aa9e07646f42928f4c42117ff68fa4", "url": "https://github.com/TEAMMATES/teammates/commit/db82b9d884aa9e07646f42928f4c42117ff68fa4", "message": "Fix checkstyle", "committedDate": "2020-02-27T15:27:47Z", "type": "commit"}, {"oid": "32f0d5e7458578010604d925fedc7957c5d2c71e", "url": "https://github.com/TEAMMATES/teammates/commit/32f0d5e7458578010604d925fedc7957c5d2c71e", "message": "Merge branch 'master' into download-session-result", "committedDate": "2020-02-28T09:01:19Z", "type": "commit"}, {"oid": "7d5ee678747758fe9faaac743f8761643787d485", "url": "https://github.com/TEAMMATES/teammates/commit/7d5ee678747758fe9faaac743f8761643787d485", "message": "Add tests for GetSessionResultsAsCsvAction", "committedDate": "2020-02-28T09:38:54Z", "type": "commit"}, {"oid": "024786b08dce8728186736b2d0efaf52d37547d2", "url": "https://github.com/TEAMMATES/teammates/commit/024786b08dce8728186736b2d0efaf52d37547d2", "message": "Enable downloading session results from instructor home page", "committedDate": "2020-02-28T10:29:08Z", "type": "commit"}, {"oid": "dd80d858998530dd0d4de1189160a96d551efe11", "url": "https://github.com/TEAMMATES/teammates/commit/dd80d858998530dd0d4de1189160a96d551efe11", "message": "Migrate tests from InstructorFeedbackResultsDownloadActionTest to GetSessionResultsAsCsvActionTest", "committedDate": "2020-02-29T16:14:57Z", "type": "commit"}, {"oid": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "url": "https://github.com/TEAMMATES/teammates/commit/daeb3878b89fc879e37dd9d711d9405fc88d1050", "message": "Fix for PMD checks", "committedDate": "2020-02-29T16:39:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNDY0Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390724643", "bodyText": "I honestly feel SectionDetail.containsSectionDetail should return true/false instead. You are not even using the value it returns here.", "author": "rrtheonlyone", "createdAt": "2020-03-11T03:14:32Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.SectionDetail;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.ExceedingRangeException;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.RequestExceedingRangeException;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Gets feedback session results in csv.\n+ */\n+public class GetSessionResultsAsCsvAction extends Action {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+\n+        FeedbackSessionAttributes fs = logic.getFeedbackSession(feedbackSessionName, courseId);\n+\n+        if (fs == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"Feedback session is not found\"));\n+        }\n+\n+        InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+        gateKeeper.verifyAccessible(instructor, fs);\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n+        String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n+        SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n+        if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n+            if (SectionDetail.containsSectionDetail(sectionDetailValue) == null) {", "originalCommit": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMzcyNg==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390733726", "bodyText": "Yes I think you are right. I'm not sure why SectionDetail.containsSectionDetail returns SectionDetail object since the value does not seem to be used anywhere else either. I will change the return type of that function.", "author": "niqiukun", "createdAt": "2020-03-11T03:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNDY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bee5d0c077488b3e3afba190ff0a48d1d385c8fe", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\nindex 43b673866d..ae91341b23 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n\n@@ -37,22 +37,28 @@ public class GetSessionResultsAsCsvAction extends Action {\n \n     @Override\n     public ActionResult execute() {\n+        // read in session details\n         String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n         String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n         SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n         if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n-            if (SectionDetail.containsSectionDetail(sectionDetailValue) == null) {\n+            if (!SectionDetail.containsSectionDetail(sectionDetailValue)) {\n                 throw new InvalidHttpParameterException(\"Section detail is invalid.\");\n             }\n             sectionDetail = SectionDetail.valueOf(sectionDetailValue);\n         }\n \n+        // read in other session-related info\n         String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n         String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n         String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+\n+        // read in optional params for csv generation\n         boolean isMissingResponsesShown = getBooleanRequestParamValue(\n                 Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n         boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n+\n+        // read in params for testing\n         String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");\n \n         String fileContent = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNDc1Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390724757", "bodyText": "what is this supposed to be? Is it a placeholder of some kind for later?", "author": "rrtheonlyone", "createdAt": "2020-03-11T03:15:07Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.SectionDetail;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.ExceedingRangeException;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.RequestExceedingRangeException;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Gets feedback session results in csv.\n+ */\n+public class GetSessionResultsAsCsvAction extends Action {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+\n+        FeedbackSessionAttributes fs = logic.getFeedbackSession(feedbackSessionName, courseId);\n+\n+        if (fs == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"Feedback session is not found\"));\n+        }\n+\n+        InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+        gateKeeper.verifyAccessible(instructor, fs);\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n+        String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n+        SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n+        if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n+            if (SectionDetail.containsSectionDetail(sectionDetailValue) == null) {\n+                throw new InvalidHttpParameterException(\"Section detail is invalid.\");\n+            }\n+            sectionDetail = SectionDetail.valueOf(sectionDetailValue);\n+        }\n+\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+        String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+        boolean isMissingResponsesShown = getBooleanRequestParamValue(\n+                Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n+        boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n+        String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");", "originalCommit": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczNDU4MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390734581", "bodyText": "This is used in the original InstructorFeedbackResultsDownloadAction also to simulate the test case where the data is to large to be downloaded at one time. You may refer to #8882.", "author": "niqiukun", "createdAt": "2020-03-11T04:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNDc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bee5d0c077488b3e3afba190ff0a48d1d385c8fe", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\nindex 43b673866d..ae91341b23 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n\n@@ -37,22 +37,28 @@ public class GetSessionResultsAsCsvAction extends Action {\n \n     @Override\n     public ActionResult execute() {\n+        // read in session details\n         String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n         String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n         SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n         if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n-            if (SectionDetail.containsSectionDetail(sectionDetailValue) == null) {\n+            if (!SectionDetail.containsSectionDetail(sectionDetailValue)) {\n                 throw new InvalidHttpParameterException(\"Section detail is invalid.\");\n             }\n             sectionDetail = SectionDetail.valueOf(sectionDetailValue);\n         }\n \n+        // read in other session-related info\n         String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n         String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n         String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+\n+        // read in optional params for csv generation\n         boolean isMissingResponsesShown = getBooleanRequestParamValue(\n                 Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n         boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n+\n+        // read in params for testing\n         String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");\n \n         String fileContent = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNTYwNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390725604", "bodyText": "I feel \"All\".equals(section) is a little hacky and hardcoded - any way to make it cleaner?", "author": "rrtheonlyone", "createdAt": "2020-03-11T03:18:58Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.SectionDetail;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.ExceedingRangeException;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.RequestExceedingRangeException;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Gets feedback session results in csv.\n+ */\n+public class GetSessionResultsAsCsvAction extends Action {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+\n+        FeedbackSessionAttributes fs = logic.getFeedbackSession(feedbackSessionName, courseId);\n+\n+        if (fs == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"Feedback session is not found\"));\n+        }\n+\n+        InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+        gateKeeper.verifyAccessible(instructor, fs);\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n+        String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n+        SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n+        if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n+            if (SectionDetail.containsSectionDetail(sectionDetailValue) == null) {\n+                throw new InvalidHttpParameterException(\"Section detail is invalid.\");\n+            }\n+            sectionDetail = SectionDetail.valueOf(sectionDetailValue);\n+        }\n+\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+        String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+        boolean isMissingResponsesShown = getBooleanRequestParamValue(\n+                Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n+        boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n+        String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");\n+\n+        String fileContent = \"\";\n+\n+        InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+\n+        try {\n+            if (\"true\".equals(simulateExcessDataForTesting)) {\n+                throw new ExceedingRangeException(\"This session has more responses than that can be downloaded at one go.\");\n+            }\n+\n+            if (section == null || \"All\".equals(section)) {", "originalCommit": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczNTExNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390735115", "bodyText": "This is ported from the InstructorFeedbackResultsDownloadAction class. I agree that this is a hardcoded value. Maybe we can remove it since section == null already implies all sections will be downloaded.", "author": "niqiukun", "createdAt": "2020-03-11T04:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNTYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "bee5d0c077488b3e3afba190ff0a48d1d385c8fe", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\nindex 43b673866d..ae91341b23 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n\n@@ -37,22 +37,28 @@ public class GetSessionResultsAsCsvAction extends Action {\n \n     @Override\n     public ActionResult execute() {\n+        // read in session details\n         String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n         String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n         SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n         if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n-            if (SectionDetail.containsSectionDetail(sectionDetailValue) == null) {\n+            if (!SectionDetail.containsSectionDetail(sectionDetailValue)) {\n                 throw new InvalidHttpParameterException(\"Section detail is invalid.\");\n             }\n             sectionDetail = SectionDetail.valueOf(sectionDetailValue);\n         }\n \n+        // read in other session-related info\n         String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n         String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n         String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+\n+        // read in optional params for csv generation\n         boolean isMissingResponsesShown = getBooleanRequestParamValue(\n                 Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n         boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n+\n+        // read in params for testing\n         String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");\n \n         String fileContent = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNTk2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390725962", "bodyText": "function is a little messy - any way you can group your params that you read in from the API?\ne.g. something like\n//read in section details\n-- all section related fields --\n\n//read in course metadata\n\n//read in options for csv", "author": "rrtheonlyone", "createdAt": "2020-03-11T03:20:19Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.SectionDetail;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.ExceedingRangeException;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.RequestExceedingRangeException;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Gets feedback session results in csv.\n+ */\n+public class GetSessionResultsAsCsvAction extends Action {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+\n+        FeedbackSessionAttributes fs = logic.getFeedbackSession(feedbackSessionName, courseId);\n+\n+        if (fs == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"Feedback session is not found\"));\n+        }\n+\n+        InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+        gateKeeper.verifyAccessible(instructor, fs);\n+    }\n+\n+    @Override\n+    public ActionResult execute() {", "originalCommit": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0MDc1Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390740752", "bodyText": "Ok I have added the grouping for the params.", "author": "niqiukun", "createdAt": "2020-03-11T04:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNTk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bee5d0c077488b3e3afba190ff0a48d1d385c8fe", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\nindex 43b673866d..ae91341b23 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n\n@@ -37,22 +37,28 @@ public class GetSessionResultsAsCsvAction extends Action {\n \n     @Override\n     public ActionResult execute() {\n+        // read in session details\n         String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n         String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n         SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n         if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n-            if (SectionDetail.containsSectionDetail(sectionDetailValue) == null) {\n+            if (!SectionDetail.containsSectionDetail(sectionDetailValue)) {\n                 throw new InvalidHttpParameterException(\"Section detail is invalid.\");\n             }\n             sectionDetail = SectionDetail.valueOf(sectionDetailValue);\n         }\n \n+        // read in other session-related info\n         String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n         String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n         String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+\n+        // read in optional params for csv generation\n         boolean isMissingResponsesShown = getBooleanRequestParamValue(\n                 Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n         boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n+\n+        // read in params for testing\n         String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");\n \n         String fileContent = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjA4Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390726087", "bodyText": "is this a related change?", "author": "rrtheonlyone", "createdAt": "2020-03-11T03:20:52Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java", "diffHunk": "@@ -25,6 +25,10 @@ protected AuthType getMinAuthLevel() {\n \n     @Override\n     public void checkSpecificAccessControl() {\n+        if (userInfo.isAdmin) {", "originalCommit": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczNzUwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390737507", "bodyText": "This is because I was writing code GetSessionResultsActionTest which is currently missing. Although I agree that this is not exactly related to CSV downloads, but still I think the test is nevertheless necessary. And since I'm writing GetSessionResultsAsCsvActionTest, I thought it would be ok just to add GetSessionResultsActionTest at the same time.", "author": "niqiukun", "createdAt": "2020-03-11T04:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjA4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE2Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390729163", "bodyText": "For this, what about a test for:\n\ntypical case with section name \"All\"? (the if case above)\ntypical case with stats shown?", "author": "rrtheonlyone", "createdAt": "2020-03-11T03:35:38Z", "path": "src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package teammates.test.cases.webapi;\n+\n+import org.apache.http.HttpStatus;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.NullHttpParameterException;\n+import teammates.common.exception.RequestExceedingRangeException;\n+import teammates.common.util.Const;\n+import teammates.test.driver.CsvChecker;\n+import teammates.ui.webapi.action.CsvResult;\n+import teammates.ui.webapi.action.GetSessionResultsAsCsvAction;\n+\n+/**\n+ * SUT: {@link GetSessionResultsAsCsvAction}.\n+ */\n+public class GetSessionResultsAsCsvActionTest extends BaseActionTest<GetSessionResultsAsCsvAction> {", "originalCommit": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MjI5OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390752298", "bodyText": "I have added the test cases for stats hidden and shown. Thanks for spotting that! Regarding the section name \"All\" I think it would better to remove the hardcoded value.", "author": "niqiukun", "createdAt": "2020-03-11T05:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3ODcwMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390778701", "bodyText": "I discovered a problem when I tried to add test for case with stats shown. I notice that all questions in the typical data bundle are text-based questions which have no statistics to show. I am considering adding a new session to the typical data bundle, but that will break other tests that also rely on the typical data bundle. May I have some suggestions on how to resolve this issue? @rrtheonlyone", "author": "niqiukun", "createdAt": "2020-03-11T07:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MTcxNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390791714", "bodyText": "@xpdavid is there any way to update the typical bundle? Or is it better to just create something just for this test here?", "author": "rrtheonlyone", "createdAt": "2020-03-11T07:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MjcwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390792707", "bodyText": "If you don't want to create a separate json file (which in most of case is not necessary), you can manipulate/add/delete the database in @BeforeMethod", "author": "xpdavid", "createdAt": "2020-03-11T07:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgyNzQ5Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390827497", "bodyText": "I tried to replace the typicalDataBundle with a custom json file by doing the following:\n@BeforeMethod\npublic void setup() {\n    dataBundle = loadDataBundle(\"/FeedbackSessionResultsCsvActionTest.json\");\n    removeAndRestoreDataBundle(dataBundle);\n}\nThe json file has a newly added session named Session with MCQ and id sessionWithMcq. The session's attributes can be accessed by dataBundle.feedbackSessions.get(\"sessionWithMcq\"). Yet, the following exception was still thrown during the test:\nTrying to view a non-existent feedback session: idOfTypicalCourse1/Session with MCQ\n\nDid I miss anything?\nUpdate: For some reason it does not work when test cases are grouped within testExecute() instead of being separate functions. Maybe earlier test cases can affect later ones in some way.", "author": "niqiukun", "createdAt": "2020-03-11T09:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNDI2MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r395504261", "bodyText": "Interesting...", "author": "rrtheonlyone", "createdAt": "2020-03-20T08:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3d56ebcaf14953f9d7ae170d90366dd967600f1d", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java b/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java\nindex b9a1ad3ee8..cdbc920c2f 100644\n--- a/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java\n\n@@ -35,6 +35,7 @@ public class GetSessionResultsAsCsvActionTest extends BaseActionTest<GetSessionR\n         InstructorAttributes instructorAttributes = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n         loginAsInstructor(instructorAttributes.getGoogleId());\n         FeedbackSessionAttributes accessibleFeedbackSession = typicalBundle.feedbackSessions.get(\"session1InCourse1\");\n+        FeedbackSessionAttributes sessionWithStatistics = typicalBundle.feedbackSessions.get(\"sessionWithStatistics\");\n         String[] paramsNormal = {\n                 Const.ParamsNames.COURSE_ID, accessibleFeedbackSession.getCourseId(),\n                 Const.ParamsNames.FEEDBACK_SESSION_NAME, accessibleFeedbackSession.getFeedbackSessionName(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDQ3Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390730476", "bodyText": "Is this test related to your PR?", "author": "rrtheonlyone", "createdAt": "2020-03-11T03:41:39Z", "path": "src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package teammates.test.cases.webapi;", "originalCommit": "daeb3878b89fc879e37dd9d711d9405fc88d1050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczNzA2Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r390737066", "bodyText": "Not exactly. But since I'm writing GetSessionResultsAsCsvActionTest, I thought it would be ok just to add GetSessionResultsActionTest at the same time because the test for GetSessionResultsAction is currently missing. There shouldn't be any breaking changes to existing code.", "author": "niqiukun", "createdAt": "2020-03-11T04:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b90f83eb673f1c384a110094267f97c720c618d2", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java b/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java\nindex 61cceb29c7..12c4c3424a 100644\n--- a/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java\n\n@@ -5,6 +5,7 @@ import org.testng.annotations.Test;\n \n import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n import teammates.common.exception.EntityNotFoundException;\n import teammates.common.exception.UnauthorizedAccessException;\n import teammates.common.util.Const;\n"}}, {"oid": "bee5d0c077488b3e3afba190ff0a48d1d385c8fe", "url": "https://github.com/TEAMMATES/teammates/commit/bee5d0c077488b3e3afba190ff0a48d1d385c8fe", "message": "Change return type of containsSectionDetail and group params", "committedDate": "2020-03-11T04:27:24Z", "type": "commit"}, {"oid": "60e26129ebc2d2e872fb298f83b742282995b332", "url": "https://github.com/TEAMMATES/teammates/commit/60e26129ebc2d2e872fb298f83b742282995b332", "message": "Remove hardcoded value of `section == \"All\"`", "committedDate": "2020-03-11T04:28:28Z", "type": "commit"}, {"oid": "3d56ebcaf14953f9d7ae170d90366dd967600f1d", "url": "https://github.com/TEAMMATES/teammates/commit/3d56ebcaf14953f9d7ae170d90366dd967600f1d", "message": "Add test cases for statistics hidden and shown", "committedDate": "2020-03-11T05:20:46Z", "type": "commit"}, {"oid": "f58afc10db919ec3ce296add62a9db703a693dc2", "url": "https://github.com/TEAMMATES/teammates/commit/f58afc10db919ec3ce296add62a9db703a693dc2", "message": "Merge branch 'master' into download-session-result", "committedDate": "2020-03-11T05:29:38Z", "type": "commit"}, {"oid": "058520a829bb3296e2652353f2b081b0999361e0", "url": "https://github.com/TEAMMATES/teammates/commit/058520a829bb3296e2652353f2b081b0999361e0", "message": "Move http request to feedback sessions service", "committedDate": "2020-03-11T05:47:11Z", "type": "commit"}, {"oid": "8767316a72304976799c93953c306010741e7df1", "url": "https://github.com/TEAMMATES/teammates/commit/8767316a72304976799c93953c306010741e7df1", "message": "Use custom data bundle for GetSessionResultsAsCsvActionTest", "committedDate": "2020-03-11T10:01:12Z", "type": "commit"}, {"oid": "8767316a72304976799c93953c306010741e7df1", "url": "https://github.com/TEAMMATES/teammates/commit/8767316a72304976799c93953c306010741e7df1", "message": "Use custom data bundle for GetSessionResultsAsCsvActionTest", "committedDate": "2020-03-11T10:01:12Z", "type": "forcePushed"}, {"oid": "ad69b46e6db731757547488aef53234346161255", "url": "https://github.com/TEAMMATES/teammates/commit/ad69b46e6db731757547488aef53234346161255", "message": "Remove unnecessary data from custom data bundle", "committedDate": "2020-03-13T02:41:26Z", "type": "commit"}, {"oid": "7fa2bc690a4d894c8418bb79166eb16bfa56d3ea", "url": "https://github.com/TEAMMATES/teammates/commit/7fa2bc690a4d894c8418bb79166eb16bfa56d3ea", "message": "Further reduce custom bundle size by using typical bundle for other tests", "committedDate": "2020-03-13T03:03:21Z", "type": "commit"}, {"oid": "fd2d41c45c0ac79a77219ad4972d846ea26094c2", "url": "https://github.com/TEAMMATES/teammates/commit/fd2d41c45c0ac79a77219ad4972d846ea26094c2", "message": "Merge branch 'master' into download-session-result", "committedDate": "2020-03-16T04:34:16Z", "type": "commit"}, {"oid": "e596403cfec91c650f9e00bacb7255549b5602c0", "url": "https://github.com/TEAMMATES/teammates/commit/e596403cfec91c650f9e00bacb7255549b5602c0", "message": "Add missing type param for csv download", "committedDate": "2020-03-16T05:03:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r395507110", "bodyText": "I am still not entirely convinced by this. I feel that the excess data error should come from the logic layer (and not passed in from the client).\nWhy is it part of our API params?", "author": "rrtheonlyone", "createdAt": "2020-03-20T09:02:12Z", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.SectionDetail;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.ExceedingRangeException;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.RequestExceedingRangeException;\n+import teammates.common.util.Const;\n+\n+/**\n+ * Gets feedback session results in csv.\n+ */\n+public class GetSessionResultsAsCsvAction extends Action {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+\n+        FeedbackSessionAttributes fs = logic.getFeedbackSession(feedbackSessionName, courseId);\n+\n+        if (fs == null) {\n+            throw new EntityNotFoundException(new EntityDoesNotExistException(\"Feedback session is not found\"));\n+        }\n+\n+        InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n+        gateKeeper.verifyAccessible(instructor, fs);\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        // read in session details\n+        String section = getRequestParamValue(Const.ParamsNames.SECTION_NAME);\n+        String sectionDetailValue = getRequestParamValue(Const.ParamsNames.SECTION_NAME_DETAIL);\n+        SectionDetail sectionDetail = SectionDetail.NOT_APPLICABLE;\n+        if (section != null && sectionDetailValue != null && !sectionDetailValue.isEmpty()) {\n+            if (!SectionDetail.containsSectionDetail(sectionDetailValue)) {\n+                throw new InvalidHttpParameterException(\"Section detail is invalid.\");\n+            }\n+            sectionDetail = SectionDetail.valueOf(sectionDetailValue);\n+        }\n+\n+        // read in other session-related info\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String feedbackSessionName = getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+        String questionId = getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);\n+\n+        // read in optional params for csv generation\n+        boolean isMissingResponsesShown = getBooleanRequestParamValue(\n+                Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n+        boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n+\n+        // read in params for testing\n+        String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");", "originalCommit": "e596403cfec91c650f9e00bacb7255549b5602c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5MjQzMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r395592430", "bodyText": "The excess data error indeed comes from the logic layer in practice. However for testing it is not practical to generate large amount of data just to trigger the error. Hence, this param is kept there so that the error is triggered manually and exception handling can be tested. But you are right in the way that it does not actually test whether the exception will be thrown at the right time, so it is only tested partially. I'm not really sure if there are better ways to do this.", "author": "niqiukun", "createdAt": "2020-03-20T12:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxNDMxMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r395614310", "bodyText": "For just testing this on the API layer, you can mock the logic layer call to throw the relevant exception. For E2E testing, we probably HAVE to generate big data! At least that's what I think :)\nIt seems a little odd that we are adding a functionality just for our own internal testing. However, we def have to discuss on this with the rest and see.", "author": "rrtheonlyone", "createdAt": "2020-03-20T12:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4ODk4MA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r396088980", "bodyText": "For just testing this on the API layer, you can mock the logic layer call to throw the relevant exception.\n\nSorry but I don't quite get this part. Could you explain a bit more? Thanks :)", "author": "niqiukun", "createdAt": "2020-03-22T12:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg4NTA4Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r399885082", "bodyText": "Adding this line in production code just for testing?", "author": "xpdavid", "createdAt": "2020-03-30T01:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg4NTIwNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r399885205", "bodyText": "Who will throw ExceedingRangeException?", "author": "xpdavid", "createdAt": "2020-03-30T01:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MTA0MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r399891041", "bodyText": "Adding this line in production code just for testing?\n\nThis is carried forward from #8882. This is how the previous developer describes its use:\nIn the `InstructorFeedbackResultsDownloadActionTest` we add a test\nwhere we put in an extra parameter `largeData=true` and then in the Action class\nwe put an if condition to see if this parameter is not null and true and if it is then we\nthrow the required exception for the `code` of exception part to be called and assert\nin the test if thats what we expect to happen\n\nI would like to have some suggestions on improving this if this is not a good programming practice.\n\nWho will throw ExceedingRangeException?\n\nlogic.getFeedbackSessionResultSummaryAsCsv(...) and logic.getFeedbackSessionResultSummaryInSectionAsCsv(...) throw this exception.", "author": "niqiukun", "createdAt": "2020-03-30T01:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MTQ0NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r399891444", "bodyText": "Then we should meet the condition to let getFeedbackSessionResultSummaryAsCsv or getFeedbackSessionResultSummaryInSectionAsCsv throw the exception? Or even remove the test because it actually test nothing.", "author": "xpdavid", "createdAt": "2020-03-30T01:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NDE3Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r399894177", "bodyText": "Then we should meet the condition to let getFeedbackSessionResultSummaryAsCsv or getFeedbackSessionResultSummaryInSectionAsCsv throw the exception? Or even remove the test because it actually test nothing.\n\nThe test file is not large enough to trigger the condition that throws this exception. I think it may be better to remove this test then.", "author": "niqiukun", "createdAt": "2020-03-30T02:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MjcxMw==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r399982713", "bodyText": "Hi @niqiukun , sorry missed your earlier question, I was thinking more of something like this: https://se-education.org/se-book/testing/#stubs\nI was wondering if you can just mock the logic layer to throw the relevant exception for testing the API layer. For E2E testing, we can just generate a large csv into the database.", "author": "rrtheonlyone", "createdAt": "2020-03-30T07:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4NTU2OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r399985568", "bodyText": "Introducing mock for logic layer requires a huge effort without help from mocking framework. We might want to do it separately.  I think we can just remove the test till now.", "author": "xpdavid", "createdAt": "2020-03-30T07:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzExMA=="}], "type": "inlineReview", "revised_code": {"commit": "040b2758855f1f1e730a223f920ec2751ba234b4", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\nindex 18413b5dd7..d809cd74be 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetSessionResultsAsCsvAction.java\n\n@@ -58,18 +58,11 @@ public class GetSessionResultsAsCsvAction extends Action {\n                 Const.ParamsNames.FEEDBACK_RESULTS_INDICATE_MISSING_RESPONSES);\n         boolean isStatsShown = getBooleanRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);\n \n-        // read in params for testing\n-        String simulateExcessDataForTesting = getRequestParamValue(\"simulateExcessDataForTesting\");\n-\n         String fileContent = \"\";\n \n         InstructorAttributes instructor = logic.getInstructorForGoogleId(courseId, userInfo.id);\n \n         try {\n-            if (\"true\".equals(simulateExcessDataForTesting)) {\n-                throw new ExceedingRangeException(\"This session has more responses than that can be downloaded at one go.\");\n-            }\n-\n             if (section == null) {\n                 fileContent = logic.getFeedbackSessionResultSummaryAsCsv(\n                         courseId, feedbackSessionName, instructor.email,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzc0Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r395507742", "bodyText": "Where are the tests for student's accessing their results?", "author": "rrtheonlyone", "createdAt": "2020-03-20T09:03:33Z", "path": "src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package teammates.test.cases.webapi;\n+\n+import org.apache.http.HttpStatus;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.action.GetSessionResultsAction;\n+import teammates.ui.webapi.action.JsonResult;\n+import teammates.ui.webapi.output.SessionResultsData;\n+import teammates.ui.webapi.request.Intent;\n+\n+/**\n+ * SUT: {@link GetSessionResultsAction}.\n+ */\n+public class GetSessionResultsActionTest extends BaseActionTest<GetSessionResultsAction> {\n+\n+    @Override\n+    protected String getActionUri() {\n+        return Const.ResourceURIs.RESULT;\n+    }\n+\n+    @Override\n+    protected String getRequestMethod() {\n+        return GET;\n+    }\n+\n+    @Override\n+    @Test\n+    protected void testExecute() throws Exception {", "originalCommit": "e596403cfec91c650f9e00bacb7255549b5602c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4OTAzOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r396089039", "bodyText": "I have added them in the latest commit. Thanks for spotting that!", "author": "niqiukun", "createdAt": "2020-03-22T12:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b90f83eb673f1c384a110094267f97c720c618d2", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java b/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java\nindex 61cceb29c7..12c4c3424a 100644\n--- a/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/GetSessionResultsActionTest.java\n\n@@ -5,6 +5,7 @@ import org.testng.annotations.Test;\n \n import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n import teammates.common.exception.EntityNotFoundException;\n import teammates.common.exception.UnauthorizedAccessException;\n import teammates.common.util.Const;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwODE4NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r395508185", "bodyText": "I see what you are doing here and it works! Although its a little different from how our other tests work.. maybe @xpdavid can help improve this.", "author": "rrtheonlyone", "createdAt": "2020-03-20T09:04:31Z", "path": "src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package teammates.test.cases.webapi;\n+\n+import org.apache.http.HttpStatus;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.exception.NullHttpParameterException;\n+import teammates.common.exception.RequestExceedingRangeException;\n+import teammates.common.util.Const;\n+import teammates.test.driver.CsvChecker;\n+import teammates.ui.webapi.action.CsvResult;\n+import teammates.ui.webapi.action.GetSessionResultsAsCsvAction;\n+\n+/**\n+ * SUT: {@link GetSessionResultsAsCsvAction}.\n+ */\n+public class GetSessionResultsAsCsvActionTest extends BaseActionTest<GetSessionResultsAsCsvAction> {\n+\n+    private DataBundle dataBundle;\n+\n+    @Override\n+    protected String getActionUri() {\n+        return Const.ResourceURIs.RESULT_CSV;\n+    }\n+\n+    @Override\n+    protected String getRequestMethod() {\n+        return GET;\n+    }\n+\n+    private void loadCustomBundle() {", "originalCommit": "e596403cfec91c650f9e00bacb7255549b5602c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMDAyMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r401410020", "bodyText": "I think it is OK to create a new data file for this test case as downloading as CSV is a big feature. One thing to note here is that please override the corresponding method to avoid typicalDataBundle from loading.", "author": "xpdavid", "createdAt": "2020-04-01T07:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwODE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMTgyMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r401411821", "bodyText": "The way I did this was only using the custom data bundle for session with statistics. By doing that I don't have to duplicate the typical data bundle for those test cases that do not require the custom data bundle. And that's why typicalDataBundle is still being loaded here.", "author": "niqiukun", "createdAt": "2020-04-01T07:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwODE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMzM3MA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r401413370", "bodyText": "So your json file is incremental based on typicalDataBundle?", "author": "xpdavid", "createdAt": "2020-04-01T07:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwODE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNTg3MA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r401415870", "bodyText": "It only contains one session but with a MCQ question instead of a text question, so that there will be statistics that can be downloaded. I did not include those sessions that were originally in the typicalDataBundle. But this json file is only used for two test cases: Typical case: results with statistics hidden and Typical case: results with statistics shown. All other test cases use typicalDataBundle instead.", "author": "niqiukun", "createdAt": "2020-04-01T07:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwODE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "040b2758855f1f1e730a223f920ec2751ba234b4", "chunk": "diff --git a/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java b/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java\nindex dd9fa467d4..7c235690b9 100644\n--- a/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java\n+++ b/src/test/java/teammates/test/cases/webapi/GetSessionResultsAsCsvActionTest.java\n\n@@ -9,7 +9,6 @@ import teammates.common.datatransfer.attributes.InstructorAttributes;\n import teammates.common.datatransfer.attributes.StudentAttributes;\n import teammates.common.exception.EntityNotFoundException;\n import teammates.common.exception.NullHttpParameterException;\n-import teammates.common.exception.RequestExceedingRangeException;\n import teammates.common.util.Const;\n import teammates.test.driver.CsvChecker;\n import teammates.ui.webapi.action.CsvResult;\n"}}, {"oid": "b90f83eb673f1c384a110094267f97c720c618d2", "url": "https://github.com/TEAMMATES/teammates/commit/b90f83eb673f1c384a110094267f97c720c618d2", "message": "Add student test cases for GetSessionResultsActionTest", "committedDate": "2020-03-22T08:08:36Z", "type": "commit"}, {"oid": "07775c59bcf887d649bac5b13e9ca5d56aba8c4a", "url": "https://github.com/TEAMMATES/teammates/commit/07775c59bcf887d649bac5b13e9ca5d56aba8c4a", "message": "Merge branch 'master' into download-session-result", "committedDate": "2020-03-23T04:45:46Z", "type": "commit"}, {"oid": "144866190df0686070e80d5d5cf341c64c180d4f", "url": "https://github.com/TEAMMATES/teammates/commit/144866190df0686070e80d5d5cf341c64c180d4f", "message": "Merge branch 'master' into download-session-result", "committedDate": "2020-03-29T10:23:32Z", "type": "commit"}, {"oid": "040b2758855f1f1e730a223f920ec2751ba234b4", "url": "https://github.com/TEAMMATES/teammates/commit/040b2758855f1f1e730a223f920ec2751ba234b4", "message": "Remove param for `ExceedingRangeException` testing", "committedDate": "2020-03-30T02:38:17Z", "type": "commit"}, {"oid": "040b2758855f1f1e730a223f920ec2751ba234b4", "url": "https://github.com/TEAMMATES/teammates/commit/040b2758855f1f1e730a223f920ec2751ba234b4", "message": "Remove param for `ExceedingRangeException` testing", "committedDate": "2020-03-30T02:38:17Z", "type": "forcePushed"}, {"oid": "9e74274580577afc8abe6472ac78281fa66bdb45", "url": "https://github.com/TEAMMATES/teammates/commit/9e74274580577afc8abe6472ac78281fa66bdb45", "message": "Merge branch 'master' into download-session-result", "committedDate": "2020-03-30T09:02:28Z", "type": "commit"}, {"oid": "e7e14fd7d6acaba00d0ee6ab492a4ca55246bc2a", "url": "https://github.com/TEAMMATES/teammates/commit/e7e14fd7d6acaba00d0ee6ab492a4ca55246bc2a", "message": "Merge branch 'master' into download-session-result", "committedDate": "2020-03-30T11:02:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxOTMxOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r401419319", "bodyText": "Is this method added just for the sake of testing?\nIf yes, please convert it to helper method in the test file or you are responsible to write a comprehensive test for it (which I think it is not necessary).", "author": "xpdavid", "createdAt": "2020-04-01T07:49:24Z", "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -77,6 +78,30 @@ public SessionResultsData(FeedbackSessionResultsBundle bundle, StudentAttributes\n         return questions;\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {", "originalCommit": "e7e14fd7d6acaba00d0ee6ab492a4ca55246bc2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNjg4MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r401426881", "bodyText": "I see your point. I would like to convert it to a helper method, but here QuestionOutput is an inner class that has private access. Should I change the accessibility of the class or is there any workaround?", "author": "niqiukun", "createdAt": "2020-04-01T08:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxOTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNzY1NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9961#discussion_r401427654", "bodyText": "You can make the change.", "author": "xpdavid", "createdAt": "2020-04-01T08:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxOTMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e1b4f31b3eeaa7e6d88d3b8ddedb6631fdf42b1", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/SessionResultsData.java b/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\nindex af1ec4da62..064abd0559 100644\n--- a/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\n+++ b/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\n\n@@ -78,30 +77,6 @@ public class SessionResultsData extends ApiOutput {\n         return questions;\n     }\n \n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n-        if (obj == null || obj.getClass() != this.getClass()) {\n-            return false;\n-        }\n-        SessionResultsData other = (SessionResultsData) obj;\n-        List<QuestionOutput> thisQuestions = this.getQuestions();\n-        List<QuestionOutput> otherQuestions = other.getQuestions();\n-        if (thisQuestions.size() != otherQuestions.size()) {\n-            return false;\n-        }\n-        for (int i = 0; i < thisQuestions.size(); i++) {\n-            QuestionOutput thisQuestion = thisQuestions.get(i);\n-            QuestionOutput otherQuestion = otherQuestions.get(i);\n-            if (!thisQuestion.equals(otherQuestion)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n     private static String removeAnonymousHash(String identifier) {\n         return identifier.replaceAll(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT + \" (student|instructor|team) \"\n                 + REGEX_ANONYMOUS_PARTICIPANT_HASH, Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT + \" $1\");\n"}}, {"oid": "6e1b4f31b3eeaa7e6d88d3b8ddedb6631fdf42b1", "url": "https://github.com/TEAMMATES/teammates/commit/6e1b4f31b3eeaa7e6d88d3b8ddedb6631fdf42b1", "message": "Move helper methods to test and change accessibility of inner classes", "committedDate": "2020-04-01T08:42:48Z", "type": "commit"}, {"oid": "6e1b4f31b3eeaa7e6d88d3b8ddedb6631fdf42b1", "url": "https://github.com/TEAMMATES/teammates/commit/6e1b4f31b3eeaa7e6d88d3b8ddedb6631fdf42b1", "message": "Move helper methods to test and change accessibility of inner classes", "committedDate": "2020-04-01T08:42:48Z", "type": "forcePushed"}]}