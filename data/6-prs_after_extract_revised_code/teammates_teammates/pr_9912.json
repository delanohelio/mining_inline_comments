{"pr_number": 9912, "pr_title": "[#4854] Add Instructor Institution Validation", "pr_createdAt": "2020-01-14T04:33:14Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/9912", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366152815", "bodyText": "There are two problems here:\n\ngetAccount accepts googleId rather than email\nIf instructor does not have account stored in the database (e.g. it is the first time he/she use TEAMMATES), account will be null. In this case, they can still modify the institute name and bypass the check.", "author": "xpdavid", "createdAt": "2020-01-14T04:57:25Z", "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -162,6 +164,16 @@ public InstructorAttributes joinCourseForInstructor(String encryptedKey, String\n         return instructor;\n     }\n \n+    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n+            throws InvalidParametersException {\n+        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n+        AccountAttributes account = getAccount(instructor.email);", "originalCommit": "d4eda6d4aa23c5d85080308036f654403a212fab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1OTI3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366159279", "bodyText": "Apologies for the mistake relating to the parameter for getAccount.\nIf accounts are identified by their googleId, how does the CreateAccountAction create an account (given that no google id is provided)?\nIf that class doesn't actually create an account, then how are instructors loaded in the admin home page (for admins to add instructors/generate the join link)? Unless that data is never stored and merely persisted in the live server?\nAppreciate any insight you can provide, thank you for your time!", "author": "madanalogy", "createdAt": "2020-01-14T05:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2MTgyMg==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366161822", "bodyText": "If accounts are identified by their googleId, how does the CreateAccountAction create an account (given that no google id is provided)?\n\n:p apologies for the naming, it actually does not create an account.\n\nThe action will create everything except for Account and StudentProfile.\n\nIf that class doesn't actually create an account, then how are instructors loaded in the admin home page\n\nWhen Instructor joins course, we store its googleId in the Instructor entity (the instructor is get by the encrytedKey).", "author": "xpdavid", "createdAt": "2020-01-14T05:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2MzM0OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366163349", "bodyText": "I see, thank you so much for the information!\nI will think on this problem for a little longer. Should I close this PR and open a new one when I have a solution or just push updates to this PR?", "author": "madanalogy", "createdAt": "2020-01-14T05:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2NDQ4Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366164487", "bodyText": "Let's close it right now :)\nI think approaching the problem without changing the data schema is a bit difficult. I suggest you switch to/ or you can find your own issue to work on.", "author": "xpdavid", "createdAt": "2020-01-14T06:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2NDc4OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366164788", "bodyText": "Understood, thanks again for the help :)", "author": "madanalogy", "createdAt": "2020-01-14T06:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b68b46b84dfe455c087c995d2415d60083174006", "chunk": "diff --git a/src/main/java/teammates/logic/core/AccountsLogic.java b/src/main/java/teammates/logic/core/AccountsLogic.java\nindex 0a79665562..4909774ab1 100644\n--- a/src/main/java/teammates/logic/core/AccountsLogic.java\n+++ b/src/main/java/teammates/logic/core/AccountsLogic.java\n\n@@ -164,16 +162,6 @@ public final class AccountsLogic {\n         return instructor;\n     }\n \n-    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n-            throws InvalidParametersException {\n-        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n-        AccountAttributes account = getAccount(instructor.email);\n-\n-        if (account != null && !account.institute.equals(institute)) {\n-            throw new InvalidParametersException(\"Instructor institute manually modified.\");\n-        }\n-    }\n-\n     private InstructorAttributes validateInstructorJoinRequest(String encryptedKey, String googleId)\n             throws EntityDoesNotExistException, EntityAlreadyExistsException {\n \n"}}, {"oid": "b68b46b84dfe455c087c995d2415d60083174006", "url": "https://github.com/TEAMMATES/teammates/commit/b68b46b84dfe455c087c995d2415d60083174006", "message": "[#9646] Add lnp test for instructor session result page (#9973)\n\n* Add JMeter utility elements for instructor session result lnp test\r\n\r\n* Add instructor session result lnp test\r\n\r\nCo-authored-by: Xiao Pu <xp.xiaopu@gmail.com>", "committedDate": "2020-03-08T06:43:28Z", "type": "forcePushed"}, {"oid": "e915de648747c96831029c287a98cdb80a4d0129", "url": "https://github.com/TEAMMATES/teammates/commit/e915de648747c96831029c287a98cdb80a4d0129", "message": "Initial Implementation", "committedDate": "2020-03-15T09:46:11Z", "type": "commit"}, {"oid": "f22f6fa5166e03c4c3d7af443ee5259891bdd9a3", "url": "https://github.com/TEAMMATES/teammates/commit/f22f6fa5166e03c4c3d7af443ee5259891bdd9a3", "message": "Move implementation to logic", "committedDate": "2020-03-15T17:50:39Z", "type": "commit"}, {"oid": "f0cabd52315bdfdc020516d30622d5af91f6541f", "url": "https://github.com/TEAMMATES/teammates/commit/f0cabd52315bdfdc020516d30622d5af91f6541f", "message": "Add signature tests", "committedDate": "2020-03-16T05:06:22Z", "type": "commit"}, {"oid": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf", "url": "https://github.com/TEAMMATES/teammates/commit/decb2e0a0e7489a0d49a80cecbbe017025b79dbf", "message": "Merge branch 'master' into 4854-validate-instructor-institution", "committedDate": "2020-03-16T05:08:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDU1Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393624557", "bodyText": "Assumption.assertNotNull(mac)?\nWhile we're at it, let's add the missing one for institute too.", "author": "ChooJeremy", "createdAt": "2020-03-17T11:54:19Z", "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -361,13 +361,13 @@ public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsW\n      * Preconditions: <br>\n      * * All parameters are non-null.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n \n         Assumption.assertNotNull(googleId);\n         Assumption.assertNotNull(encryptedKey);\n ", "originalCommit": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MTIzMw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393661233", "bodyText": "The problem is that the institute can be null? From what I gather reading the method. If the institute is null, an institute gets assigned from the course the instructor is joining. It's weird but it's what's already there :\")", "author": "madanalogy", "createdAt": "2020-03-17T13:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NjkyNg==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393666926", "bodyText": "Ahh, ok. Let's update the docs then, since it currently says \"All parameters are non-null.\"", "author": "ChooJeremy", "createdAt": "2020-03-17T13:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3c73e39174e4c359227dc61f0afdf543da370fc6", "chunk": "diff --git a/src/main/java/teammates/logic/api/Logic.java b/src/main/java/teammates/logic/api/Logic.java\nindex 046344fd41..d36b6d78a5 100644\n--- a/src/main/java/teammates/logic/api/Logic.java\n+++ b/src/main/java/teammates/logic/api/Logic.java\n\n@@ -357,9 +357,7 @@ public class Logic {\n \n     /**\n      * Make the instructor join the course, i.e. associate the Google ID to the instructor.<br>\n-     * Create an account for the instructor if there is no account exist for him.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n+     * Creates an account for the instructor if there is no existing account for him.\n      */\n     public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNzQ3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393637479", "bodyText": "I'm not sure such a variable belongs in StringHelper. Since it's only used twice, let's follow the encrypt and decrypt methods and just use \"HmacSHA1\" instead.", "author": "ChooJeremy", "createdAt": "2020-03-17T12:19:29Z", "path": "src/main/java/teammates/common/util/StringHelper.java", "diffHunk": "@@ -26,6 +28,7 @@\n \n public final class StringHelper {\n     private static final Logger log = Logger.getLogger();\n+    private static final String HMAC_SHA1_ALGORITHM = \"HmacSHA1\";", "originalCommit": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c73e39174e4c359227dc61f0afdf543da370fc6", "chunk": "diff --git a/src/main/java/teammates/common/util/StringHelper.java b/src/main/java/teammates/common/util/StringHelper.java\nindex ae6dc55b34..1742e4c1a3 100644\n--- a/src/main/java/teammates/common/util/StringHelper.java\n+++ b/src/main/java/teammates/common/util/StringHelper.java\n\n@@ -28,7 +28,6 @@ import teammates.common.exception.TeammatesException;\n \n public final class StringHelper {\n     private static final Logger log = Logger.getLogger();\n-    private static final String HMAC_SHA1_ALGORITHM = \"HmacSHA1\";\n \n     private StringHelper() {\n         // utility class\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzODkyMw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393638923", "bodyText": "Nothing wrong here - you throw an Invalid Parameter Exception when the hash doesn't match.", "author": "ChooJeremy", "createdAt": "2020-03-17T12:22:05Z", "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -115,8 +116,13 @@ public StudentAttributes joinCourseForStudent(String registrationKey, String goo\n      * Joins the user as an instructor and sets the institute if it is not null.\n      * If the given instructor is null, the instructor is given the institute of an existing instructor of the same course.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n+\n+        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n+            throw new InvalidParametersException(\"Institute authentication failed.\");", "originalCommit": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c73e39174e4c359227dc61f0afdf543da370fc6", "chunk": "diff --git a/src/main/java/teammates/logic/core/AccountsLogic.java b/src/main/java/teammates/logic/core/AccountsLogic.java\nindex c5498fe7bd..93949adf5e 100644\n--- a/src/main/java/teammates/logic/core/AccountsLogic.java\n+++ b/src/main/java/teammates/logic/core/AccountsLogic.java\n\n@@ -114,16 +114,11 @@ public final class AccountsLogic {\n \n     /**\n      * Joins the user as an instructor and sets the institute if it is not null.\n-     * If the given instructor is null, the instructor is given the institute of an existing instructor of the same course.\n+     * If the given institute is null, the instructor is given the institute of an existing instructor of the same course.\n      */\n     public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n-\n-        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n-            throw new InvalidParametersException(\"Institute authentication failed.\");\n-        }\n-\n-        InstructorAttributes instructor = validateInstructorJoinRequest(encryptedKey, googleId);\n+        InstructorAttributes instructor = validateInstructorJoinRequest(encryptedKey, googleId, institute, mac);\n \n         // Register the instructor\n         instructor.googleId = googleId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0OTEwNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393649104", "bodyText": "validateInstructorJoinRequest is probably a more appropriate location to do the check.", "author": "ChooJeremy", "createdAt": "2020-03-17T12:40:42Z", "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -115,8 +116,13 @@ public StudentAttributes joinCourseForStudent(String registrationKey, String goo\n      * Joins the user as an instructor and sets the institute if it is not null.\n      * If the given instructor is null, the instructor is given the institute of an existing instructor of the same course.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n+\n+        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n+            throw new InvalidParametersException(\"Institute authentication failed.\");\n+        }\n+\n         InstructorAttributes instructor = validateInstructorJoinRequest(encryptedKey, googleId);", "originalCommit": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c73e39174e4c359227dc61f0afdf543da370fc6", "chunk": "diff --git a/src/main/java/teammates/logic/core/AccountsLogic.java b/src/main/java/teammates/logic/core/AccountsLogic.java\nindex c5498fe7bd..93949adf5e 100644\n--- a/src/main/java/teammates/logic/core/AccountsLogic.java\n+++ b/src/main/java/teammates/logic/core/AccountsLogic.java\n\n@@ -114,16 +114,11 @@ public final class AccountsLogic {\n \n     /**\n      * Joins the user as an instructor and sets the institute if it is not null.\n-     * If the given instructor is null, the instructor is given the institute of an existing instructor of the same course.\n+     * If the given institute is null, the instructor is given the institute of an existing instructor of the same course.\n      */\n     public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n-\n-        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n-            throw new InvalidParametersException(\"Institute authentication failed.\");\n-        }\n-\n-        InstructorAttributes instructor = validateInstructorJoinRequest(encryptedKey, googleId);\n+        InstructorAttributes instructor = validateInstructorJoinRequest(encryptedKey, googleId, institute, mac);\n \n         // Register the instructor\n         instructor.googleId = googleId;\n"}}, {"oid": "3c73e39174e4c359227dc61f0afdf543da370fc6", "url": "https://github.com/TEAMMATES/teammates/commit/3c73e39174e4c359227dc61f0afdf543da370fc6", "message": "Add test cases to AccountsLogicTest", "committedDate": "2020-03-17T14:14:04Z", "type": "commit"}, {"oid": "a1f927137e0dc2c9f581b82e36418edff933354a", "url": "https://github.com/TEAMMATES/teammates/commit/a1f927137e0dc2c9f581b82e36418edff933354a", "message": "Merge branch 'master' into 4854-validate-instructor-institution", "committedDate": "2020-03-17T14:14:28Z", "type": "commit"}, {"oid": "2755839f7615a264e11035e6f485ba0f497e59a1", "url": "https://github.com/TEAMMATES/teammates/commit/2755839f7615a264e11035e6f485ba0f497e59a1", "message": "Fixed typos", "committedDate": "2020-03-17T14:16:53Z", "type": "commit"}, {"oid": "70f0efb2b9b8cd28c03593fb8a5b3b40f5709a68", "url": "https://github.com/TEAMMATES/teammates/commit/70f0efb2b9b8cd28c03593fb8a5b3b40f5709a68", "message": "Add GetCourseJoinStatusAction validation", "committedDate": "2020-03-17T14:31:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwODA0NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394108044", "bodyText": "Have you done manual testing to ensure that this is displayed correctly?", "author": "ChooJeremy", "createdAt": "2020-03-18T05:02:48Z", "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);\n+        String mac = getRequestParamValue(Const.ParamsNames.INSTITUTION_MAC);\n+        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n+            return new JsonResult(\"Error in URL validation. Please re-check the URL.\", HttpStatus.SC_BAD_REQUEST);", "originalCommit": "70f0efb2b9b8cd28c03593fb8a5b3b40f5709a68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExOTkyMw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394119923", "bodyText": "After manual testing, this does not seem to work as intended. Additionally, neither does the institute validation, the authentication fails even with the correct signature in the url params.\nAll back-end checks/tests indicate that it should be working so I believe there might be some disconnect with the front-end. I will investigate this further and update once the implementation works properly.\nUpdate: The front-end does not forward the request as is but instead repackages the params, meaning that the mac gets left out. I will make the necessary changes including the initial front-end validation", "author": "madanalogy", "createdAt": "2020-03-18T05:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwODA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c3208538a5a498327a8f536b0da29d0d41d58150", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java b/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java\nindex 2af53db466..6b5ca94338 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java\n\n@@ -54,7 +54,7 @@ public class GetCourseJoinStatusAction extends Action {\n         String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);\n         String mac = getRequestParamValue(Const.ParamsNames.INSTITUTION_MAC);\n         if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n-            return new JsonResult(\"Error in URL validation. Please re-check the URL.\", HttpStatus.SC_BAD_REQUEST);\n+            return new JsonResult(\"Error in institute validation.\", HttpStatus.SC_UNAUTHORIZED);\n         }\n \n         return getJoinStatusResult(instructor.isRegistered());\n"}}, {"oid": "c3208538a5a498327a8f536b0da29d0d41d58150", "url": "https://github.com/TEAMMATES/teammates/commit/c3208538a5a498327a8f536b0da29d0d41d58150", "message": "Add front-end validation", "committedDate": "2020-03-18T06:41:24Z", "type": "commit"}, {"oid": "f9b35c075f9060594adc71a21c9a7bb276e10811", "url": "https://github.com/TEAMMATES/teammates/commit/f9b35c075f9060594adc71a21c9a7bb276e10811", "message": "Fix lint errors", "committedDate": "2020-03-18T06:55:21Z", "type": "commit"}, {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2", "url": "https://github.com/TEAMMATES/teammates/commit/3de04519202f5186b7f44a0291cfb9cb21e51af2", "message": "Merge branch 'master' into 4854-validate-instructor-institution", "committedDate": "2020-03-18T07:40:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5MDQ3Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394190476", "bodyText": "Why not: encryptedKey and googleId are non-null?", "author": "ChooJeremy", "createdAt": "2020-03-18T08:57:35Z", "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -357,17 +357,15 @@ public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsW\n \n     /**\n      * Make the instructor join the course, i.e. associate the Google ID to the instructor.<br>\n-     * Create an account for the instructor if there is no account exist for him.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.", "originalCommit": "3de04519202f5186b7f44a0291cfb9cb21e51af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a09a3a7f648e30f47d5c7a39746a5cb214df53c9", "chunk": "diff --git a/src/main/java/teammates/logic/api/Logic.java b/src/main/java/teammates/logic/api/Logic.java\nindex d36b6d78a5..4aa54ba6f0 100644\n--- a/src/main/java/teammates/logic/api/Logic.java\n+++ b/src/main/java/teammates/logic/api/Logic.java\n\n@@ -358,6 +358,8 @@ public class Logic {\n     /**\n      * Make the instructor join the course, i.e. associate the Google ID to the instructor.<br>\n      * Creates an account for the instructor if there is no existing account for him.\n+     * Preconditions: <br>\n+     * * Parameters encryptedKey and googleId are non-null.\n      */\n     public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5ODI2NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394198264", "bodyText": "You should verify that the account is indeed not in the database.", "author": "ChooJeremy", "createdAt": "2020-03-18T09:11:30Z", "path": "src/test/java/teammates/test/cases/logic/AccountsLogicTest.java", "diffHunk": "@@ -353,24 +354,81 @@ public void testJoinCourseForInstructor() throws Exception {\n         joinedInstructor = instructorsLogic.getInstructorForEmail(instructor.courseId, nonInstrAccount.email);\n         InstructorAttributes[] finalInstructor = new InstructorAttributes[] { joinedInstructor };\n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: key belongs to a different user\");\n \n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: invalid key\");\n         String invalidKey = StringHelper.encrypt(\"invalidKey\");\n \n         EntityDoesNotExistException ednee = assertThrows(EntityDoesNotExistException.class,\n-                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null, null));\n         assertEquals(\"No instructor with given registration key: \" + invalidKey,\n                 ednee.getMessage());\n     }\n \n+    @Test\n+    public void testJoinCourseForInstructor_validInstitute_shouldPass()\n+            throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"success: instructor with institute joined and new account created\");\n+\n+        accountsLogic.joinCourseForInstructor(encryptedKey[0], loggedInGoogleId,\n+                institute, StringHelper.generateSignature(institute));\n+\n+        InstructorAttributes joinedInstructor =\n+                instructorsLogic.getInstructorForEmail(instructor.courseId, instructor.email);\n+        assertEquals(loggedInGoogleId, joinedInstructor.googleId);\n+\n+        AccountAttributes accountCreated = accountsLogic.getAccount(loggedInGoogleId);\n+        assertNotNull(accountCreated);\n+    }\n+\n+    @Test\n+    public void testJoinCourseForInstructor_invalidInstituteMac_shouldFail() throws EntityDoesNotExistException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"failure: institute signature does not match institute provided\");\n+\n+        InvalidParametersException ipe = assertThrows(InvalidParametersException.class,\n+                () -> accountsLogic.joinCourseForInstructor(\n+                        encryptedKey[0], loggedInGoogleId, institute, StringHelper.generateSignature(\"NUS\")));\n+        assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+    }", "originalCommit": "3de04519202f5186b7f44a0291cfb9cb21e51af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a09a3a7f648e30f47d5c7a39746a5cb214df53c9", "chunk": "diff --git a/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java b/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java\nindex 186df00275..b9764b6d4b 100644\n--- a/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java\n+++ b/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java\n\n@@ -410,6 +410,9 @@ public class AccountsLogicTest extends BaseLogicTest {\n                 () -> accountsLogic.joinCourseForInstructor(\n                         encryptedKey[0], loggedInGoogleId, institute, StringHelper.generateSignature(\"NUS\")));\n         assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+\n+        AccountAttributes accountCreated = accountsLogic.getAccount(loggedInGoogleId);\n+        assertNull(accountCreated);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5ODUwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394198507", "bodyText": "Same here", "author": "ChooJeremy", "createdAt": "2020-03-18T09:11:53Z", "path": "src/test/java/teammates/test/cases/logic/AccountsLogicTest.java", "diffHunk": "@@ -353,24 +354,81 @@ public void testJoinCourseForInstructor() throws Exception {\n         joinedInstructor = instructorsLogic.getInstructorForEmail(instructor.courseId, nonInstrAccount.email);\n         InstructorAttributes[] finalInstructor = new InstructorAttributes[] { joinedInstructor };\n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: key belongs to a different user\");\n \n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: invalid key\");\n         String invalidKey = StringHelper.encrypt(\"invalidKey\");\n \n         EntityDoesNotExistException ednee = assertThrows(EntityDoesNotExistException.class,\n-                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null, null));\n         assertEquals(\"No instructor with given registration key: \" + invalidKey,\n                 ednee.getMessage());\n     }\n \n+    @Test\n+    public void testJoinCourseForInstructor_validInstitute_shouldPass()\n+            throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"success: instructor with institute joined and new account created\");\n+\n+        accountsLogic.joinCourseForInstructor(encryptedKey[0], loggedInGoogleId,\n+                institute, StringHelper.generateSignature(institute));\n+\n+        InstructorAttributes joinedInstructor =\n+                instructorsLogic.getInstructorForEmail(instructor.courseId, instructor.email);\n+        assertEquals(loggedInGoogleId, joinedInstructor.googleId);\n+\n+        AccountAttributes accountCreated = accountsLogic.getAccount(loggedInGoogleId);\n+        assertNotNull(accountCreated);\n+    }\n+\n+    @Test\n+    public void testJoinCourseForInstructor_invalidInstituteMac_shouldFail() throws EntityDoesNotExistException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"failure: institute signature does not match institute provided\");\n+\n+        InvalidParametersException ipe = assertThrows(InvalidParametersException.class,\n+                () -> accountsLogic.joinCourseForInstructor(\n+                        encryptedKey[0], loggedInGoogleId, institute, StringHelper.generateSignature(\"NUS\")));\n+        assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+    }\n+\n+    @Test\n+    public void testJoinCourseForInstructor_missingInstituteMac_shouldFail() throws EntityDoesNotExistException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"failure: institute signature missing\");\n+\n+        InvalidParametersException ipe = assertThrows(InvalidParametersException.class,\n+                () -> accountsLogic.joinCourseForInstructor(\n+                        encryptedKey[0], loggedInGoogleId, institute, null));\n+        assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+    }", "originalCommit": "3de04519202f5186b7f44a0291cfb9cb21e51af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a09a3a7f648e30f47d5c7a39746a5cb214df53c9", "chunk": "diff --git a/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java b/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java\nindex 186df00275..b9764b6d4b 100644\n--- a/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java\n+++ b/src/test/java/teammates/test/cases/logic/AccountsLogicTest.java\n\n@@ -410,6 +410,9 @@ public class AccountsLogicTest extends BaseLogicTest {\n                 () -> accountsLogic.joinCourseForInstructor(\n                         encryptedKey[0], loggedInGoogleId, institute, StringHelper.generateSignature(\"NUS\")));\n         assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+\n+        AccountAttributes accountCreated = accountsLogic.getAccount(loggedInGoogleId);\n+        assertNull(accountCreated);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDUyNg==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394200526", "bodyText": "In addition to verify determinism, we should verify if it is correct. (i.e. the returned value is indeed the expected hash of a certain String. You can take a look at the encrypt test methods.", "author": "ChooJeremy", "createdAt": "2020-03-18T09:15:15Z", "path": "src/test/java/teammates/test/cases/util/StringHelperTest.java", "diffHunk": "@@ -412,4 +412,13 @@ public void testExtractContentFromQuotedString() {\n         assertEquals(StringHelper.extractContentFromQuotedString(null), null);\n         assertEquals(StringHelper.extractContentFromQuotedString(\"\"), \"\");\n     }\n+\n+    @Test\n+    public void testSignatureGenerationDeterministic() {", "originalCommit": "3de04519202f5186b7f44a0291cfb9cb21e51af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a09a3a7f648e30f47d5c7a39746a5cb214df53c9", "chunk": "diff --git a/src/test/java/teammates/test/cases/util/StringHelperTest.java b/src/test/java/teammates/test/cases/util/StringHelperTest.java\nindex 49a7306327..a287196d12 100644\n--- a/src/test/java/teammates/test/cases/util/StringHelperTest.java\n+++ b/src/test/java/teammates/test/cases/util/StringHelperTest.java\n\n@@ -414,11 +424,26 @@ public class StringHelperTest extends BaseTestCase {\n     }\n \n     @Test\n-    public void testSignatureGenerationDeterministic() {\n-        String signature = StringHelper.generateSignature(\"NUS\");\n-        assertTrue(StringHelper.isCorrectSignature(\"NUS\", signature));\n-        assertFalse(StringHelper.isCorrectSignature(\"NUS\", null));\n-        assertFalse(StringHelper.isCorrectSignature(\"NTU\", signature));\n+    public void testSignatureGeneration() throws Exception {\n+        String data1 = \"National University of Singapore\";\n+        String data2 = \"Nanyang Technological University\";\n+\n+        assertEquals(generateSignature(data1), StringHelper.generateSignature(data1));\n+\n+        assertNotEquals(StringHelper.generateSignature(data1), StringHelper.generateSignature(data2));\n+    }\n+\n+    @Test\n+    public void testSignatureVerification() {\n+        String valid = \"National University of Singapore\";\n+        String invalid = \"Nanyang Technological University\";\n+        String signature = StringHelper.generateSignature(valid);\n+\n+        assertTrue(StringHelper.isCorrectSignature(valid, signature));\n+\n+        assertFalse(StringHelper.isCorrectSignature(valid, invalid));\n+        assertFalse(StringHelper.isCorrectSignature(valid, null));\n         assertFalse(StringHelper.isCorrectSignature(null, signature));\n+        assertFalse(StringHelper.isCorrectSignature(invalid, signature));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394206211", "bodyText": "Why we need to verify MAC for GET action?", "author": "xpdavid", "createdAt": "2020-03-18T09:24:50Z", "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);", "originalCommit": "3de04519202f5186b7f44a0291cfb9cb21e51af2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwOTc1OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394209758", "bodyText": "If we don't then everything seems normal to the user up till the point in which he presses \"Join course\", then he gets thrown an \"Internal Server error\" message and is told to write a report to the teammates dev team. IMO it would be better to show that the MAC was invalid at the point in which the \"Join course\" button is available and thus let the user know that they should re-check the URL.", "author": "ChooJeremy", "createdAt": "2020-03-18T09:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMzA5Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394213093", "bodyText": "If we don't then everything seems normal to the user up till the point in which he presses \"Join course\"\n\nIn the normal workflow, I don't think user will encounter the situation unless he intends to modify the URL.\n\nhe gets thrown an \"Internal Server error\" message\n\nThe problem looks like is in the frontend where we should handle the situation better. e.g. more helpful message like \"do you copy the full URL in the join email?\"\nThe MAC makes sure data integrity is not compromised when creating the account. Unlike joinKey, it has nothing to do with the GET operation and that is why I put the comment.", "author": "xpdavid", "createdAt": "2020-03-18T09:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0NzMwNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394247305", "bodyText": "I agree it's not great in terms of RESTful API convention - GET should only be retrieving data and not verifying that checksums match.\nSure, we can roll back the change (so the error only appears after the user clicks on \"Join Course\".) The only issues I see is that (1) the user actually needs to click on Join Course (I would prefer if the error message is shown before the user has to click the button), though I suppose this may not be worth breaking RESTful convention and (2) if we replace the error message with say, a toast, then there isn't a form available to report the issue to the dev team. I'd prefer to keep that form, since it gives them an avenue to report if it really ends up being a problem within teammates.", "author": "ChooJeremy", "createdAt": "2020-03-18T10:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2OTk3Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394269973", "bodyText": "I'm surmising from the discussion that we'll be adopting the following workflow:\n\nUser navigates to join link\nFront-end validation for presence of institute signature\n2a. If signature missing, display front-end error message\nUser clicks on \"Register for course\"\nBack-end validation of signature\n4a. If signature wrong, display internal server error message\n\nError message in (2a) to display a message to the instructor to request for a new join link, as the only non-malicious use-case would be instructors who have received their join link before this feature was implemented.\nInternal server error message in (4a) is the ErrorReportComponent modal to allow for error reporting, considering that in the non-malicious use-case, this should not happen.\nDo let me know if there are any other considerations I might have missed. Thank you!", "author": "madanalogy", "createdAt": "2020-03-18T11:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5OTY2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394799662", "bodyText": "Looks good", "author": "xpdavid", "createdAt": "2020-03-19T05:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a09a3a7f648e30f47d5c7a39746a5cb214df53c9", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java b/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java\nindex 6b5ca94338..436c2bc774 100644\n--- a/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java\n\n@@ -50,13 +49,6 @@ public class GetCourseJoinStatusAction extends Action {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n-\n-        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);\n-        String mac = getRequestParamValue(Const.ParamsNames.INSTITUTION_MAC);\n-        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n-            return new JsonResult(\"Error in institute validation.\", HttpStatus.SC_UNAUTHORIZED);\n-        }\n-\n         return getJoinStatusResult(instructor.isRegistered());\n     }\n \n"}}, {"oid": "a09a3a7f648e30f47d5c7a39746a5cb214df53c9", "url": "https://github.com/TEAMMATES/teammates/commit/a09a3a7f648e30f47d5c7a39746a5cb214df53c9", "message": "Apply suggestions from code review", "committedDate": "2020-03-18T12:11:12Z", "type": "commit"}, {"oid": "cc00a31a2ced267883f505ef94b7ec0a84c651b3", "url": "https://github.com/TEAMMATES/teammates/commit/cc00a31a2ced267883f505ef94b7ec0a84c651b3", "message": "Improve error message for missing mac", "committedDate": "2020-03-18T12:19:44Z", "type": "commit"}, {"oid": "a5e092ff02187ce1aa4b5d834972302c2b5a6fc7", "url": "https://github.com/TEAMMATES/teammates/commit/a5e092ff02187ce1aa4b5d834972302c2b5a6fc7", "message": "Merge branch 'master' into 4854-validate-instructor-institution", "committedDate": "2020-03-20T01:41:18Z", "type": "commit"}]}