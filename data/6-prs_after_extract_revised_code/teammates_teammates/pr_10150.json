{"pr_number": 10150, "pr_title": "[#10140] Add comment search functionality in the backend", "pr_createdAt": "2020-06-02T05:16:48Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10150", "timeline": [{"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9", "url": "https://github.com/TEAMMATES/teammates/commit/7214cd808b84ce139c4107e34e13e8980d2280b9", "message": "Refactor resource endpoints and define API output format", "committedDate": "2020-06-02T05:14:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433626189", "bodyText": "Please create a new protected constructor in SessionResultsData, you won't need FeedbackSessionResultsBundle", "author": "xpdavid", "createdAt": "2020-06-02T05:21:43Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package teammates.ui.webapi.output;\n+\n+import teammates.common.datatransfer.FeedbackSessionResultsBundle;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionResultsBundle bundle) {", "originalCommit": "7214cd808b84ce139c4107e34e13e8980d2280b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNzk2Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433627966", "bodyText": "In that case, would CommentSearchResultData even need a FeedbackSessionResultsBundle (as opposed to a different type to retrieve the FeedbackSessionData)?", "author": "madanalogy", "createdAt": "2020-06-02T05:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyODYyNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433628625", "bodyText": "Why you need FeedbackSessionResultsBundle in the first place? Does Logic#searchFeedbackResponseComments gives you FeedbackSessionResultsBundle?", "author": "xpdavid", "createdAt": "2020-06-02T05:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyOTQ3NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433629474", "bodyText": "Good point, let me take a closer look and define the constructor properly.", "author": "madanalogy", "createdAt": "2020-06-02T05:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e4f14c34fcea7c09a2617e1dd2c96ffa38cca7be", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex cd8a122a83..2cd6be74df 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -1,15 +1,12 @@\n package teammates.ui.webapi.output;\n \n-import teammates.common.datatransfer.FeedbackSessionResultsBundle;\n-\n /**\n  * API output format for a comment search result.\n  */\n+//TODO: Remove warning suppression\n+@SuppressWarnings(\"PMD\")\n public class CommentSearchResultData extends SessionResultsData {\n-    private final FeedbackSessionData feedbackSession;\n+    private FeedbackSessionData feedbackSession;\n \n-    public CommentSearchResultData(FeedbackSessionResultsBundle bundle) {\n-        super(bundle);\n-        feedbackSession = new FeedbackSessionData(bundle.feedbackSession);\n-    }\n+    //TODO: Build data from CommentSearchResultsData input\n }\n"}}, {"oid": "e4f14c34fcea7c09a2617e1dd2c96ffa38cca7be", "url": "https://github.com/TEAMMATES/teammates/commit/e4f14c34fcea7c09a2617e1dd2c96ffa38cca7be", "message": "Utilise FeedbackResponseCommentSearchResultBundle to build CommentSearchResultsData", "committedDate": "2020-06-02T06:59:21Z", "type": "commit"}, {"oid": "0b1ee857f939cbc418252f8a68511f0042c2b891", "url": "https://github.com/TEAMMATES/teammates/commit/0b1ee857f939cbc418252f8a68511f0042c2b891", "message": "Add documentation to searchComments method", "committedDate": "2020-06-02T07:09:55Z", "type": "commit"}, {"oid": "c763a1652f28ea106c2c1cc8590344945fcd8074", "url": "https://github.com/TEAMMATES/teammates/commit/c763a1652f28ea106c2c1cc8590344945fcd8074", "message": "Implement SearchCommentsAction and clean up unused action", "committedDate": "2020-06-02T14:33:27Z", "type": "commit"}, {"oid": "3544b2a4bc1dba9f34f9b5db2276e0789486079f", "url": "https://github.com/TEAMMATES/teammates/commit/3544b2a4bc1dba9f34f9b5db2276e0789486079f", "message": "Implement logical skeleton for data transform", "committedDate": "2020-06-03T04:04:13Z", "type": "commit"}, {"oid": "841e03ee94e91f92abc82e011c880667ad9b6554", "url": "https://github.com/TEAMMATES/teammates/commit/841e03ee94e91f92abc82e011c880667ad9b6554", "message": "Implement data transform to output logic", "committedDate": "2020-06-03T15:09:40Z", "type": "commit"}, {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487", "url": "https://github.com/TEAMMATES/teammates/commit/f493fc3a9385317f0c2932f0d88249eef44d8487", "message": "Fix checkstyle errors for SearchCommentsAction", "committedDate": "2020-06-03T15:10:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1OTgwOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434859809", "bodyText": "There is a nice builder for ResponseOutput merged recently. You can take advantage on that.", "author": "xpdavid", "createdAt": "2020-06-03T21:11:16Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,", "originalCommit": "f493fc3a9385317f0c2932f0d88249eef44d8487", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "112636d9bfa4af327717a4ff4296dbd091303c16", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex b1ea3eba24..fe1e43e332 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -2,7 +2,6 @@ package teammates.ui.webapi.output;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n \n import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434860624", "bodyText": "Note the indentation here.", "author": "xpdavid", "createdAt": "2020-06-03T21:12:46Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,\n+                                     FeedbackResponseCommentSearchResultBundle bundle) {\n+        for (String email : bundle.instructorEmails) {\n+            bundle.commentGiverEmailToNameTable.remove(email);\n+        }\n+        Optional<FeedbackResponseCommentAttributes> optComment = comments.stream().filter(c ->", "originalCommit": "f493fc3a9385317f0c2932f0d88249eef44d8487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2Mzc4Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434863783", "bodyText": "The reduction is to find participant comment? You should use isCommentFromFeedbackParticipant() instead?", "author": "xpdavid", "createdAt": "2020-06-03T21:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzMjkxNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434932916", "bodyText": "Yes it was to find participant, I did not know about that method thank you for the suggestion :)", "author": "madanalogy", "createdAt": "2020-06-04T00:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "112636d9bfa4af327717a4ff4296dbd091303c16", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex b1ea3eba24..fe1e43e332 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -2,7 +2,6 @@ package teammates.ui.webapi.output;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n \n import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MTU0OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434861548", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                   String questionStatistics, List<ResponseOutput> responses) {\n          \n          \n            \n                                   String questionStatistics, List<ResponseOutput> allResponses) {", "author": "xpdavid", "createdAt": "2020-06-03T21:14:40Z", "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -235,6 +237,13 @@ private static String removeAnonymousHash(String identifier) {\n             this.questionStatistics = questionStatistics;\n         }\n \n+        QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes,\n+                       String questionStatistics, List<ResponseOutput> responses) {", "originalCommit": "f493fc3a9385317f0c2932f0d88249eef44d8487", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "112636d9bfa4af327717a4ff4296dbd091303c16", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/SessionResultsData.java b/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\nindex 192625406a..71bc313592 100644\n--- a/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\n+++ b/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\n\n@@ -225,23 +325,23 @@ public class SessionResultsData extends ApiOutput {\n         private final String questionStatistics;\n \n         // For instructor view\n-        private List<ResponseOutput> allResponses = new ArrayList<>();\n+        private final List<ResponseOutput> allResponses = new ArrayList<>();\n \n         // For student view\n-        private List<ResponseOutput> responsesToSelf = new ArrayList<>();\n-        private List<ResponseOutput> responsesFromSelf = new ArrayList<>();\n-        private List<List<ResponseOutput>> otherResponses = new ArrayList<>();\n+        private final List<ResponseOutput> responsesToSelf = new ArrayList<>();\n+        private final List<ResponseOutput> responsesFromSelf = new ArrayList<>();\n+        private final List<List<ResponseOutput>> otherResponses = new ArrayList<>();\n \n         QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics) {\n             this.feedbackQuestion = new FeedbackQuestionData(feedbackQuestionAttributes);\n             this.questionStatistics = questionStatistics;\n         }\n \n-        QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes,\n-                       String questionStatistics, List<ResponseOutput> responses) {\n+        protected QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics,\n+                                 List<ResponseOutput> allResponses) {\n             this.feedbackQuestion = new FeedbackQuestionData(feedbackQuestionAttributes);\n             this.questionStatistics = questionStatistics;\n-            this.allResponses = responses;\n+            this.allResponses.addAll(allResponses);\n         }\n \n         public FeedbackQuestionData getFeedbackQuestion() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjE5MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434862191", "bodyText": "What is student comment? Do you mean ResponseComment? ParticipantComment\uff1f", "author": "xpdavid", "createdAt": "2020-06-03T21:15:55Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,", "originalCommit": "f493fc3a9385317f0c2932f0d88249eef44d8487", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzMzAxOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434933018", "bodyText": "Participant comment yes", "author": "madanalogy", "createdAt": "2020-06-04T00:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "112636d9bfa4af327717a4ff4296dbd091303c16", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex b1ea3eba24..fe1e43e332 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -2,7 +2,6 @@ package teammates.ui.webapi.output;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n \n import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjUwNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434862504", "bodyText": "Instructor comment?", "author": "xpdavid", "createdAt": "2020-06-03T21:16:34Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,", "originalCommit": "f493fc3a9385317f0c2932f0d88249eef44d8487", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "112636d9bfa4af327717a4ff4296dbd091303c16", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex b1ea3eba24..fe1e43e332 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -2,7 +2,6 @@ package teammates.ui.webapi.output;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n \n import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n"}}, {"oid": "112636d9bfa4af327717a4ff4296dbd091303c16", "url": "https://github.com/TEAMMATES/teammates/commit/112636d9bfa4af327717a4ff4296dbd091303c16", "message": "Utilise builder methods in SessionResultsData\n\n# Conflicts:\n#\tsrc/main/java/teammates/ui/webapi/output/SessionResultsData.java", "committedDate": "2020-06-04T01:51:23Z", "type": "commit"}, {"oid": "a57439132b3515e51c953bc044623d5010ec68f7", "url": "https://github.com/TEAMMATES/teammates/commit/a57439132b3515e51c953bc044623d5010ec68f7", "message": "Fix non executing test cases", "committedDate": "2020-06-04T02:04:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NjQ4Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434986482", "bodyText": "The backend should have no knowledge about what the data is going to be used so we should not mention here. Instead, mention what the action does.", "author": "xpdavid", "createdAt": "2020-06-04T04:32:04Z", "path": "src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package teammates.ui.webapi.action;\n+\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.output.CommentSearchResultsData;\n+\n+/**\n+ * Action: Showing the InstructorSearchPage for an instructor.", "originalCommit": "a57439132b3515e51c953bc044623d5010ec68f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java b/src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java\nindex fcd5be4884..38f7993195 100644\n--- a/src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java\n+++ b/src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java\n\n@@ -9,7 +9,7 @@ import teammates.common.util.Const;\n import teammates.ui.webapi.output.CommentSearchResultsData;\n \n /**\n- * Action: Showing the InstructorSearchPage for an instructor.\n+ * Action searches for comments. Keyword hits on session, question, or response will also be returned.\n  */\n public class SearchCommentsAction extends Action {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4Njk5Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434986992", "bodyText": "If you are not using questionStatistics why define it here in the first place?", "author": "xpdavid", "createdAt": "2020-06-04T04:34:00Z", "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -337,6 +337,13 @@ private static String getRecipientNameOfResponse(FeedbackResponseAttributes resp\n             this.questionStatistics = questionStatistics;\n         }\n \n+        protected QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics,", "originalCommit": "a57439132b3515e51c953bc044623d5010ec68f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/SessionResultsData.java b/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\nindex 71bc313592..fc06012d32 100644\n--- a/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\n+++ b/src/main/java/teammates/ui/webapi/output/SessionResultsData.java\n\n@@ -337,10 +337,10 @@ public class SessionResultsData extends ApiOutput {\n             this.questionStatistics = questionStatistics;\n         }\n \n-        protected QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics,\n+        protected QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes,\n                                  List<ResponseOutput> allResponses) {\n+            this.questionStatistics = null;\n             this.feedbackQuestion = new FeedbackQuestionData(feedbackQuestionAttributes);\n-            this.questionStatistics = questionStatistics;\n             this.allResponses.addAll(allResponses);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NzI1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434987255", "bodyText": "Follow good indentation here? Each line should only have one withXX?", "author": "xpdavid", "createdAt": "2020-06-04T04:35:12Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder().withResponseId(response.getId())", "originalCommit": "a57439132b3515e51c953bc044623d5010ec68f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex fe1e43e332..8d5f8ab061 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -28,8 +28,7 @@ public class CommentSearchResultData extends SessionResultsData {\n                                                 FeedbackResponseCommentSearchResultBundle bundle) {\n         List<QuestionOutput> output = new ArrayList<>();\n         for (FeedbackQuestionAttributes question : questions) {\n-            output.add(new QuestionOutput(question, null,\n-                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));\n         }\n         return output;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NzU1MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434987551", "bodyText": "Why we are not filtering out participantComment here?", "author": "xpdavid", "createdAt": "2020-06-04T04:36:26Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder().withResponseId(response.getId())\n+                    .withGiver(response.giver).withGiverSection(response.giverSection)\n+                    .withRecipient(response.recipient).withRecipientSection(response.recipientSection)\n+                    .withParticipantComment(getParticipantComment(bundle.comments.get(response.getId()), bundle))\n+                    .withInstructorComments(getInstructorComments(bundle.comments.get(response.getId()), bundle))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> getInstructorComments(List<FeedbackResponseCommentAttributes> comments,\n+                                                      FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(CommentOutput.builder(comment)", "originalCommit": "a57439132b3515e51c953bc044623d5010ec68f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex fe1e43e332..8d5f8ab061 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -28,8 +28,7 @@ public class CommentSearchResultData extends SessionResultsData {\n                                                 FeedbackResponseCommentSearchResultBundle bundle) {\n         List<QuestionOutput> output = new ArrayList<>();\n         for (FeedbackQuestionAttributes question : questions) {\n-            output.add(new QuestionOutput(question, null,\n-                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));\n         }\n         return output;\n     }\n"}}, {"oid": "d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "url": "https://github.com/TEAMMATES/teammates/commit/d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "message": "Clean up code style and documentation", "committedDate": "2020-06-04T05:04:45Z", "type": "commit"}, {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a", "url": "https://github.com/TEAMMATES/teammates/commit/661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a", "message": "Fix imports for search action test files", "committedDate": "2020-06-04T05:14:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435000305", "bodyText": "Maybe we can break up this one-liner for better readability?", "author": "Derek-Hardy", "createdAt": "2020-06-04T05:28:08Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));", "originalCommit": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjkwMA==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435016900", "bodyText": "Looks okay to me. Where would you suggest the breakpoint be?", "author": "madanalogy", "createdAt": "2020-06-04T06:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MDQ3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435080479", "bodyText": "I felt output of buildResponses() can be separate out and saved as a variable?\nSo that it is easier to see what are the params for new QuestionOutput()", "author": "Derek-Hardy", "createdAt": "2020-06-04T08:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTIzNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435081234", "bodyText": "Yeap, I put the params of new QuestionOutput() to a new line :)", "author": "madanalogy", "createdAt": "2020-06-04T08:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "02bf871bc490151cd0f1c949329b94abcf94c876", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex 8d5f8ab061..8a05302e24 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -28,7 +28,9 @@ public class CommentSearchResultData extends SessionResultsData {\n                                                 FeedbackResponseCommentSearchResultBundle bundle) {\n         List<QuestionOutput> output = new ArrayList<>();\n         for (FeedbackQuestionAttributes question : questions) {\n-            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));\n+            output.add(new QuestionOutput(\n+                    question, buildResponses(bundle.responses.get(question.getId()), bundle)\n+            ));\n         }\n         return output;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMjkwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435002907", "bodyText": "Since this method has the potential to return null, it could be better to have a bit Javadoc to explain when we will get CommentOutput and when will it be null?", "author": "Derek-Hardy", "createdAt": "2020-06-04T05:37:08Z", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder()\n+                    .withResponseId(response.getId())\n+                    .withGiver(response.giver)\n+                    .withGiverSection(response.giverSection)\n+                    .withRecipient(response.recipient)\n+                    .withRecipientSection(response.recipientSection)\n+                    .withParticipantComment(getParticipantComment(bundle.comments.get(response.getId()), bundle))\n+                    .withInstructorComments(getInstructorComments(bundle.comments.get(response.getId()), bundle))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> getInstructorComments(List<FeedbackResponseCommentAttributes> comments,\n+                                                      FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            if (comment.isCommentFromFeedbackParticipant()) {\n+                continue;\n+            }\n+            output.add(CommentOutput.builder(comment)\n+                    .withCommentGiver(comment.commentGiver)\n+                    .withLastEditorName(bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getParticipantComment(List<FeedbackResponseCommentAttributes> comments,", "originalCommit": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02bf871bc490151cd0f1c949329b94abcf94c876", "chunk": "diff --git a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\nindex 8d5f8ab061..8a05302e24 100644\n--- a/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n+++ b/src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java\n\n@@ -28,7 +28,9 @@ public class CommentSearchResultData extends SessionResultsData {\n                                                 FeedbackResponseCommentSearchResultBundle bundle) {\n         List<QuestionOutput> output = new ArrayList<>();\n         for (FeedbackQuestionAttributes question : questions) {\n-            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));\n+            output.add(new QuestionOutput(\n+                    question, buildResponses(bundle.responses.get(question.getId()), bundle)\n+            ));\n         }\n         return output;\n     }\n"}}, {"oid": "02bf871bc490151cd0f1c949329b94abcf94c876", "url": "https://github.com/TEAMMATES/teammates/commit/02bf871bc490151cd0f1c949329b94abcf94c876", "message": "Add documentation to explain null CommentOutput", "committedDate": "2020-06-04T07:33:34Z", "type": "commit"}, {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1", "url": "https://github.com/TEAMMATES/teammates/commit/5a7569ea269a5c906dc9d90ce844fe265a15c8f1", "message": "Add response details when building ResponseOutput", "committedDate": "2020-06-04T08:24:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNDUxMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435224512", "bodyText": "The class shouldn't care where it gets the mapping details from.", "author": "wkurniawan07", "createdAt": "2020-06-04T12:45:43Z", "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "diffHunk": "@@ -13,17 +13,27 @@\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n+ * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.", "originalCommit": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5c44541eb36e007d35d580279ee7f817cef4848", "chunk": "diff --git a/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java b/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java\nindex 76404000d8..be463cf150 100644\n--- a/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java\n+++ b/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java\n\n@@ -13,25 +13,40 @@ import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n- * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.\n  */\n public class FeedbackResponseCommentSearchResultBundle extends SearchResultBundle {\n \n-    // session name to session map\n+    /**\n+     * Session name to FeedbackSessionAttributes map.\n+     */\n     public Map<String, FeedbackSessionAttributes> sessions = new HashMap<>();\n-    // session name to questions map\n+    /**\n+     * Session name to FeedbackQuestionAttributes map.\n+     */\n     public Map<String, List<FeedbackQuestionAttributes>> questions = new HashMap<>();\n-    // questionId to responses map\n+    /**\n+     * Question id to FeedbackResponseAttributes map.\n+     */\n     public Map<String, List<FeedbackResponseAttributes>> responses = new HashMap<>();\n-    // responseId to comment map\n+    /**\n+     * Response id to FeedbackResponseCommentAttributes map.\n+     */\n     public Map<String, List<FeedbackResponseCommentAttributes>> comments = new HashMap<>();\n-    // responseId to response giver name\n+    /**\n+     * Response id to response giver name.\n+     */\n     public Map<String, String> responseGiverTable = new HashMap<>();\n-    // responseId to response recipient name\n+    /**\n+     * Response id to response recipient name.\n+     */\n     public Map<String, String> responseRecipientTable = new HashMap<>();\n-    // commentId to comment giver name\n+    /**\n+     * Comment id to comment giver name.\n+     */\n     public Map<String, String> commentGiverTable = new HashMap<>();\n-    // comment giver email to comment giver name\n+    /**\n+     * Comment giver email to comment giver name.\n+     */\n     public Map<String, String> commentGiverEmailToNameTable = new HashMap<>();\n \n     public Set<String> instructorEmails = new HashSet<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNDg2NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435224865", "bodyText": "Use proper javadoc instead of code comments.\n/**\n * Session name to session maps.\n */\npublic Map<String, FeedbackSessionAttributes> sessions = new HashMap<>();", "author": "wkurniawan07", "createdAt": "2020-06-04T12:46:18Z", "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "diffHunk": "@@ -13,17 +13,27 @@\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n+ * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.\n  */\n public class FeedbackResponseCommentSearchResultBundle extends SearchResultBundle {\n \n-    public Map<String, List<FeedbackResponseCommentAttributes>> comments = new HashMap<>();\n-    public Map<String, List<FeedbackResponseAttributes>> responses = new HashMap<>();\n-    public Map<String, List<FeedbackQuestionAttributes>> questions = new HashMap<>();\n+    // session name to session map", "originalCommit": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5c44541eb36e007d35d580279ee7f817cef4848", "chunk": "diff --git a/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java b/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java\nindex 76404000d8..be463cf150 100644\n--- a/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java\n+++ b/src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java\n\n@@ -13,25 +13,40 @@ import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n- * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.\n  */\n public class FeedbackResponseCommentSearchResultBundle extends SearchResultBundle {\n \n-    // session name to session map\n+    /**\n+     * Session name to FeedbackSessionAttributes map.\n+     */\n     public Map<String, FeedbackSessionAttributes> sessions = new HashMap<>();\n-    // session name to questions map\n+    /**\n+     * Session name to FeedbackQuestionAttributes map.\n+     */\n     public Map<String, List<FeedbackQuestionAttributes>> questions = new HashMap<>();\n-    // questionId to responses map\n+    /**\n+     * Question id to FeedbackResponseAttributes map.\n+     */\n     public Map<String, List<FeedbackResponseAttributes>> responses = new HashMap<>();\n-    // responseId to comment map\n+    /**\n+     * Response id to FeedbackResponseCommentAttributes map.\n+     */\n     public Map<String, List<FeedbackResponseCommentAttributes>> comments = new HashMap<>();\n-    // responseId to response giver name\n+    /**\n+     * Response id to response giver name.\n+     */\n     public Map<String, String> responseGiverTable = new HashMap<>();\n-    // responseId to response recipient name\n+    /**\n+     * Response id to response recipient name.\n+     */\n     public Map<String, String> responseRecipientTable = new HashMap<>();\n-    // commentId to comment giver name\n+    /**\n+     * Comment id to comment giver name.\n+     */\n     public Map<String, String> commentGiverTable = new HashMap<>();\n-    // comment giver email to comment giver name\n+    /**\n+     * Comment giver email to comment giver name.\n+     */\n     public Map<String, String> commentGiverEmailToNameTable = new HashMap<>();\n \n     public Set<String> instructorEmails = new HashSet<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNjcwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435226707", "bodyText": "Normally I would say that this shouldn't be included as it is not in the scope of the issue, but I will close one eye this time.", "author": "wkurniawan07", "createdAt": "2020-06-04T12:49:29Z", "path": "src/test/java/teammates/test/cases/webapi/SearchStudentsActionTest.java", "diffHunk": "@@ -1,6 +1,6 @@\n package teammates.test.cases.webapi;\n \n-import org.junit.Test;\n+import org.testng.annotations.Test;", "originalCommit": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b5c44541eb36e007d35d580279ee7f817cef4848", "url": "https://github.com/TEAMMATES/teammates/commit/b5c44541eb36e007d35d580279ee7f817cef4848", "message": "Convert code comments to javadocs and fix name email mismatch", "committedDate": "2020-06-05T04:04:52Z", "type": "commit"}, {"oid": "7b07be0513a3ee2b9df0fc56c7a953dbf1672678", "url": "https://github.com/TEAMMATES/teammates/commit/7b07be0513a3ee2b9df0fc56c7a953dbf1672678", "message": "Add unit tests, change access to instructors only", "committedDate": "2020-06-05T05:47:57Z", "type": "commit"}, {"oid": "0d4461abea7f687d0178d7761310bb1222e91443", "url": "https://github.com/TEAMMATES/teammates/commit/0d4461abea7f687d0178d7761310bb1222e91443", "message": "Merge branch 'master' into 10140-search", "committedDate": "2020-06-05T07:07:53Z", "type": "commit"}]}