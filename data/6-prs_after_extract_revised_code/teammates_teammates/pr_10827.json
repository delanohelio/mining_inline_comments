{"pr_number": 10827, "pr_title": "[#9536] Improve E2E for Production Server Testing", "pr_createdAt": "2020-11-02T04:40:17Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10827", "timeline": [{"oid": "3e472a6dc1464bc07a0cdfd0952696cef1502114", "url": "https://github.com/TEAMMATES/teammates/commit/3e472a6dc1464bc07a0cdfd0952696cef1502114", "message": "Fix accounts used in dev server tests", "committedDate": "2020-11-02T10:10:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA5NDcyNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519094724", "bodyText": "The logic is not right here for two reasons:\n\nProduction server is not the cause for emails failing to send\nTestProperties does not affect the production system logic in that the value of INCLUDE_EMAIL_VERIFICATION is not going to affect whether emails are sent or not", "author": "wkurniawan07", "createdAt": "2020-11-07T03:44:39Z", "path": "src/e2e/java/teammates/e2e/cases/AdminSearchPageE2ETest.java", "diffHunk": "@@ -237,8 +238,13 @@ private void verifyLinkExpansionButtons(StudentAttributes student, InstructorAtt\n     }\n \n     private void verifyRegenerateStudentCourseLinks(WebElement studentRow, String originalJoinLink) {\n-        searchPage.verifyStatusMessage(\"Student's links for this course have been successfully regenerated,\"\n-                + \" and the email has been sent.\");\n+        if (TestProperties.isDevServer() || TestProperties.INCLUDE_EMAIL_VERIFICATION) {", "originalCommit": "a4a3decf3b0be12d4b182776914c2cce6467091c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/AdminSearchPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/AdminSearchPageE2ETest.java\nindex 155d7e72e0..6d033577ea 100644\n--- a/src/e2e/java/teammates/e2e/cases/AdminSearchPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/AdminSearchPageE2ETest.java\n\n@@ -238,13 +236,8 @@ public class AdminSearchPageE2ETest extends BaseE2ETestCase {\n     }\n \n     private void verifyRegenerateStudentCourseLinks(WebElement studentRow, String originalJoinLink) {\n-        if (TestProperties.isDevServer() || TestProperties.INCLUDE_EMAIL_VERIFICATION) {\n-            searchPage.verifyStatusMessage(\"Student's links for this course have been successfully \"\n-                    + \"regenerated, and the email has been sent.\");\n-        } else {\n-            searchPage.verifyStatusMessage(\"Student's links for this course have been successfully \"\n-                    + \"regenerated, but the email failed to send.\");\n-        }\n+        searchPage.verifyStatusMessage(\"Student's links for this course have been successfully regenerated,\"\n+                + \" and the email has been sent.\");\n \n         String regeneratedJoinLink = searchPage.getStudentJoinLink(studentRow);\n         assertNotEquals(regeneratedJoinLink, originalJoinLink);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NTY2NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519175665", "bodyText": "TestProperties.isDevServer() is actually another hard requirement. So the condition here should be either it is a dev server or it is explicitly requested to not verify emails.", "author": "wkurniawan07", "createdAt": "2020-11-07T13:04:43Z", "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "diffHunk": "@@ -189,7 +190,7 @@ protected void verifyDownloadedFile(String expectedFileName, List<String> expect\n      * Email used must be an authentic gmail account.\n      */\n     protected void verifyEmailSent(String email, String subject) {\n-        if (TestProperties.isDevServer()) {\n+        if (!TestProperties.INCLUDE_EMAIL_VERIFICATION) {", "originalCommit": "a4a3decf3b0be12d4b182776914c2cce6467091c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\nindex 8ad45eba8a..8cefb017f4 100644\n--- a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n+++ b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n\n@@ -190,12 +187,9 @@ public abstract class BaseE2ETestCase extends BaseTestCaseWithDatastoreAccess {\n      * Email used must be an authentic gmail account.\n      */\n     protected void verifyEmailSent(String email, String subject) {\n-        if (!TestProperties.INCLUDE_EMAIL_VERIFICATION) {\n+        if (TestProperties.isDevServer()) {\n             return;\n         }\n-        if (!TestProperties.TEST_EMAIL.equals(email)) {\n-            fail(\"Email verification is allowed only on preset test email.\");\n-        }\n         EmailAccount emailAccount = new EmailAccount(email);\n         try {\n             emailAccount.getUserAuthenticated();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NTcwOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519175709", "bodyText": "What is this for?", "author": "wkurniawan07", "createdAt": "2020-11-07T13:05:01Z", "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "diffHunk": "@@ -105,7 +105,9 @@ protected static AppUrl createUrl(String relativeUrl) {\n         // To log in, log in manually to teammates in your browser before running e2e tests.\n         // Refer to teammates.e2e.pageobjects.Browser for more information.\n         if (!TestProperties.isDevServer()) {\n-            // skip login and navigate to the desired page.\n+            // skip login and start at admin home page\n+            AppPage.getNewPageInstance(browser, createUrl(Const.WebPageURIs.ADMIN_HOME_PAGE), AdminHomePage.class);", "originalCommit": "a4a3decf3b0be12d4b182776914c2cce6467091c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ0ODIxNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519448217", "bodyText": "I was getting unauthorized access message if I tried to access a page without going to the admin home page first, but I think its something to do with the login cookie. After accessing the link a few times manually the message does not appear anymore.\nRemoved it.", "author": "jtankw3", "createdAt": "2020-11-08T16:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NTcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\nindex 8ad45eba8a..8cefb017f4 100644\n--- a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n+++ b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n\n@@ -105,9 +103,7 @@ public abstract class BaseE2ETestCase extends BaseTestCaseWithDatastoreAccess {\n         // To log in, log in manually to teammates in your browser before running e2e tests.\n         // Refer to teammates.e2e.pageobjects.Browser for more information.\n         if (!TestProperties.isDevServer()) {\n-            // skip login and start at admin home page\n-            AppPage.getNewPageInstance(browser, createUrl(Const.WebPageURIs.ADMIN_HOME_PAGE), AdminHomePage.class);\n-            // navigate to the desired page.\n+            // skip login and navigate to the desired page.\n             return AppPage.getNewPageInstance(browser, url, typeOfPage);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NTgxNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519175815", "bodyText": "Unrelated change?", "author": "wkurniawan07", "createdAt": "2020-11-07T13:06:18Z", "path": "src/e2e/java/teammates/e2e/cases/InstructorFeedbackSessionsPageE2ETest.java", "diffHunk": "@@ -42,6 +42,7 @@ protected void prepareTestData() {\n         testData = loadDataBundle(\"/InstructorFeedbackSessionsPageE2ETest.json\");\n         studentToEmail = testData.students.get(\"charlie.tmms@IFSess.CS1101\");\n         studentToEmail.email = TestProperties.TEST_EMAIL;\n+", "originalCommit": "a4a3decf3b0be12d4b182776914c2cce6467091c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/InstructorFeedbackSessionsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/InstructorFeedbackSessionsPageE2ETest.java\nindex 7e6a8f97cf..83a27537ae 100644\n--- a/src/e2e/java/teammates/e2e/cases/InstructorFeedbackSessionsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/InstructorFeedbackSessionsPageE2ETest.java\n\n@@ -40,9 +40,10 @@ public class InstructorFeedbackSessionsPageE2ETest extends BaseE2ETestCase {\n     @Override\n     protected void prepareTestData() {\n         testData = loadDataBundle(\"/InstructorFeedbackSessionsPageE2ETest.json\");\n-        studentToEmail = testData.students.get(\"charlie.tmms@IFSess.CS1101\");\n-        studentToEmail.email = TestProperties.TEST_EMAIL;\n-\n+        studentToEmail = testData.students.get(\"charlie.tmms@CFeedbackSessionsE2eT.CS1101\");\n+        if (!TestProperties.isDevServer()) {\n+            studentToEmail.email = TestProperties.TEST_EMAIL;\n+        }\n         removeAndRestoreDataBundle(testData);\n \n         instructor = testData.instructors.get(\"instructor\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI0NTAyMA==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519245020", "bodyText": "This should not be necessary once #10694 is merged", "author": "wkurniawan07", "createdAt": "2020-11-08T02:01:06Z", "path": "src/e2e/java/teammates/e2e/util/TestProperties.java", "diffHunk": "@@ -74,6 +80,7 @@\n \n             TEAMMATES_URL = UrlExtension.trimTrailingSlash(prop.getProperty(\"test.app.url\"));\n \n+            TEST_ADMIN_ID = prop.getProperty(\"test.admin.id\");", "originalCommit": "a4a3decf3b0be12d4b182776914c2cce6467091c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "chunk": "diff --git a/src/e2e/java/teammates/e2e/util/TestProperties.java b/src/e2e/java/teammates/e2e/util/TestProperties.java\nindex 1bd9ab8bb8..44c7defabb 100644\n--- a/src/e2e/java/teammates/e2e/util/TestProperties.java\n+++ b/src/e2e/java/teammates/e2e/util/TestProperties.java\n\n@@ -80,7 +74,6 @@ public final class TestProperties {\n \n             TEAMMATES_URL = UrlExtension.trimTrailingSlash(prop.getProperty(\"test.app.url\"));\n \n-            TEST_ADMIN_ID = prop.getProperty(\"test.admin.id\");\n             TEST_EMAIL = prop.getProperty(\"test.email\");\n \n             CSRF_KEY = prop.getProperty(\"test.csrf.key\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI0NTI2OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519245269", "bodyText": "\ud83d\udc4d", "author": "wkurniawan07", "createdAt": "2020-11-08T02:05:02Z", "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "diffHunk": "@@ -205,7 +206,6 @@ protected void verifyEmailSent(String email, String subject) {\n                 ThreadHelper.waitFor(1000);\n                 actual = emailAccount.isEmailWithSubjectPresent(subject);\n             }\n-            emailAccount.markAllUnreadEmailAsRead();", "originalCommit": "a4a3decf3b0be12d4b182776914c2cce6467091c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\nindex 8ad45eba8a..8cefb017f4 100644\n--- a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n+++ b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n\n@@ -206,6 +200,7 @@ public abstract class BaseE2ETestCase extends BaseTestCaseWithDatastoreAccess {\n                 ThreadHelper.waitFor(1000);\n                 actual = emailAccount.isEmailWithSubjectPresent(subject);\n             }\n+            emailAccount.markAllUnreadEmailAsRead();\n             assertTrue(actual);\n         } catch (Exception e) {\n             fail(\"Failed to verify email sent:\" + e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI0NTI3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519245278", "bodyText": "\ud83d\udc4d", "author": "wkurniawan07", "createdAt": "2020-11-08T02:05:08Z", "path": "src/e2e/java/teammates/e2e/util/EmailAccount.java", "diffHunk": "@@ -114,6 +114,7 @@ public boolean isEmailWithSubjectPresent(String subject)\n             MimeMessage email = convertFromMessageToMimeMessage(message);\n \n             if (email.getSubject().equals(subject)) {\n+                markMessageAsRead(messageStub);", "originalCommit": "a4a3decf3b0be12d4b182776914c2cce6467091c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "chunk": "diff --git a/src/e2e/java/teammates/e2e/util/EmailAccount.java b/src/e2e/java/teammates/e2e/util/EmailAccount.java\nindex bda628e9f1..5880826878 100644\n--- a/src/e2e/java/teammates/e2e/util/EmailAccount.java\n+++ b/src/e2e/java/teammates/e2e/util/EmailAccount.java\n\n@@ -114,7 +114,6 @@ public final class EmailAccount {\n             MimeMessage email = convertFromMessageToMimeMessage(message);\n \n             if (email.getSubject().equals(subject)) {\n-                markMessageAsRead(messageStub);\n                 return true;\n             }\n         }\n"}}, {"oid": "8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "url": "https://github.com/TEAMMATES/teammates/commit/8cd9d4ea7b2a3d2c9ed82e12050e6f903b73c841", "message": "Fix submit page access issues", "committedDate": "2020-11-08T14:29:16Z", "type": "commit"}, {"oid": "fd25ef90bbb3c412672dbb692c0ffda4d3737742", "url": "https://github.com/TEAMMATES/teammates/commit/fd25ef90bbb3c412672dbb692c0ffda4d3737742", "message": "Fix email related issues", "committedDate": "2020-11-08T16:52:30Z", "type": "commit"}, {"oid": "6eba02093707d90eaa7b3bffab0c38b72cf1170d", "url": "https://github.com/TEAMMATES/teammates/commit/6eba02093707d90eaa7b3bffab0c38b72cf1170d", "message": "Add changes to improve stability", "committedDate": "2020-11-08T16:52:51Z", "type": "commit"}, {"oid": "503251948ca86310319c7fa3e6ae7003b57791d5", "url": "https://github.com/TEAMMATES/teammates/commit/503251948ca86310319c7fa3e6ae7003b57791d5", "message": "Run E2E in single thread for production server", "committedDate": "2020-11-08T18:18:43Z", "type": "commit"}, {"oid": "a94b606f947a14e2831d0302674958dd45c54f64", "url": "https://github.com/TEAMMATES/teammates/commit/a94b606f947a14e2831d0302674958dd45c54f64", "message": "Fix timing issues", "committedDate": "2020-11-08T18:20:07Z", "type": "commit"}, {"oid": "1e1ca9445b13070ee3bf32ca5d0029cbd997f78c", "url": "https://github.com/TEAMMATES/teammates/commit/1e1ca9445b13070ee3bf32ca5d0029cbd997f78c", "message": "Remove logouts", "committedDate": "2020-11-08T18:20:21Z", "type": "commit"}, {"oid": "4eee4e3f982a8c50148e90e94b0bb805dc3a1466", "url": "https://github.com/TEAMMATES/teammates/commit/4eee4e3f982a8c50148e90e94b0bb805dc3a1466", "message": "Fix chrome preference settings", "committedDate": "2020-11-08T18:20:33Z", "type": "commit"}, {"oid": "ceeeaff1147f33a024eea6632ad56c6f72308378", "url": "https://github.com/TEAMMATES/teammates/commit/ceeeaff1147f33a024eea6632ad56c6f72308378", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into production-server-e2e\n\n# Conflicts:\n#\tsrc/e2e/java/teammates/e2e/cases/FeedbackSubmitPageE2ETest.java\n#\tsrc/e2e/java/teammates/e2e/cases/InstructorCourseDetailsPageE2ETest.java\n#\tsrc/e2e/java/teammates/e2e/cases/InstructorFeedbackSessionsPageE2ETest.java\n#\tsrc/e2e/java/teammates/e2e/cases/InstructorHomePageE2ETest.java", "committedDate": "2020-11-08T18:23:41Z", "type": "commit"}, {"oid": "ceeeaff1147f33a024eea6632ad56c6f72308378", "url": "https://github.com/TEAMMATES/teammates/commit/ceeeaff1147f33a024eea6632ad56c6f72308378", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into production-server-e2e\n\n# Conflicts:\n#\tsrc/e2e/java/teammates/e2e/cases/FeedbackSubmitPageE2ETest.java\n#\tsrc/e2e/java/teammates/e2e/cases/InstructorCourseDetailsPageE2ETest.java\n#\tsrc/e2e/java/teammates/e2e/cases/InstructorFeedbackSessionsPageE2ETest.java\n#\tsrc/e2e/java/teammates/e2e/cases/InstructorHomePageE2ETest.java", "committedDate": "2020-11-08T18:23:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Njg5NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519476894", "bodyText": "Let's keep the SLAP principle: extract out email.getSubject().equals(subject) to a variable as well.", "author": "wkurniawan07", "createdAt": "2020-11-08T21:04:35Z", "path": "src/e2e/java/teammates/e2e/util/EmailAccount.java", "diffHunk": "@@ -100,20 +101,23 @@ public String getRegistrationKeyFromUnreadEmails(String courseName, String cours\n     }\n \n     /**\n-     * Returns true if unread mail contains mail with the specified subject.\n+     * Returns true if unread mail that arrived in the past minute contains mail with the specified subject.\n      */\n-    public boolean isEmailWithSubjectPresent(String subject)\n+    public boolean isRecentEmailWithSubjectPresent(String subject, String senderName)\n             throws IOException, MessagingException {\n \n-        List<Message> messageStubs = getListOfUnreadEmailOfUser();\n+        List<Message> messageStubs = getListOfUnreadEmailFromSender(10L, senderName);\n \n         for (Message messageStub : messageStubs) {\n             Message message = service.users().messages().get(username, messageStub.getId()).setFormat(\"raw\")\n                     .execute();\n \n             MimeMessage email = convertFromMessageToMimeMessage(message);\n+            boolean isSentWithinLastMin =\n+                    message.getInternalDate() > System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(1);\n \n-            if (email.getSubject().equals(subject)) {\n+            if (email.getSubject().equals(subject) && isSentWithinLastMin) {", "originalCommit": "ceeeaff1147f33a024eea6632ad56c6f72308378", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "778a2ba6e1c3fd6e674ca2b35cecf3b82b921bb1", "chunk": "diff --git a/src/e2e/java/teammates/e2e/util/EmailAccount.java b/src/e2e/java/teammates/e2e/util/EmailAccount.java\nindex 8ce3dbe5a7..34e09fabe4 100644\n--- a/src/e2e/java/teammates/e2e/util/EmailAccount.java\n+++ b/src/e2e/java/teammates/e2e/util/EmailAccount.java\n\n@@ -67,56 +64,24 @@ public final class EmailAccount {\n         }\n     }\n \n-    /**\n-     * Retrieves the registration key among the unread emails\n-     * with {@code courseId} and {@code courseName} sent to the Gmail inbox.\n-     *\n-     * <p>After retrieving, marks the email as read.\n-     *\n-     * <p>If multiple emails of the same course are in the inbox, return the registration key presented in one of them.\n-     *\n-     * @return registration key (null if cannot be found).\n-     */\n-    public String getRegistrationKeyFromUnreadEmails(String courseName, String courseId)\n-            throws IOException, MessagingException {\n-\n-        List<Message> messageStubs = getListOfUnreadEmailOfUser();\n-\n-        for (Message messageStub : messageStubs) {\n-            Message message = service.users().messages().get(username, messageStub.getId()).setFormat(\"raw\")\n-                    .execute();\n-\n-            MimeMessage email = convertFromMessageToMimeMessage(message);\n-\n-            if (isStudentCourseJoinRegistrationEmail(email, courseName, courseId)) {\n-                String body = getTextFromEmail(email);\n-\n-                markMessageAsRead(messageStub);\n-\n-                return getKey(body);\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n     /**\n      * Returns true if unread mail that arrived in the past minute contains mail with the specified subject.\n      */\n-    public boolean isRecentEmailWithSubjectPresent(String subject, String senderName)\n+    public boolean isRecentEmailWithSubjectPresent(String subject, String senderEmail)\n             throws IOException, MessagingException {\n \n-        List<Message> messageStubs = getListOfUnreadEmailFromSender(10L, senderName);\n+        List<Message> messageStubs = getListOfUnreadEmailFromSender(10L, senderEmail);\n \n         for (Message messageStub : messageStubs) {\n             Message message = service.users().messages().get(username, messageStub.getId()).setFormat(\"raw\")\n                     .execute();\n \n             MimeMessage email = convertFromMessageToMimeMessage(message);\n+            boolean isSubjectEqual = email.getSubject().equals(subject);\n             boolean isSentWithinLastMin =\n                     message.getInternalDate() > System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(1);\n \n-            if (email.getSubject().equals(subject) && isSentWithinLastMin) {\n+            if (isSubjectEqual && isSentWithinLastMin) {\n                 markMessageAsRead(messageStub);\n                 return true;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NzAzMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519477032", "bodyText": "This method (getListOfUnreadEmailOfUser) should not be useful anymore now? The other call sites are markAllUnreadEmailAsRead (no longer used, can remove), getRegistrationKeyFromUnreadEmails (no longer used, can remove), getUserAuthenticated (should be changed to a more efficient method).", "author": "wkurniawan07", "createdAt": "2020-11-08T21:05:30Z", "path": "src/e2e/java/teammates/e2e/util/EmailAccount.java", "diffHunk": "@@ -100,20 +101,23 @@ public String getRegistrationKeyFromUnreadEmails(String courseName, String cours\n     }\n \n     /**\n-     * Returns true if unread mail contains mail with the specified subject.\n+     * Returns true if unread mail that arrived in the past minute contains mail with the specified subject.\n      */\n-    public boolean isEmailWithSubjectPresent(String subject)\n+    public boolean isRecentEmailWithSubjectPresent(String subject, String senderName)\n             throws IOException, MessagingException {\n \n-        List<Message> messageStubs = getListOfUnreadEmailOfUser();", "originalCommit": "ceeeaff1147f33a024eea6632ad56c6f72308378", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "778a2ba6e1c3fd6e674ca2b35cecf3b82b921bb1", "chunk": "diff --git a/src/e2e/java/teammates/e2e/util/EmailAccount.java b/src/e2e/java/teammates/e2e/util/EmailAccount.java\nindex 8ce3dbe5a7..34e09fabe4 100644\n--- a/src/e2e/java/teammates/e2e/util/EmailAccount.java\n+++ b/src/e2e/java/teammates/e2e/util/EmailAccount.java\n\n@@ -67,56 +64,24 @@ public final class EmailAccount {\n         }\n     }\n \n-    /**\n-     * Retrieves the registration key among the unread emails\n-     * with {@code courseId} and {@code courseName} sent to the Gmail inbox.\n-     *\n-     * <p>After retrieving, marks the email as read.\n-     *\n-     * <p>If multiple emails of the same course are in the inbox, return the registration key presented in one of them.\n-     *\n-     * @return registration key (null if cannot be found).\n-     */\n-    public String getRegistrationKeyFromUnreadEmails(String courseName, String courseId)\n-            throws IOException, MessagingException {\n-\n-        List<Message> messageStubs = getListOfUnreadEmailOfUser();\n-\n-        for (Message messageStub : messageStubs) {\n-            Message message = service.users().messages().get(username, messageStub.getId()).setFormat(\"raw\")\n-                    .execute();\n-\n-            MimeMessage email = convertFromMessageToMimeMessage(message);\n-\n-            if (isStudentCourseJoinRegistrationEmail(email, courseName, courseId)) {\n-                String body = getTextFromEmail(email);\n-\n-                markMessageAsRead(messageStub);\n-\n-                return getKey(body);\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n     /**\n      * Returns true if unread mail that arrived in the past minute contains mail with the specified subject.\n      */\n-    public boolean isRecentEmailWithSubjectPresent(String subject, String senderName)\n+    public boolean isRecentEmailWithSubjectPresent(String subject, String senderEmail)\n             throws IOException, MessagingException {\n \n-        List<Message> messageStubs = getListOfUnreadEmailFromSender(10L, senderName);\n+        List<Message> messageStubs = getListOfUnreadEmailFromSender(10L, senderEmail);\n \n         for (Message messageStub : messageStubs) {\n             Message message = service.users().messages().get(username, messageStub.getId()).setFormat(\"raw\")\n                     .execute();\n \n             MimeMessage email = convertFromMessageToMimeMessage(message);\n+            boolean isSubjectEqual = email.getSubject().equals(subject);\n             boolean isSentWithinLastMin =\n                     message.getInternalDate() > System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(1);\n \n-            if (email.getSubject().equals(subject) && isSentWithinLastMin) {\n+            if (isSubjectEqual && isSentWithinLastMin) {\n                 markMessageAsRead(messageStub);\n                 return true;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NzA0Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519477047", "bodyText": "Use the primitive long instead of Long?", "author": "wkurniawan07", "createdAt": "2020-11-08T21:05:44Z", "path": "src/e2e/java/teammates/e2e/util/EmailAccount.java", "diffHunk": "@@ -140,6 +144,18 @@ public void markAllUnreadEmailAsRead() throws IOException {\n         return messageStubs == null ? new ArrayList<>() : messageStubs;\n     }\n \n+    /**\n+     * Returns a list of up to maxResults number of unread emails from the sender.\n+     * Returns an empty list if there is no unread email from sender.\n+     */\n+    private List<Message> getListOfUnreadEmailFromSender(Long maxResults, String senderName) throws IOException {", "originalCommit": "ceeeaff1147f33a024eea6632ad56c6f72308378", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "778a2ba6e1c3fd6e674ca2b35cecf3b82b921bb1", "chunk": "diff --git a/src/e2e/java/teammates/e2e/util/EmailAccount.java b/src/e2e/java/teammates/e2e/util/EmailAccount.java\nindex 8ce3dbe5a7..34e09fabe4 100644\n--- a/src/e2e/java/teammates/e2e/util/EmailAccount.java\n+++ b/src/e2e/java/teammates/e2e/util/EmailAccount.java\n\n@@ -124,33 +89,13 @@ public final class EmailAccount {\n         return false;\n     }\n \n-    /**\n-     * Marks all unread emails in the user's inbox as read.\n-     */\n-    public void markAllUnreadEmailAsRead() throws IOException {\n-        List<Message> messageStubs = getListOfUnreadEmailOfUser();\n-\n-        for (Message messageStub : messageStubs) {\n-            markMessageAsRead(messageStub);\n-        }\n-    }\n-\n-    /**\n-     * Returns an empty list if there is no unread email of the user.\n-     */\n-    private List<Message> getListOfUnreadEmailOfUser() throws IOException {\n-        List<Message> messageStubs = service.users().messages().list(username).setQ(\"is:UNREAD\").execute().getMessages();\n-\n-        return messageStubs == null ? new ArrayList<>() : messageStubs;\n-    }\n-\n     /**\n      * Returns a list of up to maxResults number of unread emails from the sender.\n      * Returns an empty list if there is no unread email from sender.\n      */\n-    private List<Message> getListOfUnreadEmailFromSender(Long maxResults, String senderName) throws IOException {\n+    private List<Message> getListOfUnreadEmailFromSender(long maxResults, String senderEmail) throws IOException {\n         List<Message> messageStubs = service.users().messages().list(username)\n-                .setQ(\"is:UNREAD from:\" + senderName).setMaxResults(maxResults).execute()\n+                .setQ(\"is:UNREAD from:\" + senderEmail).setMaxResults(maxResults).execute()\n                 .getMessages();\n \n         return messageStubs == null ? new ArrayList<>() : messageStubs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NzM2Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r519477366", "bodyText": "TEAMMATES Admin is not hardcoded; it's one of the values inbuild.properties. That means the value needs to be obtained from test.properties.\nAlso, checking by sender email should be more foolproof, i.e. there is less likelihood of other emails we're not interested in having the same sender address than having the same sender name.", "author": "wkurniawan07", "createdAt": "2020-11-08T21:08:38Z", "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "diffHunk": "@@ -199,13 +221,12 @@ protected void verifyEmailSent(String email, String subject) {\n         try {\n             emailAccount.getUserAuthenticated();\n             int retryLimit = 5;\n-            boolean actual = emailAccount.isEmailWithSubjectPresent(subject);\n+            boolean actual = emailAccount.isRecentEmailWithSubjectPresent(subject, \"TEAMMATES Admin\");", "originalCommit": "ceeeaff1147f33a024eea6632ad56c6f72308378", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "778a2ba6e1c3fd6e674ca2b35cecf3b82b921bb1", "chunk": "diff --git a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\nindex ac3f27e837..6e6d89fbc2 100644\n--- a/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n+++ b/src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java\n\n@@ -221,11 +221,11 @@ public abstract class BaseE2ETestCase extends BaseTestCaseWithDatastoreAccess {\n         try {\n             emailAccount.getUserAuthenticated();\n             int retryLimit = 5;\n-            boolean actual = emailAccount.isRecentEmailWithSubjectPresent(subject, \"TEAMMATES Admin\");\n+            boolean actual = emailAccount.isRecentEmailWithSubjectPresent(subject, TestProperties.TEST_SENDER_EMAIL);\n             while (!actual && retryLimit > 0) {\n                 retryLimit--;\n                 ThreadHelper.waitFor(1000);\n-                actual = emailAccount.isRecentEmailWithSubjectPresent(subject, \"TEAMMATES Admin\");\n+                actual = emailAccount.isRecentEmailWithSubjectPresent(subject, TestProperties.TEST_SENDER_EMAIL);\n             }\n             assertTrue(actual);\n         } catch (Exception e) {\n"}}, {"oid": "778a2ba6e1c3fd6e674ca2b35cecf3b82b921bb1", "url": "https://github.com/TEAMMATES/teammates/commit/778a2ba6e1c3fd6e674ca2b35cecf3b82b921bb1", "message": "Improve email checks", "committedDate": "2020-11-09T06:42:55Z", "type": "commit"}, {"oid": "89075770243814001017efd8c3bd5a366d0d4a5a", "url": "https://github.com/TEAMMATES/teammates/commit/89075770243814001017efd8c3bd5a366d0d4a5a", "message": "Update E2E documetation", "committedDate": "2020-11-09T06:46:22Z", "type": "commit"}, {"oid": "995d6384e361edd90b5c38ec629ec5d0889b6197", "url": "https://github.com/TEAMMATES/teammates/commit/995d6384e361edd90b5c38ec629ec5d0889b6197", "message": "Remove infinite loop in FeedbackSubmitPage", "committedDate": "2020-11-09T06:50:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2OTQyMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10827#discussion_r520169421", "bodyText": "You should be able to use getListOfUnreadEmailFromSender here", "author": "wkurniawan07", "createdAt": "2020-11-09T22:46:04Z", "path": "src/e2e/java/teammates/e2e/util/EmailAccount.java", "diffHunk": "@@ -47,10 +43,12 @@ public void getUserAuthenticated() throws IOException {\n         // assume user is authenticated before\n         service = new GmailServiceMaker(username).makeGmailService();\n \n-        while (true) {\n+        int retryLimit = 5;\n+        while (retryLimit > 0) {\n             try {\n+                retryLimit--;\n                 // touch one API endpoint to check authentication\n-                getListOfUnreadEmailOfUser();\n+                service.users().messages().list(username).setMaxResults(1L).execute();", "originalCommit": "995d6384e361edd90b5c38ec629ec5d0889b6197", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1bb0fc302eb045df805786157174d4bffe97163", "chunk": "diff --git a/src/e2e/java/teammates/e2e/util/EmailAccount.java b/src/e2e/java/teammates/e2e/util/EmailAccount.java\nindex 34e09fabe4..bde2b9abbb 100644\n--- a/src/e2e/java/teammates/e2e/util/EmailAccount.java\n+++ b/src/e2e/java/teammates/e2e/util/EmailAccount.java\n\n@@ -48,7 +48,7 @@ public final class EmailAccount {\n             try {\n                 retryLimit--;\n                 // touch one API endpoint to check authentication\n-                service.users().messages().list(username).setMaxResults(1L).execute();\n+                getListOfUnreadEmailFromSender(1L, \"\");\n                 break;\n             } catch (HttpResponseException e) {\n                 if (e.getStatusCode() == HttpStatusCodes.STATUS_CODE_FORBIDDEN\n"}}, {"oid": "65fe7e2d64820884fd0d749f0cd3e206b3c49c26", "url": "https://github.com/TEAMMATES/teammates/commit/65fe7e2d64820884fd0d749f0cd3e206b3c49c26", "message": "Merge branch 'master' into production-server-e2e", "committedDate": "2020-11-10T23:33:42Z", "type": "commit"}, {"oid": "a1bb0fc302eb045df805786157174d4bffe97163", "url": "https://github.com/TEAMMATES/teammates/commit/a1bb0fc302eb045df805786157174d4bffe97163", "message": "Use getListOfUnreadEmailFromSender for getUserAuthenticated", "committedDate": "2020-11-11T03:14:41Z", "type": "commit"}]}